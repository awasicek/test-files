// TiQ version: ={production_utui_ut4.0.20181106.1541543650}VERSION
/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 * http://ejohn.org/blog/simple-javascript-inheritance/
 */
// Inspired by base2 and Prototype
(function(){
    var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;
    // The base Class implementation (does nothing)
    this.Class = function(){};

    // Create a new Class that inherits from this class
    Class.extend = function(prop) {
        var _super = this.prototype;

        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;

        // Copy the properties over onto the new prototype
        for (var name in prop) {
            // Check if we're overwriting an existing function
            prototype[name] = typeof prop[name] == "function" &&
                                  typeof _super[name] == "function" && fnTest.test(prop[name]) ?
                              (function(name, fn){
                                  return function() {
                                      var tmp = this._super;

                                      // Add a new ._super() method that is the same method
                                      // but on the super-class
                                      this._super = _super[name];

                                      // The method only need to be bound temporarily, so we
                                      // remove it when we're done executing
                                      var ret = fn.apply(this, arguments);
                                      this._super = tmp;

                                      return ret;
                                  };
                              })(name, prop[name]) :
                              prop[name];
        }

        // The dummy class constructor
        function Class() {
            // All construction is actually done in the initialize method
            if ( !initializing && this.initialize )
                this.initialize.apply(this, arguments);
        }

        // Populate our constructed prototype object
        Class.prototype = prototype;

        // Enforce the constructor to be what we expect
        Class.prototype.constructor = Class;

        // And make this class extendable
        Class.extend = arguments.callee;

        return Class;
    };
})();
var UtuiObject = Class.extend({

});

var Loadrule = UtuiObject.extend({

    initialize: function(id, title, status, startDate, endDate, editable, containerId){
        this.id = id;
        this.title = title;
        this.status = (typeof status === 'undefined') ? "active" : status; //default new loadrules to active
		this.startDate = startDate;
		this.endDate = endDate;
		this.editable = ((editable == false) || (editable === 'false')) ? false : true;
		this.containerId = containerId;
    }

});

var Extension = UtuiObject.extend({

	initialize: function(templateId, extId, status, title, scope, type, advExecOption) {
        this.id = templateId;
        this._id = extId;
        this.status = status || "active";
        this.title = title || "No Title";
        this.scope = scope;
        this.type = type || undefined;
        this.notes = "";
        this.publishedTargets = [];
        this.selectedTargets = utui.targets.addTargetsToObject({}, 'true');
        if (typeof advExecOption !== 'undefined'){
        	this.advExecOption = advExecOption;
        }
	}
});


var SelectItem = UtuiObject.extend({

    initialize: function(name, value){
        this.name = name;
        this.value = value;
    }

});
var DataSource = UtuiObject.extend({

	initialize: function(title, name, type, desc, id, imported, settings, context) {
		this.extensions = [];
		this.loadrules = [];
		this.tags = [];
		this.data_layer_specs = [];
		this.title = title || '';
		this.name = name || '';
		this.type = type || '';
		this.id = parseInt(id) || undefined;
		this.description = desc || '';
		this.imported = imported || undefined;
		this.settings = settings || undefined;
		this.context = context || undefined;
	}
});


var UtuiError = UtuiObject.extend({

    initialize : function(message, element) {
        this.name = "UTUI_ERROR";
        this.message = (message || "");
        this.element = element;
    },

    print : function() {
        TRACE(this.name + ": " + this.message);
    }

});



/*
 * UI elements for UTUI (global)
 * --------------------------------------- */
utui.ui = {
	// ----------------------------------------------------------------
	form: {
		readonly: {
			setFieldValue: function(id, fieldType, userValue, defaultValue) {
				var $value = $('#'+id).find('.value');

				if(fieldType === "checkbox") {
					if(userValue == 'yes' || userValue === 'true' || userValue === true) {
						$value.html('<i class="icon-ok"></i> ' + localize.t('tiq.ui.on'));
					}
					else {
						$value.html('<i class="icon-ban-circle"></i> ' + localize.t('tiq.ui.off'));
					}
				}

				if(fieldType === "text" || fieldType === "select") {
					$value.html(userValue);
				}
			}
		},
		setFieldValue: function(id, fieldType, userValue, defaultValue) {

			function setRadio(id, bValue) {
				var $radio = $('#'+id).find('input[type="radio"]');

				$radio[(bValue ? 0 : 1)].checked = true;
				$radio.button('refresh');
			}

			function setField(id, value) {
				$('#'+id).val(value);
			}

			if(fieldType === "checkbox") {
				if(userValue == 'yes' || userValue === 'true' || userValue === true) {
					setRadio(id, true);
				}
				else if(userValue == 'no' || userValue === 'false' || userValue === false) {
					setRadio(id, false);
				}
				else {
					setRadio(id, userValue || defaultValue || false);
				}
			}

			if(fieldType === "text" || fieldType === "select") {
				setField(id, userValue || defaultValue || "");
			}
		}
	},
	// ----------------------------------------------------------------
	template: {
		form: {
			readonly: {
				// ------------------------------------
				// Field rows
				rowCollectionView: function(content) {
					var v = '';
						v += '<div class="container-fluid">'+content+'</div>';
					return v;
				},
				rowItemView: function(title, content, description) {
					var _d = description || '',
						v = '';

						v += '<div class="form-group form-readonly">';
							v += '<div class="row-message"></div>';
							v += '<div class="row-fluid">';
								v += '<div class="span3">';
									// title
									v += '<div class="field-title">'+title+'</div>';
								v += '</div>';

								v += '<div class="span7">';
									v += '<div class="field-content">'+content+'</div>'
									v += '<div class="field-description">'+_d+'</div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				},
				inputItemView: function(id, key, value, fieldSuffix, statusClass) {
					var _value = value || '',
						_id = id || '',
						_key = key || '',
						_class = statusClass,
						v = '';

						v += '<span'+( _id ? ' id="'+id+'"' : '')+( _key ? ' data-key="'+key+'"' : '')+' class="readonly-field"> ',
							v += '<span class="value '+( statusClass ? statusClass : '')+'">'+_value+'</span>';
								v += '<span class="inline-label">'+(fieldSuffix || '')+'</span>';
						v += '</span>';
					return v;
				},
				codeItemView: function(id, key, value, fieldSuffix, statusClass) {
					var _value = value || '',
						_id = id || '',
						_key = key || '',
						_class = statusClass,
						v = '';

						v += '<span'+( _id ? ' id="'+id+'"' : '')+( _key ? ' data-key="'+key+'"' : '')+' class="readonly-field"> ',
							v += '<pre class="value '+( statusClass ? statusClass : '')+'" style="overflow: auto; max-width: 96%; max-height: 320px; margin-top:0">'+_value+'</pre>';
								v += '<span class="inline-label">'+(fieldSuffix || '')+'</span>';
						v += '</span>';
					return v;
				},
				selectItemView: function(id, key, value, fieldSuffix, statusClass) {
					var _value = value || '',
						_id = id || '',
						_key = key || '',
						_class = statusClass,
						v = '';

						v += '<span'+( _id ? ' id="'+id+'"' : '')+( _key ? ' data-key="'+key+'"' : '')+' class="readonly-field"> ',
							v += '<span class="value'+( _class ? ' '+statusClass : '')+'">'+_value+'</span>';
								v += '<span class="inline-label">'+(fieldSuffix || '')+'</span>';
						v += '</span>';
					return v;
				},
				toggleOnOffSwitch: function(id, key, value, fieldSuffix, statusClass) {
					var _value = '',
						_id = id || '',
						_key = key || '',
						_class = statusClass,
						v = '';

					switch(value) {
						case 'yes':
						case 'true':
						case true:
							_value = '<i class="icon-ok"></i> ' + localize.t('tiq.ui.on');
							break;
						default:
							_value = '<i class="icon-ban-circle"></i> ' + localize.t('tiq.ui.off');
							break;
					}

						v += '<span'+( _id ? ' id="'+id+'"' : '')+( _key ? ' data-key="'+key+'"' : '')+' class="readonly-field"> ',
							v += '<span class="value'+( _class ? ' '+statusClass : '')+'">'+_value+'</span>';
								v += '<span class="inline-label">'+(fieldSuffix || '')+'</span>';
						v += '</span>';
					return v;
				}
			},
			// ------------------------------------
			validationWrapper: function(field, key, message) {
				var v = '',
					_m = message || '';

					v += '<div class="input-group" data-key="'+key+'">';
						v += '<div class="input-content">';
							v += field;
						v += '</div>';
						v += '<div class="input-warning">';
							v += '<i class="icon-warning-sign" style="color:orange;"></i>';
						v += '</div>';
						v += '<div class="input-message">';
							v += _m;
						v += '</div>';
					v += '</div>';

				return v;
			},
			// ------------------------------------
			// Field rows
			rowCollectionView: function(content) {
				var v = '';
					v += '<div class="container-fluid">'+content+'</div>';
				return v;
			},
			rowItemView: function(title, content, description) {
				var _d = description || '',
					v = '';

				v += '<div class="form-group">';
					v += '<div class="row-message"></div>';
					v += '<div class="row-fluid">';
						v += '<div class="span3">';
							// title
							v += '<div class="field-title">'+title+'</div>';
						v += '</div>';

						v += '<div class="span7">';
							v += '<div class="field-content">'+content+'</div>'
							v += '<div class="field-description">'+_d+'</div>';
						v += '</div>';
					v += '</div>';
				v += '</div>';

				return v;

			},
			fieldsetCollectionView: function (fieldset, panelId, isEnabled) {
				var id, label, title, type, typeSuffix, revisionExpiration, size, example, options, defaultValue,
					_control = '', customRenderer,
					v = '';

				function isRestricted(field, key) {
					// check mobile library extension
					if (key === "enable_mobile" && !exapi.isExtensionInProfile('100030')) return true;

					// check legacy enable purge footer
					if (key === "enable_purge_footer" && (parseInt(utui.data.settings.creation) > parseInt(utui.publish.footerUsageExpiration))) return true;

					return false;
				}

				for (var key in fieldset) {
					if (!fieldset.hasOwnProperty(key)) continue;

					var field = fieldset[key];

					id = panelId + '_' + key;
					label = field.label || '';
					title = field.title || '';
					type = field.fieldType || '';
					typeSuffix = field.fieldSuffix || '';
					revisionExpiration = field.revisionExpiration || '';
					defaultValue = field.defaultValue || '';
					customRenderer = field.customRenderer;
					select2placeholder = field.select2placeholder || '';

					// Add conditional statement for showing or hiding fields
					if (isRestricted(field, key)) continue;

					if (isEnabled) {
						size = field.size || '';
						options = field.fieldOptions || [];
						example = field.example || '';

						if (type === 'checkbox') {
							_control = utui.ui.template.form.toggleOnOffSwitch(id, null, null, key);
						}
						else if (type === 'text') {
							_control = utui.ui.template.form.inputItemView(id, key, type, size, example, typeSuffix);
						}
						else if (type === 'select') {
							_control = utui.ui.template.form.selectItemView(id, key, options, typeSuffix, defaultValue, select2placeholder);
						}
						else if (type === 'radio') {
							_control = utui.ui.template.form.radioItemView(panelId, field.group, label, field.radios);
						}
						else if (type === 'checkboxGroup') {
							_control = utui.ui.template.form.checkboxGroupView(panelId, field.group, field.checkboxes)
						}
						else if (type === 'custom') {
							_control = customRenderer.getView();
							title = customRenderer.getTitle();
						}

						v += utui.ui.template.form.rowItemView(label, _control, title);
					}
					else {
						if (type === 'checkbox') {
							_control = utui.ui.template.form.readonly.toggleOnOffSwitch(id, key);
						}
						else if (type === 'text') {
							_control = utui.ui.template.form.readonly.inputItemView(id, key, null, typeSuffix);
						}
						else if (type === 'select') {
							_control = utui.ui.template.form.readonly.selectItemView(id, key, null, typeSuffix, defaultValue);
						}
						else if (type === 'custom') {
							_control = customRenderer.getView();
							title = customRenderer.getTitle();
						}

						v += utui.ui.template.form.readonly.rowItemView(label, _control, title);
					}
				}

				return v;
			},
			inputItemView: function(id, key, fieldType, fieldSize, fieldPlaceholder, fieldSuffix) {
				return '<input id="'+id+'"'+(key ? ' data-key="'+key+'"' : '')+' type="'+fieldType+'"'+(fieldSize ? ' size="'+fieldSize+'"' : '' )+''+(fieldPlaceholder ? ' placeholder="'+fieldPlaceholder+'"' : '' )+'> '+' <span class="inline-label">'+(fieldSuffix || '')+'</span>';
			},
			radioItemView: function (id, group, label, radios) {
				var v = '',
					radio, _id;

				for (var i in radios) {
					radio = radios[i];
					_id = id + radio.id;
					v += '<div><input type="radio" id="' + _id + '" name="' + group + '" value="' + radio.value + '" ' + (radio.defaultValue ? 'checked' : '') + '/><label for="' + _id + '">' + radio.label + '</label></div>';
				}

				return v;
			},
			checkboxGroupView: function (id, group, checkboxes) {
				var v = '',
					checkbox, _id;

				for (var i in checkboxes) {
					checkbox = checkboxes[i];
					_id = id + checkbox.id;
					v += '<div><input type="checkbox" id="' + _id + '" name="' + group + '" value="' + checkbox.value + '" ' + (checkbox.defaultValue ? 'checked' : '') + '/><label for="' + _id + '">' + checkbox.label + '</label></div>';
				}

				return v;
			},
			selectItemView: function(id, key, values, fieldSuffix, defaultValue, select2placeholder) {
				var v = '';
					v += '<select id="'+id+'"'+(key ? ' data-key="'+key+'"' : '')+(select2placeholder ? ' data-placeholder="'+select2placeholder+'"' : '')+'>';
					// Add an extra blank option for select2
					if (select2placeholder){
						values.unshift("");
					}
					for(var i in values) {
						if(!values.hasOwnProperty(i)) continue;

						var dataObj = values[i];

						if ($.type(dataObj) === 'object') {
							if (defaultValue && defaultValue === dataObj.value) {
								v += '<option selected value="'+dataObj.value+'">'+dataObj.label+'</option>';
							} else {
								v += '<option value="'+dataObj.value+'">'+dataObj.label+'</option>';
							}

						} else {
							if (defaultValue && defaultValue === dataObj) {
								v += '<option selected value="'+dataObj+'">'+dataObj+'</option>';
							} else {
								v += '<option value="'+dataObj+'">'+dataObj+'</option>';
							}
						}
					}
					// v += '</select> '+ (fieldSuffix || '');
					v += '</select> ';
					v += '<span class="inline-label">'+(fieldSuffix || '')+'</span>';
				return v;
			},
			toggleOnOffSwitch: function(id, onLabel, offLabel, key) {
				onLabel = onLabel || 'On';
				offLabel = offLabel || 'Off';

				var v = '';
					v += '<div id="'+id+'"'+(key ? ' data-key="'+key+'"' : '')+' class="js-toggle-switch">';
						v += '<input type="radio" id="'+id+'1" name="'+id+'" value="true"><label for="'+id+'1">' + onLabel + '</label>';
						v += '<input type="radio" id="'+id+'2" name="'+id+'" value="false"><label for="'+id+'2">' + offLabel + '</label>';
					v += '</div>';
				return v;
			}
		},

		row: {
			splitCol: function(col1, col2) {
				var v = '',
					_c1 = col1 || '',
					_c2 = col2 || '';

					v += '<div class="row-fluid">';
						v += '<div class="span6">';
							v += _c1;
						v += '</div>';
						v += '<div class="span6">';
							v += _c2;
						v += '</div>';
					v += '</div>';

				return v;
			}
		},

		accordion: function(hasSidebar, isAnimated) {
			var v = '';
				v += '<div class="accordion-container' + (isAnimated ? ' slide' : '') + (hasSidebar ? ' has-sidebar' : '') +'">';
					if(hasSidebar) {
						v += '<div class="sidebar-container">';
							v += '<div class="sidebar-header"></div>';
							v += '<div class="sidebar-body"></div>';
							v += '<div class="sidebar-footer"></div>';
						v += '</div>';
					}
					v += '<div class="main-container">';
						v += '<div class="main-header"></div>';
						v += '<div class="main-body"></div>';
						v += '<div class="main-footer"></div>';
					v += '</div>';
				v += '</div>';
			return v;
		},

		modal: function() {
			var v = '';
				v += '<div class="dialog-message"></div>';
				v += '<div class="modal-container">';
					v += '<div class="modal-header"></div>';
					v += '<div class="modal-body"></div>';
					v += '<div class="modal-footer"></div>';
				v += '</div>';
			return v;
		},

		// Panels
		panelItemView: function(namespace, slug, template) {
			var t = template || '',
				s = slug || '';

			return '<div class="tab-pane" id="'+namespace+'" data-tab-id="'+s+'">'+t+'</div>';
		},

		panelCollectionView: function(content) {
			var c = content || '';
			return '<div class="tab-content">'+c+'</div>';
		},

		// ** TODO: RENAME THIS KEY TO collapsableCompositeView
		compositeView: function(headerStr, contentStr, isAccordion, isActive) {
			var v = '';
				v += '<div class="utui-container'+(isAccordion ? ' js-accordion-container' : '')+(isActive ? ' active' : '')+'">';
					v += '<div class="utui-title-h4 '+(isAccordion ? ' js-accordion-toggle-bar utui-accordion-toggle-bar' : '')+'">';
						if(isAccordion) {
							v += '<div class="icon-container">';
							if (isActive) {
								v += '<i class="icon-caret-down"></i> ';
							} else {
                v += '<i class="icon-caret-right"></i> ';
              }
							v += '</div>';
						}
						v += headerStr;
					v += '</div>';
					v += '<div class="'+(isAccordion ? ' js-accordion-toggle-container utui-accordion-toggle-container' : '')+'">';
						v += '<div class="utui-container-description"></div>';
						v += contentStr;
					v += '</div>';
				v += '</div>';
			return v;
		},

		// Sidebar Navigation Composite
		navigationCompositeView: function(content, title) {
			var v = '';
				v += '<dl>';
					if(title) {
						v += '<dt class="title">'+title+'</dt>';
					}
						v += content;
				v += '</dl>';
			return v;
		},

		// Navigation Tabs
		tabCollectionView: function(content) {
			var c = content || '';
			return '<ul class="nav nav-tabs">'+c+'</ul>';
		},

		tabItemView: function(namespace, title, description) {
			var d = description || '';
			return '<li><a href="#'+namespace+'" class="js-navtab" data-toggle="tab" data-tab-id="'+namespace+'"><h2>'+title+ '</h2>' +(d ? '<p>'+d+'</p>' : '') + '</a></li>';
		},

		// Context Box
		contextBox: function(content, title, link) {
			var v = '';
				v += '<dl>';
					if(title) {
						v += '<dt>'+title+'</dt>';
					}
						v += '<dd>' + content + '</dd>';
					if(link) {
						v += '<dd>' + link + '</dd>';
					}
				v += '</dl>';
			return v;
		},

		contextFieldItemView: function(content, button, backgroundType) {
			var v = '',
				b = (backgroundType ? ' bg-'+backgroundType : '');

				v += '<div class="container-fluid valign-container'+b+'">';
					v += '<div class="row-fluid">';
						v += '<div class="span'+(button ? '8' : '12')+'">';
							v += content;
						v += '</div>';
						if(button) {
							v += '<div class="span4 alignright">';
								v += button;
							v += '</div>';
						}
					v += '</div>';
				v += '</div>';
			return v;
		},

		articleButton: function(title, description, type, target) {
			var v = '';

				switch(type) {
					case 'document':
						v += '<a href="#" onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container">';
							v += '<div class="utui-selection-button-icon">';
								v += '<i class="icon-file-text"></i>';
							v += '</div>';
						break;
					case 'video':
						v += '<a href="#" onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container">';
							v += '<div class="utui-selection-button-icon">';
								v += '<i class="icon-facetime-video"></i>';
							v += '</div>';
						break;
					case 'tour':
						v += '<a href="#" onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container">';
							v += '<div class="utui-selection-button-icon">';
								v += '<i class="icon-expand"></i>';
							v += '</div>';
						break;
					default:
						v += '<a href="#" onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container">';
							v += '<div class="utui-selection-button-icon">';
								v += '<i class="icon-file-text"></i>';
							v += '</div>';
						break;
				}

				v += '<div class="utui-selection-button-description">';
					v += '<h3>'+title+'</h3>';
					if(description) {
						v += '<p>'+description+'</p>';
					}
				v += '</div>';
			v += '</a>';

			return v;
		}
	},

	// Template - Wizard
	// ----------------------------------------------------------------
	templateWizard: {
		// @param (id) string = element ID
		context: function (id) {
			var v = '<div id="' + id + '_context" class="wizard-context">';
			v += '    <div class="wizard-context-header"></div>';
			v += '    <div class="wizard-context-body"></div>';
			v += '    <div class="wizard-context-footer"></div>';
			v += '</div>';
			return v;
		},
		// @param (id) string = element ID
		content: function (id) {
			var v = '<div id="' + id + '_content" class="wizard-content">';
			v += '    <div class="wizard-content-header"></div>';
			v += '    <div class="wizard-content-body"></div>';
			v += '    <div class="wizard-content-footer"></div>';
			v += '</div>';
			return v;
		}
	},

	// Dialog shell
	// ----------------------------------------------------------------
	dialog: {
		openDialogs: [],
		errorTimeout: null,
		adjustPanelHeights: function(namespace) {
			var $namespace = $('#'+namespace),
					dialogHeight = $namespace.outerHeight(),
				modalHeaderHeight = $namespace.find('.modal-header:visible').outerHeight()  || 0,
				// modalBodyHeight = $namespace.find('.modal-body:visible').outerHeight()  || 0, //Not used
				modalFooterHeight = $namespace.find('.modal-footer:visible').outerHeight()  || 0,

				mainHeaderHeight = $namespace.find('.main-header:visible').outerHeight()  || 0,
				// mainBodyHeight = $namespace.find('.main-body:visible').outerHeight()  || 0, // Not used
				mainFooterHeight = $namespace.find('.main-footer:visible').outerHeight()  || 0;

			_panelHeight = dialogHeight - modalHeaderHeight - modalFooterHeight - mainHeaderHeight - mainFooterHeight;

			// console.log('panelHeight:', _panelHeight, '\t\tdialogHeight:', dialogHeight, '\t\tmodalHeaderHeight:', modalHeaderHeight, '\t\tmodalFooterHeight:', modalFooterHeight, '\t\tmainHeaderHeight:', mainHeaderHeight, '\t\tmainFooterHeight:', mainFooterHeight)

			$namespace.find('.main-body').css({
				'height' : _panelHeight,
				'overflow' : 'auto'
			});
		},

		// ------------------------------------------------------------
		// Removes the dialog from the DOM
		// @param (namespace) string = ID of the dialog to remove
		dispose: function(namespace, callback) {
			if (callback) {
				callback();
			}

			this.openDialogs.splice(this.openDialogs.indexOf(namespace), 1);

			utui.ui.dialog.message.hide(namespace);
			$('#'+namespace).dialog('destroy').remove();
		},

		// ------------------------------------------------------------
		// Returns the dialog with the content specified
		// @param (namespace) string = ID of the dialog (user_manager_dialog)
		// @param (title) string = Title that is displayed on the dialog
		// @param (buttons) array = Buttons to be appended to the dialog
		// @param (content) string = Content displayed in the dialog
		// @param (options) json = Options to override the defaults
		show: function(namespace, title, buttons, content, options, cb) {
			if ($('#' + namespace).length === 0) {
				$('<div />', { id: namespace }).prependTo('body');
				$('<div />', { id: namespace + '_dialogContent' }).appendTo('#' + namespace);

				// Add container class
				$('#' + namespace).addClass('dialog-container');
			}

			$('#' + namespace + '_dialogContent').html(content);

			var settings = {
				title: title,
				height: 'auto',
				width: 'auto',
				modal: true,
				closeOnEscape: false,
				resizable: false,
				autoOpen: true,
				draggable: true,
				position: ['center' ,'center'],
				buttons: buttons,
				dialogClass: 'utui-dialog'
			}

			if (!$.isEmptyObject(options)) {
				$.extend(settings, options)
			}

			this.openDialogs.push(namespace);

			return $('#' + namespace).dialog(settings).on('dialogclose', function(){utui.ui.dialog.dispose(namespace, cb);});
		},

		// ------------------------------------------------------------
		message: {
			// --------------------------------------------------------
			showSuccess: function(namespace, msg, preventAutoHide) {
				utui.ui.dialog.message.show(namespace, msg, true, preventAutoHide);
			},

			// --------------------------------------------------------
			showError: function(namespace, msg, preventAutoHide) {
				utui.ui.dialog.message.show(namespace, msg, false, preventAutoHide);
			},

			// --------------------------------------------------------
			show: function(namespace, msg, isSuccess, preventAutoHide) {
				if (msg === '') return;
				clearInterval(utui.ui.dialog.errorTimeout);
				var $message = $('#'+namespace).find('.dialog-message'),
					className = isSuccess ? 'dialog-success' : 'dialog-error';

				$message.removeClass('dialog-success dialog-error').addClass(className);
				$message.html(msg).slideDown(300, function() {
					if (!preventAutoHide) {
						utui.ui.dialog.errorTimeout = setTimeout(function(){utui.ui.dialog.message.hide(namespace);}, 10000);
					}
				});
			},

			// --------------------------------------------------------
			hide: function(namespace) {
				$('#'+namespace).find('.dialog-message').removeClass('dialog-error dialog-success').html('').slideUp(0);
			}
		},

		// ------------------------------------------------------------
		disableNavButtons: function(namespace, isDisabled) {
			var $dialog = $('#' + namespace).parents('.ui-dialog');
			if (isDisabled) {
				$dialog.find('.ui-dialog-buttonpane button').attr('disabled', 'disabled').addClass('ui-state-disabled');
			} else {
				$dialog.find('.ui-dialog-buttonpane button').prop('disabled' , false).removeClass('ui-state-disabled');
			}
		},

		// ------------------------------------------------------------
		// @param (hasHeader) boolean = true if header is to be returned
		// @param (hasContext) boolean = true if context is to be returned
		body: function(hasHeader, hasContext) {
			var v = '';

			v += '<div class="dialog-message"></div>';
			v += '<table>';
			v += '	<tbody>';

			if (hasHeader) {
				v += '		<tr class="dialog-header">';
				v += '			<td></td>';
				v += '		</tr>';
			}

			v += '		<tr class="dialog-body">';

			if (hasContext) {
				v += '			<td class="dialog-context-container">';
				v += '				<div class="dialog-context-header"></div>';
				v += '				<div class="dialog-context-body"></div>';
				v += '				<div class="dialog-context-footer"></div>';
				v += '			</td>';
			}

			v += '			<td class="dialog-content-container">';
			v += '				<div class="dialog-content-header"></div>';
			v += '				<div class="dialog-content-body"></div>';
			v += '				<div class="dialog-content-footer"></div>';
			v += '			</td>';
			v += '		</tr>';
			v += '	</tbody>';
			v += '</table>';

			return $(v);
		}
	},

	// Frameless Dialog shell (does not use jQuery UI)
	// ----------------------------------------------------------------
	framelessDialog: {
		errorTimeout: null,

		// ------------------------------------------------------------
		// Removes the dialog from the DOM
		// @param (namespace) string = ID of the dialog to remove
		dispose: function(namespace, callback) {
			if (callback) {
				callback();
			}
			utui.ui.framelessDialog.message.hide(namespace);
			$('#' + namespace).remove();
			$('#' + namespace + '_dialogModalBg').remove();
		},

		// ------------------------------------------------------------
		// Hides the dialog from the DOM
		// @param (namespace) string = ID of the dialog to remove
		hide: function(namespace, callback) {
			if (callback) {
				callback();
			}

			$('#' + namespace).hide();
			$('#' + namespace + '_dialogModalBg').hide();
		},

		// ------------------------------------------------------------
		// Returns the dialog with the content specified
		// @param (namespace) string = ID of the dialog (user_manager_dialog)
		// @param (content) string = Content displayed in the dialog
		// @param (options) json = Options to override the defaults
		show: function(namespace, content, options, cb) {
			if ($('#' + namespace).length === 0) {
				$('<div />', { id: namespace, class: 'utui-frameless-dialog' }).prependTo('body');
				$('<div />', { id: namespace + '_dialogContent' }).appendTo('#' + namespace);

				$('<div />', { id: namespace + '_dialogModalBg', class: 'dialog-modal-bg'}).prependTo('body');

				// Add container class
				$('#' + namespace + '_dialogContent').addClass('dialog-container');
			}

			$('#' + namespace + '_dialogContent').html(content);

			var settings = {
				height: 'auto',
				width: 'auto'
			}

			if (!$.isEmptyObject(options)) {
				$.extend(settings, options)
			}

			// Construct dialog
			$('#' + namespace).css({
				'height' : settings.height,
				'width' : settings.width,
				'top' : '50%',
				'left' : '50%',
				'margin-top' : -(settings.height/2) + 'px',
				'margin-left' : -(settings.width/2) + 'px'
			});

			if(options.hasOwnProperty('dialogClass')) {
				$('#'+namespace).addClass(options.dialogClass);
			}
		},

		// ------------------------------------------------------------
		message: {
			// --------------------------------------------------------
			showSuccess: function(namespace, msg, preventAutoHide) {
				utui.ui.framelessDialog.message.show(namespace, msg, true, preventAutoHide);
			},

			// --------------------------------------------------------
			showError: function(namespace, msg, preventAutoHide) {
				utui.ui.framelessDialog.message.show(namespace, msg, false, preventAutoHide);
			},

			// --------------------------------------------------------
			show: function(namespace, msg, isSuccess, preventAutoHide) {
				if (msg === '') return;
				clearInterval(utui.ui.framelessDialog.errorTimeout);
				var $message = $('#'+namespace).find('.dialog-message'),
					className = isSuccess ? 'dialog-success' : 'dialog-error';

				$message.removeClass('dialog-success dialog-error').addClass(className);
				$message.html(msg).slideDown(300, function() {
					if (!preventAutoHide) {
						utui.ui.framelessDialog.errorTimeout = setTimeout(function(){utui.ui.framelessDialog.message.hide(namespace);}, 5000);
					}
				});
			},

			// --------------------------------------------------------
			hide: function(namespace) {
				$('#'+namespace).find('.dialog-message').removeClass('dialog-error dialog-success').html('').hide();
			}
		},

		// ------------------------------------------------------------
		disableNavButtons: function(namespace, isDisabled) {
			var $dialog = $('#' + namespace).parents('.ui-dialog');
			if (isDisabled) {
				$dialog.find('.ui-dialog-buttonpane button').attr('disabled', 'disabled').addClass('ui-state-disabled');
			} else {
				$dialog.find('.ui-dialog-buttonpane button').prop('disabled' , false).removeClass('ui-state-disabled');
			}
		},

		// ------------------------------------------------------------
		// @param (hasHeader) boolean = true if header is to be returned
		// @param (hasContext) boolean = true if context is to be returned
		body: function(hasHeader, hasContext) {
			var v = '';

			v += '<div class="dialog-message"></div>';
			v += '<table>';
			v += '	<tbody>';

			if (hasHeader) {
				v += '		<tr class="dialog-header">';
				v += '			<td></td>';
				v += '		</tr>';
			}

			v += '		<tr class="dialog-body">';

			if (hasContext) {
				v += '			<td class="dialog-context-container">';
				v += '				<div class="dialog-context-header"></div>';
				v += '				<div class="dialog-context-body"></div>';
				v += '				<div class="dialog-context-footer"></div>';
				v += '			</td>';
			}

			v += '			<td class="dialog-content-container">';
			v += '				<div class="dialog-content-header"></div>';
			v += '				<div class="dialog-content-body"></div>';
			v += '				<div class="dialog-content-footer"></div>';
			v += '			</td>';
			v += '		</tr>';
			v += '	</tbody>';
			v += '</table>';

			return $(v);
		}
	},

  // ----------------------------------------------------------------
  table : {
		createTable : function(id, headerRow, bodyRows){
			var v = "";
      v += '<div class="utui_table_div">';
      v += '<table id="'+id+'" class="table table-hover" style="height: unset;border-bottom: 1px solid #BBB;">';
      v += '<thead>';
      v += headerRow;
      v += '</thead>';
      v += '<tbody>';
      v += bodyRows;
      v += '</tbody>';
      v += '</table>';
      v += '</div>';
      return v;
		},
		createHeaderRow : function (coloumns) {
			var v = "";
      v += '<tr class="utui_table_header">';
      _.forEach(coloumns, function(col){
        v += '<th >'+col+'</th>';
			});
      v += '</tr>';
      return v;
		},
		/*
		* columns
		* String - Text to show
		* Object -
		*        id
		*        text
		*        data (Object key/values)
		* */
		createRow : function(id, columns){
			var v = "";
      v += '<tr '+(id ? 'id="'+id+'"' : '') + ' class="utui_table_row">';
			_.forEach(columns, function (col) {
				if (_.isString(col) ) {
          v += '<td>'+col+'</td>';
				} else {
					var data = [];
					if (col.data) {
						_.pairs(col.data, function(pair){
							data.push("data-"+pair[0]+'="'+pair[1]+'"');
						})
					}
          v += '<td '+(data.length > 0 ? data.join(" ") : "")+'>'+col.text+'</td>';
				}
      
      });
      v += '</tr>';
      return v;
		}
	},

	// Toggle DropDown Menu
	// ---------------------------------------
	// Uses:
	// utui.ui.toggleMenu('containerId')
	//
	// @param (el) string - the ID of the drop down container
	toggleMenu: function(el) {
		(function(el) {
			var $container = (typeof el === 'string') ? $('#'+el) : el,
				showMenu = function() {
					var $listToDisplay = $container.find('.js-dropdown-listing');

					// Hide all other dropdowns
					$('.js-dropdown-listing').not($listToDisplay).hide();

					// Show dropdown
					$listToDisplay.slideDown('fast');
				},
				hideMenu = function() {
					$('.js-dropdown-listing').hide();
				};

			// Click on drop-down target
			if ($container.hasClass('.js-dropdown-button')) {
				showMenu();
			} else {
				$container.on('click', '.js-dropdown-button', function(e) {
					showMenu();
				}).on('click', function(e) {
						e.stopPropagation();
					});
			}

			// Dispose listing once an item is selected
			$container.find('.js-dropdown-listing a').on('click', function(e) {
				hideMenu();
				return false;
			});

			// Disposing without click capture
			$('body').on('click', function() {
				hideMenu();
			});
		})(el);
	},

	// ----------------------------------------------------------------
	// @param (namespace) string - the ID of the dialog
	enableAccordionElements: function(namespace) {
		$('#'+namespace).find('.js-accordion-toggle-bar').on('click', function(e) {
			e.stopImmediatePropagation();

			var $el = $(this),
				$container = $el.closest('.js-accordion-container');

			if($container.hasClass('active')) {
				$container.removeClass('active');
				$el.find('.icon-caret-down').removeClass('icon-caret-down').addClass('icon-caret-right');
			}
			else {
				$container.addClass('active');
				$el.find('.icon-caret-right').removeClass('icon-caret-right').addClass('icon-caret-down');
			}
		});
	},
	convertSelectListToSelect2: function(id) {
		$('#' + id).select2({
			placeholder: 'Select...',
			matcher: function (term, text) {
				return text.toUpperCase().indexOf(term.toUpperCase()) >= 0;
			}
		});
	}
};

utui.notification = function () {
  
  var _timeout = null,
      _message = "Generic Message";
  
  var _el = 'utui-notification-bar';
  
  function _isBarInDOM() {
    if ($('#' + _el).length === 0) {
      return false;
    }
    return true;
  }
  
  function _showBar() {
    if (!_isBarInDOM()) {
      
      var $bar = $('<div />', {
        id: _el
      });
      $('body').prepend($bar);
    }
    
    $('#' + _el).html(_message);
    
    // Show
    $('#' + _el).slideDown(200);
    
    $('body').animate({
      'padding-top': '40'
    }, 200);
  }
  
  function _hideBar() {
    $('#' + _el).slideUp(200);
    
    $('body').animate({
      'padding-top': '0'
    }, 200, function () {
      $('#' + _el).remove();
    });
  }
  
  function _toggleBar() {
    if (_isBarInDOM()) {
      _hideBar();
    } else {
      _showBar();
    }
  }
  
  return {
    show  : function (message, timeout, cb) {
      _timeout = timeout;
      _message = message;
      _showBar();
    },
    hide  : function () {
      _hideBar();
    },
    toggle: function () {
      _toggleBar();
    }
  }
}()

utui.help = function () {
  //Private members
  var _communityHost = 'community.tealiumiq.com';
  var _isFirstTimeUser;
  var _isFirstTimeNotice = true;
  var _idHash = CryptoJS.SHA256(utui.login.email).toString();
  
  // ----------------------------------------------------
  var _namespace = 'helpCenter_mainDialog';
  
  // ----------------------------------------------------
  var _articles = [
    {
      id            : 0,
      title         : localize.t('tiq.help.articles.what_are_datasources.title'),
      content       : localize.t('tiq.help.articles.what_are_datasources.content'),
      type          : 'document',
      linkHref      : common.community.data_layer_tab,
      isExternalLink: true
    },
    {
      id            : 1,
      title         : localize.t('tiq.help.articles.how_to_use_loadrules.title'),
      content       : localize.t('tiq.help.articles.how_to_use_loadrules.content'),
      type          : 'document',
      linkHref      : common.community.load_rules_creation,
      isExternalLink: true
    },
    {
      id            : 2,
      title         : localize.t('tiq.help.articles.how_to_configure_tags.title'),
      content       : localize.t('tiq.help.articles.how_to_configure_tags.content'),
      type          : 'document',
      linkHref      : common.community.tags_tab,
      isExternalLink: true
    },
    {
      id            : 3,
      title         : localize.t('tiq.help.articles.what_are_profiles.title'),
      content       : localize.t('tiq.help.articles.what_are_profiles.content'),
      type          : 'document',
      linkHref      : common.community.versions_tab,
      isExternalLink: true
    },
    {
      id            : 5,
      title         : localize.t('tiq.help.articles.adding_a_tag.title'),
      content       : localize.t('tiq.help.articles.adding_a_tag.content'),
      type          : 'video',
      linkHref      : common.community.adding_a_tag,
      isExternalLink: true,
      date          : '03/21/2014'
    },
    {
      id            : 4,
      title         : localize.t('tiq.help.articles.adding_datasources.title'),
      content       : localize.t('tiq.help.articles.adding_datasources.content'),
      type          : 'video',
      linkHref      : common.community.adding_data_sources,
      isExternalLink: true,
      date          : '01/13/2014'
    }
  ];
  
  // ----------------------------------------------------
  var _dialogs = {
    // ------------------------------------------------------------
    // WELCOME SCREEN
    helpCenter                 : function () {
      // Private API
      var _namespace = 'helpCenter_dialog',
          _$template = utui.ui.framelessDialog.body(true);
      
      // --------------------------------------------------------
      // Adds the content to the template
      var _render = {
        // ----------------------------------------------------
        content: function () {
          _$template.find('.dialog-content-body').html(_view.contentBody());
          _$template.find('.dialog-header td').html(_view.contentNav());
        }
      }
      
      // --------------------------------------------------------
      // Returns the content within the template
      var _view = {
        
        // ----------------------------------------------------
        contentNav             : function () {
          var v = '';
          
          v += '<div id="' + _namespace + '_navBar" class="frameless-horizontal-tabBody dynamic">';
          v += '<div id="' + _namespace + '_highlightBg" class="active-highlight"></div>';
          v += '<div id="' + _namespace + '_welcomeBtn" data-tab="welcome" class="frameless-horizontal-tab nav-item active">' + localize.t('tiq.help.welcome') + '</div>';
          v += '<div id="' + _namespace + '_tourBtn" data-tab="tour" class="frameless-horizontal-tab nav-item">' + localize.t('tiq.help.product_tours') + '</div>';
          v += '<div id="' + _namespace + '_learningCenterBtn" data-tab="learningCenter" class="frameless-horizontal-tab nav-item">' + localize.t('tiq.help.learning_center') + '</div>';
          v += '<div id="' + _namespace + '_closeBtn" class="frameless-horizontal-tab tab-align-right tab-close"><i class="icon-remove"></i> ' + localize.t('tiq.help.close') + '</div>';
          v += '<div id="' + _namespace + '_communityBtn" class="frameless-horizontal-tab tab-align-right">' + localize.t('tiq.help.learning_community') + '</div>';
          v += '</div>';
          
          return v;
        },
        // ----------------------------------------------------
        contentBody            : function () {
          var v = '';
          
          v += '<div id="' + _namespace + '_container"></div>';
          
          return v;
        },
        // ----------------------------------------------------
        // Welcome Panel
        // ----------------------------------------------------
        welcomePanel           : function () {
          var v = '';
          
          v += '<a id="' + _namespace + '_welcomePanel"></a>';
          v += '<div id="' + _namespace + '_welcomePanel" class="utui-frameless-dialog-header" style="background:url(\'img/helpassets/macbookhands.jpg\') no-repeat;  background-size:cover">';
          v += '<div class="utui-frameless-dialog-header-titlestrip">';
          v += '<h1>' + localize.t('tiq.help.welcome') + '</h1>';
          v += '</div>';
          v += '</div>';
          
          v += '<div class="utui-section utui-section-bgGrey" style="padding-top:4px;">';
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          v += '<div class="span12">';
          v += '<h2 style="text-align:center">' + localize.t('tiq.help.welcome_panel.tealiumiq_help_center') + '</h2>';
          v += '</div>';
          v += '</div>';
          
          v += '<div class="row-fluid">';
          v += '<div class="span4">';
          v += '<a href="#" id="' + _namespace + '_welcomeTab_tourBtn" class="bigBtn bigBtn-large">';
          v += '<h2>' + localize.t('tiq.help.welcome_panel.take_a_tour') + '</h2>';
          v += '<p>' + localize.t('tiq.help.welcome_panel.guided_step_by_step') + '</p>';
          v += '</a>';
          v += '</div>';
          v += '<div class="span4">';
          v += '<a href="#" id="' + _namespace + '_welcomeTab_learningCenterBtn" class="bigBtn bigBtn-large">';
          v += '<h2>' + localize.t('tiq.help.welcome_panel.quick_start') + '</h2>';
          v += '<p>' + localize.t('tiq.help.welcome_panel.ready_to_add_tag') + '</p>';
          v += '</a>';
          v += '</div>';
          v += '<div class="span4">';
          v += '<a href="#" id="' + _namespace + '_welcomeTab_supportBtn" class="bigBtn bigBtn-large">';
          v += '<h2>' + localize.t('tiq.help.welcome_panel.contact_support') + '</h2>';
          v += '<p>' + localize.t('tiq.help.welcome_panel.submit_a_question') + '</p>';
          v += '</a>';
          v += '</div>';
          v += '</div>';
          v += '</div>';
          v += '</div>';
          
          v += '<div class="utui-section">';
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          v += '<div class="span12">';
          v += '<h1 align="center">' + localize.t('tiq.help.welcome_panel.getting_started_with_tealium') + '</h1>';
          v += '<h2 align="center">' + localize.t('tiq.help.welcome_panel.this_quick_guide') + '</h2>';
          v += '</div>';
          v += '</div>';
          
          v += '</div>';
          v += '</div>';
          
          v += '<div class="container-fluid">';
          
          v += '<div class="row-fluid">';
          
          v += '<div class="span6">';
          v += '<h2>' + localize.t('tiq.help.welcome_panel.what_is_tag_management') + '</h2>';
          v += '<p>' + localize.t('tiq.help.welcome_panel.tag_management_is_the_practice') + '</p>';
          v += '</div>';
          
          v += '<div class="span6">';
          v += '<img src="/img/hc-gs-whatistagmgmt.jpg" alt="' + localize.t('tiq.help.welcome_panel.what_is_tag_management') + '" style="width:100%;" />'
          v += '</div>';
          
          v += '</div>';
          v += '</div>';
          
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          
          v += '<div class="span6">';
          v += '<img src="/img/hc-gs-datalayer.jpg" alt="' + localize.t('tiq.help.welcome_panel.data_layer') + '" style="width:100%;" />'
          v += '</div>';
          
          v += '<div class="span6">';
          v += '<h2>' + localize.t('tiq.help.welcome_panel.the_datalayer') + '</h2>';
          v += '<p>' + localize.t('tiq.help.welcome_panel.the_datalayer_is_a_collection') + '</p>';
          v += '</div>';
          
          v += '</div>';
          v += '</div>';
          
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          
          v += '<div class="span6">';
          v += '<h2>' + localize.t('tiq.help.welcome_panel.configure_your_tags') + '</h2>';
          v += '<p>' + localize.t('tiq.help.welcome_panel.out_of_the_box') + '</p>';
          v += '</div>';
          
          v += '<div class="span6">';
          v += '<img src="/img/hc-gs-tagmanage.jpg" alt="' + localize.t('tiq.help.welcome_panel.manage_tags') + '" style="width:100%;" />'
          v += '</div>';
          
          v += '</div>';
          v += '</div>';
          
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          
          v += '<div class="span6">';
          v += '<img src="/img/hc-gs-publish.jpg" alt="Publish" style="width:100%;" />'
          v += '</div>';
          
          v += '<div class="span6">';
          v += '<h2>' + localize.t('tiq.help.welcome_panel.publishing') + '</h2>';
          v += '<p>' + localize.t('tiq.help.welcome_panel.tealiumiq_allows_you') + '</p>';
          v += '</div>';
          
          v += '</div>';
          v += '</div>';
          
          v += _view.tourPanel();
          v += _view.learningCenterPanel();
          
          return v;
        },
        // ----------------------------------------------------
        // Tour Panel
        // ----------------------------------------------------
        tourPanel              : function () {
          var v = '';
          
          v += '<div id="' + _namespace + '_tourPanel" class="utui-frameless-dialog-header" style="background:url(\'img/helpassets/primary.jpg\') no-repeat;  background-size:cover">';
          v += '<div class="utui-frameless-dialog-header-titlestrip">';
          v += '<h1>' + localize.t('tiq.help.tour_panel.product_tours') + '</h1>';
          v += '</div>';
          v += '</div>';
          
          v += '<div class="utui-section" style="min-height:330px">';
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          v += '<div class="span12">';
          v += '<div class="tour-library-container"></div>';
          v += '</div>';
          v += '</div>';
          v += '</div>';
          v += '</div>';
          
          return v;
        },
        // ----------------------------------------------------
        tourCategory           : function (str) {
          return '<h2 class="js-category-title">' + str + '</h2>';
        },
        // ----------------------------------------------------
        tourDescription        : function (str) {
          return '<p>' + str + '</p>';
        },
        // ----------------------------------------------------
        // Learning Center Panel
        // ----------------------------------------------------
        learningCenterPanel    : function () {
          var v = '';
          
          v += '<div id="' + _namespace + '_learningCenterPanel" class="utui-frameless-dialog-header" style="background:url(\'img/helpassets/ipadhands.jpg\') no-repeat;  background-size:cover">';
          v += '<div class="utui-frameless-dialog-header-titlestrip">';
          v += '<h1>' + localize.t('tiq.help.learning_panel.learning_center') + '</h1>';
          v += '</div>';
          v += '</div>';
          
          v += '<div class="utui-section">';
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          
          v += '<div class="span7">';
          v += '<h2>' + localize.t('tiq.help.learning_panel.resource_guides') + '</h2>';
          v += '<p>' + localize.t('tiq.help.learning_panel.new_to_tealiumiq') + '</p>';
          v += '<div class="article-library-container"></div>';
          v += '</div>';
          
          v += '<div class="span4 offset1">';
          v += '<h2>' + localize.t('tiq.help.learning_panel.additional_resources') + '</h2>';
          v += '<p>' + localize.t('tiq.help.learning_panel.free_learning_center_account') + '</p>';
          v += '<h3>' + localize.t('tiq.help.learning_panel.sample_resources') + '</h3>';
          v += '<ul>';
          v += '<li>' + localize.t('tiq.help.learning_panel.tracking_video') + '</li>';
          v += '<li>' + localize.t('tiq.help.learning_panel.tracking_google') + '</li>';
          v += '<li>' + localize.t('tiq.help.learning_panel.implement_on_android') + '</li>';
          v += '<li>' + localize.t('tiq.help.learning_panel.ajax_tracking') + '</li>';
          v += '</ul>';
          
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          v += '<div class="span12">';
          v += '<a href="#" id="' + _namespace + '_accessResourcesButton" class="btn btn-metro btn-blue js-access-resources-button">' + localize.t('tiq.help.learning_panel.visit_community_now') + '</a>';
          v += '</div>';
          v += '</div>';
          v += '</div>';
          
          v += '</div>';
          
          v += '</div>';
          v += '</div>';
          v += '</div>';
          
          return v;
        },
        buttonSelectionTemplate: function (title, description, type, target) {
          var v = '';
          
          switch (type) {
            case 'document':
              v += '<a href="#" onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container">';
              v += '<div class="utui-selection-button-icon">';
              v += '<i class="icon-file-text"></i>';
              v += '</div>';
              break;
            case 'video':
              v += '<a href="#" onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container">';
              v += '<div class="utui-selection-button-icon">';
              v += '<i class="icon-facetime-video"></i>';
              v += '</div>';
              break;
            case 'tour':
              v += '<a href="#" data-id="' + target + '" class="utui-selection-button-container start-tour-btn">';
              v += '<div class="utui-selection-button-icon">';
              v += '<i class="icon-expand"></i>';
              v += '</div>';
              break;
          }
          
          v += '<div class="utui-selection-button-description">';
          v += '<h3>' + title + '</h3>';
          if (typeof description !== 'undefined') {
            v += '<p>' + description + '</p>';
          }
          v += '</div>';
          v += '</a>';
          
          return v;
        }
      }
      
      // ----------------------------------------------------
      // This processes the view elements
      var _viewModel = {
        showPanel    : function (panelName) {
          $('#' + _namespace + '_container').html(_view[panelName]);
        },
        // ----------------------------------------------------
        setTourGroups: function () {
          var v = '', category, tourIndex;
          
          // Go through all tours
          for (var i in utui.tour.cat) {
            if (!utui.tour.cat.hasOwnProperty(i)) continue;
            
            category = utui.tour.cat[i],
              tourIndex = category.tour_index;
            
            // If category has entries, we'll display it in view
            if (tourIndex && tourIndex.length > 0) {
              
              v += '<div class="tour-library-section">';
              v += _view.tourCategory(category.name); // Category Title
              if (typeof category.description !== 'undefined') {
                v += _view.tourDescription(category.description); // Category Title
              }
              v += this.setTourTopics(tourIndex); // List of Topics
              v += '</div>';
              
            }
          }
          
          $('#' + _namespace + '_container').find('.tour-library-container').html(v);
        },
        // ----------------------------------------------------
        setTourTopics: function (tourList) {
          var v = '',
              tour;
          
          for (var i = 0; i < tourList.length; i++) {
            tour = _getTourInfo(tourList[i]);
            
            if (tour.hasOwnProperty('steps')) {
              v += _view.buttonSelectionTemplate(tour.name, tour.description, 'tour', tour.id);
            }
            
            if (tour.hasOwnProperty('videoURL')) {
              v += _view.buttonSelectionTemplate(tour.name, tour.description, 'video', tour.videoURL);
            }
          }
          ;
          
          return v;
        },
        // ----------------------------------------------------
        setArticles  : function () {
          var v = '',
              article;
          
          for (var i in _articles) {
            if (!_articles.hasOwnProperty(i)) continue;
            
            article = _articles[i];
            
            v += _view.buttonSelectionTemplate(article.title, article.content, article.type, article.linkHref);
          }
          
          $('#' + _namespace).find('.article-library-container').html(v);
          
        },
        
        // ----------------------------------------------------
        animateNav: function () {
          var _activeSection  = '',
              _isScrollMoving = false,
              SCROLL_SPEED    = 400;
          
          // Animates menu
          function _setNav(objName) {
            var $navItem        = $('#' + _namespace + '_' + objName + 'Btn'),
                navItemWidth    = $navItem.outerWidth(false),
                navItemPosition = $navItem.position();
            
            if (_isScrollMoving) return;
            
            _activeSection = objName;
            
            $('#' + _namespace + '_navBar').find('.nav-item').removeClass('active');
            $navItem.addClass('active');
            
            $('#' + _namespace + '_highlightBg').animate({
              width: navItemWidth + 'px',
              left : navItemPosition.left + 'px'
            }, SCROLL_SPEED);
          }
          
          // Scrolls content
          function _setScrollTo(objName) {
            var $panel      = $('#' + _namespace + '_' + objName + 'Panel'),
                $content    = $('#' + _namespace).find('.dialog-content-body'),
                topDistance = $content.scrollTop();
            
            if (_isScrollMoving) return;
            
            _isScrollMoving = true;
            
            $content.animate({
              scrollTop: $panel.position().top + Math.round(topDistance)
            }, SCROLL_SPEED, function () {
              _isScrollMoving = false;
            });
          }
          
          // Initializes view to highlight nav content
          function _init() {
            $('#' + _namespace).find('.dialog-content-body').scroll(function () {
              if (_isScrollMoving) return;
              
              var scrollDist = $('#' + _namespace).find('.dialog-content-body').scrollTop(),
                  ptNav      = $('#' + _namespace + '_tourPanel').position().top + scrollDist - 200,
                  lcNav      = $('#' + _namespace + '_learningCenterPanel').position().top + scrollDist - 200;
              
              if (scrollDist >= lcNav) {
                if (_activeSection !== 'learningCenter') {
                  _setNav('learningCenter');
                }
                ;
              } else if (scrollDist >= ptNav) {
                if (_activeSection !== 'tour') {
                  _setNav('tour');
                }
                ;
              } else {
                if (_activeSection !== 'welcome') {
                  _setNav('welcome');
                }
                ;
              }
            });
          }
          
          return {
            
            init: _init,
            
            set: function (objName) {
              _setNav(objName);
              _setScrollTo(objName);
            }
          }
        }()
      }
      
      // --------------------------------------------------------
      // Binds the UI elements
      var _bindUI = {
        init                 : function () {
          this.nav();
          this.startTourButton();
          this.supportButton();
          this.communityButton();
          this.closeButton();
          this.tourButton();
          this.learningCenterButton();
          this.accessResourcesButton();
        },
        nav                  : function () {
          $('#' + _namespace).find('.frameless-horizontal-tab').safeOn('click', _eventHandlers.onTabClick);
        },
        startTourButton      : function () {
          $('#' + _namespace).off('click', '.start-tour-btn').on('click', '.start-tour-btn', _eventHandlers.onStartTourClick)
        },
        tourButton           : function () {
          $('#' + _namespace + '_welcomeTab_tourBtn').safeOn('click', function () {
            utui.tour.startTour('tour-iq-overview', true, true);
            _public.hide();
          });
        },
        learningCenterButton : function () {
          $('#' + _namespace + '_welcomeTab_learningCenterBtn').safeOn('click', function () {
            _dialogs.quickStartDialog.show();
            _public.hide();
          });
        },
        communityButton      : function () {
          $('#' + _namespace + '_communityBtn').safeOn('click', _eventHandlers.onCommunityClick);
        },
        supportButton        : function () {
          $('#' + _namespace + '_welcomeTab_supportBtn').safeOn('click', _eventHandlers.onSupportClick);
        },
        closeButton          : function () {
          $('#' + _namespace + '_closeBtn').safeOn('click', _eventHandlers.onCloseBtnClick);
        },
        accessResourcesButton: function () {
          $('#' + _namespace + '_accessResourcesButton').safeOn('click', _eventHandlers.onCommunityClick);
        }
      }
      
      // --------------------------------------------------------
      // UI Event handlers
      var _eventHandlers = {
        // ----------------------------------------------------
        onCloseBtnClick : function () {
          utui.ui.framelessDialog.dispose(_namespace);
          
          // Show return tour only once for first time users
          if (_isFirstTimeUser && _isFirstTimeNotice) {
            utui.tour.startTour('tour-return', false, false);
            _isFirstTimeNotice = false;
          }
        },
        onStartTourClick: function (event) {
          var $el    = $(this),
              tourId = $el.data('id');
          
          utui.tour.startTour(tourId, true);
          _public.hide();
          
          return false;
        },
        onTabClick      : function (e) {
          var $el   = $(this),
              panel = $el.data('tab');
          
          _viewModel.animateNav.set(panel);
          return false;
        },
        onSupportClick  : function (e) {
          utui.help.openCommunitySupport();
          return false;
        },
        onCommunityClick: function (e) {
          utui.help.openLithiumCommunity();
          return false;
        }
      }
      
      // ----------------------------------------------------
      // Fetches the tour object based on ID
      function _getTourInfo(id) {
        for (var i in utui.tour.lib) {
          if (!utui.tour.lib.hasOwnProperty(i)) continue;
          
          if (utui.tour.lib[i].id === id) {
            return utui.tour.lib[i];
          }
        }
        return null;
      }
      
      var _public = {
        // ----------------------------------------------------
        show  : function () {
          // tour brings back up help center
          if ($('#' + _namespace).length === 1) {
            $('#' + _namespace).show();
            $('#' + _namespace + '_dialogModalBg').show();
            return false;
          }
          
          _render.content();
          
          var options = {
            width      : 850,
            height     : 520,
            dialogClass: 'utui-frameless-dialog dialog-modal-front'
          }
          
          // Show the dialog
          utui.ui.framelessDialog.show(_namespace, _$template, options);
          
          _viewModel.showPanel('welcomePanel'); // show default panel
          _viewModel.setTourGroups();
          _viewModel.setArticles();
          _viewModel.animateNav.init();
          _viewModel.animateNav.set('welcome');
          
          _bindUI.init();
          
        },
        hide  : function () {
          utui.ui.framelessDialog.hide(_namespace);
        },
        update: function () {
          _bindUI.accessResourcesButton();
        }
      }
      
      return _public;
    }(),
    quickStartDialog           : function () {
      // --------------------------------------------------------
      var _namespace = 'quickstart_dialog',
          _$template = utui.ui.dialog.body(true, false),
          _origin    = true;
      
      var _actioncolor = '#1B7E1E';
      var _laststep = 'tagmarketplace';
      var _datasort = ['tagmarketplace', 'datalayerwizard', 'savepublishdialog', 'codecenter', 'twitter'];
      var _data = {
        tagmarketplace   : {
          title      : localize.t('tiq.help.quick_start.step1'),
          icon       : 'icon-tag',
          action     : true,
          description: '<p>' + localize.t('tiq.help.quick_start.tealiumiq_marketplace') + '</p> \
                        <p style="color:' + _actioncolor + '; text-align:center; font-weight:bold">' + localize.t('tiq.help.quick_start.show_tealiumiq_marketplace') + '</p> \
                        <p>' + localize.t('tiq.help.quick_start.via_keyword_search') + '</p>',
          handler    : function () {
            $('#tabs_manage').trigger('click');
            utui.manage.marketplace.show();
          }
        },
        datalayerwizard  : {
          title      : localize.t('tiq.help.quick_start.step2'),
          icon       : 'icon-globe',
          action     : true,
          description: '<p>' + localize.t('tiq.help.quick_start.configuring_data') + '</p> \
                        <p style="color:' + _actioncolor + '; text-align:center; font-weight:bold">' + localize.t('tiq.help.quick_start.show_tealiumiq_data_layer') + '</p> \
                        <p>' + localize.t('tiq.help.quick_start.wizard_offers_collection') + '</p>',
          handler    : function () {
            $('#tabs_define').trigger('click');
            utui.define.showDefineWizard.show();
          }
        },
        savepublishdialog: {
          title      : localize.t('tiq.help.quick_start.step3'),
          icon       : 'icon-upload',
          action     : true,
          description: '<p>' + localize.t('tiq.help.quick_start.tealiumiq_allows') + '</p> \
                        <p style="color:' + _actioncolor + '; text-align:center; font-weight:bold">' + localize.t('tiq.help.quick_start.show_tealiumiq_save_dialog') + '</p> \
                        <p>' + localize.t('tiq.help.quick_start.in_the_dialog') + '</p>',
          handler    : function () {
            utui.publish.showSaveDialog().initialize()
          }
        },
        codecenter       : {
          title      : localize.t('tiq.help.quick_start.step4'),
          icon       : 'icon-code',
          action     : true,
          description: '<p>' + localize.t('tiq.help.quick_start.code_center_tool') + '</p> \
                        <p style="color:' + _actioncolor + '; text-align:center; font-weight:bold">' + localize.t('tiq.help.quick_start.show_tealiumiq_code_center') + '</p> \
                        <p>' + localize.t('tiq.help.quick_start.select_deployment_target') + '</p>',
          handler    : function () {
            utui.publish.showEnvironmentDialog().initialize()
          }
        },
        twitter          : {
          title      : localize.t('tiq.help.quick_start.first_tealiumiq_tag'),
          icon       : 'icon-twitter',
          action     : false,
          description: '<p>' + localize.t('tiq.help.quick_start.share_awesome_experience') + '</p>',
          handler    : function () {
            utui.publish.showEnvironmentDialog().initialize()
          }
        }
      };
      
      // --------------------------------------------------------
      var _view = {
        contentHeader: function () {
          var v = '';
          
          v += this.wizardNav();
          
          return v;
        },
        contentBody  : function () {
          var v = '';
          
          v += '<div class="utui-section">';
          
          v += '<div class="container-fluid">';
          v += '<div class="row-fluid">';
          v += '<div class="span12">';
          v += '<h2 id="' + _namespace + '_title">';
          v += '<i id="' + _namespace + '_icon"></i><span id="' + _namespace + '_title" class="dialog-content-headline-title"></span>';
          v += '</h2>';
          v += '<div id="' + _namespace + '_description"></div>';
          v += '</div>';
          v += '</div>';
          v += '<div class="row-fluid">';
          v += '<div class="span4 offset8">';
          v += '<a href="#" id="' + _namespace + '_button" class="btn btn-large btn-success pull-right" style="color:#fff"> ' + localize.t('tiq.help.quick_start.go') + ' <i class="icon-chevron-right"></i></a>';
          v += '</div>';
          v += '</div>';
          v += '</div>';
          
          v += '    <div class="dialog-background-icon">';
          v += '      <i id="' + _namespace + '_background"></i>';
          v += '    </div>';
          
          v += '</div>';
          return v;
        },
        wizardNav    : function () {
          var v = '';
          
          v += '<div class="wizard-navigation-container">';
          for (var i in _data) {
            if (!_data.hasOwnProperty(i)) continue;
            
            v += '<div id="' + _namespace + '_navicon_' + i + '" class="wizard-navigation-step">';
            v += '<i class="' + _data[i].icon + '"></i>';
            v += '</div>';
          }
          ;
          v += '</div>';
          
          return v;
        },
        twitterBox   : function () {
          var v        = '',
              text     = localize.t('tiq.help.quick_start.talk_about_marketing'),
              hashtags = 'tealium';
          
          v += '<textarea class="twitter-share-textarea-box" rows="3">' + text + '</textarea>';
          v += '<div class="pull-left" style="font-size:12px; color: rgb(136, 136, 136)">' + localize.t('tiq.help.quick_start.characters_left', {num: '<span id="twitterCharCount">' + (140 - text.length) + '</span>'}) + '</div>';
          v += '<a href="https://twitter.com/share?text=' + encodeURIComponent(text) + '&original_referer=&url=" class="twitter-share-button btn pull-right" data-size="large" data-count="none" data-url="tealium.com" data-hashtags="' + hashtags + '" onclick="common.utils.openWindow(this.href,\'new\',\'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=700,height=500\'); return false;" style="font-size:12px;"><i class="icon-twitter" style="color:#00abed"></i> <strong>' + localize.t('tiq.help.quick_start.tweet') + '</strong></a>';
          
          return v;
        }
      }
      
      // --------------------------------------------------------
      var _viewModel = {
        updateQuickstartPane: function (e) {
          var id = _laststep;
          if (e && e.data && e.data.id) {
            id = e.data.id;
          }
          
          utui.util.pubsub.publish(utui.constants.help_center.QUICKSTART, {
            action         : utui.constants.help_center.QUICKSTART,
            quickstart_step: id
          });
          
          // Update Icons
          $('#' + _namespace + '_background').removeClass().addClass(_data[id].icon);
          $('#' + _namespace + '_icon').removeClass().addClass(_data[id].icon);
          
          // Update Content
          $('#' + _namespace + '_title').html(_data[id].title);
          $('#' + _namespace + '_description').html(_data[id].description);
          
          // Update Order
          for (var i = 0; i < _datasort.length; i++) {
            $('#' + _namespace + '_navicon_' + _datasort[i]).removeClass('selected');
          }
          
          // rb - Not sure what this does...
          $('#' + _namespace + '_navicon_' + id).addClass('selected');
          
          _laststep = id;
          
          if (_data[id].action) {
            $('#' + _namespace + '_button').show();
          } else {
            $('#' + _namespace + '_button').hide();
          }
          
          if (id === 'twitter') {
            $('#' + _namespace + '_description').append(_view.twitterBox());
            _bindUI.twitterTextBox();
          }
        }
      }
      
      // --------------------------------------------------------
      var _bindUI = {
        navigation    : function () {
          for (var i = 0; i < _datasort.length; i++) {
            var id = _datasort[i];
            $('#' + _namespace + '_navicon_' + id).on('click', {id: id}, _viewModel.updateQuickstartPane);
          }
        },
        button        : function () {
          $('#' + _namespace + '_button').on('click', _handler.process);
        },
        twitterTextBox: function () {
          $('#' + _namespace).find('.twitter-share-textarea-box').on('keyup blur', function () {
            var $el            = $(this),
                value          = $el.val(),
                valueRemaining = 140 - value.length;
            
            // set value
            $('#' + _namespace).find('.twitter-share-button').attr('href', 'https://twitter.com/share?text=' + encodeURIComponent(value) + '&original_referer=&url=');
            
            $('#twitterCharCount').html(valueRemaining);
            
            if (valueRemaining < 0) {
              $('#twitterCharCount').css('color', 'red');
            } else {
              $('#twitterCharCount').css('color', '');
            }
          });
        }
      }
      
      // --------------------------------------------------------
      var _eventHandlers = {
        onOkBtnClick: function () {
          utui.ui.dialog.dispose(_namespace);
          
          if (_origin) {
            utui.help.showHelpCenterDialog();
          }
        }
      }
      
      // ----------------------------------------------------------------
      var _handler = {
        process : function (o) {
          //utag.link()
          utui.util.showSpinner();
          var id = _laststep;
          _data[id].handler();
          utui.util.hideSpinner();
          _laststep = _handler.nextItem();
          _viewModel.updateQuickstartPane(_laststep);
        },
        isLast  : function () {
          return (_laststep == _datasort[_datasort.length - 1]) ? true : false;
        },
        isFirst : function () {
          return (_laststep == _datasort[0]) ? true : false;
        },
        nextItem: function () {
          if (!_handler.isLast()) {
            for (var i = 0; i < _datasort.length; i++) {
              if (_laststep == _datasort[i]) {
                return _datasort[i + 1];
              }
            }
          }
          return _laststep;
        }
      }
      
      // --------------------------------------------------------
      // Adds the content to the template
      var _render = {
        // ----------------------------------------------------
        content: function () {
          _$template.find('.dialog-content-header').html(_view.contentHeader());
          _$template.find('.dialog-content-body').html(_view.contentBody());
        }
      }
      
      // --------------------------------------------------------
      var _public = {
        // --------------------------------------------------------
        show: function () {
          _render.content();
          
          var buttons = [
            {
              text : localize.t('tiq.dialog.button.close'),
              id   : _namespace + '_okBtn',
              click: _eventHandlers.onOkBtnClick,
              style: 'float:right; margin-left: 12px'
            }
          ];
          
          utui.ui.dialog.show(_namespace, localize.t('tiq.help.quick_start.quick_start'), buttons, _$template, {
            width : 520,
            height: 410
          }, _eventHandlers.onOkBtnClick);
          
          _viewModel.updateQuickstartPane();
          
          _bindUI.navigation();
          _bindUI.button();
          
          $('#' + _namespace).parent().find('.ui-dialog-buttonpane').hide();
        }
      }
      
      return _public;
    }(),
    newUserIntroDialog         : function () {
      
      var _namespace = 'newUserIntro_dialog';
      var _$template = utui.ui.framelessDialog.body();
      var _dataIndex = 0;
      var _data = [
        {
          id     : 0,
          image  : '/img/newuser/01-notagmanagement.jpg',
          caption: localize.t('tiq.help.new_user.too_many_vendor_tags')
        },
        {
          id     : 1,
          image  : '/img/newuser/02-tagmanagement.jpg',
          caption: localize.t('tiq.help.new_user.with_tealiumiq')
        },
        {
          id     : 2,
          image  : '/img/newuser/03-tagmarketplace.jpg',
          caption: localize.t('tiq.help.new_user.its_even_easier')
        },
        {
          id     : 3,
          image  : '/img/newuser/04-datalayer.jpg',
          caption: localize.t('tiq.help.new_user.tealiumiq_makes_it_fast')
        },
        {
          id     : 4,
          image  : '/img/newuser/05-loadrules.jpg',
          caption: localize.t('tiq.help.new_user.loadrules_make_it_easy')
        }
      ];
      
      // --------------------------------------------------------
      // Adds the content to the template
      var _render = {
        // ----------------------------------------------------
        content: function () {
          _$template.find('.dialog-content-body').html(_view.contentBody());
        }
      };
      
      // --------------------------------------------------------
      var _view = {
        contentBody      : function () {
          var v = '';
          
          v += '<div id="' + _namespace + '_carousel" class="utui-carousel slide">';
          
          // indicators
          v += '<ol class="utui-carousel-indicators"></ol>';
          
          // slides
          v += '<div class="utui-carousel-inner"></div>';
          
          // navigation
          v += '<a id="' + _namespace + '_prevBtn" class="utui-carousel-control b-left" href="#' + _namespace + '_carousel" data-slide="prev">&lsaquo;</a>';
          v += '<a id="' + _namespace + '_nextBtn" class="utui-carousel-control b-right" href="#' + _namespace + '_carousel" data-slide="next">&rsaquo;</a>';
          v += '</div>';
          v += '<a id="' + _namespace + '_getStartedBtn" href="#" class="btn btn-large btn-success new-user-getstarted-btn">' + localize.t('tiq.help.new_user.got_it') + '</a>';
          
          return v;
        },
        contentNav       : function () {
          var v = '';
          
          return v;
        },
        slideTemplate    : function (id, caption, imageSrc) {
          var v = '';
          
          v += '<div class="item" data-slide="' + id + '">';
          v += '<div class="utui-carousel-caption">';
          v += '<h1>' + caption + '</h1>';
          v += '</div>';
          v += '<img src="' + imageSrc + '" alt="' + caption + '" />';
          v += '</div>';
          
          return v;
        },
        indicatorTemplate: function (id) {
          var v = '';
          
          v += '<li data-target="#' + _namespace + '_carousel" data-slide-to="' + id + '"></li>';
          
          return v;
        }
      };
      
      // --------------------------------------------------------
      var _viewModel = {
        constructSlides    : function () {
          var v = '';
          
          for (var i in _data) {
            if (!_data.hasOwnProperty(i)) continue;
            
            v += _view.slideTemplate(_data[i].id, _data[i].caption, _data[i].image);
          }
          
          $('#' + _namespace).find('.utui-carousel-inner').html(v);
        },
        constructIndicators: function () {
          var v = '';
          
          for (var i in _data) {
            if (!_data.hasOwnProperty(i)) continue;
            
            v += _view.indicatorTemplate(_data[i].id);
          }
          
          $('#' + _namespace).find('.utui-carousel-indicators').html(v);
        },
        setFirstSlideActive: function () {
          $('#' + _namespace).find('.utui-carousel-inner .item:first-child').addClass('active');
          $('#' + _namespace).find('.utui-carousel-indicators li:first-child').addClass('active');
        }
      }
      
      // --------------------------------------------------------
      var _bindUI = {
        navBtns      : function () {
          $('#' + _namespace + '_nextBtn').on('click', _eventHandlers.onNextClick);
          $('#' + _namespace + '_prevBtn').on('click', _eventHandlers.onPrevClick);
          $('#' + _namespace).find('.utui-carousel-indicators li').on('click', _eventHandlers.onIndicatorClick);
        },
        getStartedBtn: function () {
          $('#' + _namespace + '_getStartedBtn').on('click', _eventHandlers.onGetStartedClick);
        }
      };
      
      // --------------------------------------------------------
      var _eventHandlers = {
        onNextClick      : function (e) {
          e.preventDefault();
          
          _moveSlide(1);
        },
        onPrevClick      : function (e) {
          e.preventDefault();
          
          _moveSlide(-1);
        },
        onGetStartedClick: function (e) {
          e.preventDefault();
          e.stopImmediatePropagation();
          
          utui.ui.framelessDialog.dispose(_namespace);
          utui.help.showHelpCenterDialog(true);
        },
        onIndicatorClick : function (e) {
          e.preventDefault();
          e.stopImmediatePropagation();
          
          var $el = $(this),
              val = $el.attr('data-slide-to');
          
          _dataIndex = +val;
          
          _showSlide(val);
        }
      };
      
      // --------------------------------------------------------
      function _moveSlide(direction) {
        switch (direction) {
          case -1:
            if (_dataIndex > 0) {
              _dataIndex += direction;
              
              _showSlide(_dataIndex);
            }
            break;
          case 1:
            if (_dataIndex < (_data.length - 1)) {
              _dataIndex += direction;
              
              _showSlide(_dataIndex);
            }
            break;
        }
      }
      
      // --------------------------------------------------------
      function _showSlide(slideNum) {
        $('#' + _namespace).find('.item').removeClass('active');
        $('#' + _namespace).find('.item[data-slide="' + slideNum + '"]').addClass('active');
        
        $('#' + _namespace).find('.utui-carousel-indicators li').removeClass('active');
        $('#' + _namespace).find('.utui-carousel-indicators li[data-slide-to="' + slideNum + '"]').addClass('active');
        
        if (+slideNum === (_data.length - 1)) {
          $('#' + _namespace + '_getStartedBtn').show();
        }
        
        _updateCarouselState();
      }
      
      // --------------------------------------------------------
      // @params (direction) int
      function _updateCarouselState() {
        if (_dataIndex === 0) {
          $('#' + _namespace + '_prevBtn').hide();
          if (_dataIndex !== (_data.length - 1)) {
            $('#' + _namespace + '_nextBtn').show();
          }
        }
        else if (_dataIndex === (_data.length - 1)) {
          $('#' + _namespace + '_prevBtn').show();
          $('#' + _namespace + '_nextBtn').hide();
        }
        else {
          $('#' + _namespace + '_prevBtn').show();
          $('#' + _namespace + '_nextBtn').show();
        }
      }
      
      // PUBLIC
      // --------------------------------------------------------
      var _public = {
        // --------------------------------------------------------
        show: function () {
          var options;
          
          _dataIndex = 0; // reset carousel index
          
          _render.content();
          
          options = {
            width      : 640,
            height     : 480,
            dialogClass: 'utui-frameless-dialog dialog-modal-front'
          };
          
          // Show the dialog
          utui.ui.framelessDialog.show(_namespace, _$template, options);
          
          _viewModel.constructIndicators();
          _viewModel.constructSlides();
          _viewModel.setFirstSlideActive();
          
          _bindUI.navBtns();
          _bindUI.getStartedBtn();
          
          _updateCarouselState();
          
        }
      }
      return _public;
    }(),
    serverToServerInquiryDialog: function () {
      // --------------------------------------------------------
      var _namespace = 'support_dialog';
      var _$template = utui.ui.dialog.body();
      
      // --------------------------------------------------------
      var _eventHandlers = {
        // ----------------------------------------------------
        onCancelBtnClick: function () {
          utui.ui.dialog.dispose(_namespace);
        }
      };
      
      // --------------------------------------------------------
      var _view = {
        content: function () {
          var v = '';
          
          v += '<div style="margin: 20px;">';
          v += '	<h2>' + localize.t('tiq.tags.support_request.dialog_h2') + '</h2>';
          v += '	<p>' + localize.t('tiq.tags.support_request.dialog_prompt', {link: '<a href="#" onclick="return utui.help.openCommunitySupport();">' + localize.t('tiq.tags.support_request.click_here') + '</a>'}) + '</p>';
          v += '</div>';
          
          return v;
        }
      };
      
      // PUBLIC
      // --------------------------------------------------------
      var _public = {
        // ----------------------------------------------------
        show: function () {
          // Title
          var title = localize.t('tiq.tags.support_request.title');
          // Content
          _$template.find('.dialog-content-body').html(_view.content());
          // Dialog buttons
          var buttons = [
            {
              text : localize.t('tiq.dialog.button.close'),
              id   : _namespace + '_closeBtn',
              click: _eventHandlers.onCancelBtnClick,
              style: 'float:right; margin-left: 12px'
            }
          ];
          
          // Show the dialog
          utui.ui.dialog.show(_namespace, title, buttons, _$template, {
            width : 520,
            height: 200
          }, _eventHandlers.onCancelBtnClick);
        }
      }
      return _public;
    }()
  };
  
  //----------------------------------------
  var _request = {
    //----------------------------------------
    loginCommunity: function (switchProduct) {
      if (!switchProduct) {
        // Login
        utui.service.get(utui.service.restapis.LITHIUM_COMMUNITY);
      } else {
        // Product-switcher
        var communityWindow = window.open('', '_blank');
        utui.service.get(utui.service.restapis.LITHIUM_COMMUNITY, {}, {},
          function (win) {
            return function (data) {
              _response.loginCommunitySuccess(data, win);
            };
          }(communityWindow),
          function (win) {
            return function (status, response) {
              _response.loginCommunityError(status, response, win);
            };
          }(communityWindow));
      }
    },
  };
  
  var _response = {
    //--------------------------------------------
    loginCommunitySuccess: function (data, win) {
      win.location.href = utui.help.getCommunityURL();
    },
    
    //--------------------------------------------
    loginCommunityError: function (status, response, win) {
      win.location.href = window.location.protocol + '//' + window.location.host + '?tlc=y';
    }
  };
  
  //----------------------------------
  // @param "tabName" - the tab namespace
  // @param {articles} - Articles object
  // @param {context} - Header and Description
  // @param "section" - the tab subnamespace
  function _initHelpTab(tabName, articles, context, section) {
    
    var _namespace = (section) ? tabName + '_' + section : tabName,
        _articles  = articles,
        _context   = context,
        _section   = section;
    
    // ----------------------------------------------------
    var _view = {
      ribbon                 : function () {
        var v = '';
        v += '<div id="' + _namespace + '_intro_toggleBtn" class="tab-intro-ribbon">';
        v += '<i class="icon-question"></i>';
        v += '</div>';
        return v;
      },
      // ----------------------------------------------------
      splash                 : function () {
        var v = '';
        v += '<div id="' + _namespace + '_intro" class="tab-intro">';
        v += '  <div class="helpPanel_wrapper container-fluid">';
        v += '    <div class="helpPanel">';
        v += '      <div class="helpPanel-icon">';
        v += '        <div class="tab-intro-colgraphic"><div class="tab-intro-colgraphic-icon"><i class="' + _getIconClass(_namespace) + ' tab_icon_' + _namespace + '"></i></div></div>';
        v += '      </div>';
        v += '      <div class="helpPanel-description">';
        v += '        <h2>' + _context.header + '</h2>';
        v += '        <p>' + _context.body + '</p>';
        v += '        <div class="article-library-container"></div>'
        v += '      </div>';
        v += '      <div class="helpPanel-links">';
        v += '        <h3>' + localize.t('tiq.help.community_links') + '</h3>';
        v += '        <div class="article-quicklinks-container"></div>';
        v += '      </div>';
        v += '    </div>';
        v += '  </div>';
        v += '</div>';
        return v;
      },
      // ----------------------------------------------------
      buttonSelectionTemplate: function (title, description, type, target) {
        var v = '';
        
        switch (type) {
          case 'document':
            v += '<div onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container hyper">';
            v += '<div class="utui-selection-button-icon">';
            v += '<i class="icon-file-text"></i>';
            v += '</div>';
            break;
          case 'video':
            v += '<div onclick="utui.help.openCommunityLink(\'' + target + '\'); return false;" class="utui-selection-button-container hyper">';
            v += '<div class="utui-selection-button-icon">';
            v += '<i class="icon-facetime-video"></i>';
            v += '</div>';
            break;
        }
        
        v += '<div class="utui-selection-button-description">';
        v += '<h3 class="utui-selection-button-title">' + title + '</h3>';
        if (typeof description !== 'undefined') {
          v += '<p>' + description + '</p>';
        }
        v += '</div>';
        v += '</div>';
        
        return v;
      }
    }
    
    // ----------------------------------------------------
    var _viewModel = {
      // ----------------------------------------------------
      setArticles     : function () {
        var v = '';
        
        v += '<div class="row-fluid">';
        
        for (var i in _articles) {
          if (!_articles.hasOwnProperty(i)) continue;
          
          v += _view.buttonSelectionTemplate(_articles[i].title, _articles[i].content, _articles[i].type, _articles[i].linkHref);
        }
        
        v += '</div>';
        
        $('#' + _namespace + '_intro').find('.article-quicklinks-container').html(v);
      },
      setCaretQuestion: function () {
        $('#' + _namespace + '_intro_toggleBtn').find('i').attr('class', 'icon-question');
      },
      setCaretUp      : function () {
        $('#' + _namespace + '_intro_toggleBtn').find('i').attr('class', 'icon-caret-up');
      },
      showHelp        : function () {
        $('#' + _namespace + '_intro').slideDown(200);
        _viewModel.setCaretUp();
      },
      hideHelp        : function () {
        $('#' + _namespace + '_intro').slideUp(200);
        _viewModel.setCaretQuestion();
      }
    }
    
    // ----------------------------------------------------
    var _bindUI = {
      // ----------------------------------------------------
      closeBtn: function () {
        $('#' + _namespace + '_intro_toggleBtn').on('click', _eventHandlers.onToggleBtnClick);
      },
      linkBtn : function () {
        $('#' + _namespace + '_intro').find('.utui-selection-button-container').on('click', _eventHandlers.onLinkBtnClick);
      }
    }
    
    // ----------------------------------------------------
    var _eventHandlers = {
      // ----------------------------------------------------
      onToggleBtnClick: function (e) {
        e.stopImmediatePropagation();
        e.preventDefault();
        
        if ($('#' + _namespace + '_intro').is(':visible')) {
          _viewModel.hideHelp();
          setTabState(false);
        } else {
          _viewModel.showHelp();
          setTabState(true);
        }
        
        setTimeout(utui.profile.consoleHeight, 210);
      },
      
      onLinkBtnClick: function (e) {
        var $el = $(this);
        utui.help.openCommunityLink($el.attr('href'));
      }
      
    }
    
    function _getIconClass(tabName) {
      if (!tabName) return false;
      
      switch (tabName) {
        case utui.manage.id:
          return "icon-tag";
          break;
        case utui.customizations.id:
          return "icon-wrench";
          break;
        case utui.loadrules.id:
          return "icon-book";
          break;
        case utui.define.id:
          return "icon-globe";
          break;
        case utui.define.dataLayerSpecs.id:
          return "icon-file-text";
          break;
        case 'publish':
          return "icon-time";
          break;
        case 'dashboard_tag_usage':
          return "icon-bar-chart";
          break;
        case 'reports_audits':
          return "icon-bar-chart";
          break;
        case 'reports_manual':
          return "icon-bar-chart";
          break;
        case utui.siteVerify.id:
          return "icon-beaker";
          break;
        case utui.privacyManagement.id:
          return "icon-eye-close";
          break;
        default:
          return "";
      }
    }
    
    //----------------------------------
    function setTabState(isHelpOpen) {
      var localData = JSON.parse(utui.util.storage.loadLocal(_idHash));
      
      localData.tabState[_namespace].help = isHelpOpen;
      
      utui.util.storage.storeLocal(_idHash, JSON.stringify(localData));
    }
    
    // ----------------------------------------------------
    function _renderTabState() {
      if (typeof utui.util.storage.loadLocal(_idHash) === 'undefined') return;
      
      var localData = JSON.parse(utui.util.storage.loadLocal(_idHash));
      
      // If we have an existing state, check the state and show only if true
      if (localData && localData.hasOwnProperty('tabState')) {
        if (localData.tabState[_namespace].help) {
          $('#' + _namespace + '_intro').show();
          _viewModel.setCaretUp();
        }
      }
      // If we do not have an existing state, show anyway
      else {
        $('#' + _namespace + '_intro').show();
        _viewModel.setCaretUp();
      }
      
      if (utui.help.isHelpTabStateActive(_namespace) && !$('#' + _namespace + '_intro').is(':visible')) {
        $('#' + _namespace + '_intro_toggleBtn').trigger('click');
      }
    }
    
    // ----------------------------------------------------
    // Inject into DOM if does not exist
    if ($('#' + _namespace + '_intro').length < 1) {
      
      if (_namespace === 'reports_audits' || _namespace === 'reports_manual' || _namespace === 'dashboard_tag_usage') {
        $('#' + _namespace).prepend(_view.splash());
        $('#' + _namespace).prepend(_view.ribbon());
      }
      else if (_namespace === utui.define.id) {
        $('#tabs-' + _namespace).find('.' + _namespace + '.utui-tab-content').prepend(_view.splash());
        $('#tabs-' + _namespace).find('.' + _namespace + '.utui-tab-content').prepend(_view.ribbon());
      }
      else if (_namespace === utui.define.dataLayerSpecs.id ||
        _namespace === utui.siteVerify.id ||
        _namespace === utui.privacyManagement.id) {
        $('#tabs_' + _namespace).prepend(_view.splash());
        $('#tabs_' + _namespace).prepend(_view.ribbon());
      }
      else {
        $('#tabs-' + _namespace).prepend(_view.splash());
        $('#tabs-' + _namespace).prepend(_view.ribbon());
      }
      // Draw early access feature if necessary
      utui.util.pubsub.publish(utui.constants.help.INTRO_INIT, _namespace);
    }
    
    // ----------------------------------------------------
    // Init
    _viewModel.setArticles();
    _bindUI.linkBtn();
    _bindUI.closeBtn();
    _renderTabState();
    return {
      hideHelp:function(){
        _viewModel.hideHelp();
        setTabState(false);
      },
      showHelp: function(){
        _viewModel.showHelp();
        setTabState(true);
      }
    }
  }
  
  //==========PUBLIC API=============
  var _public = {
    
    //--------------------------------------------
    initLithiumCommunity: function () {
      _request.loginCommunity();
    },
    
    //--------------------------------------------
    openLithiumCommunity: function () {
      _request.loginCommunity(true);
    },
    
    //--------------------------------------------
    getCommunityURL: function () {
      return 'https://' + (gAppConfig.community_host || _communityHost);
    },
    
    //--------------------------------------------
    openCommunitySupport: function () {
      var freshdeskUrl = gAppConfig.tealium_support_desk_url;
      utui.help.openCommunityLink(freshdeskUrl, '_blank');
      utui.util.storage.storeLocal('utui.freshdesk.user', utui.login.email);
      return false;
    },
    
    showHelpCenterDialog: function (isFirstTimeUser) {
      if (typeof _isFirstTimeUser === "undefined") {
        _isFirstTimeUser = (isFirstTimeUser) ? true : false;
      }
      
      _dialogs.helpCenter.show();
    },
    
    showNewUserIntro: function () {
      _dialogs.newUserIntroDialog.show();
    },
    
    //--------------------------------------------
    showServerToServerInquiryDialog: function () {
      _dialogs.serverToServerInquiryDialog.show();
    },
    
    initHelpTab: _initHelpTab,
    
    isHelpTabStateActive: function (tabName) {
      var obj = JSON.parse(utui.util.storage.loadLocal(_idHash));
      
      if (obj.tabState[tabName] && obj.tabState[tabName].hasOwnProperty('help')) {
        return obj.tabState[tabName].help;
      }
      
      return null;
    },
    
    openCommunityLink: function (url, name) {
      if (url) {
        common.utils.openWindow(url, name || '_blank');
        
      }
      return false;
    }
  }
  
  return _public;
}();

utui.validation = function() {

	// ---------------------------------
	// These categories will be tested
	var _typeCollection = ['manage','customizations','loadrules'],
		_templateAccordion = utui.ui.template.accordion;

	// ---------------------------------
	// Used as the global storage for validation
	var _data = {};

	// -----------------------------------
	function _constructData() {
		for(var key in _typeCollection) {
			_data[ _typeCollection[key] ] = {};
		}
	}

	// -----------------------------------
	function _setTopLevelNavStatus(tabId, isShow) {
		var $el = $('#tabs_'+tabId).find('.tab-warning-signal');

		if(isShow) {
			return $el.addClass('active');
		}
		return $el.removeClass('active');
	}

	// -----------------------------------
	function _renderCautionOnTabs() {
		var collection,
			category;

		for(var key in _typeCollection) {
			category = _typeCollection[key];

			collection = _data[ category ];

			if(utui.util.sizeOf(collection) > 0) {
				_setTopLevelNavStatus(category, true);
			}
			else {
				_setTopLevelNavStatus(category, false);
			}
		}
	}

	// -----------------------------------
	// Refreshes all accordion views
	function _runValidationOnAllTabs() {

		// reconstruct data
		_constructData();

		// reconstruct data
		dsapi.getAllDataSourceSelection();

		// runs customizations accordion status
		utui.customizations.renderCautionOnAccordions();

		// runs manage accordion status
		utui.manage.renderCautionOnAccordions();

		// runs loadrules accordion status
		utui.loadrules.view.renderCautionOnAccordions();

		// set navigation status
		_renderCautionOnTabs();

	}


	// -----------------------------------
	function _getIdsWithDependencyItems(instanceType, instanceId) {
		var collection = _public.getMap(instanceType, instanceId),
			resultStack = [],
			errorItem;

		for(var key in collection) {
			errorItem = collection[key];

			if(errorItem.reference) {
				resultStack.push(errorItem.key);
			} else {
				if(errorItem.key && errorItem.key.indexOf('loadrule:') === 0) {
					resultStack.push(errorItem.key.split(':')[1]);
				}
			}

		}

		return resultStack;
	}

	// -----------------------------------
	function _existInValidationMap(instanceType, instanceId, instanceKey) {
		// arguments.length
		// if 2 - id exists
		// if 3 - key exists
		var result,
			keyCollection;

		if(!~_typeCollection.indexOf(instanceType)) return null;

		// ----------
		// check if key within an instance has errors
		if(instanceKey) {
			// if instance exists
			if(typeof _data[instanceType][instanceId] !== 'undefined') {
				keyCollection = _data[instanceType][instanceId];

				for (var i = keyCollection.length - 1; i >= 0; i--) {
					if(keyCollection[i].key === instanceKey) {
						return true;
					}
				};
				return false;
			}
			// if instance doesn't exist, we're safe to say no.
			else if(_data[instanceType]) {
				return false;
			}
		}
		// ----------
		// check if an instance has errors
		else if(typeof instanceId !== 'undefined') {
			return !$.isEmptyObject(_data[instanceType][instanceId]);
		}

		// check if category has errors
		return !$.isEmptyObject(_data[instanceType]);
	}

	// ------------------------------------
	var _dialog = {
		// ------------------------------------
		saveValidation: function() {
			// ------------------------------------
			var _namespace = 'save_validation',
				_$template = utui.ui.dialog.body(),
				_saveBtnFunction,
				_version;

			// ------------------------------------
			var _view = {
				header: function(count) {
					var v = '';
						v += '<div class="container-fluid">';
							v += '<div class="row-fluid">';
								v += '<div class="span2 aligncenter"><i class="icon-warning-sign" style="font-size: 46px;line-height: 72px;"></i></div>';
								v += '<div class="span10">';
									v += '<h2 style="margin-top: 18px;">'+localize.t('tiq.validation.save_dialog.detected_headline')+'</h2>';
								v += '</div>';
							v += '</div>';
						v += '</div>';
					return v;
				},
				footer: function() {
					var v = '';
						v += '<div class="container-fluid">';
							v += '<div class="row-fluid">';
								v += '<div class="span12 alignright">';
									v += '<div class="section-padded"><input type="checkbox" id="'+_namespace+'_proceedChkbox" /> <label for="'+_namespace+'_proceedChkbox">'+localize.t('tiq.validation.save_dialog.proceed_msg')+'</label></div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';
					return v;
				},
				errorItemView: function(message, key) {
					var v = '';
						v += '<div class="error-item">';
							v += '<div class="message">'+message+'</div>';
							v += '<div class="key">'+key+'</div>';
						v += '</div>';
					return v;
				},
				instanceItemView: function(instanceObj, id, subject) {
					var v = '';
						v += '<div class="instance-composite-container">';
							v += '<div class="instance-header">';
								v += '<div class="row-fluid">';
									v += '<div class="title span5"><span style="font-size: 16px; line-height: 26px; margin-right: 6px; color: #999;">'+_getSubjectIcon(subject)+'</span> '+_viewModel.getTitleById(id, subject)+'</div>';
									v += '<div class="type span4">'+_viewModel.getTypeById(id, subject)+'</div>';
									v += '<div class="error-count span2"><i class="icon-warning-sign"></i> x '+instanceObj.length+'</div>';
									v += '<div class="id span1"><div class="uid-container">'+id+'</div></div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';
					return v;
				}
			};

			function _getSubjectIcon(subject) {
				switch(subject) {
					case "customizations":
						return '<i class="icon-wrench"></i>';
						break;
					case "dashboard":
						return '<i class="icon-sitemap"></i>';
						break;
					case "define":
						return '<i class="icon-globe"></i>';
						break;
					case "loadrules":
						return '<i class="icon-book"></i>';
						break;
					case "manage":
						return '<i class="icon-tag"></i>';
						break;
					case "publish":
						return '<i class="icon-time"></i>';
						break;
					default:
						return subject;
						break;
				}
			}

			// ------------------------------------
			var _viewModel = {
				// ------------------------------------
				mainFrame: function() {
				},
				// ------------------------------------
				getCategoryNameBySlug: function(slug) {
					switch(slug) {
						case 'customizations': return localize.t('tiq.validation.extensions');
						case 'manage': return localize.t('tiq.validation.tags');
						case 'loadrules': return localize.t('tiq.validation.loadrules');
					}
				},
				// ------------------------------------
				getTitleById: function(id, category) {
					switch(category) {
						case 'customizations':
							return exapi.getTitle(id);
						case 'manage':
							return tagapi.getTitle(id);
						case 'loadrules':
							return lrapi.getTitle(id);
						default:
							return '['+localize.t('tiq.validation.unknown')+']';
					}
				},
				// ------------------------------------
				getTypeById: function(id, category) {
					switch(category) {
						case 'customizations':
							var extObj = exapi.getObjectByExtensionId(id),
								templateObj = exapi.getTemplateObject(extObj.id);

							return templateObj.title;
						case 'manage':
							var tagObj = tagapi.getObjectByTagId(id);

							return tagObj.tag_name;
						case 'loadrules':
							return localize.t('tiq.validation.loadrule');
						default:
							return '['+localize.t('tiq.validation.unknown')+']';
					}
				},
				// ------------------------------------
				getListingView: function() {
					var errorCollection = utui.validation.data(),
						v = '',
						instanceType,
						instanceObj,
						keyError;

					for(var subject in errorCollection) {
						instanceType = errorCollection[subject];

						if(utui.validation.getCount(subject) === 0) continue;

						v += '<div class="validation-category-container">';
							v += '<div class="category-name">'+localize.t('tiq.validation.save_dialog.within_tab', { tabname: _viewModel.getCategoryNameBySlug(subject) })+'</div>';

							v += '<div class="category-listing">';

							for(var id in instanceType) {
								instanceObj = instanceType[id];

								v += _view.instanceItemView(instanceObj, id, subject);
							}
							v += '</div>';

						v += '</div>';
					}

					return v;
				}
			};

			// ------------------------------------
			var _eventHandlers = {
				// ------------------------------------
				onProceedCheckboxClick: function(e) {
					var $el = $(this);

					if(this.checked) {
						enableSaveBtn();
					}
					else {
						disableSaveBtn();
					}
				},
				// ------------------------------------
				onCloseBtnClick: function(e) {
					$('#'+_namespace).find('.main-body').empty();
					utui.ui.dialog.dispose(_namespace);
				},
				// ------------------------------------
				onSaveBtnClick: function(e) {
					$('#'+_namespace).find('.main-body').empty();
					_saveBtnFunction();
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_templateAccordion(false, false));
				}
			}

			// ------------------------------------
			function disableSaveBtn() {
				$('#'+_namespace+'_saveBtn').addClass('ui-state-disabled').off('click');
			}

			// ------------------------------------
			function enableSaveBtn() {
				$('#'+_namespace+'_saveBtn').removeClass('ui-state-disabled').on('click', _eventHandlers.onSaveBtnClick);
			}

			// ------------------------------------
			function init() {
				_render.content();

				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.validation.buttons.go_back'),
						id: _namespace+'_closeBtn',
						click: _eventHandlers.onCloseBtnClick,
						style: 'float:left; margin-left: 12px'
					},
					{
						text: localize.t('tiq.validation.buttons.continue_save_publish'),
						id: _namespace+'_saveBtn',
						click: _eventHandlers.onSaveBtnClick,
						style: 'float:right; margin-right: 12px'
					}
				];

				utui.ui.dialog.show(_namespace, localize.t('tiq.validation.save_dialog.title'), buttons, _$template, { width: 640, height: 524 }, _eventHandlers.onCloseBtnClick);
			}

			// ------------------------------------
			function render() {
				var count = utui.validation.getCount();
				var $namespace = $('#'+_namespace);

				$namespace.find('.main-header').html( _view.header(count) );
				$namespace.find('.main-body').html('<div class="container-fluid">' + _viewModel.getListingView() + '</div>');
				$namespace.find('.main-footer').html( _view.footer() );

				disableSaveBtn();

				// bind
				$('#'+_namespace+'_proceedChkbox').safeBind('click', _eventHandlers.onProceedCheckboxClick);

				utui.ui.dialog.adjustPanelHeights(_namespace);
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				show: function(saveBtnFunction) {
					_saveBtnFunction = saveBtnFunction || utui.publish.showSaveDialog().initialize;

					init();
					render();
				}
			}

			return _public;
		}()
	};


	function init() {
		_constructData();
	}


	// TODO - add for profile change
	utui.util.pubsub.subscribe(utui.constants.lifecycle.CORE_RESOURCES_LOADED, init, this);
	utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _runValidationOnAllTabs, this);
	utui.util.pubsub.subscribe(utui.constants.profile.LIBRARY_IMPORT_FINISHED, _runValidationOnAllTabs, this);

	utui.util.pubsub.subscribe(utui.constants.variables.ADDED, _runValidationOnAllTabs, this);
	utui.util.pubsub.subscribe(utui.constants.variables.UPDATED, _runValidationOnAllTabs, this);
	utui.util.pubsub.subscribe(utui.constants.variables.REMOVED, _runValidationOnAllTabs, this);

	var _public = {

		// initialize / resets validation
		init: init,

		data: function() {
			return _data
		},
		getMap: function(instanceType, instanceId, instanceKey) {
			var keyCollection;

			if(instanceKey) {
				keyCollection = _data[instanceType][instanceId];

				for (var i = 0; i < keyCollection.length; i++) {
					if(keyCollection[i].key === instanceKey) {
						return keyCollection[i];
					}
				};
			}
			else if(instanceId) {
				return _data[instanceType][instanceId];
			}
			else if(instanceType) {
				return _data[instanceType];
			}

			return _data;
		},
		getMessageFromVarReference: function(instanceType, instanceId, varReference) {
			if(arguments.length < 3) return null;

			var mapping = this.getMap(instanceType, instanceId);

			for(var key in mapping) {
				if(mapping[key].reference === varReference) {
					return mapping[key].message;
				}
			}

			return null;
		},
		setValidation: function(instanceType, instanceId, key, message, errorType, itemReference) {
			var obj = {
				key: key,
				message: message,
				type: errorType
			};

			if(!_data[instanceType].hasOwnProperty(instanceId)) {
				_data[instanceType][instanceId] = [];
			}

			if(_existInValidationMap(instanceType, instanceId, key)) return _data[instanceType][instanceId];

			// rb - if there's a missing variable, make note of it (in case we add that variable later and need to dismiss the error)
			if(errorType === 'missing') {
				obj = $.extend(obj, { reference: itemReference });
			}

			if(errorType === 'duplicate') {
				obj = $.extend(obj, { reference: itemReference });
			}

			_data[instanceType][instanceId].push(obj);

			return _data[instanceType][instanceId];
		},
		removeInstanceByTypeAndId: function(instanceType, instanceId) {
			if(typeof instanceType === 'undefined' || typeof instanceId === 'undefined') return null;

			if(_data[instanceType][instanceId]) {
				delete _data[instanceType][instanceId];
				return _data[instanceType];
			}

			return null;
		},
		removeKeyFromInstanceId: function(instanceType, instanceId, instanceKey) {
			var keyCollection,
				result;

			if(_existInValidationMap(instanceType, instanceId, instanceKey)) {
				keyCollection = _data[instanceType][instanceId];

				for (var i = keyCollection.length - 1; i >= 0; i--) {
					if(keyCollection[i].key === instanceKey) {
						result = keyCollection.splice(i, 1);

						// if there's nothing left in the object, delete it entirely
						if(keyCollection.length === 0) {
							this.removeInstanceByTypeAndId(instanceType, instanceId);
						}

						return keyCollection;
					}
				};
			}

			// doesn't exist
			return null;
		},
		message: {
			missingVariable: function(varName) {
				if(varName) {
					return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.missing_variable', { datasource: utui.util.safeEscape(varName) });
				}
				return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.select_variable');
			},
			missingLoadrule: function() {
				return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.missing_loadrule');
			},
			duplicateEntry: function(varName) {
				return '<i class="icon-warning-sign" style="color:orange;"></i> ' +localize.t('tiq.validation.message.duplicate_variable', { datasource: utui.util.safeEscape(varName) });
			},
			blankEntry: function() {
				return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.blank_variable');
			}
		},

		getCount: function(instanceType, instanceId) {
			var mapping = this.getMap(instanceType, instanceId),
				count = 0;

			// specified instance arg passed - get count for specified instance
			if(instanceId) {
				if(typeof _data[instanceType][instanceId] !== 'undefined') {
					return mapping.length;
				}
				else {
					return null;
				}
			}
			// category arg passed - get count for category instances only
			else if (instanceType) {
				for(var key in mapping) {
					count += mapping[key].length;
				}
				return count;
			}


			// no args passed - get count for total number of instances (not the errors contained in them)
			for(var category in mapping) {
				count += utui.util.sizeOf(mapping[category]);
			}
			return count;
		},

		runValidationOnAllTabs: _runValidationOnAllTabs,

		getIdsWithDependencyItems: _getIdsWithDependencyItems,

		hasUnresolvedDependency: function(instanceType, instanceId, inputName) {
			var dependencyItems = utui.validation.getIdsWithDependencyItems(instanceType, instanceId);

			if(typeof inputName !== 'undefined') {
				if(~dependencyItems.indexOf(inputName)) return true;
			} else {
				return !$.isEmptyObject(dependencyItems);
			}

			return false;
		},

		resolveMissingVariables: function(variableReference) {
			var validationData = utui.validation.getMap(),
				resolveStack = [],
				categoryCollection,
				errorCollection,
				errorEntry;


			for(var category in validationData) {
				categoryCollection = validationData[category];

				for(var id in categoryCollection) {
					errorCollection = categoryCollection[id];

					for(var i in errorCollection) {
						errorEntry = errorCollection[i];

						if(errorEntry.type === 'missing' && errorEntry.reference === variableReference) {
							resolveStack.push({
								category: category,
								id: id,
								key: errorEntry.key,
								reference: variableReference
							});
						}
					};
				}
			};

			for (var i = resolveStack.length - 1; i >= 0; i--) {
				utui.validation.removeKeyFromInstanceId(resolveStack[i].category, resolveStack[i].id, resolveStack[i].key);
			};
		},

		/*
		 * on global_save click
		 */
		hasErrors: function() {
			if(this.getCount() > 0) {
				return true;
			}
			return false;
		},
		showSaveValidation: _dialog.saveValidation.show,

		/*
		 * Applies high-level validation on UI
		 */
		renderCautionOnTabs: _renderCautionOnTabs,
	};

	return _public;
}();

utui.dashboard = function() {
//	"use strict";
	var _namespace = 'my_site',
		_$templateContext = $('#my_site_context'),
		_$content = $('#my_site_content'),
		TAB_SUMMARY = 'my_site_site_summary_menu',
		TAB_TAGS = 'tags',
		TAB_AUDITS = 'audits',
		TAB_MANUAL = 'manual',
		TAB_VERIFY = 'my_site_site_verify_menu',
		TAB_PRIVACY = 'my_site_site_privacy_management_menu',
		_selectedTab = TAB_SUMMARY,
		_errorCodeMap = {
			401: localize.t('tiq.dashboard.error.401')
		};

	// Public API
	var _public = {
		id: 'dashboard',

	clear: function () {},
	load: function () {
        $('#privacy_policy').click(function(e){e.stopPropagation();}); //stop so tab doesn't capture click event

		// Reload dashboard summary when a profile is loaded
		utui.util.pubsub.subscribe(utui.constants.profile.LATEST_VERSION_CHANGED, this.onLatestVersionChanged, this);
		utui.util.pubsub.subscribe(utui.constants.account.LOADED, this.showSiteAudits, this);
	},
	// Not needed since we show when the profile is loaded (this.onLatestVersionChanged)
	show: function () {
		var selectedTab = _$templateContext.find('li.selected a').attr('id');

		if (selectedTab === TAB_SUMMARY) {
			// necessary to fix known bug with sizing of revision tree on summary tab
			this.initSiteSummary.show(true);
		} else if (selectedTab === TAB_VERIFY || selectedTab === TAB_PRIVACY) {
			_$templateContext.find('#' + selectedTab).trigger('click')
		}
	},

	showSiteAudits: function () {
		if (!utui.util.isTealiumUser() && !utui.account.auditEnabled) {
            $('#my_site_site_map_scans_menu').hide();
            $('#my_site_site_scan_companion_menu').hide();
        }
	},

	onLatestVersionChanged: function () {
		utui.dashboard.initSiteSummary.show(true);
	},
	shortcutLink: function (a) {
		TRACE('|| utui.dashboard.shortcutLink');

		//Remove the tag name for mapped variables
		var b = a.split(':');
		if (b.length > 2 && b[0] == 'Map') {
			a = "";
			for (i = 0; i < b.length; i++) {
				if (i != 1) {
					a += ':' + b[i];
				}
			}
			a = a.substring(1, a.length);
		}

		var searchItem = utui.profile.searchData[a];
		var activeTab = $('#tabs').tabs('option', 'selected');
		if (typeof searchItem !== 'undefined' && typeof searchItem.tab !== 'undefined') {
			TRACE(searchItem);

			if (activeTab == utui.config.tabList[searchItem.tab].sort) {
				if (typeof searchItem.callback != 'undefined') {
					searchItem.callback();
				}
			} else {
				TRACE('run callback function');
				if (typeof searchItem.callback != 'undefined') {
					utui.profile.searchQueue = function () {
						searchItem.callback()
					};
				}
				TRACE('change tab');
				utui.profile.changeFocusFlag = false;
				$('#tabs').tabs('select', utui.config.tabList[searchItem.tab].sort);
			}
		} else {
			if (typeof searchItem !== 'undefined' && typeof searchItem.callback !== 'undefined') {
				searchItem.callback();
			}
		}
	},
	showStatsDashlet: function () {
		var content = '';
		content += '<div id="dashboard_stats" class="dashlet"></div>';
		$('#dashboard_content').append(content);
	},
	showStatsData: function (title, value, link){
		var content = '',
			idTitle = title.replace(' ','');

		content += '<a href="#" onclick="' + link + '";">';
		content += '<div id="dashlet_statsBox_'+ idTitle +'" class="dashlet_statsBox">';
		content += '	<div class="dashlet_statsTitle">' + title + '</div>';
		content += '	<div class="dashlet_statsContainer singleValue">';
		content += '		<div class="dashlet_statsValue">' + value + '</div>';
		content += '	</div>';
		content += '</div>';
		content += '</a>';
		$('#dashboard_stats').append(content);
	},

	// --------------------------------------------------------
	siteLogo: function() {
		// Private API
		var _namespace = 'set_logo_dialog',
			_$template = utui.ui.dialog.body(),
			_image_url = '',
			_isValidURL = false;

		// ----------------------------------------------------
		function _isModal() {
			return $('#'+_namespace)[0];
		}

		// ----------------------------------------------------
		function _showLogo() {
			// Show custom logo
			var $setLogo = $('.set-logo'),
				$customLogo = $('.custom-logo');

			$setLogo.hide();
			$customLogo.find('img').attr('src', utui.profile.image_url);
			$customLogo.show();
		}

		// ----------------------------------------------------
		function _hideLogo() {
			// Hide custom logo
			$('.set-logo').show()
			$('.custom-logo').hide();
		}

		// ----------------------------------------------------
		function _removeLogo() {
			if (_image_url) {
				_image_url = '';
				_hideLogo();
			}
		}

		// ----------------------------------------------------
		function _showSpinner() {
			if (_isModal()) {
				utui.util.showSpinner();
			} else {
				var $menu = $('#my_site_site_logo_menu'),
					$spinner = $('<div class="set-logo-spinner"></div>').css({'height':$menu.height()+'px'});
				$menu.closest('li').prepend($spinner);
			}
		}

		// ----------------------------------------------------
		function _hideSpinner() {
			if (_isModal()) {
				utui.util.hideSpinner();
			} else {
				$('.set-logo-spinner').remove();
			}
		}

		// ----------------------------------------------------
		function _render() {
			_$template.find('.dialog-content-container').addClass('set-logo-container');
			_$template.find('.dialog-content-body').html(_view());
		}

		// ----------------------------------------------------
		function _view() {
			var v = '',
				url = _image_url || '';
			
			v += '<div class="container-fluid">';
			v += '	<div class="row-fluid">';
			v += '		<div class="span3 alignright">' + localize.t('tiq.dashboard.https_url') + '</div>';
			v += '		<div class="span6">';
			v += '			<input type="text" value="'+url+'" /><span>' + localize.t('tiq.dashboard.enter_url_to_logo') + '</span>';
			v += '		</div>';
			v += '	</div>';
			v += '</div>';

			return v;
		}

		// ----------------------------------------------------
		var _request = {
			// ------------------------------------------------
			// Verify that the url is valid
			verify: function() {
				_showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.VERIFY_URL);
				utui.service.head(url, {url:_image_url}, null, _response.onVerifySuccess, _response.onVerifyError);
			},

			// ------------------------------------------------
			// Save will verify first then save if successful
			save: function() {
				_showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.PROFILE_IMAGE);
				utui.service.post(url, {image_url:_image_url}, null, _response.onSaveSuccess, _response.onSaveError);
			}
		};

		// ----------------------------------------------------
		var _response = {
			// ------------------------------------------------
			onVerifySuccess: function(data) {
				_hideSpinner();

				_isValidURL = true;

				_showLogo();
			},

			// ------------------------------------------------
			onVerifyError: function(status, response) {
				_hideSpinner();

				if (response && response.status === 304) {
					_response.onVerifySuccess();

				} else {
					_isValidURL = false;

					_hideLogo();
				}
			},

			// ------------------------------------------------
			onSaveSuccess: function(data) {
				_hideSpinner();

				_isValidURL = true;

				utui.profile.image_url = _image_url;
				if (_image_url === '') {
					_hideLogo();
				} else {
					_showLogo();
				}

				utui.ui.dialog.dispose(_namespace);
			},

			// ------------------------------------------------
			onSaveError: function(status, response) {
				_hideSpinner();

				if (response && response.status === 400) {
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.dashboard.error.url_could_not_be_verified'), true);
				} else {
					var action = (_image_url === '' ? 'delete' : 'set');
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.dashboard.error.unable_to_' + action + '_logo'), true);
				}
				$('.set-logo-container input').focus();
			}
		};

		// ----------------------------------------------------
		var _eventHandlers = {
			// ------------------------------------------------
			onCancelClick: function(){
				utui.ui.dialog.dispose(_namespace);
			},

			// ------------------------------------------------
			onApplyClick: function(){
				utui.ui.dialog.message.hide(_namespace);

				// Check if img extension
				var $input = $('.set-logo-container input'),
					val = $input.val().trim(),
					lastIndex = val.lastIndexOf('.'),
					ext = (lastIndex > -1) ? val.substring(lastIndex, val.length) : '';

				// If the URL is empty and has logo previosly set then delete
				if (val === '' && utui.profile.image_url) {
					_image_url = '';
					_request.save();
					return;
				}

				// Cannot leave field blank
				if (val === '') {
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.dashboard.error.enter_url_to_logo'));
					$input.focus();
					return;
				}

				// If logo is not on a secure server then show an error
				if (!/^https:.*$/i.test(val)) {
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.dashboard.error.url_on_secure_server'));
					$input.focus();
					return;
				}

				// Is valid image extension?
				if (/^\.(gif|jpg|png)$/i.test(ext)) {
					_image_url = val;
					_request.save();

				} else {
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.dashboard.error.invalid_url'));
					$input.focus();
				}
			}
		};

		// Public API
		var _public = {
			// ------------------------------------------------
			setLogo: function() {
				var profileCustomLogoURL = utui.profile.image_url,
					cachedCustomLogoURL = _image_url;

				_image_url = profileCustomLogoURL;

				// If the profile contains a url then show it otherwise hide it
				if (profileCustomLogoURL) {
					if (profileCustomLogoURL !== cachedCustomLogoURL) {
						_request.verify();
					} else {
						_showLogo();
					}
				} else {
					_hideLogo();
				}
			},

			// ------------------------------------------------
			show: function() {
				// Check permissions
				if (!utui.permissions.canSaveProfile()) {
					utui.util.showPermissionErrorDialog();
					return;
				}
				
				_render();

				buttons = [
					{
						text: localize.t('tiq.dialog.button.apply'),
						click: _eventHandlers.onApplyClick,
						id: 'btnApplySetLogo'
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						click: _eventHandlers.onCancelClick,
						style: 'float:left; margin-left: 12px',
						id: 'btnCancelSetLogo'
					}
				];

				utui.ui.dialog.show(_namespace, localize.t('tiq.dashboard.set_profile_logo'), buttons, _$template, {width: 550});

				// Display an error message if the current image url is invalid
				if (_image_url && !_isValidURL) {
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.dashboard.error.url_could_not_be_verified'), true);
				}
			}
		}

		return _public;
	}(),

	// --------------------------------------------------------
	initSiteSummary: function () {
		// --------------------------------------------------------
		function _showHelpTab() {
			var _namespace = 'dashboard',
				_articles = [
					{
						id: 0,
						title: localize.t('tiq.dashboard.help.reports.title'),
						type: 'document',
						linkHref: common.community.tag_reports_in_tealiumiq,
						isExternalLink: true
					}
				],
				_context = {
					header: localize.t('tiq.dashboard.help.reports.header'),
					body: localize.t('tiq.dashboard.help.reports.body')
				},
				_section = 'tag_usage';

			utui.help.initHelpTab(_namespace, _articles, _context, _section);
		}


		// --------------------------------------------------------
		function _resetConsoleHeight() {
			setTimeout(utui.profile.consoleHeight, 210);
		}

		// --------------------------------------------------------
		function _replaceContent(html) {
			_$content.find('.dialog-screen').hide();

			var $container,
				replaceContent = true;

			if (_selectedTab === TAB_SUMMARY){
				$container = $('#dashboard_content');
			} else if (_selectedTab === TAB_TAGS) {
				$container = $('#tag_usage');
			} else if (_selectedTab === TAB_AUDITS || _selectedTab === TAB_MANUAL) {
				$container = $('#sitemap_scans');
				replaceContent = false;
			} else if (_selectedTab === TAB_VERIFY) {
				$container = $('#tabs_site_verify');
			} else if (_selectedTab === TAB_PRIVACY) {
				$container = $('#tabs_privacy_management');
			}
			$container.show();
			if (replaceContent) $container.html(html);
		}

		// --------------------------------------------------------
		function _highlightNav($el) {
			_$templateContext.find('.dialog-context-nav li').removeClass('selected');
			if ($el) {
				$el.parent().addClass('selected');
			}
		}

		// --------------------------------------------------------
		function _isValidDate(val) {
			// Cannot be empty
			if (val === '') return false;

			// Must be valid mm/dd/yyyy formate
			if (!val.match(/\d{2}\/\d{2}\/\d{4}$/i)) return false;

			var dateArr = val.split('/'),
				y = Number(dateArr[2]),
				m  = Number(dateArr[0]),
				d = Number(dateArr[1]);

			// Assume not leap year by default (note zero index for Jan)
			var daysInMonth = [31,28,31,30,31,30,31,31,30,31,30,31];

			// If evenly divisible by 4 and not evenly divisible by 100,
			// or is evenly divisible by 400, then a leap year
			if ( (!(y % 4) && y % 100) || !(y % 400)) {
				daysInMonth[1] = 29;
			}
			return d <= daysInMonth[--m]
		}

		// --------------------------------------------------------
		function _getDatePlusOne(stringDate) {
			var d = new Date(stringDate);
			d.setDate(d.getDate() + 1);

			return utui.util.date.getStringFromDate(d);
		}

		// ----------------------------------------------------------------
		// Convenience method so we don't have to add the account and profile in every method
		function _addParamsToURL(url, list) {
			if (list && !$.isEmptyObject(list)) {
				for (var key in list) {
					url = url.replace('$$' + key + '$$', list[key]);
				}
			}

			// Just in case they haven't already been added (we add here in case it's custom ones are in the list)
			url = url.replace('$$account$$', utui.login.account);
			url = url.replace('$$acount$$', utui.login.account);
			url = url.replace('$$profile$$', utui.login.profile);

			return url;
		}

		// ----------------------------------------------------------------
		function _getErrorFromResponse(response, defaultMessage) {
			// Unauthorized
			if (response.status === 401) {
				return _errorCodeMap[401];
			}

			try {
				var error = utui.util.safeParseJSON(response.responseText),
					msg = _errorCodeMap[error.code] || defaultMessage;
				return msg;

			} catch (e) {
				return defaultMessage;
			}
		}

		function _showHideFooter(isShow) {
			if (isShow) {
				$('#footer').show();
				$('#dashboard_container').css('height', '100%');
			} else {
				$('#footer').hide();
				$('#dashboard_container').css('height', 'auto');
			}

			_resetConsoleHeight();
		}

        function _createTaggingObject(tabView) {
			return {
                action: utui.constants.views.TAB_CLICK,
                screen_name: tabView,
                tealium_event: utui.constants.tagging.SCREEN_VIEW,
                tab_id: tabView
            };
        }

		// --------------------------------------------------------
		// Returns the content within the template
		var _view = {
			// ----------------------------------------------------
			contentBody: function() {
				_replaceContent('');
				utui.dashboard.showPublishDashlet();
				utui.dashboard.showStatsDashlet();

				var sortTabs = utui.util.getVars(utui.config.tabList, 3, 'sort');
				for (var i in utui.util.getVars(sortTabs, 1)) {
					var dashlet = sortTabs[i]._id;
					if (typeof sortTabs[i].show == 'undefined' || sortTabs[i].show == 'true') {
						switch (dashlet) {
							case 'define':
								utui.dashboard.showDefineDashlet();
								break;
							case 'publish':
								utui.dashboard.showPublishStats();
								break;
							case 'loadrules':
								utui.dashboard.showLoadRulesDashlet();
								break;
							case 'manage':
								utui.dashboard.showManageDashlet();
								utui.dashboard.showMapDashlet();
								break;
							case 'customizations':
								utui.dashboard.showCustomizeDashlet();
								break;
							case 'test':
								utui.dashboard.showTestDashlet();
								break;
						}
					}
				}

				$('#dashboard_content').show();
				utui.profile.setSearchFocus();
			}
		};

		// --------------------------------------------------------
		// Binds the UI events
		var _bindUI = {
			// ----------------------------------------------------
			global: function() {
				// Bind all the buttons within the context view
				_$templateContext.find('#my_site_site_logo_menu').safeOn('click', _eventHandlers.onSiteLogoMenuClick);
				_$templateContext.find('#my_site_site_summary_menu').safeOn('click', _eventHandlers.onSiteSummaryMenuClick);
				_$templateContext.find('#my_site_tag_usage_menu').safeOn('click', _eventHandlers.onTagUsageMenuClick);
				_$templateContext.find('#my_site_site_map_scans_menu').safeOn('click', _eventHandlers.onSiteMapScansMenuClick);
				_$templateContext.find('#my_site_site_scan_companion_menu').safeOn('click', _eventHandlers.onSiteScanCompanionMenuClick);
				_$templateContext.find('#my_site_site_verify_menu').safeOn('click', _eventHandlers.onSiteVerifyMenuClick);
				_$templateContext.find('#my_site_site_privacy_management_menu').safeOn('click', _eventHandlers.onSitePrivacyManagementMenuClick);
			},

			datePicker: function() {
				var date = new Date();
				date.setDate(date.getDate() - 7);
				var $fromDate = $('#from_date'),
					$toDate = $('#to_date'),
					previousWeek = utui.util.date.getStringFromDate(date),
					todayString = utui.util.date.getStringFromDate(new Date());

				// FROM_DATE datepicker
				$fromDate.datepicker({
					numberOfMonths: 1,
					onSelect: function(dateText, inst) {
						$fromDate.val(dateText);

						// set minimum date for TO_DATE
						$toDate.datepicker('option', 'minDate', _getDatePlusOne(dateText));
						setTimeout(function() {
							$toDate.focus();
						}, 0);
					},
					onClose: function(dateText, inst) {
						// Default date range to today if it's invalid
						if (!_isValidDate($fromDate.val())) {
							$fromDate.val(todayString);
							// set min date for TO_DATE
							$toDate.datepicker('option', 'minDate', _getDatePlusOne(todayString));
						} else {
							$toDate.datepicker('option', 'minDate', _getDatePlusOne(dateText));
						}

						setTimeout(function() {
							$toDate.focus();
						}, 0);
					}
				});

				// TO_DATE datepicker
				$toDate.datepicker({
					numberOfMonths: 1,
					onClose: function(dateText, inst) {
						var toDateValue = $toDate.val(),
							fromDateValue = $fromDate.val();

						// Default date range to match FROM_DATE or today if it's invalid
						if (!_isValidDate(toDateValue)) {
							if (fromDateValue) {
								$toDate.val(_getDatePlusOne(fromDateValue));
							} else {
								$toDate.val(_getDatePlusOne(todayString));
							}
						} else if (new Date(toDateValue) <= new Date(fromDateValue)) {
							$toDate.val(_getDatePlusOne(fromDateValue));
						}

						_eventHandlers.onTagUsageControlChange();
					}
				});

				// Default date range to today
				if (!$fromDate.val()) {
					$fromDate.val(previousWeek);
					$toDate.val(todayString);
					// set min date for TO_DATE
					$toDate.datepicker('option', 'minDate', _getDatePlusOne(previousWeek));
				}
			},

			// ----------------------------------------------------------------
			// Adds the event handlers for the header control ui elements
			// Tag Usage
			tagUsageUIEvents: function() {
				$('.tag_usage_headerControls').find('select').each(function() {
					$('#'+this.id).select2().safeBind('change', _eventHandlers.onTagUsageControlChange);
				});
			}
		};

		// --------------------------------------------------------
		// UI Event handlers
		var _eventHandlers = {
			// ----------------------------------------------------
			onSiteLogoMenuClick: function() {
				utui.dashboard.siteLogo.show();
			},

			// ----------------------------------------------------
			onSiteSummaryMenuClick: function() {
				var $el = $(this),
					tabView = $el.text().replace(/ /g, '_') + '_View';

				_selectedTab = TAB_SUMMARY;
				_highlightNav($el);

				utui.dashboard.initSiteSummary.show();

				// Show footer
				_showHideFooter(true);

				var siteSummaryTagging = _createTaggingObject(tabView);
				utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, siteSummaryTagging);
			},

			// ----------------------------------------------------
			onTagUsageMenuClick: function() {
				var $el = $(this),
					tabView = $el.text().replace(/ /g, '_') + '_View';

				_selectedTab = TAB_TAGS;
				_highlightNav($el);

				_replaceContent(utui.dashboard.showTagUsage());

				_showHelpTab();
				_bindUI.datePicker();
				_bindUI.tagUsageUIEvents();

				// request visit data
				_eventHandlers.onTagUsageControlChange();

				// Hide footer
				_showHideFooter();

                var tagUsageTagging = _createTaggingObject(tabView);
                utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, tagUsageTagging);
            },

			// ----------------------------------------------------
			onSiteMapScansMenuClick: function() {
				var $el = $(this),
					tabView = $el.text().replace(/ /g, '_') + '_View';

				_selectedTab = TAB_AUDITS;
				_highlightNav($el);
				_replaceContent();

				utui.reports.showSiteAudits();

				// Hide footer
				_showHideFooter();

                var siteMapScansTagging = _createTaggingObject(tabView);
                utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, siteMapScansTagging);
            },

			// ----------------------------------------------------
			onSiteScanCompanionMenuClick: function() {
				var $el = $(this),
					tabView = $el.text().replace(/ /g, '_') + '_View';

				_selectedTab = TAB_MANUAL;
				_highlightNav($el);
				_replaceContent();

				utui.reports.showSiteManual();

				// Hide footer
				_showHideFooter();

                var siteScanCompanionTagging = _createTaggingObject(tabView);
                utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, siteScanCompanionTagging);
            },

			// ----------------------------------------------------
			onSiteVerifyMenuClick: function() {
				var $el = $(this),
					tabView = $el.text().replace(/ /g, '_') + '_View';

				_selectedTab = TAB_VERIFY;
				_highlightNav($el);
				_replaceContent();

				utui.siteVerify.show();

				// Hide footer
				_showHideFooter();

                var siteVerifyTagging = _createTaggingObject(tabView);
                utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, siteVerifyTagging);
            },
			
			// ----------------------------------------------------
      		onSitePrivacyManagementMenuClick: function() {
				var $el = $(this),
					tabView = $el.text().replace(/ /g, '_') + '_View';

				_selectedTab = TAB_PRIVACY;
				_highlightNav($el);
				_replaceContent();

				utui.privacyManagement.show();

				// Hide footer
				_showHideFooter();

				var sitePrivacyManagementTagging = _createTaggingObject(tabView);
				utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, sitePrivacyManagementTagging);
			},

			// ----------------------------------------------------
			onTagUsageControlChange: function() {
				var dataObj = {
						profile: $('#tag_usage_perspective_select').val(),
						start: new Date($('#from_date').val()).getTime(),
						end: new Date($('#to_date').val()).getTime()
					};

				_request.getTagUsageData(dataObj);
			}

		};

		// --------------------------------------------------------
		// Add the content to the template
		var _render = {
			// ----------------------------------------------------
			content: function() {
				_view.contentBody();
			}
		};

		// ----------------------------------------------------------------
		// Server API calls
		var _request = {
			// ------------------------------------------------------------
			getTagUsageData: function(data) {
				utui.util.showSpinner();

				var url;
				if (data.profile === 'All Profiles') {
					url = _addParamsToURL(utui.service.restapis.TAG_USAGE_ACCOUNT, data);
				} else {
					url = _addParamsToURL(utui.service.restapis.TAG_USAGE_PROFILE, data);
				}

				utui.service.get(url, {}, null, _response.onGetTagUsageDataSuccess, _response.onGetTagUsageDataError);
			}
		};

		// ----------------------------------------------------------------
		// Server API response handlers
		var _response = {
			// ------------------------------------------------------------
			onGetTagUsageDataSuccess: function(data) {
				utui.util.hideSpinner();
				
				if (data) {
					var visitsTrend = [],
						visitsCumulative = [],
						loaderTagTrend = [],
						loaderTagCumulative = [],
						supportingTagsTrend = [],
						supportingTagsCumulative = [],
						visitTotal = 0,
						loaderTotal = 0,
						syncTotal = 0,
						mobileTotal = 0,
						vendorTotal = 0,
						chartOneTotal = 0,
						chartTwoTotal = 0,
						chartThreeTotal = 0;

					for (var i in data) {
						var obj = data[i];
						if (obj.metrics) {
							var d = new Date(obj.start),
							utcDate = new Date(d.getTime() + (d.getTimezoneOffset() * 60000)),
								dateString = utui.util.date.getStringFromDate(utcDate).replace(/\//g, '-'),
								metrics = obj.metrics,
								visit_metric = metrics.VISIT,
								loader_metric = metrics.LOADER,
								sync_metric = metrics.SYNC,
								mobile_metric = metrics.MOBILE,
								vendor_metric = metrics.VENDOR;

							// VISITS
							visitTotal += (visit_metric) ? visit_metric : 0;
							chartOneTotal += (visit_metric) ? visit_metric : 0;

							visitsTrend.push({
								date: dateString,
								'Visits': (typeof visit_metric !== 'undefined') ? visit_metric : null
							});
							visitsCumulative.push({
								date: dateString,
								'Visits': visitTotal
							});

							// LOADER, SYNC, and MOBILE
							loaderTotal += (loader_metric) ? loader_metric : 0;
							syncTotal += (sync_metric) ? sync_metric : 0;
							mobileTotal += (mobile_metric) ? mobile_metric : 0;
							chartTwoTotal += (((loader_metric) ? loader_metric : 0) + ((sync_metric) ? sync_metric : 0) + ((mobile_metric) ? mobile_metric : 0));

							loaderTagTrend.push({
								date: dateString,
								'Loader Tag': (typeof loader_metric !== 'undefined') ? loader_metric : null,
								'Sync': (typeof sync_metric !== 'undefined') ? sync_metric : null,
								'Mobile': (typeof mobile_metric !== 'undefined') ? mobile_metric : null
							});
							loaderTagCumulative.push({
								date: dateString,
								'Loader Tag': loaderTotal,
								'Sync': syncTotal,
								'Mobile': mobileTotal
							});

							// VENDOR and TEALIUM_VENDOR
							vendorTotal += (vendor_metric) ? vendor_metric : 0;
							chartThreeTotal += (vendor_metric) ? vendor_metric : 0;

							supportingTagsTrend.push({
								date: dateString,
								'Tag Loads': (typeof vendor_metric !== 'undefined') ? vendor_metric : null,
								'Tag Kills': null,
								'Tag Errors': null
							});
							supportingTagsCumulative.push({
								date: dateString,
								'Tag Loads': vendorTotal,
								'Tag Kills': 0,
								'Tag Errors': 0
							});
						}
					}
					
					var no_data_for_range = localize.t('tiq.dashboard.error.no_data_for_date_range');
					// VISITS
					if (!$.isEmptyObject(visitsTrend)) {
						$('#visitsChart').html(utui.chart.createCombinedAreaLineChart(visitsTrend, visitsCumulative, 'visitsChart','','','', chartOneTotal, '', utui.config.chart.colors));
					} else {
						$('#visitsChart').html('<div class="chart_message">' + no_data_for_range + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
					}

					// LOADER TAG
					if (!$.isEmptyObject(loaderTagTrend)) {
						$('#leaderTagChart').html(utui.chart.createCombinedAreaLineChart(loaderTagTrend, loaderTagCumulative, 'leaderTagChart','','Cumulative Loads','Loads', chartTwoTotal, 'Total Loads', utui.config.chart.colors));
					} else {
						$('#leaderTagChart').html('<div class="chart_message">' + no_data_for_range + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
					}

					// SUPPORTING TAGS
					if (!$.isEmptyObject(supportingTagsTrend)) {
						$('#supportingTagsChart').html(utui.chart.createCombinedAreaLineChart(supportingTagsTrend, supportingTagsCumulative, 'supportingTagsChart','','Cumulative Loads','Loads', chartThreeTotal, 'Total Loads', utui.config.chart.colors));
					} else {
						$('#supportingTagsChart').html('<div class="chart_message">' + no_data_for_range + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
					}
				} else {
					$('#visitsChart').html('<div class="chart_message">' + no_data_for_range + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
					$('#leaderTagChart').html('<div class="chart_message">' + no_data_for_range + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
					$('#supportingTagsChart').html('<div class="chart_message">' + no_data_for_range + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
				}
			},

			// ------------------------------------------------------------
			onGetTagUsageDataError: function(status, response) {
				utui.util.hideSpinner();

				var errorMsg = _getErrorFromResponse(response, localize.t('tiq.dashboard.error.unable_to_get_tag_usage_data')),
					no_data = localize.t('tiq.dashboard.help.no_data_to_display');
				utui.ui.dialog.message.showError('my_site_content', errorMsg);

				$('#visitsChart').html('<div class="chart_message">' + no_data + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
				$('#leaderTagChart').html('<div class="chart_message">' + no_data + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
				$('#supportingTagsChart').html('<div class="chart_message">' + no_data + '</div><div class="no_chart"><i class="icon-bar-chart"></i></div>');
			}
		};

		var _public = {
			show: function (forceResize) {
				_selectedTab = TAB_SUMMARY;
				_highlightNav($('#' + TAB_SUMMARY));

				_render.content();
				_bindUI.global();

				if (forceResize) {
					_resetConsoleHeight();
				}

				// Set the custom logo
				utui.dashboard.siteLogo.setLogo();
			}
		}

		return _public;
	}(),
	showTagUsage: function () {
		var _namespace = 'tag_usage';

		// --------------------------------------------------------
		// Returns the content within the template
		var _view = {
				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div id="dashboard_tag_usage"></div>';
					v += '<div id="' + _namespace + '_header">';
					v += '<div class="' + _namespace + '_headerControls config_button_nofloat">';
					v += '		<div class="report_control control_perspective">';
					v += '			<span class="control_label">' + localize.t('tiq.dashboard.tag_usage.perspective') + '</span>';
					v += '          <select id="' + _namespace + '_perspective_select">';
					v += _view.getProfileListOptions();
					v += '          </select>';
					v += '		</div>';
					v += '		<div class="report_control control_datepicker">';
					v += '			<span class="control_label">' + localize.t('tiq.dashboard.tag_usage.time') + '</span>';
					v += '		    <span class="date_time_container">';
					v += '              <input class="fromDate date datepicker" maxlength="10" placeholder="' + localize.t('tiq.dashboard.tag_usage.any_day') + '" type="text" id="from_date" name="from_date"><span class="icon-calendar"></span>';
					v += '              <label for="to_date">&nbsp;' + localize.t('tiq.dashboard.tag_usage.to') + '</label>';
					v += '              <input class="toDate date datepicker" maxlength="10" placeholder="' + localize.t('tiq.dashboard.tag_usage.any_day') + '" type="text" id="to_date" name="to_date"><span class="icon-calendar"></span>';
					v += '          </span>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';
					v += '<div class="dialog-message"></div>';
					v += '<div class="container-fluid">';
					v += '  <div class="row-fluid">';
					v += '      <div class="utui-scrollable-chart">';
					v += '          <div class="' + _namespace + '_chart_header">' + localize.t('tiq.dashboard.tag_usage.visits') + '<span class="subtitle">' + localize.t('tiq.dashboard.tag_usage.requires_utag') + '</span></div><div class="' + _namespace + '_chart"><div id="visitsChart"></div></div>';
					v += '          <div class="' + _namespace + '_chart_header">' + localize.t('tiq.dashboard.tag_usage.loader_tag') + '</div><div class="' + _namespace + '_chart"><div id="leaderTagChart"></div></div>';
					v += '          <div class="' + _namespace + '_chart_header">' + localize.t('tiq.dashboard.tag_usage.vendor_tags') + '</div><div class="' + _namespace + '_chart"><div id="supportingTagsChart"></div></div>';
					v += '      </div>';
					v += '  </div>';
					v += '</div>';

					return v;
				},

			// ----------------------------------------------------------------
			getProfileListOptions: function() {
				var v = '';

				v += '  <option value="All Profiles">' + localize.t('tiq.dashboard.tag_usage.all_profiles') + '</option>';

				var profiles = utui.profile.profiles;
				if (profiles) {
					profiles = profiles[utui.login.account];
					if (profiles) {
						for (var i=0; i<profiles.length; i++) {
							var profile = profiles[i];
							v += '	<option value="' + profile + '">' + profile + '</option>';
						}
					}
				}

				return v;
			}
		};

		return _view.contentBody();

	},
	showPublishDashlet: function () {
		var data = utui.data.publish;
		var content = '';
		var publish = { latest: {}, dev: {}, qa: {}, prod: {}, curr: {} };

		var customTargets = utui.targets.getList('custom');
		if ($.isArray(customTargets)) {
			for (var i = 0; i < customTargets.length; i++) {
				publish[customTargets[i]] = {};
			}
		}

		if (utui.publish.history.latest != '') {
			for (var key in publish) {
				if (key == 'curr') {
					publish[key] = utui.dashboard.getCurrentVersion(utui.data.settings.revision) || {};
				} else {
					publish[key] = utui.dashboard.getLatestTarget(key);
				}
			}

			var latestSavedVersions = utui.dashboard.getLatestSavedVersions();
			for (var pv in utui.util.getVars(publish)) {
				if (publish[pv].id) {
					publish[pv].lsTitle = latestSavedVersions[publish[pv].id].title;
				}
			}
		}

		for (var key in publish) {
			if (key != 'latest' && publish.latest === publish[key]) {
				publish[key].latest = true;
			}
		}

		content += '<div id="version_tree_container">';
		content += '	<div id="version_tree_container_inner">';
		content += '		<div id="version_tree_wrapper" class="tree">';
		content += '			<div id="version_tree_outer" class="tree">';
		content += '				<div id="version_tree" class="tree">';
		content += '					<ul class="tree_first_ul">';
		content += '						<li>';
		content += '							<div href="#" class="treeItem verTree_profile">';
		content += '								<div class="verTree_profileLabel">' + localize.t('tiq.dashboard.summary.profile') + '</div>';
		content += '								<div class="verTree_accountName">' + utui.data.settings.account + '</div>';
		content += '								<div class="verTree_accountDivider">/</div>';
		content += '								<div class="verTree_profileName">' + utui.data.settings.profileid + '</div>';
		content += '							</div>';
		content += '							<ul id="version_list"></ul>';
		content += '						</li>';
		content += '					</ul>';
		content += '				</div>';//end version_tree
		content += '			</div>';//end version_tree_outer
		content += '		</div>';//end version_tree_wrapper
		content += '	</div>';
		content += '</div>';

		$('#dashboard_content').append('<div id="dashboard_publish" class="dashlet dashlet-envContainer">' + content + '</div>');

		var targets = utui.targets.getList();
		for (var i = 0; i < targets.length; i++) {
			var key = targets[i],
				displayName = utui.targets.aliasDisplayName(key);
			_public.insertPublishVersion(key, displayName, publish[key]);
		}


		var isRevision = false;
		for (var i = 0; i < targets.length; i++) {
			var key = targets[i];
			if (utui.data.settings.revision == publish[key]) {
				isRevision = true;
				break;
			}
		}
		if (!isRevision && typeof publish.curr != 'undefined') {
			_public.insertPublishVersion('curr', 'Current', publish.curr);
		}

		// Resize the inner container to fit the contents.
		setTimeout(function() {
			$('#version_tree_container_inner').css('width',$('.tree_first_ul').outerWidth(true)+100);
		}, 0)
	},
	insertPublishVersion: function (id, label, data) {
		var content = '',
			exists = true;

		if (!data) data = {};
		if (!data.title || data.title == '') data.title = localize.t('tiq.dashboard.summary.no_title');
		if (!data.notes || data.notes == '') data.notes = localize.t('tiq.dashboard.summary.no_notes');

		// If environment is published...
		if ((id == 'curr') || (typeof data != 'undefined' && typeof data.status != 'undefined' && data.status != 'Not Published')) {
			var versionClassName = 'version_' + data.id;
			var subVersionClassName = 'revision_' + data.id + data.last;

			// Add the version title
			if ($('ul.' + versionClassName).length < 1) {
				//Version box does not exist
				content += '<li class="' + versionClassName + '">';
				content += '<div href="#" class="treeItem verBox">';

				// If this is the current version add the "You Are Here" pin
				if (utui.data.settings.revision == data.id) {
					content += '<div class="verTitle" onMouseOver="$(\'.verLocationPinText\').show();" onMouseOut="$(\'.verLocationPinText\').hide();">';
					content += '<div class="verLocationPin here"><div class="verLocationPinText">' + localize.t('tiq.dashboard.summary.you_are_here') + '</div></div>';
					content += utui.util.safeEscape(data.lsTitle);
					content += '</div>';

				// Add clickable version title so you can load this version on click
				} else {
					content += '<div class="verTitle verClickable" onClick="utui.dashboard.loadVersion(\'' + data.id + '\');">';
					content += utui.util.safeEscape(data.lsTitle);
					content += '</div>';
				}
				content += '</div>';
				content += '</li>';
				$('#version_list').append(content);
				exists = false;
			}

			// Add sub version info to Version box
			content = '';
			if (id != 'curr') {

				if ($('div.' + subVersionClassName).length < 1) {

					content += '<li>';
					content += '<div href="#" class="treeItem envBox">';
					content += '<div class="verEnvHeader">';
					content += '</div>';
					content += '<div class="verEnvInfo">'
					if (data.unpublishedSaves > 0) {
						content += '<div class="verUnpublishedSaves">' + localize.t('tiq.dashboard.summary.save_since_last_publish', {count:data.unpublishedSaves}) + '</div>';
					}
					content += '<div class="verDate">' + utui.util.formatDate(data.last) + ' GMT</div>';
					if (data.latest && utui.profile.isLatestVersion) {
						content += '<div id="latest_tool_tip" title="' + localize.t('tiq.dashboard.summary.this_is_the_latest_published') + '" class="verLatest">' + localize.t('tiq.dashboard.summary.latest') + '</div>';
					}
					content += '<div class="verAuthor" onClick="location.href=\'mailto:' + data.operator + '\'">' + data.operator + '</div>';
					content += '</div>';
					var notesWithBreaks = data.notes.replace(/\n/g, '<br>');
					content += '<div class="verNotes">' + localize.t('tiq.dashboard.summary.notes') + ' ' + notesWithBreaks + '</div>';
					content += '<div class="verEnvLinks ' + subVersionClassName + '">';
					content += '<div class="verEnvLabel ellipsis env_alias_' + id + '" title="' + label + '">' + label + '</div>';
					content += '</div>';
					content += '</div>';
					content += '</li>';

					if (!exists) {
						content = '<ul class="' + versionClassName + '">' + content + '</ul>';
						$('li.' + versionClassName).append(content);
					} else {
						$('ul.' + versionClassName).append(content);
					}
					var tooltipObj = {};
					tooltipObj['latest_tool_tip'] = {
						gravity: 'sw'
					};
					utui.util.addTooltip(tooltipObj);

				} else {
					content += '<div class="verEnvLabel ellipsis env_alias_' + id + '" title="' + label + '">' + label + '</div>';
					$('div.' + subVersionClassName).append(content);

				}
			}

		// Environment not published
		} else {
			var versionClassName = "notPublished";

			if ($('li.' + versionClassName).length < 1) {

				//Version box does not exist
				content += '<li class="' + versionClassName + '">';
				content += '<div href="#" class="treeItem envBox">';
				content += '<div class="verEnvHeader">';
				content += '</div>';
				content += '<div class="verEnvInfo">'
				content += '<div class="verNotPublished">';
				content += localize.t('tiq.dashboard.summary.not_published');
				content += '</div>';
				content += '<div class="verEnvLinks"></div>';
				content += '</div>';
				content += '</div>';
				content += '</li>';
				$('#version_list').append(content);
				exists = false;
			}

			content = '';
			content += '<div class="verEnvLabel ellipsis env_alias_' + id + '" title="' + label + '">' + label + '</div>';
			$('li.' + versionClassName + ' .verEnvLinks').append(content);

		}
	},
	getLatestTarget: function (target) {
		if ($.isEmptyObject(utui.publish.history[target])) {
			return '';
		}
		var pr = utui.publish.history[target].split('_'); //publish revision: idx 1 is version ID, idx 0 is revision ID
		return (!$.isEmptyObject(utui.data.publish_history) && utui.data.publish_history[pr[1]][pr[0]]) ? utui.data.publish_history[pr[1]][pr[0]] : '';
	},
	getCurrentVersion: function (target) {
		for (var j in utui.util.getVars(utui.data.publish_history)) {
			if (j != 'publishState') {
				var pr = utui.data.publish_history[j][utui.data.publish_history[j].publishState.saved]; //publish revision
				if (pr) {
					if (pr.id == utui.data.settings.revision) {
						return(pr);
					}

				}
			}
		}
	},
	getLatestSavedVersions: function () {
		var phVersions = {};
		for (var j in utui.util.getVars(utui.data.publish_history)) {
			for (var k in utui.util.getVars(utui.data.publish_history[j])) {
				if (k == 'publishState') {
					var sk = utui.data.publish_history[j][k].saved;
					phVersions[j] = utui.data.publish_history[j][sk];
				}
			}
		}
		return phVersions;
	},
	getUnpublishedSaves: function (versionID, lastSaved) {
		var unPublishedSaves = 0;
		for (var i in utui.util.getVars(utui.data.publish_history[versionID])) {
			if (i != 'publishState') {

				var po = utui.data.publish_history[versionID][i];
				if (po) {
					if (po.last == lastSaved) {
						break;
					} else {
						unPublishedSaves++;
					}
				}
			}
		}
		return unPublishedSaves;
	},
	loadVersion: function (revision) {
		if (utui.profile.dirty) {
			this.loadVersionConfirm(revision);
		} else {
			utui.util.loadingModalStart(localize.t('tiq.dashboard.loading_profile'));
			utui.profile.getProfile(null, {
				revision: revision
			}, function (data) {
				utui.customizations.validationMap = {};
				data.initialTab = utui.config.currentTab;
				utui.profile.getProfileCallback(data);
				utui.util.setSession(true);
				$('#profile_revision').val(revision);
				utui.profile.initSearch();
				utui.profile.updateLastId();
				utui.util.loadingModalStop();
			});
		}
	},
	loadVersionConfirm: function (revision) {
		var confirmationContent = localize.t('tiq.dashboard.any_unsaved_changes');
		$("#dialog-confirmation-content").html(confirmationContent);

		$("#dialog-confirmation").dialog({
			autoOpen: true,
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: false,
			closeText: "",
			resizable: false,
			draggable: true,
			buttons: [
				{
					text: localize.t('tiq.dialog.button.yes'),
					id: 'confirmLoadVersion_dialog_yesBtn',
					click: function () {
						utui.profile.clear();
						utui.dashboard.loadVersion(revision);
						$(this).dialog('close');
					}
				},
				{
					text: localize.t('tiq.dialog.button.no'),
					id: 'confirmLoadVersion_dialog_noBtn',
					click: function () {
						$(this).dialog('close');
						/* TODO: Publish cancelled event */
						utui.util.pubsub.publish(utui.constants.profile.CANCELLED_UNSAVED_CHANGES);
					},
					style: 'float:left; margin-left: 12px'
				}
			]
		});
	},
	showPublishRow: function (label, data) {
		var content = '';
		content += '<div class="dashlet-envBox">';
		content += '<div class="dashlet-envBoxContent">';
		content += '<div class="dashlet-envBoxTitle">' + label + '</div>';
		if (typeof data != 'undefined' && typeof data.status != 'undefined' && data.status != 'Not Published') {
			content += '<div class="dashlet-envVersion"><a href="#" onclick="$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'publish\'].sort)">';
			content += data.title; // Version Title
			content += '</a></div>';
			content += '<div class="dashlet-envDate">' + utui.util.formatDate(data.last) + ' GMT</div>';
			content += '</div>'; //end dashlet-envBoxContent
			content += '<div class="dashlet-envNotes';
			if (typeof data.latest && data.latest)content += ' dashlet-envLatest';
			content += '">' + data.notes + '</div>';
		} else {
			content += '<div class="dashlet-envVersion">' + localize.t('tiq.dashboard.summary.not_published') + '</div>';
			content += '<div class="dashlet-envDate"></div>';
			content += '</div>'; //end dashlet-envBoxContent
			content += '<div class="dashlet-envNotes"></div>';
		}
		content += '</div>'; // end dashlet_envBox

		return content;
	},
	showPublishStats: function () {
		// Count saved versions
		var totalCount = 0;
		for (var i in utui.util.getVars(utui.data.publish_history)) {
			totalCount++;
		}
		// Publish Stats Info Here
		var linkURL = '$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'publish\'].sort)';
		utui.dashboard.showStatsData(localize.t('tiq.dashboard.summary.versions'), totalCount, linkURL);
	},
	toggleTagTypeFilter: function (catID) {
		$('#dashboard_tag_categories a.active').removeClass('active');
		var tabCatID = '#' + catID;
		$(tabCatID).addClass('active');
		$('.dashlet_vendorGroupCover').show();
		if (catID == 'tagCat_0') {
			$('.dashlet_vendorGroupCover').hide();
		} else {
			$('.vendorCat_' + catID).children('.dashlet_vendorGroupCover').hide();
		}
	},
	showManageDashlet: function () {
		var data = utui.data.manage,
			content = '',
			totalCount = 0,
			activeCount = 0,
			itemsSort = [],
			sort = utui.util.getVars(data, 3, 'sort'),
			sortList = utui.util.getVars(sort, 1);

		for (var i in sortList) {
			totalCount++;
			itemsSort.push({ id: i, tag_id: sort[i].tag_id, title: sort[i].title, status: sort[i].status });
		}

		var $dashboardContent = $('#dashboard_content').append('<div id="dashboard_manage"></div>');


		if (totalCount == 0) {
			$dashboardContent.find('#dashboard_manage').append('<div class="dashlet_tags_notags">' + localize.t('tiq.dashboard.summary.no_tags_to_display') + '</div>');
			// Publish Stats Info Here
		} else {
			content = '';
			content += '<div id="dashboard_tags" class="dashlet_tagVendorContainer">';
			content += '    <div id="dashboard_tag_categories" class="dashlet_tagVendorCatBox">';
			content += '        <a id="tagCat_0" href="#" class="active" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.all_tags') + '</a>';
			content += '        <a id="tagCat_1" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.analytics') + '</a>';
			content += '        <a id="tagCat_2" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.affiliates') + '</a>';
			content += '        <a id="tagCat_3" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.display_ad') + '</a>';
			content += '        <a id="tagCat_4" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.search') + '</a>';
			content += '        <a id="tagCat_5" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.email') + '</a>';
			content += '        <a id="tagCat_6" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.personalization') + '</a>';
			content += '        <a id="tagCat_7" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.social') + '</a>';
			content += '        <a id="tagCat_8" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.big_data') + '</a>';
     		content += '        <a id="tagCat_10" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.cookie_match') + '</a>';
			content += '        <a id="tagCat_9" href="#" onClick="utui.dashboard.toggleTagTypeFilter(this.id);">' + localize.t('tiq.dashboard.summary.misc') + '</a>';
			content += '    </div>';
			content += '</div>';

			var $dashboardManage = $dashboardContent.find('#dashboard_manage').append(content),
				$dashboardTags = $dashboardManage.find('#dashboard_tags'),
				tagGroupCount = 0,
				tag;

			for (var i = 0; i < itemsSort.length; i++) {
				tag = utui.config.manageList[itemsSort[i].tag_id];
				if (typeof tag != 'undefined') {
					content = '';
					var tagVendorID = tag.title.replace(XRegExp('[^\\p{L}|\\p{N}]+', 'g'), '');	//[^a-zA-Z 0-9]+/g
					tagVendorID = tagVendorID.replace(/\s+/g, '');

					// Add the Vendor Group if it doesn't exist yet
					var $vendorGroup = $dashboardTags.find('#manage_' + tagVendorID);
					if ($vendorGroup.length == 0) {
						tagGroupCount++;
						content += '<div id="vendorGroup'+tagGroupCount+ '" class="dashlet_vendorGroupBox vendorCat_tagCat_' + tag.group +'">';
						content += '	<div class="dashlet_vendorGroupCover"></div>';
						content += '	<div class="dashlet_vendorGroup" id="manage_' + tagVendorID + '" onMouseOver="$(this).children(\'.dashlet_tagVendorTags\').show();" onMouseOut="$(this).children(\'.dashlet_tagVendorTags\').hide();">';
						content += '		<div class="dashlet_tagVendorImage">';
						content += '			<img src="' + tag.logo + '?v=' + utui_version + '">';
						content += '			<div class="dashlet_tagVendorGraph">';
						content += '				<div class="dashlet_tagVendorGraphFill"></div>';
						content += '			</div>';
						content += '		</div>';
						content += '		<div class="dashlet_tagVendorTags">';
						content += '			<div class="dashlet_tagVendorTagsMenu">';
						content += $('<div/>')
							.attr('class', 'dashlet_tagVendorName')
							.text(tag.title)[0].outerHTML;
						content += '			</div>'; //end dashlet_tagVendorTags
						content += '		</div>'; //end dashlet_tagVendorTags
						content += '	</div>';// end id manage_tagVendorID
						content += '</div>';// end vendorGroupBox
						$dashboardTags.append(content);
						$vendorGroup = $dashboardTags.find('#manage_' + tagVendorID);
					}

					var tagTitle = itemsSort[i].title;

					// Add the tag to the vendor group
					if (itemsSort[i].title == '') {
						var itemCount = $vendorGroup.find('.dashlet_vendorTagItem').length + 1;
						tagTitle = '' + tag.title + ' Tag ' + itemCount;
					}


					content = '';
					var linkTitle = tag.title;
					if (tag.addMore == 'true' && itemsSort[i].title != '') {
						linkTitle += ": " + itemsSort[i].title;
					}

					if(itemsSort[i].status == "active") activeCount++;
					content += $('<a/>')
						.attr({'class': 'dashlet_vendorTagItem',
							'title': linkTitle,
							'onclick': 'utui.dashboard.shortcutLink(\'Tags: ' + _.unescape(linkTitle).replace(/'/g, "\\'") + '\');'
						})
						.html('<div class="dashlet_vendorTagStatus ' + itemsSort[i].status + '"></div>')
						.append(content += $('<div/>')
							.attr({'class': 'dashlet_vendorTagTitle'})
							.html(utui.util.safeEscape(tagTitle))[0].outerHTML
						)[0].outerHTML;

					// Make groups with active tags appear brighter
					if (itemsSort[i].status == 'active') {
						$vendorGroup.find('.dashlet_tagVendorImage').addClass('dashlet_tagVendorActive')
					}
					$vendorGroup.find('.dashlet_tagVendorTagsMenu').append(content);
				}
			}

			if (tagGroupCount > 5 && (tagGroupCount % 5 == 0 || tagGroupCount % 5 == 2)) {
				$dashboardTags.append('<div class="dashlet_vendorGroupFiller"> </div>');
			}

			// Gray out the tag categories for which there are no vendors
			for (var i = 1; i <= _.keys(utui.config.manageGroup).length; i++) {
				var objCount = $('.vendorCat_tagCat_' + i).length;
				if (objCount < 1) {
					$('#tagCat_' + i).css('color', '#CCC');
				}
			}

			var objCountTotal, objCountActive, objCountActivePct;
			for (var j = 1; j <= tagGroupCount; j++) {
				var $venderGroup = $('#vendorGroup' + j),
					$venderTagItem = $venderGroup.find('a.dashlet_vendorTagItem');

				objCountTotal = $venderTagItem.length;
				objCountActive = $venderTagItem.find('.active').length;
				objCountActivePct = ((objCountActive / objCountTotal) * 100);
				$venderGroup.find('.dashlet_tagVendorGraphFill').css('width', objCountActivePct + '%');
			}
		}
		// Publish Stats Info Here
		var linkURL = '$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'manage\'].sort)';
		var inactiveCount = totalCount - activeCount;
		var activePercent = 0;
		if (activeCount > 0) activePercent = ((activeCount/totalCount)*100);

		// Create Stats Box
		var title = 'Tags',
			idTitle = title.replace(' ','');

		content = '';
		content += '<a href="#" onclick="' + linkURL + '";">';
		content += '<div id="dashlet_statsBox_' + idTitle + '" class="dashlet_statsBox tagStats">';
		content += '	<div class="dashlet_statsTitle">' + localize.t('tiq.dashboard.summary.tags') + '</div>';
		content += '	<div class="dashlet_statsGraph">';
		content += '			<div class="dashlet_statsGraphFill" style="width:'+activePercent+'%"></div>';
		content += '	</div>';
		content += '	<div class="dashlet_statsContainer">';
		content += '		<div class="dashlet_statsActiveContainer">';
		content += '			<div class="dashlet_statsValue">' + activeCount + '</div>';
		content += '			<div class="dashlet_statsLabel">' + localize.t('tiq.dashboard.summary.active') + '</div>';
		content += '		</div>';
		content += '		<div class="dashlet_statsInactiveContainer">';
		content += '			<div class="dashlet_statsValue">' + inactiveCount + '</div>';
		content += '			<div class="dashlet_statsLabel">' + localize.t('tiq.dashboard.summary.inactive') + '</div>';
		content += '		</div>';
		content += '	</div>';
		content += '</div>';
		content += '</a>';
		$dashboardContent.find('#dashboard_stats').append(content);
	},

	showMapDashlet: function () {
		var data = utui.data.manage;
		var content = '<div class="dashlet-header"><h3><a href="#" onclick="$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'manage\'].sort)">' + localize.t('tiq.dashboard.summary.mapped_data_sources') + '</a></h3></div>';
		var tagCount = 0;
		var varCount = 0;
		var sort = utui.util.getVars(data, 3, 'sort');
		for (var i in utui.util.getVars(sort, 1)) {
			try {
				if (typeof utui.config.manageList[sort[i].tag_id] != 'undefined' && utui.config.manageList[sort[i].tag_id].map === "true" || utui.config.manageList[sort[i].tag_id].map === true) {
					tagCount++;

					var mapCount = 0;
					if (typeof sort[i] != 'undefined' && typeof sort[i].map != 'undefined') {
						for (var c in utui.util.getVars(sort[i].map)) {
							mapCount++;
						}
					}

					var title = utui.config.manageList[sort[i].tag_id].title;
					if (utui.config.manageList[sort[i].tag_id].addMore == 'true') {
						title += ": " + sort[i].title;
					}
					content += '<div class="dashboard_shortcut" style="clear:both"><span class="ui-icon ui-icon-carat-1-e" style="float:left">...</span>';
					content += '<a href="#" onclick="utui.dashboard.shortcutLink(\'Map: ' + title + '\');">' + title + '</a>: ' + mapCount + '</div>';
					varCount = varCount + mapCount;
				}
			} catch (e) {
			}
		}
		if (tagCount == 0) {
			content += '<div><span style="float:left">' + localize.t('tiq.dashboard.summary.there_are_no_mapped_data_sources') + '</div>';
		}
	},

	showCustomizeDashlet: function () {
		var content = '<div class="dashlet-header"><h3><a href="#" onclick="$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'customizations\'].sort)">' + localize.t('tiq.dashboard.summary.extensions') + '</a></h3></div>';
		var totalCount = 0;
		var activeCount = 0;

		var data = utui.util.getVars(utui.data.customizations, 3, 'sort');
		for (var i in utui.util.getVars(data, 1)) {
			totalCount++;
			content += '<div class="dashboard_shortcut" style="clear:both"><span class="ui-icon ui-icon-carat-1-e" style="float:left">...</span>';
			//Customize: Persist Variables: Global: Persist URL
			var title = [];
			try {
				if (data[i].scope == "global") {
					title.push('All Tags');
				} else if (data[i].scope == "footer") {
					title.push('Footer');
				} else if (data[i].scope == "preload") {
					title.push('Pre Loader');
				} else if (data[i].scope == "domready") {
					title.push('DOM Ready');
				} else if (typeof utui.config.manageList[utui.data.manage[data[i].scope].tag_id] != 'undefined') {
					title.push(utui.config.manageList[utui.data.manage[data[i].scope].tag_id].title);
				}
			} catch (e) {
				title.push('All Tags');
			}
			title.push(utui.config.customizationList[data[i].id].title);
			if (typeof data[i].title != 'undefined' && data[i].title.length > 0 && utui.config.customizationList[data[i].id].addMore != 'false') {
				title.push(data[i].title);
			}
			if (data[i].status == 'active') activeCount++;
			var displayTitle = title.join(': ');
			content += '<a href="#" onclick="utui.dashboard.shortcutLink(\'Extensions: ' + displayTitle + '\');">' + displayTitle + '</a>';
			content += ': <span class="' + data[i].status + '">' + data[i].status + '</span>';
			content += '</div>';
		}

		if (totalCount == 0) {
			content += '<div>' + localize.t('tiq.dashboard.summary.there_are_no_active_customizations') + '</div>';
		}

		// Publish Stats Info Here
		var linkURL = '$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'customizations\'].sort)';
		var inactiveCount = totalCount - activeCount;
		var activePercent = 0;
		if (activeCount > 0) activePercent = ((activeCount/totalCount)*100);

		// Create Stats Box
		var title = 'Extensions',
			idTitle = title.replace(' ','');

		content = '';
		content += '<a href="#" onclick="' + linkURL + '";">';
		content += '<div id="dashlet_statsBox_' + idTitle + '" class="dashlet_statsBox extensionStats">';
		content += '	<div class="dashlet_statsTitle">' + localize.t('tiq.dashboard.summary.extensions') + '</div>';
		content += '	<div class="dashlet_statsGraph">';
		content += '			<div class="dashlet_statsGraphFill" style="width:'+activePercent+'%"></div>';
		content += '	</div>';
		content += '	<div class="dashlet_statsContainer">'
		content += '		<div class="dashlet_statsActiveContainer">';
		content += '			<div class="dashlet_statsValue">' + activeCount + '</div>';
		content += '			<div class="dashlet_statsLabel">' + localize.t('tiq.dashboard.summary.active') + '</div>';
		content += '		</div>';
		content += '		<div class="dashlet_statsInactiveContainer">';
		content += '			<div class="dashlet_statsValue">' + inactiveCount + '</div>';
		content += '			<div class="dashlet_statsLabel">' + localize.t('tiq.dashboard.summary.inactive') + '</div>';
		content += '		</div>';
		content += '	</div>';
		content += '</div>';
		content += '</a>';
		$('#dashboard_stats').append(content);
	},

	showLoadRulesDashlet: function () {
		var data = utui.data.loadrules,
			content = '<div class="dashlet-header"><h3><a href="#" onclick="$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'loadrules\'].sort)">' + localize.t('tiq.dashboard.summary.load_rules') + '</a></h3></div>',
			totalCount = 1,
			activeCount = 1,
			ruleManage = [],
			manageList = utui.util.getVars(utui.data.manage, 1);

		content += '<div class="dashboard_shortcut" style="clear:both"><span class="ui-icon ui-icon-carat-1-e" style="float:left">...</span><a href="#" onclick="utui.dashboard.shortcutLink(\'Load Rules: All Pages\');">' + localize.t('tiq.dashboard.summary.all_pages') + '</a>: <span class="active">' + localize.t('tiq.dashboard.summary.active') + '</span></div>';

		for (var j in manageList) {
			var tag = utui.data.manage[j],
				templateObj = utui.config.manageList[tag.tag_id];
			if (typeof templateObj != 'undefined' && tag.loadrule == 'all') {
				var title = templateObj.title;
				if (templateObj.addMore == 'true') {
					title += ': ' + tag.title;
				}
				if (typeof tag.status != 'undefined') title += ' <font class="' + tag.status + '">(' + (tag.status == 'active' ? localize.t('tiq.dashboard.summary.active') : localize.t('tiq.dashboard.summary.inactive')) + ')</font>';
				ruleManage.push(title)
			}
		}

		if (ruleManage.length == 0) ruleManage.push('None');
		content += '<div class="manage_div"><div class="manage_item" style="overflow:auto;max-height:120px;min-width:300px;margin-left:20px">' + ruleManage.join('<br>') + '</div></div>';

		var dataList = utui.util.getVars(data, 1);
		for (var i in dataList) {
			totalCount++;
			content += '<div class="dashboard_shortcut" style="clear:both"><span class="ui-icon ui-icon-carat-1-e" style="float:left">...</span>';

			content += '<a href="#" onclick="utui.dashboard.shortcutLink(\'Load Rules: ' + data[i].title + '\');">';
			content += data[i].title + '</a>: <span class="' + data[i].status + '">' + data[i].status + '</span>';
			if(data[i].status == 'active') activeCount++;
			ruleManage = [];
			for (var j in manageList) {
				if (typeof templateObj != 'undefined' && tag.loadrule == data[i].id) {
					var title = templateObj.title;
					if (templateObj.addMore == 'true') {
						title += ': ' + tag.title;
					}
					if (typeof tag.status != 'undefined') title += ' <font class="' + tag.status + '">(' + (tag.status == 'active' ? localize.t('tiq.dashboard.summary.active') : localize.t('tiq.dashboard.summary.inactive')) + ')</font>';
					ruleManage.push(title)
				}
			}
			if (ruleManage.length == 0) ruleManage.push('None');
			content += '<div class="manage_div"><div class="manage_item" style="overflow:auto;max-height:120px;min-width:300px;margin-left:20px">' + ruleManage.join('<br>') + '</div></div>';
			content += '</div>';
		}

		// Publish Stats Info Here
		var linkURL = '$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'loadrules\'].sort)';
		// utui.dashboard.showStatsData('Load Rules', totalCount, linkURL);
		var inactiveCount = totalCount - activeCount;
		var activePercent = 0;
		if (activeCount > 0) activePercent = ((activeCount/totalCount)*100);

		// Create Stats Box
		var title = 'Load Rules',
			idTitle = title.replace(' ','');

		content = '';
		content += '<a href="#" onclick="' + linkURL + '";">';
		content += '<div id="dashlet_statsBox_' + idTitle + '" class="dashlet_statsBox loadRuleStats">';
		content += '	<div class="dashlet_statsTitle">' + localize.t('tiq.dashboard.summary.load_rules') + '</div>';
		content += '	<div class="dashlet_statsGraph">';
		content += '			<div class="dashlet_statsGraphFill" style="width:'+activePercent+'%"></div>';
		content += '	</div>';
		content += '	<div class="dashlet_statsContainer">'
		content += '		<div class="dashlet_statsActiveContainer">';
		content += '			<div class="dashlet_statsValue">' + activeCount + '</div>';
		content += '			<div class="dashlet_statsLabel">' + 'Active' + '</div>';
		content += '		</div>';
		content += '		<div class="dashlet_statsInactiveContainer">';
		content += '			<div class="dashlet_statsValue">' + inactiveCount + '</div>';
		content += '			<div class="dashlet_statsLabel">' + 'Inactive' + '</div>';
		content += '		</div>';
		content += '	</div>';
		content += '</div>';
		content += '</a>';
		$('#dashboard_stats').append(content);
	},

	showDefineDashlet: function () {
		var data = utui.data.define;
		var content = '<div class="dashlet-header"><h3><a href="#" onclick="$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'define\'].sort)">' + localize.t('tiq.dashboard.summary.data_sources') + '</a></h3></div>';
		var count = 0;
		var totalCount = 0;
		var defineType = {};
		for (var i in utui.util.getVars(data, 1)) {
			count++;
			totalCount++;
			if (typeof defineType[data[i].type] == 'undefined') {
				defineType[data[i].type] = 1;
			} else {
				defineType[data[i].type]++;
			}
		}

		if (count == 0) {
			content += '<div>' + localize.t('tiq.dashboard.summary.there_are_no_actively_defined_data_sources') + '</div>';
		} else {
			for (var i in utui.util.getVars(defineType, 2)) {
				content += '<div style="clear:both"><span class="ui-icon ui-icon-carat-1-e" style="float:left">...</span>' + utui.config.defineOptions[i] + ': ' + defineType[i] + '</div>';
			}
		}

		// Publish Stats Info Here
		var linkURL = '$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'define\'].sort); $(\'#data_layer_data_sources_menu\').trigger(\'click\');';
		utui.dashboard.showStatsData(localize.t('tiq.dashboard.summary.data_sources'), totalCount, linkURL);
	},
	showTestDashlet: function () {
		var data = utui.data.test;
		var content = '<div class="dashlet-header"><h3><a href="#" onclick="$(\'#tabs\').tabs(\'select\', utui.config.tabList[\'test\'].sort)">' + localize.t('tiq.dashboard.summary.test_cases') + '</a></h3></div>';
		var count = 0;
		for (var i in utui.util.getVars(data, 1)) {
			count++;
			content += '<div style="clear:both"><span class="ui-icon ui-icon-carat-1-e" style="float:left">...</span>' + data[i].title + '</div>';
		}
		if (count == 0) {
			content += '<div>' + localize.t('tiq.dashboard.summary.there_are_no_active_test') + '</div>';
		}
		$('#dashboard_content').append('<div id="dashboard_test" class="dashlet">' + content + '</div>');
	},
	updateDataSourceDashlet: function() {
		var $dashlet = $("#dashlet_statsBox_DataSources");
		if($dashlet.length > 0) {
			$dashlet.find('.dashlet_statsValue').html(utui.util.sizeOf(dsapi.getData()));
		}
	}

	};

	return _public;
}();

utui.historyManager = {

    _events : [],
    _verboseEvents : [],
    _getReverseActions : function(action) {
        var actions = [];
        if(action.indexOf("added_") >= 0)
            actions.push(action.replace("added_", "removed_"));
        else if(action.indexOf("removed_") >= 0) {
            actions.push(action.replace("removed_", "added_"));
            actions.push(action.replace("removed_", "toggled_"));
            actions.push(action.replace("removed_", "updated_"));
        }
        else if(action.indexOf("updated") >= 0) {
            actions.push(action.replace("updated_", "added_"));
            actions.push(action.replace("updated_", "updated_"));
        }

        return actions.length === 0 ? [action] : actions;
    },

    _getStringForIndirectChanges : function(tags, status) {
        var html = "";
        var verb = (status == "active") ? "activated" : "deactivated";

        for(var i = 0; i < tags.length; i++) {
            var tag = tags[i];
            var managedTag = utui.data.manage[tag.id];
            var tagname = "";

            if(managedTag && managedTag.title) {
                tagname = utui.util.safeEscape(managedTag.title);
            }
            else if(managedTag && managedTag.tag_name) {
                tagname = managedTag.tag_name;
            }
            else {
                tagname = tag.tag_name;
            }
            tagname += tag.id ? " [UID " + tag.id + "]" : "";

            html += "<div class='row'>";
            html += "<div class='indented'></div>";
            html += "<div class='subMessage'>" + localize.t('tiq.history.' + verb) + " tag " + tagname + "</div>";
            html += "</div>";
        }

        return html;
    },
    _getItemName : function(eventObj) {
        var action = eventObj.action,
	        result = "",
	        isToggle = eventObj.action.indexOf("toggled_") >= 0,
	        isRemoveAction = eventObj.action.indexOf('removed_') >= 0,
	        isInherited = eventObj.data.imported,
			kind = eventObj.data.kind;

        if(action.indexOf("tag") >= 0) {
            // this is a tag
            var tag = utui.data.manage[eventObj.data.id];
            if(tag && tag.title && !isRemoveAction && !tag.imported && !isInherited) {
                result = utui.util.safeEscape(tag.title);
            }
            else if (isInherited) {
	            result = utui.util.safeEscape(eventObj.data.name) || utui.util.safeEscape(eventObj.data.tag_name);
            }
            else {
                result = utui.util.safeEscape(eventObj.data.tag_name);
            }
            result += (eventObj.data.id && !isRemoveAction && !eventObj.data.imported) ? " <span class='historyEventUID' title='UID'>" + eventObj.data.id + "</span>" : (isInherited) ? this._getInheritedItemSource(eventObj) : "";
        }
        else if(action.indexOf("extension") >= 0) {
            // this is an extension
            var extension = utui.data.customizations[eventObj.data.id];
            if(extension && extension.title && !extension.imported) {
	            result = utui.util.safeEscape(extension.title);
            }
            else {
                result = utui.util.safeEscape(eventObj.data.name);
            }

            result += " " + localize.t('tiq.history.of_type') + " (" + (typeof utui.config.customizationList[eventObj.data.type] != "undefined" ? utui.config.customizationList[eventObj.data.type]["title"] : "") + ")";
	        if (isInherited) {
		        result += this._getInheritedItemSource(eventObj);
	        }
        }
        else if(action.indexOf("loadrule") >= 0) {
            // this is a loadrule
            result = utui.util.safeEscape(eventObj.data.name);
            if (isInherited) {
		        result += this._getInheritedItemSource(eventObj);
	        }
        }
        else if(action.indexOf("variable") >= 0) {
            // this is a variable
            result = utui.util.safeEscape(eventObj.data.name);
            if (isInherited) {
		        result += this._getInheritedItemSource(eventObj);
	        }
        }
        else if(action.indexOf("template") >= 0) {
            // this is a template
	        result = this.getInheritedTagTemplateName(eventObj, isInherited);
        }
		else if (kind === utui.constants.data_layer_specs.TYPE) {
			result = utui.util.safeEscape(eventObj.data.name);
		}
		else if (kind === utui.constants.test_configs.TYPE) {
			result = utui.util.safeEscape(eventObj.data.name);
		}
		else if (kind === utui.constants.privacy_management.TYPE) {
			result = utui.util.safeEscape(eventObj.data.name);
		}
		
    if(isToggle && eventObj.data.status) {
      var status = "<span class='historyEventStatus'>" + localize.t('tiq.history.' + eventObj.data.status) + "</span>";
        result += " " + localize.t('tiq.history.to', {status:status});
    }

        return result;
    },
	_getInheritedItemSource : function (eventObj) {
		var env = eventObj.data.imported,
			aliasName = '<span class="env_alias_' + env + '">' + utui.targets.aliasDisplayName(env) + '</span>';

		return " [" + localize.t('tiq.history.inherited_from') + " " + eventObj.data.library + " (" + aliasName + ")]";
	},
	getInheritedTagTemplateName: function (eventObj, isInherited) {
		var templateName = utui.util.safeEscape(eventObj.data.name),
			templateId = eventObj.data.id,
			inheritedTag = tagapi.getInheritedTagObjectByOrigin(eventObj.data.library, templateId);

		if (inheritedTag) {
			var find = 'UID:' + templateId,
				regex = new RegExp(find, "g"),
				replaceText = "UID:" + inheritedTag.id;
			templateName = templateName.replace(regex, replaceText);
		}

		return templateName;
	},
    addEvent : function(eventObj) {
        if(eventObj) {
            // This action can be cancelled by a some other action (ie. add, remove, toggle)
			// For consistency and repurposing old code, lets treat assigned the same as added
			var eventObjAction = eventObj.action.indexOf("assigned_") >= 0 ? "added_" : eventObj.action;
            var reverseActions = this._getReverseActions(eventObjAction);
            var id = parseInt(eventObj.data.id);
            var reverseEventFound = false;
            var duplicateEventFound = false;

            var events = [];
            for(var i = 0; i < this._events.length; i++) {
                var currentEvent = this._events[i];
				// For consistency and repurposing old code, lets treat assigned the same as added
				var currentEventAction = currentEvent.action.indexOf("assigned_") >= 0 ? "added_" : currentEvent.action;

                if(reverseActions.indexOf(currentEvent.action) >= 0
                    && currentEvent.data.id
                    && parseInt(currentEvent.data.id) === id
                    && !currentEvent.data.affectedTags) {
                    // We found the reverse event, get rid of it by not copying it to the new events array

                    if(currentEventAction.indexOf("added_") >= 0 && eventObjAction.indexOf("updated_") >= 0) {
                        events.push(currentEvent);
                        reverseEventFound = true;
                        continue;
                    }
                    else if(currentEventAction.indexOf("updated_") >= 0 && eventObjAction.indexOf("updated_") >= 0) {
                        duplicateEventFound = true;
                    }
                    else if(eventObjAction.indexOf("removed_") >= 0 && currentEventAction.indexOf("added_") < 0){
                        // do nothing
                    }
                    else {
                        reverseEventFound = true;
                    }
                }
                else {
                    events.push(currentEvent);
                }
            }

            if(!reverseEventFound) {
                events.push(eventObj);
            }

            this._events = events;
            this._verboseEvents.push(eventObj);
        }
    },
    clear : function() {
        this._events = [];
        this._verboseEvents = [];
    },
    getNetChanges : function() {
        return this._events;
    },
    getAllChanges : function() {
        return this._verboseEvents;
    },
    getLastEvent : function(bPrettify) {
        var lastEvent = this._verboseEvents[this._verboseEvents.length-1];

        if(bPrettify) {
            return events[i].action.replace("_", " ") + " " + this._getItemName(events[i]);
        }

        return lastEvent;
    },

	// --------------------------------------------------------
	getStringFromEvents: function (events, style, bIcons) {
		var output = "";
		for (var i = 0; i < events.length; i++) {
			var event = events[i],
				obj = event.action.split('_'),
				action = obj[0],
				data = event.data,
				type = _getType(data) || obj[1];

			output += "<div" + (style ? (" class='" + style + "'>") : ">");
			if (bIcons) {
				output += "<div class='" + _getIconClass(event) + "'></div>";
			}

			output += "<div class='historyEvent'><div class='historyEventAction'>" + (localize.t('tiq.history.action_' + action) + " " + localize.t('tiq.history.type_' + type)) + " " + (data.merge_imported_revision ? '<span>via Merge</span>' : '') + "</div><div class='historyEventName'>" + this._getItemName(event) + "</div></div>";

			if (data && data.affectedTags) {
				var status = data.status;
				output += "<div class='subtitle'>" + localize.t('tiq.history.the_following_affected') + "</div>";
				output += "</div>";
				output += this._getStringForIndirectChanges(data.affectedTags, status);
			}
			else {
				output += "</div>";
			}
		}

		// --------------------------------------------------------
		function _getType(data) {
			if (data && data.kind) {
				return data.kind.replace(/ /g, '_').toLowerCase()
			}
			return '';
		}

		// --------------------------------------------------------
		function _getIconClass(event) {
			// turning a string like this "updated_tag" to "updated" and use that as the icon class
			return event.action.replace(/([^_]+)(.*$)/, "$1");
		}

		return output;
	},
    getStringFromEvent : function(event) {
        return events.action.replace("_", " ") + " " + this._getItemName(events);
    },
    getTagHistory : function(uid) {
        uid = '' + uid;
        var tagHistory = {};

        for (var versionId in utui.data.publish_history) {

            var versionObj = utui.data.publish_history[versionId];
            var versionTagHistory = {};

            for (var revisionId in versionObj) {
                var revision = versionObj[revisionId];
                var revisionHistory = JSON.parse(revision.history || '[]');
                var tagEvents = [];

                for(var i = 0; i < revisionHistory.length; i++) {
                    var event = revisionHistory[i];

                    if(event.action.indexOf('_tag') > 0 && event.data.id && (event.data.id + '') === uid) {
                        tagEvents.push(event);
                    }
                }

                if(tagEvents.length > 0) {
                    versionTagHistory[revisionId] = {
                        notes : revision.notes,
                        operator : revision.operator,
                        events : tagEvents,
                        status : revision.status
                    };

                    // We need to grab the version title to display to the user - if we have events to show, let's grab the title off a revision while we're here
                    versionTagHistory.versionTitle = revision.title;
                }
            }

            if (_.size(versionTagHistory) > 0) {
                tagHistory[versionId] = versionTagHistory;
            }
        }

        return tagHistory;
    },
    getTagHistoryHTML : function(uid) {
        var tagHistory = this.getTagHistory(uid);
        var html = '';

        // Sort tagHistory by date (reversed)
        tagHistory = _.sortBy(tagHistory, function(val, key){return key;}).reverse();

        _.each(tagHistory, function(versionTagHistory) {

            // Grab the versionTitle and then delete the key off the object for clean iteration
            var versionTitle = versionTagHistory.versionTitle;
            delete versionTagHistory.versionTitle;

            // Convert object to [key,val] array pairs and sort by date (reversed)
            versionTagHistory = _.pairs(versionTagHistory);
            versionTagHistory.sort(function(a,b) {
                return b[0] - a[0];
            });

            html += '<div class="historyVersionRow"><div class="historyRowHeader">' + versionTitle + '</div>';

            _.each(versionTagHistory, function(revisionPair) {
                var revisionId = revisionPair[0];
                var revision = revisionPair[1];
                var notes = revision.notes;
                var operator = revision.operator;
                var events = revision.events;
                var status = revision.status ? 'Publish' : 'Save';

                html += '<div class="historyRowRevisionHeader">' + utui.util.formatDate(revisionId) + ' GMT</div>';
                html += '<div class="historyHeaderSpacing"></div>';
                html += '<div class="historyRowBody">';
                html += '<div class="historyRowSubHeader">' + operator + '</div>';
                html += '<div class="historyRowSubHeader">' + (status) + ' ' + localize.t('tiq.history.notes') + ' ' + (notes || localize.t('tiq.history.no_notes'));
                if (revision.status) {
                    var evns = revision.status.split(",");
                    for (var _i = 0; _i < evns.length; _i++) {
                        evns[_i] = utui.targets.aliasDisplayName(evns[_i]||"");
                    }
                    html += '<div class="">' + 'Publish Env: ' + " " + evns.join(", ")  +'</div>';
                }
                html += '</div>';

                for(var i = 0; i < events.length; i++) {
                    var event = events[i];
                    html += '<div class="historyRowSubHeaderEvent">' + event.action.replace(/_/g, ' ') + ' ' + event.data['tag_name'] + ' [' + event.data.id + '] </div>';
                }

                html += "</div>";
            });

            html += '</div>';
        });


        if(!html) {
            // There's no history
            html = '<div class="noHistory">' + localize.t('tiq.history.no_events_found') + '</div>';
        }
        return html;
    },
    toString : function() {
        return JSON.stringify(this._events);
    }

};

utui.account = function() {
	// Private API
	var _name,
		_subscriptionInfo,	// Includes all the selected(subscribed to) plan info
		_errorCodeMap = {
			2000: localize.t('tiq.account.error.2000'), //'Error updating your subscription.',
			2001: localize.t('tiq.account.error.2001'), //'Error generating signature',
			2002: localize.t('tiq.account.error.2002'),
			2003: localize.t('tiq.account.error.2003'),
			3000: localize.t('tiq.account.error.3000') //'Unable to communicate with the reporting server.'
		};

	// ----------------------------------------------------------------
	function _setServer2ServerAvailability(isAvailable) {
		utui.account.server2serverAvailable = isAvailable || false;
	}

	// ----------------------------------------------------------------
	// Updates all the UI elements associated with free trial account
	function _updateFreeTrialUI() {
		var isFreeTrial = utui.account.isFreeTrial(),
			hasSubscription = utui.account.hasSubscription(),
			remainingDays = utui.account.freeTrialRemainingDays;

		if (isFreeTrial) {
			// Show Free Trial admin link
			if (utui.login.email.indexOf('@tealium.com') > 0) {
				$('#freeTrial_menuBtn').parent().show();
			} else {
				$('#freeTrial_menuBtn').parent().hide();
			}

			// Replace logo with free trial version
            var trial = localize.t('tiq.logo.trial').toUpperCase();
			$('#logoContainer').html('<div class="productTitle"><i class="fas fa-tags"></i>iQ Tag Management<div class="trial">' + trial + '</div></div>');

			var remainingDayStr = localize.t(((remainingDays == 1) ? 'tiq.account.remaining_days' : 'tiq.account.remaining_days_plural'), {num:remainingDays});
			$('#remainingDays').css('display','inline-block').html(remainingDayStr);

		} else {
			// Hide Free Trial admin link
			$('#freeTrial_menuBtn').parent().hide();

			// Replace logo with main version
			$('#logoContainer').html('<div class="productTitle"><i class="fas fa-tags"></i>iQ Tag Management</div>');
			//TODO: logic for showing Billing Action Required link
//			if (true) {
//				$('#remainingDays').css('display','inline-block').html('Billing Action Required');
//			} else {
				$('#remainingDays').hide();
//			}
		}

		// Update subscription manager link
		if (isFreeTrial || hasSubscription) {
			$('#subscriptionManager_menuBtn').parent().show();
		} else {
			$('#subscriptionManager_menuBtn').parent().hide();
		}
	}

	// ----------------------------------------------------------------
	// This will udpate the account variables and UI
	// This was taken out of the onGetAccountSuccess since subscription manager utilizes it as well
	function _updateAccount(data) {
		var oldName = _name;

		if (data) {
			_name = data.account;
			utui.account.origin = data.origin || false;
			utui.account.state = data.state || false;
            if(data.publish_options && (data.publish_options.use_cdn !== undefined) ){
                utui.account.use_cdn = data.publish_options.use_cdn;
            }
            else {
                utui.account.use_cdn = true; //need to reset the flag to true if the publish_options doesn't exist
            }

			utui.account.freeTrialRemainingDays = data.free_trial_remaining_days || 0;
			utui.account.account_labels = data.account_labels || {};
			utui.account.go_live = data.go_live || {};
			utui.account.sso = data.sso || {};
			utui.account.auditEnabled = data.audit_enabled || false;
			utui.account.sso.slo_url = (utui.account.sso.saml && utui.account.sso.saml.slo_url) ? data.sso.saml.slo_url : {};
			_setServer2ServerAvailability(data.server_to_server_available);
		}

		// Only publish changed event if a new account has been loaded
		if (oldName !== data.account) {
			utui.util.pubsub.publish(utui.constants.account.CHANGED);
		}

		_updateFreeTrialUI();

		utui.util.pubsub.publish(utui.constants.account.LOADED);
	}

	// ----------------------------------------------------------------
	// Allows us to get the subscription info from the subscription manager
	function _getSubscriptionInfo(successCallback, errorCallback) {
		_request.getSubscription(successCallback, errorCallback);
	}

	// ------------------------------------------------------------
	function _sendTaggingEvent(event) {
		var taggingInfo = {
			action:event || utui.constants.account.LOADED,	// Default to account loaded if empty
			free_trial_plan:'platinum',
			subscription_plan: 'platinum',
			plan_usage_total: '0',
			plan_usage_percent: '0',
			free_trial_days_remaining: ''+utui.account.freeTrialRemainingDays,
			plan_state: utui.account.state ? utui.account.state : 'false',	// false|free_trial|active_subscription|active,
			notification_count: $('#notification_badge_button').text()
		};

		// Add the self_service_event if not null
		if (event) {
			taggingInfo.self_service_event = event;
		}

		if (_subscriptionInfo && _subscriptionInfo.plan) {
			taggingInfo.free_trial_plan = _subscriptionInfo.plan.plan_code;

			if (_subscriptionInfo.state === 'in_trial') {
				taggingInfo.subscription_plan = 'free_trial';
			} else if (_subscriptionInfo.state === 'active' || _subscriptionInfo.state === 'canceled') {
				taggingInfo.subscription_plan = _subscriptionInfo.plan.plan_code;
			}

			taggingInfo.plan_usage_total = _subscriptionInfo.current_period_visits_to_date;
			taggingInfo.plan_usage_percent = Math.round((_subscriptionInfo.current_period_visits_to_date / _subscriptionInfo.plan.max_visits) * 100);

			// Prevent NaN
			taggingInfo.plan_usage_total = '' + (taggingInfo.plan_usage_total || 0);
			taggingInfo.plan_usage_percent = '' + (taggingInfo.plan_usage_percent || 0);

			if (taggingInfo.self_service_event === utui.constants.self_service.PLAN_UPGRADED) {
				taggingInfo.plan_changed = _subscriptionInfo.plan.plan_code;
			} else if (taggingInfo.self_service_event === utui.constants.self_service.PLAN_DOWNGRADED) {
				taggingInfo.plan_changed = _subscriptionInfo.pending_subscription_plan.plan_code;
			}
		}

		utui.util.pubsub.publish(utui.constants.tagging.EVENT, taggingInfo);
	}

	// ----------------------------------------------------------------
	var _request = {
		// ------------------------------------------------------------
		getAccount: function(callback, force) {
			// Only load account info when needed
			if (_name === utui.login.account && !force) {
				if (callback) callback(false);
				return;
			}

			utui.util.loadingModalStart(localize.t('tiq.account.retrieving_account'));

			// Load the account information
			var url = utui.service.addParamsToURL(utui.service.restapis.ACCOUNT);
			utui.service.get(url, null, null,
				function(data) {
					_response.onGetAccountSuccess.apply(this, arguments);
					if (callback) callback();
				},

				function(status, response) {
					_response.onGetAccountError.apply(this, arguments);
					if (callback) callback();
				}
			);
		},

		// ------------------------------------------------------------
		// Added to the account since we load it every time the account is loaded
		getSubscription: function(successCallback, errorCallback) {
			var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_SUBSCRIPTION);
			utui.service.get(url, null, null, successCallback, errorCallback);
		}
	};

	// ----------------------------------------------------------------
	var _response = {
		// ------------------------------------------------------------
		onGetAccountSuccess: function(data) {
			utui.util.loadingModalStop();

			// Null out the subscription info
			_subscriptionInfo = null;

			_updateAccount(data);

			// Now get the subscription info if the origin is free_trial
			if (utui.account.isFreeTrial() || utui.account.hasSubscription()) {
				_getSubscriptionInfo(_response.onGetSubscriptionSuccess, _response.onGetSubscriptionError);
			} else {
				// Send data to datacloud
				_sendTaggingEvent();
			}
		},

		// ------------------------------------------------------------
		onGetAccountError: function(status, response) {
			utui.util.loadingModalStop();

			_updateFreeTrialUI();
		},

		// ------------------------------------------------------------
		onGetSubscriptionSuccess: function(data) {
			_subscriptionInfo = data;

			// Send data to datacloud
			_sendTaggingEvent();
		},

		// ------------------------------------------------------------
		onGetSubscriptionError: function(status, response) {

		}

	};

	// ----------------------------------------------------------------
	// Subscription Manager dialog logic
	var _subscriptionManager = function() {
		// Private API
		var _namespace = 'billing_dialog',
			_$template,
			_billingInfo,		// Includes all the account and billing_info for this account
			_invoices,			// Includes upto 12 months of invoices
			_selectedPlan,
			_signature,
			_plans = {
				bronze: {
					plan_code: 'bronze',
					name: localize.t('tiq.account.plans.bronze.name'),
					cost_in_cents: '14900',
					max_visits: '20000',
					overage_cost_in_cents: '750',
					cycle: localize.t('tiq.account.plans.bronze.cycle'),
					benefits: localize.t('tiq.account.plans.bronze.benefits')
				},
				silver: {
					plan_code: 'silver',
					name: localize.t('tiq.account.plans.silver.name'),
					cost_in_cents: '24900',
					max_visits: '40000',
					overage_cost_in_cents: '750',
					cycle: localize.t('tiq.account.plans.silver.cycle'),
					benefits: localize.t('tiq.account.plans.silver.benefits')
				},
				gold: {
					plan_code: 'gold',
					name: localize.t('tiq.account.plans.gold.name'),
					cost_in_cents: '44900',
					max_visits: '75000',
					overage_cost_in_cents: '750',
					cycle: localize.t('tiq.account.plans.gold.cycle'),
					benefits: localize.t('tiq.account.plans.gold.benefits')
				},
				platinum: {
					plan_code: 'platinum',
					name: localize.t('tiq.account.plans.platinum.name'),
					cost_in_cents: localize.t('tiq.account.plans.platinum.cost_in_cents'),
					max_visits: localize.t('tiq.account.plans.platinum.max_visits'),
					overage_cost_in_cents: localize.t('tiq.account.plans.platinum.overage_cost_in_cents'),
					cycle: '(888) 622-2050',
					benefits: localize.t('tiq.account.plans.platinum.benefits')
				}
			};

		// ------------------------------------------------------------
		// Clears(resets) the private variables
		function _clear() {
			_$template = utui.ui.dialog.body(false, true);
			_billingInfo = null;
			_invoices = null;
			_selectedPlan = null;
			_signature = null;
		}

		// ------------------------------------------------------------
		function _toCurrencyFromCents(num) {
			var decimalPlace = (num % 100 > 0) ? 2 : 0;
			return parseFloat(num/100).toFixed(decimalPlace);
		}

		// ------------------------------------------------------------
		// Gets the necessary data from the server to populate the UI
		function _getSubscriptionData() {
			// This needs to be a blocking call so we throw up a spinner
			_request.getPlans(function() {
				_request.getSubscription();
			});
		}

		// ------------------------------------------------------------
		// Highlights the side navigation menu item
		function _highlightNav($el) {
			_$template.find('.dialog-context-nav li').removeClass('selected');
			if ($el) {
				$el.parent().addClass('selected');
			}
		}

		// ------------------------------------------------------------
		// Displays the associates screen with the selected menu item
		function _showScreen(screenName) {
			_$template.find('.dialog-screen').hide();
			_$template.find('#'+_namespace+'_'+screenName+'_headline').show();
			_$template.find('#'+_namespace+'_'+screenName+'_screen').show();
		}

		// ------------------------------------------------------------
		// Returns the recommended plan based off of usage
		function _getRecommendedPlan() {
			var purchasedPlan = _getPurchasedPlan();

			// Only show recommended plan when in free trial, no plan has been purchased yet
			if (purchasedPlan) {
				return purchasedPlan;
			}

			var numVisits = _subscriptionInfo.current_period_visits_to_date || 0,
				numDays = (new Date(_subscriptionInfo.current_period_started_at)).getDate(),
				numDaysInMonth = 30,
				estimatedVisitsInMonth = 0;

			estimatedVisitsInMonth = (numVisits/numDays) * numDaysInMonth;

			// In case of NaN
			estimatedVisitsInMonth = estimatedVisitsInMonth || 0;

			if (estimatedVisitsInMonth < _plans['bronze'].max_visits) return 'bronze';
			if (estimatedVisitsInMonth < _plans['silver'].max_visits) return 'silver';
			if (estimatedVisitsInMonth < _plans['gold'].max_visits) return 'gold';
			else return 'platinum';
		}

		// ------------------------------------------------------------
		// Gets the plan purchased for this account
		function _getPurchasedPlan() {
			if ($.isEmptyObject(_subscriptionInfo)) {
				return null;
			}
			_subscriptionInfo.plan = _subscriptionInfo.plan || {};

			return _subscriptionInfo.state === 'in_trial' ? null : _subscriptionInfo.plan.plan_code;
		}

		// ------------------------------------------------------------
		// Sets the plan_code when purchased
		function _setPurchasedPlan(plan_code) {
			_subscriptionInfo.state = 'active';
			_subscriptionInfo.plan = _subscriptionInfo.plan || {};
			_subscriptionInfo.plan.plan_code = plan_code;
		}

		// ------------------------------------------------------------
		// Returns the total number of visits exceeded this period
		function _getNumVisitsExceeded() {
			if (_subscriptionInfo && _subscriptionInfo.plan) {
				var maxVisits = _subscriptionInfo.plan.max_visits || 0,
					visitsToDate = _subscriptionInfo.current_period_visits_to_date || 0;
				if (visitsToDate > maxVisits) {
					return visitsToDate - maxVisits;
				}
			}
			return 0;
		}

		// ------------------------------------------------------------
		// Lets us know if the user has cancelled the subscription (plan)
		function _hasCancelledPlan() {
			if ($.isEmptyObject(_subscriptionInfo)) {
				return false;
			}
			return _subscriptionInfo.state === 'canceled';
		}

		// ------------------------------------------------------------
		// Updates the plan price and info
		function _updatePlans(data) {
			if (!$.isEmptyObject(data)) {
				// Extend the _plans with the returned data
				$.extend(true, _plans, data);

				// Update with formatted data
				for (var key in _plans) {
					var plan = _plans[key];

					// Format
					if (key !== 'platinum') {
						var price = Number(plan.cost_in_cents),
							visits = Number(plan.max_visits)+'',
							overage = Number(plan.overage_cost_in_cents);

						plan.price = '$' + _toCurrencyFromCents(price) + '';
						plan.visits = utui.util.numberWithCommas(visits);
						plan.overage = localize.t('tiq.account.plans.overage', {price:'$' + _toCurrencyFromCents(overage)});

					} else {
						plan.price = plan.cost_in_cents;
						plan.visits = plan.max_visits;
						plan.overage = plan.overage_cost_in_cents;
					}
				}
			}
		}

		// ------------------------------------------------------------
		// Updates the billing info fields by setting the values stored in _subscriptionInfo.billing_info
		function _setBillingInfoFields() {
			var info = !$.isEmptyObject(_billingInfo) ? _billingInfo : $.extend(true, {}, utui.users.getCurrentUser());
			info.billing_info = info.billing_info || {first_name:info.first_name, last_name:info.last_name};

			// Show last four digits of credit card number
			if (info.billing_info.last_four) {
				info.billing_info.number = '****-****-****-' + info.billing_info.last_four;
			}

			var $context = _$template.find('.billing-information');
			if ($context.get(0)) {
				$context.find('#' + _namespace + '_account_first_name').val(info.first_name || '');
				$context.find('#' + _namespace + '_account_last_name').val(info.last_name || '');
				$context.find('#' + _namespace + '_account_email').val(info.email || '');
				for (var key in info.billing_info) {
					var val = info.billing_info[key] || '';
					if (val || val === '') {
						var $el = $context.find('#' + _namespace + '_billing_' + key);
						if ($el.hasClass('select2')) {
							$el.select2('val', val);
						} else {
							$el.val(val);
						}
					}
				}
			}
		}

		// ------------------------------------------------------------
		// This will loop over all the fields in the forms and
		function _getBillingInfoFields() {
			var $fields = $('.billing-information').find(':input'),
				data = {account:{},billing_info:{}};

			// Loop over all the form fields and populate the object that will be returned
			for (var i=0; i<$fields.length; i++) {
				var name = $fields[i].id,
					isAccount = name.indexOf('_account') > -1,
					idRegExp = /^billing_dialog_(billing|account)_/i;

				// Disregard field if not the correct format
				if (!idRegExp.test(name)) continue;

				name = name.replace(idRegExp, '');

				if (isAccount) {
					data.account[name] = $($fields[i]).val();
				} else {
					data.billing_info[name] = $($fields[i]).val();
				}
			}

			return data;
		}

		// ------------------------------------------------------------
		// Removes the credit card info from the _billingInfo object
		function _clearPersonalBillingInfoFields() {
			var $context = _$template.find('.billing-information'),
				billingNumber = $context.find('#' + _namespace + '_billing_number').val(),
				number = billingNumber.length > 4 ? '****-****-****-' + billingNumber.substring(billingNumber.length-4, billingNumber.length) : '';

			// Now clear the credit card fields
			$context.find('#' + _namespace + '_billing_number').val(number);
			$context.find('#' + _namespace + '_billing_month').select2('val', '');
			$context.find('#' + _namespace + '_billing_year').select2('val', '');
			$context.find('#' + _namespace + '_billing_verification_value').val('');
		}

		// ------------------------------------------------------------
		// Sets the account information stored in _billingInfo from the form fields
		function _setBillingInfoAccountData() {
			var data = _getBillingInfoFields(),
				billingInfo = data.account;

			// Default _billingInfo to an empty object if null
			_billingInfo = _billingInfo || {};

			// Retain current billing info
			billingInfo.billing_info = _billingInfo.billing_info;

			_billingInfo = billingInfo;
		}

		// ------------------------------------------------------------
		// Sets the billing information stored in _billingInfo from the form fields
		function _setBillingInfoBillingData() {
			var data = _getBillingInfoFields();

			// Default _billingInfo to an empty object if null
			_billingInfo = _billingInfo || {};

			_billingInfo.billing_info = data.billing_info;
		}

		// ------------------------------------------------------------
		// This replaces _billingInfo data with what is stored in the form fields
		function _setBillingInfoData() {
			_setBillingInfoAccountData();
			_setBillingInfoBillingData();
		}

		// ----------------------------------------------------------------
		function _onCancelAccount() {
			// Display are you sure dialog before actually cancelling
			var namespace = 'cancel_account_dialog',
				v = '',
				dt = '<strong> ' + utui.util.date.getOrdinalDateFromDateString(_subscriptionInfo.current_period_ends_at) + '</suscription_end_date></strong>';

			v += '<div id="' + namespace + '_description" style="padding:20px;">';
			v += '  <h2>' + localize.t('tiq.account.cancel_account.header') + '</h2>';
			v += '  <ul>';
			v += '      <li>' + localize.t('tiq.account.cancel_account.li1', {date:dt}) + '</li>';
			v += '      <li>' + localize.t('tiq.account.cancel_account.li2') + '</li>';
			v += '      <li>' + localize.t('tiq.account.cancel_account.li3') + '</li>';
			v += '      <li>' + localize.t('tiq.account.cancel_account.li4') + '</li>';
			v += '      <li>' + localize.t('tiq.account.cancel_account.li5') + '</li>';
			v += '  </ul>';
			v += '  <br />';
			v += '  <input id="' + namespace + '_RemoveUtagCkbx" type="checkbox" /> <label for="' + namespace + '_RemoveUtagCkbx" class="terms">' + localize.t('tiq.account.cancel_account.terms') + '</label>';
			v += '</div>';

			var buttons = [
				{
					text: localize.t('tiq.dialog.button.unsubscribe'),
					click: function() {
						if ($('#'+namespace+'_CancelAccountBtn').hasClass('ui-state-disabled')) {
							return false;
						} else {
							_request.cancelAccount();
							utui.ui.dialog.dispose(namespace);
						}
					},
					id: namespace + '_CancelAccountBtn'
				},
				{
					text: localize.t('tiq.dialog.button.go_back'),
					click: function () {
						utui.ui.dialog.dispose(namespace);
					},
					id: namespace + '_GoBackAccountBtn',
					style: 'float:left; margin-left: 12px'
				}
			];

			utui.ui.dialog.show(namespace, localize.t('tiq.account.cancel_account.title'), buttons, v, {width: 500});

			_bindUI.checkboxEnabledButton(namespace + '_RemoveUtagCkbx', namespace + '_CancelAccountBtn', true);
		}

		// ------------------------------------------------------------
		function _onReactivateAccount() {
			// Display are you sure dialog before actually reactivating
			var namespace = 'reactivate_account_dialog',
				v = '',
				dt = '<strong>' + utui.util.date.getOrdinalDateFromDateString(_subscriptionInfo.current_period_ends_at) + '</strong>';

			v += '<div id="' + namespace + '_description" style="padding:20px;">';
			v += localize.t('tiq.account.reactivate.most_excellent');
			v += '<p>' + localize.t('tiq.account.reactivate.no_longer_cancelled') + '</p>';
			v += '</div>';

			var buttons = [
				{
					text: localize.t('tiq.dialog.button.ok'),
					click: function() {
						_request.reactivateAccount();
						utui.ui.dialog.dispose(namespace);
					},
					id: namespace + '_CancelAccountBtn'
				},
				{
					text: localize.t('tiq.dialog.button.go_back'),
					click: function () {
						utui.ui.dialog.dispose(namespace);
					},
					id: namespace + '_GoBackAccountBtn',
					style: 'float:left; margin-left: 12px'
				}
			];

			utui.ui.dialog.show(namespace, localize.t('tiq.account.reactivate.title'), buttons, v, {width: 500});
		}

		// ------------------------------------------------------------
		function _getInvoiceState (state) {
			var v = '';

			if (state === 'collected') {
				v += '<i style="padding-right:5px;" class="icon-ok-sign"></i>' + localize.t('tiq.account.plans.collected');
			} else if (state === 'open') {
				v += '<i style="padding-right:5px;" class="icon-ok-sign"></i>' + localize.t('tiq.account.plans.pending');
			} else if (state === 'failed') {
				v += '<i style="padding-right:5px;" class="icon-warning-sign"></i>' + localize.t('tiq.account.plans.failed');
			} else if (state === 'past_due') {
				v += '<i style="padding-right:5px;" class="icon-exclamation-sign"></i>' + localize.t('tiq.account.plans.past_due');
			}

			return v;
		}

		// ------------------------------------------------------------
		function _getVal($el) {
			return $el.val().trim();
		}

		// ------------------------------------------------------------
		function _showValidationMessage($el, msg) {
			if ($el.hasClass('select2')) $el.select2('focus');
			else $el.focus();
			_$template.find('.validation-message').html(msg).show();
		}

		// ------------------------------------------------------------
		function _hideValidationMessage() {
			_$template.find('.validation-message').html('').hide();
		}

		// ------------------------------------------------------------
		// Parse the recurly error
		function _getErrorFromRecurly(errors) {
			if (errors && errors.base) {
				var foundErrors = [];
				var recurlyErrors = {
					5000:{field:'', message:localize.t('tiq.account.error.5000')},
					5001:{field:'', message:localize.t('tiq.account.error.5001')},
					5002:{field:'', message:localize.t('tiq.account.error.5002')},
					5005:{field:'', message:localize.t('tiq.account.error.5005')},
					5010:{field:'subscription_coupon_code', message:localize.t('tiq.account.error.5010')},
					5020:{field:'account_email', message:localize.t('tiq.account.error.5020')},
					5030:{field:'billing_first_name', message:localize.t('tiq.account.error.5030')},
					5031:{field:'billing_last_name', message:localize.t('tiq.account.error.5031')},
					5032:{field:'billing_city', message:localize.t('tiq.account.error.5032')},
					5033:{field:'billing_country', message:localize.t('tiq.account.error.5033')},
					5034:{field:'billing_zip', message:localize.t('tiq.account.error.5034')},
					5035:{field:'billing_country', message:localize.t('tiq.account.error.5035')},
					5040:{field:'billing_month', message:localize.t('tiq.account.error.5040')},
					5041:{field:'billing_year', message:localize.t('tiq.account.error.5041')},
					5042:{field:'billing_month', message:localize.t('tiq.account.error.5042')},
					5043:{field:'billing_number', message:localize.t('tiq.account.error.5043')}
				}

				// Loop over all the errors the recurly returned and push them into our foundErrors array
				for (var i=0; i<errors.base.length; i++) {
					var errorMsg = errors.base[i];
					// General
					if (/payment/i.test(errorMsg)) {                        // Your payment session has ended.
						foundErrors.push(5000);
					} else if (/processed/i.test(errorMsg)) {               // This request has already been been processed.
						foundErrors.push(5001);
					} else if (/signature/i.test(errorMsg)) {               // Invalid signature
						foundErrors.push(5002);

					// Subscription Info
					} else if (/coupon code/i.test(errorMsg)) {             // Coupon code is invalid
						foundErrors.push(5010);

					// Account info
					} else if (/email/i.test(errorMsg)) {                   // Email is not a valid email address
						foundErrors.push(5020);

					// Billing Info
					} else if (/address1/i.test(errorMsg)) {                // Billing info address1 can't be empty
						foundErrors.push(5030);
					} else if (/address2/i.test(errorMsg)) {                // Billing info address2 can't be empty
						foundErrors.push(5031);
					} else if (/city/i.test(errorMsg)) {                    // Billing info city can't be empty
						foundErrors.push(5032);
					} else if (/state/i.test(errorMsg)) {                   // Billing info state can't be empty
						foundErrors.push(5033);
					} else if (/zip/i.test(errorMsg)) {                     // Billing info zip can't be empty	// Billing info zip is invalid
						foundErrors.push(5034);
					} else if (/country/i.test(errorMsg)) {                 // Billing info country can't be empty
						foundErrors.push(5035);
					} else if (/month/i.test(errorMsg)) {                   // Billing info month is not a number
						foundErrors.push(5040);
					} else if (/year/i.test(errorMsg)) {                    // Billing info year is not a number
						foundErrors.push(5041);
					} else if (/invalid expiration date/i.test(errorMsg)) {         // Billing info number is expired or has an invalid expiration date
						foundErrors.push(5042);
					} else if (/invalid credit card number/i.test(errorMsg)) {      // Billing info number is not a valid credit card number
						foundErrors.push(5043);
					} else if (/number/i.test(errorMsg)) {                  // catch all credit card
						foundErrors.push(5043);

					} else {                                                // Catch all
						foundErrors.push(5000);
					}
				}

				// There is no guarantee of the order recurly sends the errors in so we must sort them and return the first one
				if (foundErrors.length > 0) {
					foundErrors.sort();
					return recurlyErrors[foundErrors[0]];
				}
				return null;
			}
		}

		// ------------------------------------------------------------
		function _buildStateSelect(id) {
			var options = '',
				states = [];

			states.push({value:'AL', text:'Alabama'});
			states.push({value:'AK', text:'Alaska'});
			//states.push({value:'AS', text:'American Samoa'});
			states.push({value:'AZ', text:'Arizona'});
			states.push({value:'AR', text:'Arkansas'});
			//states.push({value:'AA', text:'Armed Forces Americas'});
			//states.push({value:'AE', text:'Armed Forces Europe, Middle East, &amp; Canada'});
			//states.push({value:'AP', text:'Armed Forces Pacific'});
			states.push({value:'CA', text:'California'});
			states.push({value:'CO', text:'Colorado'});
			states.push({value:'CT', text:'Connecticut'});
			states.push({value:'DE', text:'Delaware'});
			//states.push({value:'DC', text:'District of Columbia'});
			//states.push({value:'FM', text:'Federated States of Micronesia'});
			states.push({value:'FL', text:'Florida'});
			states.push({value:'GA', text:'Georgia'});
			//states.push({value:'GU', text:'Guam'});
			states.push({value:'HI', text:'Hawaii'});
			states.push({value:'ID', text:'Idaho'});
			states.push({value:'IL', text:'Illinois'});
			states.push({value:'IN', text:'Indiana'});
			states.push({value:'IA', text:'Iowa'});
			states.push({value:'KS', text:'Kansas'});
			states.push({value:'KY', text:'Kentucky'});
			states.push({value:'LA', text:'Louisiana'});
			states.push({value:'ME', text:'Maine'});
			//states.push({value:'MH', text:'Marshall Islands'});
			states.push({value:'MD', text:'Maryland'});
			states.push({value:'MA', text:'Massachusetts'});
			states.push({value:'MI', text:'Michigan'});
			states.push({value:'MN', text:'Minnesota'});
			states.push({value:'MS', text:'Mississippi'});
			states.push({value:'MO', text:'Missouri'});
			states.push({value:'MT', text:'Montana'});
			states.push({value:'NE', text:'Nebraska'});
			states.push({value:'NV', text:'Nevada'});
			states.push({value:'NH', text:'New Hampshire'});
			states.push({value:'NJ', text:'New Jersey'});
			states.push({value:'NM', text:'New Mexico'});
			states.push({value:'NY', text:'New York'});
			states.push({value:'NC', text:'North Carolina'});
			states.push({value:'ND', text:'North Dakota'});
			//states.push({value:'MP', text:'Northern Mariana Islands'});
			states.push({value:'OH', text:'Ohio'});
			states.push({value:'OK', text:'Oklahoma'});
			states.push({value:'OR', text:'Oregon'});
			//states.push({value:'PW', text:'Palau'});
			states.push({value:'PA', text:'Pennsylvania'});
			//states.push({value:'PR', text:'Puerto Rico'});
			states.push({value:'RI', text:'Rhode Island'});
			states.push({value:'SC', text:'South Carolina'});
			states.push({value:'SD', text:'South Dakota'});
			states.push({value:'TN', text:'Tennessee'});
			states.push({value:'TX', text:'Texas'});
			states.push({value:'UT', text:'Utah'});
			states.push({value:'VT', text:'Vermont'});
			//states.push({value:'VI', text:'Virgin Islands'});
			states.push({value:'VA', text:'Virginia'});
			states.push({value:'WA', text:'Washington'});
			states.push({value:'WV', text:'West Virginia'});
			states.push({value:'WI', text:'Wisconsin'});
			states.push({value:'WY', text:'Wyoming'});

			for (var i=0; i<states.length; i++) {
				var state = states[i];
				options += '<option value="' + state.value + '">' + state.text + '</option>';
			}

			return '<select id="' + id + '" class="select2"><option value="">-- ' + localize.t('tiq.account.select_state') + ' --</option>' + options + '</select>';
		}

		// ------------------------------------------------------------
		function _buildCountrySelect(id) {
			return '<select id="' + id + '" class="select2"><option value="US">United States</option></select>';
		}

		// ------------------------------------------------------------
		function _buildMonthSelect(id) {
			var options = '',
				months = [];

			months.push({value:'01', text:'01 - Jan'});
			months.push({value:'02', text:'02 - Feb'});
			months.push({value:'03', text:'03 - Mar'});
			months.push({value:'04', text:'04 - Apr'});
			months.push({value:'05', text:'05 - May'});
			months.push({value:'06', text:'06 - Jun'});
			months.push({value:'07', text:'07 - Jul'});
			months.push({value:'08', text:'08 - Aug'});
			months.push({value:'09', text:'09 - Sep'});
			months.push({value:'10', text:'10 - Oct'});
			months.push({value:'11', text:'11 - Nov'});
			months.push({value:'12', text:'12 - Dec'});

			for (var i=0; i<months.length; i++) {
				var month = months[i];
				options += '<option value="' + month.value + '">' + month.text + '</option>';
			}

			return '<select id="' + id + '" class="select2"><option value="">-- ' + localize.t('tiq.account.select_month') + ' --</option>' + options + '</select>';
		}

		// ------------------------------------------------------------
		function _buildYearSelect(id) {
			var options = '',
				year = Number((new Date()).getFullYear());

			for(var i=year; i<=year+10; i++) {
				options += '<option value="' + i + '">' + i + '</option>';
			}

			return '<select id="' + id + '" class="select2"><option value="">-- ' + localize.t('tiq.account.select_year') + ' --</option>' + options + '</select>';
		}

		// ------------------------------------------------------------
		function _isValid() {
			var account_prefix = '#' + _namespace + '_account_',
				billing_prefix = '#' + _namespace + '_billing_',
				$account_first_name = $(account_prefix + 'first_name'),
				$account_last_name = $(account_prefix + 'last_name'),
				$account_email = $(account_prefix + 'email'),

				$billing_first_name = $(billing_prefix + 'first_name'),
				$billing_last_name = $(billing_prefix + 'last_name'),
				$billing_address1 = $(billing_prefix + 'address1'),
				$billing_address2 = $(billing_prefix + 'address2'),
				$billing_city = $(billing_prefix + 'city'),
				$billing_state = $(billing_prefix + 'state'),
				$billing_zip = $(billing_prefix + 'zip'),
				$billing_country = $(billing_prefix + 'country'),

				$billing_number = $(billing_prefix + 'number'),
				$billing_month = $(billing_prefix + 'month'),
				$billing_year = $(billing_prefix + 'year'),
				$billing_verification_value = $(billing_prefix + 'verification_value'),

				inputRegExp = XRegExp('^[\\p{L}0-9-_ \\.\']{1,50}$'),	///^[a-z0-9-_ \.']{1,50}$/i,
				emailRegExp = /^(.+)@(.+)\.([^\.]+)$/i,
				//emailRegExp = XRegExp('^[\\p{L}0-9_\\.\\-\\+]+\\@([\\p{L}0-9\\-]+\\.)+[\\p{L}0-9]{2,4}$'),	///^([a-z0-9_\.\-\+])+\@(([a-z0-9\-])+\.)+([a-z0-9]{2,4})+$/i,
				addressRegExp = XRegExp('^[\\p{L}0-9_\\.#\' -]{2,60}$'),	///^[a-z0-9_\.#' -]{2,60}$/i,
				cityRegExp = XRegExp('^[\\p{L}0-9\\.&@#\\- \']{1,75}$'),	///^[a-z0-9\.&@#\- ']{1,75}$/i,
				zipRegExp = /^\d{5}(-\d{4})?$/;

			_hideValidationMessage();

			// Validate Account Info
			if (_getVal($account_first_name) === '') {
				_showValidationMessage($account_first_name, localize.t('tiq.account.error.billing_first_name_required'));
				return false;

			} else if (!inputRegExp.test(_getVal($account_first_name))) {
				_showValidationMessage($account_first_name, localize.t('tiq.account.error.billing_first_name_invalid_chars'));
				return false;

			} else if (_getVal($account_last_name) === '') {
				_showValidationMessage($account_last_name, localize.t('tiq.account.error.billing_last_name_required'));
				return false;

			} else if (!inputRegExp.test(_getVal($account_last_name))) {
				_showValidationMessage($account_last_name, localize.t('tiq.account.error.billing_last_name_invalid_chars'));
				return false;

			} else if (_getVal($account_email) === '') {
				_showValidationMessage($account_email, localize.t('tiq.account.error.billing_email_required'));
				return false;

			} else if (!emailRegExp.test(_getVal($account_email))) {
				_showValidationMessage($account_email, localize.t('tiq.account.error.billing_email_invalid'));
				return false;

			// Validate Billing Info
			} else if (_getVal($billing_first_name) === '') {
				_showValidationMessage($billing_first_name, localize.t('tiq.account.error.payment_first_name_requried'));
				return false;

			} else if (!inputRegExp.test(_getVal($billing_first_name))) {
				_showValidationMessage($billing_first_name, localize.t('tiq.account.error.payment_first_name_invalid_chars'));
				return false;

			} else if (_getVal($billing_last_name) === '') {
				_showValidationMessage($billing_last_name, localize.t('tiq.account.error.payment_last_name_required'));
				return false;

			} else if (!inputRegExp.test(_getVal($billing_last_name))) {
				_showValidationMessage($billing_last_name, localize.t('tiq.account.error.payment_last_name_invalid_chars'));
				return false;

			} else if (_getVal($billing_address1) === '') {
				_showValidationMessage($billing_address1, localize.t('tiq.account.error.payment_address_required'));
				return false;

			} else if (!addressRegExp.test(_getVal($billing_address1))) {
				_showValidationMessage($billing_address1, localize.t('tiq.account.error.payment_address_invalid'));
				return false;

			} else if (_getVal($billing_address2) !== '' && !addressRegExp.test(_getVal($billing_address2))) {
				_showValidationMessage($billing_address2, localize.t('tiq.account.error.payment_address2_invalid'));
				return false;

			} else if (_getVal($billing_city) === '') {
				_showValidationMessage($billing_city, localize.t('tiq.account.error.payment_city_required'));
				return false;

			} else if (!cityRegExp.test(_getVal($billing_city))) {
				_showValidationMessage($billing_city, localize.t('tiq.account.error.payment_city_invalid'));
				return false;

			} else if (_getVal($billing_state) === '') {
				_showValidationMessage($billing_state, localize.t('tiq.account.error.payment_state_required'));
				return false;

			} else if (_getVal($billing_zip) === '') {
				_showValidationMessage($billing_zip, localize.t('tiq.account.error.payment_zip_required'));
				return false;

			} else if (!zipRegExp.test(_getVal($billing_zip))) {
				_showValidationMessage($billing_zip, localize.t('tiq.account.error.payment_zip_invalid'));
				return false;

			} else if (_getVal($billing_country) === '') {
				_showValidationMessage($billing_country, localize.t('tiq.account.error.payment_country_required'));
				return false;

			// Validate Payment Info
			} else if (_getVal($billing_number) === '') {
				_showValidationMessage($billing_number, localize.t('tiq.account.error.payment_cc_required'));
				return false;

			} else if (!_validation.isValidCCNumber(_getVal($billing_number))) {
				_showValidationMessage($billing_number, localize.t('tiq.account.error.payment_cc_invalid'));
				return false;

			}	else if (_getVal($billing_month) === '') {
				_showValidationMessage($billing_month, localize.t('tiq.account.error.payment_cc_month_required'));
				return false;

			} else if (_getVal($billing_year) === '') {
				_showValidationMessage($billing_year, localize.t('tiq.account.error.payment_cc_year_required'));
				return false;

			}	else if (!_validation.isValidCCDate(_getVal($billing_month), _getVal($billing_year))) {
				_showValidationMessage($billing_month, localize.t('tiq.account.error.payment_cc_date_invalid'));
				return false;

			} else if (_getVal($billing_verification_value) === '') {
				_showValidationMessage($billing_verification_value, localize.t('tiq.account.error.payment_ccv_required'));
				return false;

			} else if (!_validation.isValidCCCCV(_getVal($billing_verification_value))) {
				_showValidationMessage($billing_verification_value, localize.t('tiq.account.error.payment_ccv_invalid'));
				return false;
			}

			return true;
		}

		// ------------------------------------------------------------
		var _validation = {
			// --------------------------------------------------------
			isValidCCNumber: function(value) {
				// Strip out all non digits
				value = value.replace(/\D/g, "");

				if(value == "") return false;

				//visa|master card|discover|american express|diners
				var ccRegExp = /^4\d{3}-?\d{4}-?\d{4}-?\d{4}$|^5[1-5]\d{2}-?\d{4}-?\d{4}-?\d{4}$|^6011-?\d{4}-?\d{4}-?\d{4}$|^3[4,7]\d{13}$|^3[0,6,8]\d{12}$/;
				if (!ccRegExp.test(value)) return false;
				var checksum = 0;
				for (var i = (2 - (value.length % 2)); i <= value.length; i += 2) {
					checksum += parseInt(value.charAt(i - 1))
				}
				for (var i = (value.length % 2) + 1; i < value.length; i += 2) {
					var digit = parseInt(value.charAt(i - 1)) * 2;
					if (digit < 10) checksum += digit;
					else checksum += (digit - 9)
				}
				if ((checksum % 10) == 0) return true;
				else return false
			},

			// --------------------------------------------------------
			isValidCCCCV: function(value) {
				var isWholeNumber = /^[0-9]+$/.test(value);
				return (value.length == 3 || value.length == 4) && isWholeNumber;
			},

			// --------------------------------------------------------
			isValidCCDate: function(month, year) {
				var then = new Date(month + '/01/' + year),
					now = new Date();

				return now <= then;
			}
		}

		// ------------------------------------------------------------
		var _render = {
			// --------------------------------------------------------
			ui: function(forceRender) {
				// Before we render the context, was there a previously selected tab? - Default to summary tab if not
				var tabID = _$template.find('.dialog-context-nav li.selected a').attr('id') || (_namespace + '_billing_summary_menu');
				if (forceRender || (_hasCancelledPlan() && tabID === _namespace + '_billing_upgrade_menu')) {
					tabID = _namespace + '_billing_summary_menu';
				}

				_render.context();
				_render.content();

				// Scroll to the top of the scrollable areas
				_$template.find('.dialog-content-body').scrollTop(0);

				// Select the tab
				_$template.find('#'+tabID).trigger('click');
			},

			// --------------------------------------------------------
			context: function() {
				_$template.find('.dialog-context-body').html(_view.contextBody());
			},

			// --------------------------------------------------------
			content: function() {
				_$template.find('.dialog-content-header').html(_view.contentHeader());
				_$template.find('.dialog-content-body').html(_view.contentBody()).css({'height':'425px'});
				_$template.find('.dialog-content-footer').html(_view.contentFooter());

				_bindUI.global();
				_bindUI.tooltip();
			},

			// --------------------------------------------------------
			billingSummary: function(forceRender) {
				var plan_code = _getPurchasedPlan() || 'noplan',
					$headline = _$template.find('#' + _namespace + '_billing_summary_headline'),
					$screen = _$template.find('#' + _namespace + '_billing_summary_screen');

				var render = true;
				if ($screen.hasClass(plan_code)) render = false;

				// Only render if plan has changed
				if (render || forceRender) {
					$headline.html(_view.billingSummaryHeadline());
					$screen.html(_view.billingSummary());

					$screen.addClass(plan_code);

					_bindUI.billingSummary();

					// Make the scrollbar reset to the top
					_$template.find('.dialog-content-body').scrollTop(0);

					_request.getUsageSummary();
				}
			},

			// --------------------------------------------------------
			billingUpgrade: function (forceRender) {
				var $headline = _$template.find('#' + _namespace + '_billing_upgrade_headline'),
					$screen = _$template.find('#' + _namespace + '_billing_upgrade_screen');

				$headline.html(_view.billingUpgradeHeadline());
				$screen.html(_view.billingUpgrade());

				_bindUI.billingUpgrade();

				_setBillingInfoFields();

				// Make the scrollbar reset to the top
				_$template.find('.dialog-content-body').scrollTop(0);
			},

			// --------------------------------------------------------
			billingInfo: function (forceRender) {
				// If _billingInfo is null then try to get it
				if (!_billingInfo) {
					_request.getBilling();
					return;
				}

				var $headline = _$template.find('#' + _namespace + '_billing_info_headline'),
					$screen = _$template.find('#' + _namespace + '_billing_info_screen');

				// Hides the validation message if present
				_hideValidationMessage();

//				// Only render if needed
//				if (render || forceRender) {
				$headline.html(_view.billingInfoPlanHeadline());
				$screen.html(_view.billingInfo());

				_bindUI.billingInfo();

				// Make the scrollbar reset to the top
				_$template.find('.dialog-content-body').scrollTop(0);

				_setBillingInfoFields();
//				}
			},

			// --------------------------------------------------------
			billingInvoices: function() {
				// If _invoices is null then fetch them
				if (!_invoices) {
					_request.getInvoices();
					return;
				}

				_$template.find('#' + _namespace + '_billing_invoices_headline').html(_view.billingInvoicesHeadline());
				_$template.find('#' + _namespace + '_billing_invoices_screen').html(_view.billingInvoices());
			}
		};

		// ------------------------------------------------------------
		var _view = {
			// --------------------------------------------------------
			contextBody: function() {
				var v = '',
					purchasedPlan = _getPurchasedPlan(),
					upgradeTitle = purchasedPlan ? localize.t('tiq.account.subscription.change_plan') : localize.t('tiq.account.subscription.subscribe_now'),
					hasCancelledPlan = _hasCancelledPlan();

				v += '<div class="dialog-context-title">' + localize.t('tiq.account.subscription.user_account') + '</div>';

				v += '<ul class="dialog-context-nav">';
				v += '	<li><a id="'+_namespace+'_billing_summary_menu" href="#">Summary</a></li>';
				if (!hasCancelledPlan) {
					v += '	<li><a id="'+_namespace+'_billing_upgrade_menu" href="#">' + upgradeTitle + '</a></li>';
				}

				if (purchasedPlan) {
					v += '	<li><a id="'+_namespace+'_billing_info_menu" href="#">' + localize.t('tiq.account.subscription.billing_info') + '</a></li>';
					v += '	<li><a id="'+_namespace+'_billing_invoices_menu" href="#">' + localize.t('tiq.account.subscription.invoices') + '</a></li>';
				}

				v += '</ul>';

				// Only show if they have a purchased plan and the plan has not yet been cancelled
				v += '<div style="position:absolute; bottom:0; margin:0 10px 10px 10px; width:180px; text-align:center;">';
				v += '	<span id="'+_namespace+'_unsubscribe_btn" class="btn" style="width:80%; display:' + (purchasedPlan && !hasCancelledPlan ? 'block' : 'none') + ';">' + localize.t('tiq.account.subscription.unsubscribe') + '</button>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------------
			contentHeader: function() {
				var v = '';

				v += '<div id="'+_namespace+'_billing_summary_headline" class="dialog-screen"></div>';
				v += '<div id="'+_namespace+'_billing_upgrade_headline" class="dialog-screen"></div>';
				v += '<div id="'+_namespace+'_billing_info_headline" class="dialog-screen"></div>';
				v += '<div id="'+_namespace+'_billing_invoices_headline" class="dialog-screen"></div>';

				return v;
			},

			// --------------------------------------------------------
			contentBody: function() {
				var v = '';

				v += '<div id="'+_namespace+'_billing_summary_screen" class="dialog-screen"></div>';
				v += '<div id="'+_namespace+'_billing_upgrade_screen" class="dialog-screen"></div>';
				v += '<div id="'+_namespace+'_billing_info_screen" class="dialog-screen"></div>';
				v += '<div id="'+_namespace+'_billing_invoices_screen" class="dialog-screen"></div>';

				return v;
			},

			// --------------------------------------------------------
			contentFooter: function() {
				var v = '';

				v += '';

				return v;
			},

			// --------------------------------------------------------
			billingSummaryHeadline: function() {
				var v = '',
					plan_code = _getPurchasedPlan();

				if (!plan_code) {
					v += '<div class="dialog-content-headline valign-container">';
					v += '	<div class="dialog-content-headline subscriptionBanner">';
					v += '		<div class="selected-plan plan-free">';
					v += '			<i class="icon-gift"></i>';
					v += '			<div class="planBannerName">' + localize.t('tiq.account.subscription.free_trial') + '</div>';
					v += '				<a id="'+_namespace+'_subscribe_btn" class="planBannerSubscribe" href="#">' + localize.t('tiq.account.subscription.summary.subscribe_now') + '</a>';
					v += '				<div class="planBannerOverage">' + localize.t('tiq.account.subscription.summary.billing_will_begin') + '</div>';
					v += '				<div class="planBannerVisits">';
					v += '					<div class="planBannerVisitsValue">' + utui.account.freeTrialRemainingDays + '</div>';
					v += '					<div class="planBannerVisitsLabel">' + localize.t('tiq.account.subscription.summary.days_remaining', {count:utui.account.freeTrialRemainingDays}) + '</div>';
					v += '				</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

				} else {
					v += _view.billingInfoPlanHeadline();
				}

				return v;
			},

			// --------------------------------------------------------
			billingSummary: function() {
				var v = '',
					visitsOverage = _getNumVisitsExceeded();

				v += '<div>';
				v += '	<div class="container-fluid">';
				v += '		<div class="row-fluid">';
				v += '			<div class="scrollable-chart">';
				v += '				<h2>' + localize.t('tiq.account.subscription.summary.title') + '</h2>';

				if (_getPurchasedPlan() && visitsOverage > 0) {
					var limit = '<strong>' + utui.util.numberWithCommas(visitsOverage) + '</strong>';
					v += '<div class="plan-limit-exceeded">' + localize.t('tiq.account.subscription.summary.exceeded_plan_limit', {num:limit}) + '</div>';
				}

				v += '				<div id="dailyChart"></div>';
				v += '				<div id="cumulativeChart"></div>';
				v += '			</div>';
				v += '		</div>';
				v += '	</div>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------------
			billingUpgradeHeadline: function() {
				var purchasedPlan = _getPurchasedPlan();

				if (!_selectedPlan) {
					return _view.billingSelectPlanHeadline();
				} else if (_selectedPlan && !purchasedPlan) {
					return _view.billingInfoPlanHeadline();
				} else {
					var v = '',
						plan = _plans[purchasedPlan],
						new_plan = _plans[_selectedPlan],
						isUpgrade = (plan.price < new_plan.price),
						title,
						subTitle;

					if (isUpgrade) {
						title = localize.t('tiq.account.subscription.upgrade.please_confirm_upgrade.title');
						subTitle = localize.t('tiq.account.subscription.upgrade.please_confirm_upgrade.desc');
					} else {
						title = localize.t('tiq.account.subscription.upgrade.please_confirm_downgrade.title');
						subTitle = localize.t('tiq.account.subscription.upgrade.please_confirm_downgrade.desc', {date:utui.util.date.getExpandedDateFromDateString(_subscriptionInfo.current_period_ends_at)});
					}

					v += '<div class="dialog-content-headline valign-container">';
					v += '	<div class="dialog-content-headline normalBanner">';
					v += '			<div class="dialog-content-headline-title">' + title + '</div>';
					v += '			<div class="dialog-content-headline-subTitle">' + subTitle + '</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				}
			},

			// --------------------------------------------------------
			billingSelectPlanHeadline: function() {
				var v = '';

				v += '<div class="dialog-content-headline valign-container">';
				v += '	<div class="dialog-content-headline normalBanner">';
				v += '			<div class="dialog-content-headline-title">' + localize.t('tiq.account.subscription.billing.title') + '</div>';
				v += '			<div class="dialog-content-headline-subTitle">' + localize.t('tiq.account.subscription.billing.desc') + '</div>';
				v += '	</div>';
				v += '</div>';

				v += _view.billingNotificationHeadline();

				return v;
			},

			// --------------------------------------------------------
			billingNotificationHeadline: function() {
				var v = '',
					purchasedPlan = _getPurchasedPlan();

				// Only show if a plan has been purchased
				if (purchasedPlan) {
					v += '  <div class="dialog-content-notification">';
					if (!_hasCancelledPlan()) {
						var billingDate = utui.util.date.getExpandedDateFromDateString(_subscriptionInfo.current_period_ends_at);

						if (_subscriptionInfo.pending_subscription_plan) {
							v += localize.t('tiq.account.subscription.billing.pending_subscription_plan', {date:billingDate});
						} else {
							v += localize.t('tiq.account.subscription.billing.next_billing_date', {date:billingDate});
						}
					} else {
						v += localize.t('tiq.account.subscription.billing.scheduled_to_be_cancelled', {date:utui.util.date.getOrdinalDateFromDateString(_subscriptionInfo.current_period_ends_at)}) + ' <a id="'+_namespace+'_reactivate_btn" class="reactivate-btn" href="#">' + localize.t('tiq.account.subscription.billing.reactivate') + '</a>';
					}

					v += '  </div>';
				}

				return v;
			},

			// --------------------------------------------------------
			billingInfoPlanHeadline: function() {
				var v = '',
					purchasedPlan = _getPurchasedPlan(),
					plan_code = purchasedPlan || _selectedPlan,
					plan = _plans[plan_code];

				v += '<div class="dialog-content-headline valign-container">';
				v += '	<div class="dialog-content-headline subscriptionBanner">';
				v += '		<div class="selected-plan plan-' + plan_code + '">';
				v += '			<i class="icon-certificate"></i>';
				v += '			<div class="planBannerName">' +	plan.name;
				if (!purchasedPlan) {
					v += '				<div class="changePlanLink"><a id="'+_namespace+'_plan_details_btn" href="#">' + localize.t('tiq.account.subscription.change_plan') + '</a></div>';
				}
				v += '			</div>';
				v += '			<div class="planBannerPrice">';
				v += '				<div class="planBannerPriceValue">' + plan.price + '</div>';
				v += '				<div class="planBannerPriceLabel">' + localize.t('tiq.account.subscription.billing.per_month') + '</div>';
				v += '			</div>';
				v += '			<div class="planBannerOverage">' + plan.overage + '</div>';
				v += '			<div class="planBannerVisits">';
				v += '				<div class="planBannerVisitsValue">' + plan.visits + '</div>';
				v += '				<div class="planBannerVisitsLabel">' + localize.t('tiq.account.subscription.billing.visits_per_month') + '</div>';
				v += '			</div>';
				v += '		</div>';
				v += '	</div>';
				v += '</div>';

				v += _view.billingNotificationHeadline();

				return v;
			},

			// --------------------------------------------------------
			billingUpgrade: function () {
				var v = '',
					purchasedPlan = _getPurchasedPlan();

				v += '<div>';

				if (!_selectedPlan) {
					var recommendedPlan = _getRecommendedPlan();

					for (var key in _plans) {
						var plan = _plans[key],
							currentPlan = key === purchasedPlan,
							isPlatinum = key === 'platinum';

						v += '  <div class="container-fluid plan-row">';
						v += '		<div class="row-fluid plan-' + key.toLowerCase() + '" style="margin:10px 0;">';
						v += '			<div class="span4"><i class="icon-certificate plan-medallion"></i>';
						v += '				<div class="plan-name">' + plan.name + '</div>';

						if (key === recommendedPlan) {
							v += '				<div class="plan-recommended">' + localize.t('tiq.account.subscription.billing_upgrade.' + (purchasedPlan ? 'current_plan' : 'recommended')) + '</div>';
						}

						v += '			</div>';
						v += '			<div class="span1"></div>';
						v += '			<div class="span4">';
						v += '				<div class="plan-visits">' + plan.visits + '</div>';
						v += '				<div class="plan-visits-label">' + localize.t('tiq.account.subscription.billing.visits_per_month') + '</div>';
						v += '				<div class="plan-overage" style="margin:5px 0;">' + plan.overage + '</div>';
						v += '				<div class="plan-benefits">' + plan.benefits + '</div>';
						v += '			</div>';
						v += '			<div class="span3 alignright">';

						if (!isPlatinum) {
							v += '				<div class="plan-price">' + plan.price + '</div>';
							v += '				<div class="plan-cycle">' + localize.t('tiq.account.subscription.billing.per_month') + '</div>';
							v += '				<span id="' + _namespace + '_subscribe_' + key + '_btn" class="btn' + (currentPlan ? ' ui-state-disabled ' : '') + '" style="margin:10px 0;">' + localize.t('tiq.account.subscription.billing_upgrade.select_plan') + '</span>';
						} else {
							v += '				<div class="plan-phone">' + plan.cycle + '</div>';
							v += '				<a class="plan-email" href="mailto:sales@tealium.com">sales@tealium.com</a>';
						}

						v += '			</div>';
						v += '		</div>';
						v += '	</div>';
					}

				} else if (purchasedPlan) {
					var plan_code = purchasedPlan,
						plan = _plans[plan_code],
						new_plan = _plans[_selectedPlan];

					v += '  <div class="container-fluid">';

					v += '  <div class="row-fluid plan-confirm-title">';
					v += '      <div class="span6"><h2>' + localize.t('tiq.account.subscription.billing_upgrade.current_plan') + '</h2></div>';
					v += '      <div class="span6"><h2>' + localize.t('tiq.account.subscription.billing_upgrade.selected_plan') + '</h2></div>';
					v += '  </div>';

					v += '  <div class="row-fluid">';
					v += '      <div class="span12">';
					v += '          <div class="row-fluid">';
					v += '              <div class="span6 plan-wrapper plan-current">';
					v += '                  <div class="row-fluid">';
					v += '                      <div class="span3 alignright plan-' + plan_code + '">';
					v += '                          <i class="icon-certificate plan-medallion"></i>';
					v += '                      </div>';
					v += '                      <div class="span9 plan-confirm-name">' + plan.name + '</div>';
					v += '                  </div>';
					v += '                  <div class="row-fluid">';
					v += '                      <div class="span3 alignright">';
					v += '                          <div class="plan-price bold">' + plan.price + '</div>';
					v += '                          <div>' + localize.t('tiq.account.subscription.billing_upgrade.every_month') + '</div>';
					v += '                      </div>';
					v += '                      <div class="span9 plan-confirm-benefits">';
					v += '                          <div>' + localize.t('tiq.account.subscription.billing_upgrade.num)visits_per_month', {num:plan.visits}) + '</div>';
					v += '                          <div>' + plan.overage + '</div>';
					v += '                          <div>' + plan.benefits + '</div>';
					v += '                      </div>';
					v += '                  </div>';
					v += '              </div>';

					v += '              <div class="span6 plan-wrapper plan-selected">';
					v += '                  <div class="row-fluid">';
					v += '                      <div class="span3 alignright plan-' + _selectedPlan + '">';
					v += '                          <i class="icon-certificate plan-medallion"></i>';
					v += '                      </div>';
					v += '                      <div class="span9 plan-confirm-name">' + new_plan.name + '</div>';
					v += '                  </div>';
					v += '                  <div class="row-fluid">';
					v += '                      <div class="span3 alignright">';
					v += '                          <div class="plan-price bold">' + new_plan.price + '</div>';
					v += '                          <div>' + localize.t('tiq.account.subscription.billing_upgrade.every_month') + '</div>';
					v += '                      </div>';
					v += '                      <div class="span9 plan-confirm-benefits">';
					v += '                          <div>' + localize.t('tiq.account.subscription.billing_upgrade.num_visits_per_month', {num:new_plan.visits}) + '</div>';
					v += '                          <div>' + new_plan.overage + '</div>';
					v += '                          <div>' + new_plan.benefits + '</div>';
					v += '                      </div>';
					v += '                  </div>';
					v += '              </div>';
					v += '          </div>';
					v += '      </div>';
					v += '  </div>';

					v += '  <div style="position: relative; height: 150px;">';
					v += '      <div class="plan-confirm-action">';
					v += '          <div>' + localize.t('tiq.account.subscription.billing_upgrade.please_confirm') + '</div>';
					v += '          <a href="#" class="btn" id="' + _namespace + '_plan_select_back_btn" role="button" style="margin-right: 10px;">' + localize.t('tiq.account.subscription.billing_upgrade.cancel') + '</a>';
					v += '          <a href="#" class="btn btn-success confirm-subscription" id="' + _namespace + '_plan_select_btn" role="button">' + localize.t('tiq.account.subscription.billing_upgrade.confirm_change') + '</a>';
					v += '      </div>';
					v += '  </div>';
				} else {
					v += '  <div>' + _view.billingInfo() + '</div>';
				}

				v += '</div>';

				return v;
			},

			// --------------------------------------------------------
			billingInfo: function() {
				var v = '',
					purchasedPlan = _getPurchasedPlan();

				v += '<div>';
					v += '	<div class="billing-information">';
					v += '		<div class="validation-message bg-danger"></div>';

					if (!purchasedPlan) {
						v += '<div class="billing-payment-message">' + localize.t('tiq.account.subscription.billing_upgrade.account_will_be_upgraded') + '</div>';
					}

					v += '		<div class="container-fluid">';
					v += '			<div class="row-fluid">';
					v += '				<div class="span12">';
					v += '					<h2 class="billing-info-headline">' + localize.t('tiq.account.subscription.billing_upgrade.billing_contact') + '</h2>';
					v += '					<div class="container-fluid">';
					v += '						<div class="row-fluid">';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_account_first_name" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.first_name" maxlength="50" /></div>';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_account_last_name" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.last_name" maxlength="50" /></div>';
					v += '						</div>';
					v += '						<div class="row-fluid"><div class="span8"><input type="text" id="'+_namespace+'_account_email" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.email" maxlength="100" /></div></div>';
					v += '					</div>';

					v += '					<h2 class="payment-info-headline">' + localize.t('tiq.account.subscription.billing_upgrade.payment_info') + '</h2>';
					v += '					<div class="container-fluid">';
					v += '						<div class="row-fluid">';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_billing_first_name" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.first_name" maxlength="50" /></div>';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_billing_last_name" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.last_name" maxlength="50" /></div>';
					v += '						</div>';
					v += '						<div class="row-fluid">';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_billing_address1" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.address" /></div>';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_billing_address2" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.address2" /></div>';
					v += '						</div>';
					v += '						<div class="row-fluid">';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_billing_city" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.city" /></div>';
					v += '							<div class="span4">' + _buildStateSelect(_namespace+'_billing_state') + '</div>';
					v += '						</div>';
					v += '						<div class="row-fluid">';
					v += '							<div class="span4"><input type="text" id="'+_namespace+'_billing_zip" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.zip" maxlength="10" /></div>';
					v += '							<div class="span4">' + _buildCountrySelect(_namespace+'_billing_country') + '</div>';
					v += '						</div>';
					v += '					</div>';

					v += '					<div class="container-fluid credit-card-container">';
					v += '						<div class="row-fluid"><div class="span8"><input type="text" id="'+_namespace+'_billing_number" data-i18n="[placeholder]tiq.account.subscription.billing_upgrade.credit_card" /></div></div>';
					v += '						<div class="row-fluid">';
					v += '							<div class="span3">' + _buildMonthSelect(_namespace+'_billing_month') + '</div>';
					v += '							<div class="span3">' + _buildYearSelect(_namespace+'_billing_year') + '</div>';
					v += '							<div class="span2"><input type="text" id="'+_namespace+'_billing_verification_value" placeholder="CCV" maxlength="10" /></div>';
					v += '						</div>';
					v += '					</div>';

					v += '					<div class="container-fluid">';
					v += '						<div class="row-fluid">';
					v += '                          <div class="span6">';
					v += '                              <input id="' + _namespace + '_SubscribeCkbx" type="checkbox" class="checkbox">';
					v += '                              <label for="' + _namespace + '_SubscribeCkbx">' + localize.t('tiq.account.subscription.billing_upgrade.terms') + '</label>';
					v += '                          </div>';
					v += '							<div class="span2 alignright">';

					if (!purchasedPlan){
						v += '<span id="'+_namespace+'_save_btn" class="btn">' + localize.t('tiq.account.subscription.billing_upgrade.subscribe') + '</span>';
					} else {
						v += '<span id="'+_namespace+'_save_btn" class="btn">' + localize.t('tiq.account.subscription.billing_upgrade.update') + '</span>';
					}

					v += '							</div>';
					v += '						</div>';
					v += '					</div>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------------
			billingInvoicesHeadline: function() {
				var v = '';

				v += '<div class="dialog-content-headline valign-container">';
				v += '	<div class="dialog-content-headline normalBanner">';
				v += '      <div class="dialog-content-headline-title">' + localize.t('tiq.account.subscription.billing_upgrade.your_invoices') + '</div>';
				v += '      <div class="dialog-content-headline-subTitle">' + localize.t('tiq.account.subscription.billing_upgrade.showing_invoices') + '</div>';
				v += '	</div>';
				v += '</div>';
				v += '<div class="container-fluid invoice-header">';
				v += '	<div class="row-fluid">';
				v += '		<div class="span3">' + localize.t('tiq.account.subscription.billing_upgrade.date') + '</div>';
				v += '		<div class="span3">' + localize.t('tiq.account.subscription.billing_upgrade.state') + '</div>';
				v += '		<div class="span3">' + localize.t('tiq.account.subscription.billing_upgrade.total') + '</div>';
				v += '		<div class="span3"></div>';
				v += '	</div>';
				v += '</div>';
				return v;
			},

			// --------------------------------------------------------
			billingInvoices: function() {
				var v = '';

				v += '<div>';
				v += '	<div class="container-fluid invoice-body">';
				v += '		<div class="row-fluid">';
				v += '			<div class="span12">';

				if (!$.isEmptyObject(_invoices)) {
					for (var id in _invoices) {
						var invoice = _invoices[id];

						v += '<div class="row-fluid">';
						v += '	<div class="span3">' + utui.util.date.getExpandedDateFromDateString(invoice.created_at) + '</div>';
						v += '	<div class="span3 invoice-state">';
						v += _getInvoiceState(invoice.state);
						v += '  </div>';
						v += '	<div class="span3">$' + _toCurrencyFromCents(invoice.total_in_cents) + '</div>';
						v += '	<div class="span3"><a href="' + utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_INVOICES, {account : utui.account.getName()}) + '/' + id + '.pdf?utk=' + utui.util.getUTK() + '" id="'+_namespace+'_invoice_'+id+'" class="btn">' + localize.t('tiq.account.subscription.billing_upgrade.download_invoice') + '</a></div>';
						v += '</div>';
					}
				} else {
					v += '				<div>' + localize.t('tiq.account.subscription.billing_upgrade.no_invoices') + '</div>';
				}

				v += '			</div>';
				v += '		</div>';
				v += '	</div>';
				v += '</div>';

				return v;
			}
		};

		// ------------------------------------------------------------
		var _bindUI = {
			// --------------------------------------------------------
			global: function() {
				// Bind all the buttons within the context view
				_$template.find('#'+_namespace+'_billing_summary_menu').safeOn('click', _eventHandlers.onBillingSummaryMenuClick);
				_$template.find('#'+_namespace+'_billing_upgrade_menu').safeOn('click', _eventHandlers.onBillingUpgradeMenuClick);
				_$template.find('#'+_namespace+'_billing_info_menu').safeOn('click', _eventHandlers.onBillingInfoMenuClick);
				_$template.find('#'+_namespace+'_billing_invoices_menu').safeOn('click', _eventHandlers.onBillingInvoicesMenuClick);
				_$template.find('#'+_namespace+'_unsubscribe_btn').safeOn('click', _eventHandlers.onUnsubscribeBtnClick);
			},

			// --------------------------------------------------------
			billingSummary: function() {
				_$template.find('#'+_namespace+'_subscribe_btn').safeBind('click', _eventHandlers.onSubscribeBtnClick);
				_$template.find('#'+_namespace+'_reactivate_btn').safeBind('click', _eventHandlers.onReactivateBtnClick);
			},

			// --------------------------------------------------------
			billingUpgrade: function() {
				_$template.find('#'+_namespace+'_subscribe_bronze_btn').safeBind('click', _eventHandlers.onSubscribeBronzeBtnClick);
				_$template.find('#'+_namespace+'_subscribe_silver_btn').safeBind('click', _eventHandlers.onSubscribeSilverBtnClick);
				_$template.find('#'+_namespace+'_subscribe_gold_btn').safeBind('click', _eventHandlers.onSubscribeGoldBtnClick);

				_$template.find('#'+_namespace+'_plan_details_btn').safeBind('click', _eventHandlers.onPlanDetailsBtnClick);
				_$template.find('#'+_namespace+'_plan_select_back_btn').safeBind('click', _eventHandlers.onPlanDetailsBtnClick);
				_$template.find('#'+_namespace+'_plan_select_btn').safeBind('click', _eventHandlers.onChangePlanBtnClick);

				_bindUI.billingInfo();
			},

			// --------------------------------------------------------
			billingInfo: function() {
				_$template.find('#'+_namespace+'_save_btn').safeBind('click', _eventHandlers.onSaveBtnClick);
				_$template.find('#'+_namespace+'_reactivate_btn').safeBind('click', _eventHandlers.onReactivateBtnClick);

				_$template.find('#'+_namespace+'_billing_state').select2({matcher:_eventHandlers.onSelect2Matcher});
				_$template.find('#'+_namespace+'_billing_country').select2({matcher:_eventHandlers.onSelect2Matcher});
				_$template.find('#'+_namespace+'_billing_month').select2();
				_$template.find('#'+_namespace+'_billing_year').select2();

				_bindUI.checkboxEnabledButton(_namespace + '_SubscribeCkbx', _namespace + '_save_btn');
			},

			// --------------------------------------------------------
			billingInvoices: function() {

			},

			// --------------------------------------------------------
			tooltip: function() {
				var obj = {};
				obj[_namespace+'_new_user'] = { gravity: 'n' };
				utui.util.addTooltip(obj, _$template);
			},

			// --------------------------------------------------------
			checkboxEnabledButton: function (checkboxId, buttonId, isDestructiveAction) {
				var $checkbox = $('#' + checkboxId),
					$btn = $('#' + buttonId);

				$btn.addClass('ui-state-disabled');
				$checkbox.safeOn('change', function (e) {
					if (this.checked) {
						$btn.removeClass('ui-state-disabled');
						if (isDestructiveAction) {
							$btn.addClass('btn-danger');
						}
					} else {
						$btn.addClass('ui-state-disabled').removeClass('btn-danger');
					}

				});
			}
		};

		// ------------------------------------------------------------
		var _eventHandlers = {
			// --------------------------------------------------------
			onSubscribeBtnClick: function(e) {
				e.preventDefault();
				_selectedPlan = null;

				// Show the billing Upgrade screen
				$('#'+_namespace+'_billing_upgrade_menu').trigger('click');
			},

			// --------------------------------------------------------
			// Sets the selected plan to bronze
			onSubscribeBronzeBtnClick: function(e) {
				e.preventDefault();
				if ($(this).hasClass('ui-state-disabled')) {
					return;
				}

				_selectedPlan = 'bronze';

				_render.billingUpgrade();
			},

			// --------------------------------------------------------
			// Sets the selected plan to silver
			onSubscribeSilverBtnClick: function(e) {
				e.preventDefault();
				if ($(this).hasClass('ui-state-disabled')) {
					return;
				}

				_selectedPlan = 'silver';

				_render.billingUpgrade();
			},

			// --------------------------------------------------------
			// Sets the selected plan to bronze
			onSubscribeGoldBtnClick: function(e) {
				e.preventDefault();
				if ($(this).hasClass('ui-state-disabled')) {
					return;
				}

				_selectedPlan = 'gold';

				_render.billingUpgrade();
			},

			// --------------------------------------------------------
			onPlanDetailsBtnClick: function(e) {
				e.preventDefault();
				_selectedPlan = null;

				$('#'+_namespace+'_billing_upgrade_menu').trigger('click');
			},

			// --------------------------------------------------------
			onChangePlanBtnClick: function(e) {
				e.preventDefault();

				_request.changeSubscriptionPlan();

				return false;
			},

			// --------------------------------------------------------
			onSaveBtnClick: function(e) {
				if ($('#' + _namespace + '_save_btn').hasClass('ui-state-disabled')) {
					return;
				}

				// Validate the form
				if (!_isValid()) return;

				// Already purchased a plan so we perform an update
				var purchasedPlan = _getPurchasedPlan();
				if (purchasedPlan) {
					_request.updateBilling();
					return;
				}

				// Not subscribed to a plan so a plan must be selected before creating the subscription
				if (!_selectedPlan) {
					utui.util.showMsgDialog(localize.t('tiq.account.error.must_select_plan'), localize.t('tiq.account.error.must_select_plan_title'));
					return;
				}

				_request.createSubscription();
			},

			// --------------------------------------------------------
			onBillingSummaryMenuClick: function() {
				_highlightNav($(this));

				_render.billingSummary();
				_showScreen('billing_summary');

				return false;
			},

			// --------------------------------------------------------
			onBillingUpgradeMenuClick: function() {
				_highlightNav($(this));

				_render.billingUpgrade();
				_showScreen('billing_upgrade');

				return false;
			},

			// --------------------------------------------------------
			onBillingInfoMenuClick: function() {
				_highlightNav($(this));

				_render.billingInfo();
				_showScreen('billing_info');

				return false;
			},

			// --------------------------------------------------------
			onBillingInvoicesMenuClick: function() {
				_highlightNav($(this));

				_render.billingInvoices();
				_showScreen('billing_invoices');

				return false;
			},

			// --------------------------------------------------------
			// Marks the account for cancellation
			onUnsubscribeBtnClick: function() {
				_onCancelAccount();
			},

			// --------------------------------------------------------
			// Restores the subscription
			onReactivateBtnClick: function() {
				_onReactivateAccount();
			},

			// --------------------------------------------------------
			onCloseBtnClick: function() {
				utui.ui.dialog.dispose(_namespace);
			},

			// --------------------------------------------------------
			// Adds better search filtering to select2 boxes
			onSelect2Matcher: function(term, text) {
				return text.toUpperCase().indexOf(term.toUpperCase())==0;
			}
		};

		// ------------------------------------------------------------
		var _request = {
			// --------------------------------------------------------
			// Gets the plan info
			getPlans: function(callback) {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_PLANS);
				utui.service.get(url, null, null,
					function(data){
						_response.onGetPlansSuccess.apply(this, arguments);
						if (callback) callback();
					},
					function(status, response){
						_response.onGetPlansError.apply(this, arguments);
						if (callback) callback();
					}
				);
			},

			// --------------------------------------------------------
			// This will render the UI upon success
			getSubscription: function() {
				utui.util.showSpinner();

				if (!_subscriptionInfo) {
					_getSubscriptionInfo(_response.onGetSubscriptionSuccess, _response.onGetSubscriptionError);
				} else {
					_response.onGetSubscriptionSuccess(_subscriptionInfo);
				}
			},

			// --------------------------------------------------------
			// This is called when the Billing Information tab is selected and ONLY if not already populated
			getBilling: function() {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_BILLING);
				utui.service.get(url, null, null, _response.onGetBillingSuccess, _response.onGetBillingError);
			},

			// --------------------------------------------------------
			// This is called when the Billing Invoices tab is selected and ONLY if is not already populated
			getInvoices: function() {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_INVOICES);
				utui.service.get(url, null, null, _response.onGetInvoicesSuccess, _response.onGetInvoicesError);
			},

			// --------------------------------------------------------
			// Generates the required signature for sending the subscription request and sends it back to the callback specified
			getSubscriptionSignature: function(data, callback) {
				_signature = null;

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_SIGNATURE);
				utui.service.post(url, JSON.stringify(data), utui.service.options.JSON,
					function(data) {
						_response.onGetSignatureSuccess.apply(this, arguments);
						if (callback) callback();
					},
					function(status, response) {
						_response.onGetSignatureError.apply(this, arguments);
						if (callback) callback();
					}
				);
			},

			// --------------------------------------------------------
			// Generates the required signature for updating the billing info and sends it back to the callback specified
			getBillingSignature: function(data, callback) {
				_signature = null;

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_SIGNATURE);
				utui.service.put(url, JSON.stringify(data), utui.service.options.JSON,
					function(data) {
						_response.onGetSignatureSuccess.apply(this, arguments);
						if (callback) callback();
					},
					function(status, response) {
						_response.onGetSignatureError.apply(this, arguments);
						if (callback) callback();
					}
				);
			},

			// --------------------------------------------------------
			// Create a new subscription in Recurly - requires a signature first
			createSubscription: function() {
				utui.util.showSpinner();

				// First we must grab a signature
				_request.getSubscriptionSignature({plan_code:_selectedPlan}, function() {
					if (_signature) {
						var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_RECURLY_SUBSCRIBE, {subdomain:gAppConfig.recurly_subdomain}),
							data = _getBillingInfoFields();

						data.signature = _signature;
						data.account.account_code = utui.account.getName();     // This will be the unique identifier for the account
						data.account.company_name = utui.account.getName();     // This is used to see the account_code in the account list under Company

						// Must speficy a timeout so the onCreateSubscriptionError is called on 404,500,etc.
						utui.service.get(url, data, {dataType:'jsonp', timeout:10000, success:_response.onCreateSubscriptionSuccess, error:_response.onCreateSubscriptionError});

					} else {
						_response.onCreateSubscriptionError();
					}
				});
			},

			// --------------------------------------------------------
			// Notifies urest that we successfully subscribed to a plan
			setSubscriptionPlan: function() {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_SUBSCRIPTION);
				utui.service.post(url, null, null, _response.onSetSubscriptionPlanSuccess, _response.onSetSubscriptionPlanError);
			},

			// --------------------------------------------------------
			// Updates the recurly billing information via recurly (recurly does have a JSONP endpoint for this)
			updateBilling: function() {
				utui.util.showSpinner();

				// First we must grab a signature
				_request.getBillingSignature({}, function() {
					if (_signature) {
						var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_RECURLY_UPDATE, {subdomain:gAppConfig.recurly_subdomain, account:utui.account.getName()}),
							data = _getBillingInfoFields();

						data.signature = _signature;
						data.account.account_code = utui.account.getName();
						data.account.company_name = utui.account.getName();

						// Must speficy a timeout so the onCreateSubscriptionError is called on 404,500,etc.
						utui.service.get(url, data, {dataType:'jsonp', timeout:10000, success:_response.onUpdateBillingSuccess, error:_response.onUpdateBillingError});

					} else {
						_response.onUpdateBillingError();
					}
				});
			},

			// --------------------------------------------------------
			getUsageSummary: function () {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_USAGE, {'start': _subscriptionInfo.current_period_started_at, 'end': _subscriptionInfo.current_period_ends_at});
				utui.service.get(url, null, null, _response.onGetUsageSummarySuccess, _response.onGetUsageSummaryError);
			},

			// --------------------------------------------------------
			// Cancels the account and plan subscription if any
			cancelAccount: function() {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_SUBSCRIPTION);
				utui.service.delete(url, null, null, _response.onCancelAccountSuccess, _response.onCancelAccountError);
			},

			// --------------------------------------------------------
			// Reactivates the account
			reactivateAccount: function() {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_SUBSCRIPTION_REACTIVATE);
				utui.service.put(url, null, null, _response.onReactivateAccountSuccess, _response.onReactivateAccountError);
			},

			// --------------------------------------------------------
			// Upgrade/Downgrade plan
			changeSubscriptionPlan: function () {
				utui.util.showSpinner();

				var url = utui.service.addParamsToURL(utui.service.restapis.SELF_SERVICE_SUBSCRIPTION),
					dataObj = { plan_code: _selectedPlan };

				utui.service.put(url, JSON.stringify(dataObj), utui.service.options.JSON, _response.onChangeSubscriptionPlanSuccess, _response.onChangeSubscriptionPlanError);
			}
		};

		// ------------------------------------------------------------
		var _response = {
			// --------------------------------------------------------
			onGetPlansSuccess: function(data) {
				utui.util.hideSpinner();

				_updatePlans(data);
			},

			// --------------------------------------------------------
			onGetPlansError: function(status, response) {
				utui.util.hideSpinner();

				// Show default pricing on error
			},

			// --------------------------------------------------------
			onGetSubscriptionSuccess: function(data) {
				utui.util.hideSpinner();

				data = data || {};

				// Exit if no data or no plan and not free trial
				if ($.isEmptyObject(data) || ($.isEmptyObject(data.plan) && !utui.account.isFreeTrial())) {
					_response.onGetSubscriptionError();
					return;
				}

				_subscriptionInfo = data;

				_render.ui();	 // Render the UI upon success;
			},

			// --------------------------------------------------------
			onGetSubscriptionError: function(status, response) {
				utui.util.hideSpinner();

				_eventHandlers.onCloseBtnClick();
				utui.util.showMsgDialog(localize.t('tiq.account.error.unable_to_load_account_info'), localize.t('tiq.account.error.unable_to_load_account_info_title'));
			},

			// --------------------------------------------------------
			onGetBillingSuccess: function(data) {
				utui.util.hideSpinner();

				if (!$.isEmptyObject(data)) {
					_billingInfo = data;

					_render.billingInfo();
				} else {
					_response.onGetBillingError();
				}
			},

			// --------------------------------------------------------
			onGetBillingError: function(status, response) {
				utui.util.hideSpinner();

				response = response || {};

				// 404 means no account in recurly
				if (response.status === 404) {
					_billingInfo = {};
					_render.billingInfo();

				} else {
					var errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.account.error.unable_to_get_billing_info'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);

					// Show the summary view
					_$template.find('#'+_namespace+'_billing_summary_menu').trigger('click');
				}
			},

			// --------------------------------------------------------
			onGetInvoicesSuccess: function(data) {
				utui.util.hideSpinner();

				_invoices = data;
				_render.billingInvoices();
			},

			// --------------------------------------------------------
			onGetInvoicesError: function(status, response) {
				utui.util.hideSpinner();

				var errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.account.error.unable_to_get_billing_invoices'));
				utui.ui.dialog.message.showError(_namespace, errorMsg);
			},

			// --------------------------------------------------------
			onGetSignatureSuccess: function(data) {
				if (data && data.signature) {
					_signature = data.signature;
				}
			},

			// --------------------------------------------------------
			onGetSignatureError: function(status, response) {
				// This is already handled
			},

			// --------------------------------------------------------
			onCreateSubscriptionSuccess: function(data) {
				utui.util.hideSpinner();

				data = data || {};

				if (data.success) {
					// Clear personal information(cc info) from the _billingInfo object
					_clearPersonalBillingInfoFields();

					// Updates the _billingInfo object to the values stored in the fields
					_setBillingInfoData();

					// Update the UI since we are now subscribed to a plan
					_setPurchasedPlan(_selectedPlan);

					// Now we need to notify urest the we succeeded so the account is not free trial
					_request.setSubscriptionPlan();

					// Show success message
					utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.account.success.successfully_subscribed', {plan:localize.t('tiq.account.plans.' + _selectedPlan + '.name')}));

				} else {
					_response.onCreateSubscriptionError({errors:data.errors});
				}
			},

			// --------------------------------------------------------
			onCreateSubscriptionError: function(response, status, error) {
				utui.util.hideSpinner();

				var errorMsg = localize.t('tiq.account.error.unable_to_subscribe');

				if (response && response.errors) {
					var error = _getErrorFromRecurly(response.errors);

					if (error) {
						errorMsg = error.message;
						if (error.field) {
							var $el = $('#' + _namespace + '_' + error.field);
							if ($el.get(0)) {
								// focus on the field that has the error
								$el.focus();
							}
						}
					}
				}

				utui.ui.dialog.message.showError(_namespace, errorMsg);
			},

			// --------------------------------------------------------
			onSetSubscriptionPlanSuccess: function(data) {
				utui.util.hideSpinner();

				data = data || {};

				// The data returned will be the same data returned in utui.account.getAccount so lets pass data to the same success method
				_updateAccount(data.account);
				_subscriptionInfo = data.subscription;

				// Set _selectedPlan to null to force return beginning of Change Plan screen flow
				_selectedPlan = null;

				// Rerender the UI to refresh the view
				_render.ui(true);

				// Sends new plan to datacloud
				_sendTaggingEvent(utui.constants.self_service.PLAN_PURCHASED);
			},

			// --------------------------------------------------------
			onSetSubscriptionPlanError: function(status, response) {
				utui.util.hideSpinner();

				var errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.account.error.unable_to_upgrade_account'));
				//utui.ui.dialog.message.showError(_namespace, errorMsg);
				utui.util.showMsgDialog(errorMsg, 'Update Account Error');
			},

			// --------------------------------------------------------
			onUpdateBillingSuccess: function(data) {
				utui.util.hideSpinner();

				data = data || {};

				if (data.success) {
					// Clear personal information(cc info) from the _billingInfo object
					_clearPersonalBillingInfoFields();

					// Updates the _billingInfo object to the values stored in the fields
					_setBillingInfoData();

					// Show success message
					utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.account.success.successfully_updated'));

				} else {
					_response.onUpdateBillingError({errors:data.errors});
				}
			},

			// --------------------------------------------------------
			onUpdateBillingError: function(response, status, error) {
				utui.util.hideSpinner();

				var errorMsg = localize.t('tiq.account.error.unable_to_update_billing_info');

				if (response && response.errors) {
					var error = _getErrorFromRecurly(response.errors);

					if (error) {
						errorMsg = error.message;
						if (error.field) {
							var $el = $('#' + _namespace + '_' + error.field);
							if ($el.get(0)) {
								// focus on the field that has the error
								$el.focus();
							}
						}
					}
				}

				utui.ui.dialog.message.showError(_namespace, errorMsg);
			},

			// --------------------------------------------------------
			onGetUsageSummarySuccess: function (data) {
				utui.util.hideSpinner();

				if (data) {
					var threshold = 0,
						planCode = '';
					if(!$.isEmptyObject(_subscriptionInfo.plan)) {
						// Suggest max visits available in plan be threshold of chart
						threshold = _subscriptionInfo.plan.max_visits;
						planCode = _subscriptionInfo.plan.plan_code;
					}
					$('#dailyChart').html(utui.chart.createDailyUsageChart(data));
					$('#cumulativeChart').html(utui.chart.createCumulativeChart(data, threshold, planCode));
//					_bindUI.summaryUsageTooltip();
				}
			},

			// --------------------------------------------------------
			onGetUsageSummaryError: function (status, response) {
				utui.util.hideSpinner();

				var errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.account.error.unable_to_get_usage_summary'));
				utui.ui.dialog.message.showError(_namespace, errorMsg);
			},

			// --------------------------------------------------------
			onCancelAccountSuccess: function(data) {
				utui.util.hideSpinner();

				if (data) {
					_subscriptionInfo = data;

				// If no data is returned then lets at least mark the subscription for active.
				} else {
					_subscriptionInfo.state = 'active';
				}

				// Rerender the UI to show the cancelation messaging and hide the unsubscribe button
				_render.ui();

				// Sends cancelled plan to datacloud
				_sendTaggingEvent(utui.constants.self_service.PLAN_CANCELED);

				utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.account.success.successfully_cancelled'));
			},

			// --------------------------------------------------------
			onCancelAccountError: function(status, response) {
				utui.util.hideSpinner();

				var errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.account.error.unable_to_cancel_subscription'));
				utui.ui.dialog.message.showError(_namespace, errorMsg);
			},

			// --------------------------------------------------------
			onReactivateAccountSuccess: function(data) {
				utui.util.hideSpinner();

				if (data) {
					_subscriptionInfo = data;

					// If no data is returned then lets at least mark the subscription for cancelled.
				} else {
					_subscriptionInfo.state = 'canceled';
				}

				// Rerender the UI to show the cancelation messaging and hide the unsubscribe button
				_render.ui();

				// Sends reactivated plan to datacloud
				_sendTaggingEvent(utui.constants.self_service.PLAN_REACTIVATED);

				utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.account.success.successfully_reactivated'));
			},

			// --------------------------------------------------------
			onReactivateAccountError: function(status, response) {
				utui.util.hideSpinner();

				var errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.account.error.unable_to_reactivate'));
				utui.ui.dialog.message.showError(_namespace, errorMsg);
			},

			// --------------------------------------------------------
			onChangeSubscriptionPlanSuccess: function (data) {
				utui.util.hideSpinner();

				if (data) {
					_subscriptionInfo = data;

					if (_subscriptionInfo.pending_subscription_plan) {
						_sendTaggingEvent(utui.constants.self_service.PLAN_DOWNGRADED);
					} else {
						_sendTaggingEvent(utui.constants.self_service.PLAN_UPGRADED);
					}
				}

				// Set _selectedPlan to null so that we return to beginning of Change Plan screen flow
				_selectedPlan = null;

				// Rerender the UI to show the changed subscription plan messaging
				_render.ui();

				utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.account.success.successfully_changed'));
			},

			// --------------------------------------------------------
			onChangeSubscriptionPlanError: function (status, response) {
				utui.util.hideSpinner();

				var errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.account.error.unable_to_change_subscription'));
				utui.ui.dialog.message.showError(_namespace, errorMsg);
			}
		};

		// Public API
		var _public = {
			// --------------------------------------------------------
			// Shows the billing dialog
			show: function() {
				// Only users with manage account permission can see this dialog
				if (!utui.permissions.canManageAccount()) {
					utui.util.showPermissionErrorDialog();
					return;
				}

				_clear();   // Clear the UI of any previously populated data

				// Show the dialog
				utui.ui.dialog.show(_namespace, localize.t('tiq.account.title'), [], _$template, {width:925});

				// Get the account information plus plan information
				_getSubscriptionData();
			}
		}

		return _public;
	}();    // end _subscriptionManager


	// Public API
	var _public = {
		origin: false,
		state: false,
        use_cdn: true,
		freeTrialRemainingDays: 0,
		server2serverAvailable: false,
		account_labels: {},
		supported_code_snippet_tags: null,
		go_live: {},
		go_live_default_message: localize.t('tiq.account.go_live_default'),
		sso: {},

		// ------------------------------------------------------------
		getName: function() {
			return _name || utui.login.account;
		},

		// ------------------------------------------------------------
		isFreeTrial: function() {
			return utui.account.state === 'free_trial';
		},

		// ------------------------------------------------------------
		isFreeTrialOrigin: function() {
			return utui.account.origin === 'free_trial';
		},

		// ------------------------------------------------------------
		hasSubscription: function() {
			return utui.account.state === 'active_subscription';
		},

		// ------------------------------------------------------------
		isSelfService: function() {
			return _public.hasSubscription() || _public.isFreeTrial();
		},

		// ------------------------------------------------------------
		hasCancelled: function() {
			return utui.account.state === 'active_cancelled';
		},

		// ------------------------------------------------------------
		// Return true if state is prompt or prompt_declined
		goLive_isStatePrompt: function() {
			var state = utui.account.go_live.state || '';
			return state.indexOf('prompt') > -1;
		},

		// ------------------------------------------------------------
		// Returns true if this is a new account (has no prompt message)
		goLive_isNewAccount: function() {
			return utui.account.goLive_isStatePrompt() && !utui.account.go_live.prompt_message;
		},

		// ------------------------------------------------------------
		// Returns true if this is an existing account (go_live is empty or has a prompt message)
		goLive_isExistingAccount: function() {
			return $.isEmptyObject(utui.account.go_live) || utui.account.go_live.prompt_message;
		},

		// ------------------------------------------------------------
		// Displays the Go-Live prompt to the user
		goLive_showPrompt: function(callback) {
			var namespace = 'goLive_prompt_dialog',
				$template = utui.ui.dialog.body(),
				message = utui.account.go_live.prompt_message || utui.account.go_live_default_message,
				updateGoLiveState = function(state) {
					utui.util.showSpinner();

					var url = utui.service.addParamsToURL(utui.service.restapis.GO_LIVE);

					utui.account.go_live.state = state;
					utui.account.go_live.profile = utui.login.profile;
					utui.account.go_live.user = utui.login.email;

					utui.service.post(url, JSON.stringify(utui.account.go_live), utui.service.options.JSON, onGoLiveStateUpdated, onGoLiveStateUpdated);
				},
				onGoLiveStateUpdated = function(data) {
					utui.util.hideSpinner();
					utui.ui.dialog.dispose(namespace);

					if (!$.isEmptyObject(data) && data.state) {
						utui.account.go_live = data;
					}

					// Don't call the callback if declined and new user (prevents user from publishing
					if (utui.account.go_live.state === 'prompt_declined' && utui.account.goLive_isNewAccount()) {
						return;
					}

					if (callback) {
						callback()
					}
				};

			if (message) {
				message = utui.util.safeEscape(message);
			} else {
				message = utui.account.go_live_default_message;
			}

			$template.find('.dialog-content-container').css({'height':'auto'});	// Remove default height
			$template.find('.dialog-content-body').html('<div style="padding:20px;"><div style="max-height:100px; overflow-y:auto;">' + utui.util.safeEscape(message) + '</div><p>' + localize.t('tiq.account.go_live_acknowledgement') + '</p></div>');

			// Dialog buttons
			var buttons = [
				{
					text: localize.t('tiq.dialog.button.confirm'),
					click: function() {
						updateGoLiveState('confirmed');
					},
					id: namespace + 'AcknowledgeBtn'
				},
				{
					text: localize.t('tiq.dialog.button.decline'),
					click: function() {
						updateGoLiveState('prompt_declined');
					},
					style: 'float:left; margin-left: 12px',
					id: namespace + 'CancelBtn'
				}
			];

			utui.ui.dialog.show(namespace, localize.t('tiq.account.acknowledge_golive'), buttons, $template, {width:425, dialogClass:'golive-acknowledgement'});
		},

		// ------------------------------------------------------------
		// Return true if saml is true
		sso_isSAML: function() {
			return (utui.account.sso.saml && utui.account.sso.saml.enabled === true);
		},

		// ------------------------------------------------------------
		init: function() {
			// Commented out and placed inside the profile callback handler so we can chain load account and load user
			//utui.util.pubsub.subscribe(utui.constants.profile.LOADED, utui.account.getAccount, this);

			utui.util.pubsub.subscribe(utui.constants.svrstream.SVRSTREAM_ACCOUNT_STATUS_CHANGED, _setServer2ServerAvailability, this);
		},

		// ------------------------------------------------------------
		showSubscriptionManager: _subscriptionManager.show,

		// ------------------------------------------------------------
		getAccount: _request.getAccount,

		// ------------------------------------------------------------
		updateFreeTrialUI: _updateFreeTrialUI,

		// ------------------------------------------------------------
		updateAccount: _updateAccount
	};

	return _public;
}();

// --------------------------------------------
var diffapi = function() {
	// --------------------------------------------
	var _sourceData = {},
		_targetData = {},
		_subjectArray = [
			'customizations',
			'define',
			'loadrules',
			'manage'
			// 'labels'
		],
		_isRaw = false;

	var _reloadErrorCodeMap = {
		JS_EXTENSION_UNAUTHORIZED : 'js_extension_unauthorized',
		LABEL_UNAUTHORIZED : 'label_unauthorized',
		LABEL_PERMISSION_UNAUTHORIZED : 'label_permission_unauthorized',
		LABEL_INCOMING_HAS_MISSING_LOCKS : 'label_error:incoming_has_missing_locks',
		LIBRARY_CURRENT_LINKED : 'library_current_linked',
		LIBRARY_INCOMING_EXISTS : 'library_incoming_exists'
	};

	var _deepCompareSubject = '';

	// --------------------------------------------
	function deepCompare() {
		var i, leftChain, rightChain, _id, formattedObj = {};

		// --------------------------------------------
		function isExcludedItem(subject, key) {
			// whatever the subject is, check its key
			switch(subject) {
				case 'customizations':
					break;
				case 'define':
					if(!$.isEmptyObject(_sourceData[subject][key])) {
						if(_sourceData[subject][key].type === 'va') return true;
					}
					if(!$.isEmptyObject(_targetData[subject][key])) {
						if(_targetData[subject][key].type === 'va') return true;
					}
					break;
				case 'loadrules':
					break;
				case 'manage':
					break;
			}
			return false;
		}

		// --------------------------------------------
		function isExcludedKey(subject, key) {
			// whatever the subject is, check its key
			switch(subject) {
				case 'customizations':
					switch(key) {
						case 'sort': return true;
						case 'settings': return true;
					}
					break;
				case 'define':
					switch(key) {
						case 'sort': return true;
						case 'settings': return true;
						case 'imported': return true;
					}
					break;
				case 'loadrules':
					switch(key) {
						case 'containerId': return true;
						case 'sort': return true;
						case 'settings': return true;
						case 'editable': return true;
						case '_id': return true;
					}
					break;
				case 'manage':
					switch(key) {
						case 'publishedTargets': return true;
						case 'sort': return true;
						case 'settings': return true;
						case 'dsID': return true;
						case 'publish_revisions': return true;
					}
					break;
			}
			return false;
		}

		function isExceptionalMissingKey(subject, key, leftValue, rightValue) {
			// whatever the subject is, check its key
			switch(subject) {
				case 'customizations':
					switch(key) {
						case 'labels':
							if(leftValue === '') return true;
					}
					break;
				case 'define':
					switch(key) {
						case 'labels':
							if(leftValue === '') return true;
					}
					break;
				case 'loadrules':
					switch(key) {
						case 'labels':
							if(leftValue === '') return true;
					}
					break;
				case 'manage':
					switch(key) {
						case 'labels':
							if(leftValue === '') return true;
						case 'map':
							if($.isEmptyObject(leftValue)) return true;
					}
					break;
			}
			return false;
		}

		function compare2Objects(x, y, isTopLevel) {
			var p, missingObj = {}, mismatchObj = {}, subject;

			// Set subject
			subject = _deepCompareSubject;

			// remember that NaN === NaN returns false
			// and isNaN(undefined) returns true
			if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
				return true;
			}

			// Compare primitives and functions.
			// Check if both arguments link to the same object.
			if (x === y) {
				return true;
			}

			// Check for infinitive linking loops
			if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {
				return false;
			}

			// Quick checking of one object beeing a subset of another.
			for (p in y) {
				// Do not check prototype chain...
				if(!y.hasOwnProperty(p)) continue;

				// If key is excluded from comparison, continue on
				if(!_isRaw && isExcludedKey(subject, p)) continue;

				// Set ID
				if(isTopLevel && (typeof x === 'object' || typeof y === 'function')) {
					_id = p;
				}

				if(isTopLevel && isExcludedItem(subject, p)) continue;

				// If there are missing keys, store both x y keys and values
				if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
					if(isExceptionalMissingKey(subject, p, y[p], x[p])) continue;

					if($.isEmptyObject(formattedObj[_id])) formattedObj[_id] = [];

					formattedObj[_id].push({ result: "missing_key", id: _id, key: p, sourceValue: x[p], targetValue: y[p] });
				}
			}

			for (p in x) {
				// Do not check prototype chain...
				if(!x.hasOwnProperty(p)) continue;

				// If key is excluded from comparison, continue on
				if(!_isRaw && isExcludedKey(subject, p)) continue;

				// Set ID
				if(isTopLevel && (typeof x === 'object' || typeof y === 'function')) {
					_id = p;
				}

				if(isTopLevel && isExcludedItem(subject, p)) continue;

				if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
					if(isExceptionalMissingKey(subject, p, x[p], y[p])) continue;

					if($.isEmptyObject(formattedObj[_id])) formattedObj[_id] = [];

					formattedObj[_id].push({ result: "missing_key", id: _id, key: p, sourceValue: x[p], targetValue: y[p] });
					continue;
				}

				switch (typeof (x[p])) {
					case 'object':
					case 'function':

						leftChain.push(x);
						rightChain.push(y);


						if (!compare2Objects( x[p], y[p], false )) return false;

						leftChain.pop();
						rightChain.pop();
						break;

					default:
						// If key is excluded from comparison, continue on
						if(!_isRaw && isExcludedKey(subject, p)) continue;

						if (x[p] !== y[p]) {

							if(String(x[p]) !== String(y[p])) {
								if($.isEmptyObject(formattedObj[_id])) formattedObj[_id] = [];

								// Mismatch values occurred, storing both x y keys and values
								formattedObj[_id].push({ result: "mismatch_key", id: _id, key: p, sourceValue: x[p], targetValue: y[p] });
							}
							else {
								if($.isEmptyObject(formattedObj[_id])) formattedObj[_id] = [];

								// Mismatch values occurred, storing both x y keys and values
								formattedObj[_id].push({ result: "mismatch_key", id: _id, key: p, sourceValue: x[p], targetValue: y[p] });
							}
						}
						break;
				}
			}

			return true;
		}

		if (arguments.length < 1) {
			return true;
		}


		for (i = 1, l = arguments.length; i < l; i++) {

			leftChain = [];
			rightChain = [];

			var data1 = arguments[0];
			var data2 = $.isEmptyObject(arguments[i]) ? {} : arguments[i];

			if (!compare2Objects(data1, data2, true)) {
					return formattedObj;
			}
		}

		return formattedObj;
	}

	// --------------------------------------------
	function getResults(sourceData, targetData) {
		var subject, returnObject = {};

		_isRaw = false;

		for (var i = 0; i < _subjectArray.length; i++) {
			subject = _subjectArray[i];

			_deepCompareSubject = subject;

			returnObject[subject] = deepCompare(sourceData[ subject ], targetData[ subject ]);
		};

		return returnObject;
	}

	// --------------------------------------------
	function getFormattedResults(sourceData, targetData) {
		var subject, returnObject = {};

		_isRaw = false;

		for (var i = 0; i < _subjectArray.length; i++) {
			subject = _subjectArray[i];

			_deepCompareSubject = subject;

			returnObject[subject] = deepCompare(sourceData[ subject ], targetData[ subject ]);
		};

		return returnObject;
	}

	// --------------------------------------------
	function _getChangeCount(sourceData, targetData, subject) {
		var data = _public.runAnalysis(sourceData, targetData);

		if(typeof data[subject] !== 'undefined') {
			return data[subject].length;
		}

		return null;
	}

	// --------------------------------------------
	function _getChangedIds(sourceData, targetData, subjectParam) {

		var data = _public.runAnalysis(sourceData, targetData),
			subject,
			resultObj = {};

		function getUniqueKeys(subjectObj) {
			var idStack = [],
				id;

			for(var key in subjectObj) {
				id = subjectObj[key].id;

				if(!~idStack.indexOf(id)) {
					idStack.push(id);
				}
			}
			return idStack;
		}

		// If we don't pass in a subject, return a handful of goodies
		if(!subjectParam) {
			for (var i = 0; i < _subjectArray.length; i++) {
				subject = _subjectArray[i];

				resultObj[subject] = getUniqueKeys(data[subject]);
			};

			return resultObj;
		}

		// If we pass in a param but it doesn't exist, don't return any results
		if(!~_subjectArray.indexOf(subjectParam)) return null;

		resultObj = getUniqueKeys(data[subjectParam]);

		return resultObj;
	}

	// --------------------------------------------
	function _getChangeStatusClass(sourceValue, targetValue) {
		var sVal = utui.util.safeEscape(sourceValue);
		var tVal = utui.util.safeEscape(targetValue);

		if(String(sVal) !== String(tVal)) {
			if(!$.isEmptyObject(sVal) && $.isEmptyObject(tVal)) {
				return 'bg-danger';
			}
			if($.isEmptyObject(sVal) && !$.isEmptyObject(tVal)) {
				return 'bg-success';
			}
			if(!$.isEmptyObject(sVal) && !$.isEmptyObject(tVal)) {
				return 'bg-warning';
			}
		}

		return '';
	}

	// --------------------------------------------
	function _getErrorCategory(obj) {
		if(obj.result === 'mismatch_key') {
			return 'updated';
		}

		if(obj.result === 'missing_key') {

			// Ensure that missing keys do not translate to missing instances
			if(String(obj.id) !== String(obj.key)) {
				return 'updated';
			}

			if(!$.isEmptyObject(obj.sourceValue) && $.isEmptyObject(obj.targetValue) ) {
				return 'removed';
			}

			if($.isEmptyObject(obj.sourceValue) && !$.isEmptyObject(obj.targetValue) ) {
				return 'added';
			}
		}


		return 'nocategory';
	}

	// --------------------------------------------
	var _diffReport = [];


	// --------------------------------------------
	function _isStashed(acctProfile) {
		if(_diffReport[acctProfile]) {
			return true;
		}
		return false;
	}

	// --------------------------------------------
	// @param "acctProfile" - namespace, {{account}}_{{profile}}
	// @param "category" - current | source
	// @param {data} - getProfile success data
	function _setStash(acctProfile, category, data) {
		if(!_isStashed(acctProfile)) {
			_diffReport[acctProfile] = {
				current: {},
				source: {}
			};
		}

		_diffReport[acctProfile][category] = data;
		return _diffReport[acctProfile][category];
	}

	// --------------------------------------------
	function _getStash(acctProfile, changeCategory) {
		if(arguments.length === 0) {
			return _diffReport;
		}

		if(arguments.length === 1) {
			if(_isStashed(acctProfile)) {
				return _diffReport[acctProfile];
			}
			return null;
		}

		if(_isStashed(acctProfile)) {
			return _diffReport[acctProfile][changeCategory];
		}
		return null;
	}

	// --------------------------------------------
	function _removeStash(acctProfile) {
		if(_isStashed(acctProfile)) {
			delete _diffReport[acctProfile];
			return _diffReport[acctProfile];
		}
	}

	// --------------------------------------------
	// Record the successfull merge of another profile version into
	// the current version. 
	// @param "profileData" - Object containing the data of the incoming profile
	function _recordMergedVersionRevision(version,revision){
		
		if (! _hasMergedVersionRevision(version,revision)){
			if (utui.data.settings.merge && Object.keys(utui.data.settings.merge).length > 10){
				var newMerge = {},
				    first10 = _.first(Object.keys(utui.data.settings.merge).sort().reverse(),10);

				first10.forEach(function(v){
					newMerge[v] = utui.data.settings.merge[v]
				});

				utui.data.settings.merge = newMerge;				
			}

			var rvsn = utui.data.settings.revision;
			utui.data.settings.merge = utui.data.settings.merge || {};
			utui.data.settings.merge[rvsn] = utui.data.settings.merge[rvsn] || {};
			utui.data.settings.merge[rvsn][version + ":" + revision] = utui.sharedSessionManager.getLastUrestTimestamp() + ":" + utui.login.email;
		}
	}	

	// --------------------------------------------
	// Check if a specific version/revision has been merged into the currently loaded
	// profile.
	function _hasMergedVersionRevision(version,revision){
		if (utui.data.settings.merge){
			if (utui.data.settings.merge[utui.data.settings.revision]){
				if (utui.data.settings.merge[utui.data.settings.revision][version + ":" + revision]){
					return true;
				}
			}
		}
		return false;
	}	

	// --------------------------------------------
	// Check if there has been a merge in a given version
	function _hasMergedVersion(version){
		if (utui.data.settings.merge){
			if (utui.data.settings.merge[utui.data.settings.revision]){
				return true;
			}
		}
		return false;
	}	

	// --------------------------------------------
	// Return merge history for a given version if found. Caller should expect an undefined result if not found
	function _getMergeHistoryForVersion(version){
		if (utui.data.settings.merge){
			return utui.data.settings.merge[version];
		}
		return undefined;		
	}	

	// --------------------------------------------
	var _public = {
		// This fetches a standard diff report that's uninterpreted
		runAnalysis: function(sourceData, targetData) {
			var subject;

			_isRaw = false;

			// Change History
			_sourceData = sourceData || utui.original_data; 	// previous state
			_targetData = targetData || utui.data;				// newer/changed state

			// If subject is missing for a data set, add a blank one to avoid breaking the diff engine
			for (var i = 0; i < _subjectArray.length; i++) {
				subject = _subjectArray[i];
				if(!_sourceData.hasOwnProperty(subject)) {
					_sourceData[subject] = {};
				}

				if(!_targetData.hasOwnProperty(subject)) {
					_targetData[subject] = {};
				}
			};

			return getResults(_sourceData, _targetData);
		},
		// This optimizes and interprets the standard diff to be readable
		runUtuiAnalysis: function(sourceReference, targetReference) {
			var sourceData = utui[sourceReference],
				targetData = utui[targetReference],
				resultCollection = [],
				errorResultSubjectCollection = diffapi.runAnalysis(sourceData, targetData),
				count = 0,
				errorResultSubjectItem,
				errorCollection,
				errorItem,
				subject,
				resultObj;

			// { loadrules: ..., manage: ..., customizations: ... }
			for(var key in errorResultSubjectCollection) {
				subject = key;
				errorResultSubjectItem = errorResultSubjectCollection[key];
				// { 1: [], 2: [] }

				for(var i in errorResultSubjectItem) {
					errorCollection = errorResultSubjectItem[i];
					// [{ ... }, { ... }]

					for(var j in errorCollection) {
						errorItem = errorCollection[j]
						// { ... }

						resultObj = $.extend({}, {
							_id: count++,
							id: errorItem.id,
							key: errorItem.key,
							result: errorItem.result,
							subject: subject,
							category: _getErrorCategory(errorItem)
						});

						// store references of source objects
						resultObj._source = $.extend({}, {
							obj: sourceData[subject][errorItem.id],
							value: errorItem.sourceValue,
							reference: sourceReference
						});

						// store references of target objects
						resultObj._target = $.extend({}, {
							obj: targetData[subject][errorItem.id],
							value: errorItem.targetValue,
							reference: targetReference
						});

						resultCollection.push(resultObj);
					}
				}

			};

			return resultCollection;
		},

		getChangeCount: _getChangeCount,
		getChangedIds: _getChangedIds,
		getSubjects: _subjectArray,

		isStashed: _isStashed,
		getStash: _getStash,
		setStash: _setStash,
		removeStash: _removeStash,
		showStash: function() {
			return _diffReport;
		},
		recordMergedVersionRevision : _recordMergedVersionRevision,
		hasMergedVersionRevision : _hasMergedVersionRevision,
		hasMergedVersion : _hasMergedVersion,
		getMergeHistoryForVersion : _getMergeHistoryForVersion

	};

	return _public;
}();


// --------------------------------------------
utui.diff = function() {
	var _namespace = "mergeChanges_dialog",
		_templateModal = utui.ui.template.modal(),
		_templateAccordion = utui.ui.template.accordion,
		_templateTabItemView = utui.ui.template.tabItemView,
		_templateTabCollectionView = utui.ui.template.tabCollectionView;

	var _subjectArray = [
			'customizations',
			'define',
			'loadrules',
			'manage'
		];

	var _reloadErrorCodeMap = {
		JS_EXTENSION_UNAUTHORIZED : 'js_extension_unauthorized',
		LABEL_UNAUTHORIZED : 'label_unauthorized',
		LABEL_PERMISSION_UNAUTHORIZED : 'label_permission_unauthorized',
		LABEL_INCOMING_HAS_MISSING_LOCKS : 'label_error:incoming_has_missing_locks',
		LIBRARY_CURRENT_LINKED : 'library_current_linked',
		LIBRARY_INCOMING_EXISTS : 'library_incoming_exists'
	}

	var _tempStorage = {
		customizations: {},
		define: {},
		loadrules: {},
		manage: {}
	};

	var _labelCollection = {};

	var _helper = {
		compareTwoObjects: function() {
			var i, l, leftChain, rightChain;

			function compare2Objects(x, y) {
				var p;

				// remember that NaN === NaN returns false
				// and isNaN(undefined) returns true
				if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
					return true;
				}

				// Compare primitives and functions.
				// Check if both arguments link to the same object.
				// Especially useful on step when comparing prototypes
				if (x === y) {
					return true;
				}

				// Works in case when functions are created in constructor.
				// Comparing dates is a common scenario. Another built-ins?
				// We can even handle functions passed across iframes
				if ((typeof x === 'function' && typeof y === 'function') ||
					(x instanceof Date && y instanceof Date) ||
					(x instanceof RegExp && y instanceof RegExp) ||
					(x instanceof String && y instanceof String) ||
					(x instanceof Number && y instanceof Number)) {
					return x.toString() === y.toString();
				}

				// Check for infinitive linking loops
				if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {
					return false;
				}

				// Quick checking of one object beeing a subset of another.
				// todo: cache the structure of arguments[0] for performance
				for (p in y) {
					// Do not check prototype chain
					if (!y.hasOwnProperty(p)) continue;

					if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
						return false;
					} else if (y[p] != x[p]) {
						return false;
					}
					// else if (typeof y[p] !== typeof x[p]) {
					// 	return false;
					// }
				}

				for (p in x) {
					// Do not check prototype chain
					if (!x.hasOwnProperty(p)) continue;

					if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
						return false;
					} else if (y[p] != x[p]) {
						return false;
					}

					// else if (typeof y[p] !== typeof x[p]) {
					// 	return false;
					// }

					switch (typeof(x[p])) {
						case 'object':
						case 'function':

							leftChain.push(x);
							rightChain.push(y);

							if (!compare2Objects(x[p], y[p])) {
								return false;
							}

							leftChain.pop();
							rightChain.pop();
							break;

						default:
							if (x[p] != y[p]) {
								return false;
							}
							break;
					}
				}

				return true;
			}

			if (arguments.length < 1) {
				return true;
			}

			for (i = 1, l = arguments.length; i < l; i++) {

				leftChain = []; //Todo: this can be cached
				rightChain = [];

				if (!compare2Objects(arguments[0], arguments[i])) {
					return false;
				}
			}

			return true;
		}
	};

	// --------------------------------------------
	var _util = {

		getTitle: function(resultObj) {
			var isObject = function(obj) {
					return !$.isEmptyObject(obj);
				},
				titlePartialView = function(title, type) {
					return (type ? '<span style="font-weight:bold;">'+title+'</span> | '+type : '<span style="font-weight:bold;">'+title+'</span>');
				},
				objId,
				instanceObj,
				templateId,
				title;

			switch(subject) {
				case "customizations":
					objId = subjectId;
					instanceObj = data[subject][objId];

					templateId = instanceObj.id;
					return titlePartialView(instanceObj.title, utui.config.customizationList[templateId].title);
				case "define":
					objId = subjectId;
					instanceObj = data[subject][objId];

					return titlePartialView(instanceObj.title || instanceObj.name, instanceObj.name);
				case "loadrules":
					objId = subjectId;
					instanceObj = data[subject][objId];

					return titlePartialView(instanceObj.title);
				case "manage":
					objId = subjectId;
					instanceObj = data[subject][objId];
					templateId = instanceObj.tag_id;

					return titlePartialView(instanceObj.title, utui.config.manageList[templateId].title);
			}
			return null;
		},

		getTitleByChangeInstanceObj: function(instanceObj) {

			function getTitle(obj, type) {

				if(type === 'define') {
					return obj.title || obj.name;
				}

				if(obj.title) {
					return obj.title;
				}
				return '';
			}

			switch(instanceObj.subject) {
				case 'manage':
					switch(instanceObj.category) {
						case 'added':
						case 'updated':
							return getTitle(instanceObj._target.obj);
						case 'removed':
							return getTitle(instanceObj._source.obj);
						default:
							return '[title - unknown title]';
					}
				case 'loadrules':
					switch(instanceObj.category) {
						case 'added':
						case 'updated':
							return getTitle(instanceObj._target.obj);
						case 'removed':
							return getTitle(instanceObj._source.obj);
						default:
							return '[title - unknown title]';
					}
				case 'define':
					switch(instanceObj.category) {
						case 'added':
						case 'updated':
							return getTitle(instanceObj._target.obj, 'define');
						case 'removed':
							return getTitle(instanceObj._source.obj, 'define');
						default:
							return '[title - unknown title]';
					}
				case 'customizations':
					switch(instanceObj.category) {
						case 'added':
						case 'updated':
							return getTitle(instanceObj._target.obj);
						case 'removed':
							return getTitle(instanceObj._source.obj);
						default:
							return '[title - unknown title]';
					}
				case 'labels':
					switch(instanceObj.category) {
						case 'added':
						case 'updated':
							return getTitle(instanceObj._target.obj);
						case 'removed':
							return getTitle(instanceObj._source.obj);
						default:
							return '[title - unknown title]';
					}
				default:
					return '[title - no passed instance]'
			}
		},

		getInstanceClass: function(instance) {

			var hasConflict = function(instance) {
					if(
						(instance._target && instance._target.reference === 'data') &&
						(instance._source && instance._source.reference === 'original_data')
					) {
						return true;
					}
					return false;
				},
				hasSelect = function(instance) {
					if(
						(instance._target && instance._target.reference === 'data') &&
						(instance._source && instance._source.reference === 'original_data')
					) {
						return true;
					}
					return false;
				}

			if(hasSelect(instance)) {
				return 'select';
			}

			if(hasConflict(instance)) {
				return 'conflict';
			}

			return '';
		},

		getNameByChangeInstanceObj: function(instanceObj) {
			var subject = instanceObj.subject;
			var category = instanceObj.category;
			var sourceObj = instanceObj._source.obj;
			var targetObj = instanceObj._target.obj;

			switch(subject) {
				case 'manage':
					switch(category) {
						case 'added':
						case 'updated':
							return 'Tag - ' + targetObj.tag_name;
						case 'removed':
							return 'Tag - ' + sourceObj.tag_name;
					}
				case 'loadrules':
					switch(category) {
						case 'added':
						case 'updated':
						case 'removed':
							return 'Load Rule';
					}
				case 'define':
					switch(category) {
						case 'added':
						case 'updated':
							return 'Variable - ' + utui.config.defineOptions[targetObj.type];
						case 'removed':
							return 'Variable - ' + utui.config.defineOptions[sourceObj.type];
					}
				case 'customizations':
					switch(category) {
						case 'added':
						case 'updated':
							return 'Extension - ' + utui.config.customizationList[targetObj.id].title;
						case 'removed':
							return 'Extension - ' + utui.config.customizationList[sourceObj.id].title;
					}
				case 'labels':
					switch(category) {
						case 'added':
						case 'updated':
							return 'Label - ' + utui.labels.getLabelNameById(targetObj.id);
						case 'removed':
							return 'Label - ' + utui.labels.getLabelNameById(sourceObj.id);
					}
				default:
					return '[name - no passed instance]'
			}
		},

		isInstanceEntryValid: function(instance) {
			// find where we can place filter rules
			switch(instance.subject) {
				case 'manage':
					if(instance.key === 'sort') { return false; }
					break;
				case 'loadrules':
					if(instance.key === 'sort') { return false; }
					if(instance.key === 'containerId') { return false; }
					break;
				case 'define':
					if(instance.key === 'sort') { return false; }
					break;
				case 'customizations':
					if(instance.key === 'sort') { return false; }
					break;
				case 'labels':
					if(instance.key === 'sort') { return false; }
					break;
			}
			return true;
		},

		getImportantChanges: function(collection) {
			var entry,
				filteredCollection = [];

			for(var i in collection) {
				entry = collection[i];
				if(_util.isInstanceEntryValid(entry)) {
					filteredCollection.push(entry);
				}
			}

			return filteredCollection;
		},

		getSubjectIcon: function(subject) {
			switch(subject) {
				case "customizations":
					return '<i class="icon-wrench"></i>';
				case "labels":
					return '<i class="icon-folder-close"></i>';
				case "dashboard":
					return '<i class="icon-sitemap"></i>';
				case "define":
					return '<i class="icon-globe"></i>';
				case "loadrules":
					return '<i class="icon-book"></i>';
				case "manage":
					return '<i class="icon-tag"></i>';
				case "publish":
					return '<i class="icon-time"></i>';
				default:
					return subject;
			}
		}
	};



	// --------------------------------------------
	var _request = {
		onGetProfileCallbackSuccess: function(versionData) {
			utui.util.loadingModalStop();

			// Fetch incoming labels
			utui.labels.request.getLabels({account:utui.data.settings.account, profile:utui.data.settings.profileid, version:versionData.revision}, function(labelData) {

				utui.diff.merge.setLabelsData(utui.data.settings.revision, utui.data.labels);

				if(labelData) {
					utui.diff.merge.setLabelsData(versionData.revision, labelData.labels);
				} else {
					utui.diff.merge.setLabelsData(versionData.revision, {});
				}

				var errorStack = utui.diff.isValidIncomingVersion(versionData, labelData);

				if(errorStack.length) {
					return utui.diff.showCannotMergeNotQualified(errorStack, true);
				}

				utui['incoming_data'] = $.extend(true, {}, versionData);

				var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;
				diffapi.setStash(profileKey, 'current', diffapi.runUtuiAnalysis('original_data','data')); // your changes
				diffapi.setStash(profileKey, 'source', diffapi.runUtuiAnalysis('original_data','incoming_data')); // incoming changes

				utui.diff.merge.onSave();
			});
		},
		onGetProfileCallbackFailure: function(status, response) {
			utui.util.loadingModalStop();
		}
	}


	// --------------------------------------------
	var _dialog = {
		// --------------------------------------------
		mergeWizard: function() {
			// --------------------------------------------
			var _namespace = "",
				_templateAccordion = utui.ui.template.accordion,
				_sourceData,
				_targetData;

			var _context = {};

			var _sourceCollection = [];
			var _targetCollection = [];

			var _currentChangesCollection = []; /* context: changes that are not to be touched */
			var _sourceChangesCollection = []; /* context: changes that are to be selected */

			var _sourceSelectedChangesCollection = [];

			var _sourceConfirmedChangesCollection = [];
			var _changesDeselectedList = [];
			var _changesToBeExcludedList = []; /* to be removed... */
			var _conflictSelectionStates = [];
			var _toBeAutoDiscarded = [];

			var _clearSelection = function() {
				_currentChangesCollection = [];
				_sourceChangesCollection = [];
				_sourceSelectedChangesCollection = [];
				_sourceConfirmedChangesCollection = [];
				_changesDeselectedList = [];
				_changesToBeExcludedList = [];
				_toBeAutoDiscarded = [];
			};

			// --------------------------------------------
			var _view = {
				// ---------------------------------------------
				generalPanelHeader: function(title, description, selectedTitle) {
					var v = '';
						v += '<div class="container-fluid section-padded-top-bottom">';
							v += '<div class="row-fluid">';
								v += '<div class="header">';
									v += '<div class="headline">';
										v += '<h1 class="headline">'+title+'</h1>';
									v += '</div>';
									v += '<div class="description">';
										v += description;
									v += '</div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';
					return v;
				},
				// ---------------------------------------------
				generalPanelBody: function(namespace) {
					var v = '';

						v += '<div id="'+namespace+'_instanceContainer">';
							v += '<div class="container-fluid">';
								v += '<div class="row-fluid">';
									v += '<div class="span4">';
										v += this.instanceCompositeView(namespace, localize.t('tiq.diff.merge_dialog.header.added'), 'added');
									v += '</div>';
									v += '<div class="span4">';
										v += this.instanceCompositeView(namespace, localize.t('tiq.diff.merge_dialog.header.updated'), 'updated');
									v += '</div>';
									v += '<div class="span4">';
										v += this.instanceCompositeView(namespace, localize.t('tiq.diff.merge_dialog.header.removed'), 'removed');
									v += '</div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				},
				// ---------------------------------------------
				confirmPanelBody: function(namespace) {
					var v = '';

						v += '<div id="'+namespace+'_instanceContainer">';
							v += '<div class="container-fluid">';
								v += '<div class="row-fluid">';
									v += '<div class="span4">';
										v += this.instanceCompositeView(namespace, localize.t('tiq.diff.merge_dialog.header.to_be_added'), 'added');
									v += '</div>';
									v += '<div class="span4">';
										v += this.instanceCompositeView(namespace, localize.t('tiq.diff.merge_dialog.header.to_be_updated'), 'updated');
									v += '</div>';
									v += '<div class="span4">';
										v += this.instanceCompositeView(namespace, localize.t('tiq.diff.merge_dialog.header.to_be_removed'), 'removed');
									v += '</div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				},
				// ---------------------------------------------
				resolveConflictPanelBody: function(namespace, isMergeSave) {
					var v = '';

						v += '<div id="'+namespace+'_instanceContainer">';
							v += '<div class="container-fluid">';

								v += this.resolveConflictCompositeView(namespace, _context.current.title, _context.source.title);

							v += '</div>';
						v += '</div>';

					return v;
				},
				// ---------------------------------------------
				resolveConflictCompositeView: function(namespace, targetTitle, sourceTitle) {
					var v = '';

						v += '<div id="'+namespace+'_conflictRegion" class="" data-category="conflict">';
							v += '<div class="header">';
								v += '<div class="row-fluid">';
									v += '<div class="span4 aligncenter">';
										v += '<div class="conflict-container-header">'+(targetTitle || '')+'</div>';
									v += '</div>';
									v += '<div class="span4 aligncenter">';
										v += '<div class="conflict-container-header">'+localize.t('tiq.diff.merge_dialog.header.accepted_changes')+'</div>';
									v += '</div>';
									v += '<div class="span4 aligncenter">';
										v += '<div class="conflict-container-header">'+(sourceTitle || '')+'</div>';
									v += '</div>';
								v += '</div>';
							v += '</div>';
							v += '<div class="body"></div>';
						v += '</div>';

					return v;
				},
				// ---------------------------------------------
				resolveConflictItemView: function(leftCol, middleCol, rightCol, subject, id) {
					var v = '';

					v += '<div class="row-fluid conflict-instance-row" data-subject="'+subject+'" data-id="'+id+'">';
						v += '<div class="span4">';
							v += leftCol;
						v += '</div>';
						v += '<div class="span4">';
							v += middleCol;
						v += '</div>';
						v += '<div class="span4">';
							v += rightCol;
						v += '</div>';
					v += '</div>';

					return v;
				},
				// ---------------------------------------------
				instanceItemView: function(obj, isConflictMode) {
					var selectionIndicatorItem = '';
					var additionalClasses = '';
					var inputValue = 'unselected';
					var _title = (obj.title !== '') ? obj.title : '[No Title]';

					if(obj.select_type === 'select') {
						additionalClasses += ' has-selection';
					}

					if(obj.conflict_user_selected_state === 'discard') {
						additionalClasses += (obj.item_origin === 'current' ? ' selected ease-right' : ' discarded');
						inputValue = (obj.item_origin === 'current' ? 'override' : 'discard');
					}

					if(isConflictMode && !obj.conflict_is_selectable) {
						inputValue = 'discard';
					}

					var v = '';
					v += '<div class="instance-category-container'+additionalClasses+' js-instance-composite-container '+obj.category_name+'" data-subject="'+obj.subject+'" data-id="'+obj.id+'" data-state="'+(obj.item_origin || '')+'" data-source="'+obj.source_reference+'" data-target="'+obj.target_reference+'" data-category="'+obj.category_name+'" >';

						// instanceClass
						if(obj.select_type === 'select') {
							v += '<div class="instance-class">';
								v += '<label><input type="checkbox" '+(obj.is_selected ? 'checked="checked"' : '')+' /></label>';
							v += '</div>';
						}

						v += '<div class="instance-details">';
							v += '<div class="instance-details-inner">';

								// type
								v += '<div class="meta-container">';
									v += '<div class="type">'+_util.getSubjectIcon(obj.subject)+'</div>';

									v += '<div class="meta">';
										v += '<div class="name">'+_title+'</div>';
										v += '<div class="title">'+obj.name+'</div>';
									v += '</div>';
									v += '<div style="clear:both"></div>';
								v += '</div>';

								// id
								v += '<div class="id">#'+obj.id+'</div>';

								// view
								v += '<div class="view" title="'+localize.t('tiq.diff.merge_dialog.props.view_instance')+'"><a href="#" class="js-view-instance"><i class="icon-eye-open"></i></a></div>';
							v += '</div>';
						v += '</div>';

						if(isConflictMode) {
							if(obj.conflict_is_selectable) {
								v += '<div class="instance-button btn btn-block">';
									v += '<div class="unselected">';
										if(obj.item_origin === 'current') {
											v += '<div style="position: absolute; right: 0; background: rgba(0,0,0,0.1);"><div style="width: 24px; text-align: center;"><i class="icon-arrow-right"></i></div></div>';
										}
										if(obj.item_origin === 'source') {
											v += '<div style="position: absolute; left: 0; background: rgba(0,0,0,0.1);"><div style="width: 24px; text-align: center;"><i class="icon-arrow-left"></i></div></div>';
										}
										v += localize.t('tiq.diff.merge_dialog.props.selection_use_this');
									v += '</div>';

									v += '<div class="selected">';
										v += localize.t('tiq.diff.merge_dialog.props.selection_accepted');
									v += '</div>';

									v += '<div class="discarded">';
										v += localize.t('tiq.diff.merge_dialog.props.selection_discarded');
									v += '</div>';
								v += '</div>';
							}

							if(obj.item_origin === 'source') {
								v += '<input type="hidden" class="js-conflict-selection" data-subject="'+obj.subject+'" data-id="'+obj.id+'" value="'+obj.conflict_user_selected_state+'" />';
							}
						}

					v += '</div>';

					return v;
				},
				// --------------------------------------------
				instanceItemNoView: function(category) {
					var _c = category || '';
					var v = '';
						v += '<div class="instance-composite-container no-changes-disclaimer">';
							v += '<div>'+localize.t('tiq.diff.merge_dialog.panels.no_changes', { category: _c })+'</div>';
						v += '</div>';
					return v;
				},
				// ---------------------------------------------
				instanceCompositeView: function(namespace, title, category, hasBadge) {
					var v = '';
					var styleCSS = '';

					switch(category) {
						case 'removed':
							styleCSS = 'background-color: #c14444; border-bottom-color: #912323;';
							break;
						case 'updated':
							styleCSS = 'background-color: #d69b34; border-bottom-color: #996c1d;';
							break;
						case 'added':
							styleCSS = 'background-color: #37c23d; border-bottom-color: #1b8e20;';
							break;
					}

					v += '<div id="'+namespace+'_'+category+'Region" class="instance-composite-container" data-category="'+category+'">';
						v += '<div class="header" style="'+styleCSS+'">';
							v += '<div class="title">';
								v += title;
							v += '</div>';
						v += '</div>';
						v += '<div class="body"></div>';
					v += '</div>';

					return v;
				},
				// ---------------------------------------------
				generalPanelLayout: function(panelContext, panelName, context) {
					var v = '',
						title = context.title,
						description = context.description;

					v += '<div class="main-header">';
						v += this.generalPanelHeader(title, description);

					v += '</div>';
					v += '<div class="main-body"></div>';

					return v;
				}
			};

			// --------------------------------------------
			var _conflictTools = {
				setTargetAsSelected: function(subject, id) {
					var $row = $('#'+_namespace).find('.conflict-instance-row[data-subject="'+subject+'"][data-id="'+id+'"]');
					var $chosen = $row.find('.js-instance-composite-container[data-state="current"]');
					var $discarded = $row.find('.js-instance-composite-container[data-state="source"]');

					if($discarded.hasClass('selected')) {
						$discarded.removeClass('selected ease-left');
					}

					$chosen.addClass('selected ease-right');
					$discarded.addClass('discarded');
				},
				setSourceAsSelected: function(subject, id) {
					// We are finding the target item first since our stored selection data depends on its value, then tracing back to the source item.
					var $row = $('#'+_namespace).find('.js-instance-composite-container[data-subject="'+subject+'"][data-id="'+id+'"]').closest('.conflict-instance-row')
					var $chosen = $row.find('.js-instance-composite-container[data-state="source"]');
					var $discarded = $row.find('.js-instance-composite-container[data-state="current"]');

					if($discarded.hasClass('selected')) {
						$discarded.removeClass('selected ease-right');
					}

					$chosen.addClass('selected ease-left');
					$discarded.addClass('discarded');
				}
			};

			// --------------------------------------------
			var _eventHandler = {
				onInstancePreviewClick: function(e) {
					e.stopImmediatePropagation();

					var node = $(this).closest('.js-instance-composite-container'),
						subject = node.attr('data-subject'),
						id = node.attr('data-id'),
						sourceReference = node.attr('data-source'),
						targetReference = node.attr('data-target'),
						category = node.attr('data-category');

					_dialog.comparison.show(category, subject, id, utui[sourceReference], utui[targetReference]);
				},
				onInstanceComparePreviewClick: function(e) {
					e.stopImmediatePropagation();

					var node = $(this).closest('.js-instance-composite-container'),
						subject = node.attr('data-subject'),
						id = node.attr('data-id'),
						sourceReference = _context.current.reference,
						targetReference = _context.source.reference,
						category = node.attr('data-category');



					// If there's an added conflict, we must pass in a second ID to compare
					var $instanceCollection = $(this).closest('.conflict-instance-row').find('.instance-category-container');
					var leftId = $($instanceCollection[0]).attr('data-id');
					var rightId = $($instanceCollection[1]).attr('data-id');

					_dialog.comparison.show(category, subject, leftId, utui[sourceReference], utui[targetReference], _context, true, rightId);
				},
				// ---------------------------------------------
				onInstanceConflictCurrentClick: function(e) {
					e.preventDefault();

					var $container = $(this).closest('.js-instance-composite-container');
					var $row = $(this).closest('.conflict-instance-row');

					var $otherChoice = $row.find('.js-instance-composite-container[data-state="source"]');

					if($container.hasClass('selected')) {
						$container.removeClass('selected ease-right');
						$otherChoice.removeClass('discarded');

						$otherChoice.find('input').val('unselected');
					}
					else if($otherChoice.hasClass('selected')) {
						$otherChoice.removeClass('selected ease-left').find('input').val('discard');

						setTimeout(function() {
							$container.removeClass('discarded');
							$container.addClass('selected ease-right');
							$otherChoice.addClass('discarded');
						}, 250);
					}
					else {
						$container.addClass('selected ease-right');
						$otherChoice.addClass('discarded').find('input').val('discard');
					}

					_runConflictPanelValidation();
				},
				// ---------------------------------------------
				onInstanceConflictSourceClick: function(e) {
					e.preventDefault();

					var $container = $(this).closest('.js-instance-composite-container');
					var $row = $(this).closest('.conflict-instance-row');

					var $otherChoice = $row.find('.js-instance-composite-container[data-state="current"]');

					if($container.hasClass('selected')) {
						$container.removeClass('selected ease-left');
						$otherChoice.removeClass('discarded');

						$container.find('input').val('unselected');
					}
					else if($otherChoice.hasClass('selected')) {
						$otherChoice.removeClass('selected ease-right');

						setTimeout(function() {
							$container.removeClass('discarded');
							$container.addClass('selected ease-left').find('input').val('override');
							$otherChoice.addClass('discarded');
						}, 250);
					}
					else {
						$container.addClass('selected ease-left').find('input').val('override');
						$otherChoice.addClass('discarded');
					}

					_runConflictPanelValidation();
				},
				// ---------------------------------------------
				onConflictNextBtnClick: function(e) {
					var subject, id, changeKey;

					if($('.conflict-accepted-container').length) {
						$('.conflict-accepted-container').remove();
					}

					// clear confirmed selection
					_sourceConfirmedChangesCollection = [];

					// store selection states
					_storeConflictSelectionState();

					// store confirmation items based on target and conflict selections
					for (var i = 0; i < _sourceSelectedChangesCollection.length; i++) {
						subject = _sourceSelectedChangesCollection[i].subject;
						id = _sourceSelectedChangesCollection[i].id;
						changeKey = subject + ':' + id;

						if(!~_changesDeselectedList.indexOf(changeKey) && _conflictSelectionStates[changeKey] !== 'discard') {
							_sourceConfirmedChangesCollection.push(_sourceSelectedChangesCollection[i]);
						}
					};

					// Handle Auto Discarded items (resolve add once extensions)
					if(_toBeAutoDiscarded.length) {
						for (var i = 0; i < _toBeAutoDiscarded.length; i++) {
							var toDiscardItem = _toBeAutoDiscarded[i];

							if(toDiscardItem.ref === 'target') {
								var item = _currentChangesCollection.filter(function(a) {
									return a.id === toDiscardItem.id && a.category === toDiscardItem.category && a.subject === toDiscardItem.subject;
								})[0];

								item = $.extend(true, {}, item);

								if(item) {
									item.category = 'removed';
									var tempTargetObj = item._target;
									item._target = item._source;
									item._source = tempTargetObj;

									_sourceConfirmedChangesCollection.push(item);
								}

							}
						};
					}

					// debugger;

					_viewModel.renderConfirmChangesPanel();
				},
				// --------------------------------------------
				onReloadBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				},
				// --------------------------------------------
				onCloseBtnClick: function(e) {
					// Prompt discard dialog
					_dialog.discardConfirm.show(_context.source.title);
				},
				// --------------------------------------------
				onMergeBtnClick: function(e) {
					// Processing merge for selected items
					_viewModel.processMerge(_sourceConfirmedChangesCollection);

					// Re-run validation
					utui.validation.runValidationOnAllTabs();

					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------
			var _viewModel = {
				// ---------------------------------------------
				storeItemsInTempStorage: function() {
					var _subjectArr = ['define', 'customizations', 'loadrules', 'manage'];
					var _categoryArr = ['added', 'removed'];
					var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;
					var currentStash = diffapi.getStash(profileKey, 'current');
					var sourceStash = diffapi.getStash(profileKey, 'source'); // incoming
					var subject;
					var category;
					var parseCurrentCollection = [];
					var parseSourceCollection = [];

					var getId = function(obj, subject) {
						switch(subject) {
							case 'customizations':
							case 'define':
								return obj['_id'];
								break;
							case 'loadrules':
							case 'manage':
								return obj['id'];
								break;
						}
					}

					var storeData = function(collection, subject) {
						var obj;
						var id;

						for (var i = 0; i < collection.length; i++) {
							obj = collection[i];
							id = +getId(obj, subject);

							_tempStorage[subject][id] = $.extend({}, obj);
						};
					};

					var parseObjectsFromStashEntry = function(stashCollection, subject, category) {
						var destination = (category === 'added') ? '_target' : '_source';

						return stashCollection.filter(function(obj, i) { return obj.result === "missing_key" && obj.category === category && obj.subject === subject }).map(function(obj) { return obj[destination].obj });
					};

					for (var i = 0; i < _subjectArr.length; i++) {
						subject = _subjectArr[i];

						for (var j = 0; j < _categoryArr.length; j++) {
							category = _categoryArr[j];

							parseCurrentCollection = parseObjectsFromStashEntry(currentStash, subject, category);
							parseSourceCollection = parseObjectsFromStashEntry(sourceStash, subject, category);

							storeData(parseCurrentCollection, subject);
							storeData(parseSourceCollection, subject);
						};
					};
				},
				// --------------------------------------------
				operateRemoved: function(collection, category, subject, location) {
					var data = collection.filter(function(value) { if(value.category === category && value.subject === subject) return value }).map(function(model, value) { return model[location].obj }),
						getMinorRevision = function(revision) {
							var their_publish_history = utui[_context.source.reference].publish_history[revision];
							var regexNum = /([0-9])\w+/g;
							var minorCollection = [];

							for(var key in their_publish_history) {
								their_publish_history[key];

								if(regexNum.test(key)) {
									minorCollection.push(key);
								}
							};

							minorCollection = minorCollection.sort();

							return minorCollection[minorCollection.length-1];
						},
						obj,
						id;

					var sourceRevision = utui[_context.source.reference].settings.revision;
					var minorRevision = getMinorRevision(sourceRevision);

					for(var key in data) {
						obj = data[key];

						switch(subject) {
							case 'customizations':
								var instanceId = obj._id;
								utui.customizations.dropExtension(instanceId, undefined, true);

								utui.profile.setActionPerformed({
									action : utui.constants.extensions.REMOVED,
									data : {
										id : obj._id,
										name : obj.title,
										type : obj.id,
										imported : obj.imported,
										merge_imported_revision: sourceRevision,
										merge_imported_minorrevision: minorRevision,
										library : (obj.imported) ? obj.settings.profileid : '',
										kind : utui.constants.extensions.TYPE,
										operation : utui.constants.operation.REMOVED
									}
								}, true);

								break;
							case 'define':
								var instanceId = obj._id;
								utui.define.dropVariable(obj, undefined, true);

								utui.profile.setActionPerformed({
									action : utui.constants.variables.REMOVED,
									data : {
										id : obj.id,
										name : obj.name,
										type : obj.type,
										imported : obj.imported,
										merge_imported_revision: sourceRevision,
										merge_imported_minorrevision: minorRevision,
										library : (obj.imported) ? obj.settings.profileid : '',
										kind : utui.constants.variables.TYPE,
										operation : utui.constants.operation.REMOVED
									}
								}, true);

								break;
							case 'loadrules':
								var instanceId = obj.id;
								var instanceObj = lrapi.getObjectByLoadruleId(instanceId);
								var containerId = instanceObj.containerId;

								utui.loadrules.drop(containerId, undefined, undefined, true);

								utui.profile.setActionPerformed({
									action: utui.constants.loadrules.REMOVED,
									data: {
										id: obj.id,
										name: obj.title,
										imported : obj.imported,
										merge_imported_revision: sourceRevision,
										merge_imported_minorrevision: minorRevision,
										library : (obj.imported) ? obj.settings.profileid : '',
										kind : utui.constants.loadrules.TYPE,
										operation : utui.constants.operation.REMOVED
									}
								}, true);

								break;
							case 'manage':
								var instanceId = obj.id;
								var containerId = tagapi.getContainerIdByTagId(instanceId);

								utui.manage.drop(containerId, undefined, true);

								utui.profile.setActionPerformed({
									action: utui.constants.tags.REMOVED,
									data: {
										id: obj.id,
										tag_name: obj.tag_name || utui.util.getTagNameFromTagId(obj.tag_id),
										name: obj.title,
										imported: obj.imported,
										merge_imported_revision: sourceRevision,
										merge_imported_minorrevision: minorRevision,
										library: (obj.imported) ? obj.settings.profileid : '',
										kind : utui.constants.tags.TYPE,
										operation : utui.constants.operation.REMOVED
									}
								}, true);

								break;
						}
					}
				},
				// --------------------------------------------
				// @param (location) string - _source || _target
				operateAdded: function(collection, category, subject, location) {
					var data = collection.filter(function(value) { if(value.category === category && value.subject === subject) return value }).map(function(model, value) { return model[location].obj });

					this.processAddedAndUpdated(data, subject, 'added');
				},
				// --------------------------------------------
				operateUpdated: function(collection, category, subject, location) {
					var data = collection.filter(function(value) { if(value.category === category && value.subject === subject) return value }).map(function(model, value) { return model[location].obj });

					this.processAddedAndUpdated(data, subject, 'updated');
				},
				processAddedAndUpdated: function(collection, subject, actionStr) {
					var data = collection,
						getInstanceIdKeyBasedOnSubject = function(subject) {
							switch(subject) {
								case 'customizations':
								case 'define':
									return '_id';
								case 'manage':
								case 'loadrules':
									return 'id';
							}
						},
						getMinorRevision = function(revision) {
							var their_publish_history = utui[_context.source.reference].publish_history[revision];
							var regexNum = /([0-9])\w+/g;
							var minorCollection = [];

							for(var key in their_publish_history) {
								their_publish_history[key];

								if(regexNum.test(key)) {
									minorCollection.push(key);
								}
							};

							minorCollection = minorCollection.sort();

							return minorCollection[minorCollection.length-1];
						},
						id = getInstanceIdKeyBasedOnSubject(subject),
						action = '',
						instanceObj,
						containerId,
						instanceId,
						obj = {};

					var sourceRevision = utui[_context.source.reference].settings.revision;
					var minorRevision = getMinorRevision(sourceRevision);

					if(actionStr === 'added') {
						action = 'ADDED';
					} else if(actionStr === 'updated') {
						action = 'UPDATED';
					}


					for(var key in data) {
						instanceObj = data[key];

						switch(subject) {
							case 'customizations':
								instanceId = instanceObj[id];
								obj = instanceObj;

								// if we accept an updated object that was previously removed, re-add it
								if($.isEmptyObject(utui.data[subject][instanceId])) {
									utui[subject].addStashedItem(obj);
								} else {
									utui.data[subject][instanceId] = obj;
								}

								// Show updated label in history
								utui.profile.setActionPerformed({
									action: utui.constants.extensions[action],
									data: {
										id: obj[id],
										name: obj.title,
										type: obj.id,
										merge_imported_revision: sourceRevision,
										merge_imported_minorrevision: minorRevision,
										library: (obj.imported) ? obj.settings.profileid : '',
										kind : utui.constants.extensions.TYPE,
										operation : utui.constants.operation[action],
										container: "customizations_"+obj[id]
									}
								}, true);

								break;
							case 'define':
								instanceId = instanceObj[id];
								obj = instanceObj;

								// if we accept an updated object that was previously removed, re-add it
								if($.isEmptyObject(utui.data[subject][instanceId])) {
									utui[subject].addStashedItem(instanceObj);
								} else {
									utui.data[subject][instanceId] = instanceObj;
								}

								// Show updated label in history
								utui.profile.setActionPerformed({
									action: utui.constants.variables[action],
									data: {
										id: obj[id],
										name: obj.name,
										type: obj.type,
										merge_imported_revision: sourceRevision,
										merge_imported_minorrevision: minorRevision,
										kind: utui.constants.variables.TYPE,
										operation: utui.constants.operation[action],
										container: 'defineObjectsList'
									}
								}, true);

								break;
							case 'manage':
								instanceId = instanceObj[id];
								obj = instanceObj;

								// if we accept an updated object that was previously removed, re-add it
								if($.isEmptyObject(utui.data[subject][instanceId])) {
									utui[subject].addStashedItem(instanceObj);
								} else {
									containerId = tagapi.getContainerIdByTagId(instanceId);

									utui[subject].containerMap[containerId] = instanceObj;
									utui.data[subject][instanceId] = instanceObj;
								}

								// Show updated label in history
								utui.profile.setActionPerformed({
									action:utui.constants.tags[action],
									data:{
										id: obj[id],
										tag_name: utui.util.getTagNameFromTagId(obj.tag_id),
										imported: obj.imported,
										merge_imported_revision: sourceRevision,
										merge_imported_minorrevision: minorRevision,
										library: (obj.imported) ? obj.settings.profileid : '',
										name: utui.util.getTagNameFromTagId(obj.tag_id),
										kind: utui.constants.tags.TYPE,
										operation: utui.constants.operation[action],
										container: containerId
									}
								}, true);

								break;
							case 'loadrules':
								instanceId = instanceObj[id];

								// if we accept an updated object that was previously removed, re-add it
								if($.isEmptyObject(utui.data[subject][instanceId])) {
									utui[subject].addStashedItem(instanceObj);
									obj = instanceObj;

									// Show updated label in history
									utui.profile.setActionPerformed({
									    action : utui.constants.loadrules[action],
									    data : {
									        id : obj[id],
									        name : obj.title,
									        imported : obj.imported,
									        merge_imported_revision: sourceRevision,
									        merge_imported_minorrevision: minorRevision,
									        library : (obj.imported) ? obj.settings.profileid : '',
									        kind : utui.constants.loadrules.TYPE,
									        operation : utui.constants.operation[action],
									        container: containerId
									    }
									}, true);

								} else {
									containerId = lrapi.getContainerIdByLoadruleId(instanceId);
									obj = instanceObj;

									utui[subject].containerMap[containerId] = instanceObj;
									utui.data[subject][instanceId] = instanceObj;

									// Show updated label in history
									utui.profile.setActionPerformed({
									    action : utui.constants.loadrules[action],
									    data : {
									        id : obj[id],
									        name : utui[subject].containerMap[containerId].title,
									        imported : obj.imported,
									        merge_imported_revision: sourceRevision,
									        merge_imported_minorrevision: minorRevision,
									        library : (obj.imported) ? obj.settings.profileid : '',
									        kind : utui.constants.loadrules.TYPE,
									        operation : utui.constants.operation[action],
									        container: containerId
									    }
									}, true);
								}


								break;
						}
					}
				},
				// --------------------------------------------
				getChangesCollectionViewFromCollection: function(collection, selectType) {
					var subjectCollection = diffapi.getSubjects,
						collectionView = '',
						instanceUniqueKey = '',
						uniqueCollectionCheck = [],
						instance = '',
						title = '',
						name = '',
						isSelected = true; // default

					if(!collection.length) {
						// Show no view
						return _view.instanceItemNoView();
					}

					for (var i = 0; i < collection.length; i++) {
						instance = collection[i];

						title = _util.getTitleByChangeInstanceObj(instance);
						name = _util.getNameByChangeInstanceObj(instance);

						if(selectType === 'select' && _changesDeselectedList.length > 0) {
							isSelected = (~_changesDeselectedList.indexOf(instance.subject+':'+instance.id) ? false : true)
						}

						instanceUniqueKey = instance.subject+':'+instance.id+':'+instance.category;

						if(!~uniqueCollectionCheck.indexOf(instanceUniqueKey) ) {
							uniqueCollectionCheck.push(instanceUniqueKey);

							collectionView += _view.instanceItemView({
								id: instance.id,
								title: title,
								name: name,
								subject: instance.subject,
								source_reference: instance._source.reference,
								target_reference: instance._target.reference,
								select_type: selectType,
								is_selected: isSelected,
								category_name: instance.category
							}, false);
						}
					};

					return collectionView;
				},
				// --------------------------------------------
				getMessageItemView: function(message) {
					var v = '';

						v += '<div style="padding:0 6px 8px;">';
							v += message;
						v += '</div>';
					return v;
				},
				// --------------------------------------------
				renderSourceChangesPanel: function() {

					// --------
					var context = {
						headline: '<h2 style="text-transform: capitalize;">'+_context.source.title+'</h2>',
						description: '<p>'+localize.t('tiq.diff.merge_dialog.panels.source_changes_description')+'</p>'
					};

					// --------
					var eventHandler = {
						onNextBtnClick: function(e) {
							var subject, id, selectedKey;

							_changesDeselectedList = [];
							_sourceSelectedChangesCollection = [];

							$('#'+_namespace).find('input').each(function() {

								if(!this.checked) {
									subject = $(this).closest('.js-instance-composite-container').attr('data-subject');
									id = $(this).closest('.js-instance-composite-container').attr('data-id');

									selectedKey = subject + ':' + id;
									_changesDeselectedList.push(selectedKey);
								}
							});

							// set confirm keys
							for (var i = 0; i < _sourceChangesCollection.length; i++) {
								subject = _sourceChangesCollection[i].subject;
								id = _sourceChangesCollection[i].id;
								changeKey = subject + ':' + id;

								if(!~_changesDeselectedList.indexOf(changeKey)) {
									_sourceSelectedChangesCollection.push(_sourceChangesCollection[i]);
								}
							};

							_viewModel.renderConflictedChangesPanel('next');
						},
						onBackBtnClick: function(e) {
						}
					};

					// --------
					// Layout
					$('#'+_namespace).find('.main-header').html( _view.generalPanelHeader( context.headline, context.description ) );
					$('#'+_namespace).find('.main-body').html( _view.confirmPanelBody(_namespace) );

					_sourceChangesCollection = _util.getImportantChanges(_sourceChangesCollection);

					// --------
					// Render
					renderResultRegions( _sourceChangesCollection, 'select' );

					// --------
					// Dialog buttons
					$('#'+_namespace+'_mergeBtn').hide();
					$('#'+_namespace+'_nextBtn').show();
					$('#'+_namespace+'_backBtn').hide();
					$('#'+_namespace+'_closeBtn').show();

					$('#'+_namespace).find('.instance-category-container').find('.view').tipsy({ gravity: 's' });

					$('#'+_namespace+'_nextBtn').off('click').on('click', eventHandler.onNextBtnClick);
					$('#'+_namespace+'_backBtn').off('click').on('click', eventHandler.onBackBtnClick);

					$('#'+_namespace).find('.js-view-instance').off('click').on('click', _eventHandler.onInstancePreviewClick);
				},
				// --------------------------------------------
				renderConflictedChangesPanel: function(direction) {
					var conflictChangeCollection = _getConflictsBetweenTwoCollections(_currentChangesCollection, _sourceSelectedChangesCollection);

					// Decision logic
					if(conflictChangeCollection.length === 0) {
						if(direction === 'back') {
							return _viewModel.renderSourceChangesPanel();
						}
						if(direction === 'next') {
							_sourceConfirmedChangesCollection = _sourceSelectedChangesCollection;

							return _viewModel.renderConfirmChangesPanel();
						}
					}

					// ---------------------
					var eventHandler = {
						// ---------------------
						onBackBtnClick: function(e) {
							if($('.conflict-accepted-container').length) {
								$('.conflict-accepted-container').remove();
							}

							// remove disabled style on next btn
							$('#'+_namespace+'_nextBtn').removeClass('ui-state-disabled');

							// store selection states
							_storeConflictSelectionState();

							_viewModel.renderSourceChangesPanel();
						}
					};

					// ---------------------
					var context = {
						headline: '<h2>'+localize.t('tiq.diff.merge_dialog.panels.resolve_header', { source_title: _context.source.title })+'</h2>',
						description: '<p>'+localize.t('tiq.diff.merge_dialog.panels.resolve_description', { source_title: _context.source.title, target_title: _context.current.title })+'</p>'
					};

					// Layout
					$('#'+_namespace).find('.main-header').html( _view.generalPanelHeader( context.headline, context.description ) );
					$('#'+_namespace).find('.main-body').html( _view.resolveConflictPanelBody(_namespace) );

					// Add conflict container
					$('#'+_namespace).find('.main-body').before( '<div class="conflict-accepted-container"></div>' );

					// Render Conflict View
					renderConflictRegions(conflictChangeCollection);

					// bind prev/next buttons?
					$('#'+_namespace+'_mergeBtn').hide();
					$('#'+_namespace+'_nextBtn').show();
					$('#'+_namespace+'_backBtn').show();
					$('#'+_namespace+'_closeBtn').show();

					$('#'+_namespace+'_backBtn').off('click').on('click', eventHandler.onBackBtnClick);

					_runConflictPanelValidation();

					$('#'+_namespace).find('.js-view-instance').off('click').on('click', _eventHandler.onInstanceComparePreviewClick);
					$('#'+_namespace).find('.instance-category-container').find('.view').tipsy({ gravity: 's' });

					// Readjust div when scrollbar is present
					var b = $('#'+_namespace).find('.main-body');
					var normalw = 0;
					var scrollw = 0;
					if (b.prop('scrollHeight') > b.height()) {
						normalw = $('#'+_namespace+'_instanceContainer').width();
						scrollw = normalw - b.width();
						$('#merge_dialog_instanceContainer').css({
							marginRight: scrollw + 'px'
						});
					}

					$('#'+_namespace).find('.main-body').css('overflow-x', 'hidden');
				},
				// --------------------------------------------
				renderConfirmChangesPanel: function() {
					var context = {
						headline: '<h2>'+localize.t('tiq.diff.merge_dialog.panels.confirmation_header', { source_title: _context.source.title })+'</h2>',
						description: '<p>'+localize.t('tiq.diff.merge_dialog.panels.confirmation_description')+'</p>'
					};

					// Layout
					$('#'+_namespace).find('.main-header').html( _view.generalPanelHeader( context.headline, context.description ) );
					$('#'+_namespace).find('.main-body').html( _view.confirmPanelBody(_namespace) );

					renderResultRegions(_sourceConfirmedChangesCollection);

					// bind prev/next buttons?
					$('#'+_namespace+'_mergeBtn').show();
					$('#'+_namespace+'_nextBtn').hide();
					$('#'+_namespace+'_backBtn').show();
					$('#'+_namespace+'_closeBtn').show();

					$('#'+_namespace+'_backBtn').off('click').on('click', function(e) {
						_viewModel.renderConflictedChangesPanel('back');
					});

					$('#'+_namespace).find('.instance-category-container').find('.view').tipsy({ gravity: 's' });

					$('#'+_namespace).find('.js-view-instance').off('click').on('click', _eventHandler.onInstancePreviewClick);
				},
				// ---------------------------------------------
				processMerge: function(confirmedCollection) {
					var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;
					var subjectArr = ['define', 'customizations', 'loadrules', 'manage'];

					// Store temporary items for the session (used for recovering deleted loadrules within a session)
					_viewModel.storeItemsInTempStorage();

					// Resolve labels
					confirmedCollection = _resolveLabels(confirmedCollection);

					// Remove
					for (var i = 0; i < subjectArr.length; i++) {
						_viewModel.operateRemoved(confirmedCollection, 'removed', subjectArr[i], '_source');
					};
					utui.customizations.drawJUIAccordion();
					utui.manage.updateAccordion(false);
					utui.manage.updateSortOrder();
					utui.loadrules.updateAllLRTags();

					// Added
					for (var i = 0; i < subjectArr.length; i++) {
						_viewModel.operateAdded(confirmedCollection, 'added', subjectArr[i], '_target');
					};
					utui.customizations.drawJUIAccordion();

					// Updated
					for (var i = 0; i < subjectArr.length; i++) {
						_viewModel.operateUpdated(confirmedCollection, 'updated', subjectArr[i], '_target');
					};

					// This refreshes the views in the UI
					utui.profile.import.updateDataModel(true);

					// Show not saved
					utui.profile.showAllModifiedTabLabels(utui.constants.extensions.TYPE);
					utui.profile.showAllModifiedTabLabels(utui.constants.variables.TYPE);
					utui.profile.showAllModifiedTabLabels(utui.constants.loadrules.TYPE);
					utui.profile.showAllModifiedTabLabels(utui.constants.tags.TYPE);

					diffapi.removeStash(profileKey);

					if(exapi.isTemplateExistInProfile("100026")) {
						utui.diff.showPrivacyManagerDetectionDialog()
					}

					// Only show message if confirmation panel has changes
					if(confirmedCollection.length !== 0) {
						utui.util.showStatusMessage(localize.t('tiq.diff.merge_dialog.status.successful_merge'));
					}

					diffapi.recordMergedVersionRevision(utui['incoming_data'].settings.revision,utui['incoming_data'].settings.minorrevision)

					// Update label relationship
					_resolveLabelRelationship();

					// Save labels back to server
					utui.labels.request.updateLabels(utui.data.labels);

					// clear selection and data
					delete utui[_context.source.reference];
					_clearSelection();
				}
			};

			// --------------------------------------------
			var _render = {
				modelBody: function() {
					$('#'+_namespace).find('.modal-body').html( _templateAccordion() );
				}
			};


			// --------------------------------------------
			function _resolveLabelRelationship() {
				for (var i = 0; i < _subjectArray.length; i++) {
					var subject = _subjectArray[i];

					var subjectData = utui.data[subject];

					for(var id in subjectData) {
						if(subjectData[id].hasOwnProperty('labels')) {
							var labelValue = subjectData[id].labels;

							if(utui.labels.hasSecureLabel(labelValue)) {

								if (typeof labelValue === "string") {
									labelValue = labelValue.split(',');
								}

								labelValue = labelValue || [];

								for (var j=0; j<labelValue.length; j++) {
									// record it...
									var labelId = labelValue[j];

									if (utui.labels.getLabelSecurityById(labelId)) {
										utui.labels.assignSecureLabelRelationship(labelId, subject, id);
									}
								}
							}
						}
					}
				};
			}



			// --------------------------------------------
			// Evaluate data object resource locks and combine appropriately
			function _resolveLabels(confirmedCollection) {
				var sourceReference = _context.source.reference;
				var sourceLabelCollection = utui.diff.merge.getLabelsData(utui[sourceReference].settings.revision);
				var targetReference = _context.current.reference;
				var targetLabelCollection = utui.diff.merge.getLabelsData(utui.data.settings.revision);
				var newLabelObj = {};
				var mismatchMap = [];
				var targetKeysReMap = [];
				var sourceLabelItem;
				var targetLabelItem;
				var nextId;

				// Get last label ID...
				var getNextLabelId = function() {
					var highestId = 0;

					for(var id in utui[targetReference].labels) {
						if(+id > highestId) highestId = id;
					};

					return ++highestId;
				};

				var isLabelNameExist = function(name, collection) {
					var isExist = false;

					for(var id in collection) {
						if(collection.hasOwnProperty(id)) {
							if(collection[id].name === name) isExist = true;
						}
					};

					return isExist;
				};


				if(!$.isEmptyObject(sourceLabelCollection) && !$.isEmptyObject(targetLabelCollection)) {

					//
					// Loop source collection to find missing target collection items
					for(var sId in sourceLabelCollection) {
						sourceLabelItem = sourceLabelCollection[sId];

						// If incoming label name doesn't exist in current...
						if(!isLabelNameExist(sourceLabelItem.name, targetLabelCollection)) {

							// then store in hashmap to resolve later
							mismatchMap.push({ _source_id: sId, _target_id: undefined, color: sourceLabelItem.color, name: sourceLabelItem.name });
						}
					};

					//
					// Loop source collection to find matching target collection items, then compare its IDs
					for(var sId in sourceLabelCollection) {
						sourceLabelItem = sourceLabelCollection[sId];

						// Loop target collection
						for(var tId in targetLabelCollection) {
							targetLabelItem = targetLabelCollection[tId];

							// If both collections have the same name...
							if(sourceLabelItem.name === targetLabelItem.name) {

								// ... but both collections do NOT have the same id ...
								if(+tId !== +sId) {

									// then store in hashmap to resolve later
									mismatchMap.push({ _source_id: sId, _target_id: tId, color: sourceLabelItem.color, name: sourceLabelItem.name });
								}
							}
						};
					};

					//
					// Merge and create labels
					for (var i = 0; i < mismatchMap.length; i++) {
						var mapItem = mismatchMap[i];

						// If current ID doesn't exist...
						if(mapItem._target_id === undefined) {

							// If current ID is not occupied by another label...
							if($.isEmptyObject(utui[targetReference]['labels'][mapItem._source_id])) {

								// Add target ID into source collection
								utui[targetReference]['labels'][mapItem._source_id] = $.extend({}, {
									color: mapItem.color,
									name: mapItem.name
								});

							} else {

								nextId = ""+getNextLabelId();

								// Add target ID into source collection
								utui[targetReference]['labels'][nextId] = $.extend({}, {
									color: mapItem.color,
									name: mapItem.name
								});

								// Record that ID so we can go back and resolve items that are mapped to that ID
								targetKeysReMap.push({ old_id: mapItem._source_id, new_id: nextId, color: mapItem.color, name: mapItem.name });
							}

						} else {

							// Record that ID so we can go back and resolve items that are mapped to that ID
							targetKeysReMap.push({ old_id: mapItem._source_id, new_id: mapItem._target_id, color: mapItem.color, name: mapItem.name });
						}
					};

					// Apply remapping of incoming source items within collection
					for(var key in confirmedCollection) {
						var stashItem = confirmedCollection[key];

						var targetItemObj = stashItem._target.obj;

						if(targetItemObj && !$.isEmptyObject(targetItemObj.labels)) {
							var labelValue = targetItemObj.labels;

							// if multiple labels are scoped, iterate one id at a time based on the remap keys
							if(~labelValue.indexOf(',')) {
								var labelArray = labelValue.split(',');

								for (var i = 0; i < labelArray.length; i++) {
									var id = labelArray[i];

									for (var j = 0; j < targetKeysReMap.length; j++) {
										remapObj = targetKeysReMap[j];

										if(id === remapObj.old_id) {
											labelArray[i] = remapObj.new_id;
											break;
										}
									};
								};

								confirmedCollection[key]['_target']['obj']['labels'] = labelArray.join(',');

							// if a single label is scoped and needs remapping, apply remap
							} else {

								for (var i = 0; i < targetKeysReMap.length; i++) {
									remapObj = targetKeysReMap[i];

									if(targetItemObj.labels === remapObj.old_id) {

										confirmedCollection[key]['_target']['obj']['labels'] = remapObj.new_id;
										break;
									}

								};
							}
						}
					};
				}

				return confirmedCollection;
			}


			// --------------------------------------------
			// Evaluate conflict selection
			function _runConflictPanelValidation() {
				var $inputCollection = $('#'+_namespace).find('input');
				var valueCollection = [];

				$inputCollection.each(function(e) {
					valueCollection.push($(this).val());
				});

				if(!~valueCollection.indexOf('unselected')) {
					$('#'+_namespace+'_nextBtn').off('click').on('click', _eventHandler.onConflictNextBtnClick).removeClass('ui-state-disabled');
				} else {
					$('#'+_namespace+'_nextBtn').off('click').addClass('ui-state-disabled');
				}
			}

			// --------------------------------------------
			function _getChangesCollection(collection, category) {
				if(category && !$.isEmptyObject(collection)) {
					return collection.filter(function(i) {
						return i.category === category;
					});
				}

				return collection;
			}

			// --------------------------------------------
			function _storeConflictSelectionState() {
				_conflictSelectionStates = {};

				// get conflict selection values
				$('#'+_namespace).find('input').each(function() {
					var subject = $(this).attr('data-subject');
					var id = $(this).attr('data-id');

					_conflictSelectionStates[subject + ':' + id] = $(this).val();
				});
			}

			// --------------------------------------------
			function _setConflictSelectionView() {
				for(var key in _conflictSelectionStates) {
					var subject = key.split(':')[0];
					var id = key.split(':')[1];
					var selection = _conflictSelectionStates[key];

					if(selection === 'discard') {
						_conflictTools.setTargetAsSelected(subject, id);
					} else if (selection === 'override') {
						_conflictTools.setSourceAsSelected(subject, id);
					}
				}
			}

			// --------------------------------------------
			function _getConflictsBetweenTwoCollections(collectionA, collectionB) {
				var conflictCollection = [],
					instanceA,
					instanceB;

				var ConflictObj = function(colAObj, colBObj) {
					this.id = colAObj.id;
					this.subject = colAObj.subject;
					this.category = colAObj.category;
					this._conflictA = colAObj;
					this._conflictB = colBObj;
				};

				var isExcludedFromConflict = function(instanceA, instanceB) {
					// if both instances have been removed, there's no conflict
					if(instanceA.category === 'removed' && instanceB.category === 'removed') {
						return true;
					}

					return false;
				};

				var isAddOnceExtensionConflict = function(instanceA, instanceB) {
					var isTypeExtension = (instanceA.subject === 'customizations' && instanceB.subject === 'customizations');
					var isAddedExtension = (instanceA.category === 'added' && instanceB.category === 'added');
					var templateA_id;
					var templateB_id;

					if(isTypeExtension && isAddedExtension) {
						templateA_id = +instanceA._target.obj.id;
						templateB_id = +instanceB._target.obj.id;

						if(templateA_id === templateB_id && exapi.isTemplateAddOnceOnly(templateB_id)) {
							return true;
						}
					}

					return false;
				};

				var isSameItem = function(instanceA, instanceB) {
					var isUpdatedItem = (instanceA.category === 'updated' && instanceB.category === 'updated');
					var x = '';

					if(isUpdatedItem) {
						var objA = instanceA._target.obj;
						var objB = instanceB._target.obj;

						return _helper.compareTwoObjects(objA, objB);
					}

					return false;
				};

				for (var i = 0; i < collectionA.length; i++) {
					instanceA = collectionA[i];

					for (var j = 0; j < collectionB.length; j++) {
						instanceB = collectionB[j];

						if(!isExcludedFromConflict(instanceA, instanceB)) {

							// Add to conflict if we touched the same subject and ID
							if(instanceA.subject === instanceB.subject && instanceA.id === instanceB.id) {

								// Make sure they're not the same exact change made!
								if(!isSameItem(instanceA, instanceB)) {
									conflictCollection.push( new ConflictObj(instanceA, instanceB) );
								}
							}
							// Add to conflict if an extension can be added only once (it doesn't matter what their ID is)
							else if(isAddOnceExtensionConflict(instanceA, instanceB)) {
								conflictCollection.push( new ConflictObj(instanceA, instanceB) );

							}
						}

					};
				};

				return conflictCollection;
			}

			// --------------------------------------------
			function renderResultRegions(collection, selectionType) {

				var getListOfRemovedItemsToUnselect = function(targetCollection, sourceCollection) {
					var currentRemovedIdCollection = [];
					var sourceRemovedObjectCollection = [];
					var unselectStack = [];
					var currentId;
					var temp;

					for (var i = 0; i < _subjectArray.length; i++) {
						subject = _subjectArray[i];

						// Check to see if we have removed items on both areas
						currentRemovedIdCollection = targetCollection.filter(function(obj) { return obj.category === 'removed' && obj.subject === subject }).map(function(obj) { return +obj.id });
						sourceRemovedObjectCollection = sourceCollection.filter(function(obj) { return obj.category === 'removed' && obj.subject === subject });

						// check if our removed changes are the same as their removed changes.  If so, unselect and disable.
						for (var j = 0; j < currentRemovedIdCollection.length; j++) {
							currentId = currentRemovedIdCollection[j];

							temp = sourceRemovedObjectCollection.filter(function(obj) { return +obj.id === currentId });

							if(temp.length) {
								unselectStack.push(subject + ':' + currentId);
							}
						};
					};

					return unselectStack;
				};

				var getListOfAddedItemsToUnselect = function(targetCollection, sourceCollection) {
					var sourceAddedIdCollection = [];
					var targetAddedIdCollection = [];
					var unselectStack = [];
					var sourceId;

					var isDataSourceExistInVersionData = function(type, name, mainDataObj) {
						var defineData = mainDataObj.define || {};

						for(var key in defineData) {
							var datasource = defineData[key];

							if(datasource.name === name && datasource.type === type) {
								return true;
							}
						}

						return false;
					}


					var subject = 'define';
					sourceAddedIdCollection = sourceCollection.filter(function(obj) { return obj.category === 'added' && obj.subject === 'define' });
					// targetAddedIdCollection = targetCollection.filter(function(obj) { return obj.category === 'added' && obj.subject === 'define' });

					// check if our removed changes are the same as their removed changes.  If so, unselect and disable.
					for (var j = 0; j < sourceAddedIdCollection.length; j++) {
						sourceId = sourceAddedIdCollection[j].id;
						sourceObj = sourceAddedIdCollection[j]._target.obj;

						// If source datasource exists in target already, mark as unchecked
						if(isDataSourceExistInVersionData(sourceObj.type, sourceObj.name, utui[_context.current.reference])) {
							unselectStack.push(subject + ':' + sourceId);
						}
					};

					return unselectStack;
				};

				// Get collections
				var addedCollection = _getChangesCollection(collection, 'added');
				var updatedCollection = _getChangesCollection(collection, 'updated');
				var removedCollection = _getChangesCollection(collection, 'removed');

				// inject CompositeViews
				$('#'+_namespace+'_addedRegion').find('.body').html( _viewModel.getChangesCollectionViewFromCollection(addedCollection, selectionType) );
				$('#'+_namespace+'_updatedRegion').find('.body').html( _viewModel.getChangesCollectionViewFromCollection(updatedCollection, selectionType) );
				$('#'+_namespace+'_removedRegion').find('.body').html( _viewModel.getChangesCollectionViewFromCollection(removedCollection, selectionType) );


				// Handle Selection Control
				if (selectionType === 'select') {
					var removedItemsToUnselectStack = getListOfRemovedItemsToUnselect(_currentChangesCollection, _sourceChangesCollection);
					var addedItemsToUnselectStack = getListOfAddedItemsToUnselect(_currentChangesCollection, _sourceChangesCollection);

					$('#'+_namespace).find('.instance-category-container').find('input[type="checkbox"]').each(function() {
						var $container = $(this).closest('.instance-category-container');
						var subject = $container.attr('data-subject');
						var id = $container.attr('data-id');

						if(~removedItemsToUnselectStack.indexOf(subject+':'+id)) {
							$(this).prop('checked',false).attr('disabled',true);
							$(this).closest('.instance-class').attr('title', localize.t('tiq.diff.merge_dialog.props.source_changes_already_exist', { target_version: _context.current.title }) ).tipsy({ gravity: 's' })
						}

						if(~addedItemsToUnselectStack.indexOf(subject+':'+id)) {
							$(this).prop('checked',false).attr('disabled',true);
							$(this).closest('.instance-class').attr('title', localize.t('tiq.diff.merge_dialog.props.source_changes_already_exist', { target_version: _context.current.title }) ).tipsy({ gravity: 's' })
						}
					});
				}

				// Bind
				$('#'+_namespace).find('.js-view-instance').off('click').on('click', _eventHandler.onInstancePreviewClick);
			}

			// --------------------------------------------
			function renderConflictRegions(collection) {
				var conflictRowCollection = '';
				var conflictA = {};
				var conflictB = {};

				var actionItemView = '';

				var sourceInstanceItemView = ''; // their changes
				var targetInstanceItemView = ''; // my changes

				// filter collection
				var filteredCollection = [];
				var uniqueCollectionCheck = [];
				var instanceUniqueKey = '';
				var conflictMessage = '';
				var selectedValue;
				var actionType;
				var conflictACategory;
				var conflictBCategory;
				var canBeSelected = true;

				// Checks to see if we should provide a selectable option, or prompt them with a message instead
				var isConflictTypeSelectable = function(instanceA, instanceB) {
					var isTypeExtension = (instanceA.subject === 'customizations' && instanceB.subject === 'customizations') ? true : false;
					var isAdded = (instanceA.category === 'added' && instanceB.category === 'added') ? true : false;
					var a_templateId;
					var b_templateId;

					// if this is an extension that already exists...
					if(isTypeExtension && isAdded) {
						a_templateId = +instanceA._target.obj.id;
						b_templateId = +instanceB._target.obj.id;

						if(a_templateId === b_templateId && exapi.isTemplateAddOnceOnly(b_templateId)) {
							return false;
						}
					}

					return true;
				};


				// Checks which merging mode we're on -- this will determine the action of add-once extensions
				var isConcurrentUser = function() {
					return _context.origin.reference === 'original_data';
				};

				// Constructs the prompted message based on the conflict
				var getConflictMessage = function(instance) {
					var msg = '';
					var changeTitle = '';
					var extName = '';

					if(instance.subject === 'customizations') {
						// Get extension name
						extName = utui.config.customizationList[instance._target.obj.id].title;

						if(isConcurrentUser()) {
							changeTitle = localize.t('tiq.diff.merge_on_save.current_single');
						} else {
							changeTitle = localize.t('tiq.diff.merge_on_versions.source_single');
						}

						// Capitalize first letter
						changeTitle = changeTitle[0].toUpperCase() + changeTitle.substr(1);

						msg = '<i class="icon-warning-sign"></i> '+localize.t('tiq.diff.merge_dialog.conflict.add_once', { change_title: changeTitle, extension_title: extName });
					}

					return msg;
				};

				// Construct unique keys to persist selection before / during / after resolving conflicts
				for (var i = 0; i < collection.length; i++) {
					var instance = collection[i];

					instanceUniqueKey = instance.subject+':'+instance.id+':'+instance.category;

					if(!~uniqueCollectionCheck.indexOf(instanceUniqueKey) ) {
						uniqueCollectionCheck.push(instanceUniqueKey);

						filteredCollection.push(instance);
					}
				};

				// Once collection is filtered, re-assign collection back
				collection = filteredCollection;

				// Clear up queue
				_toBeAutoDiscarded = [];

				// Loop through collection
				for (var i = 0; i < collection.length; i++) {
					conflictA = collection[i]._conflictA;
					conflictB = collection[i]._conflictB;

					targetInstanceItemView = '';
					sourceInstanceItemView = '';
					conflictMessage = '';

					// If not selectable, assign element to be discarded.  If selectable, assign cached selection.
					if(!isConflictTypeSelectable(conflictA, conflictB)) {

						// Based on the mode we're on, if the merge mode is concurrent user then your changes will be discarded.
						// Otherwise, existing changes get discarded.
						if(isConcurrentUser()) {
							selectedValue = 'override';
							conflictMessage = _viewModel.getMessageItemView(getConflictMessage(conflictA));

							// Set your change to be discarded if you've added
							if(conflictA.category === 'added') {
								_toBeAutoDiscarded.push({
									id : conflictA.id,
									category : conflictA.category,
									subject : conflictA.subject,
									ref : 'target'
								});
							}
						} else {
							selectedValue = 'discard';
							conflictMessage = _viewModel.getMessageItemView(getConflictMessage(conflictA));
						}

						canBeSelected = false;

					} else {
						actionItemView = '';
						selectedValue = _conflictSelectionStates[conflictA.subject + ':' + conflictA.id] || 'unselected';
						canBeSelected = true;
					}

					sourceInstanceItemView += _view.instanceItemView({
						source_reference: 				conflictA._source.reference,
						target_reference: 				conflictA._target.reference,
						subject: 						conflictA.subject,
						title: 							_util.getTitleByChangeInstanceObj(conflictA),
						name: 							_util.getNameByChangeInstanceObj(conflictA),
						id: 							conflictA.id,
						category_name: 					conflictA.category,
						conflict_is_selectable: 		canBeSelected,
						item_origin: 					'current',
						conflict_user_selected_state: 	selectedValue
					}, true);

					targetInstanceItemView += _view.instanceItemView({
						source_reference: 				conflictB._source.reference,
						target_reference: 				conflictB._target.reference,
						subject: 						conflictB.subject,
						title: 							_util.getTitleByChangeInstanceObj(conflictB),
						name: 							_util.getNameByChangeInstanceObj(conflictB),
						id: 							conflictB.id,
						category_name: 					conflictB.category,
						conflict_is_selectable: 		canBeSelected,
						item_origin: 					'source',
						conflict_user_selected_state: 	selectedValue
					}, true);

					if(isConcurrentUser()) {
						sourceInstanceItemView += conflictMessage;
					} else {
						targetInstanceItemView += conflictMessage;
					}

					conflictRowCollection += _view.resolveConflictItemView(sourceInstanceItemView, '', targetInstanceItemView, conflictA.subject, conflictA.id);

				};

				$('#'+_namespace+'_conflictRegion').find('.body').html(conflictRowCollection);

				// Bind
				$('#'+_namespace).find('.js-view-instance').off('click').on('click', _eventHandler.onInstancePreviewClick);
				$('#'+_namespace).find('.js-instance-composite-container[data-state="current"]').find('.instance-button').on('click', _eventHandler.onInstanceConflictCurrentClick);
				$('#'+_namespace).find('.js-instance-composite-container[data-state="source"]').find('.instance-button').on('click', _eventHandler.onInstanceConflictSourceClick);

				_storeConflictSelectionState();

				_setConflictSelectionView();
			}

			// --------------------------------------------
			function render() {
				_render.modelBody();

				// Render imported changes
				_viewModel.renderSourceChangesPanel();

				utui.ui.dialog.adjustPanelHeights(_namespace);

				// Enable accordion bindings
				utui.ui.enableAccordionElements(_namespace);
			}

			// --------------------------------------------
			function init() {
				// Title
				var title = localize.t('tiq.diff.merge_dialog.title');

				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.diff.merge_dialog.buttons.merge'),
						id: _namespace+'_mergeBtn',
						click: _eventHandler.onMergeBtnClick,
						style: 'float:right; margin-right: 12px'
					},
					{
						text: localize.t('tiq.diff.merge_dialog.buttons.next'),
						id: _namespace+'_nextBtn',
						click: _eventHandler.onNextBtnClick,
						style: 'float:right; margin-right: 12px'
					},
					{
						text: localize.t('tiq.diff.merge_dialog.buttons.back'),
						id: _namespace+'_backBtn',
						click: _eventHandler.onBackBtnClick,
						style: 'float:right; margin-right: 12px'
					},
					{
						text: localize.t('tiq.diff.merge_dialog.buttons.cancel'),
						id: _namespace+'_closeBtn',
						click: _eventHandler.onCloseBtnClick,
						style: 'float:left; margin-left: 12px'
					}
				];

				// Show the dialog
				utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width:900, height:624, dialogClass:'no-close' }, _eventHandler.onCloseBtnClick);
			}

			// --------------------------------------------
			var _public = {
				// --------------------------------------------
				getView: function() {
					return _view.generalPanelLayout();
				},
				// --------------------------------------------
				show: function(namespace, contextObj) {
					var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;

					_context = contextObj;

					_clearSelection();

					_namespace = namespace + '_dialog';
					_currentChangesCollection = diffapi.getStash(profileKey, 'current');
					_sourceChangesCollection = diffapi.getStash(profileKey, 'source');

					init();
					render();
				}
			};

			return _public;
		}(),
		// --------------------------------------------
		comparison: function() {
			// --------------------------------------------
			var _dialogNamespace = "comparison_dialog",
				_isConflictMode = false,
				_subject,
				_context,
				_category,
				_id,
				_sourceObj,
				_targetObj,
				_secondId;

			// ------------------------------------
			var _render = {
				// ------------------------------------
				modalHead: function() {},
				// ------------------------------------
				modalBody: function() {
					$('#'+_dialogNamespace).find('.modal-body').html( _templateAccordion );
				}
			};

			// --------------------------------------------
			var _view = {
				compareHeaderItemView: function(sourceValue, targetValue) {
					var original = _isConflictMode ? _context.current.title : localize.t('tiq.diff.comparison_dialog.before');
					var changesMade = _isConflictMode ? _context.source.title : localize.t('tiq.diff.comparison_dialog.after');

					var v = '';
						v += '<div class="row-fluid">';
							v += '<div class="span6">';
								v += '<h2 style="text-align:center; margin-top: 24px; text-transform: capitalize;">'+original+'</h2>';
							v += '</div>';
							v += '<div class="span6">';
								v += '<h2 style="text-align:center; margin-top: 24px; text-transform: capitalize;">'+changesMade+'</h2>';
							v += '</div>';
						v += '</div>';
					return v;
				},
				compareBodyPanel: function(sourceValue, targetValue) {
					var v = '';
						v += '<div class="container-fluid">';
							v += '<div class="row-fluid">';
								v += '<div class="span6">';
									v += '<div id="sourceSide"></div>';
								v += '</div>';
								v += '<div class="span6">';
									v += '<div id="targetSide"></div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';
					return v;
				},
				// --------------------------------------------
				comparisonRowItemView: function(sourceValue, targetValue) {
					var v = '';
						v += '<div class="row-fluid">';
							v += '<div class="span6">';
								v += sourceValue;
							v += '</div>';
							v += '<div class="span6">';
								v += targetValue;
							v += '</div>';
						v += '</div>';
					return v;
				}
			}
			// --------------------------------------------
			var _viewModel = {
				// ------------------------------------
				applyHighlightingOverlay: function() {
					var sourceArr = [];
					var targetArr = [];
					var sourceObj = {};
					var targetObj = {};
					var obj = {};
					var key, value;

					var _highlight = function(key, className) {
						$('#sourceSide').find('span[data-key='+key+']').find('.value').addClass(className);
						$('#targetSide').find('span[data-key='+key+']').find('.value').addClass(className);
					};

					// Store all fields and values in hash

					$('#sourceSide').find('span[data-key]').each(function() {
						key = $(this).attr('data-key');
						value = $(this).find('.value').text();

						obj = $.extend({}, {
							key : key,
							value : value
						});

						sourceObj[key] = value;
						sourceArr.push(obj);
					});

					$('#targetSide').find('span[data-key]').each(function() {
						key = $(this).attr('data-key');
						value = $(this).find('.value').text();

						obj = $.extend({}, {
							key : key,
							value : value
						});

						targetObj[key] = value;
						targetArr.push(obj);
					});

					for(var key in sourceObj) {
						sourceValue = sourceObj[key];

						if(!targetObj.hasOwnProperty(key)) {
							if(_isConflictMode) {
								_highlight(key, 'bg-warning');
							} else {
								_highlight(key, 'bg-danger');
							}
						} else {
							targetValue = targetObj[key];

							if(sourceValue === targetValue) {
								// do nothing
							} else {
								_highlight(key, 'bg-warning');
							}
						}
					};

					for(var key in targetObj) {
						targetValue = targetObj[key];

						if(!sourceObj.hasOwnProperty(key)) {
							if(_isConflictMode) {
								_highlight(key, 'bg-warning');
							} else {
								_highlight(key, 'bg-success');
							}
						} else {
							sourceValue = sourceObj[key];

							if(targetValue === sourceValue) {
								// do nothing
							} else {
								_highlight(key, 'bg-warning');
							}
						}
					};

				},
				// ------------------------------------
				renderSubjectView: function(_subject) {
					var content = '',
						sourceObj,
						targetObj,
						templateId,
						changeCollection,
						sourceView = '',
						targetView = '',
						sideBySideAlternativeView = '',
						sideBySideView = '',
						isEmpty = $.isEmptyObject,
						secondId = _secondId || _id;

					sourceObj = _sourceObj[_subject][_id];
					targetObj = _targetObj[_subject][secondId];

					function diffItemNoView() {
						var v = '';

						v += '<div style="background: #eee; height: 100px; text-align: center; position: relative; font-size: 14px; color: #999; padding-top: 76px;">';
							v += localize.t('tiq.diff.comparison_dialog.no_instance');
						v += '</div>';

						return v;
					}

					function getReadOnlyView(obj, mainDataObj, subject) {
						if(isEmpty(obj)) return diffItemNoView();

						var v = '';

						switch(subject) {
							case 'customizations':
								v += utui.customizations_template.shared.getReadOnlyView(obj, mainDataObj, true);
								return v;
							case 'define':
									v += utui.define.getReadOnlyPropertiesView(obj, mainDataObj);
								return v;
							case 'loadrules':
									v += utui.loadrules.view.getReadOnlyPropertiesView(obj, mainDataObj);
									v += utui.loadrules.view.getReadOnlyConditionsView(obj);
								return v;
							case 'manage':
									v += utui.manage.getReadOnlyPropertiesView(obj, mainDataObj);
									v += utui.manage.getReadOnlyConfigurationView(obj);
									v += utui.manage.getReadOnlyMappedDataSourcesView(obj);
									v += utui.manage.getReadOnlyRulesView(obj);
									v += utui.manage.getReadOnlyAdvancedConfigurationView(obj);
									v += utui.manage.getReadOnlyPublishView(obj);
								return v;
						}

						return v;
					}

					switch(_subject) {
						case 'customizations':

							// fetch template ID
							if(!isEmpty(sourceObj)) {
								templateId = sourceObj.id;
							}
							if(!isEmpty(targetObj)) {
								templateId = targetObj.id;
							}

							// Get READ ONLY Show View
							// ---------------------
							sourceView = getReadOnlyView(sourceObj, _sourceObj, _subject);
							targetView = getReadOnlyView(targetObj, _targetObj, _subject);

							// Inject panels in tabs
							// ---------------------
							$('#sourceSide').html( sourceView );
							$('#targetSide').html( targetView );

							// Render READ ONLY Side-by-side View
							// ---------------------
							if(!isEmpty(sourceObj)) {
								utui.customizations_template.shared.populateReadOnlyView(sourceObj, 'sourceSide');
							}
							if(!isEmpty(targetObj)) {
								utui.customizations_template.shared.populateReadOnlyView(targetObj, 'targetSide');
							}

							_viewModel.applyHighlightingOverlay();

							break;
						case 'define':
						case 'loadrules':
						case 'manage':

							// Get READ ONLY Show View
							// ---------------------
							sourceView = getReadOnlyView(sourceObj, _sourceObj, _subject);
							targetView = getReadOnlyView(targetObj, _targetObj, _subject);

							// Inject panels in tabs
							// ---------------------
							$('#sourceSide').html( sourceView ); // Your Changes
							$('#targetSide').html( targetView ); // Previous Changes

							// Render READ ONLY Side-by-side View
							// ---------------------
							_viewModel.applyHighlightingOverlay();
							break;
					}
				}

			};

			// --------------------------------------------
			var _bindUI = {};

			// --------------------------------------------
			var _eventHandler = {
				// --------------------------------------------
				onCloseBtnClick: function(e) {
					utui.ui.dialog.dispose(_dialogNamespace);
				}
			};

			// --------------------------------------------
			function render() {
				// Panel rendering
				_render.modalHead();
				_render.modalBody();

				$('#'+_dialogNamespace).find('.main-header').append( _view.compareHeaderItemView() );
				$('#'+_dialogNamespace).find('.main-body').append( _view.compareBodyPanel() );

				// Render based on Subject
				_viewModel.renderSubjectView(_subject);

				utui.ui.dialog.adjustPanelHeights(_dialogNamespace);
			}

			function init() {

				var getSubjectFormattedName = function(subject) {
					switch(subject) {
						case 'customizations':
							return localize.t('tiq.diff.comparison_dialog.type.extension');
						case 'define':
							return localize.t('tiq.diff.comparison_dialog.type.datasource');
						case 'loadrules':
							return localize.t('tiq.diff.comparison_dialog.type.loadrule');
						case 'manage':
							return localize.t('tiq.diff.comparison_dialog.type.tag');
					}
				};

				// Title
				var title = 'Comparison for '+getSubjectFormattedName(_subject)+' #'+_id;

				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.diff.comparison_dialog.buttons.close'),
						id: _dialogNamespace+'_closeBtn',
						click: _eventHandler.onCloseBtnClick,
						style: 'float:right; margin-right: 12px'
					}
				];

				// Show the dialog
				utui.ui.dialog.show(_dialogNamespace, title, buttons, _templateModal, { width:880, height:524 }, _eventHandler.onCloseBtnClick);
			}

			return {
				show: function(category, subject, id, sourceData, targetData, contextObj, isConflictMode, secondId) {
					_category = category;
					_subject = subject;
					_id = id;
					_sourceObj = sourceData;
					_targetObj = targetData;
					_context = contextObj;
					_isConflictMode = isConflictMode;
					_secondId = secondId;

					init();
					render();
				}
			}
		}(),
		// --------------------------------------------
		discardConfirm: function() {
			// ---------------------------------------------
			var _namespace = 'confirmDiscardChanges_dialog',
				_$template = utui.ui.dialog.body(),
				_subject = '';

			// ---------------------------------------------
			var _view = {
				// ------------------------------------
				mainContent: function() {
					var v = '';

						v += '<div id="'+_namespace+'_description">';
							v += '<div class="section-padded">';
								v += '<div class="dialog-icon-container">';
									v += '<i class="icon-warning-sign" style="color:orange;"></i>';
								v += '</div>';
								v += '<div class="dialog-description">';
									v += '<h2>'+localize.t('tiq.diff.discard_confirm.title')+'</h2>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				}
			}

			// ------------------------------------
			var _eventHandlers = {
				onExitBtnClick: function(e) {
					// remove stashed results
					var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;
					diffapi.removeStash(profileKey);

					utui.ui.dialog.dispose('merge_dialog');
					utui.ui.dialog.dispose(_namespace);
				},
				// ------------------------------------
				onCancelBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.mainContent());
				}
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				show: function(subject) {
					_subject = subject;

					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.diff.discard_confirm.buttons.exit'),
							id: _namespace+'_exitBtn',
							click: _eventHandlers.onExitBtnClick
						},
						{
							text: localize.t('tiq.diff.discard_confirm.buttons.go_back'),
							id: _namespace+'_cancelBtn',
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					utui.ui.dialog.show(_namespace, localize.t('tiq.diff.discard_confirm.dialog_title'), buttons, _$template, { width: 360, height: 210 }, _eventHandlers.onCancelBtnClick);
				}
			}

			return _public;
		}(),
		// --------------------------------------------
		saveOptions: function() {
			// ------------------------------------
			var _namespace = 'saveOptions_dialog',
				_$template = utui.ui.dialog.body(),
				_templateModal = utui.ui.template.modal(),
				_selection,
				_container;

			// ------------------------------------
			var _view = {
				mainContent: function() {

					var mostRecentEventHtmlDiv = utui.sharedSessionManager.ui.formatEventData(utui.data.publish_history,
																							utui.sharedSessionManager._latestVersionObj.version,
																							utui.sharedSessionManager._latestVersionObj.revision);
					var v = '';
						v += '<div class="container-fluid">';
							v += '<div class="row-fluid">';
								v += '<div class="span12">';
									v += '<div id="'+_namespace+'_options">';
										v += '<h2 style="margin-top:24px; margin-bottom:24px;">'+localize.t('tiq.diff.reload_confirm.title')+'</h2>';
										v += '<div style="margin-bottom:15px;max-height:250px;overflow:auto;">' + mostRecentEventHtmlDiv + '</div>';
										v += '<div>';
											v += '<div class="control-group" style="padding-left: 24px;">';
												v += '<input type="radio" value="continue" name="reload-options" id="option_reload" checked="checked"> ';
												v += '<label for="option_reload">';
													v += '<strong>'+localize.t('tiq.diff.reload_confirm.option.1.title')+'</strong><br>';
													v += '<span class="desc" style="margin-left: 24px; display: block; margin-bottom: 8px; color: #888;">'+localize.t('tiq.diff.reload_confirm.option.1.description')+'</span>';
												v += '</label>';
											v += '</div>';
											v += '<div class="control-group" style="padding-left: 24px;">';
												v += '<input type="radio" value="saveas" name="reload-options" id="option_saveas"> ';
												v += '<label for="option_saveas">';
													v += '<strong>'+localize.t('tiq.diff.reload_confirm.option.2.title')+'</strong><br>';
													v += '<span class="desc" style="margin-left: 24px; display: block; margin-bottom: 8px; color: #888;">'+localize.t('tiq.diff.reload_confirm.option.2.description')+'</span>';
												v += '</label>';
											v += '</div>';
										v += '</div>';
									v += '</div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				},
				footerContent: function() {
					var v = '';
						v += '<i class="icon-info-sign" style="font-size: 16px; position: relative; top: 2px; color: #85B3E3;"></i> <a href="#" onclick=\"utui.help.openCommunityLink(\'' + common.community.merging_changes_between_concurrent_users + '\'); return false;\">'+localize.t('tiq.diff.reload_confirm.learn_more_about_merge')+'</a>';
					return v;
				}
			}

			function _bindSelection() {
				$('#'+_namespace+'_options').find('input').safeBind('click', function() {
					if(this.checked) {
						_selection = $(this).val();
					}

					if(_selection === 'continue') {
						$('#'+_namespace+'_continueBtn').find('.ui-button-text').text(localize.t('tiq.diff.reload_confirm.buttons.continue_merge'));
					}

					if(_selection === 'saveas') {
						$('#'+_namespace+'_continueBtn').find('.ui-button-text').text(localize.t('tiq.diff.reload_confirm.buttons.continue_saveas'));
					}
				});
			}

			// ------------------------------------
			var _eventHandlers = {
				// ------------------------------------
				onContinueBtnClick: function(e) {
					if(_selection === 'continue') {
						utui.ui.dialog.dispose(_namespace);

						// Fetch the latest revision
						utui.profile.getProfile(null, {r: "getProfile", account: utui.login.account, profile: utui.login.profile, revision: utui.sharedSessionManager._latestVersionObj.version }, _request.onGetProfileCallbackSuccess);
						return;
					}

					if(_selection === 'saveas') {
						utui.ui.dialog.dispose(_namespace);
						utui.profile.publishChoiceLabel = utui.config.tabList.publish.saveas;
						utui.publish.showSaveDialog().initialize();
						return;
					}

					return;
				},
				// ------------------------------------
				onCancelBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					$('#'+_namespace).find('.modal-body').html(_view.mainContent());
				},
				// **
				footer: function() {
					$('#'+_namespace).find('.modal-footer').html(_view.footerContent()).css({
						'position': 'absolute',
						'bottom': '0px',
						'line-height': '24px',
						'padding': '4px 18px'
					});
				}
			}

			// ------------------------------------
			function init() {
				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.diff.reload_confirm.buttons.continue_merge'),
						id: _namespace+'_continueBtn',
						click: _eventHandlers.onContinueBtnClick
					},
					{
						text: localize.t('tiq.diff.reload_confirm.buttons.cancel'),
						id: _namespace+'_cancelBtn',
						click: _eventHandlers.onCancelBtnClick,
						style: 'float:left; margin-left: 12px'
					}
				];

				utui.ui.dialog.show(_namespace, localize.t('tiq.diff.reload_confirm.dialog_title'), buttons, _templateModal, { width: 480, height: 550 }, _eventHandlers.onCancelBtnClick);
			}

			// ------------------------------------
			function render() {
				_render.content();
				_render.footer();

				// set default
				_selection = 'continue';

				utui.ui.dialog.adjustPanelHeights(_namespace);

				_bindSelection();
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				show: function(container) {
					_container = container;

					init();
					render();
				}
			}

			return _public;
		}(),
		// --------------------------------------------
		privacyManagerDetected: function() {
			// ------------------------------------
			var _namespace = 'privacyManagerDetection_dialog',
				_$template = utui.ui.dialog.body(),
				_container;

			// ------------------------------------
			var _view = {
				mainContent: function() {
					var v = '';

						v += '<div id="'+_namespace+'_description">';
							v += '<div class="section-padded">';
								v += '<div class="dialog-icon-container">';
									v += '<i class="icon-warning-sign" style="color:orange;"></i>';
								v += '</div>';
								v += '<div>';
									v += '<h2>'+localize.t('tiq.diff.privacy_manager_dialog.title')+'</h2>';
									v += '<p>'+localize.t('tiq.diff.privacy_manager_dialog.context')+'</p>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				}
			}

			// ------------------------------------
			var _eventHandlers = {
				onCloseBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.mainContent());
				}
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				show: function(container) {
					_container = container;
					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.diff.privacy_manager_dialog.buttons.got_it'),
							id: _namespace+'_closeBtn',
							click: _eventHandlers.onCloseBtnClick
						}
					];

					utui.ui.dialog.show(_namespace, localize.t('tiq.diff.privacy_manager_dialog.title'), buttons, _$template, { width: 480, height: 180 }, _eventHandlers.onCloseBtnClick);
				}
			}

			return _public;
		}(),
		// --------------------------------------------
		cannotMergeNotQualified: function() {
			// ------------------------------------
			var _namespace = 'mergeNotQualified_dialog',
				_$template = utui.ui.dialog.body(),
				_templateModal = utui.ui.template.modal(),
				_reportObj = {},
				_isOnSave = false;

			var mergeQualification = {
				hasLibrary: false,
				hasLabelsPermission: false,
				hasJavascriptExt: false,
				hasJavascriptExtPermission: false
			};

			var errorStr = {
				extension_js_unauthorized_title: localize.t('tiq.diff.unqualified_dialog.errors.extension_js_unauthorized_title'),
				extension_js_unauthorized_description: localize.t('tiq.diff.unqualified_dialog.errors.extension_js_unauthorized_description'),

				label_unauthorized_title: localize.t('tiq.diff.unqualified_dialog.errors.label_unauthorized_title'),
				label_unauthorized_description: localize.t('tiq.diff.unqualified_dialog.errors.label_unauthorized_description'),

				label_permission_unauthorized_title: localize.t('tiq.diff.unqualified_dialog.errors.label_permission_unauthorized_title'),
				label_permission_unauthorized_description: localize.t('tiq.diff.unqualified_dialog.errors.label_permission_unauthorized_description'),

				label_incoming_missing_locks_title: localize.t('tiq.diff.unqualified_dialog.errors.label_incoming_missing_locks_title'),
				label_incoming_missing_locks_description: localize.t('tiq.diff.unqualified_dialog.errors.label_incoming_missing_locks_description'),

				library_current_linked_title: localize.t('tiq.diff.unqualified_dialog.errors.library_current_linked_title'),
				library_current_linked_description: localize.t('tiq.diff.unqualified_dialog.errors.library_current_linked_description'),

				library_incoming_exists_title: localize.t('tiq.diff.unqualified_dialog.errors.library_incoming_exists_title'),
				library_incoming_exists_description: localize.t('tiq.diff.unqualified_dialog.errors.library_incoming_exists_description'),

			}

			// ------------------------------------
			var _view = {
				mainContent: function() {
					var v = '';

						v += '<div id="'+_namespace+'_description">';
							v += '<div class="section-padded">';
								v += '<div class="dialog-icon-container">';
									v += '<i class="icon-warning-sign" style="color:orange;"></i>';
								v += '</div>';
								v += '<div>';
									v += '<h2>'+localize.t('tiq.diff.unqualified_dialog.title')+'</h2>';
									v += '<p>'+localize.t('tiq.diff.unqualified_dialog.context')+'</p>';
									v += '<ol class="js-qualification-list"></ol>';
									if(_isOnSave) {
										v += '<p>'+localize.t('tiq.diff.unqualified_dialog.on_save_context')+'</p>';
									}
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				},
				reportCollectionView: function(content) {
					var v = '';

						v += '<div>'+content+'</div>';

					return v;
				},
				reportItemView: function(title, description) {
					var v = '';

						v += '<li class="item">';
							v += '<div class="item-title"><strong>'+title+'</strong></div>';
							v += '<div class="item-description">'+description+'</div>';
						v += '</li>';

					return v;
				},
				footerContent: function() {
					var v = '';
						v += '<i class="icon-info-sign" style="font-size: 16px; position: relative; top: 2px; color: #85B3E3;"></i> <a href="#" onclick=\"utui.help.openCommunityLink(\'' + common.community.merging_changes_between_concurrent_users + '\'); return false;">'+localize.t('tiq.diff.unqualified_dialog.troubleshoot_merge')+'</a>';
					return v;
				}
			};

			// ------------------------------------
			var _viewModel = {
				renderReport: function(results) {
					var v = '';

					// -----
					if(~results.indexOf(_reloadErrorCodeMap.LIBRARY_CURRENT_LINKED)) {
						v += _view.reportItemView(errorStr.library_current_linked_title, errorStr.library_current_linked_description);

					} else if(~results.indexOf(_reloadErrorCodeMap.LIBRARY_INCOMING_EXISTS)) {
						v += _view.reportItemView(errorStr.library_incoming_exists_title, errorStr.library_incoming_exists_description);
					}

					// -----
					if(~results.indexOf(_reloadErrorCodeMap.JS_EXTENSION_UNAUTHORIZED)) {
						v += _view.reportItemView(errorStr.extension_js_unauthorized_title, errorStr.extension_js_unauthorized_description);
					}

					// -----
					if(~results.indexOf(_reloadErrorCodeMap.LABEL_PERMISSION_UNAUTHORIZED)) {
						v += _view.reportItemView(errorStr.label_permission_unauthorized_title, errorStr.label_permission_unauthorized_description);

					} else if(~results.indexOf(_reloadErrorCodeMap.LABEL_UNAUTHORIZED)) {
						v += _view.reportItemView(errorStr.label_unauthorized_title, errorStr.label_unauthorized_description);
					}

					// -----
					if(~results.indexOf(_reloadErrorCodeMap.LABEL_INCOMING_HAS_MISSING_LOCKS)) {
						v += _view.reportItemView(errorStr.label_incoming_missing_locks_title, errorStr.label_incoming_missing_locks_description);
					}

					$('#'+_namespace).find('.js-qualification-list').html(v);
				}
			};

			// ------------------------------------
			var _eventHandlers = {
				onCloseBtnClick: function(e) {
					utui.util.loadingModalStop();
					utui.ui.dialog.dispose(_namespace);

				},
				onSaveBtnClick: function(e) {
					utui.util.loadingModalStop();

					utui.profile.publishChoiceLabel = utui.config.tabList.publish.saveas;
					utui.publish.showSaveDialog().initialize();

					utui.ui.dialog.dispose(_namespace);
				}
			};

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					// _$template.find('.dialog-content-body').html(_view.mainContent());
					$('#'+_namespace).find('.modal-body').html(_view.mainContent());
				},
				// **
				footer: function() {
					$('#'+_namespace).find('.modal-footer').html(_view.footerContent()).css({
						'position': 'absolute',
						'bottom': '0px',
						'line-height': '24px',
						'padding': '4px 18px'
					});
				}
			};

			function init() {
				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.diff.unqualified_dialog.buttons.save_as'),
						id: _namespace+'_saveBtn',
						click: _eventHandlers.onSaveBtnClick,
						style: 'float:right; margin-right: 12px'
					},
					{
						text: localize.t('tiq.diff.unqualified_dialog.buttons.got_it'),
						id: _namespace+'_OkBtn',
						click: _eventHandlers.onCloseBtnClick,
						style: 'float:right; margin-right: 12px'
					},
					{
						text: localize.t('tiq.diff.unqualified_dialog.buttons.cancel'),
						id: _namespace+'_closeBtn',
						click: _eventHandlers.onCloseBtnClick,
						style: 'float:left; margin-left: 12px'
					}
				];

				utui.ui.dialog.show(_namespace, localize.t('tiq.diff.unqualified_dialog.title'), buttons, _templateModal, { width: 540, height:400 }, _eventHandlers.onCloseBtnClick);
			}

			function render() {
				_render.content();
				_render.footer();
				_viewModel.renderReport(_reportObj);

				if(_isOnSave) {
					$('#'+_namespace+'_saveBtn').show();
					$('#'+_namespace+'_okBtn').hide();
				} else {
					$('#'+_namespace+'_okBtn').show();
					$('#'+_namespace+'_saveBtn').hide();
				}
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				show: function(reportObj, isOnSave) {
					_reportObj = reportObj || [];
					_isOnSave = isOnSave;

					init();
					render();
				}
			};

			return _public;
		}()
	};



	// --------------------------------------------
	function _isValidIncomingVersion(data, labelData) {
		var errorStack = [];

		var checkPermissionAccessExistsInResourceLock = function(data) {
			var securityListArray = [];
			var hasError = false;

			var checkSecurityList = function(securityListArray) {
				// if you're not assigned to the label
				if(!~securityListArray.indexOf(utui.login.email)) {
					errorStack.push(_reloadErrorCodeMap.LABEL_UNAUTHORIZED);
					hasError = true;
				}

				// If you do not have general permissions to add/edit resource locks
				if(!utui.permissions.canManageSecureLabels()) {
					errorStack.push(_reloadErrorCodeMap.LABEL_PERMISSION_UNAUTHORIZED);
					hasError = true;
				}
			};

			if(!$.isEmptyObject(labelData)) {
				for(var key in labelData) {

					if(key === 'labels') {
						var labelCollection = labelData[key];

					    for(var i in labelCollection) {
							if(labelCollection[i].hasOwnProperty('security_list')) {
								checkSecurityList(labelCollection[i]['security_list']);
							}
					    };
					} else {
						if(labelData[key].hasOwnProperty('security_list')) {
							checkSecurityList(labelData[key]['security_list']);
						}
					}

				}
			}


			return hasError;
		};

		var checkPermissionJavascriptExtension = function(data) {
			var canEditJavascriptExtensions = utui.permissions.canEditJavascriptExtensions();
			var hasError = false;
			var extData;

			if(!$.isEmptyObject(data.customizations)) {
				extData = data.customizations;

				for(var key in extData) {
					if(extData[key].hasOwnProperty('id')) {
						templateId = extData[key]['id'];

						if(+templateId === 100011 && !canEditJavascriptExtensions) {
							errorStack.push(_reloadErrorCodeMap.JS_EXTENSION_UNAUTHORIZED);
							return false;
						}
					}
				}
			}

			return true;
		};

		var checkIfResourceLockIsMergable = function(data) {
			var currentLabelCollection = utui.diff.merge.getLabelsData(utui.data.settings.revision);
			var incomingLabelCollection = utui.diff.merge.getLabelsData(data.revision);
			var currentPermissions = [];
			var incomingPermissions = [];
			var hasError = false;
			var securityListCurrentArray;
			var securityListIncomingArray;
			var name;


			for(var id in currentLabelCollection) {
				if(currentLabelCollection[id].hasOwnProperty('security_list')) {
					securityListCurrentArray = currentLabelCollection[id]['security_list'];
					name = currentLabelCollection[id].name;

					// if you're assigned to the label, add it to the stack
					if(~securityListCurrentArray.indexOf(utui.login.email)) {
						currentPermissions.push(name+'_'+utui.login.email);
					}
				}
			};

			for(var id in incomingLabelCollection) {
				if(incomingLabelCollection[id].hasOwnProperty('security_list')) {
					securityListIncomingArray = incomingLabelCollection[id]['security_list'];
					name = incomingLabelCollection[id].name;

					// if you're assigned to the label, add it to the stack
					if(~securityListIncomingArray.indexOf(utui.login.email)) {
						incomingPermissions.push(name+'_'+utui.login.email);
					}
				}
			};

			// Check if incoming permissions exist in current permissions
			for (var i = 0; i < incomingPermissions.length; i++) {
				var permissionName = incomingPermissions[i];

				if(!~currentPermissions.indexOf(permissionName)) {
					errorStack.push(_reloadErrorCodeMap.LABEL_INCOMING_HAS_MISSING_LOCKS);
				}
			};

			return hasError;
		};

		var checkIfIncomingHasLinkedLibrary = function(data) {
			var item;
			var subject;
			var subjectData;

			for (var i = 0; i < _subjectArray.length; i++) {
				subject = _subjectArray[i];
				subjectData = data[subject];

				for(var id in subjectData) {
					if(!subjectData.hasOwnProperty(id)) continue;

					item = subjectData[id];

					if(!$.isEmptyObject(item.imported) && item.imported !== "null") {
						if(item.imported !== 'AudienceStream') {
							errorStack.push(_reloadErrorCodeMap.LIBRARY_INCOMING_EXISTS);
						}
						return true;
					}
				};
			};

			return false;
		};

		var checkIfCurrentHasLinkedLibrary = function(data) {
			var item;
			var subject;
			var subjectData;

			for (var i = 0; i < _subjectArray.length; i++) {
				subject = _subjectArray[i];
				subjectData = data[subject];

				for(var id in subjectData) {
					if(!subjectData.hasOwnProperty(id)) continue;

					item = subjectData[id];

					if(!$.isEmptyObject(item.imported) && item.imported !== "null") {
						if(item.imported !== 'AudienceStream') {
							errorStack.push(_reloadErrorCodeMap.LIBRARY_CURRENT_LINKED);
						}
						return true;
					}
				};
			};

			return false;
		};

		checkPermissionAccessExistsInResourceLock();
		checkPermissionJavascriptExtension(data);
		checkIfResourceLockIsMergable(data);
		checkIfIncomingHasLinkedLibrary(data);
		checkIfCurrentHasLinkedLibrary(utui.data);

		return errorStack;
	}


	// --------------------------------------------
	function _onProfileLoad() {
		var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;

		if(diffapi.isStashed(profileKey)) {
			utui.diff.merge.onSave();
		}

		// Reset temp storage
		_tempStorage = $.extend({}, {
			customizations: {},
			define: {},
			loadrules: {},
			manage: {}
		});

		// CS ToDo : May need to create replacement logic that updates the merge history 
		// utui.profile.resetPostMergeState();
		// utui.util.pubsub.subscribe(utui.constants.profile.LATEST_VERSION_CHANGED, utui.profile.resetPostMergeState);
	}

	utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _onProfileLoad, this);


	// --------------------------------------------
	var _public = {
		// --------------------------------------------
		merge: {
			// --------------------------------------------
			onSave: function() {
				_dialog.mergeWizard.show('merge', {
					current: {
						title: localize.t('tiq.diff.merge_on_save.current'),
						reference: "data"
					},
					source: {
						title: localize.t('tiq.diff.merge_on_save.source'),
						reference: "incoming_data"
					},
					origin: {
						title: localize.t('tiq.diff.merge_on_save.origin'),
						reference: "original_data"
					}
				});
			},
			// --------------------------------------------
			onVersions: function() {
				_dialog.mergeWizard.show('merge', {
					current: {
						title: localize.t('tiq.diff.merge_on_versions.current'),
						reference: "data"
					},
					source: {
						title: localize.t('tiq.diff.merge_on_versions.source'),
						reference: "incoming_data"
					},
					origin: {
						title: localize.t('tiq.diff.merge_on_versions.origin'),
						reference: "ancestor_data"
					}
				});
			},
			setLabelsData: function(revision, collection) {
				_labelCollection[revision] = collection;
			},
			getLabelsData: function(revision) {
				return _labelCollection[revision];
			}
		},
		// --------------------------------------------
		showSaveOptionsDialog: _dialog.saveOptions.show,
		// --------------------------------------------
		showCannotMergeNotQualified: function(results, isOnSave) {
			_dialog.cannotMergeNotQualified.show(results, isOnSave);
		},
		// --------------------------------------------
		showPrivacyManagerDetectionDialog: function() {
			_dialog.privacyManagerDetected.show();
		},
		tempStorage: {
			getItem: function(subject, id) {
				var subjectArr = ['customizations','define', 'manage', 'loadrules'];

				if(!~subjectArr.indexOf(subject)) return null; // return false if not valid

				return _tempStorage[subject][id];
			},
			setItem: function(subject, id, obj) {
				var subjectArr = ['customizations','define', 'manage', 'loadrules'];
				var itemId;

				if(!~subjectArr.indexOf(subject)) return false; // return false if not valid

				switch(subject) {
					case 'customizations':
						itemId = obj._id;
						break;
					case 'define':
						itemId = obj._id;
						break;
					case 'manage':
						itemId = obj.id;
						break;
					case 'loadrules':
						itemId = obj.id;
						break;
				};

				return _tempStorage[subject][itemId] = $.extend({}, obj);
			},
			removeItem: function(subject, id) {
				var subjectArr = ['customizations','define', 'manage', 'loadrules'];

				if(!~subjectArr.indexOf(subject)) return false; // return false if not valid

				if($.isEmptyObject(_tempStorage[subject][id])) {
					return false;
				}

				delete _tempStorage[subject][id];
			},
			getAll: function() {
				return _tempStorage;
			}
		},

		onGetProfileCallbackSuccess: _request.onGetProfileCallbackSuccess,

		isValidIncomingVersion: _isValidIncomingVersion

	};

	return _public;
}();

utui.profile = {
	dirty: 0,
	bReloadProfileMenu: false,
	profiles: {},
	revisions: {},
	isLatestVersion: true,
	initcalled: false,
	sessionid: 0,
	searchQueue: 0,
	changeFocusFlag: true,
	isMergeInitiated: false,
	isPostMergeState: false,
	isSaveInProgress: false,
	comboBoxCount: 0,
	recent: {keys: {}, queue: []},
	recentVersions: {},
	searchData: {},
	HEADER_HEIGHT: 118,
	searchDataInit: {},		// Populated with default values in initSearch method
	revision_mapping: {},	// Contains the revision to label mappings
	clear:function(){
		utui.profile.dirty = 0;
		utui.util.pubsub.publish(utui.constants.profile.CLEARED, /* profile saved */true);
	},
	resetPostMergeState: function() {
		utui.sharedSessionManager._reloadRequired = false;
		utui.profile.isPostMergeState = false;
	},
	// ----------------------------------------------------------------
	constructAuditListView: function() {
		var $diffListing = $('#global_diff_listing .histEventAuditHeader'),
			$numDiff = $('#num_diff'),
			auditEvents = utui.historyManager._events;

		// clear drop-down list
		$('#global_diff_listing').find('div.audit_tip').remove();

		// ----------------------------------------------------------------
		var _view = {
			auditStandardItem: function (obj) {
				var v = '',
					_id = obj.data.id,
					_kind = obj.data.kind,
					_operation = obj.data.operation,
					_item = _getItemAttributes(obj),
					_name = utui.util.safeEscape(_item.name),
					_title = localize.t('tiq.profile.click_to_view') + ' ' + _kind.toLowerCase() + ': ' + _name,
					_classType = 'current';

				if (_operation === utui.constants.operation.REMOVED) {
					_title = _kind + ': ' + _name;
					_classType = 'scrap';
				}

				v += '<div class="audit_tip ' + _classType + '" title="' + _title + '" data-value="' + _id + '" data-type="' + _kind + '">';
				v += '  <div class="row-fluid">';
				v += '      <div class="span2">' + _item.icon + '</div>';
				v += '      <div class="span10 ellipsis">' + _name + '</div>';
				v += '  </div>';
				v += '  <div class="row-fluid">';
				v += '      <div class="span2"></div>';
				v += '      <div class="span10 ' + _operation + '">' + _getItemOperationIcon(obj) + '</div>';
				v += '  </div>'
				v += '</div>';

				return v;
			},

			// --------------------------------------------------------
			auditSpecialItem: function (obj) {
				var v = '',
					_name = utui.util.safeEscape(obj.data.name),
					_kind = obj.data.kind;

				if (_kind === utui.constants.templates.TYPE) {
					_name = utui.historyManager.getInheritedTagTemplateName(obj, obj.data.imported);
				}

				v += '<div class="audit_tip" title="' + _kind + ': ' + _name + '">';
				v += '  <div class="row-fluid scrap">';
				v += '      <div class="span12 auditRowSubHeader audit_title">';
				v +=            obj.action.replace(/_/g, ' ');
				v += '      </div>';
				v += '  </div>';
				v += '  <div class="row-fluid scrap">';
				v += '      <div class="span12 auditRowSubHeader ellipsis">';
				v +=            _name;
				v += '      </div>';
				v += '  </div>';
				v += '</div>';

				return v;
			}
		}

		// --------------------------------------------------------
		function _onAuditItemClick() {
			var $el = $(this),
				$type = $el.attr('data-type'),
				$value = $el.attr('data-value');

			if ($type) {
				if ($type === utui.constants.variables.TYPE) {
					utui.util.pubsub.publish(utui.constants.variables.FOCUSED, $value);

				} else if ($type === utui.constants.data_layer_specs.TYPE) {
					utui.util.pubsub.publish(utui.constants.data_layer_specs.FOCUSED, $value);

				} else if ($type === utui.constants.test_configs.TYPE) {
					utui.util.pubsub.publish(utui.constants.test_configs.FOCUSED, $value);

				} else if ($type === utui.constants.tags.TYPE) {
					utui.util.pubsub.publish(utui.constants.tags.FOCUSED, 'manage_content', 'manage', $value, '.uidValue');

				} else if ($type === utui.constants.loadrules.TYPE) {
					utui.util.pubsub.publish(utui.constants.loadrules.FOCUSED, 'loadrules_content', 'loadrules', $value, '.uidValue');

				} else if ($type === utui.constants.extensions.TYPE) {
					utui.util.pubsub.publish(utui.constants.extensions.FOCUSED,'customize_content', 'customizations', $value, '.container_uid');

				} else if ($type === utui.constants.labels.TYPE) {
          utui.labels.labelsManagerDialog.show();
				} else if ($type === utui.constants.privacy_management.TYPE) {
            utui.util.pubsub.publish(utui.constants.privacy_management.consent.FOCUSED, $value);
        }
        // } else if ($type === utui.constants.privacy_management.consent.TYPE) {
				//   utui.util.pubsub.publish(utui.constants.privacy_management.consent.FOCUSED, $value);
        //
        // } else if ($type === utui.constants.privacy_management.explicit.TYPE) {
        //   utui.util.pubsub.publish(utui.constants.privacy_management.explicit.FOCUSED, $value);
        // }
			}
		}

		// Append audit items to list
		if(auditEvents) {
			var numAudits = auditEvents.length;
			for(var i = 0; i < numAudits; i++) {
				var _event = auditEvents[i],
					_kind = _event.data.kind,
					_isStandardType = _kind !== utui.constants.templates.TYPE &&
						_kind !== utui.constants.profile.TYPE;

				if(_isStandardType) {
					$diffListing.after(_view.auditStandardItem(auditEvents[i]));
				} else {
					$diffListing.after(_view.auditSpecialItem(auditEvents[i]));
				}
			}
			// tooltips
			$('.audit_tip').tipsy({
				gravity: 'e',
				offset: 8,
				fade: false,
				opacity: 0.9
			}).safeBind('click', _onAuditItemClick);

			// set number of changes since last save
			var content = localize.t('tiq.profile.num_changes_since_save', {count:numAudits});

			$numDiff.html(content);
		}
	},
	// ----------------------------------------------------------------
	showModifiedTabLabel: function (obj) {
		var _item = _getItemAttributes(obj),
			_container = obj.data.container;

		if (_item) {
			var _tab = _item.tab;
			if (!$.isEmptyObject(_tab)) {
				$('#' + _tab).find('.tabLabel').addClass('modified');
			}

			if (_container) {
				var _$container = $('#' + _container),
					kind = obj.data.kind;

				if (kind !== utui.constants.variables.TYPE
					&& kind !== utui.constants.data_layer_specs.TYPE
					&& kind !== utui.constants.test_configs.TYPE
          && kind !== utui.constants.privacy_management.TYPE) {
					// Add latest change icon
					_$container.find('div.container_mod').remove();
					_$container.find('h3 a').append('<div class="container_mod not_saved"><i class="icon-asterisk"></i> ' + localize.t('tiq.profile.not_saved') + '</div>');

				} else {
					var _id = +obj.data.id;

					_$container.find('.viewItem').each(function () {
						var $el = $(this);
						if ($el.data('tile-key') === _id) {
							$el.find('div.container_mod').remove();
							$el.find('.viewItem-inner').prepend('<div class="container_mod not_saved"><i class="icon-asterisk"></i> ' + localize.t('tiq.profile.not_saved') + '</div>');

							return false;
						}
					});
				}
			}
		}
	},

	// ----------------------------------------------------------------
	hideModifiedTabLabel: function () {
		$('.tabLabel').removeClass('modified');
		$('.container_mod').remove();
	},

	// ----------------------------------------------------------------
	showAllModifiedTabLabels: function (tab) {
		var _auditEvents = utui.historyManager._events;

		for (var i = 0; i < _auditEvents.length; i++) {
			var _event = _auditEvents[i];
			if (_event.data.kind === tab) {
				utui.profile.showModifiedTabLabel(_event);
			}
		}
	},

	// ----------------------------------------------------------------
	setActionPerformed: function (obj, bSetDirty, /* will not log this event into history */bIgnoreEvent, /* this will not trigger ping */onProfileLoad) {
		var importProfile = utui.profile.import.importedProfiles['imported_from_' + utui.data.settings.account + '_' + obj.data.library];

		if ((!bIgnoreEvent && !obj.data.imported) || (importProfile && importProfile.forceHistoryEvent)) {
			if (obj.data.name) {
				obj.data.name = _.unescape(obj.data.name);
			}

			// Set the type (utui.?) for UREST purposes
			var tab_name = utui.util.getTabNameFromKind(obj.data.kind);
			if (tab_name !== '') {
				obj.data.tab_name = tab_name;
			}

			utui.historyManager.addEvent(obj);
			utui.profile.showModifiedTabLabel(obj);
		}

		if (bSetDirty) {
			this.setDirty();
		}

		if(!onProfileLoad) {
			// Ping server immediately to alert concurrent users
			utui.util.ping(null, false);
		}
	},
	setDirty:function(){
		utui.profile.dirty = 1;
		utui.util.pubsub.publish(utui.constants.profile.CHANGED, /* profile not saved */false);
	},
	// --------------------------------------------------
	toggleUnsavedChangesBtn: function (/* prompt to save */bSaved) {
		var $savePublishBtn = $('#global_save'),
			$publishDiffBtn = $('#global_diff');

		if (bSaved) {
			$savePublishBtn.parent().removeClass('btn-group');
			$savePublishBtn.removeClass('btn-warning');
			$publishDiffBtn.hide();
			utui.profile.hideModifiedTabLabel();
		} else {
			if (!utui.permissions.isReadOnly()) {
				if (utui.historyManager.getNetChanges().length > 0) {
					$savePublishBtn.parent().addClass('btn-group');
					$savePublishBtn.addClass('btn-warning');
					if ($savePublishBtn.is(':visible')) {
						$publishDiffBtn.show();
					}
				} else {
					$savePublishBtn.parent().removeClass('btn-group');
					$savePublishBtn.addClass('btn-warning');
					$publishDiffBtn.hide();
				}
			}
		}
	},
	// --------------------------------------------------
	toggleSavePublishBtn: function (hide) {
		var $savePublishBtn = $('#global_save'),
			$publishDiffBtn = $('#global_diff');

		if (!hide) {
			$savePublishBtn.show();
			if ($savePublishBtn.parent().hasClass('btn-group')) {
				$publishDiffBtn.show();
			}

		} else {
			$savePublishBtn.hide();
			if ($savePublishBtn.parent().hasClass('btn-group')) {
				$publishDiffBtn.hide();
			}
		}
	},
	updatePublishButton: function () {
		var $savePublishBtn = $('#global_save');

		// Disable Save/Publish button and show tooltip if user is has only the READ ONLY permission
		if (utui.permissions.isReadOnly()) {
			$savePublishBtn.attr('title', localize.t('tiq.profile.read_only_users_are_unable'))
				.attr("disabled", "disabled");

			// Disable Save/Publish button and show tooltip if Save is not allowed durring maintenance
		} else if (utui.util.isMaintenance()) {
			$savePublishBtn.attr('title', localize.t('tiq.profile.the_limelight_cdn')).mouseover()
				.attr("disabled", "disabled");

		} else {
			if (utui.sharedSessionManager.needsRefresh()) {
				if (utui.profile.dirty == 1 && $savePublishBtn.find('.btn-text').text() === utui.config.tabList.publish.saveas) {
					$savePublishBtn.attr('title', utui.tooltip.publish.saveas).mouseout()
						.attr("disabled" , false);
				} else {
					$savePublishBtn.attr('title', utui.tooltip.publish.saveas).mouseout()
						.attr("disabled" , false);
				}
			} else {
				$savePublishBtn.attr('title', utui.tooltip.publish.save).mouseout()
					.attr("disabled" , false);
			}
		}
	},
	init:function(){
		var self = this;

		// Bind UI Elements
		this.bindUI();

		document.cookie='SRC=my.tealiumiq.com;path=/;domain=.tealiumiq.com;'
		$.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/x-www-form-urlencoded; charset=UTF-8" });
		//$.ajaxSetup({ scriptCharset: "utf-8" ,contentType: "application/json; charset=utf-8" });

		var dataObj = {
			account : utui.login.account,
			profile : utui.login.profile
		};

		var accessibleProfiles = [];
		$("#profile_profileid option").each(function() {
			accessibleProfiles.push($(this).val());
		});

		if(accessibleProfiles.indexOf(dataObj.profile) < 0 && accessibleProfiles.length > 0) {
			// this profile no longer exists, use the first one from accessibleProfiles
			TRACE("overwriting the last profile to " + accessibleProfiles[0] + " from " + dataObj.profile);
			dataObj.profile = accessibleProfiles[0];
		}

		this.lastAccount = dataObj.account;
		this.lastProfile = dataObj.profile;

		// Render Profile
		this.getProfile(null, dataObj, function(data){
			self.getProfileCallback(data);
			self.initSearch();

			$("#bodycontent").show();
			$('#tabs').tabs('select', utui.config.tabList[utui.config.initialTab].sort);
			utui[utui.config.initialTab].show();

			self.showProfileMenu();
		});
		this.initcalled = true;

		utui.util.pubsub.subscribe(utui.constants.account.LOADED, this.renderDataCloudGateway);
		utui.util.pubsub.subscribe(utui.constants.profile.LATEST_VERSION_CHANGED, this.setIsLatestVersion, this);
		utui.util.pubsub.subscribe(utui.constants.profile.LATEST_REVISION_CHANGED, this.setIsLatestVersion, this);

		utui.util.pubsub.subscribe(utui.constants.revision.UPDATED_BY_OTHERS, this.handleRevisionAddedByConcurrentUsers, this);
		utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.resetFilters, this);
		
		utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.setIsLatestVersion, this);

		// Combine data from Required and Optionally linked libraries
		utui.util.pubsub.subscribe(utui.constants.profile.LIBRARY_IMPORT, utui.profile.import.init);

		utui.util.pubsub.subscribe(utui.constants.users.UPDATED, this.updateAdminMenu);
		utui.util.pubsub.subscribe(utui.constants.account.CHANGED, this.hideNonSSOSAMLFeatures);
		utui.util.pubsub.subscribe(utui.constants.views.TAB_CLICK, this.consoleHeight);

		utui.util.pubsub.subscribe(utui.constants.labels.ADDED, this.initSearch, this);
		utui.util.pubsub.subscribe(utui.constants.labels.REMOVED, this.initSearch, this);
		utui.util.pubsub.subscribe(utui.constants.labels.CHANGED, this.initSearch, this);

		utui.util.pubsub.subscribe(utui.constants.loadrules.FOCUSED, this.openItemAccordion);
		utui.util.pubsub.subscribe(utui.constants.tags.FOCUSED, this.openItemAccordion);
		utui.util.pubsub.subscribe(utui.constants.extensions.FOCUSED, this.openItemAccordion);

		utui.util.pubsub.subscribe(utui.constants.tags.ADDED, this.onTagsAdded, this);
		utui.util.pubsub.subscribe(utui.constants.tags.REMOVED, this.onTagsRemoved, this);
		utui.util.pubsub.subscribe(utui.constants.tags.COPIED, this.onTagsAdded, this);
		utui.util.pubsub.subscribe(utui.constants.tags.IMPORTED, this.onTagsAdded, this);

    window.addEventListener("message", utui.privacyManagement.util.preview.messageListener.bind(utui.privacyManagement.util.preview));

    },

	openDataCloud: function() {
		// Store current user email in localStorage for AS
		utui.util.storage.storeLocal('currentUserEmail', utui.login.email);

		var datacloudUrl = utui.profile.getDataCloudUrl();

		if (utui_sso) {
			// Loaded in iframe
			// Store info that datacloud will need to return to utui
			var token = $("#ssoUTK").data('value');
			var params = {timeoutUrl: utui_redirectUrl, ssoToken: token};
			sessionStorage.setItem('ssoParams', JSON.stringify(params));

			window.location.href = datacloudUrl.replace(/\?(.*?)([^&])/, "?utui_sso=true&$2");
		}
		else {
			// Top level window
			common.utils.openWindow(datacloudUrl, 'datacloud');
		}
	},
  
  getDataCloudUrl: function() {
    var manageList = _.sortBy(_.values(utui.data.manage || {}),"sort"),
        account = utui.login.account,
        profile = utui.login.profile,
        found_profile,
        language = localize.getCode() || 'en-US',
        regEx = /([^\/]*\/\/|)([^\/]*\/[^\/]*\/)([^\/]*)(.*)/,
        listOfProfile = utui.profile.profiles[utui.login.account];
    
    // Check to see if datacloud is enabled and if so extract the profile
    
    for (var idx = 0; idx < manageList.length; idx++){
      var tag = manageList[idx];
      if(tag.tag_id === '20064' && tag.status === 'active') {
        
        if (tag.config_profile) { //use config_profile by defualt
          if (_.indexOf(listOfProfile, tag.config_profile.toLowerCase()) > -1) {
            found_profile = tag.config_profile.toLowerCase();
            break;
          }
        }
        if (tag.config_server) {
        	var config_server = tag.config_server.toLowerCase();
					if (config_server.indexOf(".tealiumiq.com") > -1 && regEx.test(config_server)) {
          // fall back to old method, as long as valid server string
          // get the profile from the server set in the config_server property
          // tag.config_server = "https://datacloud.tealiumiq.com/tealiumiq/base/2/i.gif'
          found_profile = config_server.replace(regEx, '$3');   // base
          
          if (_.indexOf(listOfProfile, found_profile) > -1) {
            break;
          }
          
        }
      }
        found_profile = null;
      }
      
    };
    
    return "/datacloud/"+language+"/?account=" + account + "&profile=" + (found_profile || profile);
  },
	renderDataCloudGateway: function() {

		var account = utui.login.account;
		var profile = utui.login.profile;

        var _view = {
            dataCloudEnabled: function() {
                var v = ' \
                    <div id="productToggle_button" class="js-dropdown-button"> \
                        <div id="productToggle_productTitle">' + localize.t('tiq.profile.switch_products') + '</div> \
                        <div id="productToggle_icon"><i class="icon-chevron-south"></i></div> \
                    </div> \
                    <div class="js-dropdown-listing"> \
                        <ul id="productToggle_listing" class="popover-box-container"> \
                            <li> \
                                <a class="goToAs" href="javascript://" data-language="en-US" target="_blank"> \
                                    <div class="product-button"></div> \
                                    <div class="product-logo" title="Tealium Universal Data Hub"></div> \
                                    <div class="product-description"> \
                                        <p>' + localize.t('tiq.profile.influence_and_engage') + '</p> \
                                    </div> \
                                </a> \
                            </li> \
                            <li> \
                            	<a class="goToCommunity" href="javascript://" target="_blank"> \
                            		<div class="product-button"></div> \
                                    <div class="product-logo" title="Tealium Learning Community"></div> \
                                    <div class="product-description"> \
                                        <p>' + localize.t('tiq.profile.where_tealium_employees') + '</p> \
                                    </div> \
                            	</a> \
                            </li> \
                        </ul> \
                    </div>';
                return v;
            }
        }

		function showProductToggle() {
			// Always show the ribbon
			$('#productToggle').html(_view.dataCloudEnabled());
			utui.ui.toggleMenu('productToggle');

			// set up language object
			if (!utui.hasOwnProperty('language')) utui.language = {};

			$('.goToAs').safeBind('click', function(e) {
				e.preventDefault;
				utui.profile.openDataCloud();
				return false;
			});

			$('.goToCommunity').safeBind('click', function(e) {
				e.preventDefault;
				utui.help.openLithiumCommunity();
				return false;
			});
		};

		// Show the AudienceStream ribbon
		showProductToggle();
    },

    bindUI:function () {
    	var self = this;

		this.consoleHeight();
        this.initAdminMenu();
        this.initHelpCenterLink();
        //Display the help link
        $('#help_menu_text').html('<span class="menufont"><a id="kbLink" class="inActiveHelpLink" href="#">' + localize.t('tiq.profile.community_help') + '</a></span>');

		this.showAddMenu();

		utui.util.addTooltip({
			'mainmenu_signout': { gravity: 'ne' },
			'mainmenu_comments': { gravity: 'ne' },
			'profile_legend_button': { gravity: 'ne' },
			'tabs_dashboard': { gravity: 'sw' },
			'tabs_publish': { gravity: 'sw' },
			'tabs_manage': { gravity: 'sw' },
			'tabs_loadrules': { gravity: 'sw' },
			'tabs_customizations': { gravity: 'sw' },
			'tabs_define': { gravity: 'sw' },
			'tabs_reports': { gravity: 'sw' },
			'global_save': { gravity: 'n' },
			'global_help': { gravity: 'n' }
		});

		$('body').on('click',function(){
			$('.tipsy').remove();//remove tooltips on click of any element
		})
		$('#tabs').on('click','a:not(.histutaglinks)',function(e){
			e.preventDefault();
		});

		$(window).resize(function () {
			self.consoleHeight();
		});
	},
	resetFilters:function() {
		// Unhighlight all of the filter buttons
		$('.filter_button').removeClass('filter_on');
		// TRACE('unhighlighted all of the filter buttons.');
	},
	consoleHeight:function () {
		var WINDOW_HEIGHT = $(window).height(),
			HEADER_HEIGHT = this.HEADER_HEIGHT || 118,
			HELP_TAB_HEIGHT,
			PRODUCT_ANNOUNCEMENT;

		var $defineTab = $('#tabs-define'),
			$dashboardTab = $('#tabs-dashboard'),
			consoleWidth = $defineTab.width(),
			dashboardWidth = $dashboardTab.width();
			$defineTab.find('.utui-tab-content').width(consoleWidth - 230);
			$dashboardTab.find('.utui-tab-content').width(dashboardWidth - 200);

		setTimeout(function() {
			HELP_TAB_HEIGHT = ( $('.tab-intro:visible').length ) ? $('.tab-intro:visible').height() + 64 /* padding */ : 0;
			PRODUCT_ANNOUNCEMENT = ( $('#announcementBar:visible').length ) ? $('#announcementBar:visible').height() /* padding */ : 0;


			// TAB: SUMMARY
			$dashboardTab.css('height', WINDOW_HEIGHT - HEADER_HEIGHT + 50);
			$dashboardTab.find('.utui-scrollable-chart').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 20);
      
      $('#tabs-dashboard').find('#privacy_management_scroll_container').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - 84 + (HELP_TAB_HEIGHT == 0 ? 40  :  70 ));

			// TAB: TAGS
			$('#manage_content').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 15 - 87);

			// TAB: LOADRULES
			$('#loadrules_content').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 15 - 87);

			// TAB: EXTENSIONS
			$('#customize_content').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 15 - 87);

			// TAB: VERSIONS
			$('#publish_container').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 51);

			// TAB: REPORTS
			$('#reports_audits_content').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 15 - 124);
			$('#reports_manual_content').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 15 - 124);

            // TAB: DATA LAYER
	        $defineTab.css('height', WINDOW_HEIGHT - HEADER_HEIGHT + 96);
            $('#define_scroll_container, #data_layer_spec_scroll_container, #site_verify_scroll_container').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - PRODUCT_ANNOUNCEMENT - 44);
            $('#defineContainer, #data_layer_spec_container, #site_verify_container').css('height', WINDOW_HEIGHT - HEADER_HEIGHT - HELP_TAB_HEIGHT - PRODUCT_ANNOUNCEMENT - 11 - 32 + 43);

			window.scrollTo(0, 0);

		}, 100);
	},
	dialogCentering:function () {
		var dialogWidth = $(window).width() - $('.ui-dialog[role="dialog"]').width();
		var dialogHeight = $(window).height() - $('.ui-dialog[role="dialog"]').height();

		$('.ui-dialog').css({
			'top':dialogHeight / 2,
			'left':dialogWidth / 2
		});
	},
	showAddMenu:function() {
		var self = this;
		$("#add_menu_button").on('click',function(){
			self.menuToggle('add_menu_list');
		});
		$("#add_menu_list").on('click','button',function(){
			self.menuToggle('add_menu_list');
		});
	},
	showProfileMenu:function() {
		var self = this;
		$('#profile_menu_button').on('click',function(){
			if(!$('#profile_menu_list').is(':visible')){

				self.menuSetRecentList();
				if($('#profile_account').children().length === 0 || self.bReloadProfileMenu) {
					TRACE('no accounts are loaded, recreate account list');
					self.menuSetAccountList(function() {
						// Once accounts are retrieved, setup the combo boxes
						utui.profile.createComboBox();
					});
				}

				if($('#profile_profileid').children().length === 0 || self.bReloadProfileMenu) {
					TRACE('no profiles are loaded, recreate profile list');
					self.menuSetProfileList();
				}
				else {
					// trigger the change event so revisions list can be reloaded
					$('#profile_profileid').trigger('change');
				}

				$('#profile_revision').children().remove().end();
				self.menuToggle('profile_menu_list');
			}
			else {
				self.menuToggle('profile_menu_list');
			}
		});
		$('#profile_account').on('change',function(e){
			self.menuSetProfileList(null, {
				account: e && e.item && e.item.value || $('#profile_account :selected').text()
			})
		});
		$('#profile_profileid').on('change',function(e){
			self.menuSetRevisionsList(null, {
				account: $('#profile_account :selected').text(),
				profile: e && e.item && e.item.value || $('#profile_profileid :selected').text()
			})
		});
		
		$('#profile_revision').on('change',function(){self.menuShowButton();});
		$('#lastrevision').off().on('click','#profile_revision-autocomplete',function(){ self.menuSetRevisionsList(true); });
		$('#loadversion_button button').on('click',function(){ self.getRevision(); self.disposeClickCapture(true); });
	},
	initAdminMenu: function() {
		var $adminMenu = $('#adminMenu'),
			$profileAccount = $('#profile_account'),
			v = '';

		var _bindUI = {
			all: function() {
				$('#createAccount_menuBtn').on('click', function(e) {
					utui.adminlib.createAccount.show();
					return false;
				});
				$('#removeAccount_menuBtn').on('click', function(e) {
					utui.adminlib.removeAccount();
					return false;
				});
				$('#configurePasswordSettings_menuBtn').on('click', function(e) {
					utui.users.showConfigurePasswordDialog();
					return false;
				});
				$('#configureAccountSettings_menuBtn').on('click', function(e) {
					utui.adminlib.accountSettings.show();
					return false;
				});
				$('#freeTrial_menuBtn').on('click', function(e) {
					utui.adminlib.manageFreeTrial();
					return false;
				});
				$('#subscriptionManager_menuBtn, #remainingDays').on('click', function(e) {
				   utui.account.showSubscriptionManager();
					return false;
				});
				$('#initiatePurge_menuBtn').on('click', function(e) {
					utui.adminlib.initiatePurge();
					return false;
				});
				$('#manageTagPolicy_menuBtn').on('click', function(e) {
					utui.manage.policy.showConfigureDialog();
					return false;
				});
				$('#manageProfiles_menuBtn').on('click', function(e) {
					utui.profile.import.showProfileDialog().initialize();
					return false;
				});
				$('#manageUsers_menuBtn').on('click', function(e) {
					utui.users.show();
					return false;
				});
				$('#manageTemplates_menuBtn').on('click', function(e) {
					utui.adminlib.getTemplateList();
					return false;
				});
				$('#privacyResources_menuBtn').on('click', function(e) {
					utui.privacyManagement.accountDefaults.show();
					return false;
				});				
				$('#tagStatusChecker_menuBtn').on('click', function(e) {
					utui.adminlib.showTagStatusChecker();
				});
				$('#webCompanion_menuBtn').on('click', function(e) {
					utui.adminlib.showTagCompanion();
					return false;
				});
				$('#codeCenter_menuBtn').on('click', function(e) {
					utui.publish.showEnvironmentDialog().initialize();
					return false;
				});
				$('#editUser_menuBtn').on('click', function(e) {
					utui.users.showEditUserDialog();
					return false;
				});
				$('#manageLabels_menuBtn').on('click', function(e) {
					utui.labels.labelsManagerDialog.show();
					return false;
				});
				$('#logOut_menuBtn').on('click', function(e) {
					utui.users.logout();
					return false;
				});
			}
		}

		$('<div />', {
			id: 'adminMenu_button',
			class: 'utui-header-button js-dropdown-button'
		 }).html('<span class="admin-menu-name">' + utui.login.email + '</span><i class="fa fa-caret-down"></i>').appendTo($adminMenu);

        if(utui.login.email.indexOf('@tealium.com')>0){
            v += '    <li class="menu-li-header">' + localize.t('tiq.profile.tealium_admin') + '</li>';
            v += '    <li class="menu-li"><a id="createAccount_menuBtn" href="#">' + localize.t('tiq.profile.create_account') + '</a></li>';
            v += '    <li class="menu-li"><a id="removeAccount_menuBtn" href="#">' + localize.t('tiq.profile.remove_account') + '</a></li>';
			v += '    <li class="menu-li"><a id="configureAccountSettings_menuBtn" href="#">' + localize.t('tiq.profile.account_settings') + '</a></li>';
	        // Show if current user is a free trial user
	        v += '    <li class="menu-li" style="display:none;"><a id="freeTrial_menuBtn" href="#">' + localize.t('tiq.profile.free_trial') + '</a></li>';
            v += '    <li class="menu-li"><a id="initiatePurge_menuBtn" href="#">' + localize.t('tiq.profile.initiate_cdn_purge_request') + '</a></li>';
            v += '    <li class="menu-li-divider"></li>';
        }

        v += '    <li class="menu-li-header">' + localize.t('tiq.profile.account_admin') + '</li>';
	    v += '    <li class="menu-li"><a id="subscriptionManager_menuBtn" href="#">' + localize.t('tiq.profile.manage_subscription') + '</a></li>';
        v += '    <li class="menu-li"><a id="manageProfiles_menuBtn" href="#">' + localize.t('tiq.profile.manage_profiles') + '</a></li>';
        v += '    <li class="menu-li"><a id="manageUsers_menuBtn" href="#">' + localize.t('tiq.profile.manage_users') + '</a></li>';
		v += '    <li class="menu-li"><a id="manageTagPolicy_menuBtn" href="#">' + localize.t('tiq.profile.manage_tag_policy') + '</a></li>';
        v += '    <li class="menu-li non-saml"><a id="configurePasswordSettings_menuBtn" href="#">' + localize.t('tiq.profile.manage_password_policy') + '</a></li>';
        v += '    <li class="menu-li"><a id="manageTemplates_menuBtn" href="#">' + localize.t('tiq.profile.manage_templates') + '</a></li>';
		v += '    <li class="menu-li"><a id="privacyResources_menuBtn" href="#">' + localize.t('tiq.profile.global_consent_customization') + '</a></li>';
        v += '    <li class="menu-li"><a id="manageLabels_menuBtn" href="#">' + localize.t('tiq.profile.manage_labels') + '</a></li>';
		v += '    <li class="menu-li"><a id="tagStatusChecker_menuBtn" href="#">' + localize.t('tiq.profile.tag_status_checker') + '</a></li>';
        v += '    <li class="menu-li"><a id="webCompanion_menuBtn" href="#">' + localize.t('tiq.profile.web_companion') + '</a></li>';
        v += '    <li class="menu-li"><a id="codeCenter_menuBtn" href="#">' + localize.t('tiq.profile.code_center') + '</a></li>';
        v += '    <li class="menu-li-divider"></li>';
        v += '    <li class="menu-li-header">' + localize.t('tiq.profile.user_preferences') + '</li>';
        v += '    <li class="menu-li"><a id="editUser_menuBtn" href="#">' + localize.t('tiq.profile.edit_view_user_settings') + '</a></li>';

        if(!utui_sso) {
            v += '    <li class="menu-li-divider"></li>';
            v += '    <li class="menu-li"><a id="logOut_menuBtn" href="#">' + localize.t('tiq.profile.log_out') + '</a></li>';
        }

		$('<ul />', {
			id: 'adminMenu_listing',
			class: 'menu-listing pos-right js-dropdown-listing'
		}).html(v).appendTo($adminMenu);

		utui.ui.toggleMenu('adminMenu');

		// Close Version Menu after admin menu clicked
		$('#adminMenu').mouseup(function () {
			if($('#profile_menu_list').is(":visible")) {
				utui.profile.disposeClickCapture();
			}
		});

		_bindUI.all();
	},
	updateAdminMenu: function () {
		$('.admin-menu-name').html(utui.users.getAdminMenuName());
	},
	hideNonSSOSAMLFeatures: function () {
		if (utui.account.sso_isSAML()) {
			$('.non-saml').hide();
		} else {
			$('.non-saml').show();
		}
	},
	initHelpCenterLink: function() {
		var $helpLink = $('#helpCenterLink');

		$helpLink.on('click', function(e) {
			e.preventDefault();
			utui.help.showHelpCenterDialog();
		});
	},
	hideNotificationCenter:function (/* permanently remove the notification center and the badge */ bRemmove) {
		var self = this;
		if (bRemmove) {
			$("#notification").remove();
			$("#notification_badge_list").fadeOut(150, function () {
				$(this).remove();
			});
			$("#notification_badge_button").remove();
			self.disposeClickCapture();
		}
		else {
			// $("#notification_badge_list").fadeOut(150);
			self.removeNotification($('#notification_badge_button'));
		}
	},
	removeNotification: function(list) {
		list.remove();
		this.disposeClickCapture();
	},
	displayNotificationCenter:function (userDataObj, callback) {
		if (!utui.updates) return;

		var unreadUpdates = utui.updates.getUnreadUpdates(userDataObj),
			numOfUpdates = unreadUpdates.length,
			tooltipObj = {},
			$notifBadge,
			self = this;

		var idHash = CryptoJS.SHA256(utui.login.email).toString();

        if (numOfUpdates > 0) {
            $notifBadge = $("<div />", {
                "id":"notification_badge_button",
                "title":localize.t('tiq.profile.new_features_have_landed'),
                click:function () {
                    // Check to see if notification_badge_list exists
                    var notification_badge_list = $("#notification_badge_list");

					if(notification_badge_list.is(':visible')) {
						// Already exists, get rid of it
						self.removeNotification(notification_badge_list);
					}
					else {
						unreadUpdates = utui.updates.getUnreadUpdates(JSON.parse(utui.util.storage.loadLocal(idHash)));

						var notification_badge_list = $("<ul />", {
							"id":"notification_badge_list",
							"class":"navmenu nohover tipBelow menu_list_container"
						});

						var $body = $("<div />", {
							"class":"notification_body"
						});

						var $row;

                        for (var i = 0; i < unreadUpdates.length; i++) {
                            if (i === 0) {
                            	var headerContent = "";
                            	headerContent += "<span class='title'>" + localize.t('tiq.profile.product_announcements') + "</span> <a href='javascript:utui.updates.markAllRead();utui.profile.hideNotificationCenter(true);' class='btn btn-mini'>" + localize.t('tiq.profile.dismiss_all') + "</a>";
								var $header = $("<div />", {
									"class":"notification_header"
								}).html(headerContent).appendTo(notification_badge_list);
							}

							$row = $("<li />", {
								"class":"paddingMedium"
							}).data("updateId", unreadUpdates[i].id);

							var $title = $("<div />", {
								"class":"title"
							});

							if(unreadUpdates[i].videoUrl) {
								$title.html('<span class="video" data-url="' + unreadUpdates[i].videoUrl + '">' + unreadUpdates[i].title + '</span>' + '&nbsp;<i class="icon-facetime-video video" data-url="' + unreadUpdates[i].videoUrl + '"></i>');
							}
							else if(unreadUpdates[i].linkUrl) {
								$title.html('<span class="clickable" title="' + unreadUpdates[i].linkUrl  + '" onclick="utui.help.openCommunityLink(\'' + unreadUpdates[i].linkUrl + '\');return false;">' + unreadUpdates[i].title + '</span>');
							}
							else {
								$title.html(unreadUpdates[i].title);
							}

							var mydate = new Date(unreadUpdates[i].date),
								months = localize.t('tiq.months', {toArray:1}) || [],
								month = months[mydate.getMonth()],
								date = month + ' ' + mydate.getDate() + ', ' + mydate.getFullYear(),
								str = localize.t('tiq.profile.added_on', {date:date});

							var $date = $("<div />", {
								"class":"date"
							}).html(str);

							var $desc = $("<div />", {
								"class":"desc"
							}).html(unreadUpdates[i].desc);

							if(unreadUpdates[i].imgSrc) {
								$desc.append('<img src="'+unreadUpdates[i].imgSrc+'" alt="'+unreadUpdates[i].title+'" />');
							}

							if(unreadUpdates[i].linkUrl) {
                            	$desc.append('<a class="link" href="#" title="' + unreadUpdates[i].linkUrl  + '" onclick="utui.help.openCommunityLink(\'' + unreadUpdates[i].linkUrl + '\');return false;">' + localize.t('tiq.learn_more') + ' <i class="icon-share"></i></a>');
                        	}



							var $destroy = $("<div />", {
								"class":"destroy",
								"click":function() {
									var $parentListItem = $(this).closest("li"),
										dismissId = $parentListItem.data("updateId");
									utui.updates.markRead(dismissId);

									var _unreadUpdates = utui.updates.getUnreadUpdates(JSON.parse(utui.util.storage.loadLocal(idHash)));
									$notifBadge.text("" + _unreadUpdates.length);

									$parentListItem.fadeOut(120, function() {
										if(_unreadUpdates.length === 0) {
											utui.profile.hideNotificationCenter(true);
										}
										else
											$(this).remove();
									})
								}
							}).html("<i class='icon icon-remove-sign'></i>");

							$row.append($title);
							$row.append($date);
							$row.append($desc);
							$row.append($destroy);

							$row.appendTo($body);
						}
						$body.appendTo(notification_badge_list);
						notification_badge_list.appendTo("#app_header");
						self.menuToggle('notification_badge_list');

					}
				}
			}).text(numOfUpdates).appendTo("#app_header");

			setTimeout(
				function() {
					$notifBadge.animate({
						left: "300",
						opacity: 1
					}, 280, "easeOutExpo");
				}, 2000);

			tooltipObj["notification_badge_button"] = { gravity: 'w'};
			utui.util.addTooltip(tooltipObj);
		}

		$("#app_header").on('click', '.video', function(e) {
			var $target = $(e.target);
			var videoUrl = $target.data('url');

			self.menuToggle('notification_badge_list');

			utui.util.video.show(videoUrl);
		});
		if(callback) { callback(); }
	},

	// Another user has created a new version - we need to modify the behaviour of the save button to offer the option to 
	// merge or a reload if there's been no changes.
	handleRevisionAddedByConcurrentUsers:function() {
		var $savePublishBtn = $("#global_save"),
			reloadBtnText = utui.config.tabList.publish.reload,
			saveBtnText = utui.config.tabList.publish.save;

		function _proceedToSave() {
			var lcvr = utui.sharedSessionManager.getLastChangedVersionRevision();
			if(diffapi.hasMergedVersionRevision(lcvr.version,lcvr.revision) || utui.sharedSessionManager.hasMostRecentVersionSaved() ) {
				// Show Save As...
				utui.profile.publishChoiceLabel = utui.config.tabList.publish.saveas;
				utui.publish.showSaveDialog().initialize();
			} else if (utui.publish.isRevisionMergeable(lcvr.version) == 0){
				// Show Save Options...
				utui.diff.showSaveOptionsDialog();
			} else {
				// Show Save As...
				utui.profile.publishChoiceLabel = utui.config.tabList.publish.saveas;
				utui.publish.showSaveDialog().initialize();
			}
		}

		// Enable merge profile settings here...
		$("#savepublishIcon").hide();

		utui.sharedSessionManager._reloadRequired = true;

		$savePublishBtn.attr('title', utui.tooltip.publish.save)
			.safeBind('click', function() { // Change the behavior of the save button to offer the option of merge
				if(utui.profile.dirty == 1 && utui.validation.hasErrors()) {
					utui.validation.showSaveValidation(_proceedToSave);
				} else {
					_proceedToSave();
				}
			});

	},

	load:function(a){
		var $tabContent = $('#tabs_content');

	   // Tabs
		$tabContent.empty();
		var sortTabs = utui.util.getVars(utui.config.tabList,3,'sort');
		for(var i in utui.util.getVars(sortTabs,1)){
			var content = '',
				tabItem = sortTabs[i],
				showTab = tabItem.show !== 'false';

			content += '<li class="'+tabItem.tabCSS+'">';
			content += '	<a href="#tabs-'+tabItem.tab+'" title="'+tabItem.title+'" id="tabs_'+tabItem.tab+'">';
			content += '		<div class="tabLabel">';
			content += '			<i class="'+tabItem.iconCSS+'"></i>';
			content += '			'+tabItem.text+'';
			content += '			<div class="tab-warning-signal"><i class="icon-warning-sign"></i></div>';
			content += '		</div>';
			content += '	</a>';
			content += '</li>';

			if (showTab) {
				$tabContent.append(content);
			}
		}

		var saveContent = '<div class="save_wrapper pull-right">';
		saveContent += '    <span id="global_save" class="btn btn-small" title="' + utui.tooltip.publish.save + '"><span class="btn-text">' + utui.config.tabList.publish.save + '</span></span>';
		saveContent += '    <span id="global_diff" class="btn btn-small btn-warning"><i class="icon-caret-down"></i></span>';
		saveContent += '    <ul id="global_diff_listing" class="menu-listing pos-right js-dropdown-listing">';
		saveContent += '        <div id="num_diff" class="histEventAuditHeader">' + localize.t('tiq.profile.num_changes_since_save', {count:0}) + '</div>';
		saveContent += '    </ul>';
		saveContent += '  </div>';


		$tabContent.append(saveContent);
		$('#global_save').safeBind('click', function() {
			// **
			if(utui.validation.hasErrors()) {
				utui.validation.showSaveValidation();
				return false;
			} else {
				utui.publish.showSaveDialog().initialize();
			}
		});

		$('#global_diff').safeBind('click', function() {
			var $listing = $(this).next();

			if ($listing.is(':visible')) {
				$listing.stop(true, true).slideUp();
			} else {
				utui.util.pubsub.publish(utui.constants.tagging.EVENT, {action: utui.constants.views.CHANGE_SUMMARY});
				_onChangeSummaryBtnClick();

				utui.profile.constructAuditListView();
				$listing.stop(true, true).slideDown();
			}

			return false;
		});

		var $tabs = $('#tabs');
		$tabs.tabs('destroy');
		$tabs.tabs({
			select: function(event, ui){
				var screenName = utui.tagging.getPageFromTabId(ui.tab.id);
				var tagging = {action:utui.constants.views.TAB_CLICK, screen_name: screenName, tealium_event: utui.constants.tagging.SCREEN_VIEW};
				utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, tagging);

				utui.profile.saveTabData(utui.config.currentTab, false);
				return true;
			},
			show: function(event, ui){
				utui.config.currentTab = utui.config.tabListReverse[ui.index];

				if(utui.profile.initcalled){
					utui[utui.config.tabListReverse[ui.index]].show();
					if(typeof utui.profile.searchQueue == 'function'){
						utui.profile.searchQueue();
						utui.profile.searchQueue = 0;
					}
				}
			}
		});

		if($('#profile_profileid').children().length == 0){
			utui.profile.menuSetAccountList(function() {
				utui.profile.createComboBox();
			});
			utui.profile.menuSetProfileList();
		}

		// show the updates badge if the user is not brand new
		var idHash = CryptoJS.SHA256(utui.login.email).toString();
		var userData = utui.util.storage.loadLocal(idHash);

		if (!userData) {
			var today = new Date(),
				firstDate = utui.util.date.getDateFromString("09/11/2012"),
				persistDate = today;

			if (today <= utui.util.date.getDateFromString("09/21/2012")) {
				persistDate = firstDate;
			}

			// first time signing in, don't show features notification, but store today's datestamp
			var obj = {
				dateOfFirstLogin: utui.util.date.getStringFromDate(persistDate),
				updatesRead: [],
				tabState: {
					manage: { help: true },
					loadrules: { help: true },
					define: { help: true, itemview: 'grid' },
					customizations: { help: true },
					publish: { help: true },
					reports_audits: { help: true },
					reports_manual: { help: true },
					dashboard_tag_usage: { help: true },
					data_layer_spec: { help: true },
					site_verify: { help: true },
					privacy_management: { help: true },
          privacy_management_explicit: { help: true }
				}
			};
			utui.util.storage.storeLocal(idHash, JSON.stringify(obj));
		} else {
			var userdata = JSON.parse(userData);

			// Extend tabState if it does not exist
			if (!userdata.hasOwnProperty('tabState')) {
				userdata = $.extend(userdata, {
					tabState: {
						manage: { help: true },
						loadrules: { help: true },
						define: { help: true, itemview: 'grid' },
						customizations: { help: true },
						publish: { help: true },
						reports_audits: { help: true },
						reports_manual: { help: true },
						dashboard_tag_usage: { help: true },
						data_layer_spec: { help: true },
						site_verify: { help: true },
            privacy_management : {help : true},
            privacy_management_explicit : {help : true}
					}
				});
				utui.util.storage.storeLocal(idHash, JSON.stringify(userdata));
			} else {
				// Quick fix for adding new properties to tabState - add new items to this array
				var arr = [
					'manage',
					'loadrules',
					'define',
					'customizations',
					'publish',
					'reports_audits',
					'reports_manual',
					'dashboard_tag_usage',
					'data_layer_spec',
					'site_verify',
					'privacy_management',
					'privacy_management_explicit'
				];

				for (var i = 0; i < arr.length; i++) {
					if (!userdata.tabState[arr[i]]) {
						userdata.tabState[arr[i]] = { help: true };
					}
				}
				utui.util.storage.storeLocal(idHash, JSON.stringify(userdata));
			}
		}

		// Show only features that are created after the firstSigninDatestamp
		utui.profile.displayNotificationCenter(JSON.parse(utui.util.storage.loadLocal(idHash)));

		// Setup listeners
		utui.util.pubsub.subscribe(utui.constants.profile.CHANGED, this.toggleUnsavedChangesBtn, this);
		utui.util.pubsub.subscribe(utui.constants.profile.CLEARED, this.toggleUnsavedChangesBtn, this);

		// Publish profile loaded event
		utui.util.pubsub.publish(utui.constants.profile.LOADING_COMPLETE);
	},
	initSearch:function(){
		// Populate searchDataInit with default values if empty
		if ($.isEmptyObject(utui.profile.searchDataInit)) {
			utui.profile.searchDataInit[localize.t('tiq.search.summary_tab')] = {tab: 'dashboard'};
			utui.profile.searchDataInit[localize.t('tiq.search.versions_tab')] = {tab: 'publish'};
			utui.profile.searchDataInit[localize.t('tiq.search.versions_history')] = {tab: 'publish', callback: function () {
				utui.publish.showHistory(utui.data.settings.revision)
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.tags_tab')] = {tab: 'manage', callback: function () {
				utui.filters.helper.resetTagsFilter();
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.tags_add_more')] = {tab: 'manage', callback: function () {
				utui.manage.marketplace.show();
				utui.filters.helper.resetTagsFilter();
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.manage_users')] = {callback: function () {
				utui.users.show();
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.extensions_tab')] = {tab: 'customizations', callback: function () {
				utui.filters.helper.resetExtensionsFilter();
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.extensions_add_more')] = {tab: 'customizations', callback: function () {
				utui.customizations.showAddExtensionDialog();
				utui.filters.helper.resetExtensionsFilter();
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.load_rules_tab')] = {tab: 'loadrules', callback: function () {
				utui.filters.helper.resetLoadRulesFilter();
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.data_layer_tab')] = {callback: function () {
				utui.util.pubsub.publish(utui.constants.variables.FOCUSED);
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.data_layer_specifications_tab')] = {callback: function () {
				// Load data layer specs if they have not been loaded yet, THEN switch to data layer spec tab
				utui.define.dataLayerSpecs.loadDataLayerSpecs(function () {
					utui.util.pubsub.publish(utui.constants.data_layer_specs.FOCUSED);
				});
			}};
			utui.profile.searchDataInit[localize.t('tiq.search.verify_data_layer_tab')] = {callback: function () {
				utui.util.pubsub.publish(utui.constants.test_configs.FOCUSED);
			}}
		}

		// refresh autocomplete search terms
		utui.profile.searchData = {};
		utui.profile.searchData = utui.util.cp(utui.profile.searchDataInit);
		var idx = 0;
		var sort = utui.util.getVars(utui.data.manage,3,'sort');
		for(var i in utui.util.getVars(sort,1)){
			if(typeof utui.config.manageList[sort[i].tag_id] !='undefined'){
				var obj = utui.config.manageList[sort[i].tag_id],
					title = obj.title;
				if(obj.addMore == 'true' && typeof sort[i].title !='undefined' && sort[i].title.length>0){
					title += ': '+sort[i].title;
				}
				utui.profile.searchData[localize.t('tiq.search.tags_title', {title:_.unescape(title)})] = {
					tab: 'manage',
					accordion: idx,
					callback:function() {
						utui.profile.searchActivateAccordion('manage_content',this.accordion);
						utui.filters.helper.resetTagsFilter();
					}
				}
				// Cannot edit an imported tag Data Source mapping, so search term will only open up the tag, not the mapping tab
				if (!sort[i].imported) {
					utui.profile.searchData[localize.t('tiq.search.map_title', {title:_.unescape(sort[i].title)})] = {
						tab: 'manage',
						accordion: idx,
						callback: function () {
							utui.profile.searchActivateAccordion('manage_content', this.accordion);
							utui.manage.editTagSettings($('#manage_content').children()[this.accordion].id, 'variables');
							utui.filters.helper.resetTagsFilter();
						}
					}
				}
				else {
					utui.profile.searchData[localize.t('tiq.search.map_title', {title:_.unescape(sort[i].title)}) + " [" + sort[i].settings.profileid +  " (" + sort[i].imported + ")]"] = {
						tab: 'manage',
						accordion: idx,
						callback: function () {
							utui.profile.searchActivateAccordion('manage_content', this.accordion);
							utui.filters.helper.resetTagsFilter();
						}
					}
				}
				idx++;
			}
		}

		idx = 0;
		try{
			var sort = utui.util.getVars(utui.data.customizations,3,'sort');
			for(var i in utui.util.getVars(sort,1)){
				if(typeof utui.config.customizationList[sort[i].id] !='undefined'){
					var scope = sort[i].scope,
						title = localize.t('tiq.search.extensions_scope', {scope:scope});
					if (scope == 'global'){
						title = localize.t('tiq.search.extensions_all_tags');
					} else if(scope == 'footer'){
						title = localize.t('tiq.search.extensions_footer');
					} else if(scope == 'preload'){
						title = localize.t('tiq.search.extensions_preloader');
					} else if(scope == 'domready'){
						title = localize.t('tiq.search.extensions_dom_ready');
					} else{
						try {
							title = localize.t('tiq.search.extensions_scope', {scope:utui.config.manageList[utui.data.manage[scope].tag_id].title});
						} catch(e){};
					}

					var extensionTitleKey = title + ': ' + utui.config.customizationList[sort[i].id].title+': ' + _.unescape(sort[i].title);
					if (utui.config.customizationList[sort[i].id].addMore == 'false'){
						extensionTitleKey = title + ': ' + utui.config.customizationList[sort[i].id].title;
					}

					utui.profile.searchData[extensionTitleKey] = {
						tab: 'customizations',
						accordion: idx++,
						callback:function() {
							utui.profile.searchActivateAccordion('customize_content',this.accordion);
							utui.filters.helper.resetExtensionsFilter();
						}
					}

				}
			}
		}catch(e){}

		idx = 0;
		utui.profile.searchData[localize.t('tiq.search.load_rules_all_pages')] = { tab: 'loadrules', accordion: idx++, callback:function(){
				utui.profile.searchActivateAccordion('loadrules_content',this.accordion);
				utui.filters.helper.resetLoadRulesFilter();
			}
		};
		for(var i in utui.util.getVars(utui.data.loadrules,1)){
			utui.profile.searchData[localize.t('tiq.search.load_rules_title', {title:utui.data.loadrules[i].title})] = {
				tab: 'loadrules',
				accordion: idx++,
				callback:function(){
					utui.profile.searchActivateAccordion('loadrules_content',this.accordion);
					utui.filters.helper.resetLoadRulesFilter();
				}
			}
		}

		// Default Label/Filter
		idx = -1;
		// Load Rules
		utui.profile.searchData[localize.t('tiq.search.load_rules_filter', {filter:utui.labels.ALL_LABELS})] = {
			tab: 'loadrules',
			accordion: idx,
			callback: function () {
				utui.profile.searchActivateAccordion('loadrules_content', this.accordion);
				utui.filters.helper.resetLoadRulesFilter();
			}
		}

		// Tags
		utui.profile.searchData[localize.t('tiq.search.tags_filter', {filter:utui.labels.ALL_LABELS})] = {
			tab: 'manage',
			accordion: idx,
			callback: function () {
				utui.profile.searchActivateAccordion('manage_content', this.accordion);
				utui.filters.helper.resetTagsFilter();
			}
		}

		// Extensions
		utui.profile.searchData[localize.t('tiq.search.extensions_filter', {filter:utui.labels.ALL_LABELS})] = {
			tab: 'customizations',
			accordion: idx,
			callback: function () {
				utui.profile.searchActivateAccordion('customize_content', this.accordion);
				utui.filters.helper.resetExtensionsFilter();
			}
		}

		// Data Layer
		utui.profile.searchData[localize.t('tiq.search.data_layer_filter', {filter:utui.labels.ALL_LABELS})] = {
			tab: 'define',
			callback: function () {
				$('#filter_showall').trigger('click');
			}
		}

		// Display search results for user Labels/Filters
		var allLabels = utui.labels.getLabels();
		for (var key in allLabels) {
			var labelName = _.unescape(utui.labels.getLabelNameById(key));

			// Load Rule Filters
			utui.profile.searchData[localize.t('tiq.search.load_rules_filter', {filter:labelName})] = {
				tab: 'loadrules',
				accordion: idx,
				filter: key,
				callback: function () {
					utui.profile.searchActivateAccordion('loadrules_content', this.accordion);
					utui.loadrules.filterConditions.label.id = this.filter;
					utui.loadrules.filter(utui.loadrules.filterConditions);
				}
			}

			// Tags Filters
			utui.profile.searchData[localize.t('tiq.search.tags_filter', {filter:labelName})] = {
				tab: 'manage',
				filter: key,
				accordion: idx,
				callback: function () {
					utui.profile.searchActivateAccordion('manage_content', this.accordion);
					utui.manage.filterConditions.label.id = this.filter;
					utui.manage.filter(utui.manage.filterConditions);
				}
			}

			// Extensions Filters
			utui.profile.searchData[localize.t('tiq.search.extensions_filter', {filter:labelName})] = {
				tab: 'customizations',
				filter: key,
				accordion: idx,
				callback: function () {
					utui.profile.searchActivateAccordion('customize_content', this.accordion);
					utui.customizations.filterConditions.label.id = this.filter;
					utui.customizations.filter(utui.customizations.filterConditions);
				}
			}

			// Data Layer Filters
			utui.profile.searchData[localize.t('tiq.search.data_layer_filter', {filter:labelName})] = {
				tab: 'define',
				filter: key,
				callback: function () {
					// clear previous filters
					$('#filter_showall').trigger('click');
					// set current filter
					$('#label_filter_' + this.filter).trigger('click');
				}
			}
		}


		var searchDataArray = [];
		for(var i in utui.util.getVars(utui.profile.searchData,2)){
			searchDataArray.push(i);
		}

		$( "#global_search" ).autocomplete({
			source: searchDataArray,
			position: { my: 'right top', at: 'right bottom', collision: 'none' },
			select: function(event,ui){

				var searchItem = utui.profile.searchData[ui.item.value];
				var activeTab = $('#tabs .ui-tabs-selected a').attr('id').split('_')[1];

				if(typeof searchItem.tab !== 'undefined') {
					if(utui.config.tabList[activeTab].id == utui.config.tabList[searchItem.tab].id){
						if(typeof searchItem.callback !== 'undefined'){
							searchItem.callback();
						}

					} else {
						if(typeof searchItem.callback !== 'undefined'){
							utui.profile.searchQueue = function(){searchItem.callback()};
						}

						utui.profile.changeFocusFlag = false;
						$('#tabs').tabs('select', utui.config.tabList[searchItem.tab].sort);
					}

				} else {
					if(typeof searchItem.callback !== 'undefined') {
						searchItem.callback();
					}

				}
			},
			close: function(event,ui){
				$('#global_search').val('');
			}
		});
	},
	searchActivateAccordion:function(container,accordion){

		var active = $('#'+container).accordion('option','active');

		if(active !== accordion){
			if(utui.config.currentTab == 'manage'){
				$('#manage_content').accordion('activate', accordion);
			} else {
				$('#'+container).accordion('option','animated',false).accordion('activate',accordion).accordion('option','animated',true);
			}
		}
	},
	setSearchFocus:function(){
		if(utui.profile.changeFocusFlag){
			$('#global_search').val('');
			setTimeout("$('#global_search').focus()",250);
		}else{
			utui.profile.changeFocusFlag = true;
		}
	},
	menuToggle:function(el, callback){
		var self = this;
		var menuToggle = (function() {
			if($('#'+el).is(':visible') && $('#clickcapture').is(':visible')){
				self.disposeClickCapture();
			}else{
				$('.menu_list_container').hide();
				$('#'+el).slideDown('fast');
				self.enableClickCapture();
			}
		})();
		// Reserved for callback function
		if(callback) { callback(); }
	},
	enableClickCapture:function() {
		var self = this;
		$('#clickcapture').show();
		$('#clickcapture').off().on('click', function() {
			self.disposeClickCapture();
		});
	},
	disposeClickCapture:function(loadVersion) {
		if (!loadVersion) {
			var $profileAccount = $('#profile_account');
			if ($profileAccount.val() !== utui.login.account) {
				// Reset the profile account drop-down lists to the loaded account
				$profileAccount.val(utui.login.account).trigger('change');
			}
		}

		$('#clickcapture').hide();
		$('.menu_list_container').hide();
		$('.jp_wrapper').hide();
	},
	menuSetRecentList: function () {
		var self = this;
		var recentQueue = utui.profile.recent.queue;

        if (recentQueue.length > 1) {
            var content = '<div class="menulistheaderfont">' + localize.t('tiq.profile.recent_history') + '</div>',
                counter = 0,
	            previousTitle;


            for (var i = recentQueue.length - 1; i >= 0; i--) {
            	if(!recentQueue[i].title) {
            		recentQueue[i].title = localize.t('tiq.profile.initial_publish');
            	}

				if (recentQueue[i].title !== previousTitle) {
					content += '<div class="menulistitem">';
					content += '<a class="menulistfont wordwrap" href="javascript:utui.profile.getRevision(utui.profile.recent.queue[' + i + '])">' + recentQueue[i].account + '/' + recentQueue[i].profile + '/' + recentQueue[i].title + '</a>';
					content += '</div>';
					if (++counter > 3) break;
				}
				previousTitle = recentQueue[i].title;
			}

			content += '<div class="menudivider"></div>';
			$('#recentprofiles').html(content);
		}

		$('#recentprofiles').on('click', 'a', function (e) {
			e.stopImmediatePropagation();
			self.disposeClickCapture();
		});
	},
	menuSetAccountList:function(cb){
		//TODO:can no longer use utui.login.accounts, need to make an async call instead
		$('#profile_account').children().remove();

		// make an ajax request to get all of the accounts for this user
		utui.service.get(utui.service.restapis.GET_ACCOUNTS, {}, null, function(data) {
			if(data) {
				var accounts = data.accounts,
					$profileSelect = $("#profile_account");

				utui.login.accounts = accounts.sort();
				var sortAccounts = utui.login.accounts.sort(utui.util.caseInsensitiveSort);

				for(var i = 0; i < sortAccounts.length; i++) {
					var account = sortAccounts[i];
					$profileSelect.append($("<option></option>").attr("value",account).text(account));
				}
				$profileSelect.val(utui.login.account);

				if(cb) {
					cb();
				}
			}

		});
	},
	menuSetProfileList: function (a, b) {
		var account = (b && b.account) || utui.login.account,
			v = '';
    
    	$("#profile_account").val(account); //IE "HACK" to force UI to update to what we have selected
			$('#profile_profileid').children().remove().end();
			utui.profile.getProfiles(null, { account: account, profile: utui.login.profile }, function (data) {
				if (data.profiles) {
					var sortProfiles = data.profiles.sort(utui.util.caseInsensitiveSort);
					for (b = 0; b < sortProfiles.length; b++) {
						var profile = sortProfiles[b];
						v += $('<option/>')
							.text(_.unescape(profile))
							.val(_.unescape(profile))[0].outerHTML;
					}
					$("#profile_profileid").append(v);
					utui.profile.profiles[account] = sortProfiles;

					// Default the current selected version if the account matches
					if (typeof utui.data.settings !== 'undefined') {
						if (utui.data.settings.account == account) {
							$("#profile_profileid").val(utui.data.settings.profileid);
						}
					}

					utui.profile.profile_count = sortProfiles.length;

					utui.profile.bReloadProfileMenu = false;
				} else {
					utui.profile.profile_count = 0;
				}
				utui.profile.menuShowButton();
				utui.profile.menuSetRevisionsList(false, {account : account});
			}, true);
	},
	menuSetRevisionsList:function(isOnClick, data){
		
		if (!data) data = {};
		
		var account = data.account || $('#profile_account :selected').val() || utui.login.account,
			profile = data.profile || $('#profile_profileid :selected').val() || utui.login.profile,
			$profileRevision = $('#profile_revision'),
			versionKey = account + '|' + profile;
    
    $("#profile_profileid").val(profile); //IE "HACK" to force UI to update to what we have selected
		
		var menuAccountValue = $('#profile_account :selected').val();
		var menuProfileValue = $('#profile_profileid :selected').val();

		function isCurrentAccount(name) {
			return (name === utui.login.account) ? true : false;
		}

		function isCurrentProfile(name) {
			return (name  === utui.login.profile) ? true : false;
		}

		// CONDITION #1 No Profile Exists (does not ever get called...)
		if(profile === '') return $('#lastrevision').hide();

		// CONDITION #2 Use previously loaded revisions
		if(versionKey in utui.profile.recentVersions) {
			$profileRevision.html(utui.profile.recentVersions[versionKey]);
			utui.profile.createComboBox();

			if (isOnClick) {
				$('#profile_revision-autocomplete').autocomplete("search", "");
				$('#profile_revision-autocomplete').focus(); // fix for revisions not closing
			}
			return;
		}

		if(isOnClick) {
			// CONDITION #3 Currently loaded profile has the revision list available in publish history
			if(isCurrentProfile(menuProfileValue) && isCurrentAccount(menuAccountValue)) {
				utui.profile.menuSetRevisionsListFromHistory();
				return;
			}

			// CONDITION #4
			var countRevisions = 0;

			$profileRevision.children().remove().end();

			utui.profile.menuToggleRevisionLoad();

			utui.profile.getRevisions(null, { account: account, profile: profile }, function (data) {
				utui.profile.getRevisionsCallback(data);
				if (data.revisions) {
					var sortRevisions = [];
					for (var i in utui.util.getVars(data.revisions, 1)) {
						sortRevisions.push(i);
						countRevisions++;
					}

					for (var i = sortRevisions.length - 1; i >= 0; i--) {
						$profileRevision.append($('<option></option>').attr('value', sortRevisions[i]).text(data.revisions[sortRevisions[i]]));
					}

					utui.profile.recentVersions[versionKey] = $profileRevision.html();
					// Default the current selected version if the account and profile match
					if (utui.data.settings && utui.data.settings.account == $('#profile_account :selected').text()) {
						if (utui.data.settings.profileid == $('#profile_profileid :selected').text()) {
							$profileRevision.val(utui.data.settings.revision);
						}
					}
				}
				utui.profile.createComboBox();
				$('#profile_revision-autocomplete').autocomplete("search", "");
				$('#profile_revision-autocomplete').focus(); // fix for revisions not closing
				utui.profile.menuToggleRevisionLoad();
			});

			if(countRevisions > 0) {} else {
				$('#loadversion_button').show();
			}
			return;
		}

		// CONDITION #5: if no information is present, set Latest Revision
		return utui.profile.setLatestRevision();
	},
	menuSetRevisionsListFromHistory:function(){
		var publishHistory = utui.util.getVars(utui.data.publish_history, 1),
			sortRevisions = [],
			$profileRevision = $('#profile_revision'),
			length = 0,
			$lastVersion = {},
			settings = utui.data.settings;

		utui.profile.menuToggleRevisionLoad();
		for ( var revision in publishHistory){
			sortRevisions.push(revision);
		}
		length = sortRevisions.length;
		if(length){
			$profileRevision.html('');
		}
		while(length--){
			$profileRevision.append($('<option></option>').attr('value',sortRevisions[length]).text(utui.profile.getRevisionTitle(sortRevisions[length])));
		}
		utui.profile.recentVersions[settings.account+'|'+settings.profileid] = $profileRevision.html();
		$lastVersion = $($profileRevision.children()[0])
		$profileRevision.val($lastVersion.val());
		$('#profile_revision-autocomplete').val(_.unescape($lastVersion.text()));
		utui.profile.menuToggleRevisionLoad();
	},
	menuShowButton:function(){
		($('#profile_revision :selected').val() == '__none__')?$('#loadversion_button').hide():$('#loadversion_button').show();
	},
	menuToggleRevisionLoad:function(){
		($('.ui-revision-loading').is(':visible'))?$('.ui-revision-loading').hide():$('.ui-revision-loading').show();
	},
	reload: function (bNoConfirm, isMergeInitiated) {
		utui.ping.pingSent = false;
		utui.profile.isMergeInitiated = isMergeInitiated;

		var settings = utui.data.settings,
			obj = {
				account: settings.account,
				profile: settings.profileid,
				revision: "" + settings.revision
			},
			callback = function() {
				utui.publish.showMakeCopyOption(true);
				utui.sharedSessionManager.profileJustLoaded(); // call profileJustLoaded to clear unneeded concurrency warnings
			}

		// Reset concurrentDialog flags first to avoid race condition of onPingResponse getting called first resulting in wrong message displayed
		utui.hasShownConcurrentReloadDialog = false;
		utui.hasShownConcurrentPendingChangesDialog = false;
		utui.sharedSessionManager._reloadRequired = false;

		utui.profile.getRevision(obj, callback, bNoConfirm);
	},
	getProfiles:function(eventObj, dataObj, callback, nomodal){
		if(typeof nomodal=='undefined') {
			utui.util.loadingModalStart(localize.t('tiq.profile.retrieving_available_profiles'));
		}
		dataObj.cb = Math.random();

		utui.service.get(utui.service.restapis.GET_PROFILES, dataObj, {async : false}, callback ? callback : utui.profile.getProfilesCallback);
	},

	getProfilesCallback:function(a,b,c){
		utui.util.loadingModalStop();
	},
	getRevisions:function(eventObj, dataObj, callback){
	  dataObj.cb = Math.random();

	  utui.service.get(utui.service.restapis.GET_REVISIONS, dataObj, null, callback ? callback : utui.profile.getRevisionsCallback);
	},
	getRevisionsCallback:function(a,b,c){
	},
	// We make the profile request after the get labels request is complete since the profile is dependent on the labels
	getProfile:function(eventObj, dataObj, callback){
		utui.util.loadingModalStart(localize.t('tiq.profile.retrieving_profile_data'));
		dataObj.cb = Math.random();

		utui.service.get(utui.service.restapis.GET_PROFILE, dataObj, null,
			function(data) {
				// Now we need to get the labels before we process the profile
				utui.labels.request.getLabels({account:data.settings.account, profile:data.settings.profileid, version:data.settings.revision||data.revision}, function(labelData) {
					// Set the labels to the returned labels if returned
					if (labelData) {
						data.labels = labelData.labels;
					}

					if (callback) {
						callback(data);
					} else {
						utui.profile.getProfileCallback(data);
					}
				});
			},
			function(status, response){
				utui.profile.getProfileCallbackError(status, response, dataObj);
			}
		);
	},
	getProfileCallback:function(data){
		var isMergeInitiated = utui.profile.isMergeInitiated;

		// Only run import scripts when Merge is not active
		var bRunImportScripts = (isMergeInitiated) ? false : true;

		if(typeof data.settings === "undefined") {
			utui.util.loadingModalStop();

			var message = localize.t('tiq.profile.error.error_retrieving_account_combination');

			if(typeof data.credentials!='undefined'){
				message = data.credentials;
			}

			utui.publish.showCredentialsModal(message, function(){
				utui.profile.menuToggle('profile_menu_list', function() {});
			});

			utui.util.setSession(true);

			return;
		}
		utui.profile.clearProfileData();

		utui.login.account = data.settings.account;
		utui.login.profile = data.settings.profileid;

		utui.profile.lastAccount = data.settings.account;
		utui.profile.lastProfile = data.settings.profileid;
		utui.profile.lastRevision = data.settings.revision;
		utui.profile.revision_mapping = data.revision_mapping;
		utui.profile.image_url = data.image_url;

		if(bRunImportScripts) {
			utui.profile.modifiedImportConfigs = data.modifiedImportConfigs;
			utui.profile.import.migrateImportExtensions = data.migrateImportExtensions;
		}

		// Object to secure label relationships
		if (data.label_relationships && $.type(data.label_relationships) === 'string') {
			utui.data.label_relationships = JSON.parse(utui.util.safeUnescape(data.label_relationships));
		}

		var item = data.settings.account+'/'+data.settings.profileid+'/'+data.settings.revision;
		utui.profile.recent.keys[item] = 1;
		utui.profile.recent.queue.push({account:data.settings.account, profile:data.settings.profileid, revision: data.settings.revision, title: data.title});

		var tab = (typeof data.initialTab !== 'undefined') ? data.initialTab : utui.config.initialTab;

		// reset concurrent user message
		utui.sharedSessionManager._reloadRequired = false;

		// reset the imported_from records
		utui.profile.import.importedProfiles = {};
		utui.profile.import.conflictLoadRules = [];
		utui.customizations.privacyMgrExtId = '';

		for(var i in utui.util.getVars(utui.config.tabList)){
			var dataObj = data[i];
			if (dataObj) {
				// Set imported meta-data on each object
				for (k in dataObj) {
					var obj = dataObj[k];
					if (obj.imported && obj.imported !== utui.profile.import.AUDIENCE_STREAM) {
						// remove labels from imported items
						delete obj.labels;

						// Set metadata into data model
						// WE need to know which items are imported and where they were imported from
						// Then when we get ready to import inherited profiles we know which items to delete and re-import
						// so that we always have the newest importable tags, extensions, etc.
						utui.profile.import.importedProfiles['imported_from_'+obj.settings.account+'_'+obj.settings.profileid] = {name: obj.settings.profileid, revision : obj.settings.revision, env: obj.imported.toLowerCase()};
					}

					if (i === utui.config.tabList.customizations.tab && utui.customizations.privacyMgrExtId === '') {
						if (obj.id === '100026') {
							utui.customizations.privacyMgrExtId = obj._id;
						}
					}
				}
				utui.data[i] = dataObj;
			}
			else {
				utui.data[i] = {};
			}
		}

		dsapi.initialize();

		utui.profile.setPrivacyManagementData(data.privacy_management);
		utui.profile.setSettingsData(data.settings);
		utui.profile.setPublishData(data.publish_history);
		utui.profile.setCurrentProfile();
		utui.profile.updateLastId();
		utui.profile.setLabelsData(data.labels);
		utui.labels.removeDeletedLabelIds(['define','manage','loadrules','customizations']);

		var tabMap = {
			define: { handler: 'setDefineData', key: 'define'},
			loadrules: { handler: 'setLoadRulesData', key: 'loadrules'},
			manage: { handler: 'setManageData', key: 'manage'},
			customizations: { handler: 'setCustomizationsData', key: 'customizations'},
			reports: { handler: 'setReportsData', key: 'reports'}
		}

		for(var i in utui.util.getVars(tabMap)){
			utui.profile[tabMap[i].handler](data[tabMap[i].key]);
		}

		utui[tab].show();
		utui.util.loadingModalStop();
		try{
			$('#tabs').tabs('select',utui.config.tabList[tab].sort);
		} catch(e){
			TRACE(e);
		}

		 $('.columnToggle').attr('title', utui.tooltip.labels.expand_collapse)
			.tipsy({gravity: 's'})
			.safeOn('click', utui.labels.helper.toggleExpandLabel);

		utui.util.setSession(true);
		utui.profile.clear();

		if(bRunImportScripts) {
			utui.profile.import.resolveMappings();
		}


		// ----------------------
		var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;
		if(diffapi.isStashed(profileKey)) {
			// store updated changes
			diffapi.setStash(profileKey, 'current', diffapi.runUtuiAnalysis('_original_data','data')); // their changes
		}

		// Make duplicate data object for diff'ing against changed data
		utui['original_data'] = $.extend(true, {}, utui.data);

		// ----------------------

		utui.util.pubsub.publish(utui.constants.profile.LOADED);

		if(bRunImportScripts) {
			utui.util.pubsub.publish(utui.constants.profile.LIBRARY_IMPORT);
		}

		// Load the account information then the user since it is dependent on some account info being populated
		// This will only load the account if the user has loaded a different account than the previous
		utui.account.getAccount(function() {
			// Retrieve the logged in user (along with the permissions) This is required so we can use these permissions to determine what access this user has
			utui.users.loadUser(utui.login.email, function (success) {
				if (success) {
					utui.profile.updateAdminMenu();
					utui.util.pubsub.publish(utui.constants.users.LOADED);
					utui.profile.updatePublishButton();
				}

				utui.profile.setAudienceStreamData(data);
			});
		});

		// Switch merge flag off after callback
		utui.profile.isMergeInitiated = false;

	},
	getProfileCallbackError: function(status, response, data) {
		utui.util.loadingModalStop();

		if (response && response.status === 401) {
			utui.util.showPermissionErrorDialog();

		} else if (utui && utui.util) {
			data = data || {};
			var responseText = {};

			// Parse the responseText(body)
			try {
				responseText = utui.util.safeParseJSON(response.responseText);
			} catch (e) {}

			// Cannot switch to new account if MFA is required
			if (responseText.returnCode === 1425) {
				utui.profile.handleAccountRequiresMFA(data.account, data.profile);

			} else {
				utui.util.showMsgDialog(localize.t('tiq.profile.error.unable_to_load_profile', {name: data.profile}), localize.t('tiq.profile.profile_error'));
			}

		}
	},
	handleAccountRequiresMFA: function(account, profile) {
		var MFA_REQUIRED = "mfaRequired";

		//content, title, buttons, options, callback
		var buttons = [
			{
				text:localize.t('tiq.dialog.button.logout'),
				click: function() {
					// Store the account / profile in local storage
					utui.util.storage.storeLocal(MFA_REQUIRED, JSON.stringify({login_account:account, login_profile:profile}));
					utui.users.logout();
				},
				id: MFA_REQUIRED + '_logoutBtn'
			},
			{
				text:localize.t('tiq.dialog.button.cancel'),
				click: function(e) {
					// Remove key from local storage if it is still lingering for some reason
					utui.util.storage.removeLocal(MFA_REQUIRED);

					e.stopImmediatePropagation();
					$(this).dialog('close');
				},
				id: MFA_REQUIRED + '_saveBtn',
				style:'float:left; margin-left: 12px'
			}
		];
		var options = {};
		utui.util.showDialog(localize.t('tiq.profile.error.1425', {name: account}), localize.t('tiq.profile.access_denied'), buttons, options);
	},
	setCurrentProfile:function(){
		$("#currentprofile").show();
		$('#profile_legend_account').html(utui.data.settings.account);
		$('#profile_legend_profile').html(utui.data.settings.profileid);
		$('#profile_legend_revision').html(utui.util.safeEscape(utui.profile.getRevisionTitle(utui.data.settings.revision)));
		$('#profile_profileid').val(utui.data.settings.profileid);
	},
	setLatestRevision:function(){
		var account = $('#profile_account :selected').val(),
		profile = $('#profile_profileid :selected').val(),
		text = localize.t('tiq.profile.latest_version');
		if(account === utui.login.account && profile === utui.login.profile && utui.data.settings){
			text = utui.profile.getRevisionTitle(utui.data.settings.revision);
		}
		$('#profile_revision').html('');
		$('#profile_revision').append(
			$('<option/>')
				.text(_.unescape(text))
				.val('latestversion')
		);
		utui.profile.createComboBox();
		$('#loadversion_button').show();
	},
	getRevisionTarget:function(revision) {
		return (revision && revision.status) ? revision.status : "";
	},
	getRevisionPublisher:function(revision) {
		return (revision && revision.operator) ? revision.operator : "";
	},
	getAllRevisions:function(versionId) {
		return utui.data.publish_history[versionId];
	},
	getLastRevision:function(versionId) {
		var max=0;
		for(var i in utui.util.getVars(utui.data.publish_history[versionId])){
			var j = parseInt(i);
			if(j > max)max = j;
		}
		return (max > 0) ? utui.data.publish_history[versionId][max] : null;
	},
	getRevisionTitle:function(id){
		var max=0;
		for(var i in utui.util.getVars(utui.data.publish_history[id])){
			var j = parseInt(i);
			if(j > max)max = j;
		}
		return (max > 0)?utui.data.publish_history[id][max].title:localize.t('tiq.profile.no_title') + ' ('+utui.util.formatDate(id)+')';
	},
	updateLastId:function(){
		for(var i in utui.util.getVars(utui.data.publish_history,1)){
			for(var j in utui.util.getVars(utui.data.publish_history[i],1)){
				var historyManage = utui.util.numericValueOf(utui.data.publish_history[i][j].lastmanageid);
				var versionManage = utui.util.numericValueOf(utui.data.settings.lastmanageid);
				if(historyManage > versionManage){
					utui.data.settings.lastmanageid = historyManage;
				}
				var historyCustomize = utui.util.numericValueOf(utui.data.publish_history[i][j].lastcustomizeid);
				var versionCustomize = utui.util.numericValueOf(utui.data.settings.lastcustomizeid);
				if(historyCustomize > versionCustomize){
					utui.data.settings.lastcustomizeid = historyCustomize;
				}
			}
		}
	},
	// Sets a flag indicating if the current revision is the latest
	setIsLatestVersion:function() {
		var currentVersion = utui.data.settings.revision;
		utui.profile.isLatestVersion = true;

		// Check to see if the current version is the latest
		var newestVersion = utui.sharedSessionManager.getNewestVersion();
		if (newestVersion > currentVersion) {
			utui.profile.isLatestVersion = false;
		}

		if (!utui.profile.isLatestVersion || utui.sharedSessionManager._isMinorRevisionOutOfDate) {
			// show the revision warning...
			utui.profile.showVersionWarningMessage();
		} else {
			// Hide the revision warning...
			utui.profile.hideVersionWarningMessage();
		}
	},
	// Displays a warning message indicating the user is viewing an earlier version
	showVersionWarningMessage: function () {
		if (!utui.profile.isLatestVersion || utui.sharedSessionManager._isMinorRevisionOutOfDate) {
			// Get newest version info (id, title)
			var versionID = utui.sharedSessionManager.getNewestVersion(),
				warningMsg = localize.t('tiq.profile.you_are_viewing_an_old_version'),
				versionTitle = utui.profile.getRevisionTitle(versionID);

			if (utui.sharedSessionManager._isMinorRevisionOutOfDate){
				warningMsg = localize.t('tiq.profile.you_are_viewing_an_old_revision');
			}
			utui.profile.versionWarningID = versionID;

			var $div = $('<div id="version_warning">' + warningMsg + ' <a href="#" onclick="utui.publish.editDeploy(\'' + versionID + '\')"><span id="warningVersionTitle">' + versionTitle + '</span></a>.</div>');
			utui.profile.warningMessage.show($div, function () {
				// Update the console height
				utui.profile.HEADER_HEIGHT = 118 + $('#warning_message').outerHeight();
				utui.profile.consoleHeight();
				$('#latest_tool_tip').fadeOut();
			});
		}
	},
	// Hides the version warning message
	hideVersionWarningMessage: function () {
		utui.profile.warningMessage.hide('version_warning', function () {
			utui.profile.versionWarningID = null;

			// Update the console height
			utui.profile.HEADER_HEIGHT = 118;
			utui.profile.consoleHeight();
			if ($('#latest_tool_tip').length) {
				$('#latest_tool_tip').show();
			}
		});
	},
	// Shows/hides a warning message under the tab bar
	warningMessage: {
		show : function($content, onComplete) {
			var $warning_message = $('#warning_message');
			if (!$warning_message.get(0)) {
				$warning_message = $('<div id="warning_message"></div>');
				$warning_message.insertBefore($("#tabs-dashboard"));
			}
			// Watch out for duplicates!
			var $el =  $('#' + $content.attr('id')),
				elIndex = 0;
			if ($el.get(0)) {
				// Remove the element as there may be new content within
				// Get's the index to add the new content so it is in the same position
				elIndex = $el.index();
				$el.remove();
			}

			$warning_message.insertAt(elIndex, $content);
			$content.show();
			$content.animate({opacity:1}, 500, function() {
				if ($warning_message.is(":hidden")) {
					$warning_message.css({height:""});
					$warning_message.stop(true).slideDown(700, function() {
						if (onComplete) {
							onComplete();
						}
						// notice a bug that slideDown will add height:0 and overflow:hidden
						// which prevents the entire element from displaying. Here's the fix!

					});
				}
			});
		},
		hide : function(id, onComplete) {
			var $warning_message = $('#warning_message');
			if ($warning_message.get(0) && $warning_message.is(':visible')) {
				var $el = $('#' + id);

				$el.animate({opacity:0}, 500, function(){
					$(this).remove();

					// Hide if element exists and is the only child
					if ($warning_message.children().length == 0) {
						$warning_message.css({height:""});
						$warning_message.stop(true).slideUp(700, function() {
							//$el.remove();
							if (onComplete) {
								onComplete();
							}
						});
					}
				});
			}
		}
	},

	/*
	 * Save Tab Data
	 * @param (tab) string - tab name
	 * @param (showModal) boolean - determines whether we show a processing modal during save
	 * @param (isImportedData) boolean - used below to update data source mapping
	 *
	 */

	saveTabData:function(tab, showModal, isImportData){
		if(utui.login.switchTabFlag){
			utui.login.switchTabFlag = false;
			return;
		}

        // Modal START
        if(showModal != false) {
            utui.util.loadingModalStart(localize.t('tiq.profile.saving_data'));
        }

		$('#dialog-show-comments').dialog('destroy');

		// ----------------------------------------------------------
		// Tags Tab
		if (tab === "manage") {
			//Sync Container Map with last opened tag
			if (utui.manage.lastOpenedContainer != '') {
				utui.manage.syncDOMInputsWithContainerMap(utui.manage.lastOpenedContainer);
			}

			// Sync utui.data.manage with Container Map
			utui.data.manage = {};
			var myContainerMap = utui.manage.containerMap;

			for (var myTag in myContainerMap) {
				var currentTag = myContainerMap[myTag];
				// save load rule selection
				if (currentTag.loadrule === utui.manage.mlrSelVal) {
					currentTag.loadrule = currentTag.multipleLoadRules;
					currentTag.loadrule;
				} else {
					if (currentTag.loadrule.indexOf(',') < 0) {
						delete currentTag.multipleLoadRulesTitle;
					}
				}

				var idx = currentTag.id;
				utui.data.manage[idx] = currentTag;

				if (typeof utui.data.manage[idx].title == 'undefined') {
					utui.data.manage[idx].title = utui.config.manageList[utui.data.manage[idx].tag_id].title;
				}
				if (typeof utui.config.manageList[utui.data.manage[idx].tag_id].save_handler == 'function') {
					utui.config.manageList[utui.data.manage[idx].tag_id].save_handler(myTag, idx);
				}

				// Need to copy label from utui.manage if they exist, the reason we are doing this is because utui.data.manage
				// is getting completely wiped, so all of the references previously set are destroyed
				var existingLabelsForCurrentTag = currentTag.labels;
				if (existingLabelsForCurrentTag) {
					utui.data.manage[idx].labels = existingLabelsForCurrentTag;
				}
			}

			if (!isImportData) {
				// Update ds mappings
				dsapi.initialize();
			}
		}

		// Refresh Search
		this.initSearch();

		// Set session
		utui.util.setSession(true);

		// Modal STOP
		if(showModal != false) {
			utui.util.loadingModalStop();
		}
	},

	clearProfileData:function(){
		utui.profile.clear();
		for(var i in utui.util.getVars(utui.config.tabList)){
			if(utui.data && utui.data[i])utui.data[i] = {};
		}
		if(utui.data.publish_history)utui.data.publish_history={};
		if(utui.data.settings)utui.data.settings={};

		// Delete the label relationships
		if (utui.data.label_relationships) delete utui.data.label_relationships;

		utui.profile.searchData = utui.util.cp(utui.profile.searchDataInit);

		var a = document.getElementsByTagName("input");
		for(var i=0;i<a.length;i++){
			a[i].value = "";
		}

		a = document.getElementsByTagName("textarea");
		for(var i=0;i<a.length;i++){
			a[i].value = "";
		}

		a = document.getElementsByTagName("select");
		for(var i=0;i<a.length;i++){
			if(a[i] && a[i].id && a[i].id != 'profile_account' && a[i].id!='profile_profileid'){
				a[i].selectedIndex = 0;
			}
		}

		if(utui.profile)utui.profile.clear();
		if(utui.users)utui.users.clear();

		for(var i in utui.util.getVars(utui.config.tabList)){
			if(utui[i]&&utui[i].clear)utui[i].clear()
		}
	},

	setPublishData:function(data){
		if(data){
			var publishArr = [];
			try{
				for(var i in utui.util.getVars(data,1)){
					$('#publish_'+i).remove();
					utui.data.publish_history = {};
					publishArr.push(i);
				}
				publishArr = publishArr.sort(function(a,b){return a-b});
			}catch(e){}

			for(var k=0;k<publishArr.length;k++){
				var i=publishArr[k];
				if(typeof utui.data.publish_history[i]=="undefined"){
					utui.data.publish_history[i] = {};
				}
				var f = 0;
				var arr = [];
				var title = 'No Title ('+utui.util.formatDate(i)+')';
				var status = 'Not Published';
				for(var j in utui.util.getVars(data[i])){
					if(j=="status"){
						status = data[i][j];
					}else if(j=="title"){
						title = data[i][j];
					}else if(j=="size"){
						//do nothing
					}else{
						arr.push(j);
					}
				}
				arr = arr.sort(function(a,b){return b-a});

				for(var j=0;j<arr.length;j++){
					var obj = data[i][arr[j]];
					obj.id = i;
					obj.last = arr[j];
					obj.size = data[i].size;
					if(typeof obj.title == 'undefined' || obj.title == '')obj.title = title;
					utui.data.publish_history[i][arr[j]] = obj;
				}
			}

			utui.publish.history = utui.targets.addTargetsToObject({latest:''}, ''); //Reset Last Publishes

			for(var i in utui.util.getVars(utui.data.publish_history)){
					var pv = utui.data.publish_history[i]; //Publish version
					pv.publishState = utui.targets.addTargetsToObject({saved:''}, '');

					var targets = utui.targets.getList(),
						len = targets.length;
					for(var r in pv){ //r is revision
							if(typeof pv[r]['status'] != 'undefined' && r != 'publishState'){
									for (var j=0; j<len; j++) {
										utui.profile.setIfTarget(pv, targets[j], r);
									}
									if(pv[r].status != 'Not Published' && r > utui.publish.history.latest){utui.publish.history.latest = r+'_'+i}
							}
							if(r > pv.publishState.saved && r != 'publishState'){pv.publishState.saved = r}
					}

					for (var j=0; j<len; j++) {
						utui.profile.updateHistory(pv, targets[j], i);
					}
			}

			utui.publish.drawHistory(0,10);
		}
		utui.util.pubsub.publish(utui.constants.profile.SET_PUBLISH_DATA);
	},

	setIfTarget:function(pv, target, pr) {
		if(pv[pr].status && _.contains(pv[pr].status.split(','), target) && pr > pv.publishState[target]){pv.publishState[target] = pr;}
	},

	updateHistory:function(pv, target, i) {
		if(pv.publishState[target] > utui.publish.history[target]){utui.publish.history[target] = pv.publishState[target] +'_'+ i}
	},

	// ----------------------------------------------------------------
	setPrivacyManagementData: function (data) {
		utui.privacyManagement.init();
		utui.data.privacy_management = data || {};
		var oldDisplayAd = 'displayad';
		var oldBigData = 'bigdata';

    var explicit = utui.data.privacy_management.explicit;
    if (explicit) {
      //Fix Load Rules
      if (!explicit.loadrule) {
        explicit.loadrule = "all";
      }

      //Fix omittedTags
      if (!explicit.omittedTags) {
        explicit.omittedTags = "";
      }


      //Fix custom_tokens_definitions
      if (explicit.custom_tokens_definitions) {
        explicit.custom_tokens_definitions = _.toArray(explicit.custom_tokens_definitions);
      } else {
        explicit.custom_tokens_definitions = [];
      }

      //Fix Content Encoding
      if (explicit.content) {
        //TODO ab might need to look at using a lib like : https://github.com/mathiasbynens/he
        if (explicit.content.javascript) {
          explicit.content.javascript = _.unescape(explicit.content.javascript)
        }
        if (explicit.content.html) {
          explicit.content.html = _.unescape(explicit.content.html);
        }
        if (explicit.content.css) {
          explicit.content.css = _.unescape(explicit.content.css);
        }
      } else {
        //Fix in utui.privacyManagement
      }

      explicit.isAccountOverride = explicit.isAccountOverride === "true";
      explicit.isEnabled = explicit.isEnabled === "true";

      _.forEach(explicit.languages, function(language){
        language.isDefault = language.isDefault === "true";
        _.forEach(language.common_tokens, function(value, token){
          language.common_tokens[token] = _.unescape(value);
        });
        _.forEach(language.custom_tokens, function(value, token){
          language.custom_tokens[token] = _.unescape(value);
        });
      });

    }

		if (!$.isEmptyObject(utui.data.privacy_management.preferences)) {
			// fix categories
			var _tealiumGenericTagId = "20067",
          _pm_p_categories = utui.data.privacy_management.preferences.categories;
			if (_pm_p_categories) {
				for (var i in utui.util.getVars(_pm_p_categories)) {
					var tags = [];
					_pm_p_categories[i].enabled = (_pm_p_categories[i].enabled === 'true');
					if (_pm_p_categories[i].tagid) {
						for (var j in _pm_p_categories[i].tagid) {
							_pm_p_categories[i].tagid[j].isOn = (_pm_p_categories[i].tagid[j].isOn === 'true');
              if (_pm_p_categories[i].tagid[j].tag_id === _tealiumGenericTagId && //only start if for generic tag
                !_pm_p_categories[i].tagid[j].id && //if there is an id then we don't need to do the following
                !utui.data.privacy_management.preferences.expanded_generic) { //stop if we have done this before
                utui.data.privacy_management.preferences.expanded_generic = true;
                var _generics = _.where(utui.data.manage,{tag_id:_tealiumGenericTagId});
                for (var k = 0; k < _generics.length; k++) {
                  tags.push({
                    id: _generics[k].id,
                    category:i,
                    isOn:_pm_p_categories[i].tagid[j].isOn,
                    tag_id:_tealiumGenericTagId,
                    tag_name:_pm_p_categories[i].tagid[j].tag_name
                  });
                }
                setTimeout(function () {
                	//Cause an update event to signify that the preferences config has been updated
                  utui.util.pubsub.publish(utui.constants.privacy_management.consent.UPDATED, {preferences: null});
                },0);
                continue;
              }
							tags.push(_pm_p_categories[i].tagid[j]);
						}
					}
					_pm_p_categories[i].tagid = tags;
					// Migrate Data
					if (i === oldDisplayAd) {
						var temp = _pm_p_categories[i];
						delete _pm_p_categories[i];
						_pm_p_categories['display_ads'] = temp;

					} else if (i === oldBigData) {
						var temp = _pm_p_categories[i];
						delete _pm_p_categories[i];
						_pm_p_categories['big_data'] = temp;
					}
				}
			}

			// fix languages
			if (utui.data.privacy_management.preferences.languages) {
				for (var i in utui.data.privacy_management.preferences.languages) {
					utui.data.privacy_management.preferences.languages[i].isDefault = (utui.data.privacy_management.preferences.languages[i].isDefault === 'true');
					if (utui.data.privacy_management.preferences.languages[i].categories) {
						for (var j in utui.data.privacy_management.preferences.languages[i].categories) {
							// Migrate Data
							if (j === oldDisplayAd) {
								var temp = utui.data.privacy_management.preferences.languages[i].categories[j];
								delete utui.data.privacy_management.preferences.languages[i].categories[j];
								utui.data.privacy_management.preferences.languages[i].categories['display_ads'] = temp;

							} else if (j === oldBigData) {
								var temp = utui.data.privacy_management.preferences.languages[i].categories[j];
								delete utui.data.privacy_management.preferences.languages[i].categories[j];
								utui.data.privacy_management.preferences.languages[i].categories['big_data'] = temp;
							}
						}
					}
				}
			}

			// fix custom tokens definitions
			if (utui.data.privacy_management.preferences.custom_tokens_definitions) {
				var customTokensDefinitions = [];
				for (var i in utui.data.privacy_management.preferences.custom_tokens_definitions) {
					customTokensDefinitions.push(utui.data.privacy_management.preferences.custom_tokens_definitions[i]);
				}
				utui.data.privacy_management.preferences.custom_tokens_definitions = customTokensDefinitions;
			}

			utui.data.privacy_management.preferences.single_cookie = (utui.data.privacy_management.preferences.single_cookie === 'true');
			utui.data.privacy_management.preferences.default_state = (utui.data.privacy_management.preferences.default_state !== 'false');
			utui.data.privacy_management.preferences.isAccountOverride = (utui.data.privacy_management.preferences.isAccountOverride === 'true');
			utui.data.privacy_management.preferences.isEnabled = (utui.data.privacy_management.preferences.isEnabled === 'true');
		}
	},

	setSettingsData:function(data){
		utui.data.settings = data;
		utui.util.pubsub.publish(utui.constants.profile.SETTINGS_UPDATED);
	},

	setProfileType: function(profileName, profileType) {
		// Set the library attribute for current profile
		if (profileName === utui.login.profile) {
			utui.data.settings.library = profileType;
		}
	},

	// ----------------------------------------------------------------
	updateEnvironmentAlias: function (data) {
		// No change has been made to environment aliases
		if (_.isEqual(data, utui.targets.getAliasList())) {
			return;
		}

		//Store data in profile data
		utui.data.settings.env_alias = { alias_info: data, user_last_modified: utui.login.email, date_last_modified: new Date().toISOString() };
		utui.profile.setDirty();

		utui.targets.updateEnvironmentUI(data);

		utui.util.pubsub.publish(utui.constants.tagging.EVENT, {action: utui.constants.environments.ALIAS, alias_changed: JSON.stringify(utui.targets.getAliasList())});
	},

	// ----------------------------------------------------------------
	setAudienceStreamData: function (data) {
		// Adds a history event but does NOT highlight the save/publish button
		if (data && data.datacloud_merge === 'true') {
			utui.data.settings.datacloud_revision = data.datacloud_revision;
			utui.data.settings.datacloud_profile = data.datacloud_profile_name
		}
	},

	setDefineData:function(data){
		utui.define.init();
		utui.define.dataLayerSpecs.init();
	},

	setManageData:function(data){
		utui.manage.init();
	},

	setManageConfig:function(data){
		for(var i in utui.util.getVars(data,1)){
			var configObj = document.getElementById(data.id + "_" + i);
			if(typeof configObj!="undefined"&&configObj){
				if(configObj.type=="text" || configObj.type=="textarea" || configObj.type=="hidden"){
					configObj.value = data[i];
				}else if(configObj.type=="checkbox"){
					configObj.checked = (data[i]=="1") ? true : false;
				}
			}
		}

		var index = 0;
		for(var i in utui.util.getVars(utui.data.vendors, 1)){
			if(utui.data.vendors[i].id == data.id){
				index = i;
				break;
			}
		}

		if(index!=0){
			if(typeof utui.data.vendors[index].codecondition != 'undefined' && utui.data.vendors[index].codecondition != ""){
			}else if(utui.data.vendors[index].loadconditions == "some" && typeof utui.data.vendors[index].loadcondition == 'object'){
				$("input[name="+data.id+"_loadconditions]:eq(1)").prop('checked',true);
				$("#"+data.id+"_loadcondition_editicon").html('<a href="#" onmousedown="javascript:utui.vendors.showLoadConditionsToolbox($(\'input[name='+data.id+'_loadconditions]:checked\'),\''+data.id+'\');return false" border="0"><span class="ui-icon ui-icon-pencil"></span></a>');
				if(!utui.manage.loadcondition[data.id]){
					utui.manage.loadcondition[data.id] = { data : [] };
				}
				for(var j in utui.util.getVars(utui.data.manage[index].loadcondition,2)){
					utui.manage.loadcondition[data.id].data.push(utui.data.manage[index].loadcondition[j]);
				}
			}
		}
	},

	setLoadRulesData:function(vendor, data){
		utui.loadrules.init();
	},

	setCustomizationsData:function(data){
		utui.customizations.init();
	},

	setLabelsData:function(data) {
		utui.labels.init(data);
	},

	setMapData:function(id, data){
		utui.util.loadingModalStart("Loading Variable Map Data");
		var counter = 0;
		for(var i in utui.util.getVars(data,1)){
			var key = data[i].type+'.'+data[i].key;
			$('#variablemapping_'+id+'_select option[value="'+key+'"]').remove();
			utui.map.addMapping({id:id,key:key,text:data[i].key + " ("+data[i].type+")",value:data[i].variable,counter:counter});
			counter++;
		}
		if(!utui.data.map){
			utui.data.map = {};
		}
		utui.util.loadingModalStop();
	},
	setReportsData:function(){
		utui.reports.init();
		utui.siteVerify.init();
 	},
	getRevisionConfirm:function(obj){
	    var confirmationContent = localize.t('tiq.profile.any_unsaved_changes');
	    $("#dialog-confirmation-content").html(confirmationContent);

		$("#dialog-confirmation").dialog({
			autoOpen: true,
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: false,
			closeText: "",
            resizable: false,
            draggable: true,
            buttons: [
                {
                    text: localize.t('tiq.dialog.button.yes'),
                    id: 'getRevisionConfirm_dialog_yesBtn',
                    click: function() {
                        utui.profile.clear();
                        utui.profile.getRevision(obj);
                        $(this).dialog('close');
                    }
                },
                {
                    text: localize.t('tiq.dialog.button.no'),
                    id: 'getRevisionConfirm_dialog_noBtn',
                    click: function() {
    					$(this).dialog('close');
    					utui.util.pubsub.publish(utui.constants.profile.CANCELLED_UNSAVED_CHANGES);
                    },
                    style: 'float:left; margin-left: 12px'
                }
            ]
        });

			$("#dialog").dialog("destroy");
			$("#dialog").show();
	},
	getRevision:function(obj, cb, bNoConfirm){
		//SHOW CONFIRM
		if (utui.profile.dirty == 1 && !bNoConfirm){
			utui.profile.getRevisionConfirm(obj);
		}
		else {

			if(utui.profile.isMergeInitiated) {
				// store previous state data (for stash feature)
				utui['_original_data'] = $.extend(true, {}, utui.original_data);
				utui['_data'] = $.extend(true, {}, utui.data);
			}

			var account = $('#profile_account :selected').val();
			var profile = $('#profile_profileid :selected').val();
			var revision = $('#profile_revision :selected').val();

			if(typeof obj != 'undefined' && obj.account && obj.profile && obj.revision){
				account = obj.account;
				profile = obj.profile;
				revision = obj.revision;

				$('#profile_account').val(account);
				$('#profile_profileid').val(profile);
				$('#profile_revision').val(revision);
				$('#profile_account').trigger('change');
			}

			var requestObj = {
				r: "getProfile",
				account: account,
				profile: profile

			}
			if(revision !== 'latestversion'){
				requestObj.revision = revision;
			}

			utui.profile.getProfile(null, requestObj, function(data){

				utui.profile.import.importedProfiles = {};
				data.initialTab = utui.config.currentTab;

				// reset validation
				utui.validation.init();

				if(utui.profile.isMergeInitiated) {
					// store our changes
					var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;
					diffapi.setStash(profileKey, 'source', diffapi.runUtuiAnalysis('_original_data','_data')); // incoming, my changes
				}

				// Build UTUI
				utui.profile.getProfileCallback(data);

				utui.profile.initSearch();
				$('#profile_revision').val(revision);
				utui.util.setSession(true);
				$('#profile_menu_list').hide();
				utui.login.account = account;
				utui.login.profile = profile;

                // utui.util.pubsub.publish(utui.constants.profile.LOADED);
				utui.sharedSessionManager.profileJustLoaded(); //Refresh UI to clear concurrent user warnings
				if(cb) {
					cb();
				}

				// This will re-create the combobox then populate the data
				utui.profile.updateComboBox();
				utui.profile.menuSetProfileList();
			});

			utui.historyManager.clear();
		}
	},
	createComboBox:function(){

		if((utui.login.accounts) && (utui.login.accounts.length > utui.profile.comboBoxCount || utui.profile.profile_count > utui.profile.comboBoxCount)) {
			$('#profile_account').combobox('destroy');
			$('#profile_profileid').combobox('destroy');
			$('#profile_revision').combobox('destroy');
			if(typeof utui.data.settings !== 'undefined'){
				$('#profile_account').combobox({ selected: utui.data.settings.account });
				$('#profile_profileid').combobox({ selected: utui.data.settings.profileid });
				$('#profile_revision').combobox({ selected: utui.data.settings.revision });
			}else{
				$('#profile_account').combobox({ selected: utui.login.account });
				$('#profile_profileid').combobox();
				$('#profile_revision').combobox();
			}
		}
	},
	updateComboBox:function() {
		$('#profile_menu_list select').prop("selected",false).combobox('destroy');

		$("#profile_account option[value='" + utui.data.settings.account + "']").prop("selected", "selected");
		$("#profile_profileid option[value='" + utui.data.settings.profileid + "']").prop("selected", "selected");
		$("#profile_revision option[value='" + utui.data.settings.revision + "']").prop("selected", "selected");

		$('#profile_menu_list select').combobox();
	},
	checkTab:function(name){
		var activeTab = $('#tabs .ui-tabs-selected a').attr('id').split('_')[1];
		if(activeTab != name){
			$('#tabs').tabs('select', utui.config.tabList[name].sort);
		}
	},

	// --------------------------------------------------------
	openItemAccordion: function (containerId, tab, uid, selector) {
		var $container = $('#' + containerId),
			isActive = $container.accordion('option', 'active'),
			accordionIndex = -1;

		// Switch tabs
		$('#tabs').tabs('select', tab);

		// Find accordion to open
		$container.find(selector).each(function (index) {
			if (this.innerHTML === uid) {
				accordionIndex = index;
				return false;
			}
		});

		// Open accordion
		if (accordionIndex !== -1 && accordionIndex !== isActive) {
			$container.accordion('activate', accordionIndex);
		}
	},

	// --------------------------------------------------------
	onTagsAdded: function (data) {
		var specialManageGroup =  utui.privacyManagement.util.getSpecialManageGroup;
		var isSpecialTag = false;
		var tag = data.data;
		var tealiumCollectID = "20064";
		var manageObj;
		var manageGroup;
		var newItem;
		var categoryObj;
		var tagExists = false;

		if (!$.isEmptyObject(utui.data.privacy_management.preferences) && tag) {
			if (tag.tag_id === tealiumCollectID) { // exclude Tealium Collect tag "20064"
				return;
			}
			isSpecialTag = (tag.tag_id === "20010" || tag.tag_id === "20011" ||  tag.tag_id === "20067");
			
			// check if tag exists in any of the categories
			for (var i in utui.data.privacy_management.preferences.categories) {
				categoryObj = utui.data.privacy_management.preferences.categories[i];
				if (!isSpecialTag) {
					tagExists = $.grep(categoryObj.tagid, function (obj) {
						return obj.tag_id === tag.tag_id;
					}).length

				} else { // special-case Tealium Custom Container tag "20010" or Tealium Pixel Container tag "20011"
					tagExists = $.grep(categoryObj.tagid, function (obj) {
						return obj.tag_id === tag.tag_id && obj.id === tag.id;
					}).length
				}

				// tag found, STOP for loop
				if (tagExists) {
					break;
				}
			}

			// tag does NOT exist in any category, ADD it to pre-defined category
			if (!tagExists) {
				manageObj = utui.config.manageList[tag.tag_id];
				manageGroup = specialManageGroup[manageObj.group];

				if (!isSpecialTag) {
					// if tag item does NOT exist yet, let's create it and insert it
					if (!$.grep(utui.data.privacy_management.preferences.categories[manageGroup.tab].tagid, function (obj) {
							return obj.tag_id === tag.tag_id;
						}).length) {
						// construct new item
						newItem = {
							"tag_id": tag.tag_id,
							"tag_name": manageObj.title,
							"isOn": true
						};
						// insert new item into category
						utui.data.privacy_management.preferences.categories[manageGroup.tab].tagid.push(newItem);
						utui.profile.setActionPerformed({
							action: utui.constants.privacy_management.consent.UPDATED,
							data: {
								id: utui.constants.privacy_management.consent.ID,
								name: utui.constants.privacy_management.consent.TYPE,
								kind: utui.constants.privacy_management.TYPE,
								operation: utui.constants.operation.UPDATED,
								container: 'privacy_management_list'
							}
						}, true);
					}

				} else { // special-case Tealium Custom Container tag "20010" or Tealium Pixel Container tag "20011"
					// if tag item does NOT exist yet, let's create it and insert it
					if (!$.grep(utui.data.privacy_management.preferences.categories[manageGroup.tab].tagid, function (obj) {
							return obj.tag_id === tag.tag_id && obj.id === tag.id;
						}).length) {
						// construct new item
						newItem = {
							"tag_id": tag.tag_id,
							"tag_name": manageObj.title,
							"id": tag.id,
							"isOn": true
						};
						// insert new item into category
						utui.data.privacy_management.preferences.categories[manageGroup.tab].tagid.push(newItem);
						utui.profile.setActionPerformed({
							action: utui.constants.privacy_management.consent.UPDATED,
							data: {
								id: utui.constants.privacy_management.consent.ID,
								name: utui.constants.privacy_management.consent.TYPE,
								kind: utui.constants.privacy_management.TYPE,
								operation: utui.constants.operation.UPDATED,
								container: 'privacy_management_list'
							}
						}, true);
					}
				}
			}
		}
	},

	// --------------------------------------------------------
	onTagsRemoved: function (data) {
		var isSpecialTag = false;
		var tag = data.obj;
		var categoryObj;
		var tagExists = false;
		var itemIndex = -1;

		if (!$.isEmptyObject(utui.data.privacy_management.preferences)) {
			isSpecialTag = (tag.tag_id === "20010" || tag.tag_id === "20011" ||  tag.tag_id === "20067");

			// Check if this is the last tag of type tag_id
			if (!isSpecialTag) {
				tagExists = $.map(utui.data.manage, function (obj) {
					if (obj.tag_id === tag.tag_id) {
						return obj;
					}
				}).length;

			} else { // special-case Tealium Custom Container tag "20010" or Tealium Pixel Container tag "20011"
				tagExists = $.map(utui.data.manage, function (obj) {
					if (obj.tag_id === tag.tag_id && obj.id === tag.id) {
						return obj;
					}
				}).length;
			}

			// No tags of same tag_id exist, go remove tag item from category
			if (!tagExists) {
				for (var i in utui.data.privacy_management.preferences.categories) {
					categoryObj = utui.data.privacy_management.preferences.categories[i];

					if (!isSpecialTag) {
						for (var j in categoryObj.tagid) {
							if (categoryObj.tagid[j].tag_id === tag.tag_id) {
								itemIndex = j;
								break;
							}
						}

					} else { // special-case Tealium Custom Container tag "20010" or Tealium Pixel Container tag "20011"
						for (var j in categoryObj.tagid) {
							if (categoryObj.tagid[j].tag_id === tag.tag_id && categoryObj.tagid[j].id === tag.id) {
								itemIndex = j;
								break;
							}
						}
					}

					// tag found, STOP for loop
					if (itemIndex !== -1) {
						// remove tag from category
						utui.data.privacy_management.preferences.categories[i].tagid.splice(itemIndex, 1);
						utui.profile.setActionPerformed({
							action: utui.constants.privacy_management.consent.UPDATED,
							data: {
								id: utui.constants.privacy_management.consent.ID,
								name: utui.constants.privacy_management.consent.TYPE,
								kind: utui.constants.privacy_management.TYPE,
								operation: utui.constants.operation.UPDATED,
								container: 'privacy_management_list'
							}
						}, true);
						break;
					}
				}
			}
		}
	},

	// --------------------------------------------------------
	announcementBar: function() {
		// PRIVATE
		var _namespace = 'announcementBar';

		var MSG_HEAD = 'We\'re making everyone\'s account more secure :)';
		var MSG_DESC = 'Multi-Factor Authentication will be enabled for your account on February 16th, 2016. <a href="#" onclick="utui.help.openCommunityLink(common.community.important_multi_factor_authentication_for_tealium); return false;">Learn more here</a>';

		var _view = {
			mfa_message: function() {
				var v = '';
					v += '<div class="bar-close">';
						v += '<a href="#" class="js-bar-dispose"> <i class="icon-remove"></i> </a>';
					v += '</div>';
					v += '<div class="bar-message">';
						v += '<h3>'+MSG_HEAD+'</h3>';
						v += '<p>'+MSG_DESC+'</p>';
					v += '</div>';
				return v;
			}
		};

		var _bindUI = {
			closeBtn: function() {
				$('#'+_namespace).find('.js-bar-dispose').on('click', _eventHandler.onCloseBtn)
			}
		};

		var _eventHandler = {
			onCloseBtn: function(e) {
				e.preventDefault();

				$('#'+_namespace).slideUp(400, function() {
					$('#'+_namespace).remove();
				});
			}
		};

		// --------------------------------------------------
		var _public = {
			initialize: function() {
				$('#'+_namespace).html(_view.mfa_message);
				_bindUI.closeBtn();

				$('#'+_namespace).slideDown();
			},
			showAnnouncementBar: function() {
				$('#'+_namespace).show();
			}
		};

		return _public;
	}()
}

// --------------------------------------------------------
function _onChangeSummaryBtnClick() {
	$(document).safeBind('mouseup.change_summary', function(event) {
		$('#global_diff_listing').slideUp();
		$(document).off('mouseup.change_summary');
	});
}

// --------------------------------------------------------
function _getItemAttributes(obj) {
	var _kind = obj.data.kind,
		_id = obj.data.id,
		_name = obj.data.name,
		_item = '',
		_isInherited = obj.data.imported;

	switch (_kind) {
		case utui.constants.variables.TYPE:
			_item = utui.data.define[_id];
			if(!_isInherited && _item) {
				_name = _item.name;
			}
			return { icon: '<i class="icon-globe" style="margin-left:5px;"></i>', name: _name, tab: 'tabs_' + utui.define.id };
		case utui.constants.data_layer_specs.TYPE:
			return { icon: '<i class="icon-file-text-alt" style="margin-left:5px;"></i>', name: _name, tab: 'tabs_' + utui.define.id };
		case utui.constants.test_configs.TYPE:
			return { icon: '<i class="icon-beaker" style="margin-left:5px;"></i>', name: _name, tab: 'tabs_' + utui.dashboard.id };
		case utui.constants.tags.TYPE:
			_item = utui.data.manage[_id];
			if(!_isInherited && _item) {
				_name = _item.title;
			}
			return { icon: '<i class="icon-tag" style="margin-left:5px;"></i>', name: _name, tab: 'tabs_' + utui.manage.id };
		case utui.constants.loadrules.TYPE:
			_item = utui.data.loadrules[_id];
			if(!_isInherited && _item) {
				_name = _item.title;
			}
			return { icon: '<i class="icon-book" style="margin-left:5px;"></i>', name: _name, tab: 'tabs_' + utui.loadrules.id };
		case utui.constants.extensions.TYPE:
			_item = utui.data.customizations[_id];
			if(!_isInherited && _item) {
				_name = _item.title;
			}
			return { icon: '<i class="icon-wrench" style="margin-left:5px;"></i>', name: _name, tab: 'tabs_' + utui.customizations.id };
		case utui.constants.labels.TYPE:
			return { icon: '', name: _name, tab: '' };
    case utui.constants.privacy_management.TYPE:
      return { icon: '<i class="icon-lock" style="margin-left:5px;"></i>', name: _name, tab: 'tabs_' + utui.dashboard.id };
		default:
			return '';
	}
}

// --------------------------------------------------------
function _getItemOperationIcon(obj) {
	var _operation = obj.data.operation,
		additionalValue = '',
		isLabelAction = obj.action && obj.action.indexOf('_label') > -1;

	switch (_operation) {
		case utui.constants.operation.ADDED: {
			// Change to Assigned if adding a label anywhere other than within the label manager
			if (isLabelAction && obj.data.kind !== 'Labels') {
				return '<i class="icon-plus"></i> ' + localize.t('tiq.profile.operation.assigned_label');
			}
			return '<i class="icon-plus"></i> ' + localize.t('tiq.profile.operation.added') + (isLabelAction ? ' Label' : '');
		}
		case utui.constants.operation.UPDATED:
			return '<i class="icon-adjust"></i> ' + localize.t('tiq.profile.operation.updated') + (isLabelAction ? ' Label' : '');
		case utui.constants.operation.REMOVED:
			return '<i class="icon-minus"></i> ' + localize.t('tiq.profile.operation.removed') + (isLabelAction ? ' Label' : '');
		case utui.constants.operation.TOGGLED:
			return '<i class="icon-adjust"></i> ' + localize.t('tiq.profile.operation.toggled');
		default:
			return '';
	}
}

function addTextInputItem(container, obj){
	var d,i,l;

	d = document.createElement("div");
	d.setAttribute("class","vendor_config");
	l = document.createElement("div");
	l.setAttribute("class","vendor_config_label");
	if(obj.title)l.setAttribute("title",obj.title);
	l.appendChild(document.createTextNode(obj.label));

	i = document.createElement("div");
	i.setAttribute("class","vendor_config_item");
	input = document.createElement("input");
	input.setAttribute("type","text");
	input.setAttribute("size",(obj.size)?obj.size:32);
	input.setAttribute("name",obj.name);
	if(obj.id)input.setAttribute("id",obj.id);
	if(obj.value)input.setAttribute("id",obj.value);
	if(obj.maxlength)input.setAttribute("maxlength",obj.maxlength);

	i.appendChild(input);
	d.appendChild(l);
	d.appendChild(i);

	if(obj.help){
		var img = document.createElement("span");
		img.setAttribute("class","ui-icon ui-icon-info");
		img.setAttribute("style","margin-top:3px");
		img.setAttribute("title",obj.help);
		d.appendChild(img);
	}

	if(obj.icon){
		var img = document.createElement('span');
		if(obj.iconhandler){
			img.setAttribute('class','ui-icon '+obj.icon+' clickable');

			var a = document.createElement('a');
			a.setAttribute('href','#');
			a.setAttribute('onclick', obj.iconhandler);
			a.setAttribute('class', 'ui-state-default ui-corner-all');
			a.setAttribute('style', 'float:left;margin-left:4px;margin-top:3px');
			a.appendChild(img);
			d.appendChild(a);
		}else{
			img.setAttribute('style','margin-top:3px');
			img.setAttribute("class","ui-icon "+obj.icon);
			d.appendChild(img);
		}
	}

	container.appendChild(d);
}

function addTextareaInputItem(container, obj){
	var d,i,l,h;

	h=(obj.rows?obj.rows:2)*18;

	d = document.createElement("div");
	d.setAttribute("class","vendor_config");
	d.setAttribute("style","height:"+h+"px");
	l = document.createElement("div");
	l.setAttribute("class","vendor_config_label");
	if(obj.title)l.setAttribute("title",obj.title);
	l.appendChild(document.createTextNode(obj.label));

	i = document.createElement("div");
	i.setAttribute("class","vendor_config_item");
	input = document.createElement("textarea");
	input.setAttribute("rows",(obj.rows)?obj.rows:2);
	input.setAttribute("cols",(obj.cols)?obj.cols:64);
	input.setAttribute("name",obj.name);
	if(obj.id)input.setAttribute("id",obj.id);
	if(obj.value)input.setAttribute("id",obj.value);

	i.appendChild(input);
	d.appendChild(l);
	d.appendChild(i);

	container.appendChild(d);
}

function addSelectInputItem(container, obj){
	var d,i,l,s;

	d = document.createElement("fieldset");
	var leg=document.createElement("legend");
	var legtitle = document.createElement("h4");
	legtitle.appendChild(document.createTextNode(obj.label));
	leg.appendChild(legtitle);
	d.appendChild(leg);

	l = document.createElement("div");
	l.setAttribute("class","vendor_config_labelmulti");
	l.appendChild(document.createTextNode(obj.message));

	i = document.createElement("div");
	i.setAttribute("class","vendor_config_itemmulti");

	s = document.createElement("select");
	if(obj.multiple){
		s.setAttribute("multiple",true);
		s.setAttribute("size",obj.multiple);
	}
	s.id = obj.id;
	s.name = obj.name;

	for(var j in obj.options){
		if(typeof obj.options[j] != "function"){
			var opt = document.createElement("option");
			opt.appendChild(document.createTextNode(obj.options[j]));
			opt.setAttribute("value",j);
			s.appendChild(opt);
		}
	}

	i.appendChild(s);
	d.appendChild(l);
	d.appendChild(i);
	container.appendChild(d);
}
function sortObject(o) {
	var sorted = {},
	key, a = [];

	for (key in o) {
		if (o.hasOwnProperty(key)) {
				a.push(key);
		}
	}

	a.sort();

	for (key = 0; key < a.length; key++) {
		sorted[a[key]] = o[a[key]];
	}
	return sorted;
}
//tealium tag management console - utui.loadrules, Copyright 2011 Tealium.com Inc. All Rights Reserved.
utui.profile.import = function() {
//  "use strict";
	// Public API
	var _public = {
		importedProfiles : {}, //maintains list of imported libraries and the revision to allow us to delete imported items and re-import
		importedLabels : {},
		_profiles : {},
		_requiredLibraries : {},
		_optionalLibraries : {},
		REQUIRED : 'required',
		OPTIONAL : 'optional',
		NONE : 'NONE',
		DEV : 'Dev',
		QA : 'QA',
		PROD : 'Prod',
		AUDIENCE_STREAM : "AudienceStream",
		targetList : ["Prod", "QA", "Dev"],
		DEFINE: "define",
		MANAGE: "manage",
		LOADRULES: "loadrules",
		CUSTOMIZATIONS: "customizations",
		libraryQueue : {
			requests: [],
			numLibraries: 0,
			completedImports: 0,
			timer: 0,
			intervalID : 0,
			numDataSources: 0,
			numLoadRules: 0,
			numTags: 0,
			numExtensions: 0,
			exemptExtensions: [],
			inheritanceInProgress: false,
			checkDone: function () {
				_public.libraryQueue.timer++;
				// Number of items in container maps should be equalTo or greater than the number of imported items
				if (_.size(utui.data.define) == _public.libraryQueue.numDataSources
					&& _.size(utui.loadrules.containerMap) == _public.libraryQueue.numLoadRules
					&& _.size(utui.manage.containerMap) == _public.libraryQueue.numTags
					&& _.size(utui.data.customizations) == _public.libraryQueue.numExtensions) {
					clearInterval(_public.libraryQueue.intervalID);
					_public.resolveMappings();
					utui.profile.import.updateDataModel();
					utui.util.loadingModalStop();
					utui.profile.import.checkConflictExtensions();
					_enableSavePublishButton();
				}
				else {
					if (_public.libraryQueue.timer > 10) {
						clearInterval(_public.libraryQueue.intervalID);
						_public.resolveMappings();
						utui.profile.import.updateDataModel();
						utui.util.loadingModalStop();
						utui.profile.import.checkConflictExtensions();
						_enableSavePublishButton();
					}
				}

				utui.validation.runValidationOnAllTabs();
			}
		},
		tempImportRelations: {},
		deletedImportDataSources: {}, // used to re-map load rules that were mapped to imported data sources
		deletedImportDataSourcesObj: [], // added by rayan
		deletedImportExtensions: {}, // used to re-map tags that were mapped to imported extension types
		deletedImportLoadRules: {}, // used to re-map tags that were conditionalized to imported load rules
		migrateImportExtensions : {},
		migrateImportDataSource: {}, //TODO: 12/12/2013 mo remove eventually
		migrateImportTags: {}, // rb - Note: keeps index of old tag ids and new tag ids when added (used for correcting extension scopes)
		conflictLoadRules: [],
		ignoreImportHistoryEvent : { assigned_label:1, removed_label:1, added_label:1, updated_label:1 },

		// ------------------------------------------------------------
		init: function () {
			var self = _public;

			// reset collections in-case profiles/libraries have been deleted
			self._profiles = {};
			self._requiredLibraries = {};
			self._optionalLibraries = {};
			self.profileList = [];

			self.libraryQueue.numDataSources = 0;
			self.libraryQueue.numLoadRules = 0;
			self.libraryQueue.numTags = 0;
			self.libraryQueue.numExtensions = 0;

			if (!utui.profile.modifiedImportConfigs) {
				utui.profile.modifiedImportConfigs = {};
			}

			self.libraryQueue.completedImports = 0;
			self.libraryQueue.numLibraries = 0;
			self.libraryQueue.exemptExtensions = [];
			self.libraryQueue.inheritanceInProgress = false;

			delete utui.data.templates;

			self.deletedImportDataSources = {};
			self.deletedImportDataSourcesObj = [];
			self.deletedImportExtensions = {};
			self.deletedImportLoadRules = {};
			self.migrateImportDataSource = {}; //TODO: 12/12/2013 mo remove eventually
			self.migrateImportTags = {}; //TODO: 12/12/2013 mo remove eventually

			if (!utui.profile.import.migrateImportExtensions) {
				utui.profile.import.migrateImportExtensions = {};
			}

			var editableProfiles = $('#profile_profileid').children(), //CACHE profiles before restapi call to avoid race condition in ff
					editable = {};

			utui.service.get(utui.service.restapis.GET_IMPORTABLE_LIBRARIES.replace("<account_name>", utui.login.account), null, null, function(allLibraries) {

				// Retain the list
				self.profileList = allLibraries;

				if (allLibraries.length === 0) { return; }

				// Construct list of existing editable profiles
				for(var i=0; i<editableProfiles.length; i++) {
					if(editableProfiles[i].text != '--' + localize.t('tiq.profile.select_profile') + '--') {
						editable[editableProfiles[i].text] = editableProfiles[i].text;
					}
				}

				// Compare list of existing editable profiles to all profiles
				var _allProfiles = [];
				for (var key in allLibraries) {
					var profile = allLibraries[key];

					// Set the library attribute for current profile
					utui.profile.setProfileType(profile.name, profile.library);

					// Set the editable flag for each profile
					if (editable[profile.name]) {
						profile.editable = true;
					}
					else {
						profile.editable = false;
					}

					if (!profile.library || profile.library === self.NONE) {
						// Check Permissions - Manage Profiles dialog will not show un-editable profiles
						if (profile.editable) {
							// add to profile list
							self._profiles[profile.name] = profile;
						}
						else {
							continue;
						}
					}
					else if (profile.library === self.REQUIRED) {
						self._requiredLibraries[profile.name] = profile;
					}
					else if (profile.library === self.OPTIONAL) {
						self._optionalLibraries[profile.name] = profile;
					}
					_allProfiles[profile.name] = profile;
				}

				// Check if there are any required libs that are not linked to profiles
				// This would happen if a required library was created while logged into another profile that does not have
				// permissions to all profiles

				if (_.size(self._requiredLibraries) > 0) {

					var requiredLibMap = [],
							optionalLibMap = [],
							requiredImports = [],
							profileImports = [];

					// Construct required imports array
					for (var libName in self._requiredLibraries) {
						requiredImports.push({environment: self.PROD, name: libName});
						requiredLibMap[libName] = {environment: self.PROD, name: libName};
					}
					for (var libName in self._optionalLibraries) {
						optionalLibMap[libName] = {environment: self.PROD, name: libName};
					}

					// Attach required imports to profiles that have no imports
					for (var profileName in self._profiles) {

						// profile has no required libraries attached to it
						if (!self._profiles[profileName].imports || _.size(self._profiles[profileName].imports) == 0) {
							profileImports.push({environment: self.PROD, name: profileName});
							self._profiles[profileName].imports = requiredImports;
						}
						// profile has some required libraries attached to it, but not all of them
						else if (_.size(self._profiles[profileName].imports) !== _.size(self._requiredLibraries)) {
							for (var reqs in requiredLibMap) {
								if ($.grep(self._profiles[profileName].imports, function(elem) { return elem.name == reqs; }) == 0) {
									self._profiles[profileName].imports = self._profiles[profileName].imports.concat(requiredLibMap[reqs]);
									self._requiredLibraries[reqs].imports = self._requiredLibraries[reqs].imports.concat({environment: self.PROD, name: profileName})
								}
								else { // Profile has required library linked to it that has been deleted
									for (var linkedLib in self._profiles[profileName].imports) {
										if (!requiredLibMap[self._profiles[profileName].imports[linkedLib].name] && !optionalLibMap[self._profiles[profileName].imports[linkedLib].name]) {
											self._profiles[profileName].imports = _removeImportFromProfile(self._profiles[profileName].imports, self._profiles[profileName].imports[linkedLib].name);
										}
									}
								}
							}
							self.persistLinkedLibraries();
						}
					}
					// Attach profile imports to required libraries
					if (_.size(profileImports) > 0) {
						for (var libName in self._requiredLibraries) {
							if (self._requiredLibraries[libName].imports) {
								self._requiredLibraries[libName].imports = self._requiredLibraries[libName].imports.concat(profileImports);
							}
							else {
								self._requiredLibraries[libName].imports = profileImports;
							}
						}
						self.persistLinkedLibraries();
					}
				}
				utui.profile.import.showProfileDialog().refresh();




				// Time to combine data from Required and Optionally linked libraries
				// ONLY perform import for Profiles, not required/optional libraries
				if (utui.profile.import.isProfile()) {
					var currentProfile = self._profiles[utui.data.settings.profileid],
							needsUpdateDataModel = false;

					// Clean up any data that needs to be removed
					for (var libraryName in self.importedProfiles) {

						// If library has been deleted OR optional library has been unlinked from profile
						if ((typeof self._optionalLibraries[self.importedProfiles[libraryName].name] === 'undefined' && typeof self._requiredLibraries[self.importedProfiles[libraryName].name] === 'undefined')
							|| (typeof self._optionalLibraries[self.importedProfiles[libraryName].name] !== 'undefined' && $.grep(currentProfile.imports, function(elem) { return elem.name == self.importedProfiles[libraryName].name; }) == 0)) {

							self.importedProfiles[libraryName].forceHistoryEvent = true;
							_deletePreviousImportData(self.importedProfiles[libraryName].name, {"define" : utui.data.define, "customizations" : utui.data.customizations, "loadrules" : utui.data.loadrules, "manage" : utui.manage.containerMap});
							_public.resolveMappings();

							delete self.importedProfiles[libraryName];
							needsUpdateDataModel = true;
						}
					}

					if (currentProfile && currentProfile.imports) {
						for (key in currentProfile.imports) {

							var libraryName = currentProfile.imports[key].name,
									env = currentProfile.imports[key].environment.toLowerCase(),
									importProfile = self.importedProfiles['imported_from_'+utui.data.settings.account+'_'+libraryName];

							if (typeof importProfile === 'undefined'
								|| importProfile.revision !== _allProfiles[libraryName].revision
								|| importProfile.env.toLowerCase() !== env) {

								// A new revision of the library was published
								// delete previous imported items and re-import latest profile revision
								if (importProfile
									&& _allProfiles[libraryName]
									&& _allProfiles[libraryName].env_revisions
									&& _allProfiles[libraryName].env_revisions[env]
									&& (importProfile.revision !== _allProfiles[libraryName].env_revisions[env])) {

									//Updating the imported data instead now
									importProfile.forceHistoryEvent = true;
									needsUpdateDataModel = true;
								}
								// The linked library target environment was changed
								else if (importProfile && importProfile.env && (importProfile.env.toLowerCase() !== env)) {
									importProfile.forceHistoryEvent = true;
									needsUpdateDataModel = true;
								}

								// Only saved and published libraries will have env_revisions
								if (_allProfiles[libraryName]
									&& _allProfiles[libraryName].env_revisions
									&& _allProfiles[libraryName].env_revisions[env]) {
									self.libraryQueue.requests.push({account: utui.data.settings.account, profileid: libraryName, revision: _allProfiles[libraryName].env_revisions[env], environment: env});
									self.libraryQueue.numLibraries++;
								}
							}
							else {

							}
						}
					}

					// Update Data model after ALL previous import data has been deleted
					if (needsUpdateDataModel) {
						utui.profile.saveTabData(_public.CUSTOMIZATIONS, false, true); // hack to resolve conflicting extensions from failing to import when they should; This can be removed once extensions are refactored and are not relying on saveTabData.
						utui.profile.import.setLibraryQueueItemImported(true); // don't increment completed imports
					}

					// Get counts of local items before inheriting from libraries
					if (utui.data.define) {
						self.libraryQueue.numDataSources += _.size(utui.data.define);
					}
					if (utui.loadrules.containerMap) {
						self.libraryQueue.numLoadRules += _.size(utui.loadrules.containerMap);
					}
					if (utui.manage.containerMap) {
						self.libraryQueue.numTags += _.size(utui.manage.containerMap);
					}
					if (utui.data.customizations) {
						self.libraryQueue.numExtensions += _.size(utui.data.customizations);
					}

					if (self.libraryQueue.requests.length > 0 && !self.libraryQueue.inheritanceInProgress) {
						utui.util.loadingModalStart(localize.t('tiq.profile.inheriting_library_data'));
						_disableSavePublishButton();
					}

					while (self.libraryQueue.requests.length != 0) {
						self.combineProfile(self.libraryQueue.requests.pop());
					}
				}
			});
			self.mergeFunctions = {
				getContainer : function (tab, uid) {
					var n, containerMap = utui[tab].containerMap;
					for (n in containerMap) {
						if (containerMap.hasOwnProperty(n)) {
							if (containerMap[n].id === uid) {
								return n;
							}
						}
					}
					return '';
				},
				updating: function (newData, action, env, translationMatrix, rev, m_rev) {

					for (var i in utui.util.getVars(newData[action])) {
						var updated = false,
								skipAr = 'sort|id|_id|settings|imported|libraryId|labels',
								skipTest,
								newConf = newData[action][i], oldConf = utui.data[action][i];

						if (action === _public.CUSTOMIZATIONS) {
							skipTest = new RegExp('^('+skipAr+'|scope|type|rule|populaterule|publishedTargets|\\d+_loadrule)$'); //scope sorted out later
						} else if (action === _public.LOADRULES) {
							skipTest = new RegExp('^('+skipAr+'|containerId|oldId|editable)$');
						} else if (action === _public.MANAGE) {
							skipTest = new RegExp('^('+skipAr+'|loadrule|_multipleLoadRules|multipleLoadRules|scope|tag_id|publishedTargets)$');
						} else if (action === _public.DEFINE) {
							if (oldConf.title !== newConf.title ||
								oldConf.name !== newConf.name ||
								oldConf.type !== newConf.type ||
								oldConf.description !== newConf.description) {
								utui.define.updateDataSource({
									title: oldConf.title,
									name: oldConf.name,
									type: oldConf.type,
									desc: oldConf.description
								}, {
									title: newConf.title,
									name: newConf.name,
									type: newConf.type,
									desc: newConf.description
								}, i);
								updated = true;
							}
						}

						if (action !== _public.DEFINE) {
							updated = this.processConfigs(action, newConf, oldConf, skipTest, updated);
						}

						//Use translation maxtrix to re-map extensions/loadruels
						if (utui.data[action][i].imported) {
							updated = this.libToLocalConversions(false, action, newData, i, translationMatrix, updated, rev, m_rev);
						}
						if (utui.data[action][i].imported && utui.data[action][i].imported !== env) {
							utui.data[action][i].imported = env;
							updated = true;
						}
						if (!updated) {
							//If no update occured then remove, and continue
							delete newData[action][i];
							continue;
						}
						//LR

						//Create data object for creating events in the publish history
						itemObj = utui.data[action][i];
						this.inheritanceCreateHistoryEvent(action, itemObj);
					}
				},
				processConfigs: function(action, newConf, oldConf, skipTest, updated) {
          if (!oldConf) return;
					var skipFun = function(el) {
							return !skipTest.test(el)
						},
						nkeys = Object.keys(newConf).filter(skipFun).sort(),
						okeys = Object.keys(oldConf).filter(skipFun).sort(),
						changedValues = {};

					if (action === _public.MANAGE) {
						var _config;
						var _name = oldConf.libraryId + oldConf.settings.profileid;
						if (utui.profile.modifiedImportConfigs[_name]) {
							_config = utui.profile.modifiedImportConfigs[_name];
						} else if (utui.profile.modifiedImportConfigs[oldConf.libraryId]) { //TODO Old structure, Remove in the future, convert to new format
							_config = utui.profile.modifiedImportConfigs[_name] = utui.profile.modifiedImportConfigs[oldConf.libraryId][oldConf.tag_id];
							delete utui.profile.modifiedImportConfigs[oldConf.libraryId];
						}
						if (_config) {
							for (var _prop in utui.util.getVars(_config)) {
								newConf[_prop] = _config[_prop];
							}
						}

						if (typeof newConf.publish_revisions === 'undefined'){ // Prevent any exceptions in the comparison from a missing publish_revisions object from an old library
							newConf.publish_revisions = { last_modified : utui.config.lastServerTimestamp.substring(0,12), svr_save_timestamps : {} };
						}
						if (oldConf.publish_revisions){
							// Ensure that only recently modified tags from the library get detected
							if (newConf.publish_revisions.last_modified < oldConf.publish_revisions.last_modified) {
								newConf.publish_revisions = oldConf.publish_revisions
							}
							// Inherited tag's server timestamps are irrelavant to this tag's published timestamps and cause unnecessary marking of unchanged tags
							newConf.publish_revisions.svr_save_timestamps = oldConf.publish_revisions.svr_save_timestamps;
						} else {
							oldConf.publish_revisions  = { last_modified : utui.config.lastServerTimestamp.substring(0,12), svr_save_timestamps : {} };
						}
					}

					var removed = [];
					for (var l = 0; l < okeys.length; l++) {
						if ($.inArray(okeys[l], nkeys) === -1) {
							removed.push(okeys[l]);
						}
					}

					for (var k = 0; k < nkeys.length; k++) {
						var j = nkeys[k];
						var _newConf = newConf[j];
						if (j === "code") {
							_newConf = utui.util.safeUnescape(_newConf)
						}
						var isSelectedTargets = ((action === _public.MANAGE || action === _public.CUSTOMIZATIONS) && j === "selectedTargets");
						if ((action === _public.LOADRULES && /^\d+$/.test(j)) || isSelectedTargets) {
							//Is a load rule condition
							_newConf = utui.util.sortedObject(_newConf);
							oldConf[j] = utui.util.sortedObject(oldConf[j]);
						}
						
						if (utui.util.typeOf(oldConf[j]) === "object") {
              oldConf[j] = utui.util.recursiveSortedObject(oldConf[j]);
						}
            
            if (utui.util.typeOf(_newConf) === "object") {
              _newConf = utui.util.recursiveSortedObject(_newConf);
            }
						
						if (!utui.util.isEqual(oldConf[j], _newConf)) {
							changedValues[j] = {
								'new': _newConf,
								'old': oldConf[j]
							};
							updated = true;
							if (isSelectedTargets){
								_.each(_newConf,function(nv,nk){ oldConf[j][nk] = nv; });
							} else {
								oldConf[j] = _newConf;
							}
						}
					}

					for (var k = 0; k < removed.length; k++) {
						var j = removed[k];
						updated = true;
						try {
							delete oldConf[j];
						} catch (e) {
							oldConf[j] = undefined;
						}
					}

					//Special case for Privacy manager, categories
					if (action === _public.CUSTOMIZATIONS && newConf.id === "100026" && Object.keys(changedValues).length === 1 && changedValues['categories']) {
						updated = false;
					}

					return updated;
				},
				inheritanceCreateHistoryEvent : function(action, itemObj) {
					var data, id = "" + (itemObj._id || itemObj.id);

					if (action === _public.LOADRULES) {
						data = {
							name: utui.loadrules.containerMap[itemObj.containerId].title,
							imported: itemObj.imported,
							library: (itemObj.imported) ? itemObj.settings.profileid : '',
							container: this.getContainer(_public.LOADRULES, id)
						};
						utui.loadrules.view.updateLR(itemObj);
					} else if (action === _public.MANAGE) {
						data = {
							tag_name: itemObj.tag_name || utui.util.getTagNameFromTagId(itemObj.tag_id),
							name: itemObj.title,
							container: this.getContainer(_public.MANAGE, id)
						};
					} else if (action === _public.CUSTOMIZATIONS) {
						data = {
							name: itemObj.title,
							type: itemObj.id,
							container: _public.CUSTOMIZATIONS+'_' + id
						};
					} else if (action === _public.DEFINE) {
						data = {
							name: itemObj.name,
							type: itemObj.type,
							container: "defineObjectsList"
						};
					}
					var constant = utui.util.getConstantFromTabName(action);
					data.id = id;
					data.operation = utui.constants.operation.UPDATED;
					data.kind = constant.TYPE;
					data.name = _.unescape(data.name);

					utui.profile.setActionPerformed({action: constant.UPDATED,data: data},true);
				},
				libToLocalConversions: function(isAdd, action, newData, idx, translationMatrix, updated, rev, m_rev) {
					var newID = isAdd ? translationMatrix[action][idx] || idx : idx;
					if (action === _public.MANAGE) {
						var lr_arr = this.convertIDsLocalToLib(newData.manage[idx].loadrule, _public.LOADRULES, translationMatrix);
						var lr_str = lr_arr.join(',');
						if (isAdd || utui.data.manage[newID].loadrule !== lr_str) {
							utui.data.manage[newID].loadrule = lr_str;
							if (lr_arr.length > 1) {
								utui.data.manage[newID].multipleLoadRules = lr_str;
								utui.data.manage[newID]._multipleLoadRules = lr_str;
							}
							updated = true;
						}

						var mapping = {};
						jQuery.extend(true, mapping, newData.manage[idx].map);
						for (var k in utui.util.getVars(mapping)) {
							if (mapping[k].dsID) {
								mapping[k].dsID = translationMatrix[_public.DEFINE][mapping[k].dsID];
							}
						}
            if (utui.util.typeOf(utui.data.manage[newID].map) === "object") {
              utui.data.manage[newID].map = utui.util.recursiveSortedObject(utui.data.manage[newID].map);
            }
            
            if (utui.util.typeOf(mapping) === "object") {
              mapping = utui.util.recursiveSortedObject(mapping);
            }
						if (utui.data.manage[newID].map && !utui.util.isEqual(utui.data.manage[newID].map, mapping)) {
							utui.data.manage[newID].map = mapping;
							updated = true;
						}
						utui.data.manage[newID].map = mapping;
					} else if (action === _public.CUSTOMIZATIONS) {
						if (isAdd && newData.customizations[idx] && newData.customizations[idx].id == 100005 && utui.customizations.addedCustomizations[100005]) {
							//special case as can only have 1 e-com exten
							return;
						}
						var scopes_arr = this.convertIDsLocalToLib(newData.customizations[idx].scope, _public.MANAGE, translationMatrix);
						scopes_arr = scopes_arr.join(',');
						if (isAdd || utui.data.customizations[newID].scope !== scopes_arr) {
							utui.data.customizations[newID].scope = scopes_arr;
							updated = true;
						}
						//Channels, Data Layer Validation, Currency Convertor extension uses load rules, we need to make sure that this has been updated to local ID
						var _obj = newData.customizations[idx],
							_type;
						if (_obj.populaterule && _obj.populaterule !== "all") {
							_type = "populaterule";
						} else if (_obj.rule && _obj.rule !== "all") {
							_type = "rule";
						} else if (_obj.id === "100031") {
							for (var _prop in utui.util.getVars(_obj)) {
								if (_prop.indexOf("loadrule") > -1) {
									_type = _prop;
									break;
								}
							}
						}

						if (_type) {
							var popRule = translationMatrix.loadrules[_obj[_type]];
							if (utui.data.customizations[newID][_type] !== popRule) {
								utui.data.customizations[newID][_type] = popRule;
								updated = true;
							}
						}

					} else if (!isAdd && action === _public.LOADRULES) {
						utui.loadrules.view.updateLR(utui.data.loadrules[newID]);
					}

					if (!isAdd) {
						utui.data[action][newID].settings.revision = rev;
						utui.data[action][newID].settings.minorrevision = m_rev;
					}

					return updated;
				},
				convertIDsLocalToLib: function (strList, type, translationMatrix) {
					var lr_arr = strList.split(',');
					for (var l = 0; l < lr_arr.length; l++) {
						if (parseInt(lr_arr[l])) {
							lr_arr[l] = translationMatrix[type][lr_arr[l]];
							if (lr_arr[l] === undefined) {
								lr_arr.splice(l, 1);
							}
						}
					}
					return lr_arr;
				},
			  tagTemplateLink : function(tag_id, library_profile, origin_id) {
          // tag templates - retrieve from library and save to profile
          if (typeof utui.data.templates === 'undefined') {
            utui.data.templates = {};
          }
          var newTag = 'utag.' + tag_id + '.js',
              tagPath = '/' + utui.data.settings.account + '/templates/' + library_profile + '/utag.' + origin_id + '.js';
          utui.data.templates[newTag] = tagPath;
			  },
        generateTranslationMatrix: function (translationMatrix, types, profile) {
          var i, j, type, _obj, libname, collection;
          for (j = 0; j < types.length; j++) {
            type = types[j];
            collection = utui.data[type];
            if (type === _public.MANAGE) {
              collection = utui.manage.containerMap;
            }
            for (i in utui.util.getVars(collection)) {
              _obj = collection[i];
              libname = (_obj.settings ? _obj.settings.profileid : "");
              if (libname && libname === profile) {
                translationMatrix[type][_obj.libraryId || _obj.settings.origin_id] = _obj._id;
              }
            }
          }
        },
        modifiedImportTagConfigCheck: function(tag, account) {
          var tagVendorConfigObj,
            _name = tag.libraryId+account,
            _state;
          if (utui.profile.modifiedImportConfigs[_name]) {
            _state = 1;
            tagVendorConfigObj = utui.profile.modifiedImportConfigs[_name];
          } else if (utui.profile.modifiedImportConfigs[tag.libraryId]) {
            tagVendorConfigObj = utui.profile.modifiedImportConfigs[tag.libraryId];
            _state=0;
            if (tagVendorConfigObj) {
              tagVendorConfigObj = tagVendorConfigObj[tag.tag_id];
            }
          }

          if (tagVendorConfigObj) {
            for (var configName in tagVendorConfigObj) {
              tag[configName] = tagVendorConfigObj[configName];
            }
          } else {
            if (_state===0) {
              delete utui.profile.modifiedImportConfigs[tag.libraryId];
            } else {
              delete utui.profile.modifiedImportConfigs[_name];
            }
          }
        }
			};
		},

		// ------------------------------------------------------------
		resolveMappings: function () {
			var defineMap = {},
					importedDefineMap = {};

			// Resolve Data Layer Mappings
			for (var i in utui.util.getVars(utui.data.define)) {
				if(!utui.data.define.hasOwnProperty(i)) continue;

				var ds = utui.data.define[i],
						localDataKey = ds.type + '.' + ds.name;

				defineMap[localDataKey] = i;

				// If data source has imported meta
				if (ds.settings && ds.settings.origin_id && ds.settings.profileid) {
					var importedDataKey = ds.type + '.' + ds.settings.origin_id + '.' + ds.settings.profileid;
					// If imported meta is Audience-stream related
					if (ds.imported && ds.imported === _public.AUDIENCE_STREAM && ds.settings.origin_type) {
						if (ds.context !== 'visitor') {
							importedDefineMap[importedDataKey] = {id: i, key: ds.context + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id};
						}
						else {
							importedDefineMap[importedDataKey] = {id: i, key: ds.settings.origin_type + '.' + ds.settings.origin_id};
						}
					}
					else {
						importedDefineMap[importedDataKey] = {id: i, key: ds.name};

						// Find Load Rules that were mapped to imported data source
						if (_public.deletedImportDataSources) {
							if (_public.deletedImportDataSources[importedDataKey]) {
								utui.loadrules.updateLRDataSource(_public.deletedImportDataSources[importedDataKey], localDataKey);
							}
							//TODO: 12/12/2013 mo
							// previous import data didn't have origin_id, so this data needs to be migrated
							// eventually this should be removed
							else if (_public.deletedImportDataSources[ds.type + '.' + ds._id + '.' + ds.settings.profileid]) {
								utui.loadrules.updateLRDataSource(_public.deletedImportDataSources[ds.type + '.' + ds._id + '.' + ds.settings.profileid], localDataKey);
							}
						}
					}
				}
			}

			// loop thru tags to find data source mappings that are no longer valid after library inheritance
			var tagData = utui.manage.containerMap;

			for (var key in tagData) {
				var container = tagData[key],
						settings = container.settings;

				if (!settings && container && container.map) {
					for (var j in container.map) {

						var tagMap = container.map[j],
								mapKey = tagMap.type + '.' + tagMap.key;

						if (!defineMap[mapKey]
							&& !utui.config.defItems[mapKey]
							&& tagMap.type.indexOf('customization') !== 0) {

							if (tagMap.origin_id) {
								var importedDataSource = importedDefineMap[tagMap.origin_id];
								if (importedDataSource) {
									// Data Source name changed in library
									// Update Tag map to point to updated data source name
									container.map[j].dsID = importedDataSource.id;
									container.map[j].key = importedDataSource.key;
								}
							} else {
								//TODO: 12/12/2013 mo
								// previous import data didn't have origin_id, so this data needs to be migrated
								// eventually this should be removed
								if (_public.migrateImportDataSource && _public.migrateImportDataSource[tagMap.type + '.' + tagMap.key + '.' + tagMap.dsID]) {
									var _ds = dsapi.getDataSource(_public.migrateImportDataSource[tagMap.type + '.' + tagMap.key + '.' + tagMap.dsID]);
									if (_ds) {
										container.map[j].dsID = "" + _ds.id;
										container.map[j].key = _ds.name;
										continue;
									}
								}
							}
						}
					}
				}
			}

			// loop thru load rules to find data source mappings that are no longer valid after AudienceStream profile inheritance
			_public.conflictLoadRules = [];
		},

		// ------------------------------------------------------------
		updateDataModel: function (isNotLibraryImport) {
			// Refresh current tab to display latest item imports/deletes from inherited libraries
			utui[utui.config.currentTab].show();

			utui.profile.setDefineData();
			utui.profile.saveTabData(_public.LOADRULES, false, true);
			utui.profile.saveTabData(_public.MANAGE, false, true);
			utui.dashboard.show();

			// Update ds mappings
			dsapi.initialize();

			if (!isNotLibraryImport && $('#global_save').hasClass('btn-warning')) {
				utui.util.showStatusMessage(localize.t('tiq.profile.library_data_successfully_updated'));
			}
			utui.util.pubsub.publish(utui.constants.profile.LIBRARY_IMPORT_FINISHED);
		},

		// ------------------------------------------------------------
		setLibraryQueueItemImported: function(isDelete) {
			var self = this;
			if (!isDelete) {
				self.libraryQueue.completedImports++;
			}
			if (self.libraryQueue.completedImports === self.libraryQueue.numLibraries || self.libraryQueue.numLibraries === 0) {
				clearInterval(self.libraryQueue.intervalID);
				self.libraryQueue.intervalID = setInterval(function() { self.libraryQueue.checkDone() }, 500);
			}
		},

		// ------------------------------------------------------------
		setImportOriginId: function (obj, origin_id) {
			// Perform a deep copy of a specified settings object
			var settings = $.extend(true, {}, obj.settings);
			settings.origin_id = origin_id;
			obj.settings = settings;
		},
		// ------------------------------------------------------------
		combineProfile: function (obj, cb, bNoConfirm) {
			var self = this;
			var account, profile, revision, env;


			if (typeof obj !== 'undefined' && obj.account && obj.profileid && obj.revision && obj.environment) {
				account = obj.account;
				profile = obj.profileid;
				revision = obj.revision;
				env = obj.environment;
			}
			else {
				self.setLibraryQueueItemImported();
				return; // Do not import a profile when the revision is not known
			}

			var importProfile = this.importedProfiles['imported_from_'+account+'_'+profile];
			// Check if we need to import
			if (importProfile && importProfile.revision === revision && importProfile.env === env) {
				// import record matches, no need to re-import
				self.setLibraryQueueItemImported();
				return;
			}

			// Add record to importedProfiles
			this.importedProfiles['imported_from_'+account+'_'+profile] = {name: profile, revision: revision, env: env, forceHistoryEvent: (typeof importProfile === 'undefined' || importProfile.forceHistoryEvent) ? true : false};

			var dataObj = {
				account: utui.login.account,
				profile: profile,
				environment: env
			};
			utui.service.get(utui.service.restapis.GET_PROFILE_FOR_ENV, dataObj, null, function (environment) {
				return function(data) {
					if (data) {
						//Fix for missing data points in retured object
						data.profile = data.profile || data.settings.profileid;
						data.account = data.account || data.settings.account;
						_reimportLibraryData(self, data, environment);
						// resolve data source mappings
						_updateExtensionMappingsToDataSource();

						// resolve extension scoping
						_updateExtensionScopingToTags(data.profile);

						var importProfile = self.importedProfiles['imported_from_' + data.account + '_' + data.profile];
						if (importProfile && !importProfile.forceHistoryEvent) {
							if (data.history) {
								// Add library history events to profile
								var libHistory = JSON.parse(data.history),
									addHistoryEvent,
									action;

								for (var event in libHistory) {
									addHistoryEvent = true;

									if (libHistory[event].data) {
										libHistory[event].data.imported = environment;
										libHistory[event].data.library = data.profile;
										if (libHistory[event].data.name) {
											libHistory[event].data.name = _.unescape(libHistory[event].data.name);
										}
									}

									// Since labels are not imported, we must ignore imported label events
									action = libHistory[event].action;
									if (action && (typeof self.ignoreImportHistoryEvent[action] !== 'undefined')) {
										addHistoryEvent = false;
									}

									if (addHistoryEvent) {
										utui.historyManager._events.push(libHistory[event]);
									}
								}

								utui.util.pubsub.publish(utui.constants.profile.CHANGED, /* profile not saved */false);
							}
						}
					}
				};
				utui.historyManager.clear();
			}(env));
		},
		// ------------------------------------------------------------
		persistLinkedLibraries: function (resetTempStorage) {
			var dataObj = [];
			for (var key in utui.profile.import._profiles) {
				dataObj.push(utui.profile.import._profiles[key]);
			}
			for (var key in utui.profile.import._requiredLibraries) {
				dataObj.push(utui.profile.import._requiredLibraries[key]);
			}
			for (var key in utui.profile.import._optionalLibraries) {
				dataObj.push(utui.profile.import._optionalLibraries[key]);
			}
			// store linked library relationships in db
			utui.service.put(utui.service.restapis.GET_IMPORTABLE_LIBRARIES.replace("<account_name>", utui.login.account), JSON.stringify(dataObj), {contentType : 'application/json'}, function (importRelations) {
				return function(allLibraries) {
					if (utui.profile.import.isProfile()) {
						// Changes were made to the logged-in profile - We must inherit latest library data now
						if (typeof importRelations[utui.login.profile] !== 'undefined') {
							utui.profile.import.init();
						}
					}
				};
			}(utui.profile.import.tempImportRelations));

			if (resetTempStorage) {
				// reset the temp storage
				utui.profile.import.tempImportRelations = {};
			}
		},
		// ------------------------------------------------------------
		revertLinkedLibraryChanges: function () {
			if (_.size(utui.profile.import.tempImportRelations) > 0) {
				for (name in utui.profile.import.tempImportRelations) {
					if (typeof utui.profile.import._profiles[name] !== 'undefined') {
						utui.profile.import._profiles[name].imports = utui.profile.import.tempImportRelations[name].imports;
					}
					else if (typeof utui.profile.import._optionalLibraries[name] !== 'undefined') {
						utui.profile.import._optionalLibraries[name].imports = utui.profile.import.tempImportRelations[name].imports;
					}
					else if (typeof utui.profile.import._requiredLibraries[name] !== 'undefined') {
						utui.profile.import._requiredLibraries[name].imports = utui.profile.import.tempImportRelations[name].imports;
					}
				}
				// reset the temp storage
				utui.profile.import.tempImportRelations = {};
			}
		},
		// ------------------------------------------------------------
		cleanCopiedItemOfImportInfo: function (obj) {
			delete obj.imported;
			delete obj.settings;
			delete obj.oldId;

			return obj;
		},

		// ------------------------------------------------------------
		checkConflictExtensions: function () {
			if (utui.profile.import.libraryQueue.exemptExtensions && utui.profile.import.libraryQueue.exemptExtensions.length > 0) {
				utui.customizations.conflictExtensionsConfirm(utui.profile.import.libraryQueue.exemptExtensions);
			}
		},

		showProfileDialog: function () {
			// PRIVATE
			// ----------------------------------------------------------------

			// References the wizard template
			var _templateWizard = utui.ui.templateWizard;

			// Specifies the namespace of the dialog for proper DOM injection
			var _namespace = 'manageProfile',
				_selectProfile = '---' + localize.t('tiq.profile.select_profile') + '---',
				_selectLibrary = '---' + localize.t('tiq.profile.select_library') + '---';

			var _availableLibraries = {},
					_availableProfiles = {};

			// Renders the initial wireframe of the wizard dialog
			var _render = {
				context: function () {
					var $context = $('#' + _namespace + '_context');

					$context.find('.wizard-context-header').html('');
					$context.find('.wizard-context-body').html(_view.navigation());

					// Binding
					_bindUI.addLibraryBtn();
					_bindUI.addProfileBtn();
				},
				content: function () {
					var $content = $('#' + _namespace + '_content');

					$content.find('.wizard-content-header').html(_view.contentHeader());
					$content.find('.wizard-content-body').html(_view.contentBody()).addClass(_namespace + 'Body');

					// Binding
					_bindUI.tab();
					_bindUI.addLinkBtn();
					_bindUI.deleteBtn();
					_bindUI.editBtn();
					_bindUI.renameBtn();
				}
			};

			// View modules to be used within the wireframe
			var _view = {
				navigation: function () {
					var v = '       <div class="wizard-context-title" id="' + _namespace + '_title_libraries">' + localize.t('tiq.profile.libraries');
					v += '	              <a href="#" id="' + _namespace + '_addLibraryBtn" class="btn i-color-add btn-mini alignright"><i class="icon-plus"></i> ' + localize.t('tiq.profile.add_library') + '</a>';
					v += '          </div>'
					v += '       <ul class="wizard-context-ul" id="' + _namespace + '_listing">';
					v += _viewModel.getLibraryListItems();
					v += '       </ul>';

					v += '       <div class="wizard-context-title" id="' + _namespace + '_title_profiles">' + localize.t('tiq.profile.profiles');
					v += '              	<a href="#" id="' + _namespace + '_addProfileBtn" class="btn i-color-add btn-mini alignright"><i class="icon-plus"></i> ' + localize.t('tiq.profile.add_profile') + '</a>';
					v += '          </div>'
					v += '       <ul class="wizard-context-ul" id="' + _namespace + '_listingProfile">';
					v += _viewModel.getProfileListItems();
					v += '       </ul>';

					return v;
				},
				contentHeader: function () {
					var v = '';

					v += '      <div class="wizard-content-title">';
					v += '          <span id="selectedProfileTypeCategory"></span><span id="selectedProfileType"></span> <span id="' + _namespace + '_header_selectedProfile" class="selectedProfileTitle"></span>';
					v += '          <span class="manageProfiles_headerButtons">';
					v += '              <a href="#" id="' + _namespace + '_editLibraryBtn" class="actionEditSettings btn btn-mini i-color-edit"><i class="icon-edit"></i> ' + localize.t('tiq.profile.edit') + '</a>';
					v += '              <a href="#" id="' + _namespace + '_renameProfileBtn" class="btn btn-mini" style="display: none;" title="' + utui.tooltip.profile.rename_profile + '"><i class="icon-info-sign i-color-info"></i> ' + localize.t('tiq.profile.rename') + '</a>';

					if (utui.permissions.isTealiumUser()) {
						v += '              <a href="#" id="' + _namespace + '_deleteLibraryBtn" class="actionDelete btn btn-mini i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>'
					}
					v += '          </span>';
					v += '      </div>';

					return v;
				},
				contentBody: function () {
					var v = '';

					v += '<div class="' + _namespace + 'Header">';
					v += '	<span class="manageProfiles_header_addLinks">';
					v += '		<span id="' + _namespace + 'Header">' + localize.t('tiq.profile.libraries') + '</span> ';
					v += '   <select id="library_link_select" class="manageProfiles_header_selectionList">';

					for (var library in _availableLibraries) {
						v += '<option>' + library + '</option>';
					}

					v += '  	 </select>';
					v += '   	<a href="#" id="' + _namespace + '_addLinkBtn" class="actionAddSettings btn btn-mini btn-pair i-color-add"><i class="icon-plus"></i> ' + localize.t('tiq.profile.link_to_library') + '</a>';
					v += '	</span>';
					v += '  <span id="libVersion">' + localize.t('tiq.profile.library_version') + '</span>';
					v += '  <span class="containerLibraryStatus">';
					v += '		<span id="numLinkedLibs" class="containerLibraryStatus_count">0</span>';
					v += '		<span>' + localize.t('tiq.profile.linked') + '</span>';
					v += '	</span>';
					v += '</div>';
					v += '<div class="manageProfiles_linkedListContainer">';
					v += '   <ul id="' + _namespace + '_selectListing" class="manageProfiles_linkedListContainer_list">';
					v += _viewModel.getSelectedLibraryListItems(); //TODO: get libraries that are linked to be imported from for the given Profile
					v += '   </ul>';
					v += '</div>';

					return v;
				}
			};

			var _viewModel = {
				getLibraryListItems: function () {
					var v = '';
					// Reset the locally stored libraries
					_availableLibraries = {};
					if (utui.profile.import._requiredLibraries) {
						for(var libName in utui.profile.import._requiredLibraries) {

							// Store profiles scoped array so we can reference them later
							_availableLibraries[libName] = libName;
							v +='<li><a href="#" id="' + _namespace + '_listselection_'+libName+'" class="profileTypeLibraryRequired" title="' + libName + '"><span class="labelIcon"></span>'+libName+'</a></li>';
						}
					}
					if (utui.profile.import._optionalLibraries) {
						for(var libName in utui.profile.import._optionalLibraries) {

							// Store profiles scoped array so we can reference them later
							_availableLibraries[libName] = libName;
							v +='<li><a href="#" id="' + _namespace + '_listselection_'+libName+'" class="profileTypeLibraryOptional" title="' + libName + '"><span class="labelIcon"></span>'+libName+'</a></li>';
						}
					}
					return v;
				},
				getProfileListItems: function () {
					var v = '';
					// Reset the locally stored profiles
					_availableProfiles = {};
					if (utui.profile.import._profiles) {
						for(var profileName in utui.profile.import._profiles) {

							// Store profiles scoped array so we can reference them later
							_availableProfiles[profileName] = profileName;
							v +='<li><a href="#" id="' + _namespace + '_listselection_'+profileName+'" class="profileTypeProfile" title="' + profileName + '"><span class="labelIcon"></span>'+profileName+'</a></li>';
						}
					}
					return v;
				},
				getSelectedLibraryListItems: function () {
					// if selected item is a profile, just loop thru the _profile.imports
					// Should be the same for libraries if I setup the imports array correctly on the _libary arrays!
					var v = '',
							$profileName = $('#' + _namespace + '_header_selectedProfile').text(),
							isLibrary = typeof utui.profile.import._profiles[$profileName]  === 'undefined',
							isRequiredLibrary = typeof utui.profile.import._requiredLibraries[$profileName] !== 'undefined',
							self = utui.profile.import;

					// Profile must import all Required Libraries plus additional linked Optional Libraries
					if (!isLibrary) {
						var profile = utui.profile.import._profiles[$profileName];
						if (profile.imports) {
							for (var linkedLibraries in profile.imports) {
								var libName = profile.imports[linkedLibraries].name,
									env = profile.imports[linkedLibraries].environment,
									library = self._requiredLibraries[libName] || self._optionalLibraries[libName] || false,
									isRequired = library.library === utui.profile.import.REQUIRED;

								if (library !== false) {
									v += '<li class="manageProfiles_linkedItem" data-value="' + libName + '">';
									v += ' <div class="manageProfiles_linkedItem_header">';
									v += '<div class="manageProfiles_linkedItem_headerTitle ' + (isRequired ? 'profileTypeLibraryRequired' : 'profileTypeLibraryOptional') + '" title="' + libName + '"><span class="labelIcon"></span>' + libName + '</div>';
									v += ' <div class="manageProfiles_linkedItem_headerIcons">';
									v += '<select class="' + _namespace + '_select" id="library_env_select_' + libName + '" name="' + libName + '" onblur="utui.profile.import.showProfileDialog().selectEnv(this)">';
									for (key in self.targetList) {
										var targetName = self.targetList[key],
											aliasName = utui.targets.aliasDisplayName(targetName.toLowerCase());
										if (env !== targetName) {
											v += '<option value="' + targetName + '">' + aliasName + '</option>';
										} else {
											v += '<option value="' + targetName + '" selected>' + aliasName + '</option>';
										}
									}
									v +='</select>';
									v +='   <a href="#" onclick="utui.profile.import.showProfileDialog().gotoLibrary(\''+libName+'\')" class="actionPivot btn btn-small i-color-pivot"><i class="icon-reply"></i> ' + localize.t('tiq.profile.go_to') + '</a>';
									v +='   <a id="' + libName + '_removeLink_tooltip" href="#" onclick="utui.profile.import.showProfileDialog().removeLibraryRelation(\''+libName+'\')" class="removeLinkTooltip actionDelete btn btn-small i-color-delete' + ((isRequired || !library.editable) ? ' ui-state-disabled' : '') + '" title="' + utui.tooltip.profile.remove_link_profile + '"><i class="icon-remove"></i> ' + localize.t('tiq.profile.remove_link') + '</a>';
									v +='	</div>';
									v +='	</div>';
									v +='</li>';
								}
							}
						}
					}

					// Required Library is linked to each Profile
					else if (isRequiredLibrary) {
						var library = utui.profile.import._requiredLibraries[$profileName];
						if (library && library.imports) {
							var editable = library.editable;
							for (var linkedProfiles in library.imports) {
								var profileName = library.imports[linkedProfiles].name,
										env = library.imports[linkedProfiles].environment;
								v +='<li class="manageProfiles_linkedItem" data-value="' + profileName + '">';
								v +='	<div class="manageProfiles_linkedItem_header">'
								v +='<div class="manageProfiles_linkedItem_headerTitle profileTypeProfile" title="' + profileName + '"><span class="labelIcon"></span>' + profileName + '</div>';
								v +='<div class="manageProfiles_linkedItem_headerIcons">';
								v +='<select class="' + _namespace + '_select" id="library_env_select_'+ profileName + '" name="' + profileName + '"' + (!editable ? 'disabled="disabled"' : '') + ' onblur="utui.profile.import.showProfileDialog().selectEnv(this)">';
								for (key in self.targetList) {
									var targetName = self.targetList[key],
										aliasName = utui.targets.aliasDisplayName(targetName.toLowerCase());
									if (env !== targetName) {
										v += '<option value="' + targetName + '">' + aliasName + '</option>';
									}
									else {
										v += '<option value="' + targetName + '" selected>' + aliasName + '</option>';
									}
								}
								v +='</select>';
								v +='   <a href="#" onclick="utui.profile.import.showProfileDialog().gotoLibrary(\''+profileName+'\')" class="actionPivot btn btn-small i-color-pivot"><i class="icon-reply"></i> ' + localize.t('tiq.profile.go_to') + '</a>';
								v +='   <a id="' + profileName + '_removeLink_tooltip" href="#" onclick="utui.profile.import.showProfileDialog().removeLibraryRelation(\''+profileName+'\')" class="removeLinkTooltip ui-state-disabled actionDelete btn btn-small i-color-delete" title="' + utui.tooltip.profile.remove_link_library + '"><i class="icon-remove"></i> ' + localize.t('tiq.profile.remove_link') + '</a>';
								v +='</div>';
								v +='	</div>';
								v +='</li>';
							}
						}
					}

					// Optional library that have been linked to profiles
					else {
						var library = utui.profile.import._optionalLibraries[$profileName];
						if (library && library.imports) {
							var editable = library.editable;
							for (var linkedProfiles in library.imports) {
								var profileName = library.imports[linkedProfiles].name,
										env = library.imports[linkedProfiles].environment;
								v +='<li class="manageProfiles_linkedItem" data-value="' + profileName + '">';
								v +='	<div class="manageProfiles_linkedItem_header">'
								v +='<div class="manageProfiles_linkedItem_headerTitle profileTypeProfile" title="' + profileName + '"><span class="labelIcon"></span>' + profileName + '</div>';
								v +='	<div class="manageProfiles_linkedItem_headerIcons">';
								v +='<select class="' + _namespace + '_select" id="library_env_select_'+ profileName + '" name="' + profileName + '"' + (!editable ? 'disabled="disabled"' : '') + ' onblur="utui.profile.import.showProfileDialog().selectEnv(this)">';
								for (key in self.targetList) {
									var targetName = self.targetList[key],
										aliasName = utui.targets.aliasDisplayName(targetName.toLowerCase());
									if (env !== targetName) {
										v += '<option value="' + targetName + '">' + aliasName + '</option>';
									}
									else {
										v += '<option value="' + targetName + '" selected>' + aliasName + '</option>';
									}
								}
								v +='</select>';
								v +='   <a href="#" onclick="utui.profile.import.showProfileDialog().gotoLibrary(\''+profileName+'\')" class="actionPivot btn btn-small i-color-pivot"><i class="icon-reply"></i> ' + localize.t('tiq.profile.go_to') + '</a>';
								v +='   <a id="' + profileName + '_removeLink_tooltip" href="#" onclick="utui.profile.import.showProfileDialog().removeLibraryRelation(\''+profileName+'\')" class="removeLinkTooltip actionDelete btn btn-small i-color-delete' + ((!editable) ? ' ui-state-disabled' : '') + '" title="' + utui.tooltip.profile.remove_link_library + '"><i class="icon-remove"></i> ' + localize.t('tiq.profile.remove_link') + '</a>';
								v +='	</div>';
								v +='	</div>';
								v +='</li>';
							}
						}
					}
					return v;
				},
				updateLibraryPanel: function (profileName, isLibrary) {
					// Update Profile/Library Selection Title
					// Refresh selected Library/Profile list
					$('#' + _namespace + '_header_selectedProfile').html('<span class="labelIcon"></span>'+profileName).attr('title', profileName);

					var $content = $('#' + _namespace + '_content');
					$content.find('.wizard-content-body').html(_view.contentBody()).addClass(_namespace + 'Body');

					if (isLibrary) {
						var $editLibraryBtn = $('#' + _namespace + '_editLibraryBtn'),
								$deleteLibraryBtn = $('#' + _namespace + '_deleteLibraryBtn');
						$editLibraryBtn.show().removeClass('ui-state-disabled');
						$deleteLibraryBtn.removeClass('ui-state-disabled');
						$('#' + _namespace + '_renameProfileBtn').hide();
						$('#' + _namespace + 'Header').text(localize.t('tiq.profile.profiles'));
						$('#' + _namespace + '_addLinkBtn').html('<i class="icon-plus"></i> ' + localize.t('tiq.profile.link_to_profile'));

						// if is required Library - select list should be empty and disabled, also Add Link should be disabled
						// Update linked count
						if (typeof utui.profile.import._requiredLibraries[profileName] !== 'undefined') {
							$('#selectedProfileTypeCategory').html(localize.t('tiq.profile.library') + ' ');
							$('#' + _namespace + '_header_selectedProfile').removeClass("profileTypeLibraryOptional").removeClass("profileTypeProfile").addClass("profileTypeLibraryRequired");
							$('#library_link_select').html('');
							// $('.manageProfiles_header_addLinks').hide();
							var library = utui.profile.import._requiredLibraries[profileName];
							if(library.imports) {
								$('#numLinkedLibs').html(_.size(library.imports));
							}
							if(!library.editable) {
								$editLibraryBtn.addClass('ui-state-disabled');
								$deleteLibraryBtn.addClass('ui-state-disabled');
							}
						}
						else { // is optional library
							$('#selectedProfileTypeCategory').html(localize.t('tiq.profile.library') + ' ');
							$('#' + _namespace + '_header_selectedProfile').removeClass("profileTypeLibraryRequired").removeClass("profileTypeProfile").addClass("profileTypeLibraryOptional");

							$('#library_link_select').html('');
							var library = utui.profile.import._optionalLibraries[profileName];
							if(library.imports) {
								$('#numLinkedLibs').html(_.size(library.imports));
								for (var key in utui.profile.import._profiles) {
									if ($.grep(library.imports, function(elem) { return elem.name == key; }) == 0) {
										$('#library_link_select').append('<option>' + key + '</option>');
									}
								}
							}
							if(!library.editable) {
								$editLibraryBtn.addClass('ui-state-disabled');
								$deleteLibraryBtn.addClass('ui-state-disabled');
							}
						}
					}
					else {
						$('#selectedProfileTypeCategory').html(localize.t('tiq.profile.profile') + ' ');
						$('#' + _namespace + '_header_selectedProfile').removeClass("profileTypeLibraryRequired").removeClass("profileTypeLibraryOptional").addClass("profileTypeProfile");

						$('#' + _namespace + '_editLibraryBtn').hide();
						var $renameBtn = $('#' + _namespace + '_renameProfileBtn');
						$renameBtn.show();
						$('#' + _namespace + '_deleteLibraryBtn').removeClass('ui-state-disabled');
						$('#' + _namespace + 'Header').text(localize.t('tiq.profile.libraries'));
						$('#' + _namespace + '_addLinkBtn').html('<i class="icon-plus"></i> ' + localize.t('tiq.profile.link_to_library'));

						$('#library_link_select').html('');
						var profile = utui.profile.import._profiles[profileName];
						if(profile.imports) {
							$('#numLinkedLibs').html(_.size(profile.imports));
							for (var key in utui.profile.import._optionalLibraries) {
								if ($.grep(profile.imports, function(elem) { return elem.name == key; }) == 0) {
									$('#library_link_select').append('<option>' + key + '</option>');
								}
							}
						}
						else {
							for (var key in utui.profile.import._optionalLibraries) {
								$('#library_link_select').append('<option>' + key + '</option>');
							}
						}
					}

					// Enable/Disable Add Link button
					if ($('#library_link_select').val()) {
						$('#library_link_select').removeClass('ui-state-disabled');
						$('#' + _namespace + '_addLinkBtn').removeClass('ui-state-disabled');
					}
					else {
						$('#library_link_select').addClass('ui-state-disabled');
						$('#' + _namespace + '_addLinkBtn').addClass('ui-state-disabled');
					}

					// Add tooltip to the Remove Link buttons
					var tooltipObj = {};
					$('.removeLinkTooltip').each(function() {
						if (!$(this).hasClass('ui-state-disabled')) {
							tooltipObj[this.id.replace('.', '\\.')] = {
								gravity: 'ne'
							};
						}
					});
					utui.util.addTooltip(tooltipObj);
				}
			};

			var _bindUI = {
				tab: function () {
					for (var library in _availableLibraries) {
						(function (libraryText) {
							$('a[id="' + _namespace + '_listselection_' + library + '"]').on('click', function (e) {
								e.stopImmediatePropagation();

								// clear existing selection
								$('#' + _namespace + '_listing').children('li').each(function () {
									$(this).removeClass('selected');
								});
								$('#' + _namespace + '_listingProfile').children('li').each(function () {
									$(this).removeClass('selected');
								});

								// highlight selection
								$(this).parent().addClass('selected');

								// update panel
								utui.util.pubsub.subscribe(utui.constants.environments.TOGGLED, _viewModel.updateLibraryPanel(libraryText, true));

								return false;
							});
						})(library);
					}

					for (var profile in _availableProfiles) {
						(function (profileText) {
							$('a[id="' + _namespace + '_listselection_' + profile + '"]').on('click', function (e) {
								e.stopImmediatePropagation();

								// clear existing selection
								$('#' + _namespace + '_listingProfile').children('li').each(function () {
									$(this).removeClass('selected');
								});
								$('#' + _namespace + '_listing').children('li').each(function () {
									$(this).removeClass('selected');
								});

								// highlight selection
								$(this).parent().addClass('selected');

								// update panel
								utui.util.pubsub.subscribe(utui.constants.environments.TOGGLED, _viewModel.updateLibraryPanel(profileText));

								return false;
							});
						})(profile);
					}
				},
				addLinkBtn: function () {
					$('#' + _namespace + '_dialogContent').on('click','#' + _namespace + '_addLinkBtn', function (e) {
						e.stopImmediatePropagation();

						var selectedOption = $('#library_link_select :selected').val(),
								$profileName = $('#' + _namespace + '_header_selectedProfile').text(),
								isLibrary = typeof utui.profile.import._optionalLibraries[$profileName] !== 'undefined';

						if (selectedOption && selectedOption !== _selectLibrary && selectedOption !== _selectProfile) {
							// If Optional Library is selected, add linked Profile to the imports collection
							if (isLibrary) {
								// Add the selected profile to the optional library imports collection
								var library = utui.profile.import._optionalLibraries[$profileName];

								_linkLibrariesTempStore($profileName, library);
								if (library.imports) {
									library.imports.push({name: selectedOption, environment: utui.profile.import.PROD});
									$.extend(true, library, {"imports": library.imports});
								}
								else {
									$.extend(true, library, {"imports": [
										{name: selectedOption, environment: utui.profile.import.PROD}
									]});
								}

								// Add the optional linked library to the selected profile imports collection
								var profile = utui.profile.import._profiles[selectedOption];
								_linkLibrariesTempStore(selectedOption, profile);
								if (profile.imports) {
									profile.imports.push({name: $profileName, environment: utui.profile.import.PROD});
									$.extend(true, profile, {"imports": profile.imports});
								}
								else {
									$.extend(true, profile, {"imports": [
										{name: $profileName, environment: utui.profile.import.PROD}
									]});
								}
							}

							// If Profile is selected, add optional library to the imports collection
							else if (typeof utui.profile.import._profiles[$profileName] !== 'undefined') {
								// Add the selected library to the profile imports collection
								var profile = utui.profile.import._profiles[$profileName];
								_linkLibrariesTempStore($profileName, profile);
								if (profile.imports) {
									profile.imports.push({name: selectedOption, environment: utui.profile.import.PROD});
									$.extend(true, profile, {"imports": profile.imports});
								}
								else {
									$.extend(true, profile, {"imports": [
										{name: selectedOption, environment: utui.profile.import.PROD}
									]});
								}

								// Add the profile to the selected library imports collection
								var library = utui.profile.import._optionalLibraries[selectedOption];
								_linkLibrariesTempStore(selectedOption, library);
								if (library.imports) {
									library.imports.push({name: $profileName, environment: utui.profile.import.PROD});
									$.extend(true, library, {"imports": library.imports});
								}
								else {
									$.extend(true, library, {"imports": [
										{name: $profileName, environment: utui.profile.import.PROD}
									]});
								}
							}

							var $content = $('#' + _namespace + '_content');
							$content.find('.wizard-content-body').html(_view.contentBody()).addClass(_namespace + 'Body');
							_viewModel.updateLibraryPanel($profileName, isLibrary);
						}
					});
				},
				deleteBtn: function () {
					$('#' + _namespace + '_deleteLibraryBtn').on('click', function (e) {
						e.stopImmediatePropagation();

						if (!$(this).hasClass('ui-state-disabled')) {
							// determine if profile to be deleted is a library
							var isLibrary = typeof utui.profile.import._profiles[$('#' + _namespace + '_header_selectedProfile').text()]  === 'undefined';
							utui.adminlib.removeProfileConfirmDialog.show($('#' + _namespace + '_header_selectedProfile').text(), isLibrary);
						}
					});
				},
				editBtn: function () {
					$('#' + _namespace + '_editLibraryBtn').on('click', function (e) {
						e.stopImmediatePropagation();

						if (!$(this).hasClass('ui-state-disabled')) {
							utui.adminlib.editLibrary($('#' + _namespace + '_header_selectedProfile').text());
						}
					});
				},
				renameBtn: function () {
					var renameProfileBtnId = _namespace + '_renameProfileBtn',
							$renameProfileBtn = $('#' + renameProfileBtnId);

					// Take user to bloomfire post
					$renameProfileBtn.on('click', function (e) {
						e.stopImmediatePropagation();
						utui.help.openCommunityLink(common.community.managing_profiles);
						return false;
					});

					// Add tooltip to the Rename Profile Link button
					var tooltipObj = {};
					tooltipObj[renameProfileBtnId] = {
						gravity: 'ne'
					};
					utui.util.addTooltip(tooltipObj);
				},
				addLibraryBtn: function () {
					$('#' + _namespace + '_addLibraryBtn').on('click', function (e) {
						e.stopImmediatePropagation();

						utui.adminlib.createProfile(true);
					});
				},
				addProfileBtn: function () {
					$('#' + _namespace + '_addProfileBtn').on('click', function (e) {
						e.stopImmediatePropagation();

						utui.adminlib.createProfile();
					});
				}
			};

			// ----------------------------------------------------------------
			function _initView() {

				var v = '';
				v += _templateWizard.context(_namespace);
				v += _templateWizard.content(_namespace);

				// Check to see if dialog exists in DOM
				if ($('#' + _namespace + '_dialog').length == 0) {
					var dialog = '<div id="' + _namespace + '_dialog"><div class="dialog-message"></div></div>';
					$(dialog).prependTo('body');
					$('<div />', { id: _namespace + '_dialogContent' }).appendTo('#' + _namespace + '_dialog');
				}

				$('#' + _namespace + '_dialogContent').html(v);
			}

			function _removeImport(imports, name) {
				for (var i = imports.length-1; i >= 0; i--) {
					if(imports[i].name === name) {
						//Remove from array
						imports.splice(i, 1);
					}
				};
				return imports;
			}

			// ----------------------------------------------------------------
			// Displays dialog
			function _showDialog() {
				$('#' + _namespace + '_dialog').dialog({
					title: localize.t('tiq.profile.manage_profiles'),
					height: 'auto',
					width: 'auto',
					modal: true,
					autoOpen: true,
					closeOnEscape: false,
					resizable: false,
					draggable: true,
					position: ['center', 'center'],
					dialogClass: "no-close",
					buttons: [
						{
							text: localize.t('tiq.dialog.button.apply'),
							id: 'showProfile_dialog_applyBtn',
							click: function() {
								utui.profile.import.persistLinkedLibraries(true);
								_disposeDialog();
							}
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							id: 'showProfile_dialog_cancelBtn',
							click: function() {
								utui.profile.import.revertLinkedLibraryChanges();
								_disposeDialog();
							},
							style: 'float:left; margin-left: 12px'
						}
					]
				}).on('dialogclose', function () {
					utui.publish.showSaveDialog().refresh();
					$(this).remove(); //for using 'x' btn
				});

			};

			// ----------------------------------------------------------------
			// Dispose dialog
			function _disposeDialog() {
				utui.users.loadUser(utui.login.email);
				$('#' + _namespace + '_dialog').dialog('close');
			}


			// PUBLIC
			var _public = {
				// ----------------------------------------------------------------
				// Initial call to show dialog
				initialize: function () {
					// Do not allow the user to modify profiles and libraries if they do not have the manage profiles (CREATE_PROFILE) account - level permission
					if (!utui.permissions.canCreateProfile()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					utui.util.pubsub.subscribe(utui.constants.profile.LIBRARY_CHANGED, function (data) {
						_viewModel.updateLibraryPanel(data.name, data.isLibrary);
						if (utui.profile.import._requiredLibraries[data.name]) {
							$('#' + _namespace + '_listselection_' + data.name).removeClass('profileTypeLibraryOptional').addClass('profileTypeLibraryRequired');
						}
						else {
							$('#' + _namespace + '_listselection_' + data.name).removeClass('profileTypeLibraryRequired').addClass('profileTypeLibraryOptional');
						}
					});

					_initView();

					_render.context();
					_render.content();

					// Default profile selection if none are selected already
					if (!$('#' + _namespace + '_header_selectedProfile').text()) {
						utui.profile.import.showProfileDialog().gotoLibrary(utui.data.settings.profileid);
					}

					return _showDialog();
				},
				refresh: function () {
					_render.context();
					_render.content();
				},
				selectEnv: function (elem) {
					var selectedEnv = $(elem).val(),
							targetLibrary = elem.name,
							selectedProfile = $('#' + _namespace + '_header_selectedProfile').text(),
							isLibrary = typeof utui.profile.import._profiles[selectedProfile] === 'undefined';

					if (!isLibrary) {
						var profile = utui.profile.import._profiles[selectedProfile],
								imports = profile.imports;
						_linkLibrariesTempStore(profile.name, profile);
						if (imports) {
							for (key in imports) {
								if (imports[key].name == targetLibrary) {
									imports[key].environment = selectedEnv;
								}
							}
						}
						var library = utui.profile.import._requiredLibraries[targetLibrary] || utui.profile.import._optionalLibraries[targetLibrary],
								imports = library.imports;
						_linkLibrariesTempStore(library.name, library);
						if (imports) {
							for (key in imports) {
								if (imports[key].name == selectedProfile) {
									imports[key].environment = selectedEnv;
								}
							}
						}
					}
					else { // isLibrary
						var library = utui.profile.import._requiredLibraries[selectedProfile] || utui.profile.import._optionalLibraries[selectedProfile],
								imports = library.imports;
						_linkLibrariesTempStore(library.name, library);
						if (imports) {
							for (key in imports) {
								if (imports[key].name == targetLibrary) {
									imports[key].environment = selectedEnv;
								}
							}
						}
						var profile = utui.profile.import._profiles[targetLibrary],
								imports = profile.imports;
						_linkLibrariesTempStore(profile.name, profile);
						if (imports) {
							for (key in imports) {
								if (imports[key].name == selectedProfile) {
									imports[key].environment = selectedEnv;
								}
							}
						}
					}
				},
				gotoLibrary: function (libName) {
					$('a[id="' + _namespace + '_listselection_' + libName + '"]').trigger('click');
				},
				removeLibraryRelation: function (libName) {
					var profileName = $('#' + _namespace + '_header_selectedProfile').text(),
							isLibrary = false;

					// Cannot unlink required libraries
					if (typeof utui.profile.import._requiredLibraries[profileName] !== 'undefined'
						|| typeof utui.profile.import._requiredLibraries[libName] !== 'undefined') {
						return;
					}

					if (utui.profile.import._profiles[profileName]) { // is Profile
						if (utui.profile.import._profiles[profileName].imports) {
							_linkLibrariesTempStore(profileName,  utui.profile.import._profiles[profileName]);
							utui.profile.import._profiles[profileName].imports = _removeImport(utui.profile.import._profiles[profileName].imports, libName);
						}
						if (utui.profile.import._optionalLibraries[libName] && utui.profile.import._optionalLibraries[libName].imports) {
							_linkLibrariesTempStore(libName,  utui.profile.import._optionalLibraries[libName]);
							utui.profile.import._optionalLibraries[libName].imports = _removeImport(utui.profile.import._optionalLibraries[libName].imports, profileName);
						}
					}
					else {
						isLibrary = true;
						if (utui.profile.import._profiles[libName] && utui.profile.import._profiles[libName].imports) {
							_linkLibrariesTempStore(libName, utui.profile.import._profiles[libName]);
							utui.profile.import._profiles[libName].imports = _removeImport(utui.profile.import._profiles[libName].imports, profileName);
						}
						if (utui.profile.import._optionalLibraries[profileName] && utui.profile.import._optionalLibraries[profileName].imports) {
							_linkLibrariesTempStore(profileName, utui.profile.import._optionalLibraries[profileName]);
							utui.profile.import._optionalLibraries[profileName].imports = _removeImport(utui.profile.import._optionalLibraries[profileName].imports, libName);
						}
					}


					var $content = $('#' + _namespace + '_content');
					$content.find('.wizard-content-body').html(_view.contentBody()).addClass(_namespace + 'Body');
					_viewModel.updateLibraryPanel(profileName, isLibrary);

				},
				createProfileCallback: function (profileName, data) {
					var self = utui.profile.import,
							revision;

					for (var firstKey in data.publish_history) {
						revision = firstKey;
						break;
					}

					// Required Library
					if (self._requiredLibraries[profileName]) {
						self._requiredLibraries[profileName].imports = [];
						self._requiredLibraries[profileName].revision = revision;
						for (var profile in self._profiles) {
							// Link profile to required lib
							self._requiredLibraries[profileName].imports.push({name: profile, environment: utui.profile.import.PROD});

							if (!self._profiles[profile].imports) {
								self._profiles[profile].imports = [];
							}
							// Link required lib to profile
							self._profiles[profile].imports.push({name : profileName, environment: utui.profile.import.PROD})
						}
					}

					// Optional Library
					else if (self._optionalLibraries[profileName]) {
						self._optionalLibraries[profileName].imports = [];
						self._optionalLibraries[profileName].revision = revision;
					}

					// Profile
					else if (self._profiles[profileName]) {
						self._profiles[profileName].imports = [];
						self._profiles[profileName].revision = revision;
						for (var library in self._requiredLibraries) {
							// Link required lib to profile
							self._profiles[profileName].imports.push({name: library, environment: utui.profile.import.PROD});

							if (!self._requiredLibraries[library].imports) {
								self._requiredLibraries[library].imports = [];
							}
							// Link profile to required lib
							self._requiredLibraries[library].imports.push({name: profileName, environment: utui.profile.import.PROD});
						}
					}
					self.persistLinkedLibraries();

					this.refresh();
					this.gotoLibrary(profileName);
				},
				renameProfileCallback: function (newProfileName) {
					var oldProfileName = $('#' + _namespace + '_header_selectedProfile').text();
					utui.profile.import._profiles[newProfileName] = utui.profile.import._profiles[oldProfileName];
					utui.profile.import._profiles[newProfileName].name = newProfileName;
					delete utui.profile.import._profiles[oldProfileName];

					var imports = utui.profile.import._profiles[newProfileName].imports;
					if (imports) {
						for (var libName in imports) {
							var library, libImports;
							// if Required Lib
							if (utui.profile.import._requiredLibraries[imports[libName].name]) {
								library = utui.profile.import._requiredLibraries[imports[libName].name];
								libImports = library.imports;
							}
							// else Optional Lib
							else if (utui.profile.import._optionalLibraries[imports[libName].name]) {
								library = utui.profile.import._optionalLibraries[imports[libName].name];
								libImports = library.imports;
							}
							libImports = _removeImport(libImports, oldProfileName);
							libImports.push({name: newProfileName, environment: imports[libName].environment});
							library.imports = libImports;
						}
					}

					this.refresh();
					this.gotoLibrary(newProfileName);
					utui.profile.import.persistLinkedLibraries();
				},
				removeProfileCallback: function (name) {
					if (utui.profile.import._profiles[name]) {
						delete utui.profile.import._profiles[name];
						for (var libName in utui.profile.import._requiredLibraries) {
							var imports = utui.profile.import._requiredLibraries[libName].imports;
							if (imports) {
								imports = _removeImport(imports, name);
								utui.profile.import._requiredLibraries[libName].imports = imports;
							}
						}
						for (var libName in utui.profile.import._optionalLibraries) {
							var imports = utui.profile.import._optionalLibraries[libName].imports;
							if (imports) {
								imports = _removeImport(imports, name);
								utui.profile.import._optionalLibraries[libName].imports = imports;
							}
						}
					}
					else if (utui.profile.import._optionalLibraries[name]) {
						delete utui.profile.import._optionalLibraries[name];
						for (var profileName in utui.profile.import._profiles) {
							var imports = utui.profile.import._profiles[profileName].imports;
							if (imports) {
								imports = _removeImport(imports, name);
								utui.profile.import._profiles[profileName].imports = imports;
							}
						}
					}
					else if (utui.profile.import._requiredLibraries[name]) {
						delete utui.profile.import._requiredLibraries[name];
						for (var profileName in utui.profile.import._profiles) {
							var imports = utui.profile.import._profiles[profileName].imports;
							if (imports) {
								imports = _removeImport(imports, name);
								utui.profile.import._profiles[profileName].imports = imports;
							}
						}
					}
					this.refresh();
					this.gotoLibrary(utui.data.settings.profileid);
					utui.profile.import.persistLinkedLibraries();
				},
				editLibraryCallback: function(libraryName, isRequiredLib) {
					// Switching from optional to required
					if (!isRequiredLib && $('#admin_edit_profile_required').prop('checked')) {
						utui.profile.setProfileType(libraryName, utui.profile.import.REQUIRED);
						// Update library setting
						utui.profile.import._optionalLibraries[libraryName].library = utui.profile.import.REQUIRED;

						// Remove optional lib from _optionalLibraries and add to _requiredLibraries
						utui.profile.import._requiredLibraries[libraryName] = utui.profile.import._optionalLibraries[libraryName];
						delete utui.profile.import._optionalLibraries[libraryName];
						utui.profile.import._requiredLibraries[libraryName].imports = [];

						// Add required library import to all profiles
						for (var profileName in utui.profile.import._profiles) {
							if(!utui.profile.import._profiles[profileName].imports) {
								utui.profile.import._profiles[profileName].imports = [];
							}
							var libraryLinked = false,
									imports = utui.profile.import._profiles[profileName].imports;
							for (var library in imports) {
								if (imports[library].name === libraryName) {
									libraryLinked = true;
									// Add profile import to required library
									utui.profile.import._requiredLibraries[libraryName].imports.push({name: profileName, environment: imports[library].environment});
									break;
								}
							}
							if (!libraryLinked) {
								utui.profile.import._profiles[profileName].imports.push({name: libraryName, environment: utui.profile.import.PROD});
								// Add profile import to required library
								utui.profile.import._requiredLibraries[libraryName].imports.push({name: profileName, environment: utui.profile.import.PROD});
							}
						}
						utui.util.pubsub.publish(utui.constants.profile.LIBRARY_CHANGED, {name: libraryName, isLibrary: true});
					}
					// Switching from required to optional
					else if (isRequiredLib && $('#admin_edit_profile_optional').prop('checked')) {
						utui.profile.setProfileType(libraryName, utui.profile.import.OPTIONAL);
						// Update library setting
						utui.profile.import._requiredLibraries[libraryName].library = utui.profile.import.OPTIONAL;

						// Remove required lib from _requiredLibraries and add to _optionalLibraries
						utui.profile.import._optionalLibraries[libraryName] = utui.profile.import._requiredLibraries[libraryName];
						delete utui.profile.import._requiredLibraries[libraryName];

						utui.util.pubsub.publish(utui.constants.profile.LIBRARY_CHANGED, {name: libraryName, isLibrary: true});
					}
					utui.profile.import.persistLinkedLibraries();
				}
			}

			return _public;
		},

		// Returns the stringified version of the imported libraries JSON
		// If isForInitialPublish is true this returns and empty object since initial publish should not contain any linked profiles
		getLinkedProfilesForPublish: function(isForInitialPublish) {
			var linkedProfiles = {};

			if (!isForInitialPublish) {
				var currentProfile = _getProfileFromProfileList(utui.login.profile);
				if (currentProfile && currentProfile.imports) {
					// Get list of linked profiles
					for (var i=0; i<currentProfile.imports.length; i++) {
						var linked = currentProfile.imports[i];
						var profile = _getProfileFromProfileList(linked.name);
						if (profile) {
							var revision = profile.revision;
							if (profile.env_revisions) {
								revision = profile.env_revisions[linked.environment.toLowerCase()];
							}
							linkedProfiles[linked.name] = {rev:revision,env:linked.environment};
						}
					}
				}
			}

			return JSON.stringify(linkedProfiles);
		},

		// Returns the stringified version of the imported AudienceStream profile JSON
		// If isForInitialPublish is true this returns and empty object since initial publish should not contain any linked AudienceStream profiles
		getAudiencestreamProfilesForPublish: function(isForInitialPublish) {
			var datacloudLinkedProfiles = {};

			if (!isForInitialPublish) {
				if (utui.data.settings.datacloud_revision) {
					datacloudLinkedProfiles[utui.data.settings.datacloud_profile] = {rev:utui.data.settings.datacloud_revision,env:_public.AUDIENCE_STREAM};
				}
			}

			return JSON.stringify(datacloudLinkedProfiles);
		},

		// ---------------------------------------------
		// Returns true if the current profile is a library
		// ---------------------------------------------
		isLibrary: function() {
			if (utui.data.settings.library) {
				return utui.data.settings.library !== _public.NONE;
			}
			return false;
		},

		// ---------------------------------------------
		// Returns true if the current profile is a profile
		// ---------------------------------------------
		isProfile: function() {
			if (!utui.data.settings.library || utui.data.settings.library === _public.NONE) {
				return true;
			}
			return false;
		},

		// ---------------------------------------------
		updateImportedHistory: function (data, type, options, forceRemoveEvent) {
			if (data.history) {
				var libHistory = JSON.parse(data.history);
				var newData = [],
					action;
				for (var event in libHistory) {
					var auditEvent = libHistory[event];
					action = auditEvent.action;

					if (action && (typeof utui.profile.import.ignoreImportHistoryEvent[action] === 'undefined')) {
						if (auditEvent.data.kind === utui.constants.variables.TYPE && type === utui.constants.variables.TYPE) {
							if (!forceRemoveEvent && auditEvent.data.name === options.name && auditEvent.data.type === options.type) {
								auditEvent.data.id = options.new_id;
								utui.profile.showModifiedTabLabel(auditEvent);
							}
						}
						else if (auditEvent.data.kind === utui.constants.loadrules.TYPE && type === utui.constants.loadrules.TYPE) {
							if (auditEvent.data.id === options.origin_id) {
								auditEvent.data.id = options.new_id;
								auditEvent.data.container = options.container;
								utui.profile.showModifiedTabLabel(auditEvent);
							}
						}
						else if (auditEvent.data.kind === utui.constants.tags.TYPE && type === utui.constants.tags.TYPE) {
							if (auditEvent.data.id === options.origin_id) {
								auditEvent.data.id = options.new_id;
								auditEvent.data.container = options.container;
								utui.profile.showModifiedTabLabel(auditEvent);
							}
						}
						else if (auditEvent.data.kind === utui.constants.extensions.TYPE && type === utui.constants.extensions.TYPE) {
							if (auditEvent.data.id === options.origin_id) {
								auditEvent.data.id = options.new_id;
								auditEvent.data.name = options.name;
								auditEvent.data.container = options.container;
								utui.profile.showModifiedTabLabel(auditEvent);
							}
						}
					}

					// Only Data Sources send the forceRemoveEvent, so the data source name and type must match in-order for us to remove the history event
					if (!forceRemoveEvent || (auditEvent.data.name !== options.name || auditEvent.data.type !== options.type)) {
						newData.push(auditEvent);
					}
				}
				data.history = JSON.stringify(newData);
			}
		}
	}
	return _public;

	// Private API
	// ---------------------------------------------
	function _updateExtensionScopingToTags(profileName) {

		var migrateImportTags = _public.migrateImportTags,
				extCollection = utui.data.customizations,
				profile,
				ext,
				scopeList,
				scopeListPosition,
				map;

		profile = migrateImportTags[profileName];

		for (var originId in profile) {
			if (!profile.hasOwnProperty(originId)) continue;

			map = profile[originId];

			// If old tag id exist, go through all the extension objects and adjust its scope
			if (typeof map.old_id !== 'undefined') {

				for (var key in extCollection) {
					if (!extCollection.hasOwnProperty(key)) continue;

					ext = extCollection[key],
						scopeList = ext.scope.split(',');

					// Remove duplicates (HACK)
					scopeList = scopeList.filter(function (elem, pos) {
						return scopeList.indexOf(elem) == pos;
					});

					// If we were scoped to an old tag, update that scope list to reflect updated tag ids
					if (~scopeList.indexOf(map.old_id)) {
						scopeListPosition = scopeList.indexOf(map.old_id);

						// if we have a newly assigned ID, add it into the scoped list
						if (typeof map.new_id !== 'undefined') {
							// remove old tag from scopelist
							scopeList.splice(scopeListPosition, 1, map.new_id);
						}
						else {
							scopeList.splice(scopeListPosition, 1);
						}

						// store new values in extension data model
						if (scopeList.length === 0) {
							utui.data.customizations[key].status = 'inactive';
							utui.data.customizations[key].scope = 'global';
						}
						else {
							utui.data.customizations[key].scope = scopeList.toString();
						}

						// rerender ext header
						utui.customizations.renderAccordionHeaderItemView(utui.data.customizations[key]);
					}
				}
			}
		}


		// render labels (in show public call)
		utui.customizations.show();
	}

	// ---------------------------------------------
	function _updateExtensionMappingsToDataSource() {

		function getBrokenExtensionScopeList() {
			var _extensionId, scopeValues = [];

			function _storeScoping(dataKey) {
				scopeValues.push({
					dataKey: dataKey,
					extensionId: _extensionId
				});
			}

			function _crawlValues(obj) {
				var name, index = 0;

				for(var i in obj) {
					if(!obj.hasOwnProperty(i)) continue;

					var entry = obj[i];


					// Store extension ID for insertion later
					if(typeof entry === "object" && entry.hasOwnProperty('_id')) {
						_extensionId = +entry._id;
					}

					// If we detect an object as a value, crawl through it again
					if(typeof entry === 'object' && entry != null) {
						var next = _crawlValues(entry);
						if(next) return next;
					}

					if(dsapi.isValidDataSourceNameSyntax(entry) && !dsapi.isExistingDataSource(entry)) {
						_storeScoping(entry);
					}
				}
			}
			_crawlValues(utui.data.customizations);

			return scopeValues;
		}

		function findAndReplaceScopedDataSource(extId, oldDataKey, newDataKey) {
			var extObj = utui.data.customizations[extId];

			if(extObj) {

				// iterate through extension values
				for(var n in extObj) {
					if(!extObj.hasOwnProperty(n)) continue;

					if(typeof extObj[n] === 'string' && extObj[n] === oldDataKey) {
						utui.data.customizations[extId][n] = newDataKey;
					}
				}
			}
		}

		var brokenExtList = getBrokenExtensionScopeList(),
				deletedDSList = utui.profile.import.deletedImportDataSourcesObj,
				extId,
				newDataKey,
				oldDataKey;

		if(brokenExtList.length > 0) {

			// iterate through deleted data sources list
			for(var n in deletedDSList) {
				if(!deletedDSList.hasOwnProperty(n)) continue;

				var dsObj = deletedDSList[n];

				// this is the broken datakey we want to replace
				oldDataKey = dsObj.type + '.' + dsObj.name;

				// iterate through broken extensions list
				for(var k in brokenExtList) {
					if(!brokenExtList.hasOwnProperty(k)) continue;

					var extObj = brokenExtList[k];

					// this is an extension id with a mislinked data source that no longer exists post-inheritance
					extId = extObj.extensionId;

					// our broken datakey is found in the broken extensions list
					if(oldDataKey === extObj.dataKey) {

						// grab the new datakey that shares the same profile id and origin id
						var originId = dsObj.settings.origin_id,
								profileName = dsObj.settings.profileid,
								newDataObj = dsapi.getDataSourceByOriginId(profileName, originId);

						// if we do have an updated data object, go ahead and replace
						if(newDataObj) {
							newDataKey = newDataObj.type + '.' + newDataObj.name;

							findAndReplaceScopedDataSource(extId, oldDataKey, newDataKey);
						}
						// if the data object no longer exists, replace with nothing?
						// rb - TODO - find a better value to replace it with, or we can leave it.
						else {
							// findAndReplaceScopedDataSource(extId, oldDataKey, '');
							// console.warn('!! not scoped since newDataObj does not exist... skipping...');
						}
					}
				}
			}
		}
	}


	function _reimportLibraryData(self, data, environment) {

		var data_cp = {"define": {}, "loadrules": {}, "manage": {}, "customizations": {}},
				revision = data.settings.revision,
				minor_revision = data.settings.minorrevision,
				currentData = {},
				translationMatrix = {},
				objNames = [_public.DEFINE, _public.CUSTOMIZATIONS, _public.LOADRULES, _public.MANAGE],
				newData = {"add": {},"update": {},"remove": {}};

		//Data strucure copy
		jQuery.extend(true, currentData, data_cp);
		jQuery.extend(true, translationMatrix, data_cp);
		jQuery.extend(true, newData.add, data_cp);
		jQuery.extend(true, newData.update, data_cp);
		jQuery.extend(true, newData.remove, data_cp);

		//Copy only the data that we need
		jQuery.extend(true, data_cp.manage, data.manage);
		jQuery.extend(true, data_cp.loadrules, data.loadrules);
		jQuery.extend(true, data_cp.define, data.define);
		jQuery.extend(true, data_cp.customizations, data.customizations);

		var define = currentData.define;

		for (var i in utui.util.getVars(utui.data.define)) {
			var ds = utui.data.define[i];
			if (ds.settings && ds.settings.profileid) {
				define[ds.settings.profileid] = define[ds.settings.profileid] || {};
				define[ds.settings.profileid][ds.settings.origin_id] = ds;
			}
		}

		var loadrules = currentData.loadrules;

		for (var i in utui.util.getVars(utui.data.loadrules)) {
			var ds = utui.data.loadrules[i];
			if (ds.settings && ds.settings.profileid) {
				loadrules[ds.settings.profileid] = loadrules[ds.settings.profileid] || {};
				loadrules[ds.settings.profileid][ds.settings.origin_id] = ds;
			}
		}

		var manage = currentData.manage;

		for (var i in utui.util.getVars(utui.data.manage)) {
			var ds = utui.data.manage[i];
			if (ds.settings && ds.settings.profileid) {
				manage[ds.settings.profileid] = manage[ds.settings.profileid] || {};
				manage[ds.settings.profileid][ds.libraryId || ds.settings.origin_id] = ds;
			}
		}

		var customizations = currentData.customizations;

		for (var i in utui.util.getVars(utui.data.customizations)) {
			var ds = utui.data.customizations[i];
			if (ds.settings && ds.settings.profileid) {
				customizations[ds.settings.profileid] = customizations[ds.settings.profileid] || {};
				customizations[ds.settings.profileid][ds.settings.origin_id] = ds;
			}
		}

		var profile = data.profile;

		//Determine if there are Additions/Removals/Updates to be done
		function checkDataObject(type, currData, newData, data, removefn, func) {
			for (var i in utui.util.getVars(data[type])) {

				var obj = data[type][i],
						item = currData[type][profile];
        if (func) {func(obj);}
				if (item && item[i]) {
					//update
					newData.update[type][item[i]._id] = obj;
					delete item[i];
				} else {
					//add
					newData.add[type][i] = obj;
				}
			}
			removefn = removefn || function (uid) {
				return uid
			};
			for (var i in utui.util.getVars(currData[type][profile])) {
				//remove
				if (item && item[i]) {
					var b = item[i]._id || item[i].id, key = removefn(b);
					if (key !== undefined) {
						newData.remove[type][key] = item[i];
					}
				} else {
					newData.remove[type][currData[type][profile][i]._id || i] = currData[type][profile][i];
				}
			}
		}

		checkDataObject(_public.DEFINE, currentData, newData, data);
		checkDataObject(_public.LOADRULES, currentData, newData, data);
		checkDataObject(_public.MANAGE, currentData, newData, data, function (uid) {
			var n, containerMap = utui.manage.containerMap;
			for (n in containerMap) {
				if (containerMap.hasOwnProperty(n)) {
					if (containerMap[n].settings && containerMap[n].id === uid) {
						return n;
					}
				}
			}
			return undefined;
		});
		checkDataObject(_public.CUSTOMIZATIONS, currentData, newData, data, null, function(obj){
      if (obj.id === "100026") {
        var a = "tagsOptOut";
        _public.mergeFunctions.tagTemplateLink(a, data.profile, a);
      }
    });

		//Call delete to remove objects that have been removed
		_deletePreviousImportData(profile, newData.remove);

		//Add Items that we have detected

		data.define = newData.add.define;
		data.loadrules = newData.add.loadrules;
		data.manage = newData.add.manage;
		data.customizations = newData.add.customizations;

    var _exts_to_check = Object.keys(newData.add.customizations);

    //Need a basic version, for current tags
    _public.mergeFunctions.generateTranslationMatrix(translationMatrix,[_public.MANAGE,_public.LOADRULES], profile);

		_addImportedData(self, data, environment,translationMatrix);

		//create translation matrix - so we can convert between Library Profile ID and Local Profile ID

		//for (var k = 0; k < objNames.length; k++) {
      _public.mergeFunctions.generateTranslationMatrix(translationMatrix,objNames, profile);
		//}

    for (var i = 0; i < _exts_to_check.length; i++) {
      var _idx = translationMatrix[_public.CUSTOMIZATIONS][_exts_to_check[i]];
      if (!_idx) {continue;}
      var _obj = newData.add.customizations[_exts_to_check[i]], _type;
      if (_obj.populaterule && _obj.populaterule !== "all") {
        _type = "populaterule";
      } else if (_obj.rule && _obj.rule !== "all") {
        _type = "rule";
      } else if (_obj.id === "100031") {
        for (var _prop in utui.util.getVars(_obj)) {
          if (_prop.indexOf("loadrule") > -1) {
            _type = _prop;
            break;
          }
        }
      }

      if (_type) {
        var popRule = translationMatrix.loadrules[_obj[_type]];
        if (utui.data.customizations[_idx][_type] !== popRule) {
          utui.data.customizations[_idx][_type] = popRule;
        }
      }
    }

  //Update Beigin the process of merging the changes

		//Mapping check - remove all dsID properties
		//Update all mappings that use extension generated variables
		for (var lp in utui.util.getVars(newData.update.manage)) {
			var manage = newData.update.manage[lp];
			if (manage) {
				for (var mapIdx in utui.util.getVars(manage.map)) {
					try{delete manage.map[mapIdx].dsID;}catch(e){manage.map[mapIdx].dsID = undefined;}
					var res = manage.map[mapIdx].type.match(/customization(\d+)/);
					if (res && res[1]) {
						manage.map[mapIdx].type = "customization" + translationMatrix.customizations[res[1]];
					}
				}
			}
			//Mark all templates as needing to be re-imported
			_public.mergeFunctions.tagTemplateLink(lp, profile, newData.update.manage[lp].id);
		}

		_mergeImportedData(newData, objNames, environment, translationMatrix, revision, minor_revision, data_cp);
	}

	function _reimportRefreshExtensions() {
		utui.profile.showAllModifiedTabLabels(utui.constants.extensions.TYPE);
		utui.util.pubsub.unsubscribe(utui.constants.profile.LIBRARY_IMPORT_FINISHED,_reimportRefreshExtensions , this);
	}
	function _mergeImportedData(newData, objNames, environment, translationMatrix, revision, minor_revision, data_cp) {

		for (var ki = 0; ki < objNames.length; ki++) {
			_public.mergeFunctions.updating(newData.update, objNames[ki], environment, translationMatrix, revision, minor_revision, data_cp);
		}

		//Work around if the user is on the Extensions tab during import tab needs to be refreshed after import to reflect any changes.
		utui.util.pubsub.subscribe(utui.constants.profile.LIBRARY_IMPORT_FINISHED,_reimportRefreshExtensions , this);

	}
  
  function _addImportedData(self, data, environment, translationMatrix) {
    
    var _addItems = function (dataObj, itemType, env, updateDataModel) {
      var obj = {};
      
      function _prepareItems() {
        
        var toImport = _.chain(dataObj)
                        .map(function (vals, key) {
                          obj = vals;
                          obj.imported = env;
                          obj.settings = data.settings;
                          // remove labels from imported items
                          delete obj.labels;
                          return obj
                        });
        
        utui[itemType].addBulkImportedItems(data, toImport.value());
        
      }
      
      if (dataObj && _.size(dataObj) > 0) {
        if (utui[itemType].generateNextUniqueServerIds) {
          utui[itemType].generateNextUniqueServerIds(_.size(dataObj), function () {
            _prepareItems();
          });
        } else {
          _prepareItems();
        }
      }
    };

		utui.customizations.validationMap = {};

		data.initialTab = utui.config.currentTab;

		if (data.define) {
			self.libraryQueue.numDataSources += _.size(data.define);
		}
		if (data.loadrules) {
			self.libraryQueue.numLoadRules += _.size(data.loadrules);
		}
		if (data.manage) {
			self.libraryQueue.numTags += _.size(data.manage);
		}
		if (data.customizations) {
			self.libraryQueue.numExtensions += _.size(data.customizations);
		}

		// ----------
		// Copy Data Sources, Load Rules, Tags, etc.

		//
		var dataObj = data[_public.DEFINE];
		_addItems(dataObj, _public.DEFINE, environment, false);

		//
		dataObj = data[_public.LOADRULES];
		if (dataObj) {
			if (_.size(dataObj) > 0) {
        var numLoadrules = (utui.data.loadrules) ? _.size(utui.data.loadrules) + 1 : 1; //Always have the all pages loadrules
				for (var key in dataObj) {
					var loadrule = dataObj[key];

					// maintain sort order from library
					loadrule.sort = parseInt(loadrule.sort) + numLoadrules;
				}
			}
		}
		// order extensions by sort property
		var orderedArr = _.sortBy(dataObj, function (lr) {
			return lr.sort;
		});

		_addItems(orderedArr, _public.LOADRULES, environment, true);
		if (orderedArr.length > 0) {
			_public.mergeFunctions.generateTranslationMatrix(translationMatrix, [_public.LOADRULES], data.profile);
		}

		//
		dataObj = data[_public.MANAGE];
		// Map to store library tag IDs so that we can update the customizations with scoped tags with the new tagID
		var tagKeys = {};
		if (dataObj) {
			// Special logic to obtain uniqueIDs for tags
			var numTags = _.size(dataObj);

			if (numTags > 0) {
				utui.manage.getNextTagIdFromServer(numTags, ++utui.manage.importCount,
					function(dObj) {
						return function (providedExistingLastTagId, count, nextTagId) {
							// successfully retrieved set of nextTagIds
							// loop thru tags and set id
							var numLocalTags = (utui.data.manage) ? _.size(utui.data.manage) : 0;

							for (var k in dObj) {
								var tag = dObj[k];
								tag.libraryId = tag.id;
								tag.id = "" + nextTagId++;
								tag._id = tag.id;

								tagKeys[tag.libraryId] = tag.id;
								// maintain sort order from library
								tag.sort = parseInt(tag.sort) + numLocalTags;
								// Default advanced setting custom env publishing to TRUE
								tag.selectedTargets = utui.targets.addTargetsToObject(tag.selectedTargets || {}, 'true', 'custom', true);

								// retrieve modified import configs here
								_public.mergeFunctions.modifiedImportTagConfigCheck(tag, data.profile);

								_public.mergeFunctions.tagTemplateLink(tag.id, data.settings.profileid, tag.libraryId);
                
                //make sure loadrule is matched to local version
                
                var lr_arr = _public.mergeFunctions.convertIDsLocalToLib(tag.loadrule, _public.LOADRULES, translationMatrix);
                var lr_str = lr_arr.join(',');
                if (tag.loadrule !== lr_str) {
                  tag.loadrule = lr_str;
                  if (lr_arr.length > 1) {
                    tag.multipleLoadRules = lr_str;
                    tag._multipleLoadRules = lr_str;
                  }
                }
							}

							// order tags by sort property
							var orderedArr = _.sortBy(dObj, function (tag) {
								return tag.sort;
							});
							_addItems(orderedArr, _public.MANAGE, environment, true);
						}
					}(dataObj),
					function() {
						// failed to retrieve nextTagId
						var numLocalTags = (utui.data.manage) ? _.size(utui.data.manage) : 0;
						for (var i in dataObj) {
							var tag = dataObj[i];

							tag.libraryId = tag.id;
							tag.id = "" + utui.manage.getNextTagIdFromLocal();
							tag._id = tag.id;
							tagKeys[tag.libraryId] = tag.id;
							// maintain sort order from library
							tag.sort = parseInt(tag.sort) + numLocalTags;

							//----
							_public.mergeFunctions.modifiedImportTagConfigCheck(tag, data.settings.profileid);

							// tag templates - retrieve from library and save to profile
							_public.mergeFunctions.tagTemplateLink(tag.id, data.settings.profileid, tag.libraryId);

							utui.data.settings.lastmanageid = parseInt(tag.id, 10);
							utui.manage.nextId = utui.data.settings.lastmanageid + 1;
						}
						// order tags by sort property
						var orderedArr = _.sortBy(dataObj, function (tag) {
							return tag.sort;
						});
						_addItems(orderedArr, _public.MANAGE, environment, true);
					}


				);
			}
		}

		//
		dataObj = data[_public.CUSTOMIZATIONS];
		if (dataObj) {
			// Store scope variables so we can update the scoped tags once the imported Tags have been added to the data model
			// Update extensions that have scoped tags
			if (_.size(dataObj) > 0) {
				var numExtensions = (utui.data.customizations) ? _.size(utui.data.customizations) : 0;
				for (var key in dataObj) {
					var extension = dataObj[key],
							libScope = extension.scope;
					if (libScope) {
						var tagIDs = libScope.split(',');
						var scopeCount = 0;
						for (var id in tagIDs) {
							var _tagID = tagIDs[id];
							if (_tagID !== 'global'
								&& _tagID !== 'footer'
								&& _tagID !== 'preload'
								&& _tagID !== 'domready') {
								tagIDs.splice(scopeCount, 1, tagKeys[tagIDs[id]] || translationMatrix[_public.MANAGE][tagIDs[id]] );
								extension.scope = String(tagIDs);
								scopeCount++;
							} else {
								extension.scope = String(tagIDs);
								scopeCount++;
							}
						}
					}

					// maintain sort order from library
					extension.sort = parseInt(extension.sort) + numExtensions;
				}
			}
		}
		// order extensions by sort property
		var orderedArr = _.sortBy(dataObj, function (ext) {
			return ext.sort;
		});
		_addItems(orderedArr, _public.CUSTOMIZATIONS, environment, false);

		// Make sure the publish exsits and copy over selected publish settings:
		if (utui.data.publish === 'undefined'){
			utui.data.publish = {};
		}
		if (data.publish && typeof data.publish.enable_sync_loader !== 'undefined'){
			utui.data.publish.enable_sync_loader = data.publish.enable_sync_loader;
		}

		self.setLibraryQueueItemImported();

		utui.util.setSession(true);
//    utui.profile.clear();
	}

	// ------------------------------------------------------------
	function _storeItemsInTempStorage(subject, obj) {
		var itemId;

		switch(subject) {
			case 'customizations':
			case 'define':
				itemId = obj._id;
				break;
			case 'loadrules':
			case 'manage':
				itemId = obj.id;
				break;
		}

		utui.diff.tempStorage.setItem(subject, itemId, obj);
	}

	function _deletePreviousImportData(libName, dataObj) {
		// delete previously imported items
		// loop thru imported customizations and delete
		// *Must delete customizations first so data sources are available when accordion is re-drawn

		var itemObj = {};

		//utui.data.customizations
		var containerMap = dataObj.customizations;
		for (var key in containerMap) {
			var settings = containerMap[key].settings;
			if (settings && settings.profileid == libName) {
				utui.customizations.dropExtension(key, true);
			}
		}
		utui.customizations.drawJUIAccordion();

		var defineIndex = dsapi.getHighestId();
		// loop thru imported data sources and delete
		for (var i in utui.util.getVars(dataObj.define)) {
			var ds = dataObj.define[i],
				settings = ds.settings;

			if (settings && settings.profileid == libName) {
				var dataKey = ds.type + '.' + settings.origin_id + '.' + settings.profileid;

				//TODO: 12/12/2013 mo
				// previous import data didn't have origin_id, so this data needs to be migrated
				// eventually this should be removed
				if (!settings.origin_id) {
					dataKey = ds.type + '.' + defineIndex + '.' + settings.profileid;
				}

				_public.migrateImportDataSource[ds.type + '.' + ds.name + '.' + ds._id] = dsapi.getNextId();
				_public.deletedImportDataSources[dataKey] = ds.type + '.' + ds.name;
				_public.deletedImportDataSourcesObj.push(dsapi.getDataSource(ds.type + '.' + ds.name));

				_storeItemsInTempStorage('define', ds);

				utui.define.dropVariable(dataObj.define[i], true);
			}
		}

		//utui.data.loadrules
		// loop thru imported loadrules and delete
		for (var i in utui.util.getVars(dataObj.loadrules)) {
			var lr = dataObj.loadrules[i],
          settings;
      if (!lr) continue;
      
				settings = lr.settings;

			if (settings && settings.profileid == libName) {
				var dataKey = settings.origin_id + '.' + settings.profileid;
				_public.deletedImportLoadRules[dataKey] = lr.id;

				_storeItemsInTempStorage('loadrules', lr);

				utui.loadrules.drop(lr.containerId, undefined, true);
			}
		}

		utui.loadrules.view.updateAccordion();

		//utui.manage.containerMap
		// loop thru imported tags and delete
		containerMap = dataObj.manage;
		for (var key in containerMap) {
			var settings = containerMap[key].settings;
			if (settings && settings.profileid == libName) {
				var container = _public.mergeFunctions.getContainer(_public.MANAGE, containerMap[key].id);
				if (container) {

					_storeItemsInTempStorage('manage', containerMap[key]);

					utui.manage.drop(container, true);
				}
				var tag = containerMap[key],
					tagConf = utui.profile.modifiedImportConfigs;
				if (tag && tagConf) {
					if (tagConf[tag.libraryId] && tagConf[tag.libraryId][tag.tag_id]) {
						delete tagConf[tag.libraryId][tag.tag_id];
					} else if (tagConf[tag.libraryId + libName]) {
						delete tagConf[tag.libraryId + libName];
					}
				}
			}
		}
		utui.loadrules.updateAllLRTags();
		utui.manage.updateAccordion(false);
		utui.manage.updateSortOrder();

		// Run validation after all that's been removed
		utui.validation.runValidationOnAllTabs();
	}

	function _linkLibrariesTempStore(profileName, profile) {
		// Add to temp storage for undoing any changes if user selects Cancel button
		if (typeof utui.profile.import.tempImportRelations[profileName] === 'undefined') {
			utui.profile.import.tempImportRelations[profileName] =  $.extend(true, {}, profile);
		}
	}

	function _getProfileFromProfileList(profileName) {
		if (!$.isEmptyObject(_public.profileList)) {
			for (var i=0; i<_public.profileList.length; i++) {
				var profile = _public.profileList[i];
				if (profile.name === profileName) {
					return profile;
				}
			}
		}
		return null;
	}

	function _removeImportFromProfile(imports, name) {
		for (var i = imports.length-1; i >= 0; i--) {
			if(imports[i].name === name) {
				//Remove from array
				imports.splice(i, 1);
			}
		}
		return imports;
	}

	function _enableSavePublishButton() {
		_public.libraryQueue.inheritanceInProgress = false;
		$("#global_save").attr('title', utui.tooltip.publish.save).mouseout()
			.attr("disabled" , false);
	}

	function _disableSavePublishButton() {
		_public.libraryQueue.inheritanceInProgress = true;
		$("#global_save").attr('title', localize.t('tiq.profile.inheritance_is_ongoing'))
			.attr("disabled", "disabled");
	}
}();

var UtuiView = Class.extend({

    initialize : function(){
        //console.log("UtuiView Super class initialize");
    },

    render : function () {
        //console.log("UtuiView Super class: Render");
    }

});
var UtuiViewModel = Class.extend({

    view: {},

    initialize : function(viewName) {

        if(!viewName) {
            console.warn('WARNING: No view name specified');
        }
        else {
            this.view = new window[viewName]();
        }

        //console.log("Utui.viewmodel Super class Constructor");
    }

});
var lrapi = function() {

	function _isImported(lrId) {
		if(typeof lrId !== 'undefined') {
			if(utui.data.loadrules[lrId] && !$.isEmptyObject(utui.data.loadrules[lrId].settings)) {
				return true;
			}
		}
		return false;
	}

	function _getObjectByLoadruleId(lrId) {
		if(typeof utui.data.loadrules[lrId] !== 'undefined') {
			return utui.data.loadrules[lrId];
		}

		return null;
	}

	// rb - this is needed since the "all" id is not part of utui.data.loadrules
	function _getContainerObjectByContainerId(containerId) {
		if(typeof utui.loadrules.containerMap[containerId] !== 'undefined') {
			return utui.loadrules.containerMap[containerId];
		}

		return null;
	}

	function _getContainerIdByLoadruleId(lrId) {
		var obj = _getObjectByLoadruleId(lrId);

		return obj.containerId;
	}

    function _getLoadruleIdByContainerId(containerId) {
        var obj = utui.loadrules.containerMap[containerId];

        return +obj.id
    }


    function _getTitle(lrId) {
        return utui.data.loadrules[lrId].title || "";
    }

    function _isAndConditionFilterable(operator) {
    	var nonComparisonOperators = [
    		'defined',
    		'notdefined',
    		'populated',
    		'notpopulated',
    		'is_badge_assigned',
    		'is_badge_not_assigned'
    	];

    	return ~nonComparisonOperators.indexOf(operator);
    }

	return {
		isImported: _isImported,

		getObjectByLoadruleId: _getObjectByLoadruleId,

		getContainerObjectByContainerId: _getContainerObjectByContainerId,

		getContainerIdByLoadruleId: _getContainerIdByLoadruleId,

        getLoadruleIdByContainerId: _getLoadruleIdByContainerId,

        getTitle: _getTitle,

        isAndConditionFilterable: _isAndConditionFilterable
	}
}();

var UtuiLoadrulesView = UtuiView.extend({

	initialize: function(){

		this._super(); //Call the initialize of the utui.view parent class
		var self = this;

        //Setup header
        var myTableHeader = '';
            myTableHeader += '<div id="loadrules_accordionHeader_status" class="container_status_header">' + localize.t('tiq.rules.status') + '</div>';
            myTableHeader += '<div id="loadrules_accordionHeader_title" class="container_title_header">' + localize.t('tiq.rules.title') + '</div>';
			myTableHeader += '<div id="loadrules_accordionHeader_label" class="container_label_header">' + localize.t('tiq.rules.labels');
	        myTableHeader += '  <span class="columnToggle"><i class="icon-plus-sign-alt"></i></span>';
	        myTableHeader += '</div>';
            myTableHeader += '<div id="loadrules_accordionHeader_uid" class="container_uid_header">UID</div>';
            myTableHeader += '<div id="loadrules_accordionHeader_tagstatus" class="container_tagstatus_header">' + localize.t('tiq.rules.mapped') + '</div>';

		$('#loadrules_content_header').html(myTableHeader);

		// $('body').undelegate('a.action_loadrules_addAndItem', 'click').delegate('a.action_loadrules_addAndItem', 'click',function(e){
		$('body').off('click' , 'a.action_loadrules_addAndItem').on('click', 'a.action_loadrules_addAndItem',function(e){
			self.addAndItem($(this).attr('param'));
			e.preventDefault();
		});
		$('body').off('click' , 'a.action_loadrules_removeItem').on('click' , 'a.action_loadrules_removeItem',function(e){
			e.preventDefault();
			self.removeItem($(this).attr('param'));
			var $el = $(this);

			var id = $el.attr('id');
			var validationId = $el.attr('param').replace('_pane','_validation');

			$('#'+validationId).remove();
		});

		// Load Filter Menu
		var content = '<span class="menufont">Filter</span>';
		$('#loadRules_filter_menu_text').html(content);
		$("#loadRules_filter_menu_button").safeBind('click',function() {
			utui.loadrules.toggleFilterMenu();
		});
	},

	render : function(loadrule) {
		this._super();

        var container = loadrule.containerId,
	        title = this.getTitle(loadrule),
	        content = '';

		// compile tags scoped data for load rule
		utui.loadrules.getTagsScoped(loadrule);

        /*
         * Load Rule Initial Template
         */
        content += '<div id="'+container+'" data-id="' + loadrule.id + '" class="loadrules_container">';
        content += '  <h3><a href="#" id="'+container+'_accordion" class="accordion-title">'+title+'</a></h3>';
		content += '  <div class="accordionItemContent"></div>';
		content += '</div>';

		$('#loadrules_content').append(content);
    },

    // -------------------------------------------------
    // Constructor
    // @return
    constructAccordionContents: function(container, loadrule, callback) {
    	var content = '',
    		sidebarContent = '',
    		canModify = utui.labels.canUserModify(loadrule.labels);	// Resource lock check

        /*
         * Loadrules Main
         */
		content += '    <div class="accordion-container slide has-sidebar">';
		content += '        <div class="sidebar-container"></div>';
		content += '        <div class="main-container">';
		content += '            <div class="main-header"></div>';
		content += '            <div class="main-body" style="padding-bottom:12px">';
		content += '              <div id="'+container+'_loadRuleConditions" class="contentSection"></div>';
		content += '              <div id="'+container+'_TagsScoped" class="contentSection"></div>';
		content += '            </div>';
		content += '        </div>';
		content += '    </div>'; //  end accordion-container

		$('#'+container).find('.accordionItemContent').html(content);

        /*
         * Loadrules Sidebar
         */
        sidebarContent += '        <div class="contextBox">';
        if( utui.loadrules.isEditable(loadrule) ) {
            sidebarContent += '        <div class="contextActionButtons">';
            sidebarContent += '            <a href="#" id="'+container+'_copyBtn" class="' + (!canModify ? 'ui-state-disabled ' : ' ') + 'actionCopy btn btn-small i-color-copy"><i class="icon-copy"></i> ' + localize.t('tiq.rules.copy') + '</a>';
            sidebarContent += '            <a href="#" id="'+container+'_deleteBtn" class="' + (loadrule.imported || !canModify ? 'ui-state-disabled ' : ' ') + 'actionDelete btn btn-small i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.rules.delete') + '</a>';
            sidebarContent += 	'        </div>';
        }

		// LABELS
		if (!loadrule.imported && loadrule.id !== 'all') {
			sidebarContent += '<div id="'+container+'_labels" class="contextSectionContent">';
			sidebarContent += '	<div class="contextSectionHeader labels js-labels-container">' + localize.t('tiq.rules.labels') + ' ';
			sidebarContent += '		<div class="labels_select_wrapper">';
			sidebarContent += '			<select id="loadrules_labels_select_' + loadrule.id + '" data-list-type="single"></select>';
			sidebarContent += '		</div>';
			sidebarContent += '	</div>';
			sidebarContent += '</div>';
		}
		sidebarContent += '       </div>'; // end contextBox


        $('#'+container).find('.sidebar-container').html(sidebarContent);

		utui.loadrules.view.updateItemHeader(loadrule.id, container);

		utui.loadrules.labels.renderSingleLabelSelect(loadrule.id, container);
		utui.loadrules.labels.redrawLabels(loadrule.labels, container);

		$('#'+container+'_loadRuleConditions').html( this.template.loadruleConditions(loadrule) );

		$('#'+container+'_TagsScoped').html( this.template.tagsScoped(loadrule) );

		this.bindUI(loadrule);

        utui.loadrules.lastOpenLoadruleId = container;

        if(callback) callback();
    },

    // -------------------------------------------------
    // Deconstructor
    // @return
    deconstructAccordionContents: function(container) {
        // _saveTemplateData(extId);

        // Clear DOM
        $('#'+container).find('.accordionItemContent').empty();
    },


	updateItemHeader: function(id, container) {
		if (utui.data.loadrules[id]) {
			var labels = utui.data.loadrules[id].labels,
				$container = $('#'+container+' .contentContainer'),
				content = '';

			$container.find('.main-header').remove();

			if (!utui.labels.canUserModify(labels)) {
				if (!$container.find('.main-header')[0]) {
					content += '      <div class="main-header bg-info">';
					content += '          <div class="section-padded text-center">' + localize.t('tiq.rules.you_cannot_modify_rule') + '</div>';
					content += '      </div>';
					$container.prepend(content);
				}
			}
		}
	},

    bindUI:function(loadrule) {
        var container = loadrule.containerId;

        //Enable toggle button if the object is editable
        if(utui.loadrules.isEditable(loadrule) ) {
            $('#'+container+'_status_toggle').click(function(event){
                event.preventDefault();
                event.stopPropagation();
                utui.loadrules.toggleActive(container);
            });

            $('#'+container+'_copyBtn').on('click',function(event) {
                event.stopImmediatePropagation();
				if (!$(this).hasClass("ui-state-disabled")) {
					utui.loadrules.copyLoadRule(container);
				}
            });

			$('#'+container+'_deleteBtn').on('click',function(event) {
				event.stopImmediatePropagation();
				if (!$(this).hasClass("ui-state-disabled")) {
					utui.loadrules.dropConfirm(container);
				}
			});

			$('#'+container+'_editLoadRule').on('click',function(event) {
				event.stopImmediatePropagation();
				if (!$(this).hasClass("ui-state-disabled")) {
					utui.loadrules.showEditItem(container);
				}
			});

		} else {
			$('#'+container+'_status_toggle').addClass("disabled_toggle");
		}
	},

	eventHandler: {
        // Accordion Outer Shell
        // -------------------------------------------------
        onAccordionHeaderClick: function(e) {
        	var $content = $('#loadrules_content');
            var i = $content.find('h3').index(this),
                lrId = $(this).closest('.loadrules_container').attr('data-id');

            $content.accordion('activate', i);

            if(lrId === 'all') return;

			utui.loadrules.view.validateModel(lrId);
			utui.loadrules.view.validateView(lrId);

            return false;
        },
        // -------------------------------------------------
        onAccordionChange: function(e, ui) {
            e.stopImmediatePropagation();
            var lastOpenLoadruleId = utui.loadrules.lastOpenLoadruleId,
                loadruleContainerObj,
                containerId;

            var accordionCollection = $('#loadrules_content').children(),
                openAccordionSortPosition = ui.options.active;

            /*
             * Deconstruct old accordion
             */
            if(!$.isEmptyObject(lastOpenLoadruleId)) {
                utui.loadrules.view.deconstructAccordionContents(lastOpenLoadruleId);
            }

            /*
             * Construct new accordion
             */
            if (typeof openAccordionSortPosition === 'number') {
                containerId = $(accordionCollection[openAccordionSortPosition]).attr('id');
				loadruleContainerObj = lrapi.getContainerObjectByContainerId(containerId);

                if (containerId) {
                    // Animate accordion to slide down after constructing contents
                    utui.loadrules.view.constructAccordionContents(containerId, loadruleContainerObj, function () {
                        $('#'+containerId).find('.accordion-container').slideDown(300);
                    });
                }
            }
        }
	},

	template: {
		// @param (loadrule) object - container object
		loadruleConditions: function(loadrule) {
			var container = loadrule.containerId,
				rules = utui.loadrules.getRulesLoadrules(loadrule),
				v = '',
				dateRangeContent = utui.loadrules.dateRange.toDisplayTime(loadrule.startDate, loadrule.endDate),
				canModify = utui.labels.canUserModify(loadrule.labels);


            v += '        <div class="contentSectionTitle">';
            v += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
            v += '            <div class="titleText">' + localize.t('tiq.rules.load_rule_configuration') + '</div>';
            if (utui.loadrules.isEditable(loadrule)) {
                v += '            <div class="titleButton"><span id="' + container + '_editLoadRule" class="' + (loadrule.imported || !canModify ? 'ui-state-disabled ' : ' ') + 'btn btn-mini actionEditRules i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.rules.edit') + '</span></div>';
            }
            v += '        </div>';

            // Load Rule Conditions Body
            v += '        <div class="contentSectionBody scrollSection">';
            v += '          <div class="contentBlock">';
            v += '            <div class="contentBlockTitle">' + localize.t('tiq.rules.settings') + '</div>';
            v += '            <table id="'+container+'_basic_settings" class="contentTable">';
            v += '                <tbody>';
            v += '                    <tr>';
            v += '                        <td class="contentTableLabel">';
            v += '                            <div>' + localize.t('tiq.rules.title') + '</div>';
            v += '                        </td>';
            v += '                        <td class="contentTableValue">';
            v += '                            <div id="'+container+'_settingsGeneral_title" class="contentValueContainer">';
            v += '                                <div class="contentValue">'+utui.util.safeEscape(loadrule.title)+'</div>';
            v += '                            </div>';
            v += '                        </td>';
            v += '                    </tr>';
            v += '                </tbody>';
            v += '            </table>';

			if (dateRangeContent) {
				v += '<div class="LRdateRangeBlock"><div class="LRsDateRange">' + dateRangeContent + '</div></div>';
			}

            v += '            <div class="contentBlockTitle">' + localize.t('tiq.rules.conditions') + '</div>';
            v += '            <div class="LRconditionsBlock contentSectionBodyContent LRsConditions">'+rules+'</div>';
            v += '          </div>';
            v += '        </div>'; // end contentSectionBody

            return v;
        },
        // @param (loadrule) object - container object
        tagsScoped: function(loadrule) {
            var container = loadrule.containerId,
	            tagsScoped = utui.loadrules.getTagsScoped(loadrule),
	            tagCounts = utui.loadrules.getTagsScopedCount(loadrule),
	            tagCount = tagCounts.total,
	            tagCountActive = tagCounts.active,
	            tagCountInactive = tagCounts.inactive,
	            v = '';

            // Tags Scoped Head
            v += '        <div class="contentSectionTitle">';
            v += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
            v += '            <div class="titleText">' + localize.t('tiq.rules.tags') + '</div>';
            v += '            <div class="titleCount"><span class="titleCountActive">' + localize.t('tiq.rules.num_active', {num:tagCountActive}) + '</span> / <span class="titleCountTotal">'+tagCount+'</span></div>';
            v += '        </div>';v

			// Tags Scoped Body
			v += '        <div class="contentSectionBody scrollSection">';
			v += '          <div class="contentBlock">';
			v += '            <div class="LRconditionsBlock contentSectionBodyContent">'+tagsScoped+'</div>';
			v += '          </div>';
			v += '        </div>'; // end contentSectionBody

			return v;
		}
	},

	updateLR : function(loadrule) {
		var container = loadrule.containerId;
		var content = this.template.loadruleConditions(loadrule);

		$('#'+container+'_loadRuleConditions').html(content);
		this.bindUI(loadrule);
	},

	updateTagsScoped : function(loadrule) {
		if(typeof loadrule !== 'undefined'){
			var container = loadrule.containerId;
			var tagScopedContent = this.template.tagsScoped(loadrule);
			$('#'+container+'_TagsScoped').html(tagScopedContent);
		}
	},

	removeLR : function(containerId) {
		$('#'+containerId).remove();
	},

	renderDropLR : function (tagsLoaded, container, loadRuleId, callback) {

        $('#dialog').dialog('destroy');
        var content = '<span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span><div style="padding-bottom: 4px;">' + localize.t('tiq.rules.you_cannot_undo_drop') + '</div>';
        //var loadRuleId = this.containerMap[container].id;
        var tagsLoaded = [],
				pm_explict_in_use = -1;
        for(var i in utui.util.getVars(utui.data.manage)){
            if(utui.data.manage[i].loadrule == loadRuleId){
                tagsLoaded.push(i);
            } else if (utui.data.manage[i].loadrule.indexOf(',') !== -1 || utui.data.manage[i].loadrule === utui.manage.mlrSelVal){
                var lrlist;
                if (utui.data.manage[i].loadrule === utui.manage.mlrSelVal) {
                    lrlist = utui.data.manage[i].multipleLoadRules.split(',');
                } else {
                    lrlist = utui.data.manage[i].loadrule.split(',');
                }
                for (var lidx=0; lidx<lrlist.length; lidx++){
                    if (loadRuleId == lrlist[lidx]){
                        tagsLoaded.push(i);
                    }
                }
            }
        }
        
        if (utui.data.privacy_management.explicit){
          pm_explict_in_use = utui.data.privacy_management.explicit.loadrule.indexOf(loadRuleId);
        	if (pm_explict_in_use > -1) {
  					content += '<div class="ui-state-error" style="margin-top: 12px;padding:8px;">' + localize.t('tiq.dashboard.privacy_management.load_rule_in_use_delete')+'</div>';
        	}
				}
     
	    if (tagsLoaded.length > 0) {
		    content += '<div class="ui-state-error" style="margin-top: 12px;padding:8px;">' + localize.t('tiq.rules.there_are_tags_tied');
		    content += '<ul style="padding-top: 8px">';
		    for (var i = 0; i < tagsLoaded.length; i++) {
			    var title = utui.config.manageList[utui.data.manage[tagsLoaded[i]].tag_id].title;
			    if (utui.config.manageList[utui.data.manage[tagsLoaded[i]].tag_id].addMore == 'true') {
				    title += ': ' + utui.data.manage[tagsLoaded[i]].title;
			    }
			    if (typeof utui.data.manage[tagsLoaded[i]].status != 'undefined') title += ' <font class="' + utui.data.manage[tagsLoaded[i]].status + '">(' + localize.t('tiq.rules.' + (utui.data.manage[tagsLoaded[i]].status == 'active' ? 'active' : 'inactive')) + ')</font>';
			    content += '<li>' + title + '</li>';
		    }
		    content += '</ul></div>';
	    }

        $('#loadrules_delete_confirm').html(content);
        $('#loadrules_delete_confirm').dialog({
            resizable: false,
            height:'auto',
            width:450,
            modal: true,
            draggable: true,
            position: ['center',110],
            show: 'blind',
            title: localize.t('tiq.rules.are_you_sure_delete'),
            buttons: [
                {
                    text: localize.t('tiq.dialog.button.delete_load_rule'),
                    id: 'loadrules_delete_confirm_deleteBtn',
                    click: function() {
                        $(this).dialog("close");
                        if (pm_explict_in_use > -1) {
                          utui.util.pubsub.publish(utui.constants.privacy_management.explicit.LRUPDATED, {loadrule: pm_explict_in_use});
												}
                        for(var i=0;i<tagsLoaded.length;i++){
                            utui.data.manage[tagsLoaded[i]].status = 'inactive';
                            var cmId;
                            for(var j in utui.util.getVars(utui.manage.containerMap)){
                                if (utui.manage.containerMap[j].id == utui.data.manage[tagsLoaded[i]].id){
                                    cmId = j;
                                    utui.manage.containerMap[j].status = 'inactive';
                                }
                            }
                            if(utui.data.manage[tagsLoaded[i]].loadrule === utui.manage.mlrSelVal || utui.data.manage[tagsLoaded[i]].loadrule.indexOf(',') !== -1) {
                                var lrlist;
                                var newList = '';
                                var comma = '';
                                if (utui.data.manage[tagsLoaded[i]].loadrule === utui.manage.mlrSelVal) {
                                    // console.log('mlrSelVal is set, getting multipleLoadRules');
                                    lrlist = utui.data.manage[tagsLoaded[i]].multipleLoadRules.split(',');
                                } else {
                                    // console.log('getting load rules from loadrule');
                                    lrlist = utui.data.manage[tagsLoaded[i]].loadrule.split(',');
                                }

								for (var lidx=0; lidx<lrlist.length; lidx++){
									if (lrlist[lidx] !== utui.loadrules.containerMap[container].id && typeof utui.data.loadrules[lrlist[lidx]] !== "undefined"){
										newList += comma + lrlist[lidx];
										comma = ",";
									}
								}

								if (newList.indexOf(',') >= 0){
									// If there are multiple load rules after deletion

                                    utui.data.manage[tagsLoaded[i]].multipleLoadRules = newList;
                                    utui.manage.containerMap[cmId].multipleLoadRules = newList;

									utui.data.manage[tagsLoaded[i]]._multipleLoadRules = newList;
									utui.manage.containerMap[cmId]._multipleLoadRules = newList;

									utui.data.manage[tagsLoaded[i]].loadrule = newList;
									utui.manage.containerMap[cmId].loadrule = newList;

                                } else {
									utui.data.manage[tagsLoaded[i]].loadrule = newList;
                                    utui.manage.containerMap[cmId].loadrule = newList;

									//Keep while transitioning to only using .loadrule for multiple load rules
									utui.data.manage[tagsLoaded[i]].multipleLoadRules = '';
									utui.manage.containerMap[cmId].multipleLoadRules = '';
									utui.data.manage[tagsLoaded[i]].multipleLoadRulesTitle = '';
									utui.manage.containerMap[cmId].multipleLoadRulesTitle = '';

									utui.data.manage[tagsLoaded[i]]._multipleLoadRules = '';
									utui.manage.containerMap[cmId]._multipleLoadRules = '';
									utui.data.manage[tagsLoaded[i]]._multipleLoadRulesTitle = '';
									utui.manage.containerMap[cmId]._multipleLoadRulesTitle = '';

									$('#'+cmId+'_loadrule').val(newList);
								}
							} else {
								utui.data.manage[tagsLoaded[i]].loadrule = 'all';
								utui.manage.containerMap[cmId].loadrule = 'all';
								utui.data.manage[tagsLoaded[i]].multipleLoadRules = '';
								utui.manage.containerMap[cmId].multipleLoadRules = '';
								utui.data.manage[tagsLoaded[i]].multipleLoadRulesTitle = '';
								utui.manage.containerMap[cmId].multipleLoadRulesTitle = '';

								utui.data.manage[tagsLoaded[i]]._multipleLoadRules = '';
								utui.manage.containerMap[cmId]._multipleLoadRules = '';
								utui.data.manage[tagsLoaded[i]]._multipleLoadRulesTitle = '';
								utui.manage.containerMap[cmId]._multipleLoadRulesTitle = '';
								$('#'+cmId+'_loadrule').val('all');
							}
						}

						utui.loadrules.drop(container, callback);

						// Run validation check
						utui.validation.runValidationOnAllTabs();

                        // refresh autocomplete search terms
                        utui.profile.initSearch();
                    }
                },
                {
                    text: localize.t('tiq.dialog.button.deactivate'),
                    id: 'loadrules_delete_confirm_deactivateBtn',
                    class: 'deactivateLR',
                    click:function() {
                        $(this).dialog("close");
                        utui.loadrules.toggleActive(container);
                    }
                },
                {
                    text: localize.t('tiq.dialog.button.cancel'),
                    id: 'loadrules_delete_confirm_cancelBtn',
                    style: 'float:left; margin-left: 12px',
                    click: function() {
                        $(this).dialog('close');
                    }
                }
            ],
            open:function() {
                var myLoadRule = utui.data.loadrules[loadRuleId];

				if(myLoadRule.status != 'active'){
					// hide deactivate Load Rule button
					$('button.deactivateLR').hide();
				}
				if(typeof callback!='undefined'){
					$('button.deactivateLR').hide();
				}
			}
		});
	},

	updateAccordion:function(lastActiveFlag, setLoadruleToOpen){
		var $loadrulesContent = $('#loadrules_content'),
			isContainerOpen = function() {
		        var accordion = $('#loadrules_content').accordion('option', 'active');

		        if( typeof accordion === 'number' ) {
		            return true;
		        }
		        return false;
			},
			containerId;

		// ------------------------------
		$loadrulesContent.accordion('destroy').accordion({
			header: 'h3',
			active: false,
			autoHeight: false,
			animated: false,
			clearStyle: true,
			collapsible: true,
            change: utui.loadrules.view.eventHandler.onAccordionChange,
            event: '' // We're clearing the event in order to allow our extension validation to control the close
		}).sortable({
				handle: 'h3',
				axis: 'y',
				update:function(e,ui){
					utui.loadrules.view.updateSortOrder();

	                // Once sorted, rebind the accordion
	                if(isContainerOpen()) {
	                    utui.loadrules.view.updateAccordion(undefined, utui.loadrules.lastOpenLoadruleId);
	                } else {
	                    utui.loadrules.view.updateAccordion();
	                }

					utui.profile.setDirty();
				}
			});

		if(lastActiveFlag){
			var a = $('#loadrules_content > div').length;
			$loadrulesContent.accordion('activate', a - 1);
		}

		if(setLoadruleToOpen) {
			containerId = setLoadruleToOpen;
			$('#'+containerId).trigger('click');
		}

        $('#loadrules_content').find('h3').off().on('click', this.eventHandler.onAccordionHeaderClick);

        var itemCount = $('#loadrules_content > div').length;
        if(itemCount <= 1){
            var noItemsToShow = '';
            noItemsToShow += '<div class="noItemsToShow">';
            noItemsToShow += '  <span>' + localize.t('tiq.rules.add_new_rule') + '</span>';
            noItemsToShow += '  <i class="icon-hand-up"></i>';
            noItemsToShow += '</div>';
            $('#tabs-loadrules .config_button_nofloat').append(noItemsToShow)
        } else {
            $('#tabs-loadrules .noItemsToShow').remove();
        }
    },

	updateSortOrder:function(){
		$('#loadrules_content .loadrules_container').each(function(index){
			var container = $(this).attr('id');
			var loadrule = utui.loadrules.containerMap[container];
			loadrule.sort = index;
		});
	},

	// ------------------------------------------------------------
	bindToggleViewportTooltip: function (container) {
		$('#' + container + '_inputselect').safeBind('change', function () {
			utui.loadrules.view.hideShowViewportTooltip(container, $(this).val());
		});

		// Hide/Show tooltip in-case viewport is first item in list
		utui.loadrules.view.hideShowViewportTooltip(container, $('#' + container + '_inputselect').val());
	},

	// ------------------------------------------------------------
	hideShowViewportTooltip: function (container, value) {
		if (value === 'dom.viewport_height') {
			$('#' + container + '_viewport_height_tooltip').css('display', 'inline-block');
			$('#' + container + '_viewport_width_tooltip').hide();
		} else if (value === 'dom.viewport_width') {
			$('#' + container + '_viewport_width_tooltip').css('display', 'inline-block');
			$('#' + container + '_viewport_height_tooltip').hide();
		} else {
			$('#' + container + '_viewport_height_tooltip').hide();
			$('#' + container + '_viewport_width_tooltip').hide();
		}
	},

	// ------------------------------------------------------------
	addOrItem: function (container) {
		var containerOrig = container,
			bShowOrDivider = $("#" + containerOrig + "_pane").children().length > 0,
			v = '';

		container += '_' + utui.util.getContainerId();
		if (bShowOrDivider) {
			v += '<div id="' + container + '_pane_or_clause_div" style="margin-bottom:4px; margin-left:5px; margin-top:4px;width:100%;clear:both;">' + localize.t('tiq.rules.or') + ' </div>';
		}

		v += '<div class="customization_div ui-widget-content loadrule_orItem" id="' + container + '_pane">';
		v += '  <div id="'+container+'_validation" class="js-validation-msg bg-warning loadrule-row-validation-container">'+this.getRowErrorMsg()+'</div>';
		v += '  <div style="position:relative; clear:both;">';
		v += '    <a class="dropdown_button"><b class="caret"></b></a>';
		v += '    <span style="float:left;margin-left:9px;width:30px;margin-top:4px;"></span>';
		v += '    <div class="customization_item" style="float:left">' + this.getInputSelect(container) + '</div>';
		v += '    <div class="customization_item" style="float:left">' + this.getOperatorSelect(container) + '</div>';
		v += '    <div class="customization_item"><input id="' + container + '_filter" type="text" size="50" value="" class="imNoQuote"></div>';
		v += '    <div class="customization_item">';
		v += '        <a href="#" title="' + utui.tooltip.loadrules.viewport_height + '" id="' + container + '_viewport_height_tooltip" class="icon-question-sign"></a>';
		v += '        <a href="#" title="' + utui.tooltip.loadrules.viewport_width + '" id="' + container + '_viewport_width_tooltip" class="icon-question-sign"></a>';
		v += '    </div>';
		v += '    <div class="customization_item">';
		v += '        <a href="#" param="' + container + '" class="action_loadrules_addAndItem ui-state-default ui-corner-all" style="margin-top:3px;margin-right:5px;position:relative; float:left">';
		v += '            <span class="ui-icon ui-icon-plus" title="' + utui.tooltip.loadrules.add + '" id="' + container + '_add_tooltip"></span>';
		v += '        </a>';
		v += '    </div>';
		v += '  </div>';
		v += '</div>';

		$('#' + containerOrig + '_pane').append(v);
		$('#' + container + '_filter').focus();

		// the drop down button is added, but it doesn't do anything yet, initialize it
		this.initDropDownButton($('#' + container + '_pane').find(".dropdown_button"), container + '_pane');

		dsapi.convertSelectListToSelect2(container + '_inputselect');
		$('select[id="' + container + '_operatorselect"]').select2();

		this.bindToggleViewportTooltip(container);

		var tooltipObj = {};
		tooltipObj[container + '_add_tooltip'] = { gravity: 'n' };
		tooltipObj[container + '_remove_tooltip'] = { gravity: 'n' };
		tooltipObj[container + '_viewport_height_tooltip'] = { gravity: 'n' };
		tooltipObj[container + '_viewport_width_tooltip'] = { gravity: 'n' };
		utui.util.addTooltip(tooltipObj);

		$('#'+container+'_inputselect').on('change', function() {
			$('#'+container+'_validation').slideUp();
		});

		return container;
	},

	addDateRangeItem:function(container){
		$('.date_range').show();
		$('.btn_add_date_range').hide();
		$('.btn_remove_date_range').show();
	},

	removeDateRangeItem:function(container){
		$('.date_range').hide();
		utui.loadrules.dateRange.clearValues();
		$('.btn_add_date_range').show();
		$('.btn_remove_date_range').hide();
	},

	showAddMore:function(type, callback){
		var container = 'loadrules_dialog_addmore',
			$containerEl = $('#'+container),
            lrId,
			that = this,
			range = '';

		$containerEl.html('');
		$containerEl.append('<div id="loadrules_dialog_error" class="ui-state-error ui-corner-all padded"></div><div class="customization_div"><div class="customization_label" style="padding-bottom:8px">' + localize.t('tiq.rules.title') + ': </div><div class="customization_item"><input type="text" id="'+container+'_title" name="'+container+'_title" value="" maxlength="100" size="48"></div>');

		// Date Range
		var range = '';
		range += '<div class="customization_div date_range">';
		range += '	<div class="date_range_title">' + localize.t('tiq.rules.date_range') + ' <span class="icon-question-sign" title="' + utui.tooltip.loadrules.dateRange + '" id="date_range_add_tooltip"></span></div>';
		range += '	<div class="date_range_body">';
		range += '		<span class="date_time_container"><label>' + localize.t('tiq.rules.start') + '</label> <input type="text" placeholder="' + localize.t('tiq.rules.any_day') + '" class="startDate date datepicker" maxlength="10" /><span class="icon-calendar"></span><input type="text" placeholder="' + localize.t('tiq.rules.anytime') + '" class="startTime time timepicker" maxlength="8" /><span class="icon-time"></span></span>';
		range += '		<span class="date_time_container"><label>' + localize.t('tiq.rules.end') + '</label> <input type="text" placeholder="' + localize.t('tiq.rules.any_day') + '" class="endDate date datepicker" maxlength="10" /><span class="icon-calendar"></span><input type="text" placeholder="' + localize.t('tiq.rules.anytime') + '" class="endTime time timepicker" maxlength="8" /><span class="icon-time"></span></span>';
		range += '	</div>';
		range += '</div>';
		$containerEl.append(range);

		// Bind to the blur event to prevent bad user enetered data
		$('.datepicker').datepicker({numberOfMonths:2})
			.safeBind('blur', utui.loadrules.dateRange.onDateBlur);

		// Bind to the blur event to prevent bad user enetered data
		$('.timepicker').timepicker({/*hours:{starts:1,ends:24},*/showPeriod:true, periodSeparator:' ', showMinutes:true})
			.safeBind('blur', utui.loadrules.dateRange.onTimeBlur);

		$containerEl.append('<div id="'+container+'_pane"></div>');

		if(type == 'create') {
			that.addOrItem(container);
		}

		var tooltipObj = {};
		tooltipObj['date_range_add_tooltip'] = { gravity: 'w' };
		utui.util.addTooltip(tooltipObj);

		$containerEl.append('<div style="margin-top:10px"><button class="config_button_nomargin btn_add_date_range" id="'+container+'_button_adddatecondition" type="button">'+localize.t('tiq.rules.add_date_range')+'</button><button class="config_button_nomargin btn_remove_date_range" id="'+container+'_button_removedatecondition" type="button">Remove Date Range Condition</button><button class="config_button_nomargin" id="'+container+'_button_addorcondition" type="button">'+localize.t('tiq.rules.add_or_condition')+'</button></div>');

        $('#dialog').dialog('destroy');
        $('#dialog').show();
		$('#loadrules_dialog_addmore').dialog({
			autoOpen: true,
			height: 'auto',
			width: 850,
			modal: true,
			closeOnEscape: true,
			closeText: '',
			draggable: true,
			resizable: false,
			position: ['center',110],
			title: localize.t('tiq.rules.load_rules_new'),
			buttons: [
				{
					text: localize.t('tiq.dialog.button.apply'),
					id: "loadrules_dialog_addmore_applyBtn",
					class: 'nav-btn',
					click: function() {
						var isFirstSave = (type === 'create') ? true : false;

						if(utui.loadrules.view.validation(container)){

							$(this).dialog("close");

							utui.loadrules.processApply(isFirstSave, function processApplyCB(loadruleId) {
								if(typeof callback !== 'undefined') callback({ loadruleid: loadruleId });

								// refresh autocomplete search terms
								utui.profile.initSearch();
							});

							utui.validation.runValidationOnAllTabs();
						}
					}
				},
				{
					text: localize.t('tiq.dialog.button.cancel'),
					id: 'loadrules_dialog_addmore_cancelBtn',
					class: 'nav-btn',
					style: 'float:left; margin-left: 12px',
					click: function() {
                        var tagging = { action: utui.constants.tagging.TAGGING,
							resource_type : utui.constants.loadrules.TYPE.toLowerCase(),
                            tealium_event : utui.constants.tagging.CREATED_CANCEL
                        };

                        utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);
                        $(this).dialog('close');
					}
				}
			],
			close: function() {}
		});
		$('#'+container+'_button_addorcondition').button().click(function(){that.addOrItem(container)});
		$('#'+container+'_button_adddatecondition').button().click(function(){that.addDateRangeItem(container)});
		$('#'+container+'_button_removedatecondition').button().click(function(){that.removeDateRangeItem(container)});
		utui.util.setSession(true);
	},
	isInputFieldValid: function(id) {
		var rowId = id.replace('_inputselect', '_validation');

		if($('#'+id).select2('val') === '') {
			$('#'+rowId).slideDown();
			return false;
		}
		else {
			$('#'+rowId).hide();
			return true;
		}
	},
	isAllInputFieldsValid: function() {
		var $inputCollection = $('#loadrules_dialog_addmore :input[id*="_inputselect"]'),
			valid = true,
			rowId,
			id;

		for (var i = 0; i < $inputCollection.length; i++) {
			id = $($inputCollection[i]).attr('id');
			rowId = id.replace('_inputselect', '_validation');

			if(!this.isInputFieldValid(id)) {
				this.showRowErrorMsg(rowId);
				valid = false;
			};
		};

		return valid;
	},
	validation:function(container){
		$('#loadrules_dialog_error').hide();

		if ($('#'+container+'_title').val().trim() === '') {
			$('#loadrules_dialog_error').html(localize.t('tiq.rules.error.title_cannot_be_blank')).show();
			$('#'+container+'_title').focus();
			return false;

		} else if (!utui.loadrules.dateRange.isBeforeDate()) {
			$('#loadrules_dialog_error').html(localize.t('tiq.rules.error.title_cannot_be_blank')).show();
			return false;

		} else {
			var $conditions = $('#loadrules_dialog_addmore :input[id*="_filter"]'),
				$visibleInputElements = $conditions.filter(':visible'),
				$hiddenInputElements = $conditions.filter(':hidden'),
				$dateRangeElements = $('#loadrules_dialog_addmore .date_range_body :input:visible'),
				hasDateRangeValue = false;

			// Check to see if any date range field contains a value
			$.each($dateRangeElements, function() {
				if ($(this).val().trim() !== '') {
					hasDateRangeValue = true;
				}
			});

			if(!utui.loadrules.view.isAllInputFieldsValid()) {
				$('#loadrules_dialog_error').html(localize.t('tiq.validation.message.declare_input_fields')).show();
				return false;
			}

			// Must have a Date Range or OR condition
			if (!$conditions.get(0) && !$dateRangeElements.get(0)) {
				$('#loadrules_dialog_error').html(localize.t('tiq.rules.error.or_condition_or_date_range')).show();
				return false;

			// Date Range must have a value if visible
			} else if ($dateRangeElements.get(0) && !hasDateRangeValue) {
				$('#loadrules_dialog_error').html(localize.t('tiq.rules.error.enter_valid_range')).show();
				return false;
			}


			for(var i in utui.util.getVars($visibleInputElements)){
				if(typeof $visibleInputElements[i].id!='undefined'){
					var filter = $('#'+$visibleInputElements[i].id).val().trim(); //trim fields for any trailing spaces
					$('#'+$visibleInputElements[i].id).val(filter);

					if(filter === ''){
						$('#loadrules_dialog_error').html(localize.t('tiq.rules.error.filter_cannot_be_blank')).show();
						$('#'+$visibleInputElements[i].id).focus();
						return false;
					}
					// Verify regular expression syntax
					else if ($($("select.loadrule_operatorselect").get(i)).val() === "regular_expression") {
						var errorMsg = utui.util.validateRegularExpressionSyntax(filter);
						if (errorMsg) {
							$('#loadrules_dialog_error').html(errorMsg).show();
							$('#'+$visibleInputElements[i].id).focus();
							return false;
						}
					}
				}
			}

			var $hiddenInputElements = $conditions.filter(':hidden');
			for(var i in utui.util.getVars($hiddenInputElements)){
				if(typeof $hiddenInputElements[i].id!='undefined'){
					$('#'+$hiddenInputElements[i].id).val('');
				}
			}
		}
		return true;
	},
	// --------------------------------------------------------
	// note: this is only used in Edit Load Rules dialog
	showAddOptions:function(obj, sizeOfLoadRule) {
		$('#loadrules_dialog_addmore').dialog('option', 'title', localize.t('tiq.rules.load_rules') + ' ' + utui.util.safeEscape(obj.title));
		$('#loadrules_dialog_addmore').append('<input type="hidden" id="loadrule_id" name="loadrule_id" value="'+obj.id+'" />')
		$('#loadrules_dialog_addmore_title').val(obj.title);

		// This will populate the values in the time range fields
		utui.loadrules.dateRange.setValues(obj.startDate, obj.endDate);

		for(var i = 0; i < sizeOfLoadRule; i++){
			var c = this.addOrItem('loadrules_dialog_addmore');

			$('#'+c+'_inputselect').val(obj[i]['input_0']);
			$('#'+c+'_operatorselect').val(obj[i]['operator_0']);
			$('#'+c+'_filter').val(obj[i]['filter_0']);

			if(typeof utui.loadrules.hideFilter[obj[i]['operator_0']] != 'undefined'){
				$('#'+c+'_filter').hide();
			}
			dsapi.convertSelectListToSelect2(c + '_inputselect', true);

			// rb 01/11/15 - show fix-it message for first row on missing variable
			if( $('#'+c+'_inputselect').select2('val') === '' ) {
				utui.loadrules.view.showRowErrorMsg(c + '_validation', obj[i]['input_0'] );
			}

			$('select[id="' + c + '_operatorselect"]').select2();
			utui.loadrules.view.hideShowViewportTooltip(c, obj[i]['input_0']);

			var orObj = utui.util.getVars(obj[i]), // Each OR object can contain multiple AND conditions
				sizeOfOrObj = utui.util.sizeOf(orObj),
				numOfRows = sizeOfOrObj / 3; // Number of conditions

			for(var j = 1; j < numOfRows; j++) {
				var c2 = this.addAndItem(c);
				$('#'+c2+'_inputselect').val(obj[i]['input_' + j]);
				$('#'+c2+'_operatorselect').val(obj[i]['operator_' + j]);
				$('#'+c2+'_filter').val(obj[i]['filter_' + j]);
				if(typeof utui.loadrules.hideFilter[obj[i]['operator_' + j]] != 'undefined'){
					$('#'+c2+'_filter').hide();
				}
				dsapi.convertSelectListToSelect2(c2 + '_inputselect', true);

				// rb 01/11/15 - show fix-it message for first row on missing variable
				if( $('#'+c2+'_inputselect').select2('val') === '' ) {
					utui.loadrules.view.showRowErrorMsg(c2+'_validation', obj[i]['input_'+j] );
				}

				$('select[id="' + c2 + '_operatorselect"]').select2();
				utui.loadrules.view.hideShowViewportTooltip(c2, obj[i]['input_' + j]);
			}
		}
	},

	initDropDownButton:function($buttonEl, containerId) {
		var self = this;

		$buttonEl.click(function() {
			var right = 5,
				top = 5,
				$button = $(this);

			// generate a menu
			var $dropdown = $("<div />", {
				"class" : "dropdown menu_list_container gradient"
			}).append(
				$("<div />", {
					"class" : "row",
					"click" : function() {
						utui.loadrules.duplicateConditionBlock(containerId);
						$dropdown.remove();
					}
				}).html(localize.t('tiq.rules.duplicate'))
			).append(
				$("<div />", {
					"class" : "row",
					"click" : function() {
						self.removeItem(containerId);
						$dropdown.remove();
					}
				}).html(localize.t('tiq.rules.remove'))
			).css("top", top).css("right", right).appendTo($("#" + containerId));

			// Intercept all clicks on the document, if the target didn't originate from the dropdown menu dismiss the
			// dropdown
			setTimeout(function() {
				$("body").on("click", function(event) {
					var $target = $(event.target)

					if($dropdown.has($target).length <= 0) {
						// user has clicked outside the drop down
						$dropdown.remove();
					}
				})
			}, 0);
		});
	},
	// ------------------------------------------------------------
	getRowErrorMsg: function(missingVarName) {
		if(missingVarName) {
			return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.missing_variable', { datasource: missingVarName });
		}
		return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.select_variable');
	},
	// ------------------------------------------------------------
	showRowErrorMsg: function(id, missingVarName) {
        var message = utui.loadrules.view.getRowErrorMsg(missingVarName);
		$('#'+id).html( message ).show();
	},
	// ------------------------------------------------------------
	hideRowErrorMsg: function(id) {
		$('#'+id).hide();
	},
	// ------------------------------------------------------------
	addAndItem: function (container) {
		var containerOrig = container,
			v = '';

		container += '_' + utui.util.getContainerId();
		v += '  <div id="'+container+'_validation" class="js-validation-msg bg-warning loadrule-row-validation-container">'+this.getRowErrorMsg()+'</div>';
		v += '  <div style="position:relative; clear:both;">';
		v += '<div class="customization_div" id="' + container + '_pane" style="clear:both"><span style="float:left;margin-left:5px;width:30px;margin-top:4px;">' + localize.t('tiq.rules.and') + '</span>';
		v += '  <div class="customization_item" style="float:left">' + this.getInputSelect(container) + '</div>';
		v += '  <div class="customization_item" style="float:left">' + this.getOperatorSelect(container) + '</div>';
		v += '  <div class="customization_item"><input id="' + container + '_filter" type="text" size="50" value="" class="imNoQuote"></div>';
		v += '  <div class="customization_item">';
		v += '      <a href="#" title="' + utui.tooltip.loadrules.viewport_height + '" id="' + container + '_viewport_height_tooltip" class="icon-question-sign"></a>';
		v += '      <a href="#" title="' + utui.tooltip.loadrules.viewport_width + '" id="' + container + '_viewport_width_tooltip" class="icon-question-sign"></a>';
		v += '  </div>';

		v += '  <div class="customization_item">';
		v += '      <a href="#" param="' + containerOrig + '" class="action_loadrules_addAndItem ui-state-default ui-corner-all" style="margin-top:3px;margin-right:5px;position:relative; float:left">';
		v += '          <span class="ui-icon ui-icon-plus" title="' + utui.tooltip.loadrules.add + '" id="' + container + '_add_tooltip"></span>';
		v += '      </a>';
		v += '      <a href="#" param="' + container + '_pane" class="action_loadrules_removeItem ui-state-default ui-corner-all" style="margin-top:3px;position:relative; float:left">';
		v += '          <span class="ui-icon ui-icon-minus" title="' + utui.tooltip.loadrules.remove + '" id="' + container + '_remove_tooltip"></span>';
		v += '      </a>';
		v += '  </div>';
		v += '</div>';
		v += '</div>';

		$('#' + containerOrig + '_pane').append(v);
		$('#' + container + '_filter').focus();

		dsapi.convertSelectListToSelect2(container + '_inputselect');
		$('select[id="' + container + '_operatorselect"]').select2();
		this.bindToggleViewportTooltip(container);

		var tooltipObj = {};
		tooltipObj[container + '_add_tooltip'] = { gravity: 'n' };
		tooltipObj[container + '_remove_tooltip'] = { gravity: 'n' };
		tooltipObj[container + '_viewport_height_tooltip'] = { gravity: 'n' };
		tooltipObj[container + '_viewport_width_tooltip'] = { gravity: 'n' };
		utui.util.addTooltip(tooltipObj);

		$('#'+container+'_inputselect').on('change', function() {
			$('#'+container+'_validation').slideUp();
		});

		return container;
	},
	removeItem:function(container){
		$('#'+container).remove();
		$('#'+container+'_or_clause_div').remove();
	},
	getInputSelect:function(container){
		var selectItems = this.getInputsProd()

		var content = '<select id="'+container+'_inputselect" class="loadrule_inputselect select2 variableSelect" data-placeholder="'+localize.t('tiq.datasources.select_a_datasource')+'" data-list-type="loadrules">';
		content += '<option selected></option>';
		_.each(selectItems, function (selectItems, key) {
			// sort by name
			var sortedVariables = _.sortBy(selectItems, function (option) {
				return option.name.toLowerCase();
			});

			// append group identifier
			content += '<optgroup label="' + dsapi.getDataSourceTypeName(key) + '" data-type="' + key + '">';

			_.each(sortedVariables, function(option) {
				// append the option html
				content += $('<option/>')
					.text(_.unescape(option.name))
					.val(_.unescape(option.value))
					.attr('data-type', option.type)[0].outerHTML;
			});
		});
		content += '</select>';
		return content;
	},
	getInputsProd:function(){
        var variables = new Array();

        for(var i in utui.util.getVars(utui.config.defItems,2)){
	        variables.push({
		        name: utui.config.defItems[i],
		        value: i,
		        type: 'dom'
	        });
        }

	    var sort = utui.util.getVars(utui.data.define,4,'name');
	    for(var i in utui.util.getVars(sort,1)){
		    var ds = sort[i];
		    var val = ds.type + '.' + _.escape(ds.name),
			    name =  (ds.title) ? utui.util.safeEscape(ds.title) : utui.util.safeEscape(ds.name),
			    type = ds.type,
			    hideType = false;

		    // If AudienceStream data source use origin_type instead of type
		    if (ds.imported && ds.imported === utui.profile.import.AUDIENCE_STREAM) {
			    if (ds.context !== 'visitor') {
			        val = ds.type + '.' + ds.context + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
			    }
			    else {
				    val = ds.type + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
			    }
			    type = ds.settings.origin_type;
			    if (type === 'dates') {
				    hideType = true;
			    }
		    }

		    // Remove audience stream date types
		    if (!hideType) {
			    variables.push({
				    name: name,
				    value: val,
				    type: type
			    });
		    }
	    }

        var customizationOutputs = {};
        for(var i in utui.util.getVars(utui.data.customizations)){
            if(typeof utui.data.customizations[i].output != 'undefined'){
                var a = utui.data.customizations[i].output.split(',');
                for(var b=0;b<a.length;b++){
                	if ( utui.define.isInvalidVariableName(a[b]) ) { continue; }
                    customizationOutputs[a[b]] = utui.data.customizations[i].title;
                }
            }
        }

	    for(var i in utui.util.getVars(customizationOutputs,2)){
		    if (customizationOutputs[i]) {
			    variables.push({
				    name: i,
				    value: i,
				    type: customizationOutputs[i]
			    });
		    }
		    else {
			    variables.push({
				    name: i,
				    value: i,
				    type: ""
			    });
		    }
	    }

	    // sort and group the options by type then sort
	    // this will sort the groups in alphabetical order with items within groups in order too
	    var groupedOptions = _.groupBy(_.sortBy(variables, function (option) {
		    var optionType = option.type.toLowerCase();
		    return (optionType === 'dom') ? -1 : optionType;
	    }), 'type');

	    return groupedOptions;
	},

	getOperatorSelect:function(container){

		var selectItems = utui.loadrules.getOperators();

		var content = '<select id="'+container+'_operatorselect" class="loadrule_operatorselect" onchange="utui.loadrules.view.operatorSelectHandler(\''+container+'\')">';
		for(var i=0; i < selectItems.length; i++) {
			content += '<option value="' + selectItems[i].value + '">' + _.escape(selectItems[i].name) + '</option>';
		}
		content += '</select>';
		return content;
	},

	operatorSelectHandler:function(container){

		var sel = $('#'+container+'_operatorselect :selected').val();

		if(typeof utui.loadrules.hideFilter[sel]!='undefined'){
			$('#'+container+'_filter').hide();
		}else{
			$('#'+container+'_filter').show();
		}
	},

	getTitle: function (loadrule, labelsExpanded) {
		var v = '',
			canModify = utui.labels.canUserModify(loadrule.labels),
			title = utui.util.safeEscape(loadrule.title),
			lrTitle = utui.loadrules.dateRange.getLoadRuleTitle(loadrule),
			expandedClass = utui.labels.helper.getLabelExpandedClass(labelsExpanded);

		v += '<div class="container_bulk_select">';
		if (!loadrule.imported && loadrule.id !== 'all') {
			var checked = $('#loadrules_bulk_select_' + loadrule.id).prop('checked');
			v += '<input id="loadrules_bulk_select_' + loadrule.id + '" value="' + loadrule.id + '" class="label_select_checkbox" ' + (checked === 'checked' && canModify ? 'checked="checked"' : '') + ' type="checkbox" data-exclude="1" style="display:block;" ' + (!canModify ? 'disabled="disabled"' : '') + ' />';
		}
		v += '</div>';

		if (typeof loadrule.status != 'undefined') {
			v += '<div id="' + loadrule.containerId + '_status_toggle" class="container_status_wrapper' + (loadrule.imported || !canModify ? ' disabled_toggle' : '') + '"><span class="container_status_' + loadrule.status + '"></span></div>';
		}

		v += '<div class="container_title">';
		v += '  <span class="title" title="' + title + '">' + lrTitle + '</span>';
		v += '</div>';

		// UID
		v += '<div class="container_uid"><span class="uidLabel">UID</span><span class="uidValue">' + loadrule.id + '</span></div>';

		// Label Container
		v += '<div class="container_label ' + expandedClass + '" data-uid="' + loadrule.id + '" data-type="' + utui.loadrules.id + '"></div>';

		if (utui.loadrules.loadRuleTags[loadrule.id]) {
			var totalTags = utui.loadrules.getTotalTags(loadrule.id);
			v += '<div class="containerTagStatus"><span class="tagLabel">' + localize.t('tiq.rules.tags') + '</span><span class="active">' + utui.loadrules.loadRuleTags[loadrule.id].active + '</span>/<span class="inactive">' + totalTags + '</span></div>';
		}

		// Label Container
		v += '<div class="container_warning"><i class="icon-warning-sign"></i> x <span class="count"></span></div>';

		return v;
	},

    renderTitle:function(loadrule, labelsExpanded){
        var title = this.getTitle(loadrule, labelsExpanded);

        $('#'+loadrule.containerId+'_accordion').html(title);
    },

    showDisableLoadRuleActiveTagsDialog:function(tagsLoadedHash, container, onConfirmCallback, pm_explicit_uses) {
        $('#dialog').dialog('destroy');
        var content = '';
        if (pm_explicit_uses) {
						content += '<div class="ui-state-error" style="margin-top: 12px;padding:8px;">' + localize.t('tiq.dashboard.privacy_management.load_rule_in_use_deactivate') +'</div>';
				}
				if (!$.isEmptyObject(tagsLoadedHash)) {
          content += '<div class="ui-state-error" style="margin-top: 12px;padding:8px;">' + localize.t('tiq.rules.there_are_active_tags');
        content += '<ul style="padding-top: 8px">';
        for(var i in utui.util.getVars(tagsLoadedHash)){
            var title = utui.config.manageList[utui.data.manage[tagsLoadedHash[i]].tag_id].title;
            if(utui.config.manageList[utui.data.manage[tagsLoadedHash[i]].tag_id].addMore == 'true'){
                title += ': '+utui.data.manage[tagsLoadedHash[i]].title;
            }
            content += '<li>'+utui.util.safeEscape(title)+'</li>';
        }
        content += '</ul></div>';
				}
        

        $('#loadrules_activate_confirm').html(content);
        $('#loadrules_activate_confirm').dialog({
            resizable: false,
            height:'auto',
            width:450,
            modal: true,
            draggable: true,
            position: ['center',110],
            show: 'blind',
            title: localize.t('tiq.rules.are_you_sure_deactivate'),
            buttons: [
                {
                    text: localize.t('tiq.dialog.button.deactivate_load_rule'),
                    id: "loadrules_deactivate_confirm_deactivateBtn",
                    class: 'nav-btn',
                    click: function() {
                        $(this).dialog("close");
                        utui.loadrules.containerMap[container].status = 'inactive';

						var tags = [];

						for(var i in utui.util.getVars(tagsLoadedHash)){
							for(var j in utui.util.getVars(utui.manage.containerMap)){
								if(utui.data.manage[tagsLoadedHash[i]].id == utui.manage.containerMap[j].id){
									var currentTag = utui.manage.containerMap[j];
									utui.manage.containerMap[j].status = 'inactive';

									tags.push({
										id : currentTag.id,
										tag_name : currentTag.tag_name || utui.util.getTagNameFromTagId(currentTag.tag_id),
										name : _.unescape(currentTag.title)
									})
								}
							}
							//Have to reset these after because they are used to identify the value in containerMap
							utui.data.manage[tagsLoadedHash[i]].status = 'inactive';
						}
  
						if(pm_explicit_uses) {
							utui.data.privacy_management.explicit.isEnabled = false;
						}
						
						utui.profile.dirty = 1;
						utui.loadrules.setTitle(container);
						utui.loadrules.editItem(container, true);

                        onConfirmCallback(tags, pm_explicit_uses);
                    }
                },
                {
                    text: localize.t('tiq.dialog.button.cancel'),
                    id: 'loadrules_deactivate_confirm_cancelBtn',
                    class: 'nav-btn',
                    style: 'float:left; margin-left: 12px',
                    click: function() {
                        $(this).dialog('close')
                    }
                }
            ]
        });
    },

    showActivateLoadRulesDialog:function(tagsLoadedHash, container, onConfirmCallback) {
        $('#dialog').dialog('destroy');
        var content = '<div class="ui-state-error" style="margin-top: 12px;padding:8px;">' + localize.t('tiq.rules.there_are_inactive_tags');
        content += '<ul style="padding-top: 8px">';
        for(var i in utui.util.getVars(tagsLoadedHash)){
            var title = utui.config.manageList[utui.data.manage[tagsLoadedHash[i]].tag_id].title;
            if(utui.config.manageList[utui.data.manage[tagsLoadedHash[i]].tag_id].addMore == 'true'){
                title += ': '+utui.data.manage[tagsLoadedHash[i]].title;
            }
            content += '<li>'+utui.util.safeEscape(title)+'</li>';
        }
        content += '</ul></div>';

        $('#loadrules_activate_confirm').html(content);
        $('#loadrules_activate_confirm').dialog({
            resizable: false,
            height:'auto',
            width:550,
            modal: true,
            draggable: true,
            position: ['center',110],
            show: 'blind',
            title: localize.t('tiq.rules.are_you_sure_activate'),
            buttons: [
                {
                    text: localize.t('tiq.dialog.button.activate_rule_and_tags'),
                    id: 'loadrules_activate_confirm_activateRuleAndTagBtn',
                    class: 'nav-btn',
                    style: 'float:right; margin-left: 20px',
                    click: function() {
                        $(this).dialog("close");
                        utui.loadrules.containerMap[container].status = 'active';
                        var tags = [];
                        var tagIds = [];
                        for(var i in utui.util.getVars(tagsLoadedHash)){
                            for(var j in utui.util.getVars(utui.manage.containerMap)){
                                var currentTag;
                                if (utui.manage.containerMap[j].loadrule.indexOf(',') !== -1 || utui.manage.containerMap[j].loadrule === utui.manage.mlrSelVal){
                                    var lrList;
                                    if (utui.manage.containerMap[j].loadrule === utui.manage.mlrSelVal){
                                        lrList = utui.manage.containerMap[j].multipleLoadRules.split(',');
                                    } else {
                                        lrList = utui.manage.containerMap[j].loadrule.split(',');
                                    }


									var isAllActive = true;
									for (var tlri in lrList){
										for (var lri in utui.util.getVars(utui.loadrules.containerMap)){
											if (lri !== container) {
												if(lrList[tlri] == utui.loadrules.containerMap[lri].id && utui.loadrules.containerMap[lri].status !== 'active'){
													isAllActive = false;
												}
											}
										}
									}
									if (isAllActive){
										utui.manage.containerMap[j].status = 'active';
									}
								} else if(utui.data.manage[tagsLoadedHash[i]].loadrule == utui.manage.containerMap[j].loadrule){
									utui.manage.containerMap[j].status = 'active';
								}

								currentTag = utui.manage.containerMap[j];
								if(tagsLoadedHash[currentTag.id] && tagIds.indexOf(currentTag.id) < 0) {
									tags.push({
										id : currentTag.id,
										tag_name : currentTag.tag_name || utui.util.getTagNameFromTagId(currentTag.tag_id),
										name : _.unescape(currentTag.title)
									})

                                    tagIds.push(currentTag.id);
                                }
                            }
                        }
                        utui.profile.setDirty();
                        utui.loadrules.setTitle(container);
                        onConfirmCallback(tags);
                        utui.loadrules.editItem(container, true);
                    }
                },
                {
                    text: localize.t('tiq.dialog.button.activate_rule_only'),
                    id: 'loadrules_activate_confirm_activateRuleOnlyBtn',
                    class: 'nav-btn',
                    style: 'float:right; margin-left: 20px',
                    click : function() {
                        $(this).dialog("close");
                        utui.loadrules.containerMap[container].status = 'active';
                        utui.profile.setDirty();
                        utui.loadrules.setTitle(container);
                        onConfirmCallback([]);
                        utui.loadrules.editItem(container, true);
                    }
                },
                {
                    text: localize.t('tiq.dialog.button.cancel'),
                    id: 'loadrules_activate_confirm_cancelBtn',
                    class: 'nav-btn',
                    style: 'float:left; margin-left: 12px',
                    click: function() {
                        $(this).dialog('close')
                    }
                }
            ]
        });

	},

	conflictLoadRulesConfirm: function (loadrules) {
		// Refresh Load Rules tab so that "Needs Review" labels display
		utui["loadrules"].show();

		$("#dialog").dialog("destroy");

		var content = '';
		content += '<div>';
		content += '    <div class="dialog-icon-container">';
		content += '        <i class="icon-warning-sign" style="color:orange;"></i>';
		content += '    </div>';
		content += '    <div class="dialog-description">';
		content += '        <p><strong>' + localize.t('tiq.rules.tealium_detected_issue') + '</strong></p>';
		content += '        <p>' + localize.t('tiq.rules.the_removal_of_attributes') + '</p>';
		content += '        <fieldset>';
		content += '        <legend>' + localize.t('tiq.rules.affected_load_rules') + '</legend>';
		for (var i in loadrules) {
			content += '<div title="' + loadrules[i].title + ' UID: ' + loadrules[i].uid + '" class="conflictExtension">' + loadrules[i].title + ' UID: ' + loadrules[i].uid + '</div>';
		}
		content += '        </fieldset>';
		content += '        <p>' + localize.t('tiq.rules.be_aware_removing_attributes') + '</p>';
		content += '    </div>';
		content += '</div>';

		$("#manage_loadrules_confirm").html(content);
		$("#manage_loadrules_confirm").dialog({
			title: localize.t('tiq.rules.important'),
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: false,
			resizable: false,
			autoOpen: true,
			draggable: true,
			position: ['center', 'center'],
			buttons: [
				{
					text: localize.t('tiq.dialog.button.ok'),
					id: 'conflictLoadRulesConfirm_dialog_okBtn',
					click: function () {
						$(this).dialog('close');
					}
				}
			]
		});

	},

	// -------------------------------------------------
	validationMap: {},

	// -------------------------------------------------
    // USE THIS...
	renderCautionOnAccordions: function() {
		var data = utui.data.loadrules,
            lrId;

		for(lrId in data) {
			if(lrId === 'all') continue;
			this.validateModel(lrId);
			this.validateView(lrId);
		}
	},

	validateModel: function(lrId) {
		var lrObj = lrapi.getObjectByLoadruleId(lrId),
			conditionObj = utui.util.interpret.loadrule.condition.toFormatted(lrObj),
            arrayLocation = '',
			orCondition,
			inputVal,
			andCondition;

		utui.validation.removeInstanceByTypeAndId('loadrules',lrId);

		for (var i = conditionObj.length - 1; i >= 0; i--) {
			orCondition = conditionObj[i];

			for (var j = orCondition.length - 1; j >= 0; j--) {
				andCondition = orCondition[j];

				inputVal = andCondition['input'];

				if(!dsapi.isExistingGlobalVariable(inputVal)) {
                    arrayLocation = i + ':' + j + ':input';

                    utui.validation.setValidation('loadrules', lrId, arrayLocation, utui.loadrules.view.getRowErrorMsg( inputVal ), 'missing', inputVal);
				}
			};
		};
	},

	validateView: function(lrId) {
        var containerId = lrapi.getContainerIdByLoadruleId(lrId),
            entryCollection = utui.validation.getMap('loadrules');

        this.removeAccordionWarning(containerId);

        if(!$.isEmptyObject(entryCollection[lrId])) {
            this.showAccordionWarning(containerId, entryCollection[lrId].length);
            this.validationMap[lrId] = true;
        }
	},

    // -------------------------------------------------
    showAccordionWarning: function(containerId, count) {
    	var $containerNamespace = $('#'+containerId);

        $containerNamespace.find('.container_warning').addClass('active').find('.count').html(count);
        $containerNamespace.find('.main-header').html('<div class="js-accordion-header-notification js-accordion-error section-padded text-center bg-danger">'+localize.t('tiq.ext.attention_is_required')+'</div>');
    },

    // -------------------------------------------------
    removeAccordionWarning: function(containerId) {
    	var $containerNamespace = $('#'+containerId);

        $containerNamespace.find('.container_warning').removeClass('active').find('.count').empty();
        $containerNamespace.find('.js-accordion-error').remove();
    },

	refreshSingleAccordionLoadRuleSectionView: function(lrId) {
		var container = lrapi.getContainerIdByLoadruleId(lrId),
			loadruleObj = lrapi.getObjectByLoadruleId(lrId);

		$('#'+container+'_loadRuleConditions').html( utui.loadrules.view.template.loadruleConditions(loadruleObj) );

		this.bindUI(loadruleObj);
	},

	getReadOnlyPropertiesView: function(obj, mainDataObj) {
		var _title = obj.title || '[NO TITLE]',
			_id = obj.id || '',
			_status = obj.status || '',
			_sort = obj.sort || '',
			_startDate = obj.startDate || '',
			_labels = getInterpretedLabelName(obj.labels),
			_endDate = obj.endDate || '';

		function getInterpretedLabelName(labelValue) {
			var labelNameCollection = [],
				labelId,
				labelName,
				_dataObj = mainDataObj || utui.data,
				multipleLabels;

			if(labelValue === undefined) return '';

			if(~labelValue.indexOf(',')) {
				multipleLabels = labelValue.split(',');

				for (var i = 0; i < multipleLabels.length; i++) {
					labelId = multipleLabels[i];
					labelName = _dataObj.labels[labelId].name;

					labelNameCollection.push(labelName);
				};

				return labelNameCollection.join(', ');
			}
			else if(labelValue.length > 0) {
				labelId = labelValue;

				return _dataObj.labels[labelId].name;
			}

			return '';
		}

		var v = '';
			v += '<div class="readonly-container-bubble">';
				v += '<div class="title">'+localize.t('tiq.ext.properties')+'</div>';
				v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.rules.id')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'id', _id);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.rules.status')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'status', _status);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.rules.title')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'title', _title);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.rules.labels')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'labels', _labels);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.rules.start_date')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'startDate', _startDate);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.rules.end_date')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'endDate', _endDate);
						v += '</div>';
					v += '</div>';

				v += '</div>';
			v += '</div>';
		return v;
	},
	getReadOnlyConditionsView: function(obj, dataReference) {
		var v = '';

        v += '<div class="readonly-container-bubble">';
            v += '<div class="title">Rules</div>';
            v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

                v += '<div class="row-fluid">';
                    v += '<div class="span12">';
                        v += this.getReadOnlyConditionInnerView(obj);
                    v += '</div>';
                v += '</div>';

            v += '</div>';
        v += '</div>';

		return v;
	},
	getReadOnlyConditionInnerView: function(obj, dataReference) {
		var formattedObj = utui.util.interpret.loadrule.condition.toFormatted(obj),
			content = '',
			orCondition,
			andCondition,
			exclusionInputMap = ['defined', 'notdefined', 'populated', 'notpopulated'],
			className = '';

		content += '<div class="condition-container">';

		for (var i = 0; i < formattedObj.length; i++) {
			orCondition = formattedObj[i];

			if(!utui.util.interpret.isOrConditionValid(orCondition)) continue;

			content += '<div class="condition-or">';

			for (var k = 0; k < orCondition.length; k++) {
				andCondition = orCondition[k];

				content += '<div class="condition-and">';

				keyMapping = utui.util.interpret.getConditionalKeyMapping(andCondition);

				for (var key in keyMapping) {
					if(!keyMapping.hasOwnProperty(key)) continue;

					if(key.indexOf('_') === 0) continue; // ignore private keys

					switch(key) {
						case "0":
							className = "condition-cell-input";
							break;
						case "1":
							className = "condition-cell-operator";
							break;
						case "2":
							className = "condition-cell-value";

							if(!~exclusionInputMap.indexOf(andCondition[keyMapping[1]])) {
								content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, className+'_'+i+'_'+k, andCondition[keyMapping[key]])+'</span>';

								if(ruleapi.condition.isOperatorIgnoreCase(andCondition[keyMapping[1]])) {
									content += '<span class="condition-strict-case inline-label">'+localize.t('tiq.rules.case_insensitive')+'</span>';
								}
							}
							continue;
					}

					content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, className+'_'+i+'_'+k, andCondition[keyMapping[key]])+'</span>';
				};

				content += '</div>';
			};

			content += '</div>';
		};

		content += '</div>';

		return content;
	}

});




// --------------------------------------------
var ruleapi = function() {

	var _operatorIndex = [
		'equals',
		'equals_ignore_case',
		'starts_with',
		'starts_with_ignore_case',
		'does_not_start_with',
		'does_not_start_with_ignore_case',
		'does_not_equal',
		'does_not_equal_ignore_case',
		'ends_with',
		'ends_with_ignore_case',
		'does_not_end_with',
		'does_not_end_with_ignore_case',
		'contains',
		'contains_ignore_case',
		'does_not_contain',
		'does_not_contain_ignore_case',
		'defined',
		'notdefined',
		'populated',
		'notpopulated',
		'greater_than',
		'greater_than_equal_to',
		'less_than',
		'less_than_equal_to',
		'regular_expression',
		'is_badge_assigned',
		'is_badge_not_assigned'
	];

	var _strictIndex = [
		'equals',
		'starts_with',
		'does_not_start_with',
		'does_not_equal',
		'ends_with',
		'does_not_end_with',
		'contains',
		'does_not_contain'
	];

	// --------------------------------------------
	function _interpretOperatorValue(operatorValue) {

		if(!_isOperatorValue(operatorValue)) return null;

		switch(operatorValue) {
			case 'equals':
				return 'equals'; // (strict case)';
				break;
			case 'equals_ignore_case':
				return 'equals';
				break;
			case 'starts_with':
				return 'starts with'; // (strict case)';
				break;
			case 'starts_with_ignore_case':
				return 'starts with';
				break;
			case 'does_not_start_with':
				return 'does not start with'; // (strict case)';
				break;
			case 'does_not_start_with_ignore_case':
				return 'does not start with ';
				break;
			case 'does_not_equal':
				return 'does not equal'; // (strict case)';
				break;
			case 'does_not_equal_ignore_case':
				return 'does not equal';
				break;
			case 'ends_with':
				return 'ends with'; // (strict case)';
				break;
			case 'ends_with_ignore_case':
				return 'ends with';
				break;
			case 'does_not_end_with':
				return 'does not end with'; // (strict case)';
				break;
			case 'does_not_end_with_ignore_case':
				return 'does not end with';
				break;
			case 'contains':
				return 'contains'; // (strict case)';
				break;
			case 'contains_ignore_case':
				return 'contains';
				break;
			case 'does_not_contain':
				return 'does not contain'; // (strict case)';
				break;
			case 'does_not_contain_ignore_case':
				return 'does not contain';
				break;
			case 'defined':
				return 'is defined';
				break;
			case 'notdefined':
				return 'is not defined';
				break;
			case 'populated':
				return 'is populated';
				break;
			case 'notpopulated':
				return 'is not populated';
				break;
			case 'greater_than':
				return 'greater than';
				break;
			case 'greater_than_equal_to':
				return 'greater than or equal to';
				break;
			case 'less_than':
				return 'less than';
				break;
			case 'less_than_equal_to':
				return 'less than or equal to';
				break;
			case 'regular_expression':
				return 'regular expression';
				break;
			case 'is_badge_assigned':
				return 'is badge assigned';
				break;
			case 'is_badge_not_assigned':
				return 'is badge not assigned';
				break;

			return operatorValue;
		}
	}

	// --------------------------------------------
	function _isOperatorValue(operatorValue) {
		if(~_operatorIndex.indexOf(operatorValue)) return true;

		return false;
	}
	// --------------------------------------------
	function _isOperatorIgnoreCase(operatorValue) {
		if(~operatorValue.indexOf('_ignore_case')) {
			return true;
		}
		return false;
	}

	// --------------------------------------------
	function _isOperatorStrictCapable(operatorValue) {
		if(~_strictIndex.indexOf(operatorValue)) {
			return true;
		}
		return false;
	}

    function _createTaggingObject(loadRule) {
        return { action: utui.constants.tagging.TAGGING,
				resource_type: utui.constants.loadrules.TYPE.toLowerCase(),
        		resource_id : loadRule.id,
        		resource_name : loadRule.title,
        		isLinkType : true
        };
    }

	// --------------------------------------------
	var _public = {
		createTaggingObject : _createTaggingObject,
		condition: {
			interpretOperatorValue: _interpretOperatorValue,
			isOperatorValue: _isOperatorValue,
			isOperatorIgnoreCase: _isOperatorIgnoreCase,
			isOperatorStrictCapable: _isOperatorStrictCapable
		}
	}

	return _public;
}();

// --------------------------------------------
var UtuiLoadrulesViewModel = UtuiViewModel.extend({
    id:"loadrules",
    lastOpenLoadruleId:false,
    containerMap:{},
    lastEdit: '',
    hideFilter: { defined:1, notdefined:1, notpopulated:1, populated:1, is_badge_assigned:1, is_badge_not_assigned:1 },
    loadRuleTags: {},
    initComplete: false,
    config:{
        1:{value:'all',text:localize.t('tiq.rules.all_pages'),selected:1}
        //1:{value:'create',text:'--Create Rule--'},
    },
    filtersToInclude:[],
    clear:function(){
        this.addedManage = {};
        this.loadRuleTags = {};
        this.containerMap = {};
        $('#loadrules_dialog_catalog').html('');
        $("#loadrules_content").html('');
    },
    load:function(a){},
    show:function(){
        var children = $('#loadrules_content').children(),
	        labelsExpanded = utui.labels.helper.getLabelsExpandedForTab();

        for(var i=0; i<children.length; i++){
            this.setTitle(children[i].id, labelsExpanded);
        }

		utui.loadrules.view.renderCautionOnAccordions();

		utui.profile.showAllModifiedTabLabels(utui.constants.loadrules.TYPE);
    },
    init:function() {

        this.initComplete = false;

		// Init the labels select2 box
		utui.loadrules.labels.renderBulkLabelSelect();

		// Hides/shows the label select box in the header
		utui.loadrules.labels.labelCheckboxChecked();

        //Init the filters
        this.filtersToInclude = [utui.filters.FILTER_STATUS, utui.filters.FILTER_DIVIDER, utui.filters.FILTER_LABEL];

		// Make sure the utui.data.settings.loastloadruleid is set
		if(typeof utui.data.settings.lastloadruleid === "undefined") {
			var lrMaxId = 1;
			for(var i in utui.util.getVars(utui.data.loadrules)){
				var num = parseInt(i);
				if(num > lrMaxId) {
					lrMaxId = num;
				}
			}

			utui.data.settings.lastloadruleid = lrMaxId;
		}

		utui.loadrules.getNextId.reset();

		if (jQuery.isEmptyObject(this.containerMap)) {
			this.addItem('all', new Loadrule('all',localize.t('tiq.rules.all_pages'),'active',null,null,false));
		}

    this.fixMissingSortIdsOnLoad();
    
		var sorted = utui.util.getSortedArray(utui.data.loadrules, 'sort');
		for (var i in sorted){
			this.addItem(sorted[i].id, sorted[i], true);
		}

		// rb - pulled out of addItem and updated at the end.
		utui.loadrules.view.updateSortOrder();

        $('.loadrules_button_addmore').click(function(){
            var activeTab = $('#tabs .ui-tabs-selected a').attr('id').split('_')[1];
            if(activeTab == utui.loadrules.id){
                utui.loadrules.view.showAddMore('create');
            } else {
                utui.loadrules.view.showAddMore('create',function(obj){utui.manage.setLoadRules(false,obj)});
            }

            var loadruleTagging = {tealium_event : utui.constants.tagging.CREATED_STARTED, action : utui.constants.tagging.TAGGING,
                				   resource_type : utui.constants.loadrules.TYPE.toLowerCase(), isLinkType : true };

            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, loadruleTagging);

        });

		utui.loadrules.view.updateAccordion();

		this.setDefaultFilterConditions();

        // Setup listeners
        utui.util.pubsub.subscribe(utui.constants.variables.UPDATED, this.updateLRDataSource, this);
        utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.setDefaultFilterConditions, this);

		utui.util.pubsub.subscribe(utui.constants.labels.ADDED, this.labels.onLabelAdded, this);
		utui.util.pubsub.subscribe(utui.constants.labels.REMOVED, this.labels.onLabelRemoved, this);
		utui.util.pubsub.subscribe(utui.constants.labels.CHANGED, this.labels.onLabelChanged, this);
		//utui.util.pubsub.subscribe(utui.constants.labels.MENU_OPENING, this.labels.onLabelMenuOpening, this);
		utui.util.pubsub.subscribe(utui.constants.labels.MENU_CLOSING, this.labels.onLabelMenuClosing, this);
		utui.util.pubsub.subscribe(utui.constants.labels.ASSIGNED, this.labels.onLabelAssigned, this);
		utui.util.pubsub.subscribe(utui.constants.labels.UNASSIGNED, this.labels.onLabelUnAssigned, this);

		// RB - commenting this out since inheritance repeatedly calls this. Manually moved within functions.
        // utui.util.pubsub.subscribe(utui.constants.tags.REMOVED, this.updateAllLRTags, this);
        utui.util.pubsub.subscribe(utui.constants.tags.UPDATED, this.updateAllLRTags, this);

		this.initComplete = true;
		this.showHelpTab();
	},
	showHelpTab: function() {
		// ----------------------------------------------------
		var _namespace = 'loadrules';

		// ----------------------------------------------------
		var _articles = [
			{
				id: 0,
				title: localize.t('tiq.rules.help.0.title'),
				type: 'document',
				linkHref: common.community.load_rules_creation,
				isExternalLink: true
			},
			{
				id: 1,
				title: localize.t('tiq.rules.help.1.title'),
				type: 'document',
				linkHref: common.community.time_based_load_rule,
				isExternalLink: true
			}
		];

        // ----------------------------------------------------
        var _context = {
            header: localize.t('tiq.rules.help.header'),
            body: localize.t('tiq.rules.help.body')
        }

		utui.help.initHelpTab(_namespace, _articles, _context);
	},
	dateRange: {
		invalidDateTimeFormatUI: '00/00/0000 00:00',	// JS Date object expects this format if nothing is specified
		invalidDateFormatUI: '00/00/0000',
		invalidTimeFormatUI: '00:00',
		invlidDateTimeFormatePublish: '------------',	// Publish engine expects this format if nothing is specified
		invalidDateFormatPublish: '--------',
		invalidTimeFormatPublish: '----',

		// ----------------------------------------------------------------
		// This will convert the passed in date time into a format that can be parsed into a valid date
		// No date = 00/00/0000, no time = 00:00
		convertDateTime: function(dt, tm) {
			dt = $.trim(dt);
			tm = $.trim(tm);

			var date = (dt == '') ? utui.loadrules.dateRange.invalidDateFormatUI : dt,
				time = (tm == '') ? utui.loadrules.dateRange.invalidTimeFormatUI : utui.util.date.getMilitaryTimeFromTimeString(tm);

			return date + ' ' + time;
		},

		// ----------------------------------------------------------------
		// This will convert the date time value from the publish engine to a readable format
		// i.e. 201303211030 = 03/21/2013 10:30 OR --------0000 = 00/00/0000 00:00 AM
		fromPublishTime: function(datetime) {
			datetime = datetime || utui.loadrules.dateRange.invlidDateTimeFormatePublish;

			// Convert the datetime into a string that can be split into an array [month,day,year,hour,minute]
			datetime = datetime.replace(/([0-9-]{4})([0-9-]{2})([0-9-]{2})([0-9-]{2})([0-9-]{2})$/, '$2,$3,$1,$4,$5');
			var valuesplit = datetime.split(","),
				date = null,
				time = null;

			if (valuesplit[0] != '--') {
				date = valuesplit[0] + '/' + valuesplit[1] + '/' + valuesplit[2];
			}

			// Convert military time to standard time
			if (valuesplit[3] != '--') {
				time = utui.util.date.getStandardTimeFromMilitartTimeString(valuesplit[3]+valuesplit[4]);
			}

			return {
				date:date,
				time:time
			};
		},

		// ----------------------------------------------------------------
		// This will convert the valid date time to a value that the publish engine can read
		// i.e. 03/21/2013 10:30 AM = 201303211030 OR 00/00/00000 00:00 AM = --------0000
		toPublishTime: function(dt, tm) {
			var hasDate = (dt == '') ? true : false,
				hasTime = (tm == '') ? true : false,
				date = utui.loadrules.dateRange.invalidDateFormatPublish,
				time = utui.loadrules.dateRange.invalidTimeFormatPublish;

			var value = utui.loadrules.dateRange.convertDateTime(dt, tm);
			// convert the value into a string that can be split into an array [month,day,year,hour,minute]
			value = value.replace(/[\/ :]/g, ',');

			// Now split the value
			var valuesplit = value.split(',');

			if (!hasDate) {
				date = valuesplit[2] + valuesplit[0] + valuesplit[1];
			}
			if (!hasTime) {
				time = valuesplit[3] + valuesplit[4];
			}
			return date + time;
		},

		// ----------------------------------------------------------------
		// This will return a string that is to be used when displaying the start and end date/times
		toDisplayTime: function(startDateTime, endDateTime) {
			startDateTime = utui.loadrules.dateRange.fromPublishTime(startDateTime);
			endDateTime = utui.loadrules.dateRange.fromPublishTime(endDateTime);

			var startDate,
				endDate,
				content;

			if (!$.isEmptyObject(startDateTime.date)) {
				startDate = startDateTime.date;
			}
			if (!$.isEmptyObject(startDateTime.time)) {
				startDate = (startDateTime.date) ? startDate + ' ' + startDateTime.time : startDateTime.time;
			}
			if (!$.isEmptyObject(endDateTime.date)) {
				endDate = endDateTime.date;
			}
			if (!$.isEmptyObject(endDateTime.time)) {
				endDate = (endDateTime.date) ? endDate + ' ' + endDateTime.time : endDateTime.time;
			}


			if (startDate && endDate) {
				content = localize.t('tiq.rules.date_applies_between', {startDate:startDate, endDate:endDate});
			} else if (startDate && !endDate) {
				content = localize.t('tiq.rules.date_applies_after', {startDate:startDate});
			} else if (!startDate && endDate) {
				content = localize.t('tiq.rules.date_applies_until', {endDate:endDate});
			}

			return content;
		},

		// ----------------------------------------------------------------
		// Returns true if the start date is before the end date or there is just an end date
		isBeforeDate: function() {
			// Turn into valid date time string so we are able to compare them
			var startDateTime = utui.loadrules.dateRange.convertDateTime(utui.loadrules.dateRange.getStartDate(), utui.loadrules.dateRange.getStartTime()),
				endDateTime = utui.loadrules.dateRange.convertDateTime(utui.loadrules.dateRange.getEndDate(), utui.loadrules.dateRange.getEndTime());

			// Add on 1 second since 12:00 midnight = invalidDateTimeFormatUI
			if (startDateTime == utui.loadrules.dateRange.invalidDateTimeFormatUI) {
				// Add a second if the field has a value which would only be the case if 12:00 since 24hour time = 00:00
				if (utui.loadrules.dateRange.getStartTime() != '') {
					startDateTime += ':01';
				} else {
					startDateTime = null;
				}
			}
			if (endDateTime == utui.loadrules.dateRange.invalidDateTimeFormatUI) {
				// Add a second if the field has a value which would only be the case if 12:00 since 24hour time = 00:00
				if (utui.loadrules.dateRange.getEndTime() != '') {
					endDateTime += ':01';
				} else {
					endDateTime = null;
				}
			}

			return utui.util.date.isBeforeDate(startDateTime, endDateTime);
		},

		// ----------------------------------------------------------------
		hasDate: function(startDateTime, endDateTime) {
			if (startDateTime == utui.loadrules.dateRange.invlidDateTimeFormatePublish) {
				startDateTime = null;
			}
			if (endDateTime == utui.loadrules.dateRange.invlidDateTimeFormatePublish) {
				endDateTime = null;
			}
			if ($.isEmptyObject(startDateTime) && $.isEmptyObject(endDateTime)) {
				return false;
			}
			return true;
		},

		// ----------------------------------------------------------------
		// This will iterate over all the scoped loadrules for the specified tag
		// to see if any of them have a date range condition
		hasDateFromLoadRule: function(loadrule) {
			if (loadrule) {
				var loadrules = loadrule.split(',');
				for (var i=0; i<loadrules.length; i++) {
					var loadrule = utui.data.loadrules[loadrules[i]];
					if (loadrule) {
						if (utui.loadrules.dateRange.hasDate(loadrule.startDate, loadrule.endDate)) {
							return true;
						}
					}
				}
			}
			return false;
		},

		// ----------------------------------------------------------------
		// Empties the date value if invalid
		onDateBlur: function(event) {
			var $el = $(this),
				val = $el.val();

			if (val == '' || !val.match(/\d{2}\/\d{2}\/\d{4}$/i)) {
				$el.val('');
				return false;
			}
		},

		// ----------------------------------------------------------------
		// Empties the time value if invalid
		onTimeBlur: function(event) {
			var $el = $(this),
				val = $el.val();

			if (val == '' || !val.match(/\d{2}:\d{2}\s([ap]m){1}$/i)) {
				$el.val('');
				return false;
			}
			var numVal = val.replace(/[^0-9:]*/g, '')
			var splittime = numVal.split(':');
			if (splittime[0] > 12 || splittime[1] > 59) {
				$el.val('');
				return false;
			}
			$el.val(val.toUpperCase());
		},

		// ----------------------------------------------------------------
		// Sets the start date/time and end date/time field values
		setValues: function(startDate, endDate) {
			// Get the date range
			var startDateObj = utui.loadrules.dateRange.fromPublishTime(startDate),
				endDateObj = utui.loadrules.dateRange.fromPublishTime(endDate),
				showFields = false;

			if (startDateObj.date) {
				utui.loadrules.dateRange.setStartDate(startDateObj.date);
				showFields = true;
			}
			if (startDateObj.time) {
				utui.loadrules.dateRange.setStartTime(startDateObj.time);
				showFields = true;
			}

			if (endDateObj.date) {
				utui.loadrules.dateRange.setEndDate(endDateObj.date);
				showFields = true;
			}
			if (endDateObj.time) {
				utui.loadrules.dateRange.setEndTime(endDateObj.time);
				showFields = true;
			}

			// Show the date range fields
			if (showFields) {
				utui.loadrules.view.addDateRangeItem();
			}
		},

		// ----------------------------------------------------------------
		// Clears all the field values
		clearValues: function() {
			utui.loadrules.dateRange.setStartDate('');
			utui.loadrules.dateRange.setStartTime('');
			utui.loadrules.dateRange.setEndDate('');
			utui.loadrules.dateRange.setEndTime('');
		},

		// ----------------------------------------------------------------
		// Getters / Setters for the date/time fields
		getStartDate: function() {
			return $('#loadrules_dialog_addmore').find('.startDate').val();
		},
		getStartTime: function() {
			return $('#loadrules_dialog_addmore').find('.startTime').val();
		},
		getEndDate: function() {
			return $('#loadrules_dialog_addmore').find('.endDate').val();
		},
		getEndTime: function() {
			return $('#loadrules_dialog_addmore').find('.endTime').val();
		},
		setStartDate: function(value) {
			return $('#loadrules_dialog_addmore').find('.startDate').val(value);
		},
		setStartTime: function(value) {
			return $('#loadrules_dialog_addmore').find('.startTime').val(value);
		},
		setEndDate: function(value) {
			return $('#loadrules_dialog_addmore').find('.endDate').val(value);
		},
		setEndTime: function(value) {
			return $('#loadrules_dialog_addmore').find('.endTime').val(value);
		},

		// ----------------------------------------------------------------
		// This will append a calendar icon next to the load rule title
		getLoadRuleTitle: function(loadrule, altTitle) {
			// Prevent error if loadrule is undefined
			loadrule = loadrule || {};

			// If loadrule is not an object, we expect a string '1' | '1,2,3'
			if (typeof loadrule == "string") {
				// If a date range has been added we need to show a calendar icon next to the title
				if (utui.loadrules.dateRange.hasDateFromLoadRule(loadrule)) {
					return '<span class="icon-calendar LRsDateRangeIcon"></span> ' +  utui.util.safeEscape(altTitle);
				}
			} else {
				// If a date range has been added we need to show a calendar icon next to the title
				if (utui.loadrules.dateRange.hasDate(loadrule.startDate, loadrule.endDate)) {
					return '<span class="icon-calendar LRsDateRangeIcon"></span> ' +  utui.util.safeEscape(loadrule.title);
				}
			}

			return utui.util.safeEscape(altTitle) || utui.util.safeEscape(loadrule.title);
		}
	},


    setDefaultFilterConditions:function() {
        // Setup the initial filter conditions
        var filterConditions = {
            inactive : {
                show : true
            },
            label : {
                id : "-1"
            }
        };

        this.filterConditions = filterConditions;
    },
	labels: {
		renderSingleLabelSelect: function(id, container) {
			utui.labels.labelsSelectBtn().render(utui.config.tabList.loadrules.tab, $('#loadrules_content'), $('#loadrules_labels_select_' + id), $('#'+container));
		},
		renderBulkLabelSelect: function() {
			utui.labels.labelsSelectBtn().render(utui.config.tabList.loadrules.tab, $('#loadrules_content'), $('#loadrules_labels_menu_list'), $('#loadrulesContainer_headerControls'));
		},
		// Returns the active container
		getActiveContainer: function() {
			return $('#loadrules_content').find('.ui-accordion-content-active').closest('.loadrules_container');
		},
		redrawLabels:function(labels, container) {
			utui.labels.helper.redrawLabels(labels, container, utui.loadrules.id);
		},
		assignOrRemoveLabels: function (isAssignAction, isBulkAction, labelId, forceApplyToAll) {
			utui.labels.helper.assignOrRemoveLabels(utui.loadrules.id, isAssignAction, isBulkAction, labelId, forceApplyToAll);
		},
		onLabelAdded:function () {
			// redraw bulk select list
			utui.loadrules.labels.renderBulkLabelSelect();

			// Get the expanded view
			var $activeContainer = utui.loadrules.labels.getActiveContainer();
			if ($activeContainer[0]) {
				// redraw single selected list
				utui.loadrules.labels.renderSingleLabelSelect($activeContainer.attr('data-id'), $activeContainer.attr('id'));
			}
		},
		onLabelRemoved:function(data) {
			utui.labels.helper.onLabelRemoved(utui.loadrules.id, data);
		},
		onLabelChanged:function(data) {
			utui.labels.helper.onLabelChanged(utui.loadrules.id, data);
		},
		onLabelMenuClosing: function() {
			// We have to loop over all the items to set the fields to enabled/disabled depending on security
			for (var id in utui.data.loadrules){
				var labels = utui.data.loadrules[id].labels;
				if (labels && !utui.labels.canUserModify(labels)) {
					utui.loadrules.labels.setEditable(id);
				}
			}
		},
		onLabelAssigned: function (data) {
			if (utui.config.currentTab === utui.loadrules.id && data) {
				utui.loadrules.labels.assignOrRemoveLabels(true, data.listType === 'bulk', data.labelId);
			}
		},
		onLabelUnAssigned: function (data) {
			if (utui.config.currentTab === utui.loadrules.id && data) {
				utui.loadrules.labels.assignOrRemoveLabels(false, data.listType === 'bulk', data.labelId);

				if (!data.action) {	// If NOT coming from a select menu
					var $container = utui.loadrules.labels.getActiveContainer();
					if ($container[0]) {
						utui.loadrules.labels.setEditable($container.attr('data-id'));
					}
				}
			}
		},
		labelCheckboxChecked: function() {
			utui.labels.helper.onBulkSelectCheckboxClicked(utui.loadrules.id);
		},
		setEditable: function(id) {
			if (!id) return;

			var container = $('.loadrules_container[data-id="'+id+'"]').attr('id'),
				$copyBtn = $('#'+container).find('.actionCopy'),
				$deleteBtn = $('#'+container).find('.actionDelete'),
				$editBtn = $('#'+container).find('.actionEditRules'),
				canModify = utui.labels.canUserModify(utui.data.loadrules[id].labels);

			if (!canModify) {
				$copyBtn.addClass('ui-state-disabled');
				$deleteBtn.addClass('ui-state-disabled');
				$editBtn.addClass('ui-state-disabled');
			} else {
				$copyBtn.removeClass('ui-state-disabled');
				$deleteBtn.removeClass('ui-state-disabled');
				$editBtn.removeClass('ui-state-disabled');
			}

			utui.loadrules.view.updateItemHeader(id, container);

			// Enable/Disable the checkbox
			var $checkbox = $('#loadrules_bulk_select_'+id);

			$checkbox.attr('disabled', !canModify);
			if (!canModify) {
				$checkbox.prop('checked', false);
			}

			// Hide show the bulk label select box
			utui.loadrules.labels.labelCheckboxChecked();
		}
	},
    loadLoadRulesFilterMenu:function(){
        var $filterList = $("#loadRules_filter_menu_list");

        utui.filters.helper.showFilterMenu($filterList, this.filterConditions, this.id, this.filtersToInclude, this.filter);
    },
    toggleFilterMenu:function() {
        var $filterMenu = $("#loadRules_filter_menu_list");

        if($filterMenu.is(":hidden")) {
            $filterMenu.empty();
            utui.loadrules.loadLoadRulesFilterMenu();
            utui.profile.menuToggle('loadRules_filter_menu_list');
        }
        else {
            utui.profile.menuToggle('loadRules_filter_menu_list');
        }
    },
    filter:function(conditions) {
        var containerMap = utui.loadrules.containerMap,
            isResetAction;

        for(var id in containerMap) {
            var loadrule = containerMap[id],
                bShow = utui.filters.run(conditions, loadrule, utui.loadrules.filtersToInclude); // if all filters pass, it will return true

            if(bShow)
                $("#" + id).show();
            else
                $("#" + id).hide();
        }

        isResetAction = utui.filters.isResetAction(conditions, utui.loadrules.filtersToInclude);

        // update the filter button to indicate whether the filter is on or off
        utui.filters.helper.updateFilterButton('loadRules_filter_menu_button', isResetAction);
    },

    //Used by Customization_template to get the selectbox of available loadrules
	setLoadRulesSelect: function (container, config) {
		if (typeof config == 'undefined') {
			config = this.config;
		}
		var options = [];

			options.push('<option></option>');

		for (var i in utui.util.getVars(config, 1)) {
			options.push('<option value="' + config[i].value + '" ' + (typeof config[i].disabled != 'undefined' && config[i].disabled ? 'disabled' : '') + '>' + _.escape(config[i].text) + '</option>');
		}
		for (var i in utui.util.getVars(utui.data.loadrules, 1)) {

			var LRtitle = utui.data.loadrules[i].title;
			var LRnewTitle = LRtitle;
			if (LRtitle.length > 35) {
				LRnewTitle = LRtitle.substring(0, 35) + '...';
			}

			if (utui.data.loadrules[i].status == 'active') {
				options.push('<option value="' + i + '" title="' + utui.util.safeEscape(LRtitle) + '">' + utui.util.safeEscape(LRnewTitle) + '</option>');
			} else {
				options.push('<option value="' + i + '" title="' + utui.util.safeEscape(LRtitle) + '">' + utui.util.safeEscape(LRnewTitle) + ' [OFF]</option>');
			}
		}

		var result = '';
		if (typeof container != 'undefined') {
			$('#' + container).children().remove().end();
			for (var i = 0; i < options.length; i++) {
				$('#' + container).append(options[i]);
			}
		} else {
			result = options.join('');
		}
		return result;
	},
	processApply: function(isFirstSave, callback){

		var addLoadrule = function(lrId) {
			var inputElements = $('#loadrules_dialog_addmore :input'),
				orClauses = [],
				andClauses = {},
				loadruleId = lrId;

			for(var i in utui.util.getVars(inputElements)){
				if(typeof inputElements[i].type != 'undefined' && (inputElements[i].type == 'text' || inputElements[i].type.indexOf('select') == 0)){
					if(/^loadrules_dialog_addmore_(\d+)_(\d+)_filter/.test(inputElements[i].id)){
						if(typeof andClauses[RegExp.$1] == 'undefined')andClauses[RegExp.$1] = [];
						andClauses[RegExp.$1].push(RegExp.$2);
					}else if(/^loadrules_dialog_addmore_(\d+)_filter/.test(inputElements[i].id)){
						orClauses.push(RegExp.$1);
					}
				}
			}

			var startDate = utui.loadrules.dateRange.toPublishTime(utui.loadrules.dateRange.getStartDate(), utui.loadrules.dateRange.getStartTime()),
				endDate = utui.loadrules.dateRange.toPublishTime(utui.loadrules.dateRange.getEndDate(), utui.loadrules.dateRange.getEndTime()),
				obj = new Loadrule(loadruleId, $('#loadrules_dialog_addmore_title').val(), 'active', startDate, endDate, 'true');

            var loadruleTagging = ruleapi.createTaggingObject(obj);
            loadruleTagging.tealium_event = utui.constants.tagging.CREATED_COMPLETED;
            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, loadruleTagging);

			var loadrule = utui.data.loadrules[loadruleId];
			if(loadrule && loadrule.labels) {
				obj.labels = loadrule.labels;
			}

			var filterId = 0;
			for(var i=0;i<orClauses.length;i++){
				obj[filterId] = {}
				obj[filterId]['input_0'] = $('#loadrules_dialog_addmore_'+orClauses[i]+'_inputselect :selected').val();
				obj[filterId]['operator_0'] = $('#loadrules_dialog_addmore_'+orClauses[i]+'_operatorselect :selected').val();
				obj[filterId]['filter_0'] = $('#loadrules_dialog_addmore_'+orClauses[i]+'_filter').val();

				if(typeof andClauses[orClauses[i]] != 'undefined'){
					var filterIdSub = 1;
					for(var j=0;j<andClauses[orClauses[i]].length;j++){
						obj[filterId]['input_'+filterIdSub] = $('#loadrules_dialog_addmore_'+orClauses[i]+'_'+andClauses[orClauses[i]][j]+'_inputselect :selected').val();
						obj[filterId]['operator_'+filterIdSub] = $('#loadrules_dialog_addmore_'+orClauses[i]+'_'+andClauses[orClauses[i]][j]+'_operatorselect :selected').val();
						obj[filterId]['filter_'+filterIdSub] = $('#loadrules_dialog_addmore_'+orClauses[i]+'_'+andClauses[orClauses[i]][j]+'_filter').val();
						filterIdSub++;
					}
				}
				filterId++;
			}

			if(typeof utui.data.loadrules == 'undefined'){
				utui.data.loadrules = {};
			}
      
      obj.sort = _.size(utui.data.loadrules) + 1;
      
			utui.data.loadrules[loadruleId] = obj;

			// Remove Needs Review label
			if (utui.profile.import.conflictLoadRules && utui.profile.import.conflictLoadRules[loadruleId]) {
				delete utui.profile.import.conflictLoadRules[loadruleId];
			}

			if(isFirstSave){
				utui.data.loadrules[loadruleId].containerId = utui.loadrules.addItem(loadruleId, obj);
				utui.loadrules.view.updateAccordion(true);
			}
			else if(utui.loadrules.lastEdit != ''){
				utui.loadrules.containerMap[utui.loadrules.lastEdit] = obj;
				utui.loadrules.editItem(utui.loadrules.lastEdit);
				utui.loadrules.lastEdit = '';
			}

			if(callback) callback(loadruleId);
		};

		if(isFirstSave) {
			// fetch new ID from server and then apply
			utui.loadrules.getNextId.fromServer(1, null,
				function(providedLastId, count, nextId) {
					addLoadrule(nextId);
				},
				function(nextId) {
					addLoadrule(nextId);
				});
		}
		else {
			addLoadrule( $('#loadrule_id').val() );
		}
	},
	getInputs:function(){
		return dsapi.getInputs();
	},
	getOperators:function(container){

		var operatorItemsArr = new Array();

		for(var i in utui.util.getVars(utui.config.defOperators,2)){
			operatorItemsArr.push(new SelectItem(utui.config.defOperators[i], i));
		}

		return operatorItemsArr;
	},
	duplicateConditionBlock:function(containerId) {
		var $el = $("#" + containerId),
			$selects = $el.find("select"),
			$inputs = $el.find("input").not('.select2-input'),
			numOfRowsToAdd = parseInt($selects.length / 2),
			orContainer = "",
			self = this;

		// Add the same number of rows into the new OR container
		for(var i = 0; i < numOfRowsToAdd; i++) {
			if(i == 0) {
				orContainer = utui.loadrules.view.addOrItem("loadrules_dialog_addmore");
			}
			else {
				utui.loadrules.view.addAndItem(orContainer);
			}
		}

		// Copy all of the old select control values into the newly created rows
		var $newContainer = $("#" + orContainer + "_pane"),
			$newSelects = $newContainer.find("select"),
			$newInputs = $newContainer.find("input").not('.select2-input');

		for(var i = 0; i < $selects.length; i++) {
			var $select = $($selects[i]),
				selectedValue = $select.find("option:selected").val();

			$($newSelects.get(i)).val(selectedValue);
		};

		// Re-initialize select2 for $newSelects to show new values
		$newSelects.select2();

		// Copy all of the old input control values into the newly created rows
		for(var i = 0; i < $inputs.length; i++) {
			var oldInput = $($inputs[i]),
				newInput = $($newInputs[i]);

			if(oldInput.is(":hidden")) {
				newInput.hide();
			}
			else {
				newInput.val(oldInput.val());
			}
		}
	},

	getRulesLoadrules: function(obj) {
		var getVars = utui.util.getVars,
			ruleObj = utui.data.loadrules[obj.id] || obj,
			triggerKey = 'input_';

        function constructLoadRuleConditions(obj) {

            if (obj.id === 'all') {
                return constructLoadRuleORcondition(localize.t('tiq.rules.all_pages'), true);
            }

			var loadruleItem = '';
			var loadruleConditions = '';
			var sizeOfRuleObj = utui.util.sizeOf(ruleObj, function (key) {
					return !isNaN(key)
				});

			for (var i = 0; i < sizeOfRuleObj; i++) {
				loadruleItem = constructLoadRuleItem(i); // Strings the AND conditions together
				loadruleConditions += constructLoadRuleORcondition(loadruleItem);
			} //end forloop

			return loadruleConditions;
		}

		function constructLoadRuleORcondition(content, noRules) {
			var v = '';
			if(!noRules) {
			v += '    <div class="LRsORcondition">' + content + '</div>';
			} else {
			v += '    <div>' + content + '</div>';
			}
			return v;
		}

		function isInValidationMap(obj, dataKey) {
			var validationMap = utui.validation.getMap('loadrules',obj.id) || [];

			for (var i = 0; i < validationMap.length; i++) {
				if(dataKey === validationMap[i].reference) {
					return true;
				}
			};
			return false;
		}

		function constructLoadRuleItem(rule) {
			var ruleContent = '';
			var ruleFilterObj = {};
			var sourceName;

			for (var j in getVars(ruleObj[rule])) {

				if (j.indexOf(triggerKey) > -1) {
					var k = j.substring(triggerKey.length);

					ruleFilterObj[k] = {
						source: ruleObj[rule][j],
						filter: ruleObj[rule]['filter_' + k],
						operator: ruleObj[rule]['operator_' + k]
					};

					sourceName = dsapi.getVADataSourceDisplayName(ruleFilterObj[k].source);

					if (sourceName) {
						if(isInValidationMap(obj, sourceName)) {
							ruleContent += templateLoadRuleItem(sourceName, ruleFilterObj[k].operator, ruleFilterObj[k].filter, true);
						}
						else {
							ruleContent += templateLoadRuleItem(sourceName, ruleFilterObj[k].operator, ruleFilterObj[k].filter);
						}
					}
					else {
						ruleContent += templateLoadRuleItem(ruleFilterObj[k].source, ruleFilterObj[k].operator, ruleFilterObj[k].filter);
					}
				}
			}

			return ruleContent;
		}

        function templateLoadRuleItem(source, operator, filter, hasWarning) {
            var v = '';
            v += '<div class="LRsANDcondition">';
	        if (source) {
		        v += '  <div class="LRsSource">'+(hasWarning ? '<i class="icon-warning-sign"></i> ' : '')+utui.util.safeEscape(source)+'</div>';
	        }
            else {
		        v += '  <div class="LRsSource"><span class="emptyValue"><i class="icon-warning-sign"></i> ' + localize.t('tiq.rules.audiencestream_attribute_no_assigned') + '</span></div>';
	        }
            v += '  <div class="LRsCase">'+operator+'</div>';
            v += '  <div class="LRsFilter">'+utui.util.safeEscape(filter)+'</div>';
            v += '</div>';
            return v;
        }

		return constructLoadRuleConditions(obj);

	},

	getTagsScopedCount: function (obj) {
		var getVars = utui.util.getVars,
			manage = utui.data.manage,
			MLR_SELECTION_VALUE = utui.manage.mlrSelVal,
			manageList = utui.config.manageList,
			totalCount = 0,
			activeCount = 0,
			inactiveCount = 0,
			ACTIVE = 'active',
			INACTIVE = 'inactive',
			manageVarsList = getVars(manage, 1);

		for (var key in manageVarsList) {
			var tag = manage[key];

			if (typeof manageList[tag.tag_id] == 'undefined') continue;

			if (tag.loadrule === 'all' && obj.id === 'all') { // If tag is scoped to All Pages
				if (tag.status === ACTIVE) {
					activeCount++;
				} else if (tag.status === INACTIVE) {
					inactiveCount++;
				}
				totalCount++;
			}
			else if (+tag.loadrule === +obj.id) { // If tag has only one load rule
				if (tag.status === ACTIVE) {
					activeCount++;
				} else if (tag.status === INACTIVE) {
					inactiveCount++;
				}
				totalCount++;

			} else if (tag.loadrule === MLR_SELECTION_VALUE || tag.loadrule.indexOf(',') !== -1) {

				if (tag.loadrule === MLR_SELECTION_VALUE) {
					var lrList = tag.multipleLoadRules.split(',');
				} else {
					var lrList = tag.loadrule.split(',');
				}

				for (var i = lrList.length - 1; i >= 0; i--) {
					if (+lrList[i] === +obj.id) {
						if (tag.status === ACTIVE) {
							activeCount++;
						} else if (tag.status === INACTIVE) {
							inactiveCount++;
						}
						totalCount++;
					}
				}
			}
		}

		return { total: totalCount, active: activeCount, inactive: inactiveCount };
	},


    getTagsScoped: function(obj) {
        var getVars = utui.util.getVars;
        var MLR_SELECTION_VALUE = utui.manage.mlrSelVal;
        var manage = utui.data.manage;
        var manageList = utui.config.manageList;
        var self = this;

        var rule = '';

        this.loadRuleTags[obj.id] = {
            active: 0,
            inactive: 0
        };


        /*
         * SIMILAR TO utui.loadrules.getLoadruleTags(loadrule) -- we will need full tag object rather than just tag.id;
         */
        function constructTagsScoped(obj) {
            var title = '';

			for (var key in getVars(manage, 1)) {
				var tag = manage[key];

				if(typeof manageList[tag.tag_id] == 'undefined') continue;


				if(tag.loadrule === 'all' && obj.id === 'all') { // If tag is scoped to All Pages
					title += constructScopedItemsView(tag, obj);
				}
				else if(+tag.loadrule === +obj.id) { // If tag has only one load rule
					title += constructScopedItemsView(tag, obj);

				  // If tag has multiple load rules
				} else if(tag.loadrule === MLR_SELECTION_VALUE || tag.loadrule.indexOf(',') !== -1) {

					// extract the loadrule list
					if (tag.loadrule === MLR_SELECTION_VALUE) {
						var lrList = tag.multipleLoadRules.split(',');
					} else {
						var lrList = tag.loadrule.split(',');
					}

					// Generate loadrule Listing
					for (var i = 0; i < lrList.length; i++) {
						if (+lrList[i] === +obj.id) {
							title += constructScopedItemsView(tag, obj);
						}
					}
				}
			}

			if (title.length == 0) {
				title = constructNoScopedItemsView();
			}

			return constructTagsScopedView('Tags Scoped', title);

		}

		function constructTagsScopedView(label, content) {
			var v = '';

            v += '<table class="contentSectionTable">';
            v += '<thead>';
            v += '  <tr>';
            v += '    <td class="tags-scoped-status"></td>';
            v += '    <td class="tags-scoped-vendor">' + localize.t('tiq.rules.vendor') + '</td>';
            v += '    <td class="tags-scoped-title">' + localize.t('tiq.rules.title') + '</td>';
            v += '    <td class="tags-scoped-uid">UID</td>';
            v += '    <td class="tags-scoped-link"></td>';
            v += '  </tr>';
            v += '</thead>';
            v += '<tbody>';
            v +=   content;
            v += '</tbody>';
            v += '</table>';

            return v;
        }

		function isTagActive(tag) {
			if (typeof tag.status != 'undefined' && tag.status == 'active') {
				return true;
			}
			return false;
		}

		function constructScopedItemsView(tag, obj) {
			var title = manageList[tag.tag_id].title;

			var linkTitle = title;
			if(tag.title !== '') {
				linkTitle += ': '+tag.title;
			}

			var v = '';
			v += '  <tr>';

			if(isTagActive(tag)) {
				v += ' <td class="tags-scoped-status"><span class="contentSectionListItemStatusOn"></span></td> ';
				self.loadRuleTags[obj.id].active++;
			} else {
				v += ' <td class="tags-scoped-status"><span class="contentSectionListItemStatusOff"></span></td> ';
				self.loadRuleTags[obj.id].inactive++;
			}

			v += '    <td class="tags-scoped-vendor">'+title+'</td>';
			v += '    <td class="tags-scoped-title">'+utui.util.safeEscape(tag.title)+'</td>';
			v += '    <td class="tags-scoped-uid">'+tag.id+'</td>';
			v += '    <td class="tags-scoped-link">';
			v += $('<a/>')
				.attr({'class': 'nostyle',
					'href': '#',
					'onclick': 'utui.dashboard.shortcutLink(\'Tags: '+ _.unescape(linkTitle).replace(/'/g, '\\\'')+'\');'
				})
				.html('<i class="icon-reply"></i>')[0].outerHTML;
			v += '    </td>';
			v += '  </tr>';

			return v;
		}

        function constructNoScopedItemsView() {
            var v = '';
            v += '  <tr>';
            v += '    <td class="contentSectionNoListItem" colspan="5">' + localize.t('tiq.rules.there_are_no_tags_scoped') + '</td>';
            v += '  </tr>';
            return v;
        }

		rule += constructTagsScoped(obj);
		return rule;

	},


    getTotalTags:function(loadruleId) {
        if(utui.loadrules.loadRuleTags[loadruleId]){
            var totalTags = utui.loadrules.loadRuleTags[loadruleId].active + utui.loadrules.loadRuleTags[loadruleId].inactive;
            return totalTags;
        }
    },
    setTitle:function(container, labelsExpanded){

        var lr = utui.loadrules.containerMap[container];
        lr.containerId = container;

        utui.loadrules.view.renderTitle(lr, labelsExpanded);

		utui.labels.helper.renderLabels(container, this.id);

		// Click handler for the bulk select checkbox
		$('#loadrules_bulk_select_'+lr.id).on('click', function(e){
			e.stopPropagation();

			var $this = $(this);

			// hack to enable checkboxes to be checked
			setTimeout(function () {
				$this.prop("checked", !$this.prop("checked"));
				utui.loadrules.labels.labelCheckboxChecked();
			}, 0);

			return false;
		});

        //Enable toggle button if the object is editable. Old loadrule objects may not have the editable property
        if(this.isEditable(lr)){
            $('#'+container+'_status_toggle').click(function(event){
                event.preventDefault();
                event.stopPropagation();

				// If the accordion toggle contains the class disabled_toggle then do not execute
				if ($(this).hasClass('disabled_toggle')) return;

                utui.loadrules.toggleActive(container);
            });
        } else {
            $('#'+container+'_status_toggle').addClass("disabled_toggle");
        }
    },
	prepareToAddItem: function(loadrule) {
		var lrObj = loadrule;

		utui.util.showSpinner();

		utui.loadrules.getNextId.fromServer(1, null,
			// successfully retrieved nextId
			function(providedExistingLastId, count, nextId) {
				utui.loadrules.addItem(nextId, lrObj);

				utui.util.hideSpinner();
			},
			// failed to retrieve nextId
			function(nextId) {
				utui.loadrules.addItem(nextId, lrObj);

				utui.util.hideSpinner();
			}
		);
	},
    /* Adds a loadrule to a container */
	addItem: function(loadruleId, loadruleObj, isOnProfileLoad, bBypassHistoryEvent){
		utui.profile.changeFocusFlag = false;

		//Generate a unique id for the container
		var containerId = 'loadrules_content_' + utui.util.getContainerId();

		if (loadruleObj.id !== 'all') {
			loadruleObj.id = loadruleId;
			loadruleObj._id = loadruleId;
		}

        loadruleObj.containerId = containerId;

        this.containerMap[loadruleObj.containerId] = loadruleObj;

        utui.loadrules.view.render(loadruleObj);

        utui.loadrules.view.renderTitle(loadruleObj, utui.labels.helper.getLabelsExpandedForTab());

        this.setTitle(loadruleObj.containerId);

        if(!bBypassHistoryEvent) {
			utui.profile.setActionPerformed({
			    action : utui.constants.loadrules.ADDED,
			    data : {
			        id : "" + loadruleObj.id,
			        name : this.containerMap[loadruleObj.containerId].title,
			        imported : loadruleObj.imported,
			        library : (loadruleObj.imported) ? loadruleObj.settings.profileid : '',
			        kind : utui.constants.loadrules.TYPE,
			        operation : utui.constants.operation.ADDED,
			        container: containerId
			    }
			}, true, !this.initComplete, isOnProfileLoad);
        }

        return containerId;
    },
  
  generateNextUniqueServerIds: function (count, cb) {
    var that = this;
    utui.loadrules.getNextId.fromServer(count, true,
      function (providedLastId, count, nextId) {
        that._nextId = nextId;
        that._generatedIds = count;
        if (cb) cb(nextId);
      },
      function (nextId) {
        that._nextId = nextId;
        that._generatedIds = 1;
        if (cb) cb(nextId);
      });
  },
  
  addBulkImportedItems: function (data, dataItems) {
    
    var that = this;
    _.each(dataItems, function (obj) {
      that.addImportedItem(obj, data);
    });
    
    utui.loadrules.view.updateAccordion();
  },
  
	addImportedItem: function (obj, data) {
		var addLoadrule = function(nextId) {
			var containerId = utui.loadrules.addItem(nextId, obj);
			// Re-conditionalize profile tag to imported load rule
			var key = obj.settings.origin_id + '.' + obj.settings.profileid;
			if (utui.profile.import.deletedImportLoadRules[key]) {
				var previousImportValue = utui.profile.import.deletedImportLoadRules[key];
				for (var mTag in utui.util.getVars(utui.data.manage)) {
					var myTag = utui.data.manage[mTag];
					if (myTag.loadrule) {
						var loadrules = myTag.loadrule.split(",");
						var loadruleFound = $.inArray(previousImportValue, loadrules);
						if (loadruleFound > -1) {
							loadrules[loadruleFound] = utui.loadrules.containerMap[containerId].id;
						}
						if (loadrules) {
							myTag.loadrule = String(loadrules);
						}
					}
				}
			}

			if(utui.data.loadrules[nextId] === undefined) {
				utui.data.loadrules[nextId] = utui.loadrules.containerMap[containerId];
			}

			// Update history and show change status
			var options = {
				origin_id:  obj.oldId,
				container: containerId,
				new_id: "" + utui.loadrules.containerMap[containerId].id
			};
			utui.profile.import.updateImportedHistory(data, utui.constants.loadrules.TYPE, options);

			utui.loadrules.view.updateAccordion();
		};

		utui.profile.import.setImportOriginId(obj, obj.id);

		obj.oldId = obj.id;
		delete obj.id;
		obj.editable = false;

    if (this._generatedIds !== undefined && this._generatedIds > 0) {
      this._generatedIds--;
      addLoadrule(this._nextId++);
    } else {
      this.generateNextUniqueServerIds(1, function (nextId) {
        addLoadrule(nextId)
      })
    }
	},
	addStashedItem: function (obj) {
		// Since stash ids are already unique, we do not need to create new IDs
		utui.data.loadrules[obj.id] = obj
		utui.loadrules.addItem(obj.id, obj, null, true);

		utui.util.hideSpinner();
		utui.loadrules.view.updateAccordion();
	},
	editItem:function(container, bDoNotLogAction){
		var loadrule = this.containerMap[container];

		loadrule.containerId = container;
		utui.loadrules.view.updateLR(loadrule);

		this.setTitle(container);

		if(!bDoNotLogAction) {
			utui.profile.setActionPerformed({
				action : utui.constants.loadrules.UPDATED,
				data : {
					id : loadrule.id,
					name : loadrule.title,
					kind : utui.constants.loadrules.TYPE,
					operation : utui.constants.operation.UPDATED,
					container: container
				}
			}, true);
		}
		else {
			utui.profile.setDirty();
		}

		var tagging = ruleapi.createTaggingObject(loadrule);
        tagging.tealium_event = utui.constants.tagging.EDIT;
        utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);
    },

	showEditItem:function(container,callback){
		var obj = this.containerMap[container],
			loadRule = utui.util.getVars(obj),
		/* Number of OR blocks in this loadrule, notice that this object might contain keys that are not numbers, filter them out  */
			sizeOfLoadRule = utui.util.sizeOf(loadRule, function(key){return !isNaN(key);});

		this.lastEdit = container;
		utui.loadrules.view.showAddMore('edit',callback);
		utui.loadrules.view.showAddOptions(obj, sizeOfLoadRule);
	},
	
	toggleActive:function(container, callback){
		var loadRuleId = this.containerMap[container].id;
		var tagsLoadedHash = {};
		var dm = utui.data.manage;
		var MLR_SELECTION_VALUE = utui.manage.mlrSelVal;
		var self = this;
		var eventLogged = false;
		var pm_explict_in_use = utui.data.privacy_management.explicit ? utui.data.privacy_management.explicit.loadrule.indexOf(loadRuleId) : -1;
		var loadruleObj = utui.data.loadrules[loadRuleId];
		var tagging = ruleapi.createTaggingObject(loadruleObj);

        var extractSingleLoadRule = function() {
			var lrList = dm[i].loadrule.split(',');
			for (var lri=0;lri<lrList.length;lri++){
				if (lrList[lri] == loadRuleId){
					tagsLoadedHash[i] = i;
				}
			}
		};
		var extractMultiLoadRule = function() {
			var lrList = dm[i].multipleLoadRules.split(',');
			for (var lri=0;lri<lrList.length;lri++){
				if (lrList[lri] == loadRuleId){
					tagsLoadedHash[i] = i;
				}
			}
		};
		var extractLoadRules = function() {
			if(dm[i].loadrule == loadRuleId) {
				tagsLoadedHash[i] = i;
			} else if (dm[i].loadrule === MLR_SELECTION_VALUE){
				extractMultiLoadRule();
			} else if (dm[i].loadrule.indexOf(',') !== -1){
				extractSingleLoadRule();
			}
		};

		if(this.containerMap[container].status === 'active'){

			for(var i in utui.util.getVars(dm)){
				if (dm[i].status === 'active'){
					extractLoadRules();
				}
			}
			
			if (Object.keys(tagsLoadedHash).length > 0 || pm_explict_in_use > -1){

				//self.showDisableLoadRuleActiveTagsDialog(tagsLoadedHash, container, );

				var showDisabledLoadruleCallback = function(tags, pm_explicit_uses) {
					if(!eventLogged) {
						eventLogged = true;

            if (pm_explicit_uses) {
              utui.util.pubsub.publish(utui.constants.privacy_management.explicit.LRUPDATED,{loadrule : loadRuleId});
            }
						
            if (tags.length > 0) {
						utui.profile.setActionPerformed({
							action : utui.constants.loadrules.TOGGLED,
							data : {
								id : self.containerMap[container].id,
								name : self.containerMap[container].title,
								status : self.containerMap[container].status,
								affectedTags : tags,
								kind : utui.constants.loadrules.TYPE,
								operation : utui.constants.operation.TOGGLED,
								container: container
							}
						}, true);
            }
						if(typeof callback!='undefined')callback({ loadruleid: loadRuleId });
					}
				};

				utui.loadrules.view.showDisableLoadRuleActiveTagsDialog(tagsLoadedHash, container, showDisabledLoadruleCallback, pm_explict_in_use > -1);

				return;
			}else{
                // Disable load rule
				this.containerMap[container].status = 'inactive';
                tagging.tealium_event = utui.constants.tagging.DISABLE;
            }
		} else {

			for(var i in utui.util.getVars(dm)){
				extractLoadRules();
			}

			if (Object.keys(tagsLoadedHash).length > 0){
				utui.loadrules.view.showActivateLoadRulesDialog(tagsLoadedHash, container, function(tags) {
					if(!eventLogged) {
						eventLogged = true;
						var data = {
							id : self.containerMap[container].id,
							name : self.containerMap[container].title,
							status : self.containerMap[container].status,
							kind : utui.constants.loadrules.TYPE,
							operation : utui.constants.operation.TOGGLED,
							container: container
						}

						if(tags && tags.length > 0) {
							data.affectedTags = tags;
							data.kind = utui.constants.loadrules.TYPE;
							data.operation = utui.constants.operation.TOGGLED;
							data.container = container;
						}

						utui.profile.setActionPerformed({
							action : utui.constants.loadrules.TOGGLED,
							data : data
						}, true);
						if(typeof callback!='undefined')callback({ loadruleid: loadRuleId });
					}
				});

				return;
			}else{
				// Enable load rule
				this.containerMap[container].status = 'active';
                tagging.tealium_event = utui.constants.tagging.ENABLE;
            }
		}

        utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);
        $('#'+container+'_status').val(this.containerMap[container].status);

		this.setTitle(container);

		if(!eventLogged) {
			utui.profile.setActionPerformed({
				action : utui.constants.loadrules.TOGGLED,
				data : {
					id : this.containerMap[container].id,
					name : this.containerMap[container].title,
					status : this.containerMap[container].status,
					kind : utui.constants.loadrules.TYPE,
					operation : utui.constants.operation.TOGGLED,
					container: container
				}
			}, true)

			eventLogged = true;
		}
		if(typeof callback!='undefined')callback({ loadruleid: loadRuleId });
	},

	activateLoadruleAndTag:function(container, tagsLoadedHash, onConfirmCallback){

		utui.loadrules.containerMap[container].status = 'active';
		var tags = [];
		var tagIds = [];
		for(var i in utui.util.getVars(tagsLoadedHash)){
			for(var j in utui.util.getVars(utui.manage.containerMap)){
				var currentTag;
				if (utui.manage.containerMap[j].loadrule.indexOf(',') !== -1 || utui.manage.containerMap[j].loadrule === utui.manage.mlrSelVal){
					var lrList;
					if (utui.manage.containerMap[j].loadrule === utui.manage.mlrSelVal){
						lrList = utui.manage.containerMap[j].multipleLoadRules.split(',');
					} else {
						lrList = utui.manage.containerMap[j].loadrule.split(',');
					}

					var isAllActive = true;
					for (var tlri in lrList){
						for (var lri in utui.util.getVars(utui.loadrules.containerMap)){
							if (lri !== container) {
								if(lrList[tlri] == utui.loadrules.containerMap[lri].id && utui.loadrules.containerMap[lri].status !== 'active'){
									isAllActive = false;
								}
							}
						}
					}
					if (isAllActive){
						utui.manage.containerMap[j].status = 'active';
					}
				} else if(utui.data.manage[tagsLoadedHash[i]].loadrule == utui.manage.containerMap[j].loadrule){
					utui.manage.containerMap[j].status = 'active';
				}

				currentTag = utui.manage.containerMap[j];
				if(tagsLoadedHash[currentTag.id] && tagIds.indexOf(currentTag.id) < 0) {
					tags.push({
						id : currentTag.id,
						tag_name : currentTag.tag_name || utui.util.getTagNameFromTagId(currentTag.tag_id),
						name : currentTag.title
					})

					tagIds.push(currentTag.id);
				}
			}
			//Have to reset these after because they are used to identify the value in containerMap
			utui.data.manage[tagsLoadedHash[i]].status = 'active';
		}
		utui.profile.dirty = 1;
		utui.loadrules.setTitle(container);
		onConfirmCallback(tags);
		utui.loadrules.editItem(container, true);
	},

	activateLoadRule : function(container, onConfirmCallback) {
		utui.loadrules.containerMap[container].status = 'active';
		utui.profile.dirty = 1;
		utui.loadrules.setTitle(container);
		onConfirmCallback([]);
		utui.loadrules.editItem(container, true);
	},

	copyLoadRule:function(container, callback){
		var addLoadrule = function(lrId) {
			//Perform a deep copy of a specified loadrule object
			var loadruleCopy = $.extend(true, {}, utui.loadrules.containerMap[container]);

			loadruleCopy.title = loadruleCopy.title + ' - ' + localize.t('tiq.rules.copy');

			loadruleCopy.id = lrId;
			loadruleCopy.sort = _.size(utui.data.loadrules)+1;

			utui.data.loadrules[loadruleCopy.id] = loadruleCopy;

			utui.profile.changeFocusFlag = false;

			//Get a new container ID for the copy
			var itemId = utui.util.getContainerId();
			loadruleCopy.containerId = 'loadrules_content_'+itemId;

			loadruleCopy = utui.profile.import.cleanCopiedItemOfImportInfo(loadruleCopy);

			//Add the new loadrule copy to the data model container
			utui.loadrules.containerMap[loadruleCopy.containerId] = loadruleCopy;

			utui.loadrules.view.render(loadruleCopy);

			utui.loadrules.setTitle(loadruleCopy.containerId);

			utui.loadrules.view.updateAccordion(true);

			utui.profile.setActionPerformed({
				action : utui.constants.loadrules.ADDED,
				data : {
					id : loadruleCopy.id,
					name : utui.loadrules.containerMap[loadruleCopy.containerId].title,
					kind : utui.constants.loadrules.TYPE,
					operation : utui.constants.operation.ADDED,
					container: loadruleCopy.containerId
				}
			}, true, !utui.loadrules.initComplete);

			utui.profile.setDirty();

			if(typeof callback !== 'undefined') callback({ loadruleid: loadruleCopy.id });
		};

		if( (typeof container !== 'undefined') && (container != null)) {
			utui.loadrules.getNextId.fromServer(1, null,
				function(providedLastId, count, nextId) {
					addLoadrule(nextId);
				},
				function(nextId) {
					addLoadrule(nextId);
				});
		}
	},
	// ----------------------------------------------
	getNextId: {

		_nextId : 0,

		_getLocalLastId: function() {
			var maxId = 0,
				lastSettingsId = utui.data.settings.lastloadruleid;

			if (typeof lastSettingsId !== 'undefined'){
				maxId = +lastSettingsId || 0; // Avoid a NaN if it's empty...
			}

			for(var i in utui.data.loadrules) {
				var num = +i;

				if(num > maxId) {
					maxId = num;
				}
			}

			return (this._nextId > maxId) ? this._nextId - 1 : maxId;
		},

		fromServer: function(numOfInstances, importCount, successCallback, failureCallback) {
			var requestOptions = { timeout : 5000 },
				providedLastId = utui.loadrules.getNextId._getLocalLastId(),
				url = utui.service.addParamsToURL(utui.service.restapis.GET_NEXT_ID, {type : 'loadrule'}),
				newId,
				dataObj;

			utui.util.showSpinner();

			if(importCount) {
				// providedLastId += importCount;
				requestOptions = {timeout : 5000, async: false};
			}

			dataObj = {
				provided_last_id : providedLastId,
				count : (numOfInstances ? numOfInstances : 1)
			};

			utui.service.get( url, dataObj, requestOptions,
				function(data) {
					this._nextId = data.next_unique_id;

					if(successCallback) successCallback(data.provided_existing_last_id, data.count, this._nextId);
					utui.util.hideSpinner();
				},
				function() {
					newId = utui.loadrules.getNextId.fromLocal();
					if(failureCallback) failureCallback(newId);
					utui.util.hideSpinner();
				}
			);
		},

		fromLocal: function() {
			return utui.loadrules.getNextId._getLocalLastId() + 1;
		},

		reset: function() {
			this._nextId = 0;
		}
	},

	dropConfirm:function(container, callback){

		//Get the tags that are associated with this loadrule
		var loadRuleId = this.containerMap[container].id;
		var tagsLoaded = this.getLoadruleTags(loadRuleId);

		utui.loadrules.view.renderDropLR(tagsLoaded, container, loadRuleId, callback);

	},
	// returns (array) tag IDs
	getLoadruleTags:function (loadRuleId) {
		var tagsLoaded = [];
		for(var i in utui.util.getVars(utui.data.manage)){
			if(utui.data.manage[i].loadrule == loadRuleId){
				tagsLoaded.push(i);
			} else if (utui.data.manage[i].loadrule.indexOf(',') !== -1 || utui.data.manage[i].loadrule === utui.manage.mlrSelVal){
				var lrlist;
				if (utui.data.manage[i].loadrule === utui.manage.mlrSelVal) {
					lrlist = utui.data.manage[i].multipleLoadRules.split(',');
				} else {
					lrlist = utui.data.manage[i].loadrule.split(',');
				}
				for (var lidx=0; lidx<lrlist.length; lidx++){
					if (loadRuleId == lrlist[lidx]){
						tagsLoaded.push(i);
					}
				}
			}
		}

		return tagsLoaded;
	},
	drop: function (container, callback, isOnProfileLoad, bBypassHistoryEvent) {
		var loadrule = this.containerMap[container];
		var id = loadrule.id,
			title = loadrule.title,
			imported = loadrule.imported;

		if(!bBypassHistoryEvent) {
			utui.profile.setActionPerformed({
				action: utui.constants.loadrules.REMOVED,
				data: {
					id: id,
					name: title,
					imported : imported,
					library : (imported) ? loadrule.settings.profileid : '',
					kind : utui.constants.loadrules.TYPE,
					operation : utui.constants.operation.REMOVED
				}
			}, true, null, isOnProfileLoad);
		}

		utui.validation.removeInstanceByTypeAndId('loadrules', id);

		delete utui.data.loadrules[id];
		delete this.addedManage[id];
		delete this.containerMap[container];

		utui.loadrules.view.removeLR(container);
		utui.loadrules.view.updateAccordion();
		utui.loadrules.view.updateSortOrder();

		if (typeof callback !== 'undefined') callback(id, 'delete');
	},

	containerLookup:function(id){
		for(var i in utui.util.getVars(utui.loadrules.containerMap)){
			if(utui.loadrules.containerMap[i]&&utui.loadrules.containerMap[i].id==id){
				return i;
			}
		}
		return null;
	},

	isEditable:function(loadrule) {
		if(typeof loadrule.editable == 'undefined')
			loadrule.editable = true;

        return utui.util.converter.stringToBool(loadrule.editable);
    },

    updateAllLRTags:function() {
        var containerMap = utui.loadrules.containerMap;
        for(var key in containerMap) {
            var lr = containerMap[key];
            utui.loadrules.view.updateTagsScoped(lr);
        }
    },
    updateLRDataSource:function(oldDataSource,newDataSource){
		var $LRDataSources = $('#loadrules_content').find('div.LRsSource'),
			LRDLength = $LRDataSources.length,
			loadrules = utui.data.loadrules;
		//Update all instances of the old DS in utui.loadrules.data
		for(var uid in loadrules){
			if(_.isObject(loadrules[uid])){
				for( var conditions in loadrules[uid]){
					if(_.isObject(loadrules[uid][conditions])){
						for( var attribute in loadrules[uid][conditions]){
							if(attribute.indexOf('input_') === 0){
								if(utui.util.safeEscape(loadrules[uid][conditions][attribute]) === utui.util.safeEscape(oldDataSource)){
									loadrules[uid][conditions][attribute] = newDataSource;
								}
							}
						}
					}

				}
			}
		}
		//update the accordion UI
		while(LRDLength--){
			var $dataSource = $($LRDataSources[LRDLength]);
			if (utui.util.safeEscape($dataSource.html()) === utui.util.safeEscape(oldDataSource)) {
				$dataSource.html(utui.util.safeEscape(newDataSource));
			}
		}
	},
  fixMissingSortIdsOnLoad: function () {
    var loadrules = utui.data.loadrules;
    //Get max sort id
    var maxSortId = 1;
    _.each(loadrules, function (lrObj) {
      maxSortId = Math.max(parseInt(lrObj.sort) || 0, maxSortId);
    });
    _.each(loadrules, function (lrObj) {
      if (lrObj.sort) {
        return;
      }
      lrObj.sort = "" + (maxSortId++);
    });
    
  }
});

utui.loadrules = new UtuiLoadrulesViewModel('UtuiLoadrulesView');

//----------------------------------------------------
//
// DataSource API - used to manage the data sources object universally within UTUI.
//
//----------------------------------------------------
var dsapi = function() {

	// PRIVATE API
	//----------------------------------------------------
	var _prefixHash = ['js.','js_page.','meta.','cp.','qp.','va.','dom.'],
		_scopeHash = ['extensions','loadrules','tags','data_layer_specs'],
		_selectListType = {
			data_layer_spec: 'js'
		},
		_typeDictionary = {
			"dom": "DOM Variable",
			"js": "UDO Variable",
			"js_page": "JavaScript Variable",
			"meta": "Meta Data Element",
			"cp": "First Party Cookie",
			"qp": "Querystring Parameter",
			"va": "AudienceStream Attribute"
		};

	//----------------------------------------------------
	var _data = {};
	var _utagInternalDataSources = {
		"utag_main__ss": "cp",
		"utag_main__pn": "cp",
		"utag_main__sn": "cp",
		"utag_main_v_id": "cp",
		"utag_main__st": "cp",
		"utag_main_ses_id": "cp",
		"ut.event": "js",
		"ut.account": "js",
		"ut.profile": "js",
		"ut.env": "js",
		"ut.version": "js",
		"ut.domain": "js"
	};
	//----------------------------------------------------
	var _consts = { // nested structure for extensibility 
		dom: { 
			DOM: 'dom',
			DOMID: 'domId',
			DOMID_LENGTH: 'domId'.length
		}
	};
	//----------------------------------------------------

	// DOM Data Sources - for front end purposes
	var _domDataSources = {}; // content structure predominantly mirrors that of the data sources object in utui.data.define
	
	// initialize _domDataSources
	function _initDOMDataObject() {
		var domItems = utui.config.defItems,
			i = 0;
		for (var entry in domItems) { // note this also effectively resets _domDataSources when, e.g., a different profile is loaded
			if(!domItems.hasOwnProperty(entry)) continue;

			_domDataSources[i] = {};
			$.extend(_domDataSources[i], 
				{
					title: domItems[entry],
					name: entry,
					type: _consts.dom.DOM,
					_id: _consts.dom.DOMID + i, // different data type so as to avoid collisions with regular data source object ids
					description: utui.config.domDescriptions[entry],
					labels: '',
					imported: undefined,
					settings: undefined,
					extensions: [],
					loadrules: [],
					tags: [],
					data_layer_specs: []
				}
			);
			i++;
		}
	}
	//----------------------------------------------------
	function _safeEscapeDataSource(dataKey) {
		return (typeof dataKey === 'string') ? utui.util.safeEscape(dataKey) : dataKey;
	}


	//----------------------------------------------------
	function _getTypeAlias(type) {
		if(_typeDictionary[type])
			return _typeDictionary[type];

		return type;
	}

	//----------------------------------------------------
	function _getDataSourceFormattedName(value) {
        var dsCollection = dsapi.getData();
        var dsItem = dsCollection[value];
        var prefix;
        var prefixDot;
        var assignedName;

        if(typeof dsItem !== 'undefined') {
            if(typeof dsItem.title === 'string' && dsItem.title.length > 1) {
                return dsItem.title + " ("+_getTypeAlias(dsItem.type)+")";
            }
            else if(dsItem.name) {
                return dsItem.name + " ("+_getTypeAlias(dsItem.type)+")";
            }
        }

        if(typeof value === 'string') {
			for (var i = 0; i < _prefixHash.length; i++) {
				prefixDot = _prefixHash[i];
				prefix = prefixDot.replace('.','');

				if(value.indexOf(prefixDot) === 0) {
					assignedName = value.replace(prefixDot, '');
					return assignedName + ' ('+_getTypeAlias(prefix)+')';
				}
			};
        }

        // fallback to original passed value
        return value;
	}

	//----------------------------------------------------
	// Initializes API after load
	function _initDataObject() {
		// Clear _data in-case user loaded a different profile
		_data = {};

		for(var i in utui.data.define) {
			if(!utui.data.define.hasOwnProperty(i)) continue;

			var ds = utui.data.define[i],
			    dataTitle = ds.title,
			    dataName = ds.name,
			    dataType = ds.type,
			    dataDesc = ds.description,
			    dataKey = dataType + '.' + dataName,
			    dataId = ds._id,
			    imported = ds.imported,
			    settings = ds.settings,
			    context = ds.context;

			if (dataType === 'va') {
				dataKey = _getVADataKey(ds);
			}

			_data[dataKey] = new DataSource(dataTitle, dataName, dataType, dataDesc, dataId, imported, settings, context);
		}
	}

	function _getVADataKey(dataObj) {
		if (dataObj.context !== 'visitor') {
			return dataObj.type + '.' + dataObj.context + '.' + dataObj.settings.origin_type + '.' + dataObj.settings.origin_id;
		}
		else {
			return dataObj.type + '.' + dataObj.settings.origin_type + '.' + dataObj.settings.origin_id;
		}
	}

	// Takes existing utag.data.define (as well as DOM data sources) and construct scoped properties.
	function _getMappingFromScope(mapping, scopeType) {
		var _entryId;

		if($.isEmptyObject(mapping)) return false;

		// key filtering for extensions
		function isValueInExtension(obj, value) {
			var keyArr = [], _instance, _identifier;

			for(var key in obj) {

				// if key is using a generated instance ID, check its set
				if(key.indexOf('_') > 0) {

					keyArr = key.split('_');
					_identifier = keyArr[keyArr.length-1];
					_instance = keyArr.slice(0, -1).join('_');

					if(obj['handler'] && obj['handler'] === 'custom') continue;

					// Exclusion rule 1: if setoption is not a variable, skip instance group
					if(obj[_instance+'_setoption'] !== 'var' && obj[_instance+'_settovar'] === value) continue;

					// Exclusion rule 2: if condition statements are manually defined (user inputted, rather than selection), skip instance group
					if(_identifier === 'filter' && obj[_instance+'_filter'] === value) continue;
					if(_identifier === 'text' && obj[_instance+'_text'] === value) continue;
					if(_identifier === 'comment' && obj[_instance+'_comment'] === value) continue;
					if(_identifier === 'name' && obj[_instance+'_name'] === value) continue;
					if(_identifier === 'value' && obj[_instance+'_value'] === value) continue;

					// Exclusion rule 3: skip instance groups (user inputted, rather than selection) that do not relate to scoping.
					// keys used by Domain Based Deployment
					if(_identifier === 'devdomain' && obj[_instance+'_devdomain'] === value) continue;
					if(_identifier === 'qadomain' && obj[_instance+'_qadomain'] === value) continue;
					// key used by Channels
					if(_identifier === 'channelname' && obj[_instance+'_channelname'] === value) continue;
					// key used by several extensions, including Privacy Manager and Content Modification
					if(_identifier === 'domid' && obj[_instance+'_domid'] === value) continue;
					// key used by Content Modification
					if(_identifier === 'domcontent' && obj[_instance+'_domcontent'] === value) continue;
					// key used by Data Validation
					if(_identifier === 'label' && obj[_instance+'_label'] === value) continue;
					// key used by Split Segmentation
					if(_identifier === 'segname' && obj[_instance+'_segname'] === value) continue;
					// keys used by Adobe Target Tag Content Modification
					if(_identifier === 'mboxid' && obj[_instance+'_mboxid'] === value) continue;
					if(_identifier === 'mboxparams' && obj[_instance+'_mboxparams'] === value) continue;
				}

				// Exclusion rule 4: if handler is set to custom, discard completely
				if(key === 'handler' && obj[key] === 'custom') continue;

				// Exclusion rule 5: if option is not set to var, discard completely
				if(key === 'settovar' && obj['setoption'] !== 'var') continue;

				/* 
				 * Exclusion rule 6: skip additional manually defined (user inputted, rather than selection) values that do not relate to scoping
				 * but could still conceivably contain a value that conforms to datatype.name (e.g., dom.url, js.page_name, etc.).
				 */
				if (key === 'settotext' && obj[key] === value) continue; // several extensions use this key including Lookup Table
				if (key === 'notes' && obj[key] === value) continue; // many extensions use this key
				if (key === 'title' && obj[key] === value) continue; // many extensions use this key
				if (key === 'delimiter' && obj[key] === value) continue; // key used by Join Data Values
				if (key === 'defaultvalue' && obj[key] === value) continue; // key used by Join Data Values
				if (key === 'code' && obj[key] === value) continue; // key used by several extensions, including JS Code, Channels, and Link Tracking
				// keys used by Modal Offer
				if (key === 'mdlFooterTxt' && obj[key] === value) continue; 
				if (key === 'mdlHeaderTxt' && obj[key] === value) continue;
				if (key === 'mdlBodyTxt' && obj[key] === value) continue;
				if (key === 'mdlCssCode' && obj[key] === value) continue;
				if (key === 'mdlHtmlCode' && obj[key] === value) continue;
				// keys used by Flatten JSON Object
				if (key === 'jsonobject' && obj[key] === value) continue;
				if (key === 'outputobject' && obj[key] === value) continue;
				if (key === 'domain' && obj[key] === value) continue; // key used by Split Segmentation
				// keys used by Link Tracking
				if (key === 'eventname' && obj[key] === value) continue;
				if (key === 'downloadfilter' && obj[key] === value) continue;
				if (key === 'internalfilter' && obj[key] === value) continue;
				// key used by jQuery clickHandler (1.6 and below)
				if (key === 'domid' && obj[key] === value) continue;
				// keys used by jQuery onHandler (1.7 and above)
				if (key === 'selector' && obj[key] === value) continue;
				if (key === 'primaryselector' && obj[key] === value) continue;

				// Escape inputted values for comparison
				var safeValue = utui.util.safeEscape(obj[key]);

				// Inclusions
				if(safeValue === value) return true;
			}

			return false;
		}

		// key filtering for load rules
		function isKeyBlacklistedInLoadRule(loadRuleObj, value) {
			for (key in loadRuleObj) {
				if(!loadRuleObj.hasOwnProperty(key)) continue;

				// skip manually defined (user inputted, rather than selection) value
				if (key === 'title' && loadRuleObj[key] === value) {
					return true;
				} else {
					continue;
				}
			}
			return false;
		}

		// key filtering for data layer specs (necessary for the extreme edge case where the data layer spec's data_sources is still empty)
		function isKeyBlacklistedInDataLayerSpecs(dataLayerSpecObj, value) {
			for (key in dataLayerSpecObj) {
				if(!dataLayerSpecObj.hasOwnProperty(key)) continue;

				// skip manually defined (user inputted, rather than selection) value
				if (key === 'value' && dataLayerSpecObj[key] === value) {
					return true;
				} else if (key === 'description' && dataLayerSpecObj[key] === value) {
					return true;
				} else if (key === 'title' && dataLayerSpecObj[key] === value) {
					return true;
				} else {
					continue;
				}
			}
			return false;
		}

		// Store unique ID into each datasource
		function _storeScoping(dataKey) {
			var dataKey = _safeEscapeDataSource(dataKey),
				scopeObj;
			
			var verifyAndStore = function(dataKey) {
				var domKey;
				_.each(_domDataSources, function (val, key) {
					if (_domDataSources[key].name === dataKey) {
						domKey = key;
					}
				});

				if (dataKey.indexOf(_consts.dom.DOM) === 0 && _domDataSources[domKey] && _domDataSources[domKey][scopeType].indexOf(_entryId) === -1) {
					_domDataSources[domKey][scopeType].push(_entryId);
				} else if(_data[dataKey] && _data[dataKey][scopeType].indexOf(_entryId) === -1) {
					_data[dataKey][scopeType].push(_entryId);
				}
			}

			// This check is to handle extension mappings when loading from the server.
			// The data source key will be escaped, but the extension key will not, so
			// we need to escape the extension key to see check if the data source is used in the extension
			if (scopeType === 'extensions') {
				scopeObj = utui.data.customizations[_entryId];
				if(!isValueInExtension(scopeObj, dataKey)) { return; }
				verifyAndStore(dataKey);

			// avoid the title key in load rules
			} else if(scopeType === 'loadrules') { 
				scopeObj = utui.data.loadrules[_entryId];
				if(isKeyBlacklistedInLoadRule(scopeObj, dataKey)) { return; }
				verifyAndStore(dataKey);

			// avoid the value, description, and title keys in data layer specs	
			} else if(scopeType === 'data_layer_specs') { 
				scopeObj = utui.define.dataLayerSpecs.data_layer_specs[_entryId];
				if(isKeyBlacklistedInDataLayerSpecs(scopeObj, dataKey)) { return; }
				verifyAndStore(dataKey);

			// handle all other scope types (i.e., tags)
			} else {
				verifyAndStore(dataKey);
			} 
		}

		function _crawlValues(obj) {
			var index = 0,
				collection = [],
				name,
				entry,
				dataKey,
				next;

			for(var i in obj) {
				if(!obj.hasOwnProperty(i)) continue;

				entry = obj[i];

				// Store ID for insertion later
				if(entry) {
					switch(scopeType) {
						case 'loadrules':
							if(entry.hasOwnProperty('id')) { _entryId = parseInt(entry.id); }
							break;

						case 'tags':
							if(entry.hasOwnProperty('_id')) { _entryId = parseInt(entry._id); }
							break;

						case 'extensions':
							if(entry.hasOwnProperty('_id')) { _entryId = parseInt(entry._id); }
							break;

						case 'data_layer_specs':
							if(entry.hasOwnProperty('id')) { _entryId = parseInt(entry.id); }
							break;
					}
				}

				// If we detect an object as a value, crawl through it again
				if(typeof entry === 'object' && entry != null) {
					next = _crawlValues(entry);
					if(next) return next;
				}

				// NOTE: the tags model doesn't store data sources as datakeys, so we'll need to create it ourselves
				if(scopeType === 'tags') {
					if (obj.hasOwnProperty('map') && utui.util.sizeOf(obj.map) > 0 ) {
						for(var j in obj.map) {
							if(!obj.map.hasOwnProperty(j)) continue;

							// construct datakey
							dataKey = obj.map[j].type + '.' + obj.map[j].key;

							if(_isDataSourceNameSyntaxValid(dataKey)) {
								_storeScoping(dataKey);
							}
						}
					}
				} else if (scopeType === 'data_layer_specs' && obj.hasOwnProperty('data_sources')) {
					if (utui.util.sizeOf(obj.data_sources) > 0) {
						for (var j in obj.data_sources) {
							if (!obj.data_sources.hasOwnProperty(j)) continue;

							// construct datakey
							var dataKey = obj.data_sources[j].type + '.' + obj.data_sources[j].source;

							if (_isDataSourceNameSyntaxValid(dataKey)) {
								_storeScoping(dataKey);
							}
						}
					}
				} else if(_isDataSourceNameSyntaxValid(entry)) { 
					_storeScoping(entry);
				}
			}
		} // close _crawlValues function

		return _crawlValues(mapping);
	}

	//----------------------------------------------------
	function _getVADataSourceDisplayName (dataKey) {
		if (utui.define.importedVADefineMap && utui.define.importedVADefineMap[dataKey]) {
			return utui.define.importedVADefineMap[dataKey];
		}
		else if (dataKey && dataKey.indexOf('va') === 0) {
			// Audience Stream data source was deleted
			return null;
		}
		return dataKey;
	}

	//----------------------------------------------------
	function _getDataSource(ds, scopeType) {
		var bScope = false;
		var ds = _safeEscapeDataSource(ds);

		if(_scopeHash.indexOf(scopeType) > -1) {
			bScope = true;
		}

		if(typeof ds === 'string' && isNaN(ds)) {
			if(!_isExistingDataSource(ds)) return null;

			if(bScope) {
				return _data[ds][scopeType];
			}
			return _data[ds];
		}

		if(typeof ds === 'number' || !isNaN(ds)) {
			if($.isEmptyObject(utui.data.define[ds])) return null;

			var dataSource = utui.data.define[ds];
			var dataKey = dataSource.type + '.' + dataSource.name;
			if (dataSource.type === 'va') {
				dataKey = _getVADataKey(dataSource);
			}

			dataKey = utui.util.safeEscape(dataKey);

			if(bScope) {
				return _data[dataKey][scopeType];
			}
			return _data[dataKey];
		}

		return null;
	}


	//----------------------------------------------------
	// Is tag, extension, or load rule scoped to any data source
	function _isEntryScoped(entryType, scopeId) {
		if(isNaN(scopeId)) return null;

		for(var key in _data) {
			if(!_data.hasOwnProperty(key)) continue;

			key = _safeEscapeDataSource(key);

			if(_data[key][entryType].indexOf(parseInt(scopeId)) > -1) {
				return true;
			}

		}
		return false;
	}

	//----------------------------------------------------
	function _isDataSourceScoped(ds, scopeType) {
		var bScope = false,
			dataKey;

		if(ds === null) return null;

		ds = _safeEscapeDataSource(ds);

		// Check to see if we're passing a scope parameter, and if it's valid
		if(typeof scopeType === 'string') {
			if(_scopeHash.indexOf(scopeType) === -1) {
				return false;
			}
			bScope = true;
		}

		// constructs dataKey depending on type passed
		if(typeof ds === 'string' && isNaN(ds)) {
			if(!_isExistingDataSource(ds)) return null;
			dataKey = ds;
		}
		else if(typeof ds === 'number' || !isNaN(ds)) {
			if($.isEmptyObject(utui.data.define[ds])) {
				return null;
			}
			dataKey = utui.data.define[ds].type + '.' + utui.data.define[ds].name;
		}
		else {
			return null;
		}

		// Checks to see if data source is scoped by defined tag / loadrule / extension
		if(bScope) {
			if(_data[dataKey][scopeType] && _data[dataKey][scopeType].length > 0) {
				return true;
			}
			return false;
		}

		// Checks to see if data source is scoped by any tag / loadrule / extension
		for(var prop in _data[dataKey]) {
			if(!_data[dataKey].hasOwnProperty(prop)) continue;

			if(_scopeHash.indexOf(prop) > -1 && _data[dataKey][prop].length > 0) {
				return true;
			}
		}

		return false;
	}

	//----------------------------------------------------
	function _isExistingDataSource(ds) {
		return _data.hasOwnProperty(ds);
	}

	//----------------------------------------------------
	function _isDataSourceNameSyntaxValid(ds) {
		if(typeof ds !== 'string') return false;

		for (var i = _prefixHash.length - 1; i >= 0; i--) {
			if(ds.indexOf(_prefixHash[i]) === 0) {
				return true;
			}
		}
		return false;
	}

	//----------------------------------------------------
	function _addBundleToExistingDataSource(dataKey, bundleObj) {
		var existingDataSource = utui.data.define[_data[dataKey].id];

		// If a bundle already exists
		if(!$.isEmptyObject(existingDataSource.bundleObj)) {

			// Iterate through the bundles
			for (var i = 0; i < existingDataSource.bundleObj.length; i++) {

				// If collection doesn't exists, push in new bundle
				if(existingDataSource.bundle[i]._collection !== bundleObj._collection) {
					// push in new bundle object
					utui.data.define[_data[dataKey].id].bundle = bundleObj;
				}
			};
		}
		// If bundle doesn't exist, add it
		else {
			utui.data.define[_data[dataKey].id].bundle = bundleObj;
		}
	}
	//----------------------------------------------------
	function _addDataSource(id, title, name, type, desc, imported, settings, context, bundleObj, propertiesObj) {
		var dataKey = _safeEscapeDataSource(type + '.' + name),
			newObj,
			dataObj;

		// Validation 1: Is this a valid datasource?
		if(!_isDataSourceNameSyntaxValid(dataKey)) {
			return false;
		}

		// Validation 2: Is this an existing data source?
		if(_isExistingDataSource(dataKey)) {

			// If we're passing in a bundle param, apply it to existing data source
			if(!$.isEmptyObject(bundleObj)) {
				_addBundleToExistingDataSource(dataKey, bundleObj);
			}

			return false;
		}

		// We've passed all tests.  Now construct and store data source.
		newObj = new DataSource(title, name, type, desc, id, imported, settings, context);

		// Store data in our scoping object
		_data[dataKey] = newObj;

		dataObj = {
			_id: id,
			description: desc,
			title: title,
			name: _safeEscapeDataSource(name),
			type: type,
			imported: imported,
			settings: settings
		};

		// Merge additional prop into new object
		if(!$.isEmptyObject(propertiesObj)) {
			dataObj = $.extend(dataObj, propertiesObj);
		}

		if(!$.isEmptyObject(bundleObj)) {
			dataObj['bundle'] = bundleObj;
		}

		// Store data in profiledata object
		utui.data.define[id] = dataObj;

		if (imported) {
			_publishDataSourceAddedEvent(newObj);
		}

		return true;
	}

	//----------------------------------------------------
	// TODO: detach any operation off this call that doesn't have to do with manipulating the object directly
	function _removeDataSource(name, type) {
		var dataKey = name;

		// If 'name' is a not a dataKey (i.e. js_page.product_sku)
		if(!_isDataSourceNameSyntaxValid(dataKey)) {
			if(type === null) return false;

			dataKey = type + '.' + name;
		}

		dataKey = _safeEscapeDataSource(dataKey);

		// If this datasource does not exist, break operation.
		if(!_isExistingDataSource(dataKey)) return false;

		var ds = _data[dataKey];
		var id = ds.id;

		delete _data[dataKey];
		delete utui.data.define[id];

		return true;
	}

	//----------------------------------------------------
	function _updateDataSource(oldObj, newObj, id) {

		//If the ID doesn't exists, halt operation
		if (typeof utui.data.define[id] === "undefined") return false;

		function isProperDataSourceObject(obj) {
			if (typeof obj !== 'object') return false;

			var params = ['title', 'name', 'type', 'desc'];

			for (var i = params.length - 1; i >= 0; i--) {
				if (!obj.hasOwnProperty(params[i])) return false;
			}

			return true;
		}

		// If passed objects are incomplete, halt operation
		if (!isProperDataSourceObject(oldObj) && !isProperDataSourceObject(newObj)) {
			return false;
		}

		var oldDataKey = _safeEscapeDataSource(oldObj.type + '.' + oldObj.name),
			newDataKey = _safeEscapeDataSource(newObj.type + '.' + newObj.name),
			newDataObject = {
				title: newObj.title,
				name: utui.util.safeEscape(newObj.name),
				type: newObj.type,
				description: newObj.desc
			};

		// Update Data Model
		utui.data.define[id] = $.extend(utui.data.define[id], newDataObject);

		if(oldDataKey !== newDataKey) {
			delete utui.data.define[id].bundle;
		}

		// Extend mapping model
		var tempData = _data[oldDataKey];


		// Remove old mapping model
		delete _data[oldDataKey];

		_data[newDataKey] = $.extend(tempData, newDataObject);


		// Record changes in history
		utui.profile.setActionPerformed({
			action: utui.constants.variables.UPDATED,
			data: {
				id: id,
				name: newObj.name,
				type: newObj.type,
				kind: utui.constants.variables.TYPE,
				operation: utui.constants.operation.UPDATED,
				container: 'defineObjectsList'
			}
		}, true);

		// Proceed with update
		utui.util.pubsub.publish(utui.constants.variables.UPDATED, oldDataKey, newDataKey);

		return true;
	}

	//----------------------------------------------------
	function _getDataSourceByOriginId(inheritedProfileName, originId) {
		var dataObj, settingsObj;

		for(var i in utui.data.define) {
			if(!utui.data.define.hasOwnProperty(i)) continue;

			dataObj = utui.data.define[i];

			if(dataObj
				&& dataObj.settings
				&& dataObj.settings.profileid === inheritedProfileName
				&& dataObj.settings.origin_id == originId) {
					return dataObj;
			}
		}
		return null;
	}

	//----------------------------------------------------
	function _updateMappings() {
		_getMappingFromScope(utui.data.customizations, 'extensions');
		_getMappingFromScope(utui.data.loadrules, 'loadrules');
		_getMappingFromScope(utui.data.manage, 'tags');
		_getMappingFromScope(utui.define.dataLayerSpecs.getCurrentDataLayerSpecs(), 'data_layer_specs');
	}

	//----------------------------------------------------
	function _init() {
		_initDataObject();
		_initDOMDataObject();
		_updateMappings();
		return _data;
	}

	//----------------------------------------------------
	function _getHighestId() {
		var id,
			highestId = 0,
			lastdefineid = +utui.data.settings.lastdefineid;

		for (var i in utui.data.define) {
			if(!utui.data.define.hasOwnProperty(i)) continue;

			var id = utui.data.define[i]._id;

			if (+id > highestId) {
				highestId = +id;
			}
		}
		// Rely on the lastdefineid to be the highestId
		if (lastdefineid > highestId) {
			highestId = lastdefineid;
		}

		// store into data.settings for other modular compatibility
		utui.data.settings.lastdefineid = highestId.toString();

		return highestId || 0;
	}

	//---------------------------------------------------
	function _getNextId() {
		var highestId = _getHighestId() + 1,
			lastdefineid = +utui.data.settings.lastdefineid;

		// Updated utui.data.settings.lastdefineid if new id is higher
		if (highestId > lastdefineid || !lastdefineid) {
			utui.data.settings.lastdefineid = highestId.toString();
		}

		return highestId;
	}

	// --------------------------------------------------
	function _publishDataSourceAddedEvent(dataObj) {
		utui.profile.setActionPerformed({
			action : utui.constants.variables.ADDED,
			data : {
				id : "" + dataObj.id,
				name : dataObj.name,
				type : dataObj.type || "",
				imported : dataObj.imported,
				library : (dataObj.imported) ? dataObj.settings.profileid : '',
				kind : utui.constants.variables.TYPE,
				operation : utui.constants.operation.ADDED,
				container : 'defineObjectsList'
			}
		}, true);
	}

	//---------------------------------------------------
	function _getDataSourceTypeIconByTypeValue(type) {
		switch (type) {
			case 'dom':
				return "<i class='pictonic icon-geo-cube badge dom'></i>";
			case 'js_page':
				return '<i class="pictonic icon-prog-js02 badge js_page"></i>';
			case 'js':
				return '<i class="pictonic icon-Layer_8 badge js"></i>';
			case 'meta':
				return '<i class="pictonic icon-file1-fav badge meta"></i>';
			case 'qp':
				return '<i class="pictonic icon-chart-pie-01 badge qp"></i>';
			case 'cp':
				return '<i class="pictonic icon-geo-quattro4 badge cp"></i>';
			case 'badges':
				return '<i class="icon-shield badge badges"></i>';
			case 'metrics':
				return '<i class="icon-bar-chart badge metrics"></i>';
			case 'properties':
				return '<i class="icon-cog icon badge properties"></i>';
			case 'flags':
				return '<i class="icon-flag badge flags"></i>';
			case 'dates':
				return '<i class="icon-calendar badge dates"></i>';
			case 'static.text':
			case 'static.js':
				return '<i class="icon-edit badge static"></i>';
			default:
				return "<i class='pictonic icon-tl-boltnut badge extension'></i>";
		}
	}



	//---------------------------------------------------
	function _isUtagInternalDS(dsName, dsType) {
		return (_.isString(_utagInternalDataSources[dsName]) && _utagInternalDataSources[dsName] == dsType);
	}

	//----------------------------------------------------
	var _cachedInputs;

	var _cachedAllDataSourceSelection;

	//---------------------------------------------------
	// PUBLIC
	//----------------------------------------------------
	var _public = {

		//----------------------------------------------------
		// Adds the new data source into profile data and data collection
		//
		// Usage:
		// addDataSource('cVar3', 'cp', "This is a cookie that was added...");
		//
		// @param (title) string - variable title
		// @param (name) string - variable name
		// @param (type) string - variable type (i.e. 'cp','js','js_page','meta','qp')
		// @param (desc) string - variable description (optional)
		addDataSource: _addDataSource,

		//----------------------------------------------------
		consts: _consts,

		//----------------------------------------------------
		domDataSources: _domDataSources,

		//----------------------------------------------------
		// Removes the data source from profile data and collection
		//
		// Usage:
		// removeDataSource('cp.cVar3');		// true
		// removeDataSource('cVar3', 'cp');		// true
		//
		// @param (name) string - variable name
		// @param (type) string - variable type (i.e. 'cp','js','js_page','meta','qp')
		removeDataSource: _removeDataSource,


		//----------------------------------------------------
		// Update That One Data Source
		//
		// @param (name) integer - new name
		// @param (type) integer - new type
		// @param (desc) integer - new description
		// @param (id) integer - the ID that we're updating
		updateDataSource: _updateDataSource,


		//----------------------------------------------------
		// Grabs all scoped IDs of the data source
		// NOTE: we can pass in either a data source ID or a data source name
		//
		// Usage:
		// getDataSource('cp.cp1')						// returns { extensions: [1, 2, 3], loadrules: [4, 5], tags: [], ... }
		// getDataSource('cp.cp1', 'loadrules')			// returns [4, 5]
		// getDataSource(7)								// returns { extensions: [1, 2, 3], loadrules: [4, 5], tags: [], ... }
		// getDataSource(7, 'loadrules')				// returns [4, 5]
		//
		// @param (dataKey) string || int - datasource identifier (prepended by datasource type + '.'; i.e. js_page.product_sku);
		// @param (dataKey) integer - the ID of the datasource
		// @param (scopeType) string - the scope type (i.e. 'loadrules','extensions','tags')
		getDataSource: _getDataSource,

		//----------------------------------------------------
		getVADataSourceDisplayName: _getVADataSourceDisplayName,

		//----------------------------------------------------
		getDataSourceFormattedName: _getDataSourceFormattedName,

		//----------------------------------------------------
		getDataSourceByOriginId: _getDataSourceByOriginId,

		//----------------------------------------------------
		getVADataKey: _getVADataKey,

		//----------------------------------------------------
		getTypeAlias: _getTypeAlias,

		//----------------------------------------------------
		// Checks to see if tag / loadrule / extension has any scoped data sources
		//
		// @param (scopeType) string - scope type "loadrule" | "extension" | "tag"
		// @param (scopeId) integer - id of scoped entry
		isEntryScoped: _isEntryScoped,

		//----------------------------------------------------
		// Checks to see if data source is scoped within UTUI
		//
		// Usage:
		// isDataSourceScoped('js_page.product_sku');					// true
		// isDataSourceScoped('js_page.product_sku', 'loadrules');		// false
		// isDataSourceScoped('js_page.product_sku', 'extensions');		// true
		// isDataSourceScoped('7');										// true
		// isDataSourceScoped('7', 'loadrules');						// false
		// isDataSourceScoped('7', 'extensions');						// true
		//
		// @param (dataKey) string || int - datasource identifier (prepended by datasource type + '.'; i.e. js_page.product_sku);
		// @param (dataKey) integer - the ID of the datasource
		// @param (scopeType) string - scope type "loadrule" | "extension" | "tag"
		// @param (scopeId) integer - scoped Id
		isDataSourceScoped: _isDataSourceScoped,

		//----------------------------------------------------
		isExistingDataSource: _isExistingDataSource,

		//----------------------------------------------------
		isValidDataSourceNameSyntax: _isDataSourceNameSyntaxValid,

		isAudienceStreamDataSource: function(dataObj) {
			return dataObj.imported && dataObj.imported === utui.profile.import.AUDIENCE_STREAM;
		},


		//----------------------------------------------------
		getHighestId: _getHighestId,

		//----------------------------------------------------
		getNextId: _getNextId,

		//----------------------------------------------------
		initialize: _init,

		//----------------------------------------------------
		// Presents compiled data
		getData: function() {
			return _data;
		},

		//----------------------------------------------------
		// Presents compiled data
		getInputs: function(bAllowASDates) {
			var variables = [];

			var getDOMVariables = function() {
				var _collection = [],
					definedItems = utui.util.getVars(utui.config.defItems,2);

				for(var i in definedItems){
					// _collection.push({ name: definedItems[i], value: i, type: 'dom' });
					_collection.push({ name: utui.config.defItems[i], value: i, type: 'dom' });
				}

				return _collection;
			};


			var getSortedDataSourcesArray = function() {
				var _temp = [],
					map = [],
					collection = [];

				// using an array to sort fields instead
				for(var key in utui.data.define) {
					_temp.push(utui.data.define[key]);
				}

				// temporary holder of position and sort-value
				map = _temp.map(function(e, i) {
					return { index: i, value: e['name'].toLowerCase() };
				})

				// sorting the map containing the reduced values
				map.sort(function(a, b) {
					return +(a.value > b.value) || +(a.value === b.value) - 1;
				});

				// container for the resulting order
				_collection = map.map(function(e){
					return _temp[e.index];
				});

				return _collection;
			};


			var getEvaluatedDataSources = function(dsCollection) {
				var _collection = [],
					hideType = false,
					dsObj, val, name, type;

				for(var key in dsCollection) {
					dsObj = dsCollection[key];

					name = (dsObj.title) ? utui.util.safeEscape(dsObj.title) : utui.util.safeEscape(dsObj.name);

					if(dsapi.isAudienceStreamDataSource(dsObj)) {
						val = dsObj.type + '.' + (dsObj.context !== 'visitor' ? dsObj.context + '.' : '') + dsObj.settings.origin_type + '.' + dsObj.settings.origin_id;
						type = dsObj.settings.origin_type; // If AudienceStream data source use origin_type instead of type
						hideType = (type === 'dates' && bAllowASDates ? false : true);
					}
					else {
						val = dsObj.type + '.' + utui.util.safeEscape(dsObj.name);
						type = dsObj.type;
						hideType = false;
					}

					// Remove audience stream date types
					if (!hideType) {
						_collection.push({ name: name, value: val, type: type });
					}
				};

				return _collection;
			};

			var getExtensionVariables = function() {
				var customizationOutputs = {},
					_collection = [];

				for(var i in utui.data.customizations){
					if(typeof utui.data.customizations[i].output != 'undefined'){
						var a = utui.data.customizations[i].output.split(',');
						for(var b=0;b<a.length;b++){
							if ( utui.define.isInvalidVariableName(a[b]) ) { continue; }
							customizationOutputs[a[b]] = utui.data.customizations[i].title;
						}
					}

				}

				for(var i in utui.util.getVars(customizationOutputs,2)){
					_collection.push({ name: i, value: i, type: (customizationOutputs[i] ? customizationOutputs[i] : "") });
				}

				return _collection;
			};

			var groupVariables = function(variables) {
				var optionType;

				// sort and group the options by type then sort
				// this will sort the groups in alphabetical order with items within groups in order too
				return _.groupBy(_.sortBy(variables, function (option) {
					optionType = option.type.toLowerCase();

					return (optionType === 'dom') ? -1 : optionType;
				}), 'type');
			};

			// ---------------------------------
			// Get DOM selection
			variables = variables.concat(getDOMVariables());

			// ---------------------------------
			// Get Data Sources & Enrichments
			variables = variables.concat(getEvaluatedDataSources(getSortedDataSourcesArray()));

			// ---------------------------------
			// Get Extension Variables
			variables = variables.concat(getExtensionVariables());

			// ---------------------------------
			// Return Grouped Variables
			return _cachedInputs = groupVariables(variables);
		},

		getAllDataSourceSelection:function() {
			var variables = new Array();

			for(var i in utui.util.getVars(utui.config.defItems,2)){
				variables.push({
					name: utui.config.defItems[i],
					value: i,
					type: 'dom'
				});
			}

			var sort = utui.util.getVars(utui.data.define,4,'name');
			for(var i in utui.util.getVars(sort,1)){
				var dsObj = sort[i];
				var val = dsObj.type + '.' + dsObj.name,
					name =  (dsObj.title) ? dsObj.title : dsObj.name,
					type = dsObj.type;

				// If AudienceStream data source use origin_type instead of type
				if(dsapi.isAudienceStreamDataSource(dsObj)) {
					val = dsObj.type + '.' + (dsObj.context !== 'visitor' ? dsObj.context + '.' : '') + dsObj.settings.origin_type + '.' + dsObj.settings.origin_id;
					type = dsObj.settings.origin_type;
				}

				// Remove audience stream date types
				variables.push({
					name: name,
					value: val,
					type: type
				});
			}


			var customizationOutputs = {};
			for(var i in utui.util.getVars(utui.data.customizations)){
				if(typeof utui.data.customizations[i].output != 'undefined'){
					var a = utui.data.customizations[i].output.split(',');
					for(var b=0;b<a.length;b++){
						if ( utui.define.isInvalidVariableName(a[b]) ) { continue; }
						customizationOutputs[a[b]] = utui.data.customizations[i].title;
					}
				}
			}

			for(var i in utui.util.getVars(customizationOutputs,2)){
				if (customizationOutputs[i]) {
					variables.push({
						name: i,
						value: i,
						type: customizationOutputs[i]
					});
				}
				else {
					variables.push({
						name: i,
						value: i,
						type: ""
					});
				}
			}

			// sort and group the options by type then sort
			// this will sort the groups in alphabetical order with items within groups in order too
			var groupedOptions = _.groupBy(_.sortBy(variables, function (option) {
				var optionType = option.type.toLowerCase();
				return (optionType === 'dom') ? -1 : optionType;
			}), 'type');

			return _cachedAllDataSourceSelection = groupedOptions;
		},

		//----------------------------------------------------
		// Presents compiled data
		isExistingGlobalVariable: function(passedVariable) {
			var variableCollection = _cachedAllDataSourceSelection || this.getAllDataSourceSelection(),
				entryCollection,
				entryObj;

			for(var key in variableCollection) {
				entryCollection = variableCollection[key];

				for (var i = entryCollection.length - 1; i >= 0; i--) {
					entryObj = entryCollection[i];

					// if(entryObj.value === utui.util.safeEscape(passedVariable)) {
					if(utui.util.safeEscape(entryObj.value) === utui.util.safeEscape(passedVariable)) {
						return true;
					}
				};
			}

			return false;
		},

		//----------------------------------------------------
		publishDataSourceAddedEvent: _publishDataSourceAddedEvent,

		//----------------------------------------------------
		/*
		 * utui.loadrules.view.js
		 *
		 * variable select list data source type names for optgroup
		 */
		getDataSourceTypeName: function (type) {
			switch (type) {
				case 'dom':
					return localize.t('tiq.datasources.device_variable');
				case 'js_page':
					return localize.t('tiq.datasources.javascript_variable');
				case 'js':
					return localize.t('tiq.datasources.udo_variable');
				case 'meta':
					return localize.t('tiq.datasources.meta_data_element');
				case 'qp':
					return localize.t('tiq.datasources.querystring_parameter');
				case 'cp':
					return localize.t('tiq.datasources.first_party_cookie');
				case 'badges':
					return localize.t('tiq.datasources.badge');
				case 'metrics':
					return localize.t('tiq.datasources.metric');
				case 'properties':
					return localize.t('tiq.datasources.property');
				case 'flags':
					return localize.t('tiq.datasources.flag');
				case 'dates':
					return localize.t('tiq.datasources.date');
				default:
					return type;
			}
		},

		//----------------------------------------------------
		// variable select list data source type icons for options
		getDataSourceTypeIcon: function (option) {
			var optionText = utui.util.safeEscape(option.text);
			if (!option.id) return optionText; // optgroup

			var optionType = $(option.element).data('type');
			var dsObj = dsapi.getDataSource(option.id);
			var v = _getDataSourceTypeIconByTypeValue(optionType) + " ";

			if (!$.isEmptyObject(dsObj)) {
				if (dsObj.type === 'va') {
					v += optionText;
					v += '<div class="emptySection">' + utui.profile.import.AUDIENCE_STREAM + '</div>';
				} else {
					v += '<span class="ds-name">' + utui.util.safeEscape(dsObj.name) + '</span>';
					v += '<div ' + (!dsObj.title ? 'class="emptySection"' : '') + '>' + optionText + '</div>';
				}
			} else {
				v += optionText;
			}
			return v;
		},

		//----------------------------------------------------
		getDataSourceTypeIconByTypeValue: _getDataSourceTypeIconByTypeValue,

		//----------------------------------------------------
		// variable select list footer
		appendFooterContent: function (el,showCustomValueBtn,parentContainer) {
		  if (el) {
				var listType = $(el).attr('data-list-type'),
					$select2list = $('#select2-drop');
				if (!$select2list.find('.variable_dropdown_footer').length) {
					$select2list.append('<div class="variable_dropdown_footer">' +
						'<a href="#" onclick="return dsapi.addNewDataSourceOption(\''+el.id+'\', \''+listType+'\');" class="btn btn-success confirm-subscription" id="'+el.id+'_add_datasource_btn" role="button">' +
            '<i class="icon-plus"></i> ' + localize.t('tiq.datasources.add_data_source') + ' </a>' +
            (parentContainer ? '<a href="#" onclick="return utui.manage.addMapping(\''+parentContainer+'\', \'\', true, true, true);" class="btn" id="'+el.id+'_add_datasource_btn" role="button" style="margin-left: 3px;">' + localize.t('tiq.datasources.use_custom_value') + ' </a>' : '') +
            '<a class="btn pull-right" id="'+el.id+'_browse_datasource_btn" title="' + localize.t('tiq.datasources.browse') + '" href="#" onclick="dsapi.viewModal(\''+el.id+'\', \''+listType+'\'); return false;">' +
            '<i class="icon-external-link"></i></a></div>');
				}
			}
		},

		//----------------------------------------------------
		// appends new data source to select lists and sets selected value for given select list
		addNewDataSourceOption: function (listID, listType) {
			var $select2list = $('#' + listID),
				type = _selectListType[listType] || '';
			$select2list.select2('close');

			utui.define.showAddMore('newvariable', type, '', '', function ($select2list) {
				return function (isValid) {

					if (isValid) {
						var lastAddedVars = utui.define.lastAdded;

						for (var i in utui.util.getVars(lastAddedVars, 1)) {

							var id = '',
								name = lastAddedVars[i].name,
								type = lastAddedVars[i].type,
								value = type + '.' + name,
								$selectLists = $('.variableSelect optgroup[data-type="' + type + '"]'),
								dsObj = dsapi.getDataSource(value);

							if (dsObj && typeof dsObj.title !== 'undefined') {
								id = dsObj.id;
							}

							if ($selectLists.length !== 0) {
								// append to all variable select lists that are in scope
								$selectLists.append($('<option/>')
									.text(name)
									.val(value)
									.attr({'data-type': type, 'data-define': id})[0].outerHTML);
							} else {
								// append the group
								var $group = $('<optgroup/>', {
										'label': dsapi.getDataSourceTypeName(type),
											'data-type': type}).appendTo($('.variableSelect').not('.select2-container'));

								// append the option
								$group.append($('<option/>')
										.text(name)
										.val(value)
										.attr({'data-type': type, 'data-define': id})[0].outerHTML);
							}

							// set selected value
							$select2list.select2('val', value);
						}
					}
				}
			}($select2list));
			$('.dialog-content-body').find('input:text:visible:first').focus();
			return false;
		},

		//----------------------------------------------------
		/*
		 * utui.loadrules.view.js
		 *
		 * variable select list select2 style
		 */
		convertSelectListToSelect2: function(container, refresh, showCustomValueBtn, parentContainer) {
			if (!refresh) {
				$('#' + container).select2({
					placeholder: localize.t('tiq.datasources.select_a_datasource'),
					formatResult: dsapi.getDataSourceTypeIcon,
					matcher: function (term, text, option) {
						return text.toUpperCase().indexOf(term.toUpperCase()) >= 0 || option.val().toUpperCase().indexOf(term.toUpperCase()) >= 0;
					}
				}).safeOn('select2-open', function () {
						dsapi.appendFooterContent(this,showCustomValueBtn,parentContainer);
					});
			} else {
				$('#' + container).select2({
					placeholder: localize.t('tiq.datasources.select_a_datasource'),
					formatResult: dsapi.getDataSourceTypeIcon,
					matcher: function (term, text, option) {
						return text.toUpperCase().indexOf(term.toUpperCase()) >= 0 || option.val().toUpperCase().indexOf(term.toUpperCase()) >= 0;
					}
				})
			}
		},

		viewModal: function (listID, listType) {
			utui.define.showModalView(listID, listType);
		},

		//----------------------------------------------------
		getExpandedDataSourceCheckbox: function() {
			var $contextContainer = $('.tetrisExpandedView').find('.accordion-context-container'),
				key = $contextContainer.attr('data-key');

				return $('#label_select_checkbox_' + key);
		},

		safeEscapeDataKey: function(dataKey) {
			return _safeEscapeDataSource(dataKey);
		},

		isUtagInternalDS: function(dsName, dsType) {
			return (_isUtagInternalDS(dsName, dsType));
		}

	};
	return _public;
}();

// -----------------------------------------------------
// DataSources Tab
// -----------------------------------------------------
utui.define = function () {
	// -----------------------------------------------------
	// PRIVATE
	// -----------------------------------------------------
	var _invalidCharactersRegex = /[ `~!@#%^&*()|+\-=?;:,'"<>\{\}\\\/]/,
		_cookieInvalidCharactersRegex = /[ `~!@#%^&*()|+=?;:,'"<>\{\}\\\/]/,
		DEFAULT_FILTER = '',
		DEFAULT_VIEW = 'tile',
		DEFAULT_SORT = '',
		TRUNCATE_TITLE_ROW = 45,
		TRUNCATE_TITLE_TILE = 20,
		_namespace = 'dataSource',
		_setView = 'tile',
		_setCategoryFilter = '.viewItem',
		_invalidNameMsg = localize.t('tiq.datasources.error.invalid_name_msg'),
		_cookieInvalidNameMsg = localize.t('tiq.datasources.error.invalid_name_msg'),
		$content = $('#tabs-define'),
		$templateContext = $('#data_layer_context'),
		TAB_DATA_SOURCES = 'data_layer_data_sources',
		TAB_DATA_LAYER_SPECIFICATIONS = 'data_layer_data_layer_specifications',
		_selectedTab = TAB_DATA_SOURCES,
		$container = $('#defineObjectsList'),
		$header = $('#defineContainer_headerControls'),
		$menuLabelsSelect = $('#dataSources_labels_menu_list'),
		_listType = '', // only applies to modal display of data sources; important for loadrule lists because audiencestream dates types should not be included in the list.
		_metaNameHint = localize.t('tiq.datasources.error.meta_name_hint'),
		_nameHint = _metaNameHint + ' ' + localize.t('tiq.datasources.error.name_hint'),
		_cookieNameHint = _metaNameHint + ' ' + localize.t('tiq.datasources.error.meta_name_hint'),
		_duplicateNameError = localize.t('tiq.datasources.error.duplicate_name_error') + '<br/>',
		_constants = {
			CP: 'cp',
			JS: 'js',
			JS_PAGE: 'js_page',
			META: 'meta',
			QP: 'qp',
			VA: 'va'
		};


	// --------------------------------------------------
	// Library calls (tetris)
	var _tetris = {
		// --------------------------------------------------
		render: function() {
			return _tetris.updateLayout();
		},

		// --------------------------------------------------
		updateLayout: function() {
			var isModal = _isModal();

			if (!isModal) {
				$container.tetris('.viewItem').updateLayout();
			} else {
				$('#modal_define').tetris('.viewItem').updateLayout();
			}
		},

		// --------------------------------------------------
		removeExpandedView: function(doNotUpdateLayout) {
			if(doNotUpdateLayout) {
				return $container.tetris('.viewItem').removeExpandedView(true);
			}
			return $container.tetris('.viewItem').removeExpandedView();
		},

		// --------------------------------------------------
		attachExpandedView: function(elIndex, $detailsView) {
			$container.tetris('.viewItem').attachExpandedView(elIndex, $detailsView);
		},

		// --------------------------------------------------
		showExpandedView: function(extId) {
			// If the extensionId is not passed in then we will refresh the expanded container
			if (!extId) {
				extId = $('.tetrisExpandedView').find('.accordion-context-container').attr('data-key');
			}

			if (extId) {
				// Global remove selected class on elements...
				$('.viewItem')
					.removeClass('selected')
					.addClass('not-selected');

				// Set Accordion contents and trigger selection
				var innerView = _view.accordionContent(extId),
					$accordion = $('<div />', { class : 'accordionDetails' }).html(innerView),
					$element = $('.viewItem[data-tile-key="'+extId+'"]'),
					elIndex = $element.index('.viewItem:visible');

				$element
					.removeClass('not-selected')
					.addClass('selected');

				_tetris.removeExpandedView(true);
				_tetris.attachExpandedView(elIndex, $accordion);
				_bindUI.removeLabelBtn();
				_bindUI.accordionScopedItemLinks();

				var $labelSelect = $('#' + _namespace + '_labels_select_' + extId);
				utui.labels.labelsSelectBtn().render(utui.config.tabList.define.tab, $container, $labelSelect, $accordion);
			}
		}
	}

	// --------------------------------------------------
	// View Templates
	var _view = {
		filterItem: function(type, title, iconClass, iconSpanClass) {
			var isModal = _isModal(),
				filterId = (!isModal) ? 'filter_' : 'modal_filter_',
				v = '';

				if(type === 'divider'){
					var c = '';
					// c += '<li class="divider"></li>';
					c += '<li class="filterSectionHeaderTitle">' + localize.t('tiq.datasources.types') + '</li>';
					return c;
				}

				v += '<li data-filter-id="'+type+'">';
					v += '<label for="' + filterId + type + '">';
						v += '<input type="checkbox" value=".'+type+'" id="' + filterId + type + '" />';

						if(iconClass || iconSpanClass) {
							v += '<div class="badge badge-icon '+type+'">';
								if(iconClass) {
									v += '<span class="pictonic '+iconClass+'"></span>';
								} else {
									v += '<span class="'+iconSpanClass+'"></span>';
								}
							v += '</div>';
						}

						v += '<div class="js-define-qty sce-count pull-right">0</div>';
						v += '<div class="filter-title-container">'+title+'</div>';
					v += '</label>';
				v += '</li>';

			return v;
		},
		filterLabelItem: function (labelId, labelName, iconClass) {
			var isModal = _isModal(),
				filterId = (!isModal) ? 'label_filter_' : 'modal_label_filter_',
				v = '';

			v += '<li data-filter-id="' + labelId + '">';
			v += '  <label for="' + filterId + labelId + '">';
			v += '      <input type="checkbox" value=".label_' + labelId + '" id="' + filterId + labelId + '" />';

			v += '      <span class="color ' + utui.util.safeEscape(iconClass) + '">';
			v += '          <i class="icon-folder-close"></i>' + (utui.labels.getLabelSecurityById(labelId) ? '<i class="icon-lock"></i>' : '');
			v += '      </span>';

			v += '      <div class="js-define-qty sce-count pull-right">0</div>';
			v += '      <div class="filter-title-container ellipsis" title="' + utui.util.safeEscape(labelName) + '">' + utui.util.safeEscape(labelName) + '</div>';
			v += '  </label>';
			v += '</li>';

			return v;
		},
		// --------------------------------------------------
		element : function(title, name, type, desc, id, i, imported, settings, labels, labelsExpanded) {
			var importType;
			var typeLabel = _getDataSourceTypeName(type);
			var typeIcon = _view.dataSourceIcon(type);
			var importSource = '';
			var importEnv = '';
			var desc = desc || '';
			var v = '';
			var truncateTitleSize;
			var labelSelectors = '';
			var expandedClass = utui.labels.helper.getLabelExpandedClass(labelsExpanded);

			var isDomVar = (function(id) { 
				if (typeof id === 'string') {
					return (id.indexOf(dsapi.consts.dom.DOMID) === 0) 
				} else {
					return false;
				}
			})(id);

			if (labels) {
				var labelsArray = labels.split(',');
				for (var i = 0; i < labelsArray.length; i++) {
					labelSelectors += ' label_' + labelsArray[i];
				}
			}

			if (_setView === 'row') {
				type += ' ds-row';
				truncateTitleSize = TRUNCATE_TITLE_ROW;
			} else {
				type += ' ds-tile';
				truncateTitleSize = TRUNCATE_TITLE_TILE;
			}

			v += '<div id="datasources_' + id + '" data-title="' + utui.util.safeEscape(name) + '" class="viewItem ' + type + labelSelectors + '" data-category="' + type + '" data-tile-key="' + id + '">';

			if (!imported && !isDomVar) {
				v += '  <input type="checkbox" id="label_select_checkbox_' + id + '" name="label_select_checkbox" value="' + id + '" class="label_select_checkbox" '+(!utui.labels.canUserModify(labels) ? 'disabled="disabled"' : '')+'>';
			}

			v += '  <div class="viewItem-inner">';

			v += '      <div class="ico">' + typeIcon + '</div>';

			if (imported !== utui.profile.import.AUDIENCE_STREAM && !isDomVar) {
				v += '      <div class="container_name ellipsis">';
				v += '          <span class="name" title="' + utui.util.safeEscape(name) + '">'+ utui.util.safeEscape(name) + '</span>';
				v += '      </div>';
				if (!title) {
					v += '      <div class="container_title ellipsis">';
					v += '          <span class="title emptySection" title="' + utui.util.safeEscape(name) + '">'+ utui.util.safeEscape(name) + '</span>';
					v += '      </div>';
				} else {
					v += '      <div class="container_title ellipsis">';
					v += '          <span class="title" title="' + utui.util.safeEscape(title) + '">'+ utui.util.safeEscape(utui.util.truncate(title, truncateTitleSize)) + '</span>';
					v += '      </div>';
				}
			} else if (isDomVar) { // show title for DOM data sources so visually consistent with audience stream data sources
				v += '      <div class="container_name ds-enrichment ellipsis">';
				v += '          <span class="name emptySection" title="' + utui.util.safeEscape(name) + '">'+ utui.util.safeEscape(name) + '</span>';
				v += '      </div>';

				v += '      <div class="container_title ellipsis">';
				v += '          <span class="title" title="' + utui.util.safeEscape(title) + '">'+ utui.util.safeEscape(utui.util.truncate(title, truncateTitleSize)) + '</span>';
				v += '      </div>';
			} else {
				v += '      <div class="container_name ds-enrichment ellipsis">';
				v += '          <span class="name emptySection" title="' + utui.util.safeEscape(imported) + '">'+ utui.util.safeEscape(imported) + '</span>';
				v += '      </div>';

				v += '      <div class="container_title ellipsis">';
				v += '          <span class="title" title="' + utui.util.safeEscape(name) + '">'+ utui.util.safeEscape(utui.util.truncate(name, truncateTitleSize)) + '</span>';
				v += '      </div>';
			}

			if (!imported) {
				v += '      <div class="container_label ' + expandedClass + '" data-uid="' + id + '" data-type="' + utui.define.id + '">';
				v += utui.labels.labelsView.getLabelContent(labels, utui.define.id);
				v += '      </div>';
			}

			if (imported) {
				if (imported !== utui.profile.import.AUDIENCE_STREAM) {
					var isRequiredLibrary = typeof utui.profile.import._requiredLibraries[settings.profileid] !== 'undefined',
						importEnv = '       <span class="env_alias_' + imported + '">' + utui.targets.aliasDisplayName(imported) + '</span>';

					if (isRequiredLibrary) {
						importType = 'profileTypeLibraryRequired';
					} else {
						importType = 'profileTypeLibraryOptional';
					}
					importSource = settings.profileid;
				}
				else {
					importType = 'profileTypeAudienceStream';
					importSource = imported;
					importEnv = settings.profileid;
				}

				v += '      <div class="import label libraryLabel ' + importType + '">';
				v += '          <span class="labelIcon"></span><span>' + importSource + ' (' + importEnv + ')</span>';
				v += '      </div>';
			}
			v += '      <div class="desc ellipsis">' + utui.util.safeEscape(desc) + '</div>';
			v += '      <div class="type">' + typeLabel + '</div>';

			v += '      <div class="mapping-container">';
			v += '          <div class="mapping-item mapping-tag"><i class="icon-tag mapping-icon"></i><div class="tag">0</div></div>';
			v += '          <div class="mapping-item mapping-ext"><i class="icon-wrench mapping-icon"></i><div class="ext">0</div></div>';
			v += '          <div class="mapping-item mapping-lr"><i class="icon-book mapping-icon"></i><div class="lr">0</div></div>';
			v += '          <div class="mapping-item mapping-specs"><i class="icon-file-text-alt mapping-icon"></i><div class="specs">0</div></div>';
			v += '      </div>';
			v += '  </div>';
			v += '</div>';

			return v;
		},

		// --------------------------------------------------
		accordionContent: function (keyNum) {
			if (keyNum === undefined) return localize.t('tiq.datasources.no_key_defined');

			var dataObj,
				domId = "", 
				bIsDomId = false;

			if (typeof keyNum === 'string' && keyNum.indexOf(dsapi.consts.dom.DOMID) === 0) {
				bIsDomId = true;
				domId = keyNum.slice(dsapi.consts.dom.DOMID_LENGTH, keyNum.length);
			}

			if (!bIsDomId) {
				dataObj = dsapi.getDataSource(keyNum);
				if (!dataObj) {
					return;
				}
			} else {
				dataObj = dsapi.domDataSources[parseInt(domId)]
			}

			var isImported = dataObj.imported,
				importType = '',
				importSource = '',
				importEnv = '',
				uid,
				title = utui.util.safeEscape(dataObj.title),
				name = utui.util.safeEscape(dataObj.name),
				type = utui.config.defineOptions[dataObj.type] || '',
				description = utui.util.safeEscape(dataObj.description),
				labels,
				v = '',
				canModify;

			if (bIsDomId) {
				title = ''; // set DOM data source title to empty string for visual consistency purposes with Audience Stream data source accordion content
				canModify = false;
				type = localize.t('tiq.datasources.dom_variable');
			} else {
				uid = dataObj.id;
				labels = utui.data.define[uid].labels;
				canModify = utui.labels.canUserModify(labels);
			}

			v += '<div class="accordion-context-container" style="min-height:200px;" data-key="' + keyNum + '">';
			v += '  <div class="contextActionButtons">';
			v += '      <a href="#" class="viewItem-delete btn btn-small i-color-delete' + (isImported || !canModify ? ' ui-state-disabled' : '') + '"><i class="icon-trash"></i> ' + localize.t('tiq.datasources.delete') + '</a>';
			v += '  </div>';


			v += '  <div class="contextSectionWrapper contextHelp"> ';
			v += '      <div class="contextSectionHeader">' + localize.t('tiq.datasources.notes') + '</div>';
			v += '      <div class="contextSectionContent">';
			v += '          <div class="contextSectionInfo contextDescription">' + utui.util.safeEscape(dataObj.description) + '</div>';

			// TODO: mco clean-up
			if (isImported) {
				if (isImported !== utui.profile.import.AUDIENCE_STREAM) {
					var isRequiredLibrary = typeof utui.profile.import._requiredLibraries[dataObj.settings.profileid] !== 'undefined',
						importEnv = '<span class="env_alias_' + isImported + '">' + utui.targets.aliasDisplayName(isImported) + '</span>';

					if (isRequiredLibrary) {
						importType = 'profileTypeLibraryRequired';
					} else {
						importType = 'profileTypeLibraryOptional';
					}
					importSource = dataObj.settings.profileid;
				}
				else {
					importType = 'profileTypeAudienceStream';
					importSource = isImported;
					importEnv = dataObj.settings.profileid;
				}
			}

			var bIsImportedAudienceStream = isImported && isImported === utui.profile.import.AUDIENCE_STREAM;
			if (bIsImportedAudienceStream) {
				uid = dataObj.settings.origin_id;
			}

			// do not display UID for dom data sources (since it is meaningless outside of front end context)
			if (!bIsDomId) {
				v += '          <div class="contextSectionHeader">' + localize.t('tiq.datasources.uid') + ' ';
				v += '              <div class="contextSectionInfo contextSectionUID">' + uid + '</div>';
			}

			v += '          </div>';

			if (!isImported && !bIsDomId) {
				v += '          <div class="contextSectionHeader labels js-labels-container">' + localize.t('tiq.datasources.labels') + ' ';
				v += '              <div class="labels_select_wrapper">';
				v += '                  <select id="' + _namespace + '_labels_select_' + keyNum + '" data-list-type="single"></select>';
				v += '              </div>';
				v += '          </div>';
			}

			if (!bIsDomId && !bIsImportedAudienceStream) {
				v += utui.labels.labelsView.getAccordionLabelContent(labels);
			}

			v += '      </div>';
			v += '  </div>';

			v += '</div>';
			v += '<div class="accordion-content-container">';
			v += '  <div class="main-container">';
			if (isImported) {
				var importSourceSpan = '<span class="output-variable-item">' + importSource + '</span>';
				v += '      <div class="main-header bg-info">';
				v += '          <div class="section-padded text-center">' + localize.t('tiq.datasources.this_is_an_imported' + (isImported !== utui.profile.import.AUDIENCE_STREAM ? '_library' : ''), {source:importSourceSpan}) + '</div>';
				v += '      </div>';
			} else if (!canModify && !bIsDomId) {
				v += '      <div class="main-header bg-info">';
				v += '          <div class="section-padded text-center">' + localize.t('tiq.datasources.you_cannot_modify_this_datasouce') + '</div>';
				v += '      </div>';
			} else if (bIsDomId) {
				v += '      <div class="main-header bg-info">';
				v += '          <div class="section-padded text-center">' + localize.t('tiq.datasources.dom_cannot_modify') + '</div>';
				v += '      </div>';
			} 
			v += '      <div class="main-body container-fluid">';
			v += '          <div class="row-fluid">';
			v += '              <div class="span12">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleText">' + localize.t('tiq.datasources.datasource_configuration') + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" class="viewItem-edit btn btn-small i-color-edit' + (isImported || !canModify ? ' ui-state-disabled' : '') + '" data-key="' + keyNum + '"><i class="icon-edit"></i> ' + localize.t('tiq.datasources.edit') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div class="contentBlockTitle">' + localize.t('tiq.datasources.settings') + '</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.source') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue name ellipsis" title="' + name + '">' + name + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.type') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue type ellipsis" title="' + type + '">' + type + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.alias') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue title ellipsis" title="' + title + '">' + title + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.notes') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue desc" title="' + description + '">' + description + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '      		</div>';
			v += '      	</div>';
			v += '      </div>';

			v += '      <div class="container-fluid">';
			v += '          <div class="row-fluid">';
			v += '              <div class="span12">' + _viewModel.mappingTables(keyNum) + '</div>';
			v += '          </div>';
			v += '      </div>';
			v += '  </div>';
			v += '</div>';

			return v;
		},

		filterResultItem: function(dataObj, isTitleMatch) {
			var dsName = isTitleMatch ? dataObj.title : dataObj.name,
				dsDesc = dataObj.description,
				dsType = dataObj.type,
				dsId = dataObj.id,
				typeLabel = _getDataSourceTypeName(dsType),
				v = '';

				if (dsType === dsapi.consts.dom.DOM) {
					dsId = dataObj._id;
				}

				v += '<div class="resultRow" data-id="'+dsId+'">';
					v += '<div class="contextName">'+utui.util.safeEscape(dsName)+'</div>';
					v += '<div class="contextLabel">'+typeLabel+'</div>';
					v += '<div class="contextDesc">'+utui.util.safeEscape(dsDesc)+'</div>';
				v += '</div>';

			return v;
		},

		filterNoResultsFound: function(usrInput) {
			var v = '';

				v += '<div class="resultRowNotFound">';
					v += localize.t('tiq.datasources.no_results_found_for', {input:usrInput}) + '</strong>';
				v += '</div>';

			return v;
		},

		// --------------------------------------------------
		noScopedItems: function() {
			var v = '';

				v += '<div class="mapping-notice-container">';
					v += '<div class="mapping-notice">' + localize.t('tiq.datasources.there_are_no_elements_scoped') + '</div>';
				v += '</div>';

			return v;
		},

		// --------------------------------------------------
		betterTogether: function () {
			var v = '',
				isSelfService = utui.account.isSelfService();

			v += '<div class="interestBlock">';
			v += '  <div class="interestHeader">';
			v += '      <span class="interestHeadline">' + localize.t('tiq.datasources.better_together') + '</span>';
			v += '  </div>';
			v += '  <div class="interestBody">';
			v += '      <div class="interestBodyImage">';
			v += '          <img src="img/splash_audience_stream.png">';
			v += '      </div>';
			v += '      <div class="interestBodyContent">';
			v += '          <div class="interestSubHeadline"></div>';
			v += '          <div class="interestBodyTextStrong">' + localize.t('tiq.datasources.attributes_defined_in_as') + '</div>';
			if (isSelfService) {
				v += '          <div class="interestBodyText">' + localize.t('tiq.datasources.learn_how_as_and_tealium_work') + '</div>';
				v += '          <a id="' + _namespace  + '_requestAudienceStream' + '" class="interestBodyRequest" href="#">' + localize.t('tiq.datasources.request_demo') + '</a>';
			} else {
				v += '          <div class="interestBodyText">' + localize.t('tiq.datasources.learn_more_about_how_as') + '</div>';
			}

			v += '          <div class="interestBodyResponse">' + localize.t('tiq.datasources.great_well_contact_you') + '</div>';
			v += '      </div>';
			v += '  </div>';
			v += '</div>';

			return v;
		},

		// --------------------------------------------------
		// Inner Accordion Table for scoping
		table: {
			// --------------------------------------------------
			tagHead: function(scopeTag) {
				var v = '';

					v += '<div class="row-fluid">';
						v += '<div class="span12">';
							v += '<div class="main-mapping-row-title"><i class="icon-tag"></i> Tags (' + scopeTag.length + ')</div>';
						v += '</div>';
					v += '</div>';
					v += '<div class="row-fluid">';
						v += '<div class="span2 mapping-row-title">' + localize.t('tiq.datasources.uid') + '</div>';
						v += '<div class="span4 mapping-row-title">' + localize.t('tiq.datasources.title') + '</div>';
						v += '<div class="span4 mapping-row-title">' + localize.t('tiq.datasources.name') + '</div>';
						v += '<div class="span2 mapping-row-title">' + localize.t('tiq.datasources.status') + '</div>';
					v += '</div>';

				return v;
			},

			// --------------------------------------------------
			tagRow: function (tagId, name, tag_name, status) {
				var v = '';

				v += '<div class="mapping-row row-fluid">';
				v += '<div class="span2">' + tagId;
				v += '	<a class="tag-link" href="#" data-key="' + tagId + '" data-type="' + utui.manage.id + '"><i class="icon-reply"></i></a>';
				v += '</div>';
				v += '<div class="span4">' + name + '</div>';
				v += '<div class="span4">' + tag_name + '</div>';
				v += '<div class="span2" style="text-transform:uppercase;">' + status + '</div>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------
			extHead: function(scopeExt) {
				var v = '';

					v += '<div class="row-fluid">';
						v += '<div class="span12">';
							v += '<div class="main-mapping-row-title"><i class="icon-wrench"></i> ' + localize.t('tiq.datasources.extensions_num', {num:' (' + scopeExt.length + ')'}) + '</div>';
						v += '</div>';
					v += '</div>';
					v += '<div class="row-fluid">';
						v += '<div class="span2 mapping-row-title">' + localize.t('tiq.datasources.uid') + '</div>';
						v += '<div class="span4 mapping-row-title">' + localize.t('tiq.datasources.title') + '</div>';
						v += '<div class="span4 mapping-row-title">' + localize.t('tiq.datasources.name') + '</div>';
						v += '<div class="span2 mapping-row-title">' + localize.t('tiq.datasources.status') + '</div>';
					v += '</div>';

				return v;
			},

			// --------------------------------------------------
			extRow: function (scopeId, name, ext_name, status, extId) {
				var v = '';

				v += '<div class="mapping-row row-fluid">';
				v += '<div class="span2">' + scopeId;
				v += '	<a class="extension-link" href="#" data-key="' + scopeId + '" data-type="' + utui.customizations.id + '"><i class="icon-reply"></i></a>';
				v += '</div>';
				v += '<div class="span4">' + name + '</div>';
				v += '<div class="span4">' + ext_name + '</div>';
				v += '<div class="span2" style="text-transform:uppercase;">' + status + '</div>';
				// v += '<div class="span1">'+extId+'</div>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------
			lrHead: function(scopeLoad) {
				var v = '';

					v += '<div class="row-fluid">';
						v += '<div class="span12">';
							v += '<div class="main-mapping-row-title"><i class="icon-book"></i> ' + localize.t('tiq.datasources.loadrules_num', {num:' (' + scopeLoad.length + ')'}) + '</div>';
						v += '</div>';
					v += '</div>';
					v += '<div class="row-fluid">';
						v += '<div class="span2 mapping-row-title">' + localize.t('tiq.datasources.uid') + '</div>';
						v += '<div class="span8 mapping-row-title">' + localize.t('tiq.datasources.title') + '</div>';
						v += '<div class="span2 mapping-row-title">' + localize.t('tiq.datasources.status') + '</div>';
					v += '</div>';

				return v;
			},

			// --------------------------------------------------
			lrRow: function (loadId, name, status) {
				var v = '';

				v += '<div class="mapping-row row-fluid">';
				v += '<div class="span2">' + loadId;
				v += '	<a class="loadrule-link" href="#" data-key="' + loadId + '" data-type="' + utui.loadrules.id + '"><i class="icon-reply"></i></a>';
				v += '</div>';
				v += '<div class="span8">' + name + '</div>';
				v += '<div class="span2" style="text-transform:uppercase;">' + status + '</div>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------
			specHead: function (scopeSpec) {
				var v = '';

				v += '<div class="row-fluid">';
				v += '<div class="span12">';
				v += '<div class="main-mapping-row-title"><i class="icon-file-text-alt"></i> ' + localize.t('tiq.datasources.specs_num', {num:' (' + scopeSpec.length + ')'}) + '</div>';
				v += '</div>';
				v += '</div>';
				v += '<div class="row-fluid">';
				v += '<div class="span2 mapping-row-title">' + localize.t('tiq.datasources.uid') + '</div>';
				v += '<div class="span10 mapping-row-title">' + localize.t('tiq.datasources.title') + '</div>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------
			specRow: function (specId, name) {
				var v = '';

				v += '<div class="mapping-row row-fluid">';
				v += '<div class="span2">' + specId;
				v += '	<a class="data-layer-spec-link" href="#" data-key="' + specId + '" data-type="' + utui.define.dataLayerSpecs.id + '"><i class="icon-reply"></i></a>';
				v += '</div>';
				v += '<div class="span10">' + name + '</div>';
				v += '</div>';

				return v;
			}
		},

		// --------------------------------------------------
		dataSourceIcon: function (type) {
			switch (type) {
				case 'js_page':
					return '<span class="pictonic icon-prog-js02"></span>';
					break;
				case 'js':
					return '<span class="pictonic icon-Layer_8"></span>';
					break;
				case 'meta':
					return '<span class="pictonic icon-file1-fav"></span>';
					break;
				case 'qp':
					return '<span class="pictonic icon-chart-pie-01"></span>';
					break;
				case 'cp':
					return '<span class="pictonic icon-geo-quattro4"></span>';
					break;
				case 'va':
					return '<span class="profileTypeAudienceStream"></span>';
					break;
				case 'dom':
					return '<span class="pictonic icon-geo-cube badge dom"></span>';
					break;
				default:
					return '<span class="pictonic icon-circle-star"></span>';
			}
		},

		// --------------------------------------------------
		dataSourceMappingItem: function (obj, namespace, missingIcon) {
			var ds_name = '';
			var ds_type = dsapi.getDataSourceTypeName(obj.type);
			var ds_alias = '';
			var dsObj = dsapi.getDataSource(obj.dsID);
			var classname = '';
			var description = utui.manage.getMappingVariableDescription(obj.key, obj.type);
			var v = '';

			var _getIcon = function (obj) {
				var type = obj.type;

				if (obj.type === 'va') {
					if (obj.key.split('.')[0] === 'current_visit') {
						type = obj.key.split('.')[1];
					} else {
						type = obj.key.split('.')[0];
					}
				}

				return dsapi.getDataSourceTypeIconByTypeValue(type);
			};

			// determine name and type
			if (obj.type === 'dom') {
				ds_name = utui.util.safeEscape(utui.config.defItems[obj.type + '.' + obj.key]);
			} else if (obj.type.indexOf('static.') === 0) {
				ds_name = localize.t("tiq.datasources.custom_value");
			} else if (obj.dsID && dsObj) {
				if (obj.type !== 'va') {
					classname = ' ds-name';
					ds_name = utui.util.safeEscape(dsObj.name);
					var dsTitle = dsObj.title;
					if (dsTitle) {
						ds_alias = localize.t('tiq.datasources.alias_title', {title: dsTitle});
					}
				} else {
					ds_name = utui.util.safeEscape(dsapi.getVADataSourceDisplayName(obj.type + '.' + obj.key));
					ds_type = utui.profile.import.AUDIENCE_STREAM + ' ' + utui.util.converter.getAudienceStreamTypeName(dsObj.settings.origin_type);
				}
			} else if (obj.type.indexOf('customization') === 0) {
				var extId = obj.type.substring(13);
				var extObj = utui.data.customizations[extId];

				if (!utui.profile.import.migrateImportExtensions[obj.type] && extObj && extObj.id === '100011') {
					ds_name = utui.util.safeEscape(extObj.output);
				}

				if (!$.isEmptyObject(extObj)) {
					var extType = (exapi.getTemplateObject(extObj.id).title || '');
					if (extType) {
						extType = '(' + extType + ')'
					}
					ds_type = localize.t('tiq.datasources.extension_variable', {type: extType});
				}
			}
			ds_name = (ds_name || utui.util.safeEscape(obj.key));

			v += '<div id="' + namespace + '_var_readonly" class="managemap_label_readonly" title="' + description + '">';
			v += '<span class="managemap_var_icon">' + (missingIcon || _getIcon(obj)) + '</span> ';
			v += '<div class="managemap_var_value' + classname + '" title="' + ds_name + '">' + ds_name + '</div>';
   
			if (ds_type) {
				if (ds_type.indexOf("static.") === 0) {
          v += '<div class="managemap_var_name managemap_var_name--grey" title="' + utui.util.safeEscape(obj.key) + '">' + utui.util.safeEscape(obj.key) + '</div>';
				} else {
          v += '<div class="managemap_var_name emptySection" title="' + ds_type + '">' + ds_type + '</div>';
				}
			}
			if (ds_alias) {
				v += '<div class="managemap_var_alias" title="' + ds_alias + '">' + ds_alias + '</div>';
			}
			v += '</div>';

			return v;
		}
	}

	// --------------------------------------------------
	var _viewModel = {

		// --------------------------------------------------
		setFilterQty: function () {
			var _data = dsapi.getData(),
				dataQty = {
					showall: 0,
					cp: 0,
					qp: 0,
					js: 0,
					js_page: 0,
					meta: 0,
					va: 0,
					dom: 0
				},
				isModal = _isModal(),
				$checkboxes = (!isModal) ? $('#ds_filter_checklist') : $('#modal_ds_filter_checklist');

			for (var i in dsapi.domDataSources) {
				if(!dsapi.domDataSources.hasOwnProperty(i)) continue;

				dataQty['dom'] += 1;
				dataQty['showall'] += 1;
			}

			for (var i in _data) {
				if (!_data.hasOwnProperty(i)) continue;

				if (i.indexOf('cp.') === 0) {
					dataQty['cp'] += 1;
				}
				if (i.indexOf('qp.') === 0) {
					dataQty['qp'] += 1;
				}
				if (i.indexOf('js.') === 0) {
					dataQty['js'] += 1;
				}
				if (i.indexOf('js_page.') === 0) {
					dataQty['js_page'] += 1;
				}
				if (i.indexOf('meta.') === 0) {
					dataQty['meta'] += 1;
				}
				if (i.indexOf('va.') === 0) {
					// remove dates from loadrule lists
					if (isModal && _listType === 'loadrules') {
						if (_data[i].settings.origin_type === 'dates') {
							continue;
						}
					}
					dataQty['va'] += 1;
				}

				dataQty['showall'] += 1;
			}

			for (var i in dataQty) {
				$checkboxes.find('li[data-filter-id="' + i + '"] .js-define-qty').html(dataQty[i]);
				if (dataQty[i] > 0) {
					$checkboxes.find('li[data-filter-id="' + i + '"] .js-define-qty').addClass('active');
				} else {
					$checkboxes.find('li[data-filter-id="' + i + '"] .js-define-qty').removeClass('active');
				}
			}

			// set label filter quantities
			_viewModel.setLabelFilterQty();
		},

		// --------------------------------------------------
		setLabelFilterQty: function () {
			var isModal = _isModal(),
				$view = (!isModal) ? $container : $('#modal_define'),
				$labelCheckboxes = (!isModal) ? $('#label_filter_checklist li') : $('#modal_label_filter_checklist li');

			$labelCheckboxes.each(function (e) {
				var labelSelector = 'label_' + $(this).attr('data-filter-id'),
					labelQty = $view.find('.' + labelSelector).length,
					$el = $(this).find('.js-define-qty');

				$el.html(labelQty);
				if (labelQty > 0) {
					$el.addClass('active');
				} else {
					$el.removeClass('active');
				}
			});
		},


		// --------------------------------------------------
		setFilters: function() {
			var isModal = _isModal(),
				$checkboxes = (!isModal) ? $('#ds_filter_checklist') : $('#modal_ds_filter_checklist');

			var filterTypes = [
				{
					type: 'showall',
					title: ' ' + localize.t('tiq.datasources.show_all'),
					iconClass: '',
					iconSpanClass: ''
				},
				{
					type: 'divider',
					title: ' ',
					iconClass: '',
					iconSpanClass: ''
				},
				{
					type: 'js',
					title: ' ' + localize.t('tiq.datasources.udo_variable'),
					iconClass: 'icon-Layer_8',
					iconSpanClass: ''
				},
				{
					type: 'qp',
					title: ' ' + localize.t('tiq.datasources.querystring_parameter'),
					iconClass: 'icon-chart-pie-01',
					iconSpanClass: ''
				},
				{
					type: 'cp',
					title: ' ' + localize.t('tiq.datasources.first_party_cookie'),
					iconClass: 'icon-geo-quattro4',
					iconSpanClass: ''
				},
				{
					type: 'js_page',
					title: ' ' + localize.t('tiq.datasources.javascript_variable'),
					iconClass: 'icon-prog-js02',
					iconSpanClass: ''
				},
				{
					type: 'meta',
					title: ' ' + localize.t('tiq.datasources.meta_data_element'),
					iconClass: 'icon-file1-fav',
					iconSpanClass: ''
				},
				{
					type: 'dom',
					title: ' ' + localize.t('tiq.datasources.dom_variable'),
					iconClass: 'icon-geo-cube',
					iconSpanClass: ''
				},
				{
					type: 'va',
					title: ' ' + localize.t('tiq.datasources.audiencestream_attribute'),
					iconClass: '',
					iconSpanClass: 'profileTypeAudienceStream'
				}
			],
			v = '';

			for(var i in filterTypes) {
				if(!filterTypes.hasOwnProperty(i)) continue;

				v += _view.filterItem( filterTypes[i].type , filterTypes[i].title , filterTypes[i].iconClass , filterTypes[i].iconSpanClass)
			}

			$checkboxes.html(v);
		},

		// --------------------------------------------------
		setLabelFilters: function () {
			var isModal = _isModal(),
				$checkboxes = (!isModal) ? $('#label_filter_checklist') : $('#modal_label_filter_checklist');
				labels = utui.labels.getLabels();
				v = '';
				var first_label = true;
			for (var i in labels) {
				if (first_label) {
					v += '<li class="filterSectionHeaderTitle">' + localize.t('tiq.datasources.labels') + '</li>';
					first_label = false;
				};
				var label = labels[i];
				if ($.type(label) !== 'object') {
					v += _view.filterLabelItem(i, label, utui.labels.getLabelColorById(i));
				} else {
					v += _view.filterLabelItem(i, label.name, label.color);
				}
			}

			$checkboxes.html(v);
		},

		// --------------------------------------------------
		// Scoping Logic
		scoping: {
			// --------------------------------------------------
			tags: function(scopeTag) {
				var dataMapping = utui.data.manage,
					v = '';

					v += '<div class="mapping-table container-fluid">';
						v += _view.table.tagHead(scopeTag);

					for (var i = 0; i < scopeTag.length; i++) {
						var tagId = scopeTag[i];

						if(dataMapping[tagId]) {
							var status = dataMapping[tagId].status,
								tag_id = dataMapping[tagId].tag_id,
								name = dataMapping[tagId].title,
								tag_name = utui.config.manageList[tag_id].title;

							v += _view.table.tagRow(tagId, utui.util.safeEscape(name), tag_name, status);
						} else {
							console.warn('PARSE ERROR: tag ID '+tagId+ ' does not match mapping!');
						}

					}

					v += '</div>';
				return v;
			},

			// --------------------------------------------------
			extensions: function(scopeExt) {
				var dataMapping = utui.data.customizations,
					v = '';

					v += '<div class="mapping-table container-fluid">';
						v += _view.table.extHead(scopeExt);

					for (var i = 0; i < scopeExt.length; i++) {

						var extId = scopeExt[i];

						if(dataMapping[extId]) {
							var status = dataMapping[extId].status,
								name = dataMapping[extId].title,
								ext_id = dataMapping[extId].id,
								ext_name = utui.config.customizationList[ext_id].title;

							v += _view.table.extRow(scopeExt[i], utui.util.safeEscape(name), ext_name, status, extId);

						} else {
							console.warn('PARSE ERROR: Extension ID '+extId+ ' does not match mapping!');
						}
					}

					v += '</div>';
				return v;
			},

			// --------------------------------------------------
			loadrules: function(scopeLoad) {
				var dataMapping = utui.data.loadrules,
					v = '';

					v += '<div class="mapping-table container-fluid">';
						v += _view.table.lrHead(scopeLoad);

					for (var i = 0; i < scopeLoad.length; i++) {

						var loadId = scopeLoad[i];

						if(dataMapping[loadId]) {
							var status = dataMapping[loadId].status,
								name = dataMapping[loadId].title;

							v += _view.table.lrRow(loadId, utui.util.safeEscape(name), status);

						} else {
							console.warn('PARSE ERROR: loadrule ID '+loadId+ ' does not match mapping!');
						}
					}

					v += '</div>';
				return v;
			},

			// --------------------------------------------------
			data_layer_specs: function (scopeSpec) {
				var dataMapping = utui.define.dataLayerSpecs.getCurrentDataLayerSpecs(),
					v = '';

				v += '<div class="mapping-table container-fluid">';
				v += _view.table.specHead(scopeSpec);

				for (var i = 0; i < scopeSpec.length; i++) {

					var specId = scopeSpec[i];

					if (dataMapping[specId]) {
						var name = dataMapping[specId].title;

						v += _view.table.specRow(specId, utui.util.safeEscape(name));

					} else {
						console.warn('PARSE ERROR: spec ID ' + specId + ' does not match mapping!');
					}
				}
				v += '</div>';

				return v;
			}
		},

		// --------------------------------------------------
		mappingTables: function(id) {

			var dataObj,
				domId, 
				bIsDomId = false;

			if (typeof id === 'string' && id.indexOf(dsapi.consts.dom.DOMID) === 0) {
				bIsDomId = true;
				domId = id.slice(dsapi.consts.dom.DOMID_LENGTH, id.length);
			}

			if (!bIsDomId) {
				dataObj = dsapi.getDataSource(id);
			} else {
				dataObj = dsapi.domDataSources[parseInt(domId)]
			}

			var	scopeTag = dataObj.tags,
				scopeLoad = dataObj.loadrules,
				scopeExt = dataObj.extensions,
				scopeSpec = dataObj.data_layer_specs,
				v = '';

			// If there are no elements scoped, return the notice
			if(scopeTag.length + scopeExt.length + scopeLoad.length + scopeSpec.length === 0) {
				v += _view.noScopedItems();
				return v;
			}

			v += '<div id="datasources_mapping_'+id+'" class="mapping-tabs-container">';

			if(scopeTag.length > 0) {
				v += this.scoping.tags(scopeTag);
			}

			if(scopeLoad.length > 0) {
				v += this.scoping.loadrules(scopeLoad);
			}

			if(scopeExt.length > 0) {
				v += this.scoping.extensions(scopeExt);
			}

			if(scopeSpec.length > 0) {
				v += this.scoping.data_layer_specs(scopeSpec);
			}

			v += '<div>';
			return v;
		},
		// --------------------------------------------------
		appendItems: function() {
			var v = '',
				labelsExpanded = utui.labels.helper.getLabelsExpandedForTab();

			// Converts object to an array (to allow ordered sorting)
			var dataArray = [];

			for (var key in utui.data.define) {
				if(!utui.data.define.hasOwnProperty(key)) continue;

				if (utui.data.define[key].type) {
                    if (utui.define.types[utui.data.define[key].type.toUpperCase()]) {
                        dataArray.push(utui.data.define[key]);
                    }
				}
			}
			
			var domNameArray = []; // use for purposes of three step swap of names to titles to names 

			for (var i in dsapi.domDataSources) {
				if(!dsapi.domDataSources.hasOwnProperty(i)) continue;

				var domDataSource = dsapi.domDataSources[i];
				domNameArray[dsapi.domDataSources[i]._id] = domDataSource.name;
				domDataSource.name = domDataSource.title; // set the name equal to the title for alphabetizing purposes in the sort below
				dataArray.push(dsapi.domDataSources[i]);
			}

			dataArray.sort(_dynamicSort(String('name')));

			for (var i = 0; i < dataArray.length; i++) {
				if (dataArray[i].type === dsapi.consts.dom.DOM && domNameArray[dataArray[i]._id]) {
					dataArray[i].name = domNameArray[dataArray[i]._id]; // now post-sorting, reset the name to the original value
				}
			}

			for (var i = 0; i < dataArray.length; i++) {
				var ds = dataArray[i],
				    title = ds.title,
				    name = ds.name,
				    type = ds.type,
				    desc = ds.description,
				    id = ds._id,
				    imported = ds.imported,
				    settings = ds.settings,
				    labels = ds.labels;

				v += _view.element(title, name, type, desc, id, i + 1, imported, settings, labels, labelsExpanded);
			};

			$container.html(v);

			// label hover menus
			_bindUI.labelHoverLists();
		},

		// --------------------------------------------------
		mappingCount: function() {
			var dataArray = [];

			for (var i in utui.data.define) {
				if(!utui.data.define.hasOwnProperty(i)) continue;

				dataArray.push(utui.data.define[i]);
			}

			for (var i in dsapi.domDataSources) {
				if(!dsapi.domDataSources.hasOwnProperty(i)) continue;

				dataArray.push(dsapi.domDataSources[i])
			}

			for (var i = 0; i < dataArray.length; i++) {
				var dataEntry = dataArray[i],
					map = {},
					extLength = 0,
					lrLength = 0,
					tagLength = 0,
					specLength = 0;

				if (dataEntry.type === dsapi.consts.dom.DOM) {
					map = dataEntry;
				} else {
					map = dsapi.getDataSource(dataEntry.type + '.' + dataEntry.name);
				}

				if (dataEntry.type === 'va') {
					var dataKey = '';
					if (dataEntry.context !== 'visitor') {
						dataKey = dataEntry.type + '.' + dataEntry.context + '.' + dataEntry.settings.origin_type + '.' + dataEntry.settings.origin_id;
					}
					else {
						dataKey = dataEntry.type + '.' + dataEntry.settings.origin_type + '.' + dataEntry.settings.origin_id;
					}
					map = dsapi.getDataSource(dataKey);
				}

				if (map) {
					if (map.extensions) {
						extLength = map.extensions.length;
					}
					if (map.loadrules) {
						lrLength = map.loadrules.length;
					}
					if (map.tags) {
						tagLength = map.tags.length;
					}
					if (map.data_layer_specs) {
						specLength = map.data_layer_specs.length;
					}
				}
				var $obj = $('.viewItem[data-tile-key="' + dataEntry._id + '"]');

				$obj.find('.tag').html(tagLength);
				if (tagLength === 0) {
					$obj.find('.mapping-tag').removeClass('mapping-active');
				} else {
					$obj.find('.mapping-tag').addClass('mapping-active');
				}


				$obj.find('.lr').html(lrLength);
				if (lrLength === 0) {
					$obj.find('.mapping-lr').removeClass('mapping-active');
				} else {
					$obj.find('.mapping-lr').addClass('mapping-active');
				}

				$obj.find('.ext').html(extLength);
				if (extLength === 0) {
					$obj.find('.mapping-ext').removeClass('mapping-active');
				} else {
					$obj.find('.mapping-ext').addClass('mapping-active');
				}

				$obj.find('.specs').html(specLength);
				if (specLength === 0) {
					$obj.find('.mapping-specs').removeClass('mapping-active');
				} else {
					$obj.find('.mapping-specs').addClass('mapping-active');
				}
			}
		},
		noItemsToShow: function() {
			var quantity = utui.util.sizeOf(dsapi.getData()),
				v = '';

			if (quantity == 0) {
				v += '<div class="noItemsToShow">';
				v += '  <span>' + localize.t('tiq.datasources.add_new_data_source') + '<span>';
				v += '  <i class="icon-hand-up"></i>';
				v += '</div>';
				$('#defineContainer_noItems').html(v)
			} else {
				$('#defineContainer_noItems').empty();
			}
		},
		showHelpTab: function() {
			// ----------------------------------------------------
			var _namespace = 'define';

			// ----------------------------------------------------
			var _articles = [
				{
					id: 0,
					title: localize.t('tiq.datasources.help.0.title'),
					type: 'document',
					linkHref: common.community.data_layer_tab,
					isExternalLink: true
				},
				{
					id: 1,
					title: localize.t('tiq.datasources.help.1.title'),
					type: 'video',
					linkHref: common.community.adding_data_sources,
					isExternalLink: true
				},
				{
					id: 2,
					title: localize.t('tiq.datasources.help.2.title'),
					type: 'document',
					linkHref: common.community.universal_data_object_guide,
					isExternalLink: true
				},
				{
					id: 3,
					title: localize.t('tiq.datasources.help.3.title'),
					type: 'document',
					linkHref: common.community.data_layer_enrichment,
					isExternalLink: true
				}
			];

			// ----------------------------------------------------
			var _context = {
				header: localize.t('tiq.datasources.help.header'),
				body: localize.t('tiq.datasources.help.body')
			}

			utui.help.initHelpTab(_namespace, _articles, _context);
		},

		// --------------------------------------------------
		// Used since login.html.tt for some reason strips out values
		addFilterValues: function() {
			var isModal = _isModal();

			// Filters initialize
			if (!isModal) {
				$('#filter_showall').attr('value','.viewItem');
				$('#filter_js').attr('value','.js');
				$('#filter_jspage').attr('value','.js_page');
				$('#filter_meta').attr('value','.meta');
				$('#filter_cp').attr('value','.cp');
				$('#filter_qp').attr('value','.qp');
				$('#filter_va').attr('value', '.va');
			} else {
				$('#modal_filter_showall').attr('value','.viewItem');
				$('#modal_filter_js').attr('value','.js');
				$('#modal_filter_jspage').attr('value','.js_page');
				$('#modal_filter_meta').attr('value','.meta');
				$('#modal_filter_cp').attr('value','.cp');
				$('#modal_filter_qp').attr('value','.qp');
				$('#modal_filter_va').attr('value', '.va');
			}
		},

		// --------------------------------------------------
		appendModalItems: function(listType) {
			var v = '',
				labelsExpanded = utui.labels.helper.getLabelsExpandedForTab(utui.define.id);

			// Converts object to an array (to allow ordered sorting)
			var dataArray = [];
			for (var key in utui.data.define) {
				dataArray.push(utui.data.define[key]);
			}

			dataArray.sort(_dynamicSort(String('name')));

			for (var i = 0; i < dataArray.length; i++) {
				var ds = dataArray[i],
				    imported = ds.imported,
				    title = ds.title,
				    name = ds.name,
				    type = ds.type,
				    desc = ds.description,
				    id = ds._id,
				    settings = ds.settings,
				    labels = ds.labels,
				    hideType = false;

				if (imported && imported === utui.profile.import.AUDIENCE_STREAM && listType === utui.loadrules.id) {
					if (ds.settings.origin_type === 'dates') {
						hideType = true;
					}
				} else if (imported && listType === utui.define.dataLayerSpecs.id) {
					hideType = true;
				}

				// Remove audience stream date types
				if (!hideType) {
					v += _view.element(title, name, type, desc, id, i + 1, imported, settings, labels, labelsExpanded);
				}
			};

			return v;
		}
	}

	// --------------------------------------------------
	// Binds the UI events
	var _bindUI = {
		// ----------------------------------------------------
		global: function() {
			// Bind all the buttons within the context view
			$templateContext.find('#data_layer_data_sources_menu').safeOn('click', _eventHandlers.onDataSourcesMenuClick);
			$templateContext.find('#data_layer_data_layer_specifications_menu').safeOn('click', _eventHandlers.onDataLayerSpecificationsMenuClick);
		},

		// --------------------------------------------------------
		initialize: function() {
			this.global();
			this.toggleAccordion();
			this.labelChkbox();
			_renderBulkLabelSelect();
			this.labelCheckboxChecked();
			this.filterChkbox();
			this.filterInput();
			this.viewListBtn();
			this.viewTileBtn();
			this.addElement();
			this.addBulkElementsContainer();
			this.addBulkElements();
			this.removeElement();
			this.editElement();
			this.editBulkElements();
			this.defineWizard();
		},

		// --------------------------------------------------------
		defineWizard: function() {
			$('#define_wizard').on('click', _eventHandlers.onDefineWizardClick);
		},
		// --------------------------------------------------------
		toggleAccordion: function() {
			$(document).off('click', '.viewItem').on('click', '.viewItem', _eventHandlers.onDataSourceElementClick);
		},

		// --------------------------------------------------------
		labelChkbox: function () {
			$(document).off('click', '.label_select_checkbox').on('click', '.label_select_checkbox', _eventHandlers.onLabelCheckboxClick);
		},

		// --------------------------------------------------------
		removeLabelBtn: function() {
			var $deleteButtons = $('.tetrisExpandedView').find('.label-delete');

			if ($deleteButtons) {
				$.each($deleteButtons, function () {
					var $el = $(this);

					$el.safeOn('click', _eventHandlers.removeLabel);
				});
			}
		},

		// --------------------------------------------------------
		filterChkbox: function () {
			var isModal = _isModal(),
				$checkboxes = (!isModal) ? $('#ds_filter_checklist').find('input') : $('#modal_ds_filter_checklist').find('input'),
				$labelCheckboxes = (!isModal) ? $('#label_filter_checklist').find('input') : $('#modal_label_filter_checklist').find('input'),
				$allCheckboxes = $checkboxes.add($labelCheckboxes),
				$showAll = (!isModal) ? $('#filter_showall') : $('#modal_filter_showall');

			$checkboxes.prop('checked', false); // unset filters
			$showAll.prop('checked', true); // set Show All checked initially
			_showBetterTogetherMsg(false);

			$allCheckboxes.each(function (e) {
				if ($(this).val !== '.viewItem') {
					$(this).safeOn('change', _eventHandlers.onFilterCategoryChkboxChange); // If we check on checkboxes, go through appropriate logic
				}
			});

			$showAll.safeOn('change', _eventHandlers.onFilterShowAllChkboxClick); // Whenever we choose Show All, immediately uncheck the rest of the checkboxes
      utui.profile.consoleHeight();
		},

		// --------------------------------------------------------
		filterInput: function() {
			var $checkboxes = $('#filters').find('input'),
				$showAll = $('#filter_showall');

			$('#dataSources_filterSearch_input').on('keyup', _eventHandlers.onFilterSearchInput);
			$('#dataSources_filterSearch_results').on('click', '.resultRow', _eventHandlers.onFilterSearchResultClick);

			// Dispose results when clicked
			$('body').on('click', function() {
				$('#dataSources_filterSearch_results').html('');
			});
		},

		// --------------------------------------------------------
		viewListBtn: function(event) {
			$('#dataSources_listViewBtn').safeBind('click.viewListBtn', _eventHandlers.onViewListClick);
		},

		// --------------------------------------------------------
		viewTileBtn: function(event) {
			$('#dataSources_gridViewBtn').safeBind('click.viewTileBtn', _eventHandlers.onViewTileClick);
		},

		// --------------------------------------------------------
		addElement: function() {
			$('#dataSources_addDataSourceBtn').safeBind('click.addElement', _eventHandlers.onAddDataSourceClick);
		},

		// --------------------------------------------------------
		addBulkElements: function() {
			$('#dataSources_addBulkDataSourceBtn').safeBind('click.addBulkElements', _eventHandlers.onAddBulkDataSourceClick);
		},

		// --------------------------------------------------------
		addBulkElementsContainer: function() {
			utui.ui.toggleMenu('dataSources_addMisc');
		},

		// --------------------------------------------------------
		removeElement: function() {
			$(document).on('click.removeElement','.viewItem-delete', _eventHandlers.onRemoveDataSourceClick);
		},

		// --------------------------------------------------------
		editElement: function() {
			$(document).on('click.editElement','.viewItem-edit', _eventHandlers.onEditDataSourceClick);
		},
		// --------------------------------------------------------
		editBulkElements: function() {
			$('#dataSources_editBulkDataSourcesBtn').safeBind('click.editBulkElements', _eventHandlers.onEditBulkDataSourceClick);
		},
		// --------------------------------------------------------
		requestAudienceStream: function() {
			$('#dataSource_requestAudienceStream').safeBind('click', _eventHandlers.onRequestAudienceStream);
		},
		// --------------------------------------------------------
		viewListModalBtn: function(event) {
			$('#modal_dataSources_listViewBtn').safeBind('click.viewListBtn', _eventHandlers.onViewListClick);
		},

		// --------------------------------------------------------
		viewTileModalBtn: function(event) {
			$('#modal_dataSources_gridViewBtn').safeBind('click.viewTileBtn', _eventHandlers.onViewTileClick);
		},

		// --------------------------------------------------------
		filterModalInput: function($select2list) {
			var $searchResults = $('#modal_dataSources_filterSearch_results');

			$('#modal_dataSources_filterSearch_input').on('keyup', _eventHandlers.onFilterSearchInput);
			$searchResults.on('click', '.resultRow', function ($select2list) { return function() {
				var dataId = $(this).attr('data-id');
				_eventHandlers.onDataSourceElementSelect(dataId, $select2list);
			}
			}($select2list));

			// Dispose results when clicked
			$('body').on('click', function() {
				$searchResults.html('');
			});
		},

		// --------------------------------------------------------
		modalDataSourceElementClick: function($select2list) {
			$(document).off('click', '.viewItem').on('click', '.viewItem', function ($select2list) { return function() {
				var dataId = $(this).attr('data-tile-key');
				_eventHandlers.onDataSourceElementSelect(dataId, $select2list);
			}
			}($select2list));

		},

		// --------------------------------------------------------
		labelCheckboxChecked: function() {
			if ($container.find('.label_select_checkbox:checked').length > 0) {
				$('#defineContainer_headerControls').find('.labels_menu_list').css('display', 'inline-block');
				$('#dataSources_editBulkDataSourcesBtn span').html(' ' + localize.t('tiq.datasources.edit_selected'));
			} else {
				$('#defineContainer_headerControls').find('.labels_menu_list').hide();
				$('#dataSources_editBulkDataSourcesBtn span').html(' ' + localize.t('tiq.datasources.edit_all'));
			}
		},

		// --------------------------------------------------------
		labelHoverLists: function () {
			var isModal = _isModal(),
				$view = (!isModal) ? $container : $('#modal_define'),
				$labelContainers = $view.find('.container_label');

			$labelContainers.each(function() {
				utui.labels.helper.bindLabelHoverList($(this));
			});
		},

		// --------------------------------------------------------
		accordionScopedItemLinks: function () {
			$container.find('.tag-link, .extension-link, .loadrule-link, .data-layer-spec-link').safeOn('click', _eventHandlers.onScopedItemLinkClick);
		}
	};



	// --------------------------------------------------
	// Event Handlers
	var _eventHandlers = {
		// --------------------------------------------------
		onDataSourcesMenuClick: function (event) {
			var $el = $(this),
				tabView = $el.text().replace(/ /g, '_') + '_View';

			_selectedTab = TAB_DATA_SOURCES;
			_highlightNav($el);
			_showFiltersContext();
			_replaceContent();

			var tagging = {action:utui.constants.views.TAB_CLICK, tab_id: tabView,
						   screen_name: tabView, tealium_event: utui.constants.tagging.SCREEN_VIEW };
            utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, tagging);

			// Reinitialize view
			utui.define.show();
		},
		// --------------------------------------------------
		onDataLayerSpecificationsMenuClick: function (event) {
			var $el = $(this),
				tabView = $el.text().replace(/ /g, '_') + '_View';

			_selectedTab = TAB_DATA_LAYER_SPECIFICATIONS;
			_highlightNav($el);
			_hideFiltersContext();
			_replaceContent();

			utui.define.dataLayerSpecs.show();

            var tagging = {action:utui.constants.views.TAB_CLICK, tab_id: tabView,
                screen_name: tabView, tealium_event: utui.constants.tagging.SCREEN_VIEW };
			utui.util.pubsub.publish(utui.constants.views.TAB_CLICK, {action:utui.constants.views.TAB_CLICK, tagging: tagging});
		},
		// --------------------------------------------------
		onDefineWizardClick: function(e) {
			e.stopImmediatePropagation();
			e.preventDefault();

			utui.define.showDefineWizard.show();
		},
		// --------------------------------------------------
		onDataSourceElementClick: function(event) {
			var $el = $(this);

			// Hide accordion
			if($el.hasClass('selected')) {
				_hideAccordion();
				return false;
			}

			// Show accordion
			var keyNum = $el.data('tile-key');

			_tetris.showExpandedView(keyNum);

			return false;
		},

		// --------------------------------------------------
		onLabelCheckboxClick: function (event) {
			var $this = $(this);

			// hack to enable checkboxes to be checked
			setTimeout(function () {
				$this.prop("checked", !$this.prop("checked"));
				_bindUI.labelCheckboxChecked();
			}, 0);

			return false;
		},

		// --------------------------------------------------
		removeLabel: function () {
			var $el = $(this),
				labelId = $el.attr('data-label-id'),
				labelName = utui.labels.getLabelNameById(labelId);

			_pubsubHandlers.onLabelUnAssigned({listType:'single', labelId:labelId, name:labelName});
		},

		// --------------------------------------------------
		assignOrRemoveLabels: function (isAssignAction, isBulkAction, labelId, forceApplyToAll) {
			if (labelId) {
				var $checked = $container.find('.label_select_checkbox:checked'),
					$contextContainer = $('.tetrisExpandedView').find('.accordion-context-container'),
					key = $contextContainer.attr('data-key');

				// Label was deleted, must remove from all data sources
				if (forceApplyToAll) {
					$checked = $container.find('.label_select_checkbox');
					// On a different tab when label was removed, so must remove label from data model
					if ($checked.length === 0) {
						for (var i in utui.util.getVars(utui.data.define)) {
							var ds = utui.data.define[i],
								labelIds = ds.labels;

							labelIds = labelIds ? labelIds.split(",") : [];
							var labelIdIndex = $.inArray(String(labelId), labelIds);
							labelIds = _.filter(labelIds, function (item) {
								return item !== labelId
							});
							ds.labels = labelIds.join(",");

							// label was unassigned - log event
							if (labelIdIndex >= 0) {
								utui.profile.setActionPerformed({
									action: utui.constants.labels.UNASSIGNED,
									data: {
										id: ds._id,
										name: ds.name,
										type: ds.type,
										kind: utui.constants.variables.TYPE,
										operation: utui.constants.operation.REMOVED,
										container: 'defineObjectsList'
									}
								}, true);
							}
						}
					}
				}
				// Working with individual expanded data source
				else if (!isBulkAction) {
					$checked = dsapi.getExpandedDataSourceCheckbox();
				}

				$.each($checked, function () {
					var id = $(this).val(),
						$dataObj = $('#datasources_' + id),
						obj = utui.data.define[id],
						labelIds = obj.labels ? obj.labels.split(',') : [],
						labelIdIndex = $.inArray(String(labelId), labelIds);

					if (isAssignAction) {
						if (labelIdIndex < 0) {
							labelIds.push(labelId);
							$dataObj.addClass('label_' + labelId);
						}
						utui.labels.assignSecureLabelRelationship(labelId, utui.define.id, id);

					} else {
						// If label is not assigned to object STOP.
						if (labelIdIndex < 0) {
							return; // equivalent to continue;
						}

						labelIds.splice(labelIdIndex, 1);
						$dataObj.removeClass('label_' + labelId);

						utui.labels.unassignSecureLabelRelationship(labelId, utui.define.id, id);
					}

					obj.labels = labelIds.join(",");

					if (id === key) {
						// redraw labels on tile AND labels on context menu
						_redrawLabels($dataObj, obj.labels, $contextContainer);
					} else {
						// redraw labels on tile
						_redrawLabels($dataObj, obj.labels);
					}

					utui.profile.setActionPerformed({
						action: (isAssignAction) ? utui.constants.labels.ASSIGNED : utui.constants.labels.UNASSIGNED,
						data: {
							id: id,
							name: obj.name,
							type: obj.type,
							kind: utui.constants.variables.TYPE,
							operation: (isAssignAction) ? utui.constants.operation.ADDED : utui.constants.operation.REMOVED,
							container: 'defineObjectsList'
						}
					}, true);
				});
			}
		},

		// --------------------------------------------------
		redrawLabel: function () {
			var $checked = $container.find('.label_select_checkbox'),
				$contextContainer = $('.tetrisExpandedView').find('.accordion-context-container'),
				key = $contextContainer.attr('data-key');

			$.each($checked, function () {
				var id = $(this).val(),
					$dataObj = $('#datasources_' + id),
					labels = utui.data.define[id].labels;

				if (id === key) {
					// redraw labels on tile AND labels on context menu
					_redrawLabels($dataObj, labels, $contextContainer);
				} else {
					// redraw labels on tile
					_redrawLabels($dataObj, labels);
				}
			});
		},

		// --------------------------------------------------
		onFilterSearchInput: function(event) {
			var input = _.escape($(this).val().toLowerCase()),
				objInView,
				resCount = 0,
				v = '',
				isModal = _isModal(),
				$results = (!isModal) ? $('#dataSources_filterSearch_results') : $('#modal_dataSources_filterSearch_results');

			// we want to parse the data-tile-key from each element visible on screen, then fetch its data object
			objInView = _getVisibleDataSources();

			if(input.length > 0) {
				resCount = 0;

				for(var entry in objInView) {
					if(!objInView.hasOwnProperty(entry)) continue;

					var ds = objInView[entry],
						dsName = ds.name.toLowerCase(),
						dsTitle = ds.title ? ds.title.toLowerCase() : '',
						dsDesc = ds.description.toLowerCase(),
						uid = '',
						labels = '';

					if (ds.type !== dsapi.consts.dom.DOM) {
						uid = '' + ds.id;
						labels = utui.data.define[uid].labels;
					}

					if (ds.imported && ds.imported === utui.profile.import.AUDIENCE_STREAM) {
						uid = '' + ds.settings.origin_id;
					}

					if (dsTitle.indexOf(input) > -1) {
						resCount++;
						v += _view.filterResultItem(ds, true);
					} else if (dsName.indexOf(input) > -1) {
						resCount++;
						// res.push(ds.name);
						v += _view.filterResultItem(ds, false);
					} else if (dsDesc.indexOf(input) > -1) {
						resCount++;
						// res.push(ds.description);
						v += _view.filterResultItem(ds, false);
					} else if (uid.indexOf(input) > -1) {
						resCount++;
						v += _view.filterResultItem(ds, false);
					}

					// Search by label name
					if (labels) {
						labels = labels.split(',');
						for (var i = 0; i < labels.length; i++) {
							var labelId = labels[i],
								labelName = utui.labels.getLabelNameById(labelId);

							if (labelName.indexOf(input) > -1) {
								resCount++;
								v += _view.filterResultItem(ds);
								break;
							}
						}

					}
				}

				if (resCount === 0) {
					v += _view.filterNoResultsFound(input);
				}

				$results.html(v);
				return;
			}
			$results.html('');
		},

		// --------------------------------------------------
		onFilterSearchResultClick: function(event) {
			var dataId = $(this).attr('data-id');

			_tetris.showExpandedView(dataId);

			// Show result after previous view has been removed
			setTimeout(function() {
				$('#defineContainer').animate({
					scrollTop: $('#datasources_'+dataId).offset().top - $('#defineContainer').offset().top + $('#defineContainer').scrollTop()
				}, 'slow');
			}, 500);
		},

		// --------------------------------------------------
		onFilterShowAllChkboxClick: function(event) {
			var isModal = _isModal(),
				$checkboxes = (!isModal) ? $('#ds_filter_checklist').find('input') : $('#modal_ds_filter_checklist').find('input'),
				$labelCheckboxes = (!isModal) ? $('#label_filter_checklist').find('input') : $('#modal_label_filter_checklist').find('input'),
				$allCheckboxes = $checkboxes.add($labelCheckboxes),
				$showAll = (!isModal) ? $('#filter_showall') : $('#modal_filter_showall');

			// Whenever we choose Show All, immediately uncheck the rest of the checkboxes
			$showAll.prop('checked', true);
			_showBetterTogetherMsg(false);

			$allCheckboxes.each(function() {
				if($(this).val() !== '.viewItem') {
					$(this).prop('checked', false);
				}
			});

			_filterRender();
		},

		// --------------------------------------------------
		onFilterCategoryChkboxClick: function(event) {
			_filterRender();
		},

		// --------------------------------------------------
		onFilterCategoryChkboxChange: function(event) {
			var isModal = _isModal(),
				$checkboxes = (!isModal) ? $('#ds_filter_checklist').find('input') : $('#modal_ds_filter_checklist').find('input'),
				$labelCheckboxes = (!isModal) ? $('#label_filter_checklist').find('input') : $('#modal_label_filter_checklist').find('input'),
				$allCheckboxes = $checkboxes.add($labelCheckboxes),
				$showAll = (!isModal) ? $('#filter_showall') : $('#modal_filter_showall');

			_showBetterTogetherMsg(false);

			// If we choose a different selection while "Show All" is checked, uncheck "Show All"
			if($allCheckboxes.filter(':checked').length > 0 && $showAll.is(':checked')) {
				$showAll.prop('checked', false);
				_filterRender();
				_showBetterTogetherMsg(true);
				return true;
			}

			// If nothing is checked; resort back to "Show All"
			if($allCheckboxes.filter(':checked').length === 0) {
				$showAll.prop('checked',true);
				_filterRender();
				return true;
			}

			_filterRender();
			_showBetterTogetherMsg(true);
			return true;
		},

		onViewListClick: function(event) {
			var isModal = _isModal(),
				$view = (!isModal) ? $container : $('#modal_define'),
				$header = (!isModal) ? $('#defineContainer_listheader') : $('#modalDefineContainer_listheader'),
				$title = $view.find('.title');

			$('.datasources-toggleview').removeClass('selected');
			$(this).addClass('selected');

			_setView = 'row';

			$header.slideDown();

			_hideAccordion();
			$view.find('.viewItem').removeClass('ds-tile tetristile').addClass('ds-row').css('left', '0px');

			$title.each(function(index, el) {
				var $el = $(el);
				$el.text(utui.util.truncate($el.attr('title'), TRUNCATE_TITLE_ROW));
			});

			_tetris.updateLayout();

			_setViewState('row');

			return false;
		},
		onViewTileClick: function(event) {
			var isModal = _isModal(),
				$view = (!isModal) ? $container : $('#modal_define'),
				$header = (!isModal) ? $('#defineContainer_listheader') : $('#modalDefineContainer_listheader'),
				$title = $view.find('.title');

			$('.datasources-toggleview').removeClass('selected');
			$(this).addClass('selected');

			_setView = 'tile';

			$header.slideUp();

			_hideAccordion();
			$view.find('.viewItem').removeClass('ds-row tetristile').addClass('ds-tile');

			$title.each(function(index, el) {
				var $el = $(el);
				$el.text(utui.util.truncate($el.attr('title'), TRUNCATE_TITLE_TILE));
			});

			_tetris.updateLayout();

			_setViewState('tile');

			return false;
		},
		onAddDataSourceClick: function(event) {
			var dataSourceTagging = _createTaggingObject(null, utui.constants.tagging.CREATED_STARTED);
            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, dataSourceTagging);

            utui.define.showAddMore('newvariable');
			$('.dialog-content-body').find('input:text:visible:first').focus();
			return false;
		},
		onAddBulkDataSourceClick: function(event) {
			_dialogs.addBulkDataSource.show();
			return false;
		},
		onRemoveDataSourceClick: function(event) {
			event.stopImmediatePropagation();

			if(!$(this).hasClass('ui-state-disabled')) {
				var dataId = $(this).closest('.accordion-context-container').data('key'),
					dataObj = dsapi.getDataSource(dataId);

				if(!$.isEmptyObject(dataObj)) {

					_dialogs.removeDataSourceConfirm.show(dataId);
					return false;
				}
			}

			_tetris.updateLayout();

			return false;
		},
		onEditDataSourceClick: function(event) {
			event.stopImmediatePropagation();

			if(!$(this).hasClass('ui-state-disabled')) {
				var dataId = $(this).data('key'),
					dataObj = dsapi.getDataSource(dataId);

				_dialogs.editDataSource.show(dataId);
			}
			return false;
		},
		onEditBulkDataSourceClick: function(event) {
			event.stopImmediatePropagation();
			_hideAccordion();

			if(!$(this).hasClass('ui-state-disabled')) {
				_dialogs.editBulkDataSource.show();
			}
			return false;
		},
		onRequestAudienceStream: function (event) {
			event.stopImmediatePropagation();

			// send event
			utui.util.pubsub.publish(utui.constants.tagging.EVENT, {action: utui.constants.self_service.AUDIENCESTREAM_INTEREST});
			$(this).hide();
			$('.interestBodyResponse').fadeIn();
		},
		onDataSourceElementSelect: function(dataId, $select2list) {
			if (dataId) {
				var ds = dsapi.getDataSource(dataId);
				if (ds) {
					var dataKey = ds.type + '.' + ds.name;
					if (ds.type === 'va') {
						dataKey = dsapi.getVADataKey(ds);
					}
					$select2list.select2('val', dataKey);
				}
			}
			$('#modal_define_dialog').dialog('close');
		},

		// --------------------------------------------------
		onScopedItemLinkClick: function (event) {
			var $el = $(this),
				dataKey = '' + $el.attr('data-key'),
				dataType = $el.attr('data-type');

			if (dataType === utui.define.dataLayerSpecs.id) {
				utui.util.pubsub.publish(utui.constants.data_layer_specs.FOCUSED, dataKey);
			} else if (dataType === utui.manage.id) {
				utui.util.pubsub.publish(utui.constants.tags.FOCUSED, 'manage_content', 'manage', dataKey, '.uidValue');
			} else if (dataType === utui.loadrules.id) {
				utui.util.pubsub.publish(utui.constants.loadrules.FOCUSED, 'loadrules_content', 'loadrules', dataKey, '.uidValue');
			} else if (dataType === utui.customizations.id) {
				utui.util.pubsub.publish(utui.constants.extensions.FOCUSED,'customize_content', 'customizations', dataKey, '.container_uid');
			}
		}
	};

	// --------------------------------------------------
	function _showFiltersContext() {
		$content.find('#filterContext').fadeIn();
	}

	// --------------------------------------------------
	function _hideFiltersContext() {
		$content.find('#filterContext').fadeOut();
	}

	// --------------------------------------------------
	function _getDataSourceTypeName(type) {
		switch (type) {
			case 'js_page':
				return localize.t('tiq.datasources.js_page_variable');
				break;
			case 'js':
				return localize.t('tiq.datasources.data_object');
				break;
			case 'meta':
				return localize.t('tiq.datasources.meta_data');
				break;
			case 'qp':
				return localize.t('tiq.datasources.querystring');
				break;
			case 'cp':
				return localize.t('tiq.datasources.cookie_value');
				break;
			case 'va':
				return localize.t('tiq.datasources.visitor_attribute');
				break;
			case 'dom':
				return localize.t('tiq.datasources.dom_variable');
				break;
			default:
				return localize.t('tiq.datasources.circle_star');
		}
	}

	// --------------------------------------------------
	// Used for filtering and constructing the Bulk Edit screen
	function _getVisibleDataSources(isEditAction) {
		var $visibleDataSources,
			dataArray = [];

		if (isEditAction) {
			// Edit Selected
			$visibleDataSources = $container.find('.label_select_checkbox:checked').parent();
			if ($visibleDataSources.length === 0) {
				// Edit All
				$visibleDataSources = $('.viewItem:visible');
			}
		} else {
			$visibleDataSources = $('.viewItem:visible');
		}

		$visibleDataSources.each(function (e) {
			var dataId = $(this).data('tile-key');

			if (typeof dataId !== 'undefined') {
				// while DOM data sources are not available for bulk editing, they do need to be included for filtering
				if (typeof dataId === 'string' && dataId.indexOf(dsapi.consts.dom.DOMID) === 0) {
					var domId = dataId.slice(dsapi.consts.dom.DOMID_LENGTH, dataId.length);
					dataArray.push(dsapi.domDataSources[domId]);
				} else {
					dataArray.push(dsapi.getDataSource(dataId));
				}
			}
		});

		dataArray.sort(_dynamicSort(String('name')));

		return dataArray;
	}

	// --------------------------------------------------
	// Used for Bulk Edit validation
	function _getHiddenDataSources() {
		var objHidden = {};
		$('.viewItem:hidden').each(function(e) {
			var dataId = $(this).data('tile-key');
			if(typeof dataId !== 'undefined') {
				objHidden[dataId] = dsapi.getDataSource(dataId);
			}
		});
		return objHidden;
	}

	// --------------------------------------------------
	// Concatenates name and type properties down to one string; best used for validation.
	function _getDataSourceHash(dataObj) {
		var objQuery = dataObj,
			objResults = [];

		if(typeof objQuery !== "object") return false;

		for(var key in objQuery) {
			if(!objQuery.hasOwnProperty(key)) continue;

			var dsName = objQuery[key].name,
				dsType = objQuery[key].type;

			objResults.push(dsName + dsType);
		}

		return objResults;
	}

	// --------------------------------------------------
	function _hideAccordion() {
		$('.viewItem').removeClass('selected');
		$('.viewItem').removeClass('not-selected');

		_tetris.removeExpandedView();
	}

	// --------------------------------------------------
	function _filterRender() {
		var isModal = _isModal(),
			$checkboxes = (!isModal) ? $('#ds_filter_checklist').find('input').filter(':checked') : $('#modal_ds_filter_checklist').find('input').filter(':checked'),
			$labelCheckboxes = (!isModal) ? $('#label_filter_checklist').find('input').filter(':checked') : $('#modal_label_filter_checklist').find('input').filter(':checked'),
			filterSelection = [];

		_hideAccordion();

		// Filter on type
		if ($labelCheckboxes.length == 0) {
			$checkboxes.each(function (e) {
				var query = $(this).attr('value');
				filterSelection.push(query);
			});

		// Filter on type AND label; logical AND filter
		} else if ($checkboxes.length > 0 && $labelCheckboxes.length > 0) {
			$checkboxes.each(function (e) {
				var filterQuery = $(this).attr('value');
				$labelCheckboxes.each(function (e) {
					var labelQuery = $(this).attr('value'),
						query = filterQuery + labelQuery;

					filterSelection.push(query);
				});
			});

		// Filter on label
		} else {
			$labelCheckboxes.each(function (e) {
				var query = $(this).attr('value');
				filterSelection.push(query);
			});
		}

		if (filterSelection.length > 0) {
			filterSelection = filterSelection.join(', ');
			_setCategoryFilter = filterSelection;
			$('.viewItem').hide();
			$(filterSelection).show();
		} else {
			_setCategoryFilter = '.viewItem';
			$('.viewItem').show();
		}


		_tetris.render();
		return true;
	}

	function _showBetterTogetherMsg(show) {
		var $betterTogether = $('#better_together'),
			$noItemsContainer = $('#defineContainer_noItems');

		if (show) {
			var isModal = _isModal(),
				$checkboxes = (!isModal) ? $('#ds_filter_checklist').find('input') : $('#modal_ds_filter_checklist').find('input'),
				$filterVA = (!isModal) ? $('#filter_va') : $('#modal_filter_va');

			if ($filterVA.is(':checked') && $checkboxes.filter(':checked').length == 1 && $('.viewItem:visible').length == 0) {
				$betterTogether.html(_view.betterTogether());
				_bindUI.requestAudienceStream();
				$noItemsContainer.hide();
				$betterTogether.fadeIn();
			}
		} else {
			$betterTogether.hide();
			$noItemsContainer.fadeIn();
		}
	}

	function _isModal() {
		return $("#modal_define_dialog").dialog("isOpen") === true;
	}

	// --------------------------------------------------
	function _redrawLabels(dataObj, labels, contextContainer) {
		// redraw labels on tile
		utui.labels.helper.renderLabels(dataObj, utui.define.id);

		if (contextContainer) {
			// redraw labels on context menu
			contextContainer.find('.context_label_wrapper').remove();
			contextContainer.find('.contextSectionContent').append(utui.labels.labelsView.getAccordionLabelContent(labels));

			// rebind remove buttons
			_bindUI.removeLabelBtn();

			// Disable the select2 if user cannot modify
			contextContainer.find('select').select2('enable', utui.labels.canUserModify(labels));
		}
	}

	// --------------------------------------------------
	function _renderBulkLabelSelect() {
		utui.labels.labelsSelectBtn().render(utui.config.tabList.define.tab, $container, $menuLabelsSelect, $header);
	}

	// --------------------------------------------------
	function _renderSingleLabelSelect() {
		var $context = $('#select2-drop'),
			$singleList = $context.find('.label_dropdown_footer'),
			$expandedView = $('.tetrisExpandedView');

		if ($singleList[0]) {
			var list = $('#' + $singleList.attr('data-list-id'));

			utui.labels.labelsSelectBtn().render(utui.config.tabList.define.tab, $container, list, $expandedView);
		}
	}

	// --------------------------------------------------
	// TODO: move to utils
	function _dynamicSort(property) {
		var sortOrder = 1;
		if(property[0] === "-") { // Sort in Descending Order i.e. '-name'
			sortOrder = -1;
			property = property.substr(1);
		}
		return function (a,b) {
			var aValueLowered = a[property].toLowerCase();
			var bValueLowered = b[property].toLowerCase();
			var result = (aValueLowered < bValueLowered) ? -1 : (aValueLowered > bValueLowered) ? 1 : 0;
			return result * sortOrder;
		}
	}

	// --------------------------------------------------
	function _highlightNav($el) {
		$templateContext.find('li').removeClass('selected');
		if ($el) {
			$el.parent().addClass('selected');
		}
	}

	// --------------------------------------------------
	function _replaceContent(html) {
		$content.find('.dialog-screen').hide();

		var $container;

		if (_selectedTab === TAB_DATA_SOURCES){
			$container = $('#tabs_define_data_sources');
		} else if (_selectedTab === TAB_DATA_LAYER_SPECIFICATIONS) {
			$container = $('#tabs_data_layer_spec');
		}
		$container.show().css('display', 'inline-block');
	}

	var _pubsubHandlers = {
		// ------------------------------------------------
		onDataSourceAdded: function () {
			_viewModel.noItemsToShow();
			_viewModel.setFilterQty();

			// Update Global Cache
			// dsapi.getInputs();
			dsapi.getAllDataSourceSelection()
		},

		// ------------------------------------------------
		onDataSourceRemoved: function () {
			_viewModel.noItemsToShow();
			_viewModel.setFilterQty();

			// Update Global Cache
			// dsapi.getInputs();
			dsapi.getAllDataSourceSelection()
		},

		// ------------------------------------------------
		onLabelAdded: function (data) {
			// redraw bulk select list
			_renderBulkLabelSelect();
			// redraw single selected list
			_renderSingleLabelSelect();

			// redraw label filters
			_viewModel.setLabelFilters();
			_bindUI.filterChkbox();
			_viewModel.setLabelFilterQty();
		},

		// ------------------------------------------------
		onLabelRemoved: function (data) {
			// If the user deleted a resource lock then we need to make the fields editable
			if (data && data.security_list) {
				for (var id in utui.data.define) {
					// Only re-render if the label is assigned
					if (utui.labels.hasLabelInArray(utui.data.define[id].labels, data.labelId)) {
						_pubsubHandlers.onLabelSecurityChanged(id);
					}
				}
			}

			// Remove all of instances of this label in this tab's data model
			// Re-render the ui to reflect the changes
			_eventHandlers.assignOrRemoveLabels(false, true, data.labelId, true);

			// redraw select list
			_renderBulkLabelSelect();
			// redraw single selected list
			_renderSingleLabelSelect();

			// redraw label filters
			_viewModel.setLabelFilters();
			_bindUI.filterChkbox();
			_viewModel.setLabelFilterQty();
		},

		// ------------------------------------------------
		onLabelChanged: function (data) {
			// redraw select list
			_renderBulkLabelSelect();
			// redraw single selected list
			_renderSingleLabelSelect();

			// redraw labels tiles
			_eventHandlers.redrawLabel();

			// redraw label filters
			_viewModel.setLabelFilters();
			_bindUI.filterChkbox();
			_viewModel.setLabelFilterQty();

			var labelId = data.labelId;

			// Re-render the ui to reflect the changes
			for (var id in utui.data.define) {
				// Re-render all the labels in every container
				var labels = utui.data.define[id].labels;

				if (utui.labels.hasLabelInArray(labels, labelId)) {
					// If the security settings has changed then we need to enable/disable the buttons
					if (data.hasSecurityChanged) {
						_pubsubHandlers.onLabelSecurityChanged(id);
					}

					// If the label is secure then we need to add it to the relationships otherwise remove the relationship
					if (utui.labels.getLabelSecurityById(labelId)) {
						utui.labels.assignSecureLabelRelationship(labelId, utui.define.id, id);
					} else {
						utui.labels.unassignSecureLabelRelationship(labelId, utui.define.id, id);
					}
				}
			}
		},

		// ------------------------------------------------
		onLabelMenuOpening: function () {
			_hideAccordion();
		},

		// ------------------------------------------------
		onLabelMenuClosing: function () {},

		// ------------------------------------------------
		onLabelAssigned: function (data) {
			if (utui.config.currentTab === utui.define.id && data) {
				_eventHandlers.assignOrRemoveLabels(true, data.listType === 'bulk', data.labelId);
				_viewModel.setLabelFilterQty();
			}
		},

		// ------------------------------------------------
		onLabelUnAssigned: function (data) {
			if (utui.config.currentTab === utui.define.id && data) {
				_eventHandlers.assignOrRemoveLabels(false, data.listType === 'bulk', data.labelId);
				_viewModel.setLabelFilterQty();


				if (!data.action) {	// If NOT coming from a select menu
					var $container = $('.tetrisExpandedView').find('.accordion-context-container');
					if ($container[0]) {
						_pubsubHandlers.onLabelSecurityChanged($container.attr('data-key'));
					}
				}
			}
		},

		// ------------------------------------------------
		onLabelSecurityChanged: function(id) {
			// Enable/Disable the checkbox
			var $checkbox = $('#label_select_checkbox_'+id),
				canModify = utui.labels.canUserModify(utui.data.define[id].labels);

			$checkbox.attr('disabled', !canModify);
			if (!canModify) {
				$checkbox.prop('checked', false);
			}

			// Hide show the bulk label select box
			_bindUI.labelCheckboxChecked();

			_tetris.showExpandedView();
		},

		// --------------------------------------------------------
		onFocusedDataSource: function (uid) {
			var $container = $('#defineObjectsList'),
				$accordionDetails = $('.accordionDetails'),
				isClosed = $accordionDetails.length === 0;

			// Switch tabs
			$('#tabs').tabs('select', 'define');
			$('#data_layer_data_sources_menu').trigger('click');

			// Find accordion to open
			$container.find('.viewItem').each(function (index) {
				var $el = $(this);

				if ($el.attr('data-tile-key') === uid) {
					if (isClosed || ($accordionDetails.find('.accordion-context-container').data('key') !== $el.data('tile-key'))) {
						$el.trigger('click');

						// Show result after previous view has been removed
						setTimeout(function() {
							$('#defineContainer').animate({
								scrollTop: $('#' + $el.attr('id')).offset().top - $('#defineContainer').offset().top + $('#defineContainer').scrollTop()
							}, 'slow');
						}, 300);
					}
					return false;
				}
			});
		}
	};


	// --------------------------------------------------
	var _dialogs = {
		editDataSource : function() {
			// Private API
			var _namespace = 'datasource_edit_dialog',
				_$template = utui.ui.dialog.body(),
				_dataId, _dataObj;

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-container').addClass('auto');

					var $typeSelect = _$template.find('#'+_namespace+'_type');
					$typeSelect.safeBind('change', function() {
						var $msgDiv = _$template.find('#'+_namespace+'_name_chars');
						switch(this.value) {
							case _constants.JS:
							case _constants.JS_PAGE:
							case _constants.QP:
								$msgDiv.html(_nameHint);
								break;
							case _constants.CP:
								$msgDiv.html(_cookieNameHint);
								break;
							case _constants.META:
								$msgDiv.html(_metaNameHint);
								break;
							default:
								$msgDiv.html('');
						}
					});
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contentBody: function () {
					var v = '';

					v += '<div class="config">';
					v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.source') + ': </div>';
					v += '  <div class="definevariableswide">';
					v += $('<input/>')
						.attr({'id': _namespace + '_name',
							'maxlength': '100',
							'name': _namespace + '_name',
							'size': '50',
							'type': 'text',
							'value': _.unescape(_dataObj.name)
						})[0].outerHTML;
					v += '      <div id="' + _namespace + '_name_chars" style="color:#999; white-space:normal;"></div>';
					v += '      <div class="ui-state-error ui-corner-all" style="float:left;margin:2px 0 0 2px;width:245px;white-space:normal;display:none;" id="' + _namespace + '_editname_error"></div>';
					v += '  </div>';
					v += '</div>';

					v += '<div class="config" style="clear:both">';
					v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.type') + ': </div>';
					v += '  <div class="definevariableswide">';
					v += '      <select id="' + _namespace + '_type" name="' + _namespace + '_type">';
					for (var i in utui.util.getVars(utui.config.defineOptions)) {
						v += '          <option value="' + i + '">' + utui.config.defineOptions[i] + '</option>';
					}
					v += '      </select>';
					v += '  </div>';
					v += '</div>';

					v += '<div class="config">';
					v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.alias') + ': </div>';
					v += '  <div class="definevariableswide">';
					v += $('<input/>')
						.attr({'id': _namespace + '_title',
							'maxlength': '100',
							'name': _namespace + '_title',
							'placeholder': localize.t('tiq.datasources.enter_alias_to_identify'),
							'size': '50',
							'type': 'text',
							'value': _.unescape(_dataObj.title)
						})[0].outerHTML;
					v += '      <div class="ui-state-error ui-corner-all" style="float:left;margin:2px 0 0 2px;width:245px;white-space:normal;display:none;" id="' + _namespace + '_edit_title_error"></div>';
					v += '  </div>';
					v += '</div>';

					v += '<div class="config" style="clear:both">';
					v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.notes') + ': </div>';
					v += '  <div class="definevariableswide">';
					v += $('<input/>')
						.attr({'id': _namespace + '_description',
							'name': _namespace + '_description',
							'placeholder': localize.t('tiq.datasources.enter_datasource_notes'),
							'size': '50',
							'type': 'text',
							'value': _.unescape(_dataObj.description)
						})[0].outerHTML;
					v += '  </div>';
					v += '</div>';

					return v;

				}
			}

			var _viewModel = {
				setType : function() {
					var ds = dsapi.getDataSource(_dataId);
					$('#' + _namespace + '_type').val(ds.type).trigger('change');
				}
			};

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseBtnClick: function () {
					utui.define.refreshFilterCount();
					utui.ui.dialog.dispose(_namespace);
				},
				onSaveBtnClick: function () {
					var key = _dataId,
					    title = $('#' + _namespace + '_title').val(),
					    name = $('#' + _namespace + '_name').val(),
					    type = $('#' + _namespace + '_type').val(),
					    desc = $('#' + _namespace + '_description').val(),
					    invalidNameMsg = utui.define.isInvalidVariableName(name, type),
					    errMsg = "";

					if (invalidNameMsg) {
						errMsg = invalidNameMsg;
					}

					for (var i in utui.data.define) {
						if ((name + type) === (utui.data.define[i].name + utui.data.define[i].type) && i != key) {
							errMsg += _duplicateNameError;
							break;
						}
					}

					if (errMsg.length > 0) {
						utui.ui.dialog.message.showError(_namespace, errMsg);
						$('#' + _namespace + '_name').focus();
						return false;
					}

					var oldDataSource = {
						title : _dataObj.title,
						name : _dataObj.name,
						type : _dataObj.type,
						desc : _dataObj.description
					},
					    newDataSource = {
						title : title,
						name : name,
						type : type,
						desc : desc
					}

					utui.define.updateDataSource(oldDataSource, newDataSource, _dataId)

					utui.define.refreshFilterCount();
					utui.ui.dialog.dispose(_namespace);

					// Update Global Cache
					// dsapi.getInputs();
					dsapi.getAllDataSourceSelection()
					utui.validation.runValidationOnAllTabs();

					utui.validation.resolveMissingVariables(newDataSource.type+'.'+newDataSource.name);
				}
			};

			var _public = {
				// ----------------------------------------------------
				show: function(dataId) {
					_dataId = dataId;
					_dataObj = dsapi.getDataSource(dataId);

					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCloseBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CloseBtn'
						},
						{
							text: localize.t('tiq.dialog.button.apply'),
							click: _eventHandlers.onSaveBtnClick,
							id: _namespace + 'SaveBtn',
							class: 'nav-btn'
						}
					];

					var title = _dataObj.title || _dataObj.name;

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.datasources.edit_datasource', {title:utui.util.safeEscape(title)}), buttons, _$template, {width:600, height:'auto'});
					utui.ui.dialog.message.hide(_namespace);
					_viewModel.setType();
				}
			}

			return _public;
		}(),

		addDataSourceDialog : function() {
			// Private API
			// --------------------------------------------------------
			var _namespace = 'datasource_add_dialog',
				_$template = utui.ui.dialog.body();

			// --------------------------------------------------------
			var _container, _type, _setContainer, _calledFrom, _callback;

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-container').addClass('auto');

					var $typeSelect = _$template.find('#'+_container+'_edittype');
					$typeSelect.safeBind('change', function() {
						var $msgDiv = _$template.find('#'+_container+'_editname_chars');
						switch(this.value) {
							case _constants.JS:
							case _constants.JS_PAGE:
							case _constants.QP:
								$msgDiv.html(_nameHint);
								break;
							case _constants.CP:
								$msgDiv.html(_cookieNameHint);
								break;
							case _constants.META:
								$msgDiv.html(_metaNameHint);
								break;
							default:
								$msgDiv.html('');
						}
					});
					// Trigger to initally display the error message
					$typeSelect.trigger('change');
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template

			var _view = {
				contentBody: function () {
					var v = '';

					v += '<div class="config">';
					v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.source') + ': </div>';
					v += '  <div class="definevariableswide">';
					v += '      <input type="text" size="50" maxlength="100" id="' + _container + '_editname" name="' + _container + '_editname">';
					v += '      <div id="' + _container + '_editname_chars" style="color:#999; white-space:normal;"></div>';
					v += '      <div class="ui-state-error ui-corner-all" style="float:left;margin:2px 0 0 2px;width:245px;white-space:normal;display:none;" id="' + _container + '_editname_error"></div>';
					v += '  </div>';
					v += '</div>';

					if (_type) {
						v += '<input type="hidden" id="' + _container + '_edittype" name="' + _container + '_edittype" value="' + _type + '">';
					} else {
						v += '<div class="config" style="clear:both">';
						v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.type') + ': </div>';

						v += '  <div class="definevariableswide">';
						v += '      <select id="' + _container + '_edittype" name="' + _container + '_edittype">';
						v += _viewModel.defineOptions();
						v += '      </select>';
						v += '  </div>';
						v += '</div>';

					}

					v += '<div class="config">';
					v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.alias') + ': </div>';
					v += '  <div class="definevariableswide">';
					v += '      <input type="text" size="50" maxlength="100" id="' + _container + '_edit_title" name="' + _container + '_edit_title" placeholder="' + localize.t('tiq.datasources.enter_alias_to_identify') + '">';
					v += '      <div class="ui-state-error ui-corner-all" style="float:left;margin:2px 0 0 2px;width:245px;white-space:normal;display:none;" id="' + _container + '_edit_title_error"></div>';
					v += '  </div>';
					v += '</div>';

					v += '<div class="config" style="clear:both">';
					v += '  <div class="customization_labelwide">' + localize.t('tiq.datasources.notes') + ': </div>';
					v += '  <div class="definevariableswide">';
					v += '      <input size="50" type="text" id="' + _container + '_editdescription" placeholder="' + localize.t('tiq.datasources.enter_datasource_notes') + '" name="' + _container + '_editdescription">';
					v += '  </div>';
					v += '</div>';

					return v;

				}
			}

			var _viewModel = {
				all: function() {
					this.defineOptions();
					this.renderTabs();
				},
				defineOptions: function() {
					var v = '';
					for (var i in utui.util.getVars(utui.config.defineOptions)) {
						v += '<option value="' + i + '">' + utui.config.defineOptions[i] + '</option>';
					}
					return v;
				},
				renderTabs : function() {
					$("#bulkvar_tabs").tabs();
				}
			}

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseBtnClick: function() {
                    var tagging = { action: utui.constants.tagging.TAGGING, resource_type : utui.constants.variables.TYPE.toLowerCase()};
                    tagging.tealium_event = utui.constants.tagging.CREATED_CANCEL;
                    utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);
					utui.ui.dialog.dispose(_namespace);
				},
				onApplyBtnClick: function() {
					var defineObj = {
							title: $('#' + _container + '_edit_title').val(),
							name: $('#' + _container + '_editname').val(),
							type: _type || $('#' + _container + '_edittype').val(),
							desc: $('#' + _container + '_editdescription').val()
						};

					var addItem = function(nextId) {
						var varName = defineObj.type + '.' + defineObj.name,
							delay = 300,
							setValInterval;

						function selectVar() {
							if ($('#var').find('option[value="' + varName + '"]').length > 0) {
								$('#var').val(varName);
								clearInterval(setValInterval);
							}
						}

						function selectSet() {
							if ($('#'+_setContainer).find('option[value="' + varName + '"]').length > 0) {
								$('#'+_setContainer).val(varName);
								clearInterval(setValInterval);
							}
						}

						utui.define.addDataSource(nextId, defineObj.title, defineObj.name, defineObj.type, defineObj.desc);

						// remove extension validation
						delete utui.customizations.validationMap[_container];

						/* Select the variable added from an extension
							*	Persist Variables, Join Variables, Lookup Table and Split Segmentation dropdowns can be accessed using #container_var.
							*	Setvariables, jquery onHandler and clickHandler dropdowns reside in subcontainers #container_subcontainerid_set.
								"container_subcontainerid_set" is being passed in the setContainer argument
						*/
						// identify summoning container
						if (_container.split('_')[0] === 'customize') {
							// Handle the delay while the dropdowns are being repopulated
							if ($('#var').length > 0) {
								setValInterval = setInterval(selectVar, delay);
							}
							else if (typeof _setContainer != 'undefined' && $('#'+_setContainer).length > 0) {
								setValInterval = setInterval(selectSet, delay);
							}
						}

						utui.define.lastAdded.push(defineObj);

						// Reset the filter so the new data source is shown
						$('#filter_showall').trigger('click');
					};

					if (_isDataSourceInputValid(_container, defineObj, _namespace)) {

						_getNextId.fromServer(1, null,
							function(providedLastId, count, nextId) {
								addItem(nextId);

								utui.ui.dialog.dispose(_namespace);

								if (typeof _callback != 'undefined') {
									_callback(true);
								}
							},
							function(nextId) {
								addItem(nextId);

								utui.ui.dialog.dispose(_namespace);

								if (typeof _callback != 'undefined') {
									_callback(true);
								}
							});

					} else {
						if (typeof _callback != 'undefined') {
							_callback(false);
						}
					}
				}
			}

			var _public = {
				// ----------------------------------------------------
				show: function(container, type, setContainer, calledFrom, callback) {
					_container = container;
					_type = type;
					_setContainer = setContainer;
					_calledFrom = calledFrom;
					_callback = callback;

					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCloseBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CloseBtn'
						},
						{
							text: localize.t('tiq.dialog.button.apply'),
							click: _eventHandlers.onApplyBtnClick,
							id: _namespace + 'SaveBtn',
							class: 'nav-btn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.datasources.add_data_source'), buttons, _$template, {width:600, height:'auto'});
					utui.ui.dialog.message.hide(_namespace);
					_viewModel.renderTabs();

					utui.util.setSession(true);
				}
			}

			return _public;
		}(),

		addBulkDataSource : function() {
			// Private API
			// --------------------------------------------------------
			var _namespace = 'datasource_add_dialog',
				_$template = utui.ui.dialog.body();

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-container').addClass('auto');
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				contentBody: function () {
					var v = '';
					var _t = [];
					var maxNumFields = 4;

					v += '<div style="padding: 15px;">';
						v += '<h2>' + localize.t('tiq.datasources.bulk_import_datasources') + '</h2>';
						v += '<p>' + localize.t('tiq.datasources.bulk_paste_cvs_formatted_datasource') + '</p>';
						v += '<p>' + localize.t('tiq.datasources.bulk_each_entry_supports', {max: maxNumFields}) + '<br/>';
							v += '<strong style="text-decoration:underline">' + localize.t('tiq.datasources.source') + '</strong>, ';
							v += '<strong style="text-decoration:underline">' + localize.t('tiq.datasources.type') + '</strong>, ';
					v += '<strong style="text-decoration:underline">' + localize.t('tiq.datasources.alias') + '</strong> <span style="color: #888;">(' + localize.t('tiq.datasources.optional') + ')</span>, ';
							v += '<strong style="text-decoration:underline">' + localize.t('tiq.datasources.notes') + '</strong> <span style="color: #888;">(' + localize.t('tiq.datasources.optional') + ')</span>.';
						v += '</p>';
						v += '<p>' + localize.t('tiq.datasources.bulk_paste_available_datasources') + '<br/>';
						for (var i in utui.util.getVars(utui.config.defineOptions)) {
							_t.push('<strong>' + utui.config.defineOptions[i] + '</strong>');
						}
						v += _t.join(', ');
						v += '</p>';

						v += '<hr />';

						v += '<h3>' + localize.t('tiq.datasources.examples') + '</h3>';
						v += '<ul>';
							v += '<li>cVar1, "'+utui.config.defineOptions['cp']+'"</li>';
							v += '<li>jVar2, "' + utui.config.defineOptions['js_page'] + '", "jAlias2", "' + localize.t('tiq.datasources.bulk_second_datasource') + '"</li>';
						v += '</ul>';
					v += '</div>';

					v += '<div id="' + _namespace + '_bulkVarListErrs" style="display:none; margin: 5px; padding:5px; width:533px;height:70px; overflow:auto; border: 1px solid #CD0A0A; color:#CD0A0A; background-color:#FEF1EC;"></div>';

					v += '<div>';
					v += '  <textarea style="margin-left:5px; width:700px;height:150px;border: 1px solid grey;" id="' + _namespace + '_bulkVarList"></textarea>';
					v += '</div>';

					v += '<div style="padding: 5px;">';
					v += '  <form>';
					v += '      <input type="checkbox" id="' + _namespace + '_replaceVars" />';
					v += '      <label for="' + _namespace + '_replaceVars">&nbsp;' + localize.t('tiq.datasources.bulk_replace_all_datasources') + '</label>';
					v += '  </form>';
					v += '</div>';
					return v;
				}
			};

			// --------------------------------------------------------
			var _viewModel = {
				// --------------------------------------------------------
				all: function() {
					this.defineOptions();
				},

				// --------------------------------------------------------
				defineOptions: function() {
					var v = '';
					for (var i in utui.util.getVars(utui.config.defineOptions)) {
						v += '<option value="' + i + '">' + utui.config.defineOptions[i] + '</option>';
					}
					return v;
				},

				// --------------------------------------------------------
				showBulkDataSourceInputError: function(bulkErrorObj) {
					var v = '';
						v += '<strong>' + localize.t('tiq.datasources.error.parsing_errors_found') + '</strong>'
						v += '<ul>'

					for (var i = 0; i < bulkErrorObj.length; i++) {
						v += "<li>" + bulkErrorObj[i] + "</li>";
					}

						v += '</ul>'

					// Inject error message
					$('#'+_namespace+'_bulkVarListErrs').html(v).show();
					$('#'+_namespace+'_bulkVarList').css('height', '170px');
				}
			}

			// --------------------------------------------------------
			// Checks to see if input is valid once submitted
			function _isBulkDataSourceInputValid(namespace) {
				var bulkCSVVarList = $('#' + namespace + '_bulkVarList').val().trim(),
				    buvErrs = [],
				    vTypeLookup = {},
				    isReplace = $('#' + namespace + '_replaceVars').is(':checked'),
				    MIN_ENTRIES = 2,
				    MAX_ENTRIES = 4,
				    definedVars = {};

				// Reset Global Last Added
				utui.define.lastAdded = [];

				// If input is empty...
				if (bulkCSVVarList.length === 0) {
					$('#' + namespace + '_editname_error').html(localize.t('tiq.datasources.error.name_cannot_be_blank')).show();
					buvErrs.push(localize.t('tiq.datasources.error.csv_input_is_empty'));
					_viewModel.showBulkDataSourceInputError(buvErrs);
					return false;
				}

				// Checks to see if type is valid
				for (var i in utui.util.getVars(utui.config.defineOptions)) {
					vTypeLookup[utui.config.defineOptions[i].toLowerCase()] = i;
				}

				// get a list of all defined variables
				var definedVarsKey;
				for (var i in utui.util.getVars(utui.data.define)) {
					definedVarsKey = utui.data.define[i].type + '_' + utui.data.define[i].name;
					definedVars[definedVarsKey] = 1;
				}

				// CONDITION: Look out for unclosed quotes - this breaks the CSV parser logic.
				if ((bulkCSVVarList.match(/\"/g) || []).length % 2 === 1) {
					buvErrs.push(localize.t('tiq.datasources.error.csv_input_is_unparseable'));
					_viewModel.showBulkDataSourceInputError(buvErrs);
					return false;
				}

				// Parse the input into an array of arrays.
				var csvRecs = utui.util.CSVToArray(bulkCSVVarList, ",");

				if (csvRecs.length === 0) {
					buvErrs.push(localize.t('tiq.datasources.error.no_records_found_in_cvs'));
					_viewModel.showBulkDataSourceInputError(buvErrs);
					return false;
				}

				// Parse through CSV
				for (var i = 0; i < csvRecs.length; i++) {
					var ds = csvRecs[i];

					var dsName = $.trim(ds[0] || ''),
					    dsType = vTypeLookup[$.trim(ds[1] || '').toLowerCase()],
						dsTitle = $.trim(ds[2] || ''),
					    dsDesc = $.trim(ds[3] || ''),
					    invalidNameMsg = utui.define.isInvalidVariableName(dsName, dsType);

					// ERROR if we don't have a minimum of three entries
					if (ds.length < MIN_ENTRIES) {
						buvErrs.push(localize.t('tiq.datasources.error.minimum_fields_required', {num:(i+1)}));
						continue;
					} else if (ds.length > MAX_ENTRIES) {
						buvErrs.push(localize.t('tiq.datasources.error.maximum_fields_required', {num:(i+1), max: MAX_ENTRIES}));
						continue;
					}

					// Check if syntax is correct
					if (invalidNameMsg) {
						buvErrs.push(localize.t('tiq.datasources.line_num', {num:(i+1)}) + ": " + invalidNameMsg);
					}

					// ERROR if duplicated or repeated entry name within CSV
					definedVarsKey = dsType + '_' + dsName;
					if (definedVars[definedVarsKey]) {
						// If this data source was added in the bulk dialog (hence the 2)
						if (definedVars[definedVarsKey] === 2) {
							buvErrs.push(localize.t('tiq.datasources.line_num', {num:(i+1)}) + ': ' + localize.t('tiq.datasources.error.datasource_duplicate', {name:dsName}));
						} else {
							if (!isReplace) {
								buvErrs.push(localize.t('tiq.datasources.line_num', {num:(i+1)}) + ': ' + localize.t('tiq.datasources.error.datasource_already_defined', {name:dsName}));
							}
						}
					} else {
						definedVars[definedVarsKey] = 2;
					}

					// ERROR if data source is not recognized
					if (!dsType) {
						buvErrs.push(localize.t('tiq.datasources.line_num', {num:(i+1)}) + ': ' + localize.t('tiq.datasources.error.datasource_not_recognized', {type:dsType}));
					}
				}


				if (buvErrs.length > 0) {
					_viewModel.showBulkDataSourceInputError(buvErrs);
					return false;
				}

				// If no errors are presented, run the replace all script
				if (isReplace) {
					var dataObjModel = dsapi.getData();

					for (var key in utui.data.define) {
						if (!utui.data.define.hasOwnProperty(key)) continue;

						// If items are imported, do not delete... otherwise, remove them completely
						if ($.isEmptyObject(utui.data.define[key].imported)) {
							delete utui.data.define[key];
						}
					}
					;

					// Refresh datasources data model once complete
					dsapi.initialize();
				}

				// Store records into objects
				var obj = {};
				for (var i = csvRecs.length - 1; i >= 0; i--) {
					var ds = csvRecs[i],
					    dsName = ds[0],
					    dsType = ds[1],
						dsTitle = ds[2],
					    dsDesc = ds[3];

					obj[i] = {
						title : dsTitle,
						name : dsName,
						type : vTypeLookup[dsType.toLowerCase()],
						desc : dsDesc
					};

					utui.define.lastAdded.push(obj[i]);
				}
				;
				utui.define.addBulkDataSource(obj);

				// Reinitialize view
				dsapi.initialize();
				utui.define.initialize();

				// Publish add events
				for (var i in obj) {
					var dataKey = obj[i].type + '.' + obj[i].name;

					var ds = dsapi.getDataSource(dataKey);
					if (ds) {
						dsapi.publishDataSourceAddedEvent(ds);
					}
				}

				return true;
			}


			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				},
				onApplyBtnClick: function() {
					if (_isBulkDataSourceInputValid(_namespace)) {

						utui.define.refreshFilterCount();

						utui.ui.dialog.dispose(_namespace);
						if (typeof _callback != 'undefined') {
							_callback(true);
						}
					} else {
						if (typeof _callback != 'undefined') {
							_callback(false);
						}
					}
				}
			}

			// PUBLIC
			// --------------------------------------------------------
			var _public = {
				// ----------------------------------------------------
				show: function() {
					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCloseBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CloseBtn'
						},
						{
							text: localize.t('tiq.dialog.button.apply'),
							click: _eventHandlers.onApplyBtnClick,
							id: _namespace + 'SaveBtn',
							class: 'nav-btn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.datasources.import_datasources'), buttons, _$template, {width:750, height:'auto'});

					utui.util.setSession(true);
				}
			}

			return _public;
		}(),

		editBulkDataSource : function() {
			// Private API
			var _namespace = 'datasource_bulkedit_dialog',
				_$template = utui.ui.dialog.body(),
				_dataObjInView;

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-container').addClass('auto');
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contentBody: function () {
					var v = '';

					v += '<div class="container-fluid">';
					v += '  <div class="row-fluid utui-table-header" id="' + _namespace + '_tableHead">';
					v += '      <div class="span3">';
					v += '          <div class="utui-table-header-data">' + localize.t('tiq.datasources.source') + '</div>';
					v += '      </div>';
					v += '      <div class="span3 alignleft">';
					v += '          <div class="utui-table-header-data">' + localize.t('tiq.datasources.type') + '</div>';
					v += '      </div>';
					v += '      <div class="span3">';
					v += '          <div class="utui-table-header-data">' + localize.t('tiq.datasources.alias') + '</div>';
					v += '      </div>';
					v += '      <div class="span3 alignleft">';
					v += '          <div class="utui-table-header-data">' + localize.t('tiq.datasources.notes') + '</div>';
					v += '      </div>';
					v += '  </div>';
					v += '</div>';


					v += '<div id="' + _namespace + '_tableBody">';
					v += '  <div class="container-fluid">';

					for (var entry in _dataObjInView) {
						// check if they key is in the object (not the prototype chain) or if the key is to a DOM data source then continue (do not display it for editing in bulk edit).
						if (!_dataObjInView.hasOwnProperty(entry) || _dataObjInView[entry].type === dsapi.consts.dom.DOM) continue;


						var dataObj = utui.data.define[_dataObjInView[entry].id];

						// Skip resource locks
						if (!utui.labels.canUserModify(dataObj.labels)) continue;

						if (_dataObjInView[entry].imported && !$.isEmptyObject(_dataObjInView[entry].imported)) continue; // skipping imported data sources since they cannot be edited

						v += this.dataSourceRow(_dataObjInView[entry]);
					}

					v += '  </div>';
					v += '</div>';

					return v;
				},
				dataSourceRow: function (dataObj) {
					var dsTitle = dataObj.title,
						dsName = dataObj.name,
						dsDesc = dataObj.description,
						dsType = dataObj.type,
						dsId = dataObj.id,
						v = '';

					v += '<div id="dataSource_bulkedit_' + dsId + '" class="js-datasource-row-container" data-id="' + dsId + '">';

					v += '  <div class="datasource-row">';
					v += '      <div class="row-fluid error-message"></div>';

					v += '      <div class="row-fluid">';

					v += '          <div class="span3">';
					v += '              <input type="text" class="span10 js-datasource-name datasource-row-name" value="' + utui.util.safeEscape(dsName) + '" placeholder="' + localize.t('tiq.datasources.enter_name') + '" />';
					v += '          </div>';

					v += '          <div class="span3">';
					v += '              <select class="js-datasource-type datasource-row-type span10">';
					for (var i in utui.util.getVars(utui.config.defineOptions)) {
						v += '                  <option value="' + i + '">' + utui.config.defineOptions[i] + '</option>';
					}
					v += '              </select>';
					v += '          </div>';

					v += '          <div class="span3">';
					v += '              <input type="text" class="span10 js-datasource-title datasource-row-title" value="' + utui.util.safeEscape(dsTitle) + '" placeholder="' + localize.t('tiq.datasources.enter_alias') + '" />';
					v += '          </div>';

					v += '          <div class="span3">';
					v += '              <textarea type="text" class="span12 js-datasource-desc datasource-row-desc" placeholder="' + localize.t('tiq.datasources.enter_notes') + '">' + utui.util.safeEscape(dsDesc) + '</textarea>';
					v += '          </div>';

					v += '      </div>';

					v += '  </div>';

					v += '</div>';

					return v;
				}
			};

			var _viewModel = {
				setType : function() {
					for (var entry in _dataObjInView) {
						if (!_dataObjInView.hasOwnProperty(entry))
							continue;

						var $el = $('.js-datasource-row-container[data-id=' + _dataObjInView[entry].id + ']');
						$el.find('.js-datasource-type').val(_dataObjInView[entry].type);
					}
				}
			}

			// --------------------------------------------------------
			function _isBulkDataSourceEditValid() {

				var $entries = $('#datasource_bulkedit_dialog_tableBody').find('.js-datasource-row-container'),
					entriesInEdit = [],
					hasError = false;

				var objHidden = _getDataSourceHash(_getHiddenDataSources());

				$entries.each(function (e) {
					var $el = $(this),
						id = $el.attr('data-id');

					var dsTitle = $el.find('.js-datasource-title').val(),
						dsName = $el.find('.js-datasource-name').val(),
						dsType = $el.find('.js-datasource-type').val(),
						dsDesc = $el.find('.js-datasource-desc').val(),
						invalidNameMsg = utui.define.isInvalidVariableName(dsName, dsType),
						hashKey = dsName + dsType;

					// If we have duplicate entries within edit screen
					if (entriesInEdit.indexOf(dsName + dsType) > -1) {
						invalidNameMsg = localize.t('tiq.datasources.error.duplicate_datasource_detected');
					} else {
						entriesInEdit.push(dsName + dsType);
					}

					// If we have datasources that are indexed outside of edit screen
					if (objHidden.indexOf(hashKey) > -1) {
						invalidNameMsg = localize.t('tiq.datasources.error.datasource_already_indexed');
					}

					if (invalidNameMsg) {
						$el.find('.error-message').html(invalidNameMsg).slideDown();
						$el.find('.js-datasource-name').addClass('field-error');
						hasError = true;
					} else {
						$el.find('.error-message').html('').slideUp();
						$el.find('.js-datasource-name').removeClass('field-error');
					}
				});

				if (!hasError) {
					return true;
				}

				return false;
			}

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseBtnClick: function() {
					utui.define.refreshFilterCount();
					utui.ui.dialog.dispose(_namespace);
				},
				onSaveBtnClick: function() {
					var $entries = $('#datasource_bulkedit_dialog_tableBody').find('.js-datasource-row-container');

					if(_isBulkDataSourceEditValid()) {

						$entries.each(function(e) {
							var $el = $(this),
							    id = $el.attr('data-id'),
							    oldDataSource = dsapi.getDataSource(id),
							    newDataSource = {
								title : $el.find('.js-datasource-title').val(),
								name : $el.find('.js-datasource-name').val(),
								type : $el.find('.js-datasource-type').val(),
								desc : $el.find('.js-datasource-desc').val()
							};

							utui.define.updateDataSource(oldDataSource, newDataSource, id);
						});

						utui.define.refreshFilterCount();
						utui.ui.dialog.dispose(_namespace);

						utui.validation.runValidationOnAllTabs();
						return true;
					}

					utui.validation.runValidationOnAllTabs();

					return false;
				}
			}

			var _public = {
				// ----------------------------------------------------
				show: function() {
					_dataObjInView = _getVisibleDataSources(true);

					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCloseBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CloseBtn'
						},
						{
							text: localize.t('tiq.dialog.button.apply'),
							click: _eventHandlers.onSaveBtnClick,
							id: _namespace + 'SaveBtn',
							class: 'nav-btn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.datasources.edit_bulk_datasources'), buttons, _$template, {width:820, height:500});
					_viewModel.setType();
				}
			}

			return _public;
		}(),
		removeDataSourceConfirm: function() {
			// Private API
			var _namespace = 'datasource_remove_dialog',
				_$template = utui.ui.dialog.body(),
				_dataId,
				_dataObj;

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					if(dsapi.isDataSourceScoped(_dataId)) {
						v += this.scopedMessage();
					}
					else {
						v += this.confirmMessage();
					}

					return v;
				},
				// ----------------------------------------------------
				scopedMessage: function () {
					var title = _dataObj.title || _dataObj.name,
						v = '';

					v += '<div class="container-fluid welcome-container">';
					v += '  <div class="row-fluid">';
					v += '      <div class="span10 offset1">';
					v += 			localize.t('tiq.datasources.datasource_tied_to_content_elements', {name:('<strong>' + title + '</strong>')});
					v += 			_viewModel.getScoped();
					v += '      </div>';
					v += '  </div>';
					v += '</div>';

					return v;

				},
				// ----------------------------------------------------
				confirmMessage: function () {
					var title = _dataObj.title || _dataObj.name,
						v = '';

					v += '<div class="container-fluid welcome-container">';
					v += '  <div class="row-fluid">';
					v += '      <div class="span10 offset1">';

					v += '          <p style="font-weight:bold;">' + localize.t('tiq.datasources.are_you_sure_remove', {name:utui.util.safeEscape(title)}) + '</p>';
					v += '          <p>' + localize.t('tiq.datasources.this_operation_cannot_be_undone') + '</p>';

					v += '      </div>';
					v += '  </div>';
					v += '</div>';

					return v;
				},
				rowItem: function(title, type) {
					var ico,
						v = '';

						switch(type) {
							case 'tags':
								ico = '<i class="icon-tag"></i>';
								break;
							case 'extensions':
								ico = '<i class="icon-wrench"></i>';
								break;
							case 'loadrules':
								ico = '<i class="icon-book"></i>';
								break;
							case 'data_layer_specs':
								ico = '<i class="icon-file-text-alt"></i>';
								break;
						}

						v += '<li>';
							v += ico + ' <strong>'+title+'</strong>';
						v += '</li>';

					return v;
				}
			}

			var _viewModel = {
				setType: function() {
					$('#'+_namespace+'_type').val(_dataObj.type);
				},
				getScoped: function() {
					var v = '',
						_scopeHash = ['extensions','loadrules','tags','data_layer_specs'],
						_dataLayerSpecs = utui.define.dataLayerSpecs.getCurrentDataLayerSpecs();


						v += '<ul id="'+_namespace+'_scopeListing" class="ds-scope-listing">';
					for(var entry in _dataObj) {
						if(!_dataObj.hasOwnProperty(entry)) continue;

						if(_scopeHash.indexOf(entry) > -1 && _dataObj[entry].length > 0) {
							var listOfIds = _dataObj[entry],
								title;

								for (var i = 0; i < listOfIds.length; i++) {
									var id = listOfIds[i];

									switch(entry) {
										case _scopeHash[2]:
											title = utui.data.manage[id].title;
											break;
										case _scopeHash[0]:
											title = utui.data.customizations[id].title;
											break;
										case _scopeHash[1]:
											title = utui.data.loadrules[id].title;
											break;
										case _scopeHash[3]:
											title = _dataLayerSpecs[id].title;
											break;
									}

									v += _view.rowItem(title, entry);
								}
						}
					}
						v += '</ul>';

					return v;
				}
			}

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				},
				onRemoveBtnClick: function () {
					var dataKey = _dataObj.type + '.' + _dataObj.name;
					var ds = dsapi.getDataSource(dataKey);
					var id = ds.id,
						title = ds.name,
						type = ds.type,
						imported = ds.imported,
						settings = ds.settings;

					if (_removeDataSource(_dataObj.name, _dataObj.type)) {

						// Remove Data Source
						$('#datasources_' + _dataId).remove();

						utui.profile.setActionPerformed({
							action : utui.constants.variables.REMOVED,
							data : {
								id : id,
								name : title,
								type : type,
								imported : imported,
								library : (imported) ? settings.profileid : '',
								kind : utui.constants.variables.TYPE,
								operation : utui.constants.operation.REMOVED
							}
						}, true);

						_hideAccordion();
						utui.util.pubsub.publish(utui.constants.variables.REMOVED, _dataObj);
					}

					utui.ui.dialog.dispose(_namespace);
				},
				onOkBtnClick: function () {
					utui.ui.dialog.dispose(_namespace);
				}
			}

			var _public = {
				// ----------------------------------------------------
				show: function(dataId) {
					var buttons;

					_dataId = dataId;
					_dataObj = dsapi.getDataSource(dataId);

					_render.content();

					// Dialog buttons
					if(dsapi.isDataSourceScoped(_dataId)) {
						buttons = [
							{
								text: localize.t('tiq.dialog.button.ok'),
								click: _eventHandlers.onOkBtnClick,
								id: _namespace + 'OkBtn',
								class: 'nav-btn'
							}
						];
					} else {
						buttons = [
							{
								text: localize.t('tiq.dialog.button.cancel'),
								click: _eventHandlers.onCloseBtnClick,
								style: 'float:left; margin-left: 12px',
								id: _namespace + 'CloseBtn'
							},
							{
								text: localize.t('tiq.dialog.button.remove'),
								click: _eventHandlers.onRemoveBtnClick,
								id: _namespace + 'RemoveBtn',
								class: 'nav-btn'
							}
						];
					}

					var title = _dataObj.title || _dataObj.name;

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.datasources.confirm_remove', {name:utui.util.safeEscape(title)}), buttons, _$template, {width:500,height:200});
					_viewModel.setType();
				}
			}

			return _public;
		}()
	}

	// --------------------------------------------------
	function _updateDataSource(oldObj, newObj, id) {
		var catHash = ['js', 'js_page', 'meta', 'qp', 'cp'];

		if (dsapi.updateDataSource(oldObj, newObj, id)) {
			var $obj = $('#datasources_' + id),
				typeLabel = _getDataSourceTypeName(newObj.type),
				typeIcon = _view.dataSourceIcon(newObj.type),
				title = newObj.title || newObj.name,
				$expandedView = $('.tetrisExpandedView');

			var truncatedTitle = utui.util.truncate(title, (_setView === "tile") ? TRUNCATE_TITLE_TILE : TRUNCATE_TITLE_ROW);

			// Update element UI
			$obj.find('.type').html(typeLabel);
			$obj.find('.ico').html(typeIcon);
			$obj.find('.title').html(utui.util.safeEscape(truncatedTitle)).attr('title', title);
			$obj.find('.name').html(utui.util.safeEscape(newObj.name));
			$obj.find('.desc').html(utui.util.safeEscape(newObj.desc));

			if (!newObj.title) {
				$obj.find('.title').addClass('emptySection');
			} else {
				$obj.find('.title').removeClass('emptySection');
			}

			$obj.data('category', 'type');
			$obj.attr('data-category', newObj.type);

			// Update accordion UI (if expanded)
			$expandedView.find('.title').html(utui.util.safeEscape(newObj.title)).attr('title', newObj.title);
			$expandedView.find('.name').html(utui.util.safeEscape(newObj.name)).attr('title', newObj.name);
			$expandedView.find('.type').html(utui.config.defineOptions[newObj.type] || '');
			$expandedView.find('.desc').html(utui.util.safeEscape(newObj.desc)).attr('title', newObj.desc);

			newObj.id = id;
			newObj.title = newObj.title || newObj.name;

			var tagging = _createTaggingObject(newObj, utui.constants.tagging.CREATED_COMPLETED);
            tagging.tealium_event = utui.constants.tagging.EDIT;
            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);

            // Update element class for filtering
			for (var i in catHash) {
				$obj.removeClass(catHash[i]);
			}
			$obj.addClass(newObj.type);
		}
	}

	// --------------------------------------------------
	function _addDataSource(id, title, name, type, desc, bundleObj) {
		var dataKey = type + '.' + name,
			description = desc || '',
			v = '';

		// Attempt to add data source.  If TRUE, data source has been added
		if (dsapi.addDataSource(id, title, name, type, description, undefined, undefined, undefined, bundleObj)) {

			// Get added datasource
			var ds = dsapi.getDataSource(dataKey);

			// store datasource properties in template
			v += _view.element(ds.title, ds.name, ds.type, ds.description, ds.id, 0);

			// append into list
			var selector = $(v);
			_insertionSort(selector);

			// assign data to first row (since we're prepending it);
			$('#datasources_'+ds.id).attr('data-row',0);
			$('#datasources_'+ds.id).data('row',0);

			$('#datasources_'+ds.id).attr('data-tile-key',ds.id);
			$('#datasources_'+ds.id).data('tile-key',ds.id);

			// re-render accordion layout
			_tetris.render();
            utui.util.pubsub.publish(utui.constants.variables.ADDED, {action:utui.constants.variables.ADDED, type: ds.type, dataKey: dataKey });

            var dataSourceTagging = _createTaggingObject(ds, utui.constants.tagging.CREATED_COMPLETED);
            dataSourceTagging.tealium_event = utui.constants.tagging.CREATED_COMPLETED;
            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, dataSourceTagging);

			dsapi.publishDataSourceAddedEvent(ds);
			return;
		}

		return false;
	}

	function _createTaggingObject(ds, event) {
        var tagging = { action:utui.constants.tagging.TAGGING,
			resource_type: utui.constants.variables.TYPE.toLowerCase(),
			isLinkType : true
        };

        if (utui.constants.tagging.CREATED_STARTED === event) {
            tagging.tealium_event = utui.constants.tagging.CREATED_STARTED;
        } else if (utui.constants.tagging.CREATED_COMPLETED === event) {
            tagging.tealium_event = utui.constants.tagging.CREATED_COMPLETED;
            tagging.variable_type = ds.type;
            tagging.resource_id = ds.id;
            tagging.variable_name = ds.name;
        }
		return tagging;
    }

	// --------------------------------------------------
	function _insertionSort( elem ) {
		var DOMitems = $container.find('.viewItem'),
			DOMitems_copy = DOMitems.toArray(),  // Duplicate DOMitems
			position = 0;

		DOMitems_copy.push(elem[0]);
		DOMitems_copy.sort(_dynamicDOMSort(String('data-title')));

		position = DOMitems_copy.indexOf(elem[0]);
		if (position === DOMitems.length) {
			$container.append(elem);
		} else {
			elem.insertBefore(DOMitems[position]);
		}
	}

	// --------------------------------------------------
	function _dynamicDOMSort(property) {
		var sortOrder = 1;
		if(property[0] === "-") { // Sort in Descending Order i.e. '-title'
			sortOrder = -1;
			property = property.substr(1);
		}
		return function (a,b) {
			var aValueLowered = $(a).attr(property).toLowerCase();
			var bValueLowered = $(b).attr(property).toLowerCase();
			var result = (aValueLowered < bValueLowered) ? -1 : (aValueLowered > bValueLowered) ? 1 : 0;
			return result * sortOrder;
		}
	}


	// --------------------------------------------------
	// @param (dataCollection) object
	//
	// dataCollection = { 0: {name, type, desc }, 1: {name, type, desc } };
	function _addBulkDataSource(dataCollection) {
		var collectionSize = utui.util.sizeOf(dataCollection),
			addBulkItems = function(nextId) {
				var toBeAddedCollection = [], //collects all datakeys to be added on DOM
					_c = 0,
					v = '',
					$selector,
					dsObj;

				if(typeof dataCollection !== 'object') return false;

				function isValidEntry(obj) {
					var props = ['name','type','desc'];

					for (var i = props.length - 1; i >= 0; i--) {
						if(!obj.hasOwnProperty(props[i])) return false;
					};

					return true;
				}

				for(var i in dataCollection) {
					if(!dataCollection.hasOwnProperty(i)) continue;

					var dataEntry = dataCollection[i];

					// Validate each entry
					if(!isValidEntry(dataEntry)) return false;

					var title = dataEntry.title,
						name = dataEntry.name,
						type = dataEntry.type,
						desc = dataEntry.desc,
						dataKey = type + '.' + name,
						id = nextId + _c;

					// Add to dataobject; then later inject into view after everything has been added.
					if(dsapi.addDataSource(id, title, name, type, desc)) {
						toBeAddedCollection.push(dataKey);
						utui.util.pubsub.publish(utui.constants.variables.ADDED, {action:utui.constants.variables.ADDED, type: type, dataKey: dataKey });
					}

					_c += 1;
				}

				for (var i = toBeAddedCollection.length - 1; i >= 0; i--) {
					dsObj = dsapi.getDataSource(toBeAddedCollection[i]);

					// store datasource properties in template
					v += _view.element(dsObj.title, dsObj.name, dsObj.type, dsObj.description, dsObj.id, 0);
				};

				// Append to Selector
				$selector = $(v);
				$container.append($selector);

				_tetris.render();

				return;
			}

		_getNextId.fromServer(collectionSize, null,
			function(providedLastId, count, nextId) {
				addBulkItems(nextId);
			},
			function(nextId) {
				addBulkItems(nextId);
			});
	}


	// --------------------------------------------------
	function _removeDataSource(name, type) {
		if (!dsapi.isValidDataSourceNameSyntax(name)) {
			if (type === null) return false;
		}

		// Attempt to remove data source.  If TRUE, data source has been removed
		if (dsapi.removeDataSource(name, type)) {
			return true;
		}

		return false;
	}

	// -------------------------------------------------------
	function _isDataSourceInputValid(container, defineObj, dialogNamespace) {
		var $editName = $('#' + container + '_editname'),
			obj = defineObj,
			extensionVars = {},
			invalidNameMsg = _public.isInvalidVariableName(obj.name, obj.type);

		_public.lastAdded = [];

		// If inputs are empty, return false
		if(obj.title.length + obj.name.length + obj.desc.length === 0) return false;

		// Get existing added data sources
		for (var i in utui.data.define) {
			if (utui.data.define[i].type === obj.type) {
				extensionVars[utui.data.define[i].name] = 1;
			}
		}

		// If name validation fails, halt
		if (invalidNameMsg) {
			$editName.focus();
			utui.ui.dialog.message.showError(dialogNamespace, invalidNameMsg);
			return false;
		}

		// If variable already exists, halt
		if (typeof extensionVars[obj.name] !== 'undefined') {
			invalidNameMsg = _duplicateNameError;
			$editName.select();
			utui.ui.dialog.message.showError(dialogNamespace, invalidNameMsg);
			return false;
		}

		return true;
	}

	// --------------------------------------------------
	function _setContainerOnWindowResize() {
		var consoleWidth = $('#tabs-define').width();
		$('#tabs-define').find('.utui-tab-content').width(consoleWidth - 230);
	}

	//----------------------------------
	// @param "viewType" - grid || list
	function _setViewState(viewType) {
		var localData = utui.util.safeParseJSON(utui.util.storage.loadLocal(utui.login.email));
    
    localData.tabState = localData.tabState || {};
    localData.tabState['define'] = localData.tabState['define'] || {};
    
		localData.tabState['define'].itemview = viewType;

		utui.util.storage.storeLocal(utui.login.email, JSON.stringify(localData));
	}

	// ----------------------------------------------------
	function _renderViewState() {
		if(typeof utui.util.storage.loadLocal(utui.login.email) === 'undefined') return;

		var localData = utui.util.safeParseJSON(utui.util.storage.loadLocal(utui.login.email));

		if(localData && localData.hasOwnProperty('tabState')) {
			if(localData.tabState['define'].itemview) {

				switch(localData.tabState['define'].itemview) {
					case 'row':
						$('#dataSources_listViewBtn').trigger('click');
						break;
					case 'grid':
					default:
						$('#dataSources_gridViewBtn').trigger('click');
				}
			}
		}
	}

	// --------------------------------------------------
	function _init() {
		_viewModel.setFilters();
		_viewModel.setLabelFilters();
		_viewModel.appendItems();
		_viewModel.mappingCount();
		_viewModel.addFilterValues();
		_viewModel.setFilterQty();
		_viewModel.noItemsToShow();
		_viewModel.showHelpTab();

		_renderViewState();
	}

	// --------------------------------------------------
	function _initModalView(listType) {
		_listType = listType;
		return _viewModel.appendModalItems(listType);
	}

	// --------------------------------------------------
	function _render() {
		_tetris.render();
		_bindUI.initialize();
	}

	function _updateInheritedHistoryEvent(data, dataKey, forceRemoveEvent) {
		var ds = dsapi.getDataSource(dataKey);
		
		//protective code against failing and causing the spinner to keep showing
		if (ds === null) {
			return;
		}
		// Update history and show change status
		var options = {
			new_id: "" + ds.id,
			name: ds.name,
			type: ds.type
		};
		utui.profile.import.updateImportedHistory(data, utui.constants.variables.TYPE, options, forceRemoveEvent);
	}

    // ----------------------------------------------
	var _getNextId = {

        _nextId : 0,

        _getLocalLastId: function() {
            var maxId = 0,
                lastSettingsId = utui.data.settings.lastdefineid;

            if (typeof lastSettingsId !== 'undefined'){
                maxId = +lastSettingsId || 0; // Avoid a NaN if it's empty...
            }

            for(var i in utui.data.define) {
                var num = +i;

                if(num > maxId) {
                    maxId = num;
                }
            }

            return utui.data.settings.lastdefineid = (this._nextId > maxId) ? this._nextId - 1 : maxId;
        },

        fromServer: function(numOfInstances, importCount, successCallback, failureCallback) {
            var requestOptions = { timeout : 5000 },
                providedLastId = _getNextId._getLocalLastId(),
                url = utui.service.addParamsToURL(utui.service.restapis.GET_NEXT_ID, {type : 'datasource'}),
                newId,
                dataObj;

            utui.util.showSpinner();

            if(importCount) {
                requestOptions = {timeout : 5000, async: false};
            }

            dataObj = {
                provided_last_id : providedLastId,
                count : (numOfInstances ? numOfInstances : 1)
            };

            utui.service.get( url, dataObj, requestOptions,
                function(data) {
                    this._nextId = data.next_unique_id;

                    if(successCallback) successCallback(data.provided_existing_last_id, data.count, this._nextId);
                    utui.util.hideSpinner();
                },
                function() {
                    newId = _getNextId.fromLocal();
                    if(failureCallback) failureCallback(newId);
                    utui.util.hideSpinner();
                }
            );
        },

        fromLocal: function() {
            return _getNextId._getLocalLastId() + 1;
        },

        reset: function() {
            this._nextId = 0;
            this._getLocalLastId();
        }
    };

	// -----------------------------------------------------
	// PUBLIC
	// -----------------------------------------------------
	var _public = {

		/*
		 * utui.publish.js
		 */
		id: 'define',
		index: 1,
		importedVADefineMap: {},
		types: {
			CP: 'cp',
			JS: 'js',
			JS_PAGE: 'js_page',
			META: 'meta',
			QP: 'qp',
			VA: 'va'
		},

		/*
		 * utui.manage.js
		 */
		lastAdded: [],

		/*
		 * utui.profile.js
		 */
		init: function () {
			utui.util.pubsub.subscribe(utui.constants.variables.ADDED, _pubsubHandlers.onDataSourceAdded);
			utui.util.pubsub.subscribe(utui.constants.variables.REMOVED, _pubsubHandlers.onDataSourceRemoved);
			utui.util.pubsub.subscribe(utui.constants.labels.ADDED, _pubsubHandlers.onLabelAdded, this);
			utui.util.pubsub.subscribe(utui.constants.labels.REMOVED, _pubsubHandlers.onLabelRemoved, this);
			utui.util.pubsub.subscribe(utui.constants.labels.CHANGED, _pubsubHandlers.onLabelChanged, this);
			utui.util.pubsub.subscribe(utui.constants.labels.MENU_OPENING, _pubsubHandlers.onLabelMenuOpening, this);
			utui.util.pubsub.subscribe(utui.constants.labels.MENU_CLOSING, _pubsubHandlers.onLabelMenuClosing, this);
			utui.util.pubsub.subscribe(utui.constants.labels.ASSIGNED, _pubsubHandlers.onLabelAssigned, this);
			utui.util.pubsub.subscribe(utui.constants.labels.UNASSIGNED, _pubsubHandlers.onLabelUnAssigned, this);
			utui.util.pubsub.subscribe(utui.constants.variables.FOCUSED, _pubsubHandlers.onFocusedDataSource, this);

			if (typeof utui.data.define === 'undefined') {
				utui.data.define = {};
			}

			_public.importedVADefineMap = {};

			//get the latest customize id
			var idSort = utui.util.getVars(utui.data.define, 3, '_id');

			for (var i in idSort) {
				if(!idSort.hasOwnProperty(i)) continue;

				var ds = idSort[i],
					dataName = ds.name,
					dataType = ds.type,
					dataKey = '',
					dataValue = '',
					dataId = ds._id,
					settings = ds.settings;

				if (_public.index <= dataId) {
					_public.index = dataId;
					_public.index++;
				}

				if (dataType === 'va') {
					if (ds.context !== 'visitor') {
						dataKey = dataType + '.' + ds.context + '.' + settings.origin_type + '.' + settings.origin_id;
						// dataValue = dataType + '.' + ds.context + '.' + settings.origin_type + '.' + dataName;
						dataValue = dataName;
					}
					else {
						dataKey = dataType + '.' + settings.origin_type + '.' + settings.origin_id;
						// dataValue = dataType + '.' + settings.origin_type + '.' + dataName;
						dataValue = dataName;
					}
					_public.importedVADefineMap[dataKey] = dataValue;
				}
			}

			// Acts like a deconstructor
			function clearDOM() {
				$('#defineObjectsList').empty();
			}

			_getNextId.reset();

			utui.util.pubsub.subscribe(utui.constants.views.TAB_CLICK, clearDOM);
		},

		/*
		 * core.footer.js
		 */
		load: function (a) { },

		/*
		 * utui.profile.import.js
		 * utui.profile.js
		 * utui.users.js
		 */
		show: function () {
			// Request data layer specs then draw data sources
			utui.define.dataLayerSpecs.loadDataLayerSpecs(function () {
				var $dataLayerSpecsTab = $templateContext.find('#data_layer_data_layer_specifications_menu');
				if ($dataLayerSpecsTab.parent('li').hasClass('selected')) {
					$dataLayerSpecsTab.trigger('click');
				} else {
					// Initialize size
					_setContainerOnWindowResize();

					dsapi.initialize();
					utui.define.initialize();

					_renderViewState();

					utui.profile.showAllModifiedTabLabels(utui.constants.variables.TYPE);
				}

				// Fetch test configs
				utui.siteVerify.loadTestConfigs();
			});
		},

		showModalView: function (listID, listType) {
			var $select2list = $('#' + listID);
			$select2list.select2('close');

			var $template = utui.ui.dialog.body(true, true),
				content = '';

			// header
			content += '<div id="modal_defineContainer_headerControls">';
			content += '    <div class="header-inner">';
			content += '        <div style="float:left; width:600px;">';
			content += '            <a id="modal_dataSources_gridViewBtn" class="btn datasources-toggleview selected"><i class="icon-th"></i></a>';
			content += '            <a id="modal_dataSources_listViewBtn" class="btn datasources-toggleview"><i class="icon-align-justify"></i></a>';
			content += '            <div id="modal_dataSources_filterSearch_container">';
			content += '                <label><input type="text" name="modal_dataSources_filterSearch" id="modal_dataSources_filterSearch_input" placeholder="' + localize.t('tiq.datasources.search_placeholder') + '"/><i class="icon-search"></i></label>';
			content += '                <div id="modal_dataSources_filterSearch_results"></div>';
			content += '            </div>';
			content += '        </div>';
			content += '    </div>';
			content += '</div>';
			content += '<div class="container-fluid" id="modalDefineContainer_listheader">';
			content += '    <div class="row-fluid utui-table-header">';
			content += '        <div class="span3">';
			content += '            <div class="utui-table-header-data">' + localize.t('tiq.datasources.source_alias') + '</div>';
			content += '        </div>';
			content += '        <div class="span3">';
			content += '            <div class="utui-table-header-data">' + localize.t('tiq.datasources.notes') + '</div>';
			content += '        </div>';
			content += '        <div class="span3">';
			content += '            <div class="utui-table-header-data">' + localize.t('tiq.datasources.labels') + '</div>';
			content += '        </div>';
			content += '    </div>';
			content += '</div>';
			// append header content
			$template.find('.dialog-content-header').html(content);

			// body
			content = '';
			content += '<div id="modalDefineContainer">';
			content += '    <div id="modal_define_scroll_container">';
			content += '        <div id="modal_define">';
			content += utui.define.initializeModalView(listType);
			content += '        </div>';
			content += '    </div>';
			content += '</div>';
			// append body content
			$template.find('.dialog-content-body').html(content).css({'height':'425px'});

			// context
			content = '';
			content += '<div class="utui-tab-context">';
			content += '    <div class="tertiaryTabsTitle">' + localize.t('tiq.datasources.filter') + '</div>';
			content += '    <ul id="modal_ds_filter_checklist"></ul>';
			content += '    <ul id="modal_label_filter_checklist"></ul>';
			content += '</div>';
			// append context content
			$template.find('.dialog-context-body').html(content);

			var $dial = utui.ui.dialog.show("modal_define_dialog", localize.t('tiq.datasources.select_a_datasource'), [], $template, {width:1000, open: function(){ utui.define.renderModalView($select2list); }});
		},

		/*
		 * utui.profile.import.js
		 * NOTE: other adjacent tabs have this too.
		 */
		
		generateNextUniqueServerIds: function(count, cb) {
			var that = this;
      _getNextId.fromServer(count, true,
        function(providedLastId, count, nextId) {
          that._nextId = nextId;
          that._generatedIds = count;
      		if (cb) cb(nextId);
        },
        function(nextId) {
          that._nextId = nextId;
          that._generatedIds = 1;
          if (cb) cb(nextId);
        });
		},
    
    addBulkImportedItems: function(data, dataItems) {
      var that = this;
      
			_.each(dataItems, function(val){
        that.addImportedItem(val,data);
			});
			
		},
		
		addImportedItem : function(obj, data) {
			var _title = obj.title,
				_name = obj.name,
				_type = obj.type,
				_dataKey = _type + '.' + _name;

			utui.profile.import.setImportOriginId(obj, obj._id);

			// Ensure that imported data sources have unique names
			// native data sources take precedence over imported data sources
			for(var i in utui.util.getVars(utui.data.define)) {
				var dataSource = utui.data.define[i];
				if (dataSource && dataSource.name == _name && dataSource.type == _type) {
					utui.profile.import.libraryQueue.numDataSources--;
					_updateInheritedHistoryEvent(data, _dataKey, true);
					return;
				}
			}
			
			if (this._generatedIds !== undefined && this._generatedIds > 0) {
        this._generatedIds--;
        dsapi.addDataSource(this._nextId++, _title, _name, _type, obj.description, obj.imported, obj.settings, obj.context, obj.bundle);
			} else {
				this.generateNextUniqueServerIds(1, function(nextId) {
          dsapi.addDataSource(nextId, _title, _name, _type, obj.description, obj.imported, obj.settings, obj.context, obj.bundle);
        })
			}

			// Update history and show change status
			_updateInheritedHistoryEvent(data, _dataKey);
		},
		/*
		 * utui.diff.js
		 */
		addStashedItem : function(obj) {
			// Since stash ids are already unique, we do not need to create new IDs
			dsapi.addDataSource(obj._id, obj.title, obj.name, obj.type, obj.description, undefined, undefined, undefined, undefined, obj);

			// Update "Not Saved" and add to history
			utui.util.pubsub.publish(utui.constants.variables.ADDED, {action:utui.constants.variables.ADDED, type: obj.type, dataKey: obj.type + '.' + obj.name });
		},

		/*
		 * utui.profile.import.js
		 */
		dropVariable: function (obj, isOnProfileLoad, bBypassHistoryEvent) {
			dsapi.removeDataSource(obj.type + '.' + obj.name, obj.type);

			var id = obj.id,
				title = obj.name,
				type = obj.type,
				imported = obj.imported,
				settings = obj.settings;

			if(!bBypassHistoryEvent) {

				utui.profile.setActionPerformed({
					action : utui.constants.variables.REMOVED,
					data : {
						id : id,
						name : title,
						type : type,
						imported : imported,
						library : (imported) ? settings.profileid : '',
						kind : utui.constants.variables.TYPE,
						operation : utui.constants.operation.REMOVED
					}
				}, true, null, isOnProfileLoad);
			}
		},

		/*
		 * utui.customizations_template.js
		 * utui.manage.js
		 * utui.loadrules.viewmodel.js
		 */
		isInvalidVariableName: function (str, type) {
			if (str === '') {
				return localize.t('tiq.datasources.error.name_cannot_be_blank') + "<br/>";
			}
			if (/^\.|\.$/.test(str) && type === _constants.JS_PAGE) {
				return localize.t('tiq.datasources.error.invalid_chars_in_js_name') + "<br/>";
			}
			if (_cookieInvalidCharactersRegex.test(str) && type === _constants.CP) {
				return _cookieInvalidNameMsg + '<br/>';
			}
			if (_invalidCharactersRegex.test(str) && (type === _constants.JS || type === _constants.QP || type === _constants.JS_PAGE || type === _constants.VA)) {
				return _invalidNameMsg + '<br/>';

			}
			return false;
		},


		/*
		 * utui.customizations_template.js
		 * utui.manage.js
		 *
		 * Dialog Initialization
		 */
		showAddMore: function (container, type, setContainer, calledFrom, callback) {
			return _dialogs.addDataSourceDialog.show(container, type, setContainer, calledFrom, callback);
		},

		//----------------------------------------------------
		initialize: function() {
			_init();
			_render();
		},

		//----------------------------------------------------
		initializeModalView: function(listType) {
			dsapi.initialize();
			return _initModalView(listType);
		},

		//----------------------------------------------------
		renderModalView: function($select2list) {
			_tetris.updateLayout();

			_viewModel.setFilters();
			_viewModel.setLabelFilters();
			_viewModel.mappingCount();
			_viewModel.addFilterValues();
			_viewModel.setFilterQty();

			_bindUI.filterChkbox();
			_bindUI.viewListModalBtn();
			_bindUI.viewTileModalBtn();
			_bindUI.filterModalInput($select2list);
			_bindUI.modalDataSourceElementClick($select2list);
			// label hover menus
			_bindUI.labelHoverLists();

			// increase z-index to keep checkboxes and search inputs functional
			$('#modal_define_dialog .utui-tab-context, #modal_dataSources_filterSearch_input').css('z-index', $.ui.dialog.maxZ);

			// default to list view layout
			$('#modal_dataSources_listViewBtn').trigger('click');
		},

		//----------------------------------------------------
		// addDataSource('cVar3', 'cp', "This is a cookie that was added...");
		addDataSource: _addDataSource,

		//----------------------------------------------------
		// updateDataSource({ name: 'oldCVar', type:'cp', desc:'This is a cookie' }, { name: 'newCVar', type:'cp', desc:'This is a cookie' }, 3);
		updateDataSource: _updateDataSource,

		//----------------------------------------------------
		getReadOnlyPropertiesView: function(dataObj, mainDataObj) {
			var _name = dataObj.name,
				_desc = dataObj.description || '',
				_type = dsapi.getTypeAlias(dataObj.type),
				_id = dataObj._id,
				_labels = _getInterpretedLabelName(dataObj.labels),
				_alias = dataObj.title || '';

			function _getInterpretedLabelName(labelValue) {
				var labelNameCollection = [],
					labelId,
					labelName,
					_dataObj = mainDataObj || utui.data,
					multipleLabels;

				if(labelValue === undefined) return '';

				if(~labelValue.indexOf(',')) {
					multipleLabels = labelValue.split(',');

					for (var i = 0; i < multipleLabels.length; i++) {
						labelId = multipleLabels[i];
						labelName = _dataObj.labels[labelId].name;

						labelNameCollection.push(labelName);
					};

					return labelNameCollection.join(', ');
				}
				else if(labelValue.length > 0) {
					labelId = labelValue;

					return _dataObj.labels[labelId].name;
				}

				return '';
			}

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.properties')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.datasources.id')+':</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, '_id', _id);
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.datasources.source')+':</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'name', _name);
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.datasources.type')+':</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'type', _type);
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								// Note: shouldn't be applicable for extensions since order is also dependent on scoping
								v += '<span class="inline-label">'+localize.t('tiq.datasources.notes')+':</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'description', _desc);
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.datasources.alias')+':</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'title', _alias);
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.datasources.labels')+':</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'labels', _labels);
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		},

		//----------------------------------------------------
		// addBulkDataSource({ 0: { name: 'hello', type: 'js', desc: 'one' }, 1: { name: 'hello2', type: 'js', desc: 'two' }, 2: { name: 'hello3', type: 'js', desc: 'three' } });
		addBulkDataSource: function(dataCollection) {
			return _addBulkDataSource(dataCollection);
		},
		refreshFilterCount: function() {
			_viewModel.setFilterQty();
		},

		getDataSourceIconView: function (type) {
			return _view.dataSourceIcon(type);
		},

		getDataSourceMappingItemView: function (obj, namespace, missingIcon) {
			return _view.dataSourceMappingItem(obj, namespace, missingIcon);
		},

		//----------------------------------------------------
		getNextId: _getNextId
	}

	return _public;
}();

utui.define.dataLayerSpecs = function () {
//	"use strict";
	// PRIVATE
	// --------------------------------------------------------
	var _namespace = 'data_layer_spec',
		_$header = $('#tabs-define').find('#tabs_data_layer_spec'),
		_containerList = 'data_layer_spec_list',
		_$content = $('#tabs-define').find('#' + _containerList);


	// --------------------------------------------------------
	function _showHelpTab() {
		var _articles = [
				{
					id: 0,
					title: localize.t('tiq.datasources.specs.resource.what_are_specs'),
					type: 'document',
					linkHref: common.community.verify_data_layer_data_layer_specs,
					isExternalLink: true
				}
			],
			_context = {
				header: localize.t('tiq.datasources.specs.resource.data_layer_specs'),
				body: localize.t('tiq.datasources.specs.resource.data_layer_specs_intro')
			};

		utui.help.initHelpTab(_namespace, _articles, _context);
	}

	// --------------------------------------------------------
	// @param "viewType" - tile || row
	function _setViewState(viewType) {
		var localData = utui.util.safeParseJSON(utui.util.storage.loadLocal(utui.login.email));
    
    localData.tabState = localData.tabState || {};
    localData.tabState[utui.define.dataLayerSpecs.id] = localData.tabState[utui.define.dataLayerSpecs.id] || {};
		localData.tabState[utui.define.dataLayerSpecs.id].itemview = viewType;

		utui.util.storage.storeLocal(utui.login.email, JSON.stringify(localData));
	}

	// --------------------------------------------------------
	function _getViewState() {
		var view = 'row'; // default to row view
		if (typeof utui.util.storage.loadLocal(utui.login.email) === 'undefined') {
			return view;
		}

		var localData = utui.util.safeParseJSON(utui.util.storage.loadLocal(utui.login.email));
		if (localData && localData.hasOwnProperty('tabState') && localData.tabState.hasOwnProperty(utui.define.dataLayerSpecs.id)) {
			if (localData.tabState[utui.define.dataLayerSpecs.id].itemview) {
				view = localData.tabState[utui.define.dataLayerSpecs.id].itemview;
			}
		}

		return view;
	}

	// --------------------------------------------------------
	function _hideAccordion() {
		_$content.find('.viewItem').removeClass('selected not-selected');
		_tetris.removeExpandedView();
	}

	// --------------------------------------------------------
	function _getDataSpecDataKey($el, context) {
		if (!context) {
			return $el.attr('data-tile-key');
		}

		return $el.closest('.' + context).attr('data-tile-key');
	}

	// --------------------------------------------------------
	function _reset() {
		_public.data_layer_specs = null;
		_public.deleted_data_layer_specs = {};
	}

	// --------------------------------------------------------
	function _getVisibleDataLayerSpecs() {
		var $visibleDataLayerSpecs = _$content.find('.viewItem:visible'),
			dataSpecArray = [],
			id;

		$visibleDataLayerSpecs.each(function (e) {
			id = $(this).data('tile-key');
			if (typeof id !== 'undefined') {
				dataSpecArray.push(_public.data_layer_specs[id]);
			}
		});

		dataSpecArray.sort(_dynamicSort(String('title')));

		return dataSpecArray;
	}

	// --------------------------------------------------------
	function _dynamicSort(property) {
		var sortOrder = 1;
		if (property[0] === "-") { // Sort in Descending Order i.e. '-name'
			sortOrder = -1;
			property = property.substr(1);
		}

		return function (a, b) {
			var aValueLowered = a[property].toLowerCase(),
				bValueLowered = b[property].toLowerCase(),
				result = (aValueLowered < bValueLowered) ? -1 : (aValueLowered > bValueLowered) ? 1 : 0;

			return result * sortOrder;
		};
	}

	// --------------------------------------------------------
	function _expandSelectedDataLayerSpec(id) {
		if (id) {
			var $dataLayerSpec = _$content.find('#' + _namespace + '_' + id),
				$container = _$content.closest('#' + _namespace + '_container');

			// Expand selected data layer spec
			$dataLayerSpec.trigger('click');

			// Scroll to selected data layer spec
			setTimeout(function () {
				$container.animate({
					scrollTop: $dataLayerSpec.offset().top - $container.offset().top + $container.scrollTop()
				}, 'slow');
			}, 300);
		}
	}

	// --------------------------------------------------------
	function _isTestConfigAssigned(id, testConfigs) {
		return $.grep(testConfigs, function (el) {
			return el.id == id;
		}) != 0;
	}

	// --------------------------------------------------------
	function _removeTestConfig(id, testConfigs) {
		$(testConfigs).each(function (i, el) {
			if (el.id == id) {
				testConfigs.splice(i, 1);
				return false;
			}
		});
	}

	// --------------------------------------------------------
	var _eventHandlers = {
		// --------------------------------------------------------
		onAddDataSpecificationBtnClick: function () {
			utui.define.dataLayerSpecs.showAddMore('create');
		},

		// --------------------------------------------------------
		onAddDataSpecificationDropdownBtnClick: function () {
			TRACE('*onAddDataSpecificationDropdownBtnClick');
		},

		// --------------------------------------------------------
		onFilterSearchInput: function (event) {
			var input = _.escape($(this).val().toLowerCase()),
				objInView,
				resultsCount = 0,
				matchFound = false,
				$searchResults = _$header.find('#' + _namespace + '_filterSearch_results'),
				v = '';

			// we want to parse the data-tile-key from each element visible on screen, then fetch its data object
			objInView = _getVisibleDataLayerSpecs();
			// Show search results
			$searchResults.show();
			utui.util.openModal($searchResults);

			if (input.length > 0) {
				resultsCount = 0;
				v += '<div class="row-fluid">';

				for (var entry in objInView) {
					if (!objInView.hasOwnProperty(entry)) continue;

					var dataLayerSpec = objInView[entry],
						title = dataLayerSpec.title ? dataLayerSpec.title.toLowerCase() : '',
						desc = dataLayerSpec.description ? dataLayerSpec.description.toLowerCase() : '',
						uid = '' + dataLayerSpec.id,
						dataSources = dataLayerSpec.data_sources,
						dataSourcesLength = dataSources.length,
						dataSourcesObj,
						dataKey,
						matchedDataSources = [];

					if (title.indexOf(input) > -1) {
						resultsCount++;
						matchFound = true;
					} else if (desc.indexOf(input) > -1) {
						resultsCount++;
						matchFound = true;
					} else if (uid.indexOf(input) > -1) {
						resultsCount++;
						matchFound = true;
					}
					for (var i = 0; i < dataSourcesLength; i++) {
						dataSourcesObj = dataSources[i];
						dataKey = dataSourcesObj.type + '.' + dataSourcesObj.source;
						dataSourcesObj = dsapi.getDataSource(dataKey);
						if (dataSourcesObj.title.toLowerCase().indexOf(input) > -1) {
							resultsCount++;
							matchFound = true;
							matchedDataSources.push({
								source: dataSourcesObj.title,
								type: dataSourcesObj.type,
								className: ''
							});
						} else if (dataSourcesObj.name.toLowerCase().indexOf(input) > -1) {
							resultsCount++;
							matchFound = true;
							matchedDataSources.push({
								source: dataSourcesObj.name,
								type: dataSourcesObj.type,
								className: ' ds-name'
							});
						}
					}

					if (matchFound) {
						v += _view.filterResultItem(dataLayerSpec, matchedDataSources, input);
						matchFound = false; // reset match found
					}
				}

				if (resultsCount === 0) {
					v += _view.filterNoResultsFound(input);
				}
				v += '</div>';

				$searchResults.html(v);
				return;
			}
			$searchResults.html('');
		},

		// --------------------------------------------------------
		onFilterSearchResultClick: function (event) {
			var id = $(this).attr('data-id'),
				$searchResults = _$header.find('#' + _namespace + '_filterSearch_results');

			// Hide search results and expand selected data layer spec
			$searchResults.fadeOut();
			utui.util.closeModal();
			_expandSelectedDataLayerSpec(id);
		},

		// --------------------------------------------------------
		onGridViewBtnClick: function () {
			_setViewState('tile');
			// Highlight gridView button
			_$header.find('.' + _namespace + '-toggleview').removeClass('selected');
			$(this).addClass('selected');

			_$header.find('.accordion_header').slideUp();
			_hideAccordion();

			// Render grid layout
			_$content.find('.viewItem').removeClass('ds-row tetristile').addClass('ds-tile');
			_tetris.updateLayout();
		},

		// --------------------------------------------------------
		onListViewBtnClick: function () {
			_setViewState('row');
			// Highlight listView button
			_$header.find('.' + _namespace + '-toggleview').removeClass('selected');
			$(this).addClass('selected');

			_$header.find('.accordion_header').slideDown();
			_hideAccordion();

			// Render list layout
			_$content.find('.viewItem').removeClass('ds-tile tetristile').addClass('ds-row');
			_tetris.updateLayout();
		},

		// --------------------------------------------------------
		onDataLayerSpecElementClick: function (event) {
			var $el = $(this);

			// Hide accordion
			if ($el.hasClass('selected')) {
				_hideAccordion();
				return false;
			}

			// Show accordion
			var keyNum = _getDataSpecDataKey($el);
			_tetris.showExpandedView(keyNum);

			return false;
		},

		// --------------------------------------------------------
		onEditSpecBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getDataSpecDataKey($el, 'accordionDetails'),
				dataLayerSpec = _public.data_layer_specs[dataKey];

			// Edit Data Layer Spec
			if (dataLayerSpec) {
				utui.define.dataLayerSpecs.showAddMore(dataLayerSpec);
			}

		},

		// --------------------------------------------------------
		onDeleteSpecBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getDataSpecDataKey($el, 'accordionDetails'),
				dataLayerSpec = _public.data_layer_specs[dataKey],
				specTitle, content;

			// Delete Data Layer Spec
			if (dataLayerSpec) {
				specTitle = utui.util.safeEscape(dataLayerSpec.title);

				// Cannot delete data layer spec that is included in a test config
				if (dataLayerSpec.test_configs.length > 0) {
					content = _view.scopedMessage(dataLayerSpec);
					utui.adminlib.confirmDialog().show(_namespace, {action: localize.t('tiq.datasources.specs.delete'), title: localize.t('tiq.datasources.specs.confirm_delete', {spec_title: specTitle}), content: content, disabled: true});
				} else {
					utui.adminlib.confirmDialog().show(_namespace, {action: localize.t('tiq.datasources.specs.delete'), confirm: localize.t('tiq.datasources.specs.are_you_sure', {spec_title: specTitle}), title: localize.t('tiq.datasources.specs.confirm_delete', {spec_title: specTitle})}, function () {
						_eventHandlers.onDataLayerSpecDeleted(dataLayerSpec);
					});
				}
			}
		},

		// --------------------------------------------------------
		onEditDataSourceBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getDataSpecDataKey($el, 'accordionDetails'),
				dataLayerSpec = _public.data_layer_specs[dataKey];

			// Edit Data Layer Spec
			if (dataLayerSpec) {
				var $modalDialog = utui.define.dataLayerSpecs.showAddMore(dataLayerSpec);
				$modalDialog.find('#data_sources').trigger('click');
			}
		},

		// --------------------------------------------------------
		onDataSourcesScopedLinkClick: function (event) {
			var $el = $(this),
				dataKey = $el.attr('data-key');

			if (dataKey) {
				var ds = dsapi.getDataSource(dataKey);
				if (ds) {
					utui.util.pubsub.publish(utui.constants.variables.FOCUSED, '' + ds.id);
				}
			}
		},

		// --------------------------------------------------------
		onTestConfigsScopedLinkClick: function (event) {
			var $el = $(this),
				dataKey = $el.attr('data-key');

			if (dataKey) {
				utui.util.pubsub.publish(utui.constants.test_configs.FOCUSED, dataKey);
			}
		},

		// --------------------------------------------------------
		onDataLayerSpecAdded: function (data) {
			if (data) {
				var dataLayerSpec = data.data_layer_spec;

				if (dataLayerSpec) {
					var id = dataLayerSpec.id;
					_public.data_layer_specs[id] = dataLayerSpec;
					_public.refreshContent();
					_expandSelectedDataLayerSpec(id);

					// Record additions in history
					utui.profile.setActionPerformed({
						action: utui.constants.data_layer_specs.ADDED,
						data: {
							id: "" + id,
							name: dataLayerSpec.title,
							kind: utui.constants.data_layer_specs.TYPE,
							operation: utui.constants.operation.ADDED,
							container : _containerList
						}
					}, true);
				}
			}
		},

		// --------------------------------------------------------
		onDataLayerSpecUpdated: function (data) {
			if (data) {
				var dataLayerSpec = data.data_layer_spec;
				if (dataLayerSpec) {
					var id = dataLayerSpec.id;
					_public.data_layer_specs[id] = dataLayerSpec;
					_public.refreshContent();
					_expandSelectedDataLayerSpec(id);

					// Record updates in history
					utui.profile.setActionPerformed({
						action: utui.constants.data_layer_specs.UPDATED,
						data: {
							id: "" + id,
							name: dataLayerSpec.title,
							kind: utui.constants.data_layer_specs.TYPE,
							operation: utui.constants.operation.UPDATED,
							container: _containerList
						}
					}, true);
				}
			}
		},
		
		// --------------------------------------------------------
		onDataSourcesUpdated: function (oldDataKey, newDataKey) {
			if (!oldDataKey || !newDataKey) {
				return;
			}
			
			var oldTmp = oldDataKey.split('.'),
			    newTmp = newDataKey.split('.'),
			    oldType = oldTmp.shift(),
			    oldName = oldTmp.join('.'),
			    newType = newTmp.shift(),
			    newName = newTmp.join('.'),
			    data_layer_specs = utui.util.getVars(_public.data_layer_specs);

			// Iterate through all of the Data Layer Specs, each spec contains data sources
			for (var i in data_layer_specs) {
				var dataLayerSpec = data_layer_specs[i],
				    dataSources = dataLayerSpec.data_sources,
				    numDataSources = dataSources.length,
				    dataSourceObj;

				// Iterate through all data sources
				for (var j = 0; j < numDataSources; j++) {
					dataSourceObj = dataSources[j];
					
					if (dataSourceObj.source === oldName && dataSourceObj.type === oldType) {
						dataSourceObj.source = newName;
						dataSourceObj.type = newType;
					}
				}
			}
		},
		
		// --------------------------------------------------------
		onDataSourcesRemoved: function (dataSource) {
			var type = dataSource.type,
				source = dataSource.name,
				data_layer_specs = utui.util.getVars(_public.data_layer_specs);

			// Iterate through all of the Data Layer Specs, each spec contains data sources
			for (var i in data_layer_specs) {
				var dataLayerSpec = data_layer_specs[i],
				    dataSources = dataLayerSpec.data_sources,
				    dataSourceObj;

				// Iterate through all data sources
				for (var j = 0; j < dataSources.length; j++) {
					dataSourceObj = dataSources[j];
					
					if (dataSourceObj.source === source && dataSourceObj.type === type) {
						//Remove data source from array
						dataSources.splice(j, 1);
					}
				}
			}
		},

		// --------------------------------------------------------
		onDataLayerSpecDeleted: function (dataLayerSpec) {
			if (dataLayerSpec) {
				var deletedSpec = _public.data_layer_specs[dataLayerSpec.id];

				// Set delete action and store deleted data layer spec for save profile
				deletedSpec.action = utui.constants.operation.REMOVED;
				_public.deleted_data_layer_specs[dataLayerSpec.id] = deletedSpec;

				delete _public.data_layer_specs[dataLayerSpec.id];
				_public.refreshContent();

				utui.util.pubsub.publish(utui.constants.data_layer_specs.REMOVED, deletedSpec.id);

				// Record deletes in history
				utui.profile.setActionPerformed({
					action: utui.constants.data_layer_specs.REMOVED,
					data: {
						id: "" + deletedSpec.id,
						name: deletedSpec.title,
						kind: utui.constants.data_layer_specs.TYPE,
						operation: utui.constants.operation.REMOVED,
						container: _containerList
					}
				}, true);
			}
		},

		// --------------------------------------------------------
		onProfileLoaded: function () {
			_reset();

			// Fetch data layer specs and refresh content
			if ((utui.config.currentTab === utui.define.id)
				|| (utui.config.currentTab === utui.dashboard.id && $('#my_site_site_verify_menu').parent().hasClass('selected'))) {
				_public.loadDataLayerSpecs(function () {
					if (utui.config.currentTab === utui.define.id) {
						// refresh data source mappings after data layer specs have been loaded (Data Sources tab selected)
						// OR refresh data layer specs content (Data Layer Specification tab selected)
						$('#data_layer_context').find('li.selected a').trigger('click');
					}
				});
			}
		},

		// --------------------------------------------------------
		onFocusedDataLayerSpec: function (uid) {
			// Switch tabs
			$('#tabs').tabs('select', utui.define.id);
			$('#data_layer_data_layer_specifications_menu').trigger('click');

			// Find accordion to open
			_$content.find('.viewItem').each(function (index) {
				var $el = $(this);

				if ($el.attr('data-tile-key') === uid) {
					$el.trigger('click');

					var $container = _$content.closest('#' + _namespace + '_container');
					// Scroll to selected data layer spec
					setTimeout(function () {
						$container.animate({
							scrollTop: $el.offset().top - $container.offset().top + $container.scrollTop()
						}, 'slow');
					}, 300);

					return false;
				}
			});
		},

		// --------------------------------------------------------
		onTestConfigAdded: function (data) {
			if (data) {
				var testConfig = data.test_config,
					steps,
					spec_id;
				if (testConfig) {
					steps = testConfig.steps;
					if (steps) {
						for (var i = 0; i < steps.length; i++) {
							spec_id = steps[i].data_spec_seq_id;
							if (spec_id) {
								if (_public.data_layer_specs[spec_id]) {
									// Scope newly added test config to data layer specs
									if (!_isTestConfigAssigned(testConfig.id, _public.data_layer_specs[spec_id].test_configs)) {
										_public.data_layer_specs[spec_id].test_configs.push({
											id: testConfig.id,
											title: testConfig.title,
											type: testConfig.type
										});
									}
								}
							}
						}
					}
				}
			}
		},

		// --------------------------------------------------------
		onTestConfigUpdated: function (data) {
			if (data) {
				var testConfig = data.test_config,
					dataLayerSpecs;
				if (testConfig) {
					dataLayerSpecs = _public.data_layer_specs;
					// FIRST, Remove test config from all data layer specs
					for (var i in dataLayerSpecs) {
						_removeTestConfig(testConfig.id, dataLayerSpecs[i].test_configs);
					}
					// THEN Add test config to select data layer specs
					_eventHandlers.onTestConfigAdded(data);
				}
			}
		},

		// --------------------------------------------------------
		onTestConfigRemoved: function (testConfig) {
			if (testConfig) {
				var steps = testConfig.steps,
					spec_id;
				if (steps) {
					for (var i = 0; i < steps.length; i++) {
						spec_id = steps[i].data_spec_seq_id;
						if (spec_id) {
							// Remove test config from data layer specs
							_removeTestConfig(testConfig.id, _public.data_layer_specs[spec_id].test_configs);
						}
					}
				}
			}
		}
	};

	// --------------------------------------------------------
	var _tetris = {
		// --------------------------------------------------------
		updateLayout: function () {
			_$content.tetris('.viewItem').updateLayout();
		},

		// --------------------------------------------------------
		removeExpandedView: function(doNotUpdateLayout) {
			if(doNotUpdateLayout) {
				return _$content.tetris('.viewItem').removeExpandedView(true);
			}
			return _$content.tetris('.viewItem').removeExpandedView();
		},

		// --------------------------------------------------------
		attachExpandedView: function(elIndex, $detailsView) {
			_$content.tetris('.viewItem').attachExpandedView(elIndex, $detailsView);
			_$content.css('height', '100%');

			// Provide enough height for the expanded accodion to be visible
			var $accordionDetails = _$content.find('.accordionDetails');
			if($accordionDetails.length) {
				var height = $accordionDetails.height();
				_$content.css("padding-bottom", height);
			}
		},

		// --------------------------------------------------------
		showExpandedView: function (id) {
			if (id) {
				// Global remove selected class on elements...
				_$content.find('.viewItem')
					.removeClass('selected')
					.addClass('not-selected');

				// Set Accordion contents and trigger selection
				var innerView = _view.accordionContent(id),
					$accordion = $('<div />', { class: 'accordionDetails', 'data-tile-key': id }).html(innerView),
					$element = _$content.find('.viewItem[data-tile-key="' + id + '"]'),
					elIndex = $element.index('.viewItem:visible');

				$element
					.removeClass('not-selected')
					.addClass('selected');

				_tetris.removeExpandedView(true);
				_tetris.attachExpandedView(elIndex, $accordion);

				_bindUI.accordionContent();
			}
		}
	};

	// --------------------------------------------------------
	var _view = {
		// --------------------------------------------------------
		contentBody: function () {
			var dataLayerSpecs = _public.data_layer_specs,
				dataLayerSpecsLength = _.size(dataLayerSpecs),
				viewState = _getViewState(),
				v = '';

			if (dataLayerSpecsLength > 0) {
				for (var i in dataLayerSpecs) {
					var dataLayerSpec = dataLayerSpecs[i],
						id = dataLayerSpec.id,
						title = utui.util.safeEscape(dataLayerSpec.title),
						description = utui.util.safeEscape(dataLayerSpec.description),
						specType = utui.util.safeEscape(dataLayerSpec.type),
						value = utui.util.safeEscape(dataLayerSpec.value),
						numDataSources = dataLayerSpec.data_sources.length,
						dataSourcesAssignedIcon = (numDataSources) ? ' mapping-active' : '',
						numTests = dataLayerSpec.test_configs.length,
						testsAssignedIcon = (numTests) ? ' mapping-active' : '';

					v += '  <div id="' + _namespace + '_' + id + '" class="viewItem ds-' + viewState + ' tetristile" data-tile-key="' + i + '">';
					v += '		<div class="viewItem-inner">';
					v += '      	<div class="container_spec_title ellipsis" title="' + title + '">' + title + '</div>'; //TODO: mco notify automation that I cannot use container_title
					v += '      	<div class="container_description ellipsis">' + description + '</div>';
					v += '      	<div class="container_spec_type ellipsis">' + specType + '</div>';
					v += '      	<div class="container_value ellipsis">\"' + value + '\"</div>';
					v += '			<div class="container_mapped_data_sources">';
					v += '				<div class="mapping-item mapping-data-sources' + dataSourcesAssignedIcon + '"><i class="icon-globe mapping-icon"></i><div class="num-data-sources">' + numDataSources + '</div></div>';
					v += '				<div class="mapping-item mapping-tests' + testsAssignedIcon + '"><i class="icon-beaker mapping-icon"></i><div class="num-tests">' + numTests + '</div></div>';
					v += '			</div>';
					v += '			<div class="container_uid">' + id + '</div>';
					v += '		</div>';
					v += '  </div>';
				}
			} else {
				v += '	<div class="noItemsToShow">';
				v += '		<span>' + localize.t('tiq.datasources.specs.add_a_new_spec') + '</span>';
				v += '		<i class="icon-hand-up"></i>';
				v += '	</div>';
			}

			return v;
		},

		// --------------------------------------------------------
		accordionContent: function (id) {
			var dataLayerSpec = _public.data_layer_specs[id],
				title = utui.util.safeEscape(dataLayerSpec.title || ''),
				description = utui.util.safeEscape(dataLayerSpec.description || ''),
				type = dataLayerSpec.type,
				value = utui.util.safeEscape(dataLayerSpec.value || ''),
				testConfigs = dataLayerSpec.test_configs,
				numTestConfigs = testConfigs.length,
				testConfigObj,
				dataSources = dataLayerSpec.data_sources,
				numDataSources = dataSources.length,
				dataSourceObj,
				dataKey,
				testConfigTitle, testConfigType,
				source, requirement, expectedValue,
				v = '';

			v += '<div class="accordion-context-container">';
			v += '	<div class="contextSectionHeader">' + localize.t('tiq.datasources.specs.uid') + '<div class="contextSectionInfo contextSectionUID">' + id + '</div></div>';
			v += '  <div class="contextActionButtons">';
			v += '      <a href="#" id="' + _namespace + '_deleteSpecBtn" class="btn btn-small i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.datasources.specs.delete_spec') + '</a>';
			v += '  </div>';
			v += '</div>';

			v += '<div class="accordion-content-container">';
			v += '  <div class="main-container">';
			v += '      <div class="main-body container-fluid">';
			v += '          <div class="row-fluid">';
			v += '              <div class="span12">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleText">' + localize.t('tiq.datasources.specs.spec_configuration') + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" id="' + _namespace + '_editSpecBtn" class="btn btn-small i-color-edit" data-key="' + id + '"><i class="icon-edit"></i> ' + localize.t('tiq.datasources.specs.edit') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div class="contentBlockTitle">' + localize.t('tiq.datasources.specs.properties') + '</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.specs.title') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue ellipsis" title="' + title + '">' + title + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.specs.description') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue ellipsis" title="' + description + '">' + description + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.specs.spec_type') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue ellipsis" title="' + type + '">' + type + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.datasources.specs.spec_value') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue ellipsis" title="' + value + '">\"' + value + '\"</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '      		</div>';
			v += '      	</div>';
			v += '      </div>';

			v += '      <div class="container-fluid">';
			v += '          <div class="row-fluid">';
			v += '              <div class="span12">';
			v += '					<div class="mapping-tabs-container">';

			v += '      				<div class="mapping-table container-fluid">';
			v += '          				<div class="contentSectionTitle">';
			v += '              				<div class="titleExpander"><i class="icon-caret-right"></i></div>';
			v += '              				<div class="titleText">' + localize.t('tiq.datasources.specs.data_sources') + '</div>';
			v += '              				<div class="titleCount">' + numDataSources + '</div>';
			v += '              				<div class="titleButton">';
			v += '                  				<a href="#" id="' + _namespace + '_editDataSourceBtn" class="btn btn-small i-color-edit"><i class="icon-edit"></i> ' + localize.t('tiq.datasources.specs.edit') + '</a>';
			v += '              				</div>';
			v += '          				</div>';
			v += '          				<div class="mapping-row-title">';
			v += '								<div>' + localize.t('tiq.datasources.specs.title') + '</div>';
			v += '								<div>' + localize.t('tiq.datasources.specs.requirement') + '</div>';
			v += '								<div>' + localize.t('tiq.datasources.specs.expected_value') + '</div>';
			v += '          				</div>';
			v += '          				<div class="tagMappedTableHeader"></div>';
			v += '          				<div class="contentSectionBody scrollSection">';
			v += '              				<div class="contentBlock">';
			v += '                  				<div class="contentSectionBodyContent">';
			for (var i = 0; i < numDataSources; i ++) {
				dataSourceObj = dataSources[i];
				dataKey = dataSourceObj.type + '.' + dataSourceObj.source;
				source = utui.util.safeEscape(dataSourceObj.source);
				requirement = utui.config.dataSourceOperators[dataSourceObj.format][dataSourceObj.requirement];
				expectedValue = utui.util.safeEscape(dataSourceObj.expected_value);
				var ds = $.extend(true, {}, dsapi.getDataSource(dataKey));
				if ($.isEmptyObject(ds)) {
					continue; // should never happen - Only UDO Variable types are in the select list
				}
				ds.dsID = ds.id; // need to set dsID for getDataSourceMappingItemView

				v += '                      				<div class="row-item">';
				v += '                          				<div class="ellipsis" title="' + source + '">';
				v += utui.define.getDataSourceMappingItemView(ds, _namespace);
				v += '				</div>';
				v += '                          				<div class="ellipsis" title="' + requirement + '">' + requirement + '</div>';
				v += '                          				<div class="ellipsis" title="' + expectedValue + '">' + expectedValue + '</div>';
				v += '                          				<div class="data-sources-scoped-link">';
				if (dataSourceObj.type !== 'dom') {
					v += '                              				<a class="nostyle" href="#" data-key="' + dataKey + '"><i class="icon-reply"></i></a>';
				}
				v += '                          				</div>';
				v += '                      				</div>';
			}
			v += '                  				</div>';
			v += '              				</div>';
			v += '          				</div>';
			v += '              		</div>';


			v += '      				<div class="mapping-table container-fluid">';
			v += '          				<div class="contentSectionTitle">'
			v += '              				<div class="titleText">' + localize.t('tiq.datasources.specs.tests') + '</div>';
			v += '              				<div class="titleCount">' + numTestConfigs + '</div>';
			v += '							</div>';
			v += '          				<div class="mapping-row-title">';
			v += '              				<div>' + localize.t('tiq.datasources.specs.test_title') + '</div>';
			v += '              				<div>' + localize.t('tiq.datasources.specs.type') + '</div>';
			v += '          				</div>';
			v += '          				<div class="tagMappedTableHeader"></div>';
			v += '          				<div class="contentSectionBody scrollSection">';
			v += '              				<div class="contentBlock">';
			v += '                  				<div class="contentSectionBodyContent">';
			for (var i = 0; i < numTestConfigs; i ++) {
				testConfigObj = testConfigs[i];
				testConfigTitle = testConfigObj.title;
				testConfigType = testConfigObj.type;
				v += '                      				<div class="row-item">';
				v += '                          				<div class="ellipsis" title="' + testConfigTitle + '">' + testConfigTitle + '</div>';
				v += '                          				<div class="ellipsis" title="' + testConfigType + '">' + testConfigType + '</div>';
				v += '                          				<div class="test-configs-scoped-link">';
				v += '                              				<a class="nostyle" href="#" data-key="' + testConfigObj.id + '"><i class="icon-reply"></i></a>';
				v += '                          				</div>';
				v += '                      				</div>';
			}
			v += '                  				</div>';
			v += '              				</div>';
			v += '          				</div>';
			v += '              		</div>';

			v += '          		</div>'; // End mapping-tabs-container
			v += '				</div>';
			v += '          </div>';
			v += '		</div>';

			v += '  </div>';
			v += '</div>';

			return v;
		},

		// --------------------------------------------------------
		filterResultItem: function (dataObj, matchedDataSources, input) {
			var pattern = new RegExp('(' + input + ')', 'gi'),
				title = utui.util.safeEscape(dataObj.title).replace(pattern, '<span class="highlighted-text">$1</span>'),
				desc = utui.util.safeEscape(dataObj.description).replace(pattern, '<span class="highlighted-text">$1</span>'),
				type = utui.util.safeEscape(dataObj.type),
				id = dataObj.id,
				dataSourcesLength = matchedDataSources.length,
				dataSourcesObj,
				v = '';


			v += '<div class="span12 resultRow" data-id="' + id + '">';
			v += '	<div class="contextName">' + title + '</div>';
			v += '	<div class="contextLabel">' + type + '</div>';
			v += '	<div class="contextDesc">' + desc + '</div>';
			if (dataSourcesLength) {
				v += '	<div class="data-layer-spec-sources">'
				v += '		<div>' + localize.t('tiq.datasources.specs.matching_data_sources') + '</div>';
				for (var i = 0; i < dataSourcesLength; i++) {
					dataSourcesObj = matchedDataSources[i];
					v += '<div class="' + dataSourcesObj.type + dataSourcesObj.className + '">';
					v += '<div class="ico">' + utui.define.getDataSourceIconView(dataSourcesObj.type) + '</div>';
					v += dataSourcesObj.source.replace(pattern, '<span class="highlighted-text">$1</span>');
					v += '</div>';
				}
				v += '	</div>';
			}
			v += '</div>';

			return v;
		},

		// --------------------------------------------------------
		filterNoResultsFound: function (userInput) {
			var v = '';

			v += '<div class="span12 resultRow resultRowNotFound">';
			v += localize.t('tiq.datasources.specs.no_results_found') + ' <strong>' + userInput + '</strong>';
			v += '</div>';

			return v;
		},

		// --------------------------------------------------------
		scopedMessage: function (dataObj) {
			var title = dataObj.title ,
				testConfigs = dataObj.test_configs,
				v = '';

			v += '<div class="container-fluid welcome-container">';
			v += '  <div class="row-fluid">';
			v += '      <div class="span10 offset1">';

			v += localize.t('tiq.datasources.specs.data_layer_dependent_on_test', {title: title});
			v += '			<ul id="' + _namespace + '_scopeListing" class="ds-scope-listing">';
			for (var i = 0; i < testConfigs.length; i++) {
				v += '				<li><i class="icon-beaker"></i> <strong>' + testConfigs[i].title + '</strong></li>';
			}
			v += '			</ul>';
			v += '      </div>';
			v += '  </div>';
			v += '</div>';

			return v;
		}
	};

	// --------------------------------------------------------
	var _render = {
		// --------------------------------------------------------
		contentBody: function () {
			_$content.html(_view.contentBody());
			_bindUI.contentBody();
			_tetris.updateLayout();
		}
	};

	// --------------------------------------------------------
	var _bindUI = {
		// --------------------------------------------------------
		contentHeader: function () {
			_$header.find('#' + _namespace + '_addSpecificationBtn').safeOn('click', _eventHandlers.onAddDataSpecificationBtnClick);
			_$header.find('#' + _namespace + '_addSpecificationDropdownBtn').safeOn('click', _eventHandlers.onAddDataSpecificationDropdownBtnClick);
			_$header.find('#' + _namespace + '_filterSearch_input').safeOn('keyup', _eventHandlers.onFilterSearchInput);
			_$header.find('#' + _namespace + '_filterSearch_results').safeOn('click', '.resultRow', _eventHandlers.onFilterSearchResultClick);
			_$header.find('#' + _namespace + '_gridViewBtn').safeOn('click', _eventHandlers.onGridViewBtnClick);
			_$header.find('#' + _namespace + '_listViewBtn').safeOn('click', _eventHandlers.onListViewBtnClick);
		},

		// --------------------------------------------------------
		contentBody: function () {
			_$content.find('.viewItem').safeOn('click', _eventHandlers.onDataLayerSpecElementClick);
		},

		// --------------------------------------------------------
		accordionContent: function () {
			_$content.find('#' + _namespace + '_editSpecBtn').safeOn('click', _eventHandlers.onEditSpecBtnClick);
			_$content.find('#' + _namespace + '_deleteSpecBtn').safeOn('click', _eventHandlers.onDeleteSpecBtnClick);
			_$content.find('#' + _namespace + '_editDataSourceBtn').safeOn('click', _eventHandlers.onEditDataSourceBtnClick);
			_$content.find('.data-sources-scoped-link a').safeOn('click', _eventHandlers.onDataSourcesScopedLinkClick);
			_$content.find('.test-configs-scoped-link a').safeOn('click', _eventHandlers.onTestConfigsScopedLinkClick);
		}
	};

	// --------------------------------------------------------
	var _request = {
		// --------------------------------------------------------
		getDataLayerSpecs: function (callback) {
			utui.util.showSpinner();

			var url = utui.service.addParamsToURL(utui.service.restapis.GET_DATA_LAYER_SPECS, {'version': utui.data.settings.revision});
			utui.service.get(url, null, null,
				function() {
					_response.onGetDataLayerSpecsSuccess.apply(this, arguments);
					if (callback) callback();
				},
				function() {
					_response.onGetDataLayerSpecsError.apply(this, arguments);
					if (callback) callback();
				}
			);
		},

		// --------------------------------------------------------
		getNextDataLayerSpecId: function (callback) {
			utui.util.showSpinner();

			var id;
			utui.service.put(utui.service.restapis.GET_NEXT_DATA_LAYER_SPEC_ID, null, null,
				function () {
					id = _response.onGetNextDataLayerSpecIdSuccess.apply(this, arguments);
					if (callback) callback(id);
				},
				function () {
					id = _response.onGetNextDataLayerSpecIdError.apply(this, arguments);
					if (callback) callback(id);
				}
			);
		},

		// --------------------------------------------------------
		getDataLayerSpecsForRefresh: function (callback) {
			utui.util.showSpinner();

			var url = utui.service.addParamsToURL(utui.service.restapis.GET_DATA_LAYER_SPECS, {'version': utui.data.settings.revision});
			utui.service.get(url, null, null,
				function() {
					_response.onGetDataLayerSpecsForRefreshSuccess.apply(this, arguments);
					if (callback) callback();
				},
				function() {
					_response.onGetDataLayerSpecsError.apply(this, arguments);
				}
			);
		}
	};

	// --------------------------------------------------------
	var _response = {
		// --------------------------------------------------------
		onGetDataLayerSpecsSuccess: function (data) {
			utui.util.hideSpinner();

			_public.data_layer_specs = {};
			if (data && data.length > 0) {
				for (var i = 0; i < data.length; i++) {
					_public.data_layer_specs[data[i].id] = data[i];
				}
			}
		},

		// --------------------------------------------------------
		onGetDataLayerSpecsError: function (status, response) {
			utui.util.hideSpinner();

			_reset();
		},

		// --------------------------------------------------------
		onGetNextDataLayerSpecIdSuccess: function (data) {
			utui.util.hideSpinner();

			if (data) {
				_public.last_data_layer_spec_id = data.id;
			}

			return '' + _public.last_data_layer_spec_id;
		},

		// --------------------------------------------------------
		onGetNextDataLayerSpecIdError: function (status, response) {
			utui.util.hideSpinner();

			// last_data_layer_spec_id contains the last id created so we should always increment from that
			var maxId = _public.last_data_layer_spec_id || 0;
			if (maxId == 0) {
				for (var i in utui.util.getVars(_public.data_layer_specs)) {
					var num = parseInt(i);
					if (num > maxId) {
						maxId = num;
					}
				}
			}

			_public.last_data_layer_spec_id = ++maxId;

			return '' + _public.last_data_layer_spec_id;
		},

		// --------------------------------------------------------
		onGetDataLayerSpecsForRefreshSuccess: function (data) {
			utui.util.hideSpinner();

			if (data && data.length > 0) {
				for (var i = 0; i < data.length; i++) {
					if (!_public.data_layer_specs[data[i].id]) {
						// New data layer spec was added via Tealium Tools
						_public.data_layer_specs[data[i].id] = data[i];
					} else {
						// Update data layer spec test config since existing spec may have been included a new test
						_public.data_layer_specs[data[i].id].test_configs =  data[i].test_configs;
					}
				}
			}
		}
	};

	// PUBLIC
	// --------------------------------------------------------
	var _public = {
		id: 'data_layer_spec',
		data_layer_specs: null,
		deleted_data_layer_specs: {},
		last_data_layer_spec_id: 0,

		// --------------------------------------------------------
		init: function () {
			utui.util.pubsub.subscribe(utui.constants.data_layer_specs.ADDED, _eventHandlers.onDataLayerSpecAdded);
			utui.util.pubsub.subscribe(utui.constants.data_layer_specs.UPDATED, _eventHandlers.onDataLayerSpecUpdated);
			utui.util.pubsub.subscribe(utui.constants.variables.UPDATED, _eventHandlers.onDataSourcesUpdated);
			utui.util.pubsub.subscribe(utui.constants.variables.REMOVED, _eventHandlers.onDataSourcesRemoved);
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _eventHandlers.onProfileLoaded);
			utui.util.pubsub.subscribe(utui.constants.data_layer_specs.FOCUSED, _eventHandlers.onFocusedDataLayerSpec);
			utui.util.pubsub.subscribe(utui.constants.test_configs.ADDED, _eventHandlers.onTestConfigAdded);
			utui.util.pubsub.subscribe(utui.constants.test_configs.UPDATED, _eventHandlers.onTestConfigUpdated);
			utui.util.pubsub.subscribe(utui.constants.test_configs.REMOVED, _eventHandlers.onTestConfigRemoved);
		},

		// --------------------------------------------------------
		show: function () {
			var viewState = _getViewState();

			_bindUI.contentHeader();
			_showHelpTab();

			if (viewState === 'row') {
				_$header.find('#' + _namespace + '_listViewBtn').trigger('click');
			} else if (viewState === 'tile') {
				_$header.find('#' + _namespace + '_gridViewBtn').trigger('click');
			}

			_public.refreshContent();
		},

		// --------------------------------------------------------
		refreshContent: function () {
			_render.contentBody();
			utui.profile.showAllModifiedTabLabels(utui.constants.data_layer_specs.TYPE);
		},

		// --------------------------------------------------------
		loadDataLayerSpecs: function (callback) {
			// Only request data layer specs once
			if (!_public.data_layer_specs) {
				_request.getDataLayerSpecs(callback);
			} else {
				if (callback) callback();
			}
		},

		// --------------------------------------------------------
		getDataLayerSpecsForPublish: function () {
			// Combine added, updated, and deleted data layer specs
			return $.extend(true, {}, _public.data_layer_specs, _public.deleted_data_layer_specs);
		},

		// --------------------------------------------------------
		getCurrentDataLayerSpecs: function () {
			// return current data layer specs that have not been removed
			return $.extend(true, {}, _public.data_layer_specs);
		},

		// --------------------------------------------------------
		getDataLayerSpecsForRefresh: function (callback) {
			_request.getDataLayerSpecsForRefresh(callback);
		},

		// --------------------------------------------------------
		showAddMore: function (dataLayerSpec, callback) {
			// Private API
			var _namespace = 'data_layer_spec_dialog_addmore',
				_containerName = 'data_layer_spec_',
				_selectedTab = 'data_layer_spec',
				_resources = [
					{ type: 'article', title: localize.t('tiq.datasources.specs.resource.spec'), url: common.community.verify_data_layer_data_layer_specs }
				],
				_dataLayerSpecConfig = {
					fieldset: {
						title: {
							fieldType: 'text',
							label: localize.t('tiq.datasources.specs.config.title'),
							size: '70',
							example: localize.t('tiq.datasources.specs.config.title_example')
						},
						description: {
							fieldType: 'text',
							label: localize.t('tiq.datasources.specs.config.description'),
							size: '70',
							example: localize.t('tiq.datasources.specs.config.description_example')
						},
						type: {
							fieldType: 'radio',
							group: 'data_layer_spec_type',
							label: localize.t('tiq.datasources.specs.config.spec_type'),
							title: localize.t('tiq.datasources.specs.config.spec_type_note'),
							radios: [
								{
									id: '_radio_page',
									label: localize.t('tiq.datasources.specs.config.page'),
									value: 'Page',
									defaultValue: true
								},
								{
									id: '_radio_event',
									label: localize.t('tiq.datasources.specs.config.event'),
									value: 'Event',
									defaultValue: false
								}
							]
						},
						value: {
							fieldType: 'text',
							label: localize.t('tiq.datasources.specs.config.spec_value'),
							title: localize.t('tiq.datasources.specs.config.spec_value_note'),
							size: '70',
							example: localize.t('tiq.datasources.specs.config.spec_value_example')
						}
					}
				},
				_templateModal = utui.ui.template.modal(),
				_templateAccordion = utui.ui.template.accordion(true),
				_dataLayerSpec,
				_errors = {
					title: localize.t('tiq.datasources.specs.error.title'),
					value: localize.t('tiq.datasources.specs.error.spec_value'),
					requirementOperator: localize.t('tiq.datasources.specs.error.requirement_operator'),
					expectedValue: localize.t('tiq.datasources.specs.error.expected_value')
				},
				_hideRequirementInput = {is_string: 1, is_array: 1, is_number: 1},
				$modalDialog,
				_saveObj;

			_dataLayerSpec = dataLayerSpec;

			// setup the save object
			if (_isNewDataLayerSpec(_dataLayerSpec)) {
				_saveObj = _constructEmptyDataLayerSpec();
			} else {
				// Copy the data layer spec object to prevent unsaved changes from being persisted
				_dataLayerSpec = $.extend(true, {}, dataLayerSpec);
				_saveObj = _dataLayerSpec;
			}

			// --------------------------------------------------------
			function _isNewDataLayerSpec(dataLayerSpec) {
				return dataLayerSpec === 'create';
			}

			// --------------------------------------------------------
			function _constructEmptyDataLayerSpec() {
				return {
					id: '-1',
					title: '',
					description: '',
					type: 'Page',
					value: '',
					action: utui.constants.operation.ADDED,
//					labels: '1,2,3',
					data_sources: [],
					test_configs: []
				};
			}

			// --------------------------------------------------------
			function _getNextDataLayerSpecId(callback) {
				_request.getNextDataLayerSpecId(callback);
			}

			// --------------------------------------------------------
			function _isValid() {
				var hasErrors = false,
					$fieldGroup,
					dataSources = _saveObj.data_sources,
					dsObj, dataKey, requirement;

				_hideValidationMessage();

				// Validate data layer spec Info
				if ($.trim(_saveObj.title) === '') {
					$modalDialog.find('#data_layer_spec').trigger('click');
					$fieldGroup = $modalDialog.find('#' + _containerName + 'title').closest('.form-group');
					$fieldGroup.addClass('has-error').find('.row-message').html(_errors.title);
					hasErrors = true;
				}
				if ($.trim(_saveObj.value) === '') {
					if (!hasErrors) {
						$modalDialog.find('#data_layer_spec').trigger('click');
					}
					$fieldGroup = $modalDialog.find('#' + _containerName + 'value').closest('.form-group');
					$fieldGroup.addClass('has-error').find('.row-message').html(_errors.value);
					hasErrors = true;
				}

				if (!hasErrors) {
					for (var i = 0; i < dataSources.length; i++) {
						dsObj = dataSources[i];
						dataKey = dsObj.type + '.' + dsObj.source;
						requirement = dsObj.requirement;
						if (!requirement) {
							_showValidationMessage(_errors.requirementOperator);
							_setFocusRequirementOperatorSelect(dataKey);
							hasErrors = true;
							break;
						}
						else if (typeof _hideRequirementInput[requirement] === 'undefined'
							&& !dsObj.expected_value) {
							_showValidationMessage(_errors.expectedValue);
							_setFocusExpectedValue(dataKey);
							hasErrors = true;
							break;
						}
					}

				}

				// Important that this happens last
				// If no errors then empty any expected values for _hideRequirementInput values
				if (!hasErrors) {
					for (var i = 0; i < dataSources.length; i++) {
						dsObj = dataSources[i];
						if (typeof _hideRequirementInput[dsObj.requirement] !== 'undefined') {
							dsObj.expected_value = '';
						}
					}
				}

				return !hasErrors;
			}

			// --------------------------------------------------------
			function _hideValidationMessage() {
				$modalDialog.find('.validation-message').html('').hide();
			}

			// --------------------------------------------------------
			function _showValidationMessage(msg) {
				$modalDialog.find('.validation-message').html(msg).show();
			}

			// --------------------------------------------------------
			function _getDataSourceDataKey($el) {
				return $el.closest('.row-item').attr('data-key');
			}

			// --------------------------------------------------------
			function _setFocusRequirementOperatorSelect(dataKey) {
				$('div.row-item[data-key="' + dataKey + '"]').find('select.' + _namespace + '_requirement_operator_select').select2('focus');
			}

			// --------------------------------------------------------
			function _setFocusExpectedValue(dataKey) {
				$('div.row-item[data-key="' + dataKey + '"]').find('.' + _namespace + '_expected_value').focus();
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onTopNavMenuClick: function (event) {
					event.preventDefault();

					var $el = $(this),
						tabId = $el.attr('id');

					_selectedTab = tabId;

					$modalDialog.find('.wizard_tab').removeClass('activeTab');
					$el.addClass('activeTab');

					// Render selected tab panel
					_panels[tabId].render();
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				onFieldInputChange: function (event) {
					var $el = $(this),
						type = $el.attr('type'),
						value = $el.val(),
						attr = '';

					if (type === 'text') {
						attr = $el.attr('id')
					} else if (type === 'radio') {
						attr = $el.attr('name');
					}

					attr = attr.replace(_containerName, '');
					_saveObj[attr] = value;

				},

				// --------------------------------------------------------
				onRequirementOperatorChange: function (event) {
					var $el = $(this),
						requirementValue = $el.val(),
						$containerValue = $el.closest('.row-item').find('.container_value'),
						format = $(this.options[this.selectedIndex].parentNode).attr('data-format-type'),
						dataKey = _getDataSourceDataKey($el),
						parts = dataKey.split('.'),
						type = parts.shift(),
						source_name = parts.join('.'),
						dataSources = _saveObj.data_sources,
						dsObj;

					_hideValidationMessage();

					for (var i = 0; i < dataSources.length; i++) {
						dsObj = dataSources[i];
						if (dsObj.type === type && dsObj.source == source_name) {
							// Set data source requirement operator value
							dsObj.requirement = requirementValue;
							dsObj.format = format;
							break;
						}
					}

					// Hide expected value input field for select requirement values
					if (typeof _hideRequirementInput[requirementValue] !== 'undefined') {
						$containerValue.addClass('hidden-input');
					} else {
						$containerValue.removeClass('hidden-input');
					}
				},

				// --------------------------------------------------------
				onExpectedValueChange: function (event) {
					var $el = $(this),
						dataKey = _getDataSourceDataKey($el),
						parts = dataKey.split('.'),
						type = parts.shift(),
						source_name = parts.join('.'),
						dataSources = _saveObj.data_sources,
						dsObj;

					for (var i = 0; i < dataSources.length; i++) {
						dsObj = dataSources[i];
						if (dsObj.type === type && dsObj.source == source_name) {
							// Set data source expected value
							dsObj.expected_value = $el.val();
							break;
						}
					}
				},

				// --------------------------------------------------------
				onBtnAddDataSourceRequirementClick: function (event) {
					var $dataSourceSelectList = $modalDialog.find('#' + _namespace + '_define_select'),
						$selectedDataSource = $dataSourceSelectList.find('option:selected'),
						value = $selectedDataSource.val(),
						dataSource;

					if (typeof value === 'undefined') {
						return;
					}
					var goodTmp = value.split('.'),
						type = goodTmp.shift(),
						source = goodTmp.join('.'),
						ds = dsapi.getDataSource(value);

					// Store data source in _saveObj
					dataSource = {type: type, source: source, format: '', requirement: '', expected_value: ''};
					_saveObj.data_sources.push(dataSource);

					// Remove data source from select list
					$dataSourceSelectList.find('option[value="' + type + '.' + source + '"]').remove();
					dsapi.convertSelectListToSelect2(_namespace + '_define_select', true);

					// Render newly added content
					_render.contentBody();
				},

				// --------------------------------------------------------
				onBtnAddDataSourceClick: function (event) {
					utui.define.showAddMore(_namespace, utui.define.types.JS, '', '', function (isValid) {
						if (isValid) {
							// Auto-add data source to data spec
							var lastAddedVars = utui.define.lastAdded,
								ds,
								dataKey;

							for (var i in lastAddedVars) {
								ds = lastAddedVars[i];
								if (ds) {
									dataKey = ds.type + '.' + ds.name;
									// Store data source in _saveObj
									var dataSource = {type: ds.type, source: ds.name, format: '', requirement: '', expected_value: ''};
									_saveObj.data_sources.push(dataSource);
								}
							}
							// Render newly added content
							_render.contentBody();
							_setFocusRequirementOperatorSelect(dataKey);
						}
					});
				},

				// --------------------------------------------------------
				onBtnRemoveDataSourceClick: function (event) {
					var $el = $(this),
						dataKey = _getDataSourceDataKey($el);

					if (dataKey) {
						var parts = dataKey.split('.'),
							type = parts.shift(),
							source_name = parts.join('.'),
							dataSources = _saveObj.data_sources,
							displayName = source_name,
							dsObj;

						for (var i = 0; i < dataSources.length; i++) {
							dsObj = dataSources[i];
							if (dsObj.type === type && dsObj.source == source_name) {
								//Remove data source from array
								_saveObj.data_sources.splice(i, 1);
								_render.contentBody();
								break;
							}
						}

						// option text
						if (type === 'dom') {
							displayName = utui.config.defItems[dataKey];
						}
						else {
							var ds = dsapi.getDataSource(dataKey);
							if (ds) {
								if (ds.title) {
									displayName = ds.title;
								}
							}
						}

						// Re-append data source to select list
						var $dataSourceSelectList = $('#' + _namespace + '_define_select optgroup[data-type="' + type + '"]');
						if ($dataSourceSelectList.length !== 0) {
							// append to all variable select lists that are in scope
							$dataSourceSelectList.append(
								$('<option/>')
									.text(_.unescape(displayName))
									.val(dataKey)
									.attr({'data-type': type})
							);
						} else {
							// append the group
							var $group = $('<optgroup/>', {
								'label': dsapi.getDataSourceTypeName(type),
								'data-type': type}).appendTo($('.variableSelect').not('.select2-container'));

							// append the option
							$group.append(
								$('<option/>')
									.text(_.unescape(displayName))
									.val(dataKey)
									.attr({'data-type': type})
							);
						}
						dsapi.convertSelectListToSelect2(_namespace + '_define_select', true);
					}
				},

				// --------------------------------------------------------
				onBtnCancelClick: function () {
					// Refresh content in-case data sources modal view filtering hid data layer specs
					var id = _$content.find('.tetrisExpandedView').attr('data-tile-key');
					_public.refreshContent();
					_expandSelectedDataLayerSpec(id);
					_hideValidationMessage();
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			var _bindUI = {
				// --------------------------------------------------------
				topNavMenu: function () {
					$modalDialog.find('.wizard_tab').safeOn('click', _eventHandlers.onTopNavMenuClick);
				},

				// --------------------------------------------------------
				headerControls: function () {
					$modalDialog.find('#' + _namespace + '_btnAddDataSourceRequirement').safeOn('click', _eventHandlers.onBtnAddDataSourceRequirementClick);
					$modalDialog.find('#' + _namespace + '_btnAddDataSource').safeOn('click', _eventHandlers.onBtnAddDataSourceClick);
				},

				// --------------------------------------------------------
				formFields: function () {
					$modalDialog.find('input').safeOn('change', _eventHandlers.onFieldInputChange);
				},

				// --------------------------------------------------------
				requirementOperatorSelect: function ($contentBody) {
					var $requirementOperatorSelectLists = $contentBody.find('.' + _namespace + '_requirement_operator_select');
					$requirementOperatorSelectLists.safeOn('change', _eventHandlers.onRequirementOperatorChange);
					$requirementOperatorSelectLists.select2({dropdownCssClass: 'data-layer-spec-operator', placeholder: localize.t('tiq.datasources.specs.select_an_operator')});
				},

				// --------------------------------------------------------
				expectedValueInput: function ($contentBody) {
					$contentBody.find('.' + _namespace + '_expected_value').safeOn('change', _eventHandlers.onExpectedValueChange);
				},

				// --------------------------------------------------------
				removeDataSourceBtns: function ($contentBody) {
					var $removeBtns = $contentBody.find('.' + _namespace + '_btnRemoveDataSource');
					$removeBtns.safeOn('click', _eventHandlers.onBtnRemoveDataSourceClick);
					$removeBtns.tipsy({gravity: 'nw'});
				}
			};

			// ------------------------------------
			var _panels = {
				// ------------------------------------
				data_layer_spec: {
					// ------------------------------------
					render: function() {
						var slug = 'data_layer_spec',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							title = '<h2>' + utui.ui.template.contextFieldItemView(localize.t('tiq.datasources.specs.properties')) + '</h2>',
							fieldCollection = _dataLayerSpecConfig.fieldset,
							context = utui.ui.template.contextBox(_view.data_layer_spec.context(), localize.t('tiq.datasources.specs.help')),
							content = _view.data_layer_spec.contentBody(fieldCollection, slug),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text'),
							namespace = _namespace + '_' + slug;

						$header.empty();

						$body
							.empty()
							.append(title)
							.append(content);

						$context
							.empty()
							.append(context);

						$applyBtn.text(localize.t('tiq.dialog.button.next'));

						_bindUI.formFields();

						// Set values from _saveObj
						for (var i in fieldCollection) {
							var val = _saveObj[i],
								fieldType = fieldCollection[i].fieldType;
							if (val) {
								if (fieldType !== 'radio') {
									$body.find('#' + _containerName + i).val(val);
								} else {
									$body.find('[name="' + _containerName + i + '"][value="' + val + '"]').prop('checked', true);
								}
							}
						}
					}
				},
				// ------------------------------------
				data_sources: {
					// ------------------------------------
					render: function() {
						var slug = 'data_sources',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							context = utui.ui.template.contextBox(_view.data_sources.context(), localize.t('tiq.datasources.specs.help')),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text');

						$header
							.empty()
							.append(_view.data_sources.contentHeaderControls())
							.append(_view.data_sources.contentHeader());

						$body
							.empty()
							.append('<div class="validation-message bg-danger"></div>')
							.append('<div class="content-body">' + _view.data_sources.contentBody() + '</div>');

						$context
							.empty()
							.append(context);

						// Populate Selection Dropdown
						var $dataSourceSelectList = $header.find('#' + _namespace + '_define_select');
						$dataSourceSelectList.empty();
						$dataSourceSelectList.html(_render.mappingSelect());
						dsapi.convertSelectListToSelect2(_namespace + '_define_select');

						$applyBtn.text(localize.t('tiq.dialog.button.apply'));

						_bindUI.headerControls();
						_bindUI.requirementOperatorSelect($body);
						_bindUI.expectedValueInput($body);
						_bindUI.removeDataSourceBtns($body);

					}
				}
			};

			// --------------------------------------------------------
			var _view = {
				// --------------------------------------------------------
				modal: {
					// --------------------------------------------------------
					contentHeader: function () {
						var v = '';

						v += '<div id="data_layer_spec" class="wizard_tab activeTab">';
						v += '  <h2>' + localize.t('tiq.datasources.specs.spec_configuration') + '</h2>';
						v += '  <p>' + localize.t('tiq.datasources.specs.configure_your_spec') + '</p>';
						v += '</div>';

						v += '<div id="data_sources" class="wizard_tab">';
						v += '  <h2>' + localize.t('tiq.datasources.specs.data_sources') + '</h2>';
						v += '  <p>' + localize.t('tiq.datasources.specs.add_modify_data_sources') + '</p>';
						v += '</div>';

						return v;
					}
				},

				// --------------------------------------------------------
				data_layer_spec: {
					// --------------------------------------------------------
					context: function () {
						var v = '';

						v += '<div>' + _resources[0].title + '</div>';
						v += '<button class="btn btn-small" onclick="utui.help.openCommunityLink(\'' + _resources[0].url + '\'); return false;"><i class="icon-external-link"></i> ' + localize.t('tiq.datasources.specs.view_documentation') + '</button>';

						return v;
					},

					// --------------------------------------------------------
					contentBody: function (fieldset, slug) {
						var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, slug, true),
							v = '';

						v += '<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
						v += '</div></div></div>';

						return '<div class="section-padded-top-bottom">' + v + '</div>';
					}
				},

				// --------------------------------------------------------
				data_sources: {
					// --------------------------------------------------------
					contentHeaderControls: function () {
						var v = '';

						v += '<header class="wizardHeader">';
						v += '  <div>' + localize.t('tiq.datasources.specs.header_data_sources') + ' ';
						v += '      <select style="width:250px; margin-right:10px" class="variableSelect" id="' + _namespace + '_define_select" name="' + _namespace + '_define_select" data-list-type="data_layer_spec"></select>';
						v += '  </div>';
						v += '  <div>';
						v += '      <span class="btn btn-small i-color-add" id="' + _namespace + '_btnAddDataSourceRequirement"><i class="icon-plus"></i> ' + localize.t('tiq.datasources.specs.header_select_data_source') + '</span>';
						v += '  </div>';
						v += '  <div class="pull-right">';
						v += '      <span id="' + _namespace + '_btnAddDataSource" class="btn btn-small i-color-add" style="margin: 3px 0;"><i class="icon-plus"></i> ' + localize.t('tiq.datasources.specs.header_define_new_data_source') + '</span>';
						v += '  </div>';
						v += '</header>';

						return v;
					},

					// --------------------------------------------------------
					contentHeader: function () {
						var v = '';

						v += '<div class="accordion_header">';
						v += '  <div class="container_specification_type_header">' + localize.t('tiq.datasources.specs.header_type') + '</div>';
						v += '  <div class="container_source_header">' + localize.t('tiq.datasources.specs.header_data_source') + '</div>';
						v += '  <div class="container_requirement_header">' + localize.t('tiq.datasources.specs.header_requirement') + '</div>';
						v += '  <div class="container_expected_value_header">' + localize.t('tiq.datasources.specs.header_expected_value') + '</div>';
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					contentBody: function () {
						var dataSources = _saveObj.data_sources,
							ds, dsObj, type, dataKey, format, source, requirement, expectedValue, requirementHiddenClass,
							v = '';

						if (dataSources.length > 0) {
							for (var i = 0; i < dataSources.length; i++) {
								dsObj = dataSources[i];
								format = dsObj.format;
								type = dsObj.type;
								source = dsObj.source;
								dataKey = type + '.' + source;
								source = utui.util.safeEscape(source);
								requirement = dsObj.requirement;
								requirementHiddenClass = '';
								expectedValue = utui.util.safeEscape(dsObj.expected_value);

								// If object is a data source obtain format and name
								ds = $.extend(true, {}, dsapi.getDataSource(dataKey));
								if ($.isEmptyObject(ds)) {
									continue; // should never happen - Only UDO Variable types are in the select list
								}
								ds.dsID = ds.id; // need to set dsID for getDataSourceMappingItemView

								// Hide expected value input field for select requirement values
								if (typeof _hideRequirementInput[requirement] !== 'undefined') {
									requirementHiddenClass = ' hidden-input';
								}

								v += '  <div class="row-item ' + type + '" data-key="' + utui.util.safeEscape(dataKey) + '">';
								v += utui.define.getDataSourceMappingItemView(ds, _namespace);
								v += '      <div class="container_requirement">' + _view.data_sources.requirementOperatorSelect(requirement) + '</div>';
								v += '      <div class="container_value' + requirementHiddenClass + '">';
								v += $('<input/>')
									.attr({'class': _namespace + '_expected_value',
										'type': 'text',
										'value': _.unescape(expectedValue)
									})[0].outerHTML;
								v += '      </div>';
								v += '      <div class="' + _namespace + '_btnRemoveDataSource" title="' + utui.tooltip.define.remove + '"><i class="icon-remove-sign"></i></div>';
								v += '  </div>';
							}
						} else {
							v += '	<div class="noItemsToShow">';
							v += '		<span>' + localize.t('tiq.datasources.specs.add_required_data_sources') + '</span>';
							v += '		<i class="icon-hand-up"></i>';
							v += '	</div>';
						}

						return v;
					},

					// --------------------------------------------------------
					requirementOperatorSelect: function (requirement) {
						var dataSourceOperators = utui.config.dataSourceOperators,
							v = '';

						v += '<select class="' + _namespace + '_requirement_operator_select">';
						v += '  <option></option>';
						for (var key in dataSourceOperators) {
							v += '<optgroup label="' + localize.t('tiq.datasources.specs.type_colon') + ' ' + utui.config.defineFormatOptions[key] + '" data-format-type="' + key + '">';

							var options = dataSourceOperators[key];
							for (var i in options) {
								if (requirement === i) {
									v += '<option selected value="' + i + '">' + options[i] + '</option>';
								} else {
									v += '<option value="' + i + '">' + options[i] + '</option>';
								}
							}
						}
						v += '</select>';

						return v;
					},

					// --------------------------------------------------------
					context: function () {
						var v = '';

						v += '<div>' + _resources[0].title + '</div>';
						v += '<button class="btn btn-small" onclick="utui.help.openCommunityLink(\'' + _resources[0].url + '\'); return false;"><i class="icon-external-link"></i> ' + localize.t('tiq.datasources.specs.view_documentation') + '</button>';

						return v;
					}
				}
			};

			// --------------------------------------------------------
			var _render = {
				// --------------------------------------------------------
				ui: function () {
					$modalDialog.find('.modal-header').html(_view.modal.contentHeader());
					$modalDialog.find('.modal-body').html(_templateAccordion);

					_bindUI.topNavMenu();

					// Render 1st panel into DOM
					_panels.data_layer_spec.render();

					// Dialog adjustments
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				mappingSelect: function () {
					var currentMappings = {},
						dataSources = _saveObj.data_sources,
						selectArr = [];

					// Mapped Variables only able to be selected once per dataLayerSpec so do NOT add them to the list here
					for (var m in dataSources) {
						var dataSource = dataSources[m];

						currentMappings[dataSource.type + '.' + dataSource.source] = 1;
					}


					for (j in utui.util.getVars(utui.data.define)) {
						var ds = utui.data.define[j],
							k = ds.name,
							title = ds.title || k,
							t = ds.type,
							value = t + '.' + k;

						// Do not append imported data sources
						// Only append UDO Variable types
						if (ds.imported || t !== utui.define.types.JS) {
							continue;
						}

						if (!currentMappings[value]) {
							selectArr.push({
								html: $('<option/>')
									.text(_.unescape(title))
									.attr({'value': value,
										'data-type': t
									})[0].outerHTML,
								variable: title + " (" + t + ")",
								type: t
							});
						}
					}

					// sort and group the options by type then sort
					// this will sort the groups in alphabetical order with items within groups in order too
					var groupedOptions = _.groupBy(_.sortBy(selectArr, function (option) {
						var optionType = option.type.toLowerCase();
						return (optionType === 'dom') ? -1 : optionType;
					}), 'type');
					var htmlResult = "";
					_.each(groupedOptions, function (selectArr, key) {
						// sort by variable
						var sortedVariables = _.sortBy(selectArr, function (option) {
							return option.variable.toLowerCase();
						});

						// append group identifier
						htmlResult += '<optgroup label="' + dsapi.getDataSourceTypeName(key) + '" data-type="' + key + '">';

						_.each(sortedVariables, function (option) {
							// append the option html
							htmlResult += option.html;
						});
					});

					return htmlResult;
				},

				// --------------------------------------------------------
				contentBody: function () {
					var $contentBody = $modalDialog.find('.content-body');
					$contentBody.html(_view.data_sources.contentBody());

					// Bind change events and Convert to select2
					_bindUI.requirementOperatorSelect($contentBody);
					_bindUI.expectedValueInput($contentBody);

					// Bind delete event and render tooltips
					_bindUI.removeDataSourceBtns($contentBody);
				}
			};

			var buttons = [
					{
						text: localize.t('tiq.dialog.button.next'),
						click: function () {
							if (_selectedTab === 'data_layer_spec') {
								$modalDialog.find('#data_sources').trigger('click');
							}
							else if (_isValid()) {
								var id = _saveObj.id;
								if (id !== '-1') {
									// Update data layer spec
									_saveObj.action = utui.constants.operation.UPDATED;
									utui.util.pubsub.publish(utui.constants.data_layer_specs.UPDATED, {data_layer_spec: _saveObj});
								} else {
									// Save new data layer spec
									_getNextDataLayerSpecId(function (id) {
										_saveObj.id = id;
										utui.util.pubsub.publish(utui.constants.data_layer_specs.ADDED, {data_layer_spec: _saveObj});
									});
								}

								_eventHandlers.onBtnCancelClick();

								if (callback) {
									callback({ id: id });
								}
							}
						},
						id: _namespace + '_applyBtn'
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						click: _eventHandlers.onBtnCancelClick,
						id: _namespace + '_cancelBtn',
						style: 'float:left; margin-left: 12px'
					}
				],
				title = (_isNewDataLayerSpec(_dataLayerSpec)) ? localize.t('tiq.datasources.specs.create_new_data_layer_spec') : localize.t('tiq.datasources.specs.data_layer_specification', {spec_title: utui.util.safeEscape(_dataLayerSpec.title)});

			// Show the modal dialog
			$modalDialog = utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width:1000, height:550 }, _eventHandlers.onBtnCancelClick);

			// Render the contents of the dialog
			_render.ui();

			return $modalDialog;
		}

	};

	return _public;
}();

utui.define.showDefineWizard = function (){
    // PRIVATE
    // ----------------------------------------------------------------

    // Specifies the namespace of the dialog for proper DOM injection
    var _namespace = "define_common_sources",
        _$template = utui.ui.dialog.body(false,true);


    // Configuration Data
    var _activeId = 'base';
    var _customization_eCommerceId = '100005';
    var _customization_mobileLibraryManagerId = "100030";
    var _sort = 1;


	var _data = {
		base : {
			active : true,
			sort : _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.base.title'),
			description: localize.t('tiq.datasources.wizard.base.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.base.resources.data_layer_tab'), url: common.community.data_layer_tab },
				{ type: "article", title: localize.t('tiq.datasources.wizard.base.resources.datasource_types'), url: common.community.data_source_types },
				{ type: "video", title: localize.t('tiq.datasources.wizard.base.resources.adding_datasources'), url: common.community.adding_data_sources }
			],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.base.variables.name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.base.variables.name.desc') },
				{ title:localize.t('tiq.datasources.wizard.base.variables.section.title'), name: "page_section", type: "js", description: localize.t('tiq.datasources.wizard.base.variables.section.desc') },
				{ title: localize.t('tiq.datasources.wizard.base.variables.category.title'), name: "page_category", type: "js", description: localize.t('tiq.datasources.wizard.base.variables.category.desc') },
				{ title: localize.t('tiq.datasources.wizard.base.variables.subcategory.title'), name: "page_subcategory", type: "js", description: localize.t('tiq.datasources.wizard.base.variables.subcategory.desc') },
				{ title: localize.t('tiq.datasources.wizard.base.variables.type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.base.variables.type.desc') }
			]
		},
		user : {
			active : true,
			sort : _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.user.title'),
			description: localize.t('tiq.datasources.wizard.user.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.user.resources.data_layer_tab'), url: common.community.data_layer_tab },
				{ type: "article", title: localize.t('tiq.datasources.wizard.user.resources.datasource_types'), url: common.community.data_source_types },
				{ type: "video", title: localize.t('tiq.datasources.wizard.user.resources.adding_datasources'), url: common.community.adding_data_sources }
			],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.user.variables.id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.id.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.username.title'), name: "customer_username", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.username.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.status.title'), name: "customer_status", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.status.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.type.title'), name: "customer_type", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.type.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.email.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.city.title'), name: "customer_city", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.city.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.state.title'), name: "customer_state", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.state.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.zipcode.title'), name: "customer_zip", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.zipcode.desc') },
				{ title: localize.t('tiq.datasources.wizard.user.variables.country.title'), name: "customer_country", type: "js", description: localize.t('tiq.datasources.wizard.user.variables.country.desc') }
			]
		},
		search : {
			active : true,
			sort : _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.search.title'),
			description: localize.t('tiq.datasources.wizard.search.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.search.resources.data_layer_tab'), url: common.community.data_layer_tab },
				{ type: "article", title: localize.t('tiq.datasources.wizard.search.resources.datasource_types'), url: common.community.data_source_types },
				{ type: "video", title: localize.t('tiq.datasources.wizard.search.resources.adding_datasources'), url: common.community.adding_data_sources }
			],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.search.variables.term.title'), name: "search_term", type: "js", description: localize.t('tiq.datasources.wizard.search.variables.term.desc') },
				{ title: localize.t('tiq.datasources.wizard.search.variables.results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.search.variables.results.desc') },
				{ title: localize.t('tiq.datasources.wizard.search.variables.type.title'), name: "search_type", type: "js", description: localize.t('tiq.datasources.wizard.search.variables.type.desc') }
			]
		},
		ecommerce : {
			active: true,
			sort: _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.ecommerce.title'),
			description: localize.t('tiq.datasources.wizard.ecommerce.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.ecommerce.resources.ecommerce_extension'), url: common.community.ecommerce_extension }
			],
			handler_button: function(obj) { return _handler.eCommerceButton(obj) },
			handler_description: localize.t('tiq.datasources.wizard.ecommerce.handler_desc'),
			handler: function(obj) { return _handler.eCommerce(obj) },
			handler_vars: {
				product_id: { type: "js", map: "cprod" },
				product_sku: { type: "js", map: "csku" },
				product_name: { type: "js", map: "cprodname" },
				product_brand: { type: "js", map: "cbrand" },
				product_category: { type: "js", map: "ccat" },
				product_subcategory: { type: "js", map: "ccat2" },
				product_unit_price: { type: "js", map: "cprice" },
				product_quantity: { type: "js", map: "cquan" },
				product_discount: { type: "js", map: "cpdisc" },
				order_id: { type: "js", map: "corder" },
				order_total: { type: "js", map: "ctotal" },
				order_subtotal: { type: "js", map: "csubtotal" },
				order_shipping: { type: "js", map: "cship" },
				order_tax: { type: "js", map: "ctax" },
				order_currency: { type: "js", map: "ccurrency" },
				order_coupon_code: { type: "js", map: "cpromo" },
				order_store: { type: "js", map: "cstore" },
				order_type: { type: "js", map: "ctype" },
				customer_id: { type: "js", map: "ccustid" },
				customer_city: { type: "js", map: "ccity" },
				customer_state: { type: "js", map: "cstate" },
				customer_zip: { type: "js", map: "czip" },
				customer_country: { type: "js", map: "ccountry" }
			},
			variables : [
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_id.title'), name: "product_id", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_sku.title'), name: "product_sku", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_sku.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_name.title'), name: "product_name", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_brand.title'), name: "product_brand", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_brand.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_category.title'), name: "product_category", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_subcategory.title'), name: "product_subcategory", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_subcategory.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_unit_price.title'), name: "product_unit_price", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_unit_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_list_price.title'), name: "product_list_price", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_list_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_quantity.title'), name: "product_quantity", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_quantity.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.product_discount.title'), name: "product_discount", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.product_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_id.title'), name: "order_id", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_total.title'), name: "order_total", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_total.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_subtotal.title'), name: "order_subtotal", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_subtotal.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_payment_type.title'), name: "order_payment_type", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_payment_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_discount.title'), name: "order_discount", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_shipping.title'), name: "order_shipping", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_shipping.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_tax.title'), name: "order_tax", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_tax.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_currency.title'), name: "order_currency", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_coupon_code.title'), name: "order_coupon_code", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_coupon_code.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_coupon_discount.title'), name: "order_coupon_discount", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_coupon_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_store.title'), name: "order_store", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_store.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.order_type.title'), name: "order_type", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.order_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_city.title'), name: "customer_city", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_city.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_state.title'), name: "customer_state", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_state.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_zip.title'), name: "customer_zip", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_zip.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_country.title'), name: "customer_country", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_country.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_email.desc') },
				{ title: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_type.title'), name: "customer_type", type: "js", description: localize.t('tiq.datasources.wizard.ecommerce.variables.customer_type.desc') }
			]
		},
		publishing : {
			active : true,
			sort : _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.publishing.title'),
			description: localize.t('tiq.datasources.wizard.publishing.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.publishing.resources.data_layer_tab'), url: common.community.data_layer_tab },
				{ type: "article", title: localize.t('tiq.datasources.wizard.publishing.resources.data_source_types'), url: common.community.data_source_types },
				{ type: "video", title: localize.t('tiq.datasources.wizard.publishing.resources.adding_data_sources'), url: common.community.adding_data_sources }
			],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.page_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.page_section.title'), name: "page_section", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.page_section.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.page_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.page_category.title'), name: "page_category", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.page_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.page_subcategory.title'), name: "page_subcategory", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.page_subcategory.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.site_region.title'), name: "site_region", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.site_region.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.article_id.title'), name: "article_id", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.article_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.article_name.title'), name: "article_name", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.article_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.article_author.title'), name: "article_author", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.article_author.desc') },
				{ title: localize.t('tiq.datasources.wizard.publishing.variables.article_publish_date.title'), name: "article_publish_date", type: "js", description: localize.t('tiq.datasources.wizard.publishing.variables.article_publish_date.desc') }
			]
		},
        // These are utag internal data sources and thus will not be added to the code snippet in Code Center. To support this, there is logic in the dsapi to identify these variables
        // and omit them from the code snippet. If you add any new tag internal variables, be sure to update the dsapi call so that the code snippet is correct. CS:4/15
		utag_data : {
			active : true,
            blockCodeCenterInsertion : true,
			sort : _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.utag_data.title'),
			description: localize.t('tiq.datasources.wizard.utag_data.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.utag_data.resources.data_layer_tab'), url: common.community.data_layer_tab },
				{ type: "article", title: localize.t('tiq.datasources.wizard.utag_data.resources.data_source_types'), url: common.community.data_source_types },
				{ type: "video", title: localize.t('tiq.datasources.wizard.utag_data.resources.adding_data_sources'), url: common.community.adding_data_sources }
			],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__ss.title'), name: "utag_main__ss", type: "cp", description: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__ss.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__pn.title'), name: "utag_main__pn", type: "cp", description: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__pn.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__sn.title'), name: "utag_main__sn", type: "cp", description: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__sn.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main_v_id.title'), name: "utag_main_v_id", type: "cp", description: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main_v_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__st.title'), name: "utag_main__st", type: "cp", description: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main__st.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main_ses_id.title'), name: "utag_main_ses_id", type: "cp", description: localize.t('tiq.datasources.wizard.utag_data.variables.utag_main_ses_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.ut_event.title'), name: "ut.event", type: "js", description: localize.t('tiq.datasources.wizard.utag_data.variables.ut_event.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.ut_account.title'), name: "ut.account", type: "js", description: localize.t('tiq.datasources.wizard.utag_data.variables.ut_account.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.ut_profile.title'), name: "ut.profile", type: "js", description: localize.t('tiq.datasources.wizard.utag_data.variables.ut_profile.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.ut_env.title'), name: "ut.env", type: "js", description: localize.t('tiq.datasources.wizard.utag_data.variables.ut_env.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.ut_version.title'), name: "ut.version", type: "js", description: localize.t('tiq.datasources.wizard.utag_data.variables.ut_version.desc') },
				{ title: localize.t('tiq.datasources.wizard.utag_data.variables.ut_domain.title'), name: "ut.domain", type: "js", description: localize.t('tiq.datasources.wizard.utag_data.variables.ut_domain.desc') }
			]
		},
		video : {
			active : true,
			sort : _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.video.title'),
			description: localize.t('tiq.datasources.wizard.video.desc'),
			resources: [
				{ type: "video", title: localize.t('tiq.datasources.wizard.video.resources.tealium_iq_series'), url: common.community.tracking_video_interactions_with_tealiumiq }
			],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.video.variables.video_id.title'), name: "video_id", type: "js", description: localize.t('tiq.datasources.wizard.video.variables.video_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.video.variables.video_name.title'), name: "video_name", type: "js", description: localize.t('tiq.datasources.wizard.video.variables.video_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.video.variables.video_duration.title'), name: "video_duration", type: "js", description: localize.t('tiq.datasources.wizard.video.variables.video_duration.desc') },
				{ title: localize.t('tiq.datasources.wizard.video.variables.video_offset.title'), name: "video_offset", type: "js", description: localize.t('tiq.datasources.wizard.video.variables.video_offset.desc') },
				{ title: localize.t('tiq.datasources.wizard.video.variables.video_state.title'), name: "video_state", type: "js", description: localize.t('tiq.datasources.wizard.video.variables.video_state.desc') },
				{ title: localize.t('tiq.datasources.wizard.video.variables.video_player.title'), name: "video_player", type: "js", description: localize.t('tiq.datasources.wizard.video.variables.video_player.desc') },
				{ title: localize.t('tiq.datasources.wizard.video.variables.video_player_version.title'), name: "video_player_version", type: "js", description: localize.t('tiq.datasources.wizard.video.variables.video_player_version.desc') }
			]
		},
		event : {
			active : true,
			sort : _sort++,
			type: "Category",
			title: localize.t('tiq.datasources.wizard.event.title'),
			description: localize.t('tiq.datasources.wizard.event.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.event.resources.jquery_onhandler_extension'), url: common.community.jquery_onhandler_extension }
			],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.event.variables.event_type.title'), name: "event_type", type: "js", description: localize.t('tiq.datasources.wizard.event.variables.event_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.event.variables.event_target.title'), name: "event_target", type: "js", description: localize.t('tiq.datasources.wizard.event.variables.event_target.desc') },
				{ title: localize.t('tiq.datasources.wizard.event.variables.event_attr1.title'), name: "event_attr1", type: "js", description: localize.t('tiq.datasources.wizard.event.variables.event_attr1.desc') },
				{ title: localize.t('tiq.datasources.wizard.event.variables.event_attr2.title'), name: "event_attr2", type: "js", description: localize.t('tiq.datasources.wizard.event.variables.event_attr2.desc') },
				{ title: localize.t('tiq.datasources.wizard.event.variables.event_attr3.title'), name: "event_attr3", type: "js", description: localize.t('tiq.datasources.wizard.event.variables.event_attr3.desc') },
				{ title: localize.t('tiq.datasources.wizard.event.variables.event_attr4.title'), name: "event_attr4", type: "js", description: localize.t('tiq.datasources.wizard.event.variables.event_attr4.desc') }
			]
		},
        acq : {
            active : true,
            sort : _sort++,
            type: "Provider",
            title: localize.t('tiq.datasources.wizard.acq.title'),
            logo: "img/logo_adobe_cq.png",
            description: localize.t('tiq.datasources.wizard.acq.desc'),
            resources: [
                { type: "article", title: localize.t('tiq.datasources.wizard.acq.resources.installation_guide'), url: "https://github.com/Tealium/integration-adobe-cq/blob/master/documentation/tealium-integration-adobe-cq.pdf" },
                { type: "article", title: localize.t('tiq.datasources.wizard.acq.resources.github_repo'), url: "https://github.com/Tealium/integration-adobe-cq" },
                { type: "article", title: localize.t('tiq.datasources.wizard.acq.resources.integration_example'), url: "https://github.com/Tealium/integration-adobe-cq/tree/master/tealium-examples" },
                { type: "article", title: localize.t('tiq.datasources.wizard.base.resources.data_layer_tab'), url: common.community.data_layer_tab },
				{ type: "video", title: localize.t('tiq.datasources.wizard.base.resources.adding_datasources'), url: common.community.adding_data_sources }
            ],
            no_import_vars : true,
            handler_button: function(obj) {  return true; },
            handler_description: localize.t('tiq.datasources.wizard.acq.handler_desc'),
            handler: function(obj) { return true;  },
            handler_vars: {},
            variables : []
        },
        aem : {
            active : true,
            sort : _sort++,
            type: "Provider",
            title: localize.t('tiq.datasources.wizard.aem.title'),
            logo: "img/logo_adobe_em.png", 
            description: localize.t('tiq.datasources.wizard.aem.desc'),
            resources: [
                { type: "article", title: localize.t('tiq.datasources.wizard.aem.resources.installation_guide'), url: "https://github.com/Tealium/integration-adobe-aem/blob/master/documentation/tealium-integration-adobe-aem.pdf" },
                { type: "article", title: localize.t('tiq.datasources.wizard.aem.resources.github_repo'), url: "https://github.com/Tealium/integration-adobe-aem" },
                { type: "article", title: localize.t('tiq.datasources.wizard.aem.resources.integration_example'), url: "https://github.com/Tealium/integration-adobe-cq/tree/master/tealium-examples" },
                { type: "article", title: localize.t('tiq.datasources.wizard.base.resources.data_layer_tab'), url: common.community.data_layer_tab },
				{ type: "video", title: localize.t('tiq.datasources.wizard.base.resources.adding_datasources'), url: common.community.adding_data_sources }
            ],
            no_import_vars : true,
            handler_button: function(obj) { return true; },
            handler_description: localize.t('tiq.datasources.wizard.aem.handler_desc'),
            handler: function(obj) { return true;  },
            handler_vars: {},
            variables : []
        },        
		demandware : {
			active : true,
			sort : _sort++,
			type: "Provider",
			title: localize.t('tiq.datasources.wizard.demandware.title'),
			logo: "img/logo_demandware.png",
			description: localize.t('tiq.datasources.wizard.demandware.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.demandware.resources.ecommerce_enabled_tags'), url: common.community.ecommerce_extension }
			],
			handler_button: function(obj) { return _handler.eCommerceButton(obj) },
			handler_description: localize.t('tiq.datasources.wizard.demandware.handler_desc'),
			handler: function(obj) { return _handler.eCommerce(obj) },
			handler_vars: {
				product_id: { type: "js", map: "cprod" },
				product_name: { type: "js", map: "cprodname" },
				product_brand: { type: "js", map: "cbrand" },
				product_category: { type: "js", map: "ccat" },
				product_sku: { type: "js", map: "csku" },
				product_unit_price: { type: "js", map: "cprice" },
				product_quantity: { type: "js", map: "cquan" },
				order_id: { type: "js", map: "corder" },
				order_subtotal: { type: "js", map: "csubtotal" },
				order_total: { type: "js", map: "ctotal" },
				order_tax: { type: "js", map: "ctax" },
				order_shipping: { type: "js", map: "cship" },
				order_coupon_code: { type: "js", map: "cpromo" },
				customer_zip: { type: "js", map: "czip" },
				customer_id: { type: "js", map: "ccustid" }
			},
			variables : [
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.page_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.page_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.page_category.title'), name: "page_category", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.page_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.product_id.title'), name: "product_id", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.product_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.product_name.title'), name: "product_name", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.product_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.product_brand.title'), name: "product_brand", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.product_brand.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.product_category.title'), name: "product_category", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.product_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.product_sku.title'), name: "product_sku", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.product_sku.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.product_unit_price.title'), name: "product_unit_price", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.product_unit_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.product_quantity.title'), name: "product_quantity", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.product_quantity.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_id.title'), name: "order_id", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_payment_type.title'), name: "order_payment_type", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_payment_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_currency.title'), name: "order_currency", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_subtotal.title'), name: "order_subtotal", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_subtotal.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_total.title'), name: "order_total", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_total.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_discount.title'), name: "order_discount", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_tax.title'), name: "order_tax", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_tax.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_shipping.title'), name: "order_shipping", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_shipping.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_coupon_discount.title'), name: "order_coupon_discount", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_coupon_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_coupon_promo.title'), name: "order_coupon_promo", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_coupon_promo.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.coupon_codes.title'), name: "coupon_codes", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.coupon_codes.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.order_postal_code.title'), name: "order_postal_code", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.order_postal_code.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.page_context_type.title'), name: "page_context_type", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.page_context_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.page_context_title.title'), name: "page_context_title", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.page_context_title.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.customer_id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.customer_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.customer_email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.customer_email.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.user_anonymous.title'), name: "user_anonymous", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.user_anonymous.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.user_authenticated.title'), name: "user_authenticated", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.user_authenticated.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.user_registered.title'), name: "user_registered", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.user_registered.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.search_results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.search_results.desc') },
				{ title: localize.t('tiq.datasources.wizard.demandware.variables.search_term.title'), name: "search_term", type: "js", description: localize.t('tiq.datasources.wizard.demandware.variables.search_term.desc') }
			]
		},
		hybris : {
			active : true,
			sort : _sort++,
			type: "Provider",
			title: localize.t('tiq.datasources.wizard.hybris.title'),
			logo: "img/logo_hybris.png",
			description: localize.t('tiq.datasources.wizard.hybris.desc'),
			resources: [],
			handler_button: function(obj) { return _handler.eCommerceButton(obj) },
			handler_description: localize.t('tiq.datasources.wizard.hybris.handler_desc'),
			handler: function(obj) { return _handler.eCommerce(obj) },
			handler_vars: {
				product_id: { type: "js", map: "cprod" },
				product_sku: { type: "js", map: "csku" },
				product_name: { type: "js", map: "cprodname" },
				product_brand: { type: "js", map: "cbrand" },
				product_category: { type: "js", map: "ccat" },
				product_subcategory: { type: "js", map: "ccat2" },
				product_unit_price: { type: "js", map: "cprice" },
				product_quantity: { type: "js", map: "cquan" },
				product_discount: { type: "js", map: "cpdisc" },
				order_id: { type: "js", map: "corder" },
				order_total: { type: "js", map: "ctotal" },
				order_subtotal: { type: "js", map: "csubtotal" },
				order_shipping: { type: "js", map: "cship" },
				order_tax: { type: "js", map: "ctax" },
				order_currency: { type: "js", map: "ccurrency" },
				order_coupon_code: { type: "js", map: "cpromo" },
				order_store: { type: "js", map: "cstore" },
				order_type: { type: "js", map: "ctype" },
				customer_id: { type: "js", map: "ccustid" },
				customer_city: { type: "js", map: "ccity" },
				customer_state: { type: "js", map: "cstate" },
				customer_zip: { type: "js", map: "czip" },
				customer_country: { type: "js", map: "ccountry" }
			},
			variables : [
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.page_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.page_section_name.title'), name: "page_section_name", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.page_section_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.page_category_name.title'), name: "page_category_name", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.page_category_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.page_subcategory_name.title'), name: "page_subcategory_name", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.page_subcategory_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.page_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_id.title'), name: "product_id", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_sku.title'), name: "product_sku", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_sku.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_name.title'), name: "product_name", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_brand.title'), name: "product_brand", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_brand.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_category.title'), name: "product_category", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_subcategory.title'), name: "product_subcategory", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_subcategory.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_unit_price.title'), name: "product_unit_price", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_unit_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_quantity.title'), name: "product_quantity", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_quantity.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_list_price.title'), name: "product_list_price", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_list_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.product_discount.title'), name: "product_discount", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.product_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_id.title'), name: "order_id", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_subtotal.title'), name: "order_subtotal", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_subtotal.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_payment_type.title'), name: "order_payment_type", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_payment_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_total.title'), name: "order_total", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_total.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_discount.title'), name: "order_discount", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_shipping.title'), name: "order_shipping", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_shipping.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_tax.title'), name: "order_tax", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_tax.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_currency.title'), name: "order_currency", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_coupon_code.title'), name: "order_coupon_code", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_coupon_code.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_type.title'), name: "order_type", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.order_store.title'), name: "order_store", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.order_store.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_city.title'), name: "customer_city", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_city.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_country.title'), name: "customer_country", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_country.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_state.title'), name: "customer_state", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_state.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_zip.title'), name: "customer_zip", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_zip.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_username.title'), name: "customer_username", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_username.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_email.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_type.title'), name: "customer_type", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.customer_status.title'), name: "customer_status", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.customer_status.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.search_results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.search_results.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.search_keyword.title'), name: "search_keyword", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.search_keyword.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.search_type.title'), name: "search_type", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.search_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.site_region.title'), name: "site_region", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.site_region.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.site_currency.title'), name: "site_currency", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.site_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.link_id.title'), name: "link_id", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.link_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.link_name.title'), name: "link_name", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.link_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.hybris.variables.link_type.title'), name: "link_type", type: "js", description: localize.t('tiq.datasources.wizard.hybris.variables.link_type.desc') }
			]
		},
		ibmwebsphere : {
			active: true,
			sort: _sort++,
			type: "Provider",
			title: localize.t('tiq.datasources.wizard.ibmwebsphere.title'),
			logo: "img/logo_ibm_websphere.png",
			description: localize.t('tiq.datasources.wizard.ibmwebsphere.desc'),
			resources: [],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.customer_email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.customer_email.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.customer_id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.customer_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_currency.title'), name: "order_currency", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_discount.title'), name: "order_discount", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_id.title'), name: "order_id", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_payment_type.title'), name: "order_payment_type", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_payment_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_shipping.title'), name: "order_shipping", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_shipping.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_subtotal.title'), name: "order_subtotal", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_subtotal.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_tax.title'), name: "order_tax", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_tax.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_total.title'), name: "order_total", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.order_total.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.page_category_name.title'), name: "page_category_name", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.page_category_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.page_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.page_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_brand.title'), name: "product_brand", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_brand.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_category.title'), name: "product_category", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_discount.title'), name: "product_discount", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_id.title'), name: "product_id", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_list_price.title'), name: "product_list_price", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_list_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_name.title'), name: "product_name", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_quantity.title'), name: "product_quantity", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_quantity.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_sku.title'), name: "product_sku", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_sku.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_unit_price.title'), name: "product_unit_price", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.product_unit_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_keyword.title'), name: "search_keyword", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_keyword.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_results.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_keyword_displayed.title'), name: "search_keyword_displayed", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_keyword_displayed.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_results_displayed.title'), name: "search_results_displayed", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.search_results_displayed.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.site_currency.title'), name: "site_currency", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.site_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.site_region.title'), name: "site_region", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.site_region.desc') },
				{ title: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.store_id.title'), name: "store_id", type: "js", description: localize.t('tiq.datasources.wizard.ibmwebsphere.variables.store_id.desc') }
			]
		},
		magento : {
			active : true,
			sort : _sort++,
			type: "Provider",
			title: localize.t('tiq.datasources.wizard.magento.title'),
			logo: "img/logo_magento.png",
			description: localize.t('tiq.datasources.wizard.magento.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.magento.resources.integrating_magento'), url: common.community.integrating_magento_and_tealiumiq },
				{ type: "article", title: localize.t('tiq.datasources.wizard.magento.resources.how_to_fix_magento'), url: common.community.how_to_fix_magento },
				{ type: "article", title: localize.t('tiq.datasources.wizard.magento.resources.ecommerce_enabled_tags'), url: common.community.ecommerce_extension }
			],
			handler_button: function(obj) { return _handler.eCommerceButton(obj) },
			handler_description: localize.t('tiq.datasources.wizard.magento.handler_desc'),
			handler: function(obj) { return _handler.eCommerce(obj) },
			handler_vars: {
				product_id: { type: "js", map: "cprod" },
				product_sku: { type: "js", map: "csku" },
				product_name: { type: "js", map: "cprodname" },
				product_brand: { type: "js", map: "cbrand" },
				product_category: { type: "js", map: "ccat" },
				product_unit_price: { type: "js", map: "cprice" },
				product_quantity: { type: "js", map: "cquan" },
				order_id: { type: "js", map: "corder" },
				order_subtotal: { type: "js", map: "csubtotal" },
				order_total: { type: "js", map: "ctotal" },
				order_shipping: { type: "js", map: "cship" },
				order_tax: { type: "js", map: "ctax" },
				order_currency: { type: "js", map: "ccurrency" },
				customer_id: { type: "js", map: "ccustid" }
			},
			variables : [
				{ title: localize.t('tiq.datasources.wizard.magento.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.page_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.page_section_name.title'), name: "page_section_name", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.page_section_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.page_category_name.title'), name: "page_category_name", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.page_category_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.page_subcategory_name.title'), name: "page_subcategory_name", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.page_subcategory_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.page_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_id.title'), name: "product_id", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_sku.title'), name: "product_sku", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_sku.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_name.title'), name: "product_name", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_brand.title'), name: "product_brand", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_brand.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_category.title'), name: "product_category", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_unit_price.title'), name: "product_unit_price", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_unit_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_quantity.title'), name: "product_quantity", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_quantity.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.product_list_price.title'), name: "product_list_price", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.product_list_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_id.title'), name: "order_id", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_subtotal.title'), name: "order_subtotal", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_subtotal.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_payment_type.title'), name: "order_payment_type", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_payment_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_total.title'), name: "order_total", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_total.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_discount.title'), name: "order_discount", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_shipping.title'), name: "order_shipping", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_shipping.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_tax.title'), name: "order_tax", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_tax.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.order_currency.title'), name: "order_currency", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.order_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.customer_id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.customer_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.customer_email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.customer_email.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.customer_type.title'), name: "customer_type", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.customer_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.search_results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.search_results.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.search_keyword.title'), name: "search_keyword", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.search_keyword.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.site_region.title'), name: "site_region", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.site_region.desc') },
				{ title: localize.t('tiq.datasources.wizard.magento.variables.site_currency.title'), name: "site_currency", type: "js", description: localize.t('tiq.datasources.wizard.magento.variables.site_currency.desc') }
			]
		},
		oracle : {
			active : true,
			sort : _sort++,
			type: "Provider",
			title: localize.t('tiq.datasources.wizard.oracle.title'),
			logo: "img/logo_oracle.png",
			description: localize.t('tiq.datasources.wizard.oracle.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.oracle.resources.oracle_integration'), url: common.community.oracle_commerce_integration_guide },
				{ type: "article", title: localize.t('tiq.datasources.wizard.oracle.resources.ecommerce_enabled_tags'), url: common.community.ecommerce_extension }
			],
			handler_button: function(obj) { return _handler.eCommerceButton(obj) },
			handler_description: localize.t('tiq.datasources.wizard.oracle.handler_desc'),
			handler: function(obj) { return _handler.eCommerce(obj) },
			handler_vars: {
				product_id: { type: "js", map: "cprod" },
				product_sku: { type: "js", map: "csku" },
				product_name: { type: "js", map: "cprodname" },
				product_brand: { type: "js", map: "cbrand" },
				product_category: { type: "js", map: "ccat" },
				product_unit_price: { type: "js", map: "cprice" },
				product_quantity: { type: "js", map: "cquan" },
				order_discount: { type: "js", map: "cpdisc" },
				order_id: { type: "js", map: "corder" },
				order_subtotal: { type: "js", map: "csubtotal" },
				order_total: { type: "js", map: "ctotal" },
				order_shipping: { type: "js", map: "cship" },
				order_tax: { type: "js", map: "ctax" },
				order_currency: { type: "js", map: "ccurrency" },
				customer_id: { type: "js", map: "ccustid" }
			},
			variables : [
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.page_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.page_section_name.title'), name: "page_section_name", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.page_section_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.page_category_name.title'), name: "page_category_name", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.page_category_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.page_subcategory_name.title'), name: "page_subcategory_name", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.page_subcategory_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.page_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_id.title'), name: "product_id", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_sku.title'), name: "product_sku", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_sku.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_name.title'), name: "product_name", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_brand.title'), name: "product_brand", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_brand.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_category.title'), name: "product_category", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_discount.title'), name: "product_discount", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_unit_price.title'), name: "product_unit_price", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_unit_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_quantity.title'), name: "product_quantity", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_quantity.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.product_list_price.title'), name: "product_list_price", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.product_list_price.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_id.title'), name: "order_id", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_subtotal.title'), name: "order_subtotal", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_subtotal.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_payment_type.title'), name: "order_payment_type", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_payment_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_total.title'), name: "order_total", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_total.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_discount.title'), name: "order_discount", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_discount.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_shipping.title'), name: "order_shipping", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_shipping.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_tax.title'), name: "order_tax", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_tax.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.order_currency.title'), name: "order_currency", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.order_currency.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.customer_id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.customer_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.customer_email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.customer_email.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.customer_name.title'), name: "customer_name", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.customer_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.customer_type.title'), name: "customer_type", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.customer_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.gender.title'), name: "gender", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.gender.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.search_results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.search_results.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.search_keyword.title'), name: "search_keyword", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.search_keyword.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.site_region.title'), name: "site_region", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.site_region.desc') },
				{ title: localize.t('tiq.datasources.wizard.oracle.variables.site_currency.title'), name: "site_currency", type: "js", description: localize.t('tiq.datasources.wizard.oracle.variables.site_currency.desc') }
			]
		},
		sitecore : {
			active : true,
			sort : _sort++,
			type: "Provider",
			title: localize.t('tiq.datasources.wizard.sitecore.title'),
			logo: "img/logo_sitecore.png",
			description: localize.t('tiq.datasources.wizard.sitecore.desc'),
			resources: [
				{ type: "article", title: localize.t('tiq.datasources.wizard.sitecore.resources.ecommerce_enabled_tags'), url: common.community.ecommerce_extension }
			],
			handler_button: function(obj) { return _handler.eCommerceButton(obj) },
			handler_description: localize.t('tiq.datasources.wizard.sitecore.handler_desc'),
			handler: function(obj) { return _handler.eCommerce(obj) },
			handler_vars: {},
			variables : [
				{ title: localize.t('tiq.datasources.wizard.sitecore.variables.page_id.title'), name: "page_id", type: "js", description: localize.t('tiq.datasources.wizard.sitecore.variables.page_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.sitecore.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.sitecore.variables.page_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.sitecore.variables.page_language.title'), name: "page_language", type: "js", description: localize.t('tiq.datasources.wizard.sitecore.variables.page_language.desc') },
				{ title: localize.t('tiq.datasources.wizard.sitecore.variables.page_path.title'), name: "page_path", type: "js", description: localize.t('tiq.datasources.wizard.sitecore.variables.page_path.desc') },
				{ title: localize.t('tiq.datasources.wizard.sitecore.variables.page_template_id.title'), name: "page_template_id", type: "js", description: localize.t('tiq.datasources.wizard.sitecore.variables.page_template_id.desc') },
				{ title: localize.t('tiq.datasources.wizard.sitecore.variables.page_template_name.title'), name: "page_template_name", type: "js", description: localize.t('tiq.datasources.wizard.sitecore.variables.page_template_name.desc') }
			]
		},
        shopify : {
            active : true,
            sort : _sort++,
            type: "Provider",
            title: localize.t('tiq.datasources.wizard.shopify.title'),
            logo: "img/logo_shopify_shopify.svg",
            description: localize.t('tiq.datasources.wizard.shopify.desc'),
            resources: [],
            handler_button: function(obj) { return _handler.eCommerceButton(obj) },
            handler_description: localize.t('tiq.datasources.wizard.shopify.handler_desc'),
            handler: function(obj) { return _handler.eCommerce(obj) },
            handler_vars: {
                country_code: { type: "js", map: "ccountry" },
                customer_id: { type: "js", map: "ccustid" },
                order_id: { type: "js", map: "corder" },
                product_brand: { type: "js", map: "cbrand" },
                product_id: { type: "js", map: "cprod" },
                product_name: { type: "js", map: "cprodname" },
                product_price: { type: "js", map: "cprice" },
                product_quantity: { type: "js", map: "cquan" },
                product_sku: { type: "js", map: "csku" }

            },
            variables : [

                { title: localize.t('tiq.datasources.wizard.shopify.variables.cart_total_items.title'), name: "cart_total_items", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.cart_total_items.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.cart_total_value.title'), name: "cart_total_value", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.cart_total_value.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.country_code.title'), name: "country_code", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.country_code.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.customer_email.title'), name: "customer_email", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.customer_email.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.customer_first_name.title'), name: "customer_first_name", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.customer_first_name.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.customer_id.title'), name: "customer_id", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.customer_id.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.customer_last_name.title'), name: "customer_last_name", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.customer_last_name.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.customer_logged_in.title'), name: "customer_logged_in", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.customer_logged_in.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.language_code.title'), name: "language_code", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.language_code.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.order_id.title'), name: "order_id", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.order_id.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.page_name.title'), name: "page_name", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.page_name.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.page_type.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.product_brand.title'), name: "product_brand", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.product_brand.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.product_id.title'), name: "product_id", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.product_id.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.product_name.title'), name: "product_name", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.product_name.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.product_price.title'), name: "product_price", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.product_price.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.product_quantity.title'), name: "product_quantity", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.product_quantity.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.product_sku.title'), name: "product_sku", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.product_sku.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.search_keyword.title'), name: "search_keyword", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.search_keyword.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.search_results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.search_results.desc') },
                { title: localize.t('tiq.datasources.wizard.shopify.variables.site_section.title'), name: "site_section", type: "js", description: localize.t('tiq.datasources.wizard.shopify.variables.site_section.desc') }

            ]
        },
        
		wordpress : {
			active : true,
			sort : _sort++,
			type: "Provider",
			title: localize.t('tiq.datasources.wizard.wordpress.title'),
			logo: "img/logo_wordpress.png",
			description: localize.t('tiq.datasources.wizard.wordpress.desc'),
			resources: [],
			variables : [
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.site_name.title'), name: "site_name", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.site_name.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.site_description.title'), name: "site_description", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.site_description.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.post_title.title'), name: "post_title", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.post_title.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.post_category.title'), name: "post_category", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.post_category.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.post_tags.title'), name: "post_tags", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.post_tags.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.post_author.title'), name: "post_author", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.post_author.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.post_date.title'), name: "post_date", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.post_date.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.page_type.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.search_query.title'), name: "search_query", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.search_query.desc') },
				{ title: localize.t('tiq.datasources.wizard.wordpress.variables.search_results.title'), name: "search_results", type: "js", description: localize.t('tiq.datasources.wizard.wordpress.variables.search_results.desc') }
			]
		}
        
	};

    var _render = {
        context: function () {
            _$template.find('.dialog-context-header').html();
            _$template.find('.dialog-context-body').html(_view.navigation()).css("height","550");
            _$template.find('.dialog-context-footer').html();
        },
        content: function () {
            _$template.find('.dialog-content-header').html(_view.contentHeader());
            _$template.find('.dialog-content-body').html(_view.contentBody()).addClass(_namespace + 'Body');

            // Binding
            _bindUI.navigation();
            _bindUI.addButton();
            _bindUI.codeCenterBtn();
        }
    };

    // View modules to be used within the wireframe
    var _view = {
        navigation: function () {
            var v = '       <a href="#"></a><div class="dialog-context-title">' + localize.t('tiq.datasources.wizard.standard_bundles') + '</div>';
            v += '       <ul class="dialog-context-nav" id="' + _namespace + '_listingcategory">';
            v +=           _viewModel.getDataCategories(_activeId, 'Category');
            v += '       </ul>';
            v += ' <br>';
            v += '       <a href="#"></a><div class="dialog-context-title">' + localize.t('tiq.datasources.wizard.provider_bundles') + '</div>';
            v += '       <ul class="dialog-context-nav" id="' + _namespace + '_listingprovider">';
            v +=           _viewModel.getDataCategories(_activeId, 'Provider');
            v += '       </ul>';
            return v;
        },
        contentHeader: function () {
            var v = '';
            v += '    <div class="dialog-content-headline valign-container">';
            v += '        <div class="container-fluid">';
            v += '            <div class="row-fluid">';
            v += '                <div class="span6">';
            v += '                    <div id="' + _namespace + '_listing_header" class="dialog-content-headline-title">' + localize.t('tiq.datasources.wizard.user_overview') + '</div>';
            v += '                </div>';
            v += '                <div class="span6 alignright">';
            v += '                  <a href="#" id="' + _namespace + '_listing_addbutton" class="btn btn-success datasources-add">' + localize.t('tiq.datasources.wizard.import_this_bundle') + '</a>';
            v += '                  <span id="' + _namespace + '_listing_addmessage"></span>';
            v += '                </div>';
            v += '            </div>';
            v += '        </div>';
            v += '    </div>';
            return v;
        },
        contentBody: function () {
            var v = '';
            v +='<div id="'+_namespace+'_dialog_banner" class="dialog-banner">';
            v +='    <i class="icon-info-sign"></i>';
            v +='    <div class="dialog-banner-message">' + localize.t('tiq.datasources.wizard.when_adding_datasources') + '</div>';
            v +='    <div class="dialog-banner-action"><a id="'+_namespace+'_code_center_button" href="" class="btn">' + localize.t('tiq.datasources.wizard.code_center') + '</a></div>';
            v +='</div>';

            v += '<div class="dialog-container" id="' + _namespace + '_listing_container' + '">';
            v += '  <div id="' + _namespace + '_content-block_description">';
            v += '      <div class="dialog-content-title-multi">' + localize.t('tiq.datasources.wizard.description') + '</div>';
            v += '      <ul class="dialog-row" id="' + _namespace + '_listing_description">';
            v += '      </ul>';
            v += '  </div>';

            v += '  <div id="' + _namespace + '_content-block_resources">';
            v += '      <div class="dialog-content-title-multi">' + localize.t('tiq.datasources.wizard.resources') + '</div>';
            v += '      <ul class="dialog-row" id="' + _namespace + '_listing_resources">';
            v += '      </ul>';
            v += '  </div>';

            v += '  <div id="' + _namespace + '_content-block_handlers">';
            // v += '      <div class="dialog-content-title-multi">Custom Handlers</div>';
            v += '      <ul class="dialog-row" id="' + _namespace + '_listing_handlers">';
            v += '      </ul>';
            v += '  </div>';

            v += '  <div id="' + _namespace + '_content-block_variables">';
            v += '      <div class="dialog-content-title-multi">' + localize.t('tiq.datasources.wizard.datasource_list') + '</div>';
            v += '      <ul class="dialog-row" id="' + _namespace + '_listing_variables">';
            v += '      </ul>';
            v += '  </div>';
            v += '</div>';
            return v;
        }
    };



    var _viewModel = {
        getDataCategories : function(defaultId, type) {
            var keys = [];
            for(var id in _data){
                keys.push(id);
            }
            var sortData = keys.sort(function(a,b){return _data[a].sort-_data[b].sort});

        var v = '';
        for (var i=0; i<sortData.length; i++) {
                var id = sortData[i];
                if (_data[id].active && _data[id].type == type) {
                    var title = _data[id].title;
                    v += '<li>';
                    v += '<a href="#" id="' + _namespace + '_listselection_' + id + '">' + title + '</a>';
                    v += '</li>';
                }
        }
        return v;
        },

        getDataCategoryDescription : function(obj) {
            var v = '<div>';
            v += obj.description;
            v += '</div>';
            return v;
        },

        getDataCategoryResources : function(obj){
            var v = '';
            if (typeof obj.resources != 'undefined' && obj.resources.length > 0) {
                v += '<div class="article-library-container">';
                for (var i=0; i<obj.resources.length; i++) {
                    v += '  <a href="#" onclick="utui.help.openCommunityLink(\'' + obj.resources[i].url + '\'); return false;" class="utui-selection-button-container">';
                    v += '    <div class="utui-selection-button-icon">';
                    if (obj.resources[i].type == 'video') {
                        v += '     <id class="icon-facetime-video"></i>'

                    }else {
                        v += '     <id class="icon-file-text"></i>'
                    }
                    v += '    </div>';
                    v += '    <div class="utui-selection-button-description">';
                    v += '      <h3>' + obj.resources[i].title + '</h3>';
                    v += '    </div>';
                    v += '  </a>';
                }
                v += '</div>';
            }else{
                v = localize.t('tiq.datasources.wizard.there_are_no_additional_resources');
            }
            return v;
        },

        getDataCategoryHandlers : function(obj){
            var v = '';
            if (typeof obj.handler_description != 'undefined') {
                v += '      <i class="icon-info-sign"></i>';
                v += '      <div class="handler_description">'+obj.handler_description+'</div>';
            }else{
                // v = 'None';
            }
            return v;
        },

        getDataCategoryVariables: function (obj) {
            var v = '';
            for (var i = 0; i < obj.variables.length; i++) {
                var _variable = obj.variables[i];
                v += '<div id=variable_' + obj.variables[i].name + ' class="define_common_sources_container">';
                v += '<div class="define_common_sources_title">' + _variable.title + '</div>';
                v += '<div class="define_common_sources_variable">' + _variable.name + '</div>';
                v += '<div class="define_common_sources_description">' + _variable.description + '</div>';
                v += '</div>';
            }
            return v;
        },

        updateDefineWizardPanel : function(obj, id){
            _activeId = id;
            if ((obj.type == 'Provider') && (typeof obj.logo != 'undefined')) {
                _$template.find('#' + _namespace + '_listing_header').html('<img src="'+obj.logo+'">');
            } else {
                _$template.find('#' + _namespace + '_listing_header').html(obj.title);
            }
            _$template.find('#' + _namespace + '_listing_description').html(_viewModel.getDataCategoryDescription(obj));
            _$template.find('#' + _namespace + '_listing_resources').html(_viewModel.getDataCategoryResources(obj));
            _$template.find('#' + _namespace + '_listing_handlers').html(_viewModel.getDataCategoryHandlers(obj));
            _$template.find('#' + _namespace + '_listing_variables').html(_viewModel.getDataCategoryVariables(obj));

            _viewModel.updateDefineWizardAddButton(obj);

            // Scroll dialog back to top
            _$template.find('.dialog-content-body').animate({
                scrollTop: 0
            }, 500);
        },

        updateDefineWizardAddButton : function(obj){
            //check to see if all the data objects in the config are already in utui.data.define - if so, hide the add button
            var done = true;
            
            if (typeof obj.no_import_vars !== 'undefined' && obj.no_import_vars){
                _$template.find('#' + _namespace + '_listing_addbutton').attr('disabled', true);
                _$template.find('#' + _namespace + '_listing_addmessage').css('display','none');
                _$template.find('#' + _namespace + '_content-block_variables').css('display','none');
                return true;
            } else {
                _$template.find('#' + _namespace + '_listing_addmessage').css('display','');
                _$template.find('#' + _namespace + '_content-block_variables').css('display','');
            }
            var utuiDefineData = {};

            for (var i in utui.data.define) {
                utuiDefineData[utui.data.define[i].type + '.' + utui.data.define[i].name] = 1;
            }

            for(var j in obj.variables){
                if (!utuiDefineData[obj.variables[j].type + '.' + obj.variables[j].name]) {
                    //we're missing a variable, so we aren't done
                    done = false;
                    // break;
                } else {
                    var variableItem = _$template.find('#variable_'+obj.variables[j].name+' .mark_existing');
                    variableItem.removeClass('icon-check-empty');
                    variableItem.addClass('icon-check');
                }
            }

            if (typeof obj.handler_button == 'function') {
                //check to see if the special handler should show the button
                //if the handler returns true, we are done
                done &= obj.handler_button(obj);
            }

            if (done) {
                _$template.find('#' + _namespace + '_listing_addbutton').attr('disabled', true);
                _$template.find('#' + _namespace + '_listing_addmessage').html(localize.t('tiq.datasources.wizard.datasources_have_been_added'));
                if (_.isBoolean(obj.blockCodeCenterInsertion) && obj.blockCodeCenterInsertion ) {
                    _$template.find('#'+ _namespace+'_dialog_banner').hide();
                } else {
                    _$template.find('#'+ _namespace+'_dialog_banner').show();
                }


            }else{
                _$template.find('#' + _namespace + '_listing_addbutton').attr('disabled' , false);
                _$template.find('#' + _namespace + '_listing_addmessage').html(localize.t('tiq.datasources.wizard.datasources_will_be_overwritten'));
                _$template.find('#'+ _namespace+'_dialog_banner').hide();
            }
        }
    }

    var _bindUI = {
        navigation: function () {
            _$template.find('#' + _namespace + '_listselection_' + _activeId).parent().addClass('selected');
            for (var key in _data) {
                (function (id) {
                    _$template.find('#' + _namespace + '_listselection_' + id).on('click', function (e) {
                                e.stopImmediatePropagation();

                    // clear existing selection
                    _$template.find('#' + _namespace + '_listingcategory').children('li').each(function () {
                        $(this).removeClass('selected');
                    });

                    _$template.find('#' + _namespace + '_listingprovider').children('li').each(function () {
                        $(this).removeClass('selected');
                    });

                    // highlight selection
                    $(this).parent().addClass('selected');

                    utui.util.pubsub.subscribe(utui.constants.environments.TOGGLED, _viewModel.updateDefineWizardPanel(_data[id], id));
                    return false;
                    });
                })(key);
            }
        },
        addButton: function(){
            _$template.find('#' + _namespace + '_listing_addbutton').on('click', function(e){
                if(_$template.find('#' + _namespace + '_listing_addbutton').attr('disabled') != 'disabled') {
                    _$template.find('#' + _namespace + '_listing_addbutton').attr('disabled', true);
                    utui.util.showSpinner();
                    _handler.addVariables();
                    utui.util.hideSpinner();
                }
            });
        },
        codeCenterBtn: function(){
            _$template.find('#' + _namespace + '_code_center_button').on('click', function(e){
                _handler.codeCenterBtn();

            });
        }
    };

    // ------------------------------------
    var _request = {
        onSavePublishConfigFailure: function(data) {
            utui.util.loadingModalStop();

            utui.util.pubsub.publish(utui.constants.publish.PUBLISH_CONFIGURATION_UPDATED);
        }
    };

    var _handler = {
        onCancelBtnClick: function() {
            utui.ui.dialog.dispose(_namespace);
        },
        codeCenterBtn: function(){
            utui.publish.showEnvironmentDialog().initialize();
        },
        addVariables: function(){
            var obj = _data[_activeId];

            _db(_activeId);
            _db(obj);

            var flag = false;
            var addItem = function(count, nextId) {
                var dataObj,
                    id,
                    r;

                for (var i = 0; i < count; i++) {
                    dataObj = obj.variables[i];
                    id = nextId + i;
                    r = utui.define.addDataSource(id, dataObj.title, dataObj.name, dataObj.type, dataObj.description);

                    flag |= ((r == undefined) ? true : false);
                };

                _db("VARIABLES ADDED: " + flag);

                //if anything is added, set the dirty bit
                if (flag) {
                    utui.profile.setDirty();
                }

                if (typeof obj.handler == "function") {
                    obj.handler(obj);
                }
                _viewModel.updateDefineWizardAddButton(obj);
            }

            utui.define.getNextId.fromServer(obj.variables.length, null,
                function(providedLastId, count, nextId) {
                    addItem(count, nextId);
                },
                function(nextId) {
                    addItem(obj.variables.length, nextId);
                });
        },

        eCommerce: function(obj){
            var customizationExists = false,
                addExtension = function(extId) {
                    //add Ecom customization and automap
                    exapi.addExtension(extId, _customization_eCommerceId);
                    utui.customizations.addItem(extId);

                //Set default list type to String
                utui.data.customizations[extId].listtype = 'string';

                //Set notes
                exapi.setNotes(extId, localize.t('tiq.datasources.wizard.added_via_tealium', {email:utui.login.email}));

                    for (var key in obj.handler_vars) {
                        utui.data.customizations[extId][obj.handler_vars[key].map] = obj.handler_vars[key].type + '.' + key;
                    }

                    utui.customizations.drawJUIAccordion();
                };


            for (var i in utui.data.customizations) {
                if (utui.data.customizations[i].id == _customization_eCommerceId) {
                    customizationExists = true;
                    break;
                }
            }

            if (!customizationExists) {
                exapi.getNextIdFromServer(1, null,
                    // onSuccess
                    function(providedLastId, count, extId) {
                        addExtension(extId);
                        _viewModel.updateDefineWizardAddButton(obj);
                    },
                    // onFailure
                    function(extId) {
                        addExtension(extId);
                        _viewModel.updateDefineWizardAddButton(obj);
                    });
            }

        },
        eCommerceButton: function(obj){
            _db("in eCommerceButton handler");

            //if the eCommerce customization is not added, we're not done
            var customizationExists = false;
            for (var i in utui.data.customizations) {
                if (utui.data.customizations[i].id == _customization_eCommerceId) {
                    customizationExists = true ;
                    break;
                }
            }

            _db("CUST: "+customizationExists);
            if (!customizationExists) {
                _db("ecommerce customization is not enabled");
                return false;
            }

            return true;
        }
    }


    // ----------------------------------------------------------------
    // Dispose dialog
    function _disposeDialog() {
        _$template.find('#' + _namespace + '_dialog').dialog('close');
    }

    function _db(msg){
        //TRACE(msg);
    }

    // PUBLIC
    // --------------------------------------------------------
    var _public = {
        // --------------------------------------------------------
        // @param (parameterObj) object
        // Specialized Support Request Dialog: Requires a parameterObj with the following:
        //     title       : Dialog title
        //     dialogH2    : Heading in the dialog
        //     question    : Prefilled support question
        //     details     : Prefilled detail text
        //     attachmentRequired : boolean value - if attachment is needed
        //     attachmentHeading  : Attachment heading
        //
        // @param (isOriginHelpCenter) bool
        show: function (parameterObj, isOriginHelpCenter) {

            _render.context();
            _render.content();
            _viewModel.updateDefineWizardPanel(_data[_activeId], _activeId);

            // Title
            var title = localize.t('tiq.datasources.wizard.add_common_datasources');

            // Dialog buttons
            var buttons = [
                {
                    text: localize.t('tiq.dialog.button.close'),
                    id: _namespace+'_closeBtn',
                    click: _handler.onCancelBtnClick,
                    style: 'float:right; margin-right: 12px'
                }
            ];

            // Show the dialog
            utui.ui.dialog.show(_namespace, title, buttons, _$template, { width:900, height:700 }, _handler.onCancelBtnClick);
        },
        config: _data
    }

    return _public;
}();

//tealium tag management console - utui.manage, Copyright 2011 Tealium.com Inc. All Rights Reserved.
var tagapi = function() {

	// --------------------------------------------------
	var _tagList = $.map(utui.config.manageList, function(value, i) { $.extend(value, { _id: i }); return [value] });

	// --------------------------------------------------
	function _getTagList(index, qty, sortKey, filterObj, hasKey, isReverse, sortDescending) {
		if(arguments.length === 0) return _tagList;

		var filteredTagList = $.extend([], _tagList),
			_index = index || 0,
			_qty = qty || filteredTagList.length;

		// If key is specified, return only those with that key
		if(!$.isEmptyObject(hasKey)) {
			filteredTagList = filteredTagList.filter(function(i) {
				return i.hasOwnProperty(hasKey);
			});
		}

		// Sort the list
		if(!$.isEmptyObject(sortKey)) {
			filteredTagList = utui.util.sortArrayByKey(filteredTagList, sortKey);
		}

		// Filter out deprecated tags
		filteredTagList = filteredTagList.filter(function(i) {
			return i['load'] == 'true'
		});

		// Filter out restricted tags from tag policy
		if(utui.manage.policy.isEnabled()) {
			filteredTagList = filteredTagList.filter(function(i) {
				return !utui.manage.policy.isTagRestricted(i['_id']);
			});
		}

		// Filter through defined filter object
		if(!$.isEmptyObject(filterObj)) {
			for(var key in filterObj) {
				if(!filterObj.hasOwnProperty(key)) continue;

				filteredTagList = filteredTagList.filter(function(i) {
					return i[key] == filterObj[key];
				});
			}
		}

		if (sortDescending) {
			filteredTagList.reverse();
		}

		// Return index and quanity specified
		filteredTagList = filteredTagList.slice(_index, (_qty + _index));

		// Reverse the list
		if(isReverse) {
			filteredTagList.reverse();
		}

		return filteredTagList;
	}

	// --------------------------------------------
	function _getInheritedTagObjectByOrigin(originProfileName, originId) {
		if(typeof originProfileName === 'undefined' || typeof originId === 'undefined') return null;

		var profileName,
			origin_id,
			tagObj,
			tagData = utui.data.manage;

		// Iterate through all tags
		for(var key in tagData) {
			if(!tagData.hasOwnProperty(key)) continue;

			tagObj = tagData[key];

			// if tag is an inherited tag
			if(typeof tagObj.libraryId !== "undefined" && !$.isEmptyObject(tagObj.settings)) {

				// if specified params match in the tag, return tag obj
				if(tagObj.settings.profileid == originProfileName && tagObj.libraryId == originId) {
					return tagObj;
				}
			}
		}

		return null;
	}

	// --------------------------------------------
	function _isScopedToExtension(tagId) {
		var extDataModel = utui.data.customizations,
			extObj, scopeList;

		for(var key in extDataModel) {
			if(!extDataModel.hasOwnProperty(key)) continue;

			extObj = extDataModel[key];
			scopeList = extObj.scope.split(',');

			if(~scopeList.indexOf(tagId)) {
				return true;
			}
		}

		return false;
	}

	// --------------------------------------------
	function _getScopedExtensionIds(tagId) {
		var extDataModel = utui.data.customizations,
			extObj, scopeList, extList = [];

		for(var key in extDataModel) {
			if(!extDataModel.hasOwnProperty(key)) continue;

			extObj = extDataModel[key];
			scopeList = extObj.scope.split(',');

			if(~scopeList.indexOf(tagId)) {
				extList.push(key);
			}
		}

		return extList;
	}

	// returns an array of extension objects related to the tag 
	function _getRelatedExtensionObjects(tagId) { 
		/*
		 * As implemented, general rules for when an extension is shown:
		 * An extension is shown if:
		 * (1) it is scoped to the tag, or
		 * (2) it outputs variable(s) mapped to the tag, or
		 * (3) it (potentially) changes/mutates variable(s) mapped to the tag, or
		 * (4) it is otherwise especially relevant (e.g., Adobe Target Tag Content Modification, Tracking Opt Out, Privacy Manager).
		 * An extension is usually not shown because:
		 * (1) none of the above rules apply (namely, Domain Based Deployment, Content Modification, Modal Offer, or Data Validation), or
		 * (2) technical complexity/feasibility (namely, Hosted Data Layer and Flatten JSON Objects).
		 * N.B. Flatten JSON Objects can be scoped to a specific tag and if  it is then it will be shown for that 
		 * tag (because of the scoping).
		 */
		var scopedExtIds = _getScopedExtensionIds(tagId),
			relatedExtObjs = [],
			mappedVarNames = [],
			mappedVarsJSCodeFormatted = [],
			extDataModel = utui.data.customizations,
			regEx,
			keyArray = [];

		// check that the tag exists (i.e., is not just now being added)
		if (utui.util.typeOf(utui.data.manage[tagId]) !== 'undefined') { 
			// populate the mappedVarNames and mappedVarsJSCodeFormatted arrays for the given tag
			for (var i in utui.data.manage[tagId].map) {
				if(!utui.data.manage[tagId].map.hasOwnProperty(i)) continue;

				var type = utui.data.manage[tagId].map[i].type,
					name = utui.data.manage[tagId].map[i].key,
					concatTypeDotName = type + '.' + name;
				// concatenate the type, '.' and name for the six typical variable types
				if (type === 'dom' || type === 'cp' || type === 'js' || type === 'js_page' || type === 'meta' || type === 'qp') {
					mappedVarNames.push(concatTypeDotName);
					if (type === 'js') { // except that JS code extensions do not refer to UDO vars with the 'js.' prefix
						mappedVarsJSCodeFormatted.push(name);
					} else {
						mappedVarsJSCodeFormatted.push(concatTypeDotName);
					}
				} else { // just push the name for all others (e.g., _pathname1 or previous_page_name)
					mappedVarNames.push(name);
					mappedVarsJSCodeFormatted.push(name);
				}
			}
		} else { // if the tag does not exist yet then return an empty array (no related extensions)
			return [];
		}

		/* 
		 * Function that checks the mapped variable for one of the variables in the paramater array, and
		 * if one is found then the extension is pushed and searching is ceased.
		 */
		var crossReferenceVariables = function(dataVarsToCompare, varsToCompareAgainst) {
			for(var i = 0; i < dataVarsToCompare.length; i++) {
				if(varsToCompareAgainst.indexOf(dataVarsToCompare[i]) !== -1) {
					relatedExtObjs.push(extensionObj);
					break;
				}
			}
		}

		// cache the long regex literals outside of the function so they don't have to be recompiled each time the function is called
		var bTest = /(?:^|;|\s+)b\.(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|null|this|true|void|with|break|catch|class|const|false|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)(?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC])(?:[\$0-9A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC])*/g; 
		var bObjTest = /(?:^|;|\s+)b\[(?:['"]|(?:&quot;))(.*?)(?:["']|&quot;)\]/gm

		// Function that returns the output variables in an array from a JavaScript Code extension code block.				
		var findVars = function(codeBlock) { 
			var timeOut = new Date().getTime() + 500; 
			var code, 
				codeLines = codeBlock.split(/[\n\r]/), 
				foundVars = [], 
				temp, 
				match;

			function trim(a) { 
				if (!a) { return a; } 
				if (typeof a !== "string") { return a; } 
				return a.replace(/^\s*/, "").replace(/\s*$/, ""); 
			}

			try {
				for (var j = 0; j < codeLines.length; j++) { 

					code = codeLines[j];
					match = code.match(bTest);
					if(match) { 
						_.forEach(match, function (line) { 
							if (new Date().getTime() >= timeOut) throw new Error("Timeout"); 
							temp = trim(line.replace(/^(;|\s+)b\./, "")); 
							foundVars.push(temp.substring('b.'.length)); 
						}); 
					}
					match = code.match(bObjTest); 
					if (match) { 
						_.forEach(match, function (line) { 
							if (new Date().getTime() >= timeOut) throw new Error("Timeout"); 
							temp = trim(line.replace(bObjTest, "$1")); 
							foundVars.push(temp); 
						}); 
					} 
					if (new Date().getTime() >= timeOut) throw new Error("Timeout"); 
				} 
			} catch (e) { 
				if (e.message !== "Timeout") { throw e; } 
			} 
			clearTimeout(timeOut); 
			return foundVars; 
		};

		/* 
		 * Function that populates the impacted data variables array by checking all of an extension's keys to
		 * see if they match the pattern for which variables the extension impacts (i.e., regex identifies the relevant
		 * keys). 
		 */
		var buildImpactedDataVars = function(regExpr, extensionObj) {
			var impactedDataVars = [];
			keyArray = _.keys(extensionObj); 
			_.each(keyArray, function(key) { 
				if(regExpr.test(key)) {
						impactedDataVars.push(extensionObj[key]); 
				}
			});
			return impactedDataVars;
		};

		for(var entry in extDataModel) {
			if(!extDataModel.hasOwnProperty(entry)) continue;
			var extensionObj = extDataModel[entry];

			// add all extension objects that are specifically scoped to the given tag to the relatedExtObjs array
			if(scopedExtIds.indexOf(entry) >= 0) {
				relatedExtObjs.push(extensionObj);
			}

			// add non-"tag scoped" extension objects that relate to a tag
			if(extensionObj.scope === 'global' || extensionObj.scope === 'preload' 
				|| extensionObj.scope === 'domready') { 

				switch(extensionObj.id) {
					// -- STANDARD EXTENSIONS --
					// Lower-Casing
					case '100001': 
						// Check if Lower-Casing Extension affects all mapped variables (w/assumption of alphabetic characters)
						if(extensionObj.all === 'yes') { 
							relatedExtObjs.push(extensionObj); 
						} else { // only applies to certain variables
							regEx = /_set\b/;
							var impactedDataVars = buildImpactedDataVars(regEx, extensionObj);
							crossReferenceVariables(impactedDataVars, mappedVarNames);
						}
						break;

					// Set Data Values
					case '100003': 
						regEx = /_set\b/;
						var impactedDataVars = buildImpactedDataVars(regEx, extensionObj);
						crossReferenceVariables(impactedDataVars, mappedVarNames);
						break;

					// Persist Data Value
					case '100004': 
						// check if the variable holding the persisted data is a mapped variable
						if(mappedVarNames.indexOf(extensionObj.var) !== -1) { 
							relatedExtObjs.push(extensionObj); 
						}
						break;

					// Previous Page
					case '100013': 
						// check if the previous_page_name output variable is a mapped variable
						if(mappedVarNames.indexOf(extensionObj.output) !== -1) { 
							relatedExtObjs.push(extensionObj); 
						}
						break;

					// Join Data Values
					case '100002': 
						// check if the destination variable holding joined values is a mapped variable
						if(mappedVarNames.indexOf(extensionObj.var) !== -1) { 
							relatedExtObjs.push(extensionObj); 
						}
						break;

					// Lookup Table
					case '100020': 
						// check if the destination variable (holding output upon a match) is a mapped variable
						if(mappedVarNames.indexOf(extensionObj.var) !== -1) { 
							relatedExtObjs.push(extensionObj); 
						}
						break;

					// Pathname Tokenizer
					case '100025': 
						// store all of the output variables (pathname tokens) in the impactedDataVars array
						var impactedDataVars = extensionObj.output.split(','); 
						crossReferenceVariables(impactedDataVars, mappedVarNames);
						break;

					// Crypto Extension 
					case '100033': 
						regEx = /_source\b/;
						var impactedDataVars = buildImpactedDataVars(regEx, extensionObj);
						crossReferenceVariables(impactedDataVars, mappedVarNames);
						break;

					// -- ADVANCED EXTENSIONS --
					/* 
					 * E-Commerce
					 * 
					 * Note: Some tags have built in use of E-commerce variables and this
					 * current implementation does not capture this relationship (primary technical
					 * reason is that a customer can modify a tag).  
					 *
					 */
					case '100005':
						// store all of the output variables (E-Commerce variables) in the impactedDataVars array
						var impactedDataVars = extensionObj.output.split(','); 
						crossReferenceVariables(impactedDataVars, mappedVarNames);
						break;

					// Channels
					case '100007':
						// store all of the output variables (Channel variables) in the impactedDataVars array
						var impactedDataVars = extensionObj.output.split(','); 
						crossReferenceVariables(impactedDataVars, mappedVarNames);					
						break;

					// JavaScript Code
					case '100036':
						/*
						 * Store the output vars in the impactedDataVars array, but note that this does not catch
						 * all output vars (e.g., if they are dynamically generated) and may result in false positives by
						 * capturing variables that are used but not changed.
						 */ 
						var impactedDataVars = findVars(extensionObj.code);
						crossReferenceVariables(impactedDataVars, mappedVarsJSCodeFormatted);
						break;

					// JavaScript Code Extension
					case '100040':
						/*
						 * Store the output vars in the impactedDataVars array, but note that this does not catch
						 * all output vars (e.g., if they are dynamically generated) and may result in false positives by
						 * capturing variables that are used but not changed.
						 */ 
						var impactedDataVars = [];
						var promotedDrafts = extensionObj.codeDevData.promotedSnippets;
						// get the variables from each promoted snippet
						for(var entry in promotedDrafts) {
							if(!promotedDrafts.hasOwnProperty(entry)) continue;
							var foundVars = findVars(promotedDrafts[entry].code);
							impactedDataVars = impactedDataVars.concat(foundVars);
						}
						crossReferenceVariables(impactedDataVars, mappedVarsJSCodeFormatted);
						break;

					// Split Segmentation
					case '100018':
						// check if the destination cookie (holding a segment label based on %) is a mapped variable
						if(mappedVarNames.indexOf(extensionObj.var) !== -1) { 
							relatedExtObjs.push(extensionObj); 
						}
						break;
		
					// -- EVENTS EXTENSIONS --
					// Link Tracking
					case '100015':
						// store all of the output variables (used in Link Tracking) in the impactedDataVars array
						var impactedDataVars = extensionObj.output.split(','); 
						crossReferenceVariables(impactedDataVars, mappedVarNames);		
						break;

					// jQuery clickHandler (1.6 and below)
					case '100029': 
						regEx = /_set\b/;
						var impactedDataVars = buildImpactedDataVars(regEx, extensionObj);
						crossReferenceVariables(impactedDataVars, mappedVarNames);
						break;

					// jQuery onHandler (1.7 and above)
					case '100032': 
						regEx = /_set\b/;
						var impactedDataVars = buildImpactedDataVars(regEx, extensionObj);
						crossReferenceVariables(impactedDataVars, mappedVarNames);
						break;

					// Tealium Events
					case '100039':
						// check if the tealium_event variable is a mapped variable
						if(mappedVarNames.indexOf(extensionObj.tealium_event) !== -1) { 
							relatedExtObjs.push(extensionObj); 
						}
						break;

					// -- TAG SPECIFIC EXTENSIONS --
					// Adobe Target Tag Content Modification
					case '100038':
						// add the Adobe Target Tag Content Mod extension if the tag is the Adobe Target tag
						if(utui.data.manage[tagId].tag_id === '20108') { 
							relatedExtObjs.push(extensionObj);
						}
						break;

					// Currency Converter
					case '100031':
						regEx = /_currencyconvertvariable\b/;
						var impactedDataVars = buildImpactedDataVars(regEx, extensionObj);
						crossReferenceVariables(impactedDataVars, mappedVarNames);
						break;

					// -- PRIVACY EXTENSIONS --
					// Tracking Opt Out
					case '100022':
						// always add this extension 
						relatedExtObjs.push(extensionObj);
						break;	

					// Privacy Manager
					case '100026':
						// if the tag has the privacy manager rules applied to it then add the extension (i.e., not being omitted and always served)
						if(utui.data.manage[tagId].advconfig_optout === 'yes') {
							relatedExtObjs.push(extensionObj);
						}
						break;	

					// Do Not Track
					case '100034':
						// check if the do_not_track output variable is mapped to the tag
						if(mappedVarNames.indexOf(extensionObj.output) !== -1) { 
							relatedExtObjs.push(extensionObj); 
						}
						break;	

					default:
					/*
					 * Note that the following extensions will not be shown unless they are scoped to the tag (and many cannot be):
					 * Domain-Based Deployment (id: '100006') because not relevant / doesn't affect mapped variables.
					 * Content Modification (id: '100016') because not relevant / doesn't affect mapped variables.
					 * Modal Offer (id: '100035') because not relevant / doesn't affect mapped variables.
					 * Data Validation (id: '100024') because not relevant / doesn't affect mapped variables.
					 * Hosted Data Layer (id: '100037') because technical complexity / feasibility.
					 * Flatten JSON Objects (id: '100021') because technical complexity / feasibility.
					 */
						break;
				} // end switch
			}
		}

		// Sort by execution priority (but not by scope or advanced execution option, which affect load order)
		relatedExtObjs.sort(function(a, b){
  			return a.sort - b.sort;
		});

		return relatedExtObjs;
	}

	// --------------------------------------------
	function _isImported(tagId) {
		if(typeof tagId !== 'undefined') {
			if(utui.data.manage[tagId] && !$.isEmptyObject(utui.data.manage[tagId].settings)) {
				return true;
			}
		}
		return false;
	}

	// --------------------------------------------
	function _getTagMappingsByTagId(tagId, isFormatted) {
		if(!utui.data.manage[tagId]) return null;

		var mapping = utui.data.manage[tagId].map || {},
			mapStack = [],
			obj;

		if(isFormatted) {
			for(var key in mapping) {
				obj = {
					key: mapping[key].key,
					type: mapping[key].type,
					variable: mapping[key].variable
				}
				mapStack.push(obj);
			}

			return mapStack;
		}
		return utui.data.manage[tagId].map ? utui.data.manage[tagId].map : {};
	}

	// --------------------------------------------
	function _getScopedLoadRulesByTagId(tagId, isFormatted) {
		if(!utui.data.manage[tagId]) return null;

		var collection = [];

		if(isFormatted) {
			collection = utui.data.manage[tagId].loadrule.split(',');

			if(collection[0] !== 'all') {
				return collection.map(function(i) { return +i; });
			}
			return collection;
		}

		return utui.data.manage[tagId].loadrule;
	}

	// --------------------------------------------
	function _getTagIdByContainerId(containerId) {

		return utui.manage.containerMap[containerId].id || null;
	}

	// --------------------------------------------
	function _getContainerIdByTagId(tagId) {
		var obj = _public.getObjectByTagId(tagId),
			containerMap = utui.manage.containerMap,
			instanceObj;

		for(var key in containerMap) {
			instanceObj = containerMap[key];

			if(+instanceObj.id === +tagId) {
				return key;
			}
		}

		return null;
	}

	// --------------------------------------------
	function _getTitle(tagId) {
		var data = utui.data.manage;

		if(data[tagId]) {
			return utui.data.manage[tagId].title;
		}

		return null;
	}

	// --------------------------------------------
	function _getTemplateObjectByTagId(tagId) {
		var tagTemplateId = _getTemplateIdByTagId(tagId);
		return utui.config.manageList[tagTemplateId] || null;
	}

	// --------------------------------------------
	function _getTemplateIdByTagId(tagId) {
		return utui.data.manage[tagId].tag_id || null;
	}

	// --------------------------------------------
	function _getDataKeyFromMappingEntry(obj) {
		var dataKey;

		if(obj.type && obj.type.indexOf('customization') == 0) {
			dataKey = obj.key;
		}
		else {
			dataKey = obj.type + '.' + obj.key;
		}

		return dataKey;
	}

	// --------------------------------------------
	function _getObjectByContainerId(containerId) {
		return utui.manage.containerMap[containerId].id;
	}

	// --------------------------------------------
	function _getObjectByTagId(tagId) {
		return utui.data.manage[tagId] || null;
	}

	// --------------------------------------------
	function _removeScopedLoadruleFromTagId(tagId, lrId) {
		if(!utui.data.manage[tagId]) return null;
		if(lrId === 'all') return false;

		var obj = utui.data.manage[tagId];
		var lrKeyCollection = ['loadrule', '_multipleLoadRules', 'multipleLoadRules'];
		var valueCollection = obj.loadrule.split(',');
		var index = valueCollection.indexOf(lrId);
		var key;
		var value;

		if(index > -1) {
			valueCollection.splice(index, 1);
		}

		// if all loadrules are gone, set default scope to all
		value = valueCollection.length ? valueCollection.join(',') : 'all';

		for (var i = lrKeyCollection.length - 1; i >= 0; i--) {
			key = lrKeyCollection[i];

			// Update all keys that reflect loadrules
			if(obj.hasOwnProperty(key)) {
				utui.data.manage[tagId][key] = value;
			}
		};

		return utui.data.manage[tagId].loadrule;
	}

	// --------------------------------------------
	// Returns the vendor capabilities of the specified tag
	function _getVendorCapabilities(tag_id) {
		var obj = utui.config.manageList[tag_id];
		if (obj && obj.features) {
			var capabilities = [];
			for (var i = 0; i < obj.features.length; i++) {
				var capability = utui.config.tagfeatures[obj.features[i]];
				if (capability) {
					capabilities.push(capability);
				}
			}
			if (capabilities.length) {
				return capabilities;
			}
		}
		return null;
	}

	// --------------------------------------------
	// Returns the vendor capability based off of the shortname passed in
	function _getVendorCapabilityByName(name) {
		for (var key in utui.config.tagfeatures) {
			var capability = utui.config.tagfeatures[key];
			if (capability.shortname === name) {
				// append the id in case needed
				return $.extend(true, {}, capability, {id:Number(key)});
			}
		}
		return {};
	}

	function _hasActiveS2S(){
		var isActiveS2S = false;
		_.each(utui.data.manage, function(tag){
			if (typeof tag['advconfig_s2s'] !== 'undefined' && tag['advconfig_s2s'] === 'yes'){
				isActiveS2S = true;
			}
		});		
		return isActiveS2S;
	}

	function _createTaggingObject(tag) {
        return {
            resource_type: utui.constants.tags.TYPE.toLowerCase(),
            tag_template_id : tag.tag_id,
        	resource_name : tag.tag_name,
        	resource_id : tag.id,
        	action : utui.constants.tagging.TAGGING,
        	isLinkType : true
		};
	}

	// --------------------------------------------
	var _public = {
		// tag marketplace policy
		getTagList: _getTagList,

		// inheritance
		getInheritedTagObjectByOrigin: _getInheritedTagObjectByOrigin,

		// dependencies
		isScopedToExtension: _isScopedToExtension,
		getScopedExtensionIds: _getScopedExtensionIds,

		// conversion
		getTagIdByContainerId: _getTagIdByContainerId,
		getContainerIdByTagId: _getContainerIdByTagId,

		// objects
		getObjectByContainerId: _getObjectByContainerId,
		getObjectByTagId: _getObjectByTagId,
		getRelatedExtensionObjects: _getRelatedExtensionObjects,

		// templates
		getTemplateObjectByTagId: _getTemplateObjectByTagId,
		getTemplateIdByTagId: _getTemplateIdByTagId,

		// properties
		getTitle: _getTitle,

		// s2s deprecation
		hasActiveS2S: _hasActiveS2S,

		// configuration
		getTagMappingsByTagId: _getTagMappingsByTagId,
		getScopedLoadRulesByTagId: _getScopedLoadRulesByTagId,
		getDataKeyFromMappingEntry: _getDataKeyFromMappingEntry,
		removeScopedLoadruleFromTagId: _removeScopedLoadruleFromTagId,
		getVendorCapabilities: _getVendorCapabilities,
		getVendorCapabilityByName: _getVendorCapabilityByName,
		// tagging
		createTaggingObject: _createTaggingObject
	};

	return _public;

}();

utui.manage = {
	id:"manage",
	itemTabLookup:{},
	addedManage:{},
	containerMap:{},
	lastActive:0,
	lastEdit:0,
	openSectionLoadRules:false,
	openSectionMapping:false,
	openSectionSummary:true,
	lastOpenedContainer:'',
	toolboxContent:{},
	toolboxData:{},
	activeManage:0,
	nextId:0,
	toolboxQueue:{},
	knownPublishedTargets:{},
	initComplete:false,
	tempLoadRuleVal:"",
	newTagFlag: false,
	allTagRatings:{},
	userTagRatings:{},
	importCount:0,
    saveData:function () {
        utui.profile.saveTabData(utui.config.currentTab, false);
    },
    mlrSelVal:'999999', // A unique value - a placeholder for multi-load rule selections in the <select> <option>s
    mlrConfig:{ // Custom base load rule config used by the utui.loadrules.setLoadRulesSelect function to create <option> lists
        1:{value:'all', text:localize.t('tiq.rules.all_pages'), selected:1},
        999999:{value:'999999', text:localize.t('tiq.tags.multiple_load_rules'), selected:0}
    },
    filtersToInclude:[],
    clear:function () {
        this.nextId = 0;
        this.addedManage = {};
        this.toolboxQueue = {};
        this.containerMap = {};
        $('#manage_dialog_addmore').html('');
        $("#manage_content").html('');
    },
    load:function (a) {},
    //Load this when the user switches tabs
	show: function (obj) {
		var containers = $('#manage_content').children(),
			labelsExpanded = utui.labels.helper.getLabelsExpandedForTab();

		for (var i = 0; i < containers.length; i++) {
			var id = containers[i].id;
			utui.manage.setTitle(id, labelsExpanded);

			try {
				var o = utui.manage.containerMap[id];
				if (o && o.tag_id && utui.config.manageList[o.tag_id].showDataHandler) {
					utui.config.manageList[o.tag_id].showDataHandler(id);
				}
			} catch (e) {
			}
		}
		if ((typeof utui.manage.lastOpenedContainer != 'undefined') && utui.manage.lastOpenedContainer != '') {
			utui.manage.updateAccordion(false);
		}
		utui.util.addHover();

		this.renderCautionOnAccordions();

		utui.profile.showAllModifiedTabLabels(utui.constants.tags.TYPE);

	},
	loadTagMarketplaceData:function() {

		utui.service.get(utui.service.restapis.TAG_RATINGS, {}, null,
			function (data) {
				utui.manage.allTagRatings = data;
			}, function(status) {
				utui.manage.allTagRatings = null;
			});
		utui.service.get(utui.service.restapis.USER_TAG_RATINGS+'/'+utui.login.email, {}, null, function (data) {
			utui.manage.userTagRatings = data;
		}, function(status) {
			utui.manage.allTagRatings = null;
		});
	},
	// Load this when the application loads for the first time
	init:function () {
		this.initComplete = false;
		utui.manage.lastOpenedContainer = '';

		var sort = utui.util.getSortedArray(utui.data.manage, 'sort');

		// Init the labels select2 box
		utui.manage.labels.renderBulkLabelSelect();

		// Hides/shows the label select box in the header
		utui.manage.labels.labelCheckboxChecked();

		//Init the filters
		this.filtersToInclude = [utui.filters.FILTER_STATUS, utui.filters.FILTER_TARGET, utui.filters.FILTER_DIVIDER, utui.filters.FILTER_LABEL];

		// Load Table Header
		utui.manage.loadTableHeader();

		// Print out each Tag Header
		for(var i = 0; i < sort.length; i++) {
			var tag = sort[i];

			if(typeof utui.config.manageList[tag.tag_id] != 'undefined') {
				var container = this.addItem(tag, false, null, null, true);

				// // Fill in missing attributes
				if($.isEmptyObject(tag['advconfig_loadtype'])) {
					tag['advconfig_loadtype'] = '';
				}

				if($.isEmptyObject(tag['advconfig_bundle'])) {
					tag['advconfig_bundle'] = 'no';
				}

				if($.isEmptyObject(tag['advconfig_optout'])) {
					tag['advconfig_optout'] = 'yes';
				}

				if($.isEmptyObject(tag['advconfig_send'])) {
					tag['advconfig_send'] = 'yes';
				}

				if($.isEmptyObject(tag['advconfig_src'])) {
					tag['advconfig_src'] = '';
				}

				if($.isEmptyObject(tag['advconfig_wait'])) {
					tag['advconfig_wait'] = 'yes';
				}

				// tag.isNotAllCustomTargets = null;

				if (!tag.selectedTargets) {
					// Migration - This property will be null on first use so let's populate it
					tag.selectedTargets = utui.targets.addTargetsToObject({}, 'true', null, true);
				}
				else {
					if(tag.isNotAllCustomTargets == undefined) {
						tag.selectedTargets = utui.targets.addTargetsToObject(tag.selectedTargets, 'true', 'custom', true);
					}
				}
			}
		}

		// Add More Button
		$('.manage_button_addmore').safeBind('click',function () {
			utui.manage.marketplace.show();
		});
		utui.manage.updateAccordion(false);

		utui.util.pubsub.subscribe(utui.constants.variables.UPDATED, this.updateMappings, this);

        // Setup Filter Menu
        var content = '<span class="menufont">' + localize.t('tiq.tags.filter') + '</span>';
        $('#tag_filter_menu_text').html(content);
        $("#tag_filter_menu_button").off('click').on('click', function () {
            utui.manage.toggleFilterMenu();
        });

		this.setDefaultFilterConditions();

		// Setup listeners
		utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.setDefaultFilterConditions, this);
    utui.util.pubsub.subscribe(utui.constants.environments.ADDED, this.setDefaultFilterConditions, this);
    utui.util.pubsub.subscribe(utui.constants.environments.REMOVED, this.setDefaultFilterConditions, this);
    
		utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.loadPublishedTargetsForTags, this);
		utui.util.pubsub.subscribe(utui.constants.profile.PUBLISHED, this.loadPublishedTargetsForTags, this);
		utui.util.pubsub.subscribe(utui.constants.profile.BEFORE_SAVE, this.updateSavedTargetsForTags, this);
		utui.util.pubsub.subscribe(utui.constants.environments.ADDED, this.updatePublishedTagLocations, this);
		utui.util.pubsub.subscribe(utui.constants.environments.REMOVED, this.updatePublishedTagLocations, this);
		utui.util.pubsub.subscribe(utui.constants.account.CHANGED, this.tagSnippet.onAccountChanged, this);

		utui.util.pubsub.subscribe(utui.constants.tag_mappings.UPDATED, this.refreshDestinationMappingView, this);

		utui.util.pubsub.subscribe(utui.constants.labels.ADDED, this.labels.onLabelAdded, this);
		utui.util.pubsub.subscribe(utui.constants.labels.REMOVED, this.labels.onLabelRemoved, this);
		utui.util.pubsub.subscribe(utui.constants.labels.CHANGED, this.labels.onLabelChanged, this);
		//utui.util.pubsub.subscribe(utui.constants.labels.MENU_OPENING, this.labels.onLabelMenuOpening, this);
		utui.util.pubsub.subscribe(utui.constants.labels.MENU_CLOSING, this.labels.onLabelMenuClosing, this);
		utui.util.pubsub.subscribe(utui.constants.labels.ASSIGNED, this.labels.onLabelAssigned, this);
		utui.util.pubsub.subscribe(utui.constants.labels.UNASSIGNED, this.labels.onLabelUnAssigned, this);

		this.loadTagMarketplaceData();

		$(document.body).append('<img id="magicStar" src="/css/images/star.gif" style="display:none" />');

		this.showHelpTab();
		this.initComplete = true;
	},

	// Removes the "new_tag" data attribute from each tag's DOM element
	// This way we know that the tags have been saved
	updateSavedTargetsForTags:function() {
		$("#manage_content > div").removeData("new_tag");
	},

	// @param (target) array - used from utui.publish.saveHandler to update targets after save
	updatePublishedTargetsForTags:function(target) {
		for(var key in utui.manage.containerMap) {
			var tag = utui.manage.containerMap[key];

			if(!tag.id) continue;

			if(tag.publishedTargets == 0 && tag.status == "active") {
				tag.publishedTargets = target;
			}
		}
	},
	loadPublishedTargetsForTags:function() {
		function _getPublishedEnvsForTag(tag) {
			var envs = [];
			for (var key in publishedTargets) {
				if (publishedTargets[key].indexOf(tag.id) != -1 && tag.selectedTargets[key] == 'true'){
					envs.push(key);
				}
			}

			return envs;
		}
		// Get all of the revisions for the current version
		var allRevisions = utui.profile.getAllRevisions(utui.data.settings.revision);
		var publishedTargets = utui.targets.addTargetsToObject({}, []);
		utui.manage.knownPublishedTargets = publishedTargets;

		// Make sure to iterate through the sorted version
		utui.util.forEachSorted(allRevisions, function(revisionId, revision) {
			var publishedTags = revision.publishedTags ? JSON.parse(revision.publishedTags) : [];
			var statuses = revision.status ? revision.status.split(",") : [];

			if(statuses.length > 0 && publishedTags.length > 0) {
				for(var i = 0; i < statuses.length; i++) {
					var env = statuses[i];

					publishedTargets[env] = publishedTags;

				}
			}
		});

		// merge publishedTargets into utui.manage.containerMap
		for(var key in utui.manage.containerMap) {
			var tag = utui.manage.containerMap[key];

			if(!tag.id) continue;

			tag.publishedTargets = _getPublishedEnvsForTag(tag);
		}
		// Update Tags accordion if the Tags tab is open.
		if(utui.config.currentTab == utui.manage.id){
			utui.manage.updateAccordion(false);
		}
	},
	setDefaultFilterConditions:function () {
		// Setup the initial filter conditions
		var filterConditions = {
			inactive:{
				show:true
			},
			label:{
				id:"-1"
			},
			target:{
				allTags:{
					show:true
				},
				dev:{
					show:false
				},
				qa:{
					show:false
				},
				prod:{
					show:false
				},
				unpublished:{
					show:false
				}
			}
		};

		filterConditions.target = utui.targets.addTargetsToObject(filterConditions.target,{show:false},'custom');

		this.filterConditions = filterConditions;
	},
	labels: {
		renderSingleLabelSelect: function(id, container) {
			utui.labels.labelsSelectBtn().render(utui.config.tabList.manage.tab, $('#manage_content'), $('#manage_labels_select_' + id), $('#'+container));
		},
		renderBulkLabelSelect: function() {
			utui.labels.labelsSelectBtn().render(utui.config.tabList.manage.tab, $('#manage_content'), $('#manage_labels_menu_list'), $('#manageContainer_headerControls'));
		},
		// Returns the active container
		getActiveContainer: function() {
			return $('#manage_content').find('.ui-accordion-content-active').closest('.manage_container');
		},
		redrawLabels: function(labels, container) {
			utui.labels.helper.redrawLabels(labels, container, utui.manage.id);
		},
		assignOrRemoveLabels: function(isAssignAction, isBulkAction, labelId, forceApplyToAll) {
			utui.labels.helper.assignOrRemoveLabels(utui.manage.id, isAssignAction, isBulkAction, labelId, forceApplyToAll);
		},
		onLabelAdded: function() {
			// redraw bulk select list
			utui.manage.labels.renderBulkLabelSelect();

			// Get the expanded view
			var $activeContainer = utui.manage.labels.getActiveContainer();
			if ($activeContainer[0]) {
				// redraw single selected list
				utui.manage.labels.renderSingleLabelSelect($activeContainer.attr('data-id'), $activeContainer.attr('id'));
			}
		},
		onLabelRemoved: function(data) {
			utui.labels.helper.onLabelRemoved(utui.manage.id, data);
		},
		onLabelChanged: function(data) {
			utui.labels.helper.onLabelChanged(utui.manage.id, data);
		},
		onLabelMenuClosing: function() {
			// We have to loop over all the items to set the fields to enabled/disabled depending on security
			for (var id in utui.data.manage){
				var labels = utui.data.manage[id].labels;
				if (labels && !utui.labels.canUserModify(labels)) {
					utui.manage.labels.setEditable(id);
				}
			}
		},
		onLabelAssigned: function(data) {
			if (utui.config.currentTab === utui.manage.id && data) {
				utui.manage.labels.assignOrRemoveLabels(true, data.listType === 'bulk', data.labelId);
			}
		},
		onLabelUnAssigned: function(data) {
			if (utui.config.currentTab === utui.manage.id && data) {
				utui.manage.labels.assignOrRemoveLabels(false, data.listType === 'bulk', data.labelId);

				if (!data.action) {	// If NOT coming from a select menu
					var $container = utui.manage.labels.getActiveContainer();
					if ($container[0]) {
						utui.manage.labels.setEditable($container.attr('data-id'));
					}
				}
			}
		},
		labelCheckboxChecked: function() {
			utui.labels.helper.onBulkSelectCheckboxClicked(utui.manage.id);
		},
		setEditable: function(id) {
			if (!id) return;

			var container = $('.manage_container[data-id="'+id+'"]').attr('id'),
				$copyBtn = $('#'+container).find('.actionCopy'),
				$deleteBtn = $('#'+container).find('.actionDelete'),
				$editBtn = $('#'+container).find('.actionEditSettings'),
				$editAllLRBtn = $('#'+container).find('.actionEditRules'),
				$editLRBtn = $('#'+container).find('.LRsRule:not(.imported) .actionEdit'),
				$editMappingBtn = $('#'+container).find('.actionMapping'),
				canModify = utui.labels.canUserModify(utui.data.manage[id].labels);

			if (!canModify) {
				$copyBtn.addClass('ui-state-disabled');
				$deleteBtn.addClass('ui-state-disabled');
				$editBtn.addClass('ui-state-disabled');
				$editAllLRBtn.addClass('ui-state-disabled');
				$editLRBtn.addClass('ui-state-disabled');
				$editMappingBtn.addClass('ui-state-disabled');
			} else {
				$copyBtn.removeClass('ui-state-disabled');
				$deleteBtn.removeClass('ui-state-disabled');
				$editBtn.removeClass('ui-state-disabled');
				$editAllLRBtn.removeClass('ui-state-disabled');
				$editLRBtn.removeClass('ui-state-disabled');
				$editMappingBtn.removeClass('ui-state-disabled');
			}

			utui.manage.updateItemHeader(id, container);

			// Enable/Disable the checkbox
			var $checkbox = $('#manage_bulk_select_'+id);

			$checkbox.attr('disabled', !canModify);
			if (!canModify) {
				$checkbox.prop('checked', false);
			}

			// Hide show the bulk label select box
			utui.manage.labels.labelCheckboxChecked();
		}
	},
    loadTableHeader:function () {
        var myTableHeader = '';
        myTableHeader += '<div id="manage_accordionHeader_status" class="container_status_header">' + localize.t('tiq.tags.status') + '</div>';
        myTableHeader += '<div id="manage_accordionHeader_vendor" class="container_vendor_header">' + localize.t('tiq.tags.vendor') + '</div>';
        myTableHeader += '<div id="manage_accordionHeader_title" class="container_title_header">' + localize.t('tiq.tags.title') + '</div>';
        myTableHeader += '<div id="manage_accordionHeader_loadRules" class="container_loadRules_header">' + localize.t('tiq.tags.load_rule') + '</div>';
		myTableHeader += '<div id="manage_accordionHeader_label" class="container_label_header">' + localize.t('tiq.tags.labels');
	    myTableHeader += '  <span class="columnToggle"><i class="icon-plus-sign-alt"></i></span>';
	    myTableHeader += '</div>';
        myTableHeader += '<div id="manage_accordionHeader_uid" class="container_uid_header">UID</div>';
        myTableHeader += '<div id="manage_accordionHeader_variables" class="container_variables_header">' + localize.t('tiq.tags.mapped') + '</div>';
        $('#manage_content_header').html(myTableHeader);
    },
    loadTagFilterMenu:function () {
        var $filterList = $('#tag_filter_menu_list');

		utui.filters.helper.showFilterMenu($filterList, this.filterConditions, this.id, this.filtersToInclude, this.filter);
	},
	toggleFilterMenu:function () {
		var $filterMenu = $("#tag_filter_menu_list");

		if ($filterMenu.is(":hidden")) {
			$filterMenu.empty();
			utui.manage.loadTagFilterMenu();
			utui.profile.menuToggle('tag_filter_menu_list');
		}
		else {
			utui.profile.menuToggle('tag_filter_menu_list');
		}
	},
	filter:function (conditions) {
		var containerMap = utui.manage.containerMap,
			isResetAction;

		for (var id in containerMap) {
			var tag = containerMap[id],
				bShow = utui.filters.run(conditions, tag, utui.manage.filtersToInclude); // if all filters pass, it will return true

			if (bShow)
				$("#" + id).show();
			else
				$("#" + id).hide();
		}

		isResetAction = utui.filters.isResetAction(conditions, utui.manage.filtersToInclude);

		// update the filter button to indicate whether the filter is on or off
		utui.filters.helper.updateFilterButton('tag_filter_menu_button', isResetAction);
	},
	bindTagStoreButtons: function(bulkArr) {

		$(document).on('click', '.addBulkTagBtn', function(e) {
			e.stopPropagation();
			var $el = $(this),
				tileAttrId = $el.attr('id'),
				tileId = tileAttrId.split('_')[1],
				obj = {};

			for (var key in bulkArr){
				if(bulkArr[key]._id === tileId) {
					obj = bulkArr[key];
				}
			}
			utui.manage.tagBulkUpload(obj);
		});
	},
	unbindTagStoreButtons: function() {
		$(document).off('click', '.tile');
		$(document).off('click', '.addBulkTagBtn');
	},

	initRatings:function(){
		//Convert div to stars ratings
		$('div.rateit').rateit();

		//Bind rating action
		$('div.rateit').off('rated').on('rated', function(event, value) {
			var $el = $(this),
				tagid = $el.data('tagid'),
				postData = {
					"userid" : utui.login.email,
					"rating" : value
				},
				postURL = utui.service.restapis.TAG_RATINGS + '/' + tagid;

			utui.service.post(postURL, postData, null, function() {
				$el.closest('.rating-container').find('.rating-context').hide();
				$el.closest('.rating-container').find('.rating-stars-message').show();
				utui.manage.loadTagMarketplaceData();
			}, null);
		});

        //Bind rating hover
        $('div.rateit').off('over').on('over', function (event, value) {
            var ratingtooltipvalues = localize.t('tiq.tags.ratings', {"toArray":"1"});	// Convert to array

			$(this).attr('title', ratingtooltipvalues[value-1]);
		});
	},
	constructRatingContainer:function(tagid){
		var content = '',
			rating_val,
			votes,
			user_rating = 0;

		if(utui.manage.allTagRatings){
		   rating_val = (utui.manage.allTagRatings[tagid]) ? utui.manage.allTagRatings[tagid].display_rating_avg : 0;
		   votes = (utui.manage.allTagRatings[tagid]) ? utui.manage.allTagRatings[tagid].total_votes : 0;
		}

		if(utui.manage.userTagRatings) {
			user_rating = (utui.manage.userTagRatings[tagid]) ? utui.manage.userTagRatings[tagid].rating : 0;
		}

		content += '<div class="rating-container">';

		if(utui.manage.allTagRatings && utui.manage.userTagRatings){
			content += '<div class="rating-stars-container js-rating_'+tagid+'" data-tagid="' + tagid + '">';
				// Rating Stars
				content += '<div class="rating-stars" data-key="' + tagid + '">';
				if(user_rating > 0) {
					content += '<div data-tagid="' + tagid +'" data-rateit-step="1" data-rateit-resetable="false" class="rateit userrated" data-rateit-value="' + user_rating + '" data-rateit-ispreset="true"></div>';
				} else if(votes >= 2) {
					content += '<div data-tagid="' + tagid +'" data-rateit-step="1" data-rateit-resetable="false" class="rateit" data-rateit-value="' + rating_val + '" data-rateit-ispreset="true"></div>';
				} else {
					content += '<div data-tagid="' + tagid +'" data-rateit-step="1" data-rateit-resetable="false" class="rateit"></div>';
				}
				content += '</div>';

                content += '<div class="rating-stars-message">' + localize.t('tiq.tags.voted') + '</div>';
            content += '</div>';

            content += '<div class="rating-context">';
                if(votes >= 2) {
                    content += localize.t('tiq.tags.overall_score') + ' <a title="' + localize.t('tiq.tags.out_of', {num:rating_val}) + '">' + rating_val + '</a>';
                } else {
                    content += localize.t('tiq.tags.overall_score') + ' <a title="' + localize.t('tiq.tags.not_enough_votes') + '">N/A</a>';
                }
            content += '</div>';
        }
        else {
            content += '<div style="color:#D00000">' + localize.t('tiq.tags.ratings_unavailable') + '</div>';
        }

		content += '</div>';
		return content
	},
	prepareToAddItem:function(tagObj) {
		//TODO: put in more appropriate place
		this.unbindTagStoreButtons();

		utui.util.showSpinner();

		this.getNextTagIdFromServer(1, null,
			// successfully retrieved nextTagId
			function(providedExistingLastTagId, count, nextTagId) {
				utui.manage.addItem(tagObj, true, nextTagId, true);

				utui.util.hideSpinner();
			},
			// failed to retrieve nextTagId
			function() {
				utui.manage.addItem(tagObj);

				utui.util.hideSpinner();
			}
		);
	},

	addItemFromUnmanagedTagReport: function(tagIdObj, configsObj, unmanagedTagUid, $parentAccordion, successCb, errorCb) {
		var tagConfigIsValid = function(tagId, config) {
			if (utui.config.manageList[tagId].configFields &&
				_.where(utui.config.manageList[tagId].configFields, { id: config }).length > 0) {
				return true;
			}
			return false;
		};
		var self = this;

		this.getNextTagIdFromServer(1, null,
			// successfully retrieved nextTagId
			function(providedExistingLastTagId, count, nextTagId) {

				tagIdObj = self.setTagProperties(tagIdObj, nextTagId);

				// Set configs detected during Site Scan
				for (var key in configsObj) {
					if (tagConfigIsValid(tagIdObj.tag_id, key)) {
						tagIdObj['config_' + key] = configsObj[key];
					}
				}

				var container = utui.manage.addItem(tagIdObj, null, tagIdObj.id);
				self.toggleActive(container);
				utui.profile.saveTabData(utui.manage.id, false, false); // Update data model

				// return container so report configure button can bind to it, call editTagSettings
				successCb($parentAccordion, container, unmanagedTagUid);
			},
			// failed to retrieve nextTagId
			errorCb
		);

		function tagConfigIsValid(tagId, config) {
			if (utui.config.manageList[tagId].configFields &&
				_.where(utui.config.manageList[tagId].configFields, { id: config }).length > 0) {
				return true;
			}
			return false;
		}
	},
  
  addBulkImportedItems: function(data, dataItems) {
    var that = this;
    
    _.each(dataItems, function(val){
      that.addImportedItem(val,data, false);
    });
    
    this.updateSortOrder();
    utui.manage.updateAccordion(false);
  },
	
	addImportedItem : function(obj, data, updateFlag) {
		utui.profile.import.setImportOriginId(obj, obj._id);
		
		// Maintain data source mapping for imported tags
		if (obj.map) {
			for (var i in obj.map) {
				if (obj.map[i].dsID) {
					delete obj.map[i].dsID;
				}
			}
		}
		this.unbindTagStoreButtons();
		var containerId = utui.manage.addItem(obj, updateFlag, obj.id);

		// Update history and show change status
		var options = {
			origin_id:  obj.libraryId,
			container: containerId,
			new_id: "" + obj.id
		};
		utui.profile.import.updateImportedHistory(data, utui.constants.tags.TYPE, options);
	},
	addStashedItem : function(obj) {
		// Since stash ids are already unique, we do not need to create new IDs
		utui.manage.unbindTagStoreButtons();
		utui.manage.addItem(obj, undefined, obj.id, null, null, true);

		utui.util.hideSpinner();
	},

	// The bulk upload logic will need to move into a separate module for handling the specific logic needed for handling
	// bulk upload of tags.
	// We need to get this functionality out for the GM demo , so for now it can stay here, and be moved when we expand
	// tag bulk uploading for other tags. CS: 12/3/12
	tagBulkUpload:function(tagTemplateId) {
		var obj = utui.config.manageList[tagTemplateId],
			self = this;

		//TODO: put in more appropriate place
		self.unbindTagStoreButtons();

		var $content = $("<div />", {
			id : "bulktag_dialog_content"
		});
		$('#manage_dialog_addmore').empty();
		$content.appendTo($("#manage_dialog_addmore"));

		var contentHtml = '<div class="manage_catalog_item">';
		contentHtml += '<div class="manage_catalog_logoWrapper"><img src="' + obj.logo + '"/></div>';
		contentHtml += '<div class="manage_catalog_description" style="margin-left:180px;padding-top:10px;min-height:24px"><b>'  + obj.title + '</b><br>'+ obj.description + '</div>';
		contentHtml += '</div>';

		$content.append(contentHtml);

        var bulkUpDivHtml = '<div style="padding: 5px;">' + localize.t('tiq.tags.bulk.paste_cvs_formatted_tag');
            bulkUpDivHtml += '  <br /><br />' + localize.t('tiq.tags.bulk.available_counter_types') + '<br />';
            bulkUpDivHtml += '  <br><b>' + localize.t('tiq.tags.bulk.examples') + '</b>';
            bulkUpDivHtml += '  <p style="border-left:10px solid #EEE; padding-left:10px;">';
            bulkUpDivHtml += 		localize.t('tiq.tags.bulk.sample_title1') + '<br />';
            bulkUpDivHtml += 		localize.t('tiq.tags.bulk.sample_title2') + '<br />';
            bulkUpDivHtml += 		localize.t('tiq.tags.bulk.sample_title3') + '<br />';
            bulkUpDivHtml += '  </p>';
            bulkUpDivHtml += '</div>';
            bulkUpDivHtml += '<div id="bulkTagListErrs" style="display:none; margin: 5px; padding:5px; width:759px;height:70px; overflow:auto; border: 1px solid #CD0A0A; color:#CD0A0A; background-color:#FEF1EC;"><br></div>';
            bulkUpDivHtml += '<div><textarea style="margin-left:5px; width:765px;height:280px;border: 1px solid grey;" id="bulkTagList"></textarea></div>';


		$content.append($("<div />", {
			"class" : "container",
			"style": "height:450px;padding-top:5px;"
		}).append(bulkUpDivHtml));


        $('#manage_dialog_addmore').dialog({
            autoOpen:true,
            height:644,
            width:800,
            modal:true,
            closeOnEscape:false,
            closeText:'',
            draggable: true,
            resizable:false,
            title: localize.t('tiq.tags.bulk.manage_tags', {title:obj.title}),
            position:['center', 30],
            buttons: [
                {
                    text: localize.t('tiq.dialog.button.upload'),
                    id: 'addBulkTags_dialog_uploadBtn',
                    click: function() {
                        var tags = utui.manage.processBulkTagUpload();
                        if (tags){
                            $(this).dialog('close');
                            utui.manage.addBulk(tags);
                        }
                    },
                    style: 'float:right; margin-right: 12px'
                },
                {
                    text: localize.t('tiq.dialog.button.cancel'),
                    id: 'addBulkTags_dialog_cancelBtn',
                    click: function() {
                        $(this).dialog('close');
                        self.unbindTagStoreButtons();
                    },
                    style: 'float:left; margin-left: 12px'
                }
            ]
        });


    },
    processBulkTagUpload:function(){
        var bulkCSVTagList = $('#bulkTagList').val().trim();
        var buvErrs = [];
        var csvRecs = [];
        var bulkTagObjectList = [];
        if (bulkCSVTagList.length === 0){
            buvErrs.push(localize.t('tiq.tags.bulk.error.cvs_is_empty'));
        } else {
            $('#bulkTagListErrs').css('display','none');
            $('#bulkTagList').css('height','300px');
            // Look out for unclosed quotes - this breaks the CSV parser logic.
            if ((bulkCSVTagList.match(/\"/g)||[]).length % 2 == 1){
                buvErrs.push(localize.t('tiq.tags.bulk.error.cvs_is_unparseable'));
            } else {
                // Parse the input into an array of arrays.
                csvRecs = utui.manage.CSVToArray(bulkCSVTagList,",");
                if (csvRecs.length === 0){
                    buvErrs.push(localize.t('tiq.tags.bulk.error.no_records_found'));
                } else {
                    for (var ci = 0; ci < csvRecs.length; ci += 1){
                        if (csvRecs[ci].length != 6 ){
                            buvErrs.push(localize.t('tiq.tags.bulk.error.invalid_format', {num:(ci+1)}));
                        } else {
                            if ($.trim(csvRecs[ci][0]) == "" ) {
                                buvErrs.push(localize.t('tiq.tags.bulk.error.title_cannot_be_empty', {num:(ci+1)}));
                            }
                            if ($.trim(csvRecs[ci][1]) == "" ) {
                                buvErrs.push(localize.t('tiq.tags.bulk.error.advertiser_cannot_be_empty', {num:(ci+1)}));
                            }
                            var ct = $.trim(csvRecs[ci][5]);
                            if (ct == "" ) {
                                buvErrs.push(localize.t('tiq.tags.bulk.error.counter_type_cannot_be_empty', {num:(ci+1)}));
                            } else {
                                //Standard, Unique, Per Session
                                ct = ct.toLowerCase();
                                if (ct != 'standard' && ct != 'unique' && ct != 'per session'){
                                    buvErrs.push(localize.t('tiq.tags.bulk.error.counter_type_not_recognized', {num:(ci+1)}));
                                } else if (ct == 'per session'){
                                    csvRecs[ci][5] = 'session';
                                }
                            }
                        }
                    }
                }
            }
            if (buvErrs.length > 0){
                var errContent = '<strong>' + localize.t('tiq.tags.bulk.error.parsing_errors_found') + '</strong><ul>';
                for (var bi=0; bi<buvErrs.length; bi += 1) {
                    errContent += "<li>"+buvErrs[bi]+"</li>";
                }
                var $ulErrDiv = $('#bulkTagListErrs');
                $ulErrDiv.empty();
                $ulErrDiv.append(errContent);
                $ulErrDiv.css('display','block');
                $('#bulkTagList').css('height','200px');
                return false;

			} else { // This logic is specific for DoubleClick floodlight, but should be made more generic once we introduce more tags for bulk.
				for (var ci = 0; ci < csvRecs.length; ci += 1){
					bulkTagObjectList.push ({

						// Added "Default" values
						advconfig_loadtype: "",
						advconfig_bundle: "no",
						advconfig_optout: "yes",
						advconfig_send: "yes",
						advconfig_src: "",
						advconfig_wait: "yes",
						config_cat : csvRecs[ci][3],
						config_countertype : csvRecs[ci][5].toLowerCase(),
						config_src : csvRecs[ci][1],
						config_type : csvRecs[ci][2],
						notes : csvRecs[ci][4],
						scope : "all",
						loadrule : "all",
						status : "active",
						tag_id : "4001",
						tag_name : "DoubleClick - Floodlight",
						title : csvRecs[ci][0],
						publishedTargets:[],
						new_flag:'true'
					});
				}
				return bulkTagObjectList;
			}

		}
		return true;
	},
	CSVToArray:function( rawData) {
		var strData = rawData.replace(/,\s+/g, ',');
		var objPattern = new RegExp(
			(
				"(\\,|\\r?\\n|\\r|^)" +
					"(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
					"([^\"\\,\\r\\n]*))"
				),
			"gi"
		);
		var arrData = [[]];
		var arrMatches = null;
		while (arrMatches = objPattern.exec( strData )){
			var strMatchedDelimiter = arrMatches[ 1 ];
			if (
				strMatchedDelimiter.length &&
					(strMatchedDelimiter != ",")
				){
				arrData.push( [] );
			}
			if (arrMatches[ 2 ]){
				var strMatchedValue = arrMatches[ 2 ].replace(
					new RegExp( "\"\"", "g" ),
					"\""
				);
			} else {
				var strMatchedValue = arrMatches[ 3 ];
			}
			arrData[ arrData.length - 1 ].push( strMatchedValue );
		}
		return( arrData );

	},

	addBulk : function(tagObjs) {
		var tag,
			self = this;

		utui.util.showSpinner();

		this.getNextTagIdFromServer(tagObjs.length, null, function(providedExistingLastTagId, count, nextTagId) {
				// successfully retrieved nextTagId
				for(var i = nextTagId, j = 0; j < count; i++, j++) {
					tag = tagObjs[j];
					tag.id = "" + i;

					utui.manage.addItem(tag, false);
					utui.manage.updateAccordion(true);

					utui.data.settings.lastmanageid = i;
					self.nextId = utui.data.settings.lastmanageid + 1;
				}

				utui.util.hideSpinner();
			},
			function() {
				// failed to retrieve nextTagId
				for(var i = 0; i < tagObjs.length; i++) {
					tag = tagObjs[i];
					tag.id = "" + self.getNextTagIdFromLocal();
					utui.manage.addItem(tag, false);
					utui.manage.updateAccordion(true);

					utui.data.settings.lastmanageid = parseInt(tag.id, 10);
					self.nextId = utui.data.settings.lastmanageid + 1;
				}

				utui.util.hideSpinner();
			}
		);
	},
	getNextTagIdFromLocal : function() {
		var tagMaxId = 0;
		for(var i in utui.data.manage) {
			var num = parseInt(i);
			if(num > tagMaxId) {
				tagMaxId = num;
			}
		}

		var nextTagId;
		if(this.nextId > tagMaxId) {
			nextTagId = this.nextId;
		}
		else {
			nextTagId = tagMaxId + 1;
		}

		return nextTagId;
	},
	getNextId: {

		_nextId : 0,

		_getLocalLastId: function() {
			var maxId = 0,
				lastSettingsId = utui.data.settings.lastmanageid;

			if (typeof lastSettingsId !== 'undefined'){
				maxId = +lastSettingsId || 0; // Avoid a NaN if it's empty...
			}

			for(var i in utui.data.manage) {
				var num = +i;

				if(num > maxId) {
					maxId = num;
				}
			}

			return (this._nextId > maxId) ? this._nextId - 1 : maxId;
		},

		fromServer: function(numOfInstances, importCount, successCallback, failureCallback) {
			var requestOptions = { timeout : 5000 },
				providedLastId = utui.manage.getNextId._getLocalLastId(),
				url = utui.service.addParamsToURL(utui.service.restapis.GET_NEXT_ID, {type : 'tag'}),
				newId,
				dataObj;

			utui.util.showSpinner();

			if(importCount) {
				providedLastId += importCount;
				requestOptions = {timeout : 5000, async: false};
			}

			dataObj = {
				provided_last_id : providedLastId,
				count : (numOfInstances ? numOfInstances : 1)
			};

			utui.service.get( utui.service.restapis.GET_NEXT_ID, dataObj, requestOptions,
				function(data) {
					this._nextId = data.next_unique_id;

					if(successCallback) successCallback(data.provided_existing_last_id, data.count, this._nextId);
					utui.util.hideSpinner();
				},
				function() {
					newId = utui.manage.getNextId.fromLocal();
					if(failureCallback) failureCallback(newId);
					utui.util.hideSpinner();
				}
			);
		},

		fromLocal: function() {
			return utui.manage.getNextId._getLocalLastId() + 1;
		},

		reset: function() {
			this._nextId = 0;
		}
	},
	getNextTagIdFromServer : function(numOfTags, importCount, successCallback, failCallback) {
		var tagMaxId = 0,
			url = utui.service.addParamsToURL(utui.service.restapis.GET_NEXT_ID, {type : 'tag'});

		if (typeof utui.data.settings.lastmanageid != 'undefined'){
			tagMaxId = parseInt(utui.data.settings.lastmanageid) || 0;// Avoid a NaN if it's empty...
		}
		for(var i in utui.data.manage) {
			var num = parseInt(i);
			if(num > tagMaxId) {
				tagMaxId = num;
			}
		}

		var providedExistingLastTagId;
		if(this.nextId > tagMaxId) {
			providedExistingLastTagId = this.nextId - 1;
		}
		else {
			providedExistingLastTagId = tagMaxId;
		}

		var requestOptions = {timeout : 5000};
		if (importCount) {
			providedExistingLastTagId += importCount;
			requestOptions = {timeout : 5000, async: false};
		}

		utui.service.get(url,
			{
				provided_last_id : providedExistingLastTagId,
				count : (numOfTags ? numOfTags : 1)
			},
			requestOptions,
			function(data) {
				var providedExistingLastTagId = data.provided_existing_last_id;
				var count = data.count;
				var nextTagId = data.next_unique_id;

				successCallback(providedExistingLastTagId, count, nextTagId);

			},
			function() {
				failCallback();
			}
		);
	},
	addItem:function (obj, updateFlag, uniqueTagId, isSourceFromMarketplace, isOnProfileLoad, bBypassHistoryEvent) {
		utui.profile.changeFocusFlag = false;
		var id = 0,
			itemId = utui.util.getContainerId(),
			container = 'manage_content_' + itemId,
			showEditDialog = false;

		if (typeof obj.id == 'undefined') {
			// rb - uniqueTagId is undefined when a tag is copy, init, fail from server (i.e. localally fetch), bulk add.
			obj = this.setTagProperties(obj, uniqueTagId);
			if (!obj.imported) {
				updateFlag = true;
				showEditDialog = true;
			}
		} else {
			id = utui.util.numericValueOf(obj.id);
		}

		this.containerMap[container] = obj;

		var content = '';

		content += '<div id="' + container + '" data-id="' + obj.id + '" class="manage_container">';
		content += '  <h3><a href="#" id="' + container + '_accordion"></a></h3>';
		content += '  <div class="accordionItemContent">';
		content += '    <br><br><br>';
		content += '    <br><br><br>';
		content += '    <br><br><br>';
		content += '    <br><br><br>';
		content += '    <br><br><br>';
		content += '    <br><br><br>';
		content += '    <br><br><br>';
		content += '  </div>';
		content += '</div>';
		$('#manage_content').append(content);
		this.setTitle(container);

		if (updateFlag != false) {
			if(typeof updateFlag === undefined){
				updateFlag = false;
			}
      this.updateSortOrder();
			utui.manage.updateAccordion(updateFlag);
		}

		if(!bBypassHistoryEvent) {
			utui.profile.setActionPerformed({
				action:utui.constants.tags.ADDED,
				data:{
					id:obj.id,
					tag_name:utui.util.getTagNameFromTagId(obj.tag_id),
					imported : obj.imported,
					library : (obj.imported) ? obj.settings.profileid : '',
					name : utui.util.getTagNameFromTagId(obj.tag_id),
					kind : utui.constants.tags.TYPE,
					operation : utui.constants.operation.ADDED,
					container: container
				}
			}, true, !this.initComplete, isOnProfileLoad);
		}

		// Add an attribute to the container that tells us that this tag is new and not yet saved
		// * Must add this before the below if(showEditDialog) statement so that the data attribute is
		// set before the edit dialog is loaded.
		if (this.initComplete) {
			$('#' + container).data("new_tag", true);
		}

		if(showEditDialog){
			$('#manage_dialog_addmore').dialog('close');
			utui.manage.editTagSettings(container,'newTag');

			// If obj.fields exist then populate the values of the fields within the container
			// This should only exist if a code snippet was used in the marketplace
			if (obj.fields) {
				utui.manage.tagSnippet.updateFields(container, obj.fields);
			}
		}

		if(!$.isEmptyObject(obj.imported)) {

			var migrateImportTags = utui.profile.import.migrateImportTags,
				profile_name = obj.settings.profileid,
				origin_id = obj.libraryId,
				new_id = obj._id;

			if($.isEmptyObject(migrateImportTags[profile_name])) {
				migrateImportTags[profile_name] = {}
			}

			migrateImportTags[profile_name][origin_id] = $.extend(migrateImportTags[profile_name][origin_id], {
				new_id: new_id
			});
			utui.util.pubsub.publish(utui.constants.tags.IMPORTED, {action: utui.constants.tags.IMPORTED, data: obj});
		};

        if(isSourceFromMarketplace) {
            utui.util.pubsub.publish(utui.constants.tags.ADDED, { action:utui.constants.tags.ADDED, data: obj });
        }

        return container;
	},
	setTagProperties: function (obj, uniqueTagId) {
		var id;

		if (uniqueTagId) {
			id = utui.util.numericValueOf(uniqueTagId);
			utui.data.settings.lastmanageid = id;
			this.nextId = id + 1;
		}
		else {
			// uniqueTagId is not specified
			if (this.nextId == 0) {
				if (typeof utui.data.settings.lastmanageid != 'undefined') {
					this.nextId = utui.util.numericValueOf(utui.data.settings.lastmanageid);
				} else {
					for (var i in utui.util.getVars(utui.data.manage)) {
						i = utui.util.numericValueOf(i);
						if (i > this.nextId)this.nextId = i;
					}
				}
			}
			id = this.nextId + 1;
			utui.data.settings.lastmanageid = id;
			this.nextId = utui.data.settings.lastmanageid + 1;
		}

		// Set Props
		obj.id = id + '';
		obj.status = 'active';
		obj.loadrule = (obj.loadrule) ? obj.loadrule : 'all';
		obj.tag_name = utui.config.manageList[obj.tag_id].title;
		obj.publishedTargets = [];
		obj.new_flag = 'true';

		return obj;
	},
	displayItem: function (container) {
		if(typeof container === 'undefined' || container === '') return;

		var obj = this.containerMap[container],
			importedItem = obj.imported,
			canModify = utui.labels.canUserModify(obj.labels),
			itemContent = $('#' + container + ' .accordionItemContent'),
			tooltipObj = {},
			content = '';

		content += '    <div class="contentButtonBar">';
		content += '        <a href="#" class="actionCopy btn btn-small i-color-copy"><i class="icon-copy"></i> ' + localize.t('tiq.tags.copy') + '...</a>';
		content += '        <a href="#" class="' + (importedItem || !canModify? 'ui-state-disabled ' : ' ') + 'actionDelete btn btn-small i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.tags.delete') + '</a>';
		content += '    </div>';

		content += '    <table class="contentAreaTable"><tr><td class="contextContainer">';

		// CONTEXT BOX
		content += '        <div class="contextBox">';
		content += '            <div class="tagVendorLogo" style="background:url(\'' + utui.config.manageList[obj.tag_id].logo + '?v=' + utui_version + '\');"></div>';
		content += '        ' + utui.manage.constructRatingContainer(obj.tag_id);
		content += '        <div class="contextActionButtons">';
		content += '           <a href="#" class="' + (!canModify ? 'ui-state-disabled ' : ' ') + 'actionCopy btn btn-small i-color-copy"><i class="icon-copy"></i> ' + localize.t('tiq.tags.copy') + '...</a>';
		content += '           <a href="#" class="' + (importedItem || !canModify ? 'ui-state-disabled ' : ' ') + 'actionDelete btn btn-small i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.tags.delete') + '</a>';
		content += '        </div>';

		// LABELS
		if (!importedItem) {
			content += '<div id="'+container+'_labels" class="contextSectionContent">';
			content += '	<div class="contextSectionHeader labels js-labels-container">' + localize.t('tiq.tags.labels') + ' ';
			content += '		<div class="labels_select_wrapper">';
			content += '			<select id="manage_labels_select_' + obj.id + '" data-list-type="single"></select>';
			content += '		</div>';
			content += '	</div>';
			content += '</div>';
		}

		// VENDOR DESCRIPTION
		if (utui.config.manageList[obj.tag_id].description) {
			content += '            <div id="' + container + '_vendor" class="contextSectionWrapper contextHelp">';
			content += '                <div class="contextSectionHeader">' + localize.t('tiq.tags.tag_vendor_information') + '</div>';
			content += '                <div class="contextSectionContent">';
			content += '                    <div class="contextSectionInfo">';
			content += '                    </div>';
			content += '                    <div class="contextShowMore">' + localize.t('tiq.tags.show_more') + '</div>';
			content += '                </div>';
			content += '            </div>';
		}

		// VENDOR CAPABILITIES
		var capabilities = tagapi.getVendorCapabilities(obj.tag_id);
		content += '<div class="vendorCapabilities">';
		if (capabilities) {
			for (var i=0; i<capabilities.length; i++) {
				var capability = capabilities[i];
				var capabilityId = container + '_capability_' + capability.shortname
				content += utui.manage.vendorCapability.getView(capabilityId, capability);

				utui.manage.vendorCapability.hoverContextMenu('#'+capabilityId, true);
			}
		}

		content += '</div>';
		// TIPS
		if (utui.config.manageList[obj.tag_id].comments) {
			content += '                <div id="' + container + '_tips" class="contextSectionWrapper contextHelp">';
			content += '                    <div class="contextSectionHeader">' + localize.t('tiq.tags.tips') + '</div>';
			content += '                    <div class="contextSectionContent">';
			content += '                        <div class="contextSectionInfo">';
			content += '                        </div>';
			content += '                        <div class="contextShowMore">' + localize.t('tiq.tags.show_more') + '</div>';
			content += '                    </div>';
			content += '                </div>';
		}

		content += '        </div>'; // end contextBox

		content += '    </td><td class="contentContainer">';

		content += '    </td></tr></table>'; //  end contentContainer

		$('#' + container + ' .accordionItemContent').html(content);

		content = '';

				content += '    <div class="main-header"></div>';
		content += '    <div id="' + container + '_settingsBlock" data-flow="flow_' + container + '" class="contentSection managedTagContentSection">'; 
		content += '        <div class="contentSectionTitle">';
		content += '            <div class="titleExpander"><i class="icon-caret-down"></i></div>';
		content += '            <div class="titleText">' + localize.t('tiq.tags.tag_configuration') + '</div>';
		content += '        <div class="titleButton"><span class="' + (!canModify ? 'ui-state-disabled ' : ' ') + 'btn btn-small actionEditSettings i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</span></div>';
		content += '        </div>';
		content += '        <div class="contentSectionBody">';

		content += '        <div id="' + container + '_settingsGeneral" class="contentBlock">';
		content += '            <div class="contentBlockTitle">' + localize.t('tiq.tags.properties') + '</div>';

		// Properties
		content += '           <table id="' + container + '_basic_settings" class="contentTable">';
		content += '               <tr>';
		content += '                   <td class="contentTableLabel"><div>' + localize.t('tiq.tags.title') + '</div></td>';
		content += '                   <td class="contentTableValue">';
		content += '                       <div id="' + container + '_settingsGeneral_title" class="contentValueContainer contentTableValueNone">';
		content += '                           <div class="contentValue">&nbsp;</div>';
		content += '                           <div id="' + container + '_tooltip_title" title="' + localize.t('tiq.tags.the_title_field_tealium_specific') + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div>';
		content += '                       </div>';
		content += '                   </td>';
		content += '               </tr>';
		content += '           </table>';

		// Vendor Configuration
		content += '        <div class="contentBlockTitle">Vendor Configuration</div>';
		content += '       <table id="' + container + '_vendorconfig_settings" class="contentTable">';

		content += '       </table>';

		// Publish Settings
		content += '                <div class="contentBlockTitle">' + localize.t('tiq.tags.publish_settings') + '</div>';

		content += '                <table class="contentTable">';
		content += '                    <tr>';
		content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.target_locations') + '</div></td>';
		content += '                        <td class="contentTableValue">';
		content += '                            <div id="' + container + '_settingsAdv_locations" class="contentValueContainer">';
		content += '                                <div id="' + container + '_tooltip_locations" title="' + utui.tooltip.manage.advconfig_locations + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div>';
		content += '                                <div class="contentValue"></div>';
		content += '                            </div>';
		content += '                        </td>';
		content += '                    </tr>';
		content += '                    <tr>';
		content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.current_published_locations') + '</div></td>';
		content += '                        <td class="contentTableValue">';


		// ENVIRONMENTS
		var devAliasName = utui.targets.aliasDisplayName('dev'),
			qaAliasName = utui.targets.aliasDisplayName('qa'),
			prodAliasName = utui.targets.aliasDisplayName('prod');

		content += '                             <div id="' + container + '_settingsEnvironments" class="contentBlockBody blockTypeEnvironments">';
		content += '                                 <div class="envLabel unpublishedLabel">' + localize.t('tiq.tags.unpublished') + '</div>';
		content += '                                 <div class="envLabel devLabel"><div class="ellipsis env_alias_dev" title="' + devAliasName + '">' + devAliasName + '</div></div>';
		content += '                                 <div class="envLabel qaLabel"><div class="ellipsis env_alias_qa" title="' + qaAliasName + '">' + qaAliasName + '</div></div>';
		content += '                                 <div class="envLabel prodLabel"><div class="ellipsis env_alias_prod" title="' + prodAliasName + '">' + prodAliasName + '</div></div>';
		if (utui.permissions.isCustomTargetsEnabled()) {
			content += '                             <div class="envLabel customLabel">' + localize.t('tiq.tags.custom') + '</div>';
		}
		content += '                             </div>'; // end contentBlock

		content += '                        </td>';
		content += '                    </tr>';
		content += '                </table>';


		// Advanced Settings
		if (typeof utui.config.manageList[obj.tag_id].advanced_config != 'undefined' && utui.config.manageList[obj.tag_id].advanced_config == "true") {

			content += '       <div id="' + container + '_advanced_settings" class="contentBlockSubSection">';
			content += '            <div class="contentBlockSubTitle"><div class="expander"><i class="icon-caret-right"></i></div> ' + localize.t('tiq.tags.advanced_settings') + '</div>';
			content += '            <div class="contentBlockSubBody">';
			content += '                <div class="contentBlockSubDescription"><i class="icon-warning-sign"></i> ' + localize.t('tiq.tags.changes_to_these_settings') + '</div>';
			content += '                <table class="contentTable">';
			content += '                    <tr>';
			content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.send_flag') + '</div></td>';
			content += '                        <td class="contentTableValue"><div id="' + container + '_settingsAdv_sendFlag" class="contentValueContainer"><i class=""></i><div id="' + container + '_tooltip_send" title="' + utui.tooltip.manage.advconfig_send + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div></div></td>';
			content += '                    </tr>';
            content += '                    <tr>';
            content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.bundle_flag') + '</div></td>';
            content += '                        <td class="contentTableValue"><div id="'+container+'_settingsAdv_bundleFlag" class="contentValueContainer"><i class=""></i><div id="'+container+'_tooltip_bundle" title="' + utui.tooltip.manage.advconfig_bundle + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div></div></td>';
            content += '                    </tr>';
			content += '                    <tr>';
			content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.wait_flag') + '</div></td>';
			content += '                        <td class="contentTableValue"><div id="' + container + '_settingsAdv_waitFlag" class="contentValueContainer"><i class=""></i><div id="' + container + '_tooltip_wait" title="' + utui.tooltip.manage.advconfig_wait + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div></div></td>';
			content += '                    </tr>';
			content += '                    <tr>';
			content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.synchronous_load') + '</div></td>';
			content += '                        <td class="contentTableValue"><div id="' + container + '_settingsAdv_syncLoad" class="contentValueContainer"><i class=""></i><div id="' + container + '_tooltip_loadtype" title="' + utui.tooltip.manage.loadtype + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div></div></td></td>';
			content += '                    </tr>';
			content += '                    <tr>';
			content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.custom_script_source') + '</div></td>';
			content += '                        <td class="contentTableValue">';
			content += '                            <div id="' + container + '_settingsAdv_src" class="contentValueContainer contentTableValueNone"><div class="contentValue"></div><div id="' + container + '_tooltip_src" title="' + utui.tooltip.manage.advconfig_src + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div></div>';
			content += '                        </td>';
			content += '                    </tr>';
			if (tagapi.hasActiveS2S() && typeof utui.config.manageList[obj.tag_id].s2sEnabled != 'undefined' && utui.config.manageList[obj.tag_id].s2sEnabled == "true") {
				content += '                    <tr>';
				content += '                        <td class="contentTableLabel"><div>' + localize.t('tiq.tags.enable_server_to_server') + '</div></td>';
				content += '                        <td class="contentTableValue"><div id="' + container + '_settingsAdv_s2s" class="contentValueContainer"><i class=""></i><div id="' + container + '_tooltip_s2s" title="' + utui.tooltip.manage.advconfig_s2s + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div></div></td>';
				content += '                    </tr>';
			}

			content += '                </table>';
			content += '            </div>';
			content += '        </div>'; // end contentBlockSubSection
		}
		content += '            </div>'; // end contentBlock

		// NOTES
		content += '            <div id="' + container + '_settingsNotes" class="contentBlock">';
		content += '                <div class="contentBlockTitle">' + localize.t('tiq.tags.notes') + '</div>';
		content += '                <div class="contentBlockBody">';
		if (typeof obj.notes !== 'undefined' && obj.notes != '') {
			var myNoteText = utui.util.safeEscape(obj.notes);
			myNoteText = myNoteText.replace(/\r?\n|\r/g, "<br>");
			content += '<div class="noteItem">' + myNoteText + '</div>';
		} else {
			content += '<div class="noteItem emptySection">' + localize.t('tiq.tags.there_are_no_notes') + '</div>';
		}

		content += '                </div>';
		content += '            </div>'; // end contentBlock

		content += '        </div>'; // end contentSectionBody
		content += '    </div>'; //  end contentSection

		var $contentContainer = $('#' + container + ' .contentContainer');
		$contentContainer.append(content);

		utui.manage.updateItemHeader(obj.id, container);

		content = '';

		// LOAD RULES
		content += '    <div id="' + container + '_loadRulesBlock" data-flow="flow_' + container + '" class="contentSection managedTagContentSection-varsAndLoadRules managedTagContentSection">'; 
		content += '        <div class="contentSectionTitle">';
		content += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
		content += '            <div class="titleText">' + localize.t('tiq.tags.load_rules') + '</div>';
		content += '            <div class="titleCount"></div>';
		content += '            <div class="titleButton"><span id="' + container + '_editLoadRule" class="' + (importedItem || !canModify ? 'ui-state-disabled ' : ' ') + 'btn btn-small actionEditRules i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</span></div>';
		content += '        </div>';

		var hasMissingLoadRules = function(tagId) {
			return utui.validation.getMap('manage',tagId) && utui.validation.getMap('manage',tagId).filter(function(obj) { return obj.key.indexOf('loadrule') === 0 }).length;
		};

		var getMissingLoadRulesCollection = function(tagId) {
			return utui.validation.getMap('manage',tagId).filter(function(obj) { return obj.key.indexOf('loadrule') === 0 });
		};

		if(hasMissingLoadRules(obj.id)) {
			var missingLoadruleCount = getMissingLoadRulesCollection(obj.id).length;
			content += '        <div class="bg-warning" style="margin: 0 20px; height: 32px; line-height: 32px; padding: 0 8px; border-radius: 4px; border: 1px solid #FCBE04;">';
			content += '            <i class="icon-warning-sign"></i>'+localize.t('tiq.tags.validation.missing_loadrules', { count: missingLoadruleCount, lr: (missingLoadruleCount > 1 ? localize.t('tiq.tags.validation.loadrules') : localize.t('tiq.tags.validation.loadrule') ) });
			content += '        </div>';
		}

		// Load Rule Conditions
		content += '    <div class="contentSectionBody scrollSection">';
		content += '        <div class="LRconditionsBlock contentSectionBodyContent"></div>';
		content += '    </div>'; // end contentSectionBody

		content += '    </div>'; //  end contentSection

		$contentContainer.append(content);
		content = '';

        this.saveData(); // Ensures data is saved to model before updating load rules and for getting related extensions (e.g., new tag or copying tag)

		// EXTENSIONS
		var relatedExtObjs = tagapi.getRelatedExtensionObjects(obj.id),
			bHasPreloaderExt = false,
			bHasBeforeLRExt = false,
			bHasAfterLRExt = false,
			bHasDOMReadyExt = false,
			bHasTagScopedExt = false,
			bHasAfterTagsExt = false,
			relatedExtCount = relatedExtObjs.length;

		if (relatedExtCount > 0) { // only render if tag has extensions related to it

			// check extensions for instances of each load order category for rendering purposes
			for(var i = 0; i < relatedExtCount; i++) {
				var entry = relatedExtObjs[i];
				if (bHasPreloaderExt && bHasBeforeLRExt && bHasAfterLRExt && bHasDOMReadyExt && bHasTagScopedExt && bHasAfterTagsExt) { 
					// stop searching if this tag has at least 1 extension in all load order categories
					break; 
				} else if(entry.scope === 'global' && entry.advExecOption === 'alr') {
					bHasAfterLRExt = true;
				} else if(entry.scope === 'global' && entry.advExecOption === 'blr') {
					bHasBeforeLRExt = true;
				} else if(entry.scope === 'global' && entry.advExecOption === 'end') {
					bHasAfterTagsExt = true;
				} else if(entry.scope === 'preload') {
					bHasPreloaderExt = true;
				} else if(entry.scope === 'domready') {
					bHasDOMReadyExt = true;
				} else { // scoped to tag(s)
					bHasTagScopedExt = true;
				}  
			}

			content += '    <div id="' + container + '_extensionsBlock" data-flow="flow_' + container + '" class="contentSection relatedExtensionsSection managedTagContentSection">';
			content += '        <div class="contentSectionTitle">';
			content += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
			content += '            <div class="titleText">' + localize.t('tiq.tags.related_extensions.title') + '</div>';
			content += '            <div class="titleCount">' + relatedExtCount + '</div>';
			content += '			<div id="' + container + '_tooltip_ext_info" original-title="' + localize.t('tiq.tags.related_extensions.tooltip') + '" class="infoIcon tagExtInfo"><a href="#" class="tagExtInfo icon-question-sign"></a></div>';			
			content += '        </div>';
			content += '    	<div class="contentSectionBody">';
			content += '	        <div class="tagExtHeader">';
			content += '					<div class="tagExtHeader-title">' + localize.t('tiq.tags.related_extensions.title_category') + '</div>';
			content += '	        		<div class="tagExtHeader-type">' + localize.t('tiq.tags.related_extensions.type') + '</div>';
			content += '					<div class="tagExtHeader-uid">' + localize.t('tiq.tags.uid') + '</div>';
			content += '			</div>';
			content += '        	<div class="contentSectionBody-content">';
			if(bHasPreloaderExt) {
				content += '			<div class="preLoaderExt extOrder">';
				content += '				<div class="extOrder-category contentBlockTitle">' + localize.t('tiq.tags.related_extensions.preloader') + '</div>';
				content += '			</div>';
			}
			if(bHasBeforeLRExt) {
				content += '			<div class="beforeLRExt extOrder">';
				content += '				<div class="extOrder-category contentBlockTitle">' + localize.t('tiq.tags.related_extensions.before') + '</div>';
				content += '			</div>';
			}
			if(bHasAfterLRExt) {
				content += '			<div class="afterLRExt extOrder">';
				content += '				<div class="extOrder-category contentBlockTitle">' + localize.t('tiq.tags.related_extensions.after') + '</div>';
				content += '			</div>';
			}
			if(bHasDOMReadyExt) {
				content += '			<div class="domReadyExt extOrder">';
				content += '				<div class="extOrder-category contentBlockTitle">' + localize.t('tiq.tags.related_extensions.domready') + '</div>';
				content += '			</div>';
			}
			if(bHasTagScopedExt) {
				content += '			<div class="tagScopedExt extOrder">';
				content += '				<div class="extOrder-category contentBlockTitle">' + localize.t('tiq.tags.related_extensions.tag_scoped') + '</div>';
				content += '			</div>';
			}
			if(bHasAfterTagsExt) {
				content += '			<div class="afterTagsExt extOrder">';
				content += '				<div class="extOrder-category contentBlockTitle">' + localize.t('tiq.tags.related_extensions.after_tags') + '</div>';
				content += '			</div>';
			}			
			content += '			</div>'; // end contentSectionBody-content
			content += '    	</div>'; // end contentSectionBody
			content += '    </div>'; //  end contentSection
			
			tooltipObj[container + '_tooltip_ext_info'] = { gravity: 'ne' };

			$contentContainer.append(content);
			content = '';
		}

		// MAPPED VARIABLES

		if (typeof utui.config.manageList[obj.tag_id].map != 'undefined' && utui.config.manageList[obj.tag_id].map == "true") {
			content += '    <div id="' + container + '_variableMappingBlock" data-flow="flow_' + container + '" class="contentSection mappedVariablesSection managedTagContentSection-varsAndLoadRules managedTagContentSection">';
			content += '        <div class="contentSectionTitle">';
			content += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
			content += '            <div class="titleText">' + localize.t('tiq.tags.mapped_data_sources') + '</div>';
			content += '            <div class="titleCount"></div>';
			content += '            <div class="titleButton"><span id="' + container + '_addMapping" class="' + (importedItem || !canModify ? 'ui-state-disabled ' : ' ') + 'btn btn-small actionMapping i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</span></div>';
			content += '        </div>';

			content += '	    <div class="contentSectionBody">';
			content += '	        <table class="tagMappedTableHeader">';
			content += '				<tr>';
			content += '					<th class="pageVars">' + localize.t('tiq.tags.data_source') + '</th>';
			content += '	        		<th class="tagVars">' + localize.t('tiq.tags.destination') + '</th>';
			content += '				</tr>';
			content += '			</table>';
			content += '	        <div class="contentSectionBodyContent"></div>';
			content += '	    </div>'; // end contentSectionBody
			content += '    </div>'; //  end contentSection

			tooltipObj[container + '_addMapping'] = { gravity: 'ne' }

			content += '    </div>'; //  end contentSection
		}

		// Add Mapped Variables to DOM
		$contentContainer.append(content);


		// Add the history button at the bottom right of the accordion
		$('<div></div>', {
			id: container + '_historyButton',
			'class': 'tagHistoryButton',
			click: function () {
				var $historyBlock = $(this).closest('.contentContainer').find('.historyBlock');

				// Get the history for this tag and insert it into the history block
				$historyBlock.find('.historyContent').html(utui.historyManager.getTagHistoryHTML(obj.id));

				$historyBlock.show().animate({
					right: 0
				});
			}
		}).append('<span><i class="icon-time"></i> ' + localize.t('tiq.tags.view_tag_history') + '</span>').appendTo($contentContainer);

		// Add the not-yet visible history panel
		$('<div></div>', {
			'class': 'historyBlock'
		}).append(
				$('<div></div>', {
					'class': 'historyHeader'
				}).append(
						$('<div/>', {
							'class': 'historyCloseBtn',
							click: function () {
								$(this).closest('.historyBlock').animate({
									right: -290
								}, 180, function () {
									$(this).hide();
								})
							}
						}).text(localize.t('tiq.tags.hide'))
					).append(localize.t('tiq.tags.tag_history'))
			).append(
				$('<div></div>', {
					'class': 'historyContent'
				})
			).appendTo($contentContainer);

		utui.util.addTooltip(tooltipObj);

		utui.manage.addedManage[obj.tag_id] = 1;
		$('#' + container + '_events').buttonset();

		// Add Tag level Action Buttons To Content Container
		// Delete
		$('#' + container + ' .actionDelete').on('click', function () {
			if (!$(this).hasClass("ui-state-disabled")) {
				utui.manage.dropConfirm(container);
			}
		});
		// Copy
		$('#' + container + ' .actionCopy').on('click', function () {
			if (!$(this).hasClass('ui-state-disabled')) {
				utui.manage.copyConfirm(container);
			}
		});

		// Hide / Show appropriate sections
		function toggleSectionOpen(container, objIDremainder, status) {
			var myStatus = 'closed';
			if (status) myStatus = 'open';

			if (status) {
				$('#' + container + objIDremainder + ' .contentSectionBody').show();
				$('#' + container + objIDremainder + ' .contentSectionTitle .titleExpander i').removeClass('icon-caret-right').addClass('icon-caret-down');
			} else {
				$('#' + container + objIDremainder + ' .contentSectionBody').hide();
				$('#' + container + objIDremainder + ' .contentSectionTitle .titleExpander i').addClass('icon-caret-right').removeClass('icon-caret-down');
			}
		}

		//Hide sections by default
		toggleSectionOpen(container, '_settingsBlock', utui.manage.openSectionSummary);

		// Add Clickable Headers to expand/collapse
		// Expand/Collapse All
		$('#' + container + ' .actionExpand').on('click', function () {
			$('.expandAll i').toggleClass('icon-check').toggleClass('icon-check-empty');
			if ($('.expandAll i').hasClass('icon-check')) {
				$('.contentSectionBody').slideDown();
				$('.contentSectionTitle i').addClass('icon-caret-down');
				$('.contentSectionTitle i').removeClass('icon-caret-right');
				$('#' + container + '_advanced_settings .contentBlockSubBody').slideDown();
				$('#' + container + '_optional_settings .contentBlockSubBody').slideDown();
				utui.manage.openSectionSummary = true;
				utui.manage.openSectionLoadRules = true;
				utui.manage.openSectionMapping = true;
			} else {
				$('.contentSectionBody').slideUp();
				$('.contentSectionTitle i').addClass('icon-caret-right');
				$('.contentSectionTitle i').removeClass('icon-caret-down');
				$('#' + container + '_advanced_settings .contentBlockSubBody').slideUp();
				$('#' + container + '_optional_settings .contentBlockSubBody').slideUp();
				utui.manage.openSectionSummary = false;
				utui.manage.openSectionLoadRules = false;
				utui.manage.openSectionMapping = false;
			}
			$('#' + container + '_advanced_settings .contentBlockSubTitle .expander i').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
			$('#' + container + '_optional_settings .contentBlockSubTitle .expander i').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
		});

		utui.manage.labels.renderSingleLabelSelect(obj.id, container);
		utui.manage.labels.redrawLabels(obj.labels, container);

		// Fill Data Values and Assign MouseOver Events
		// Context Menu
		// Help
		var vendorContent,
			vendorShortDescription = '',
			vendorFullDescription = utui.config.manageList[obj.tag_id].description,
			vendorHelpLink = '';

		if (typeof utui.config.manageList[obj.tag_id].helplink != 'undefined') {
			vendorHelpLink += '<p><span class="manage-help-docs-button btn btn-small"><span onClick="utui.help.openCommunityLink(\'' + utui.config.manageList[obj.tag_id].helplink + '\')"><i class="icon-external-link"></i> ' + localize.t('tiq.tags.help_docs') + '</span></span></p>';
		}

		if (vendorFullDescription.length > 165) {
			vendorShortDescription = vendorFullDescription.substring(0, 120);

			vendorContent = vendorShortDescription + '...';
			$('#' + container + '_vendor .contextShowMore').show();
			$('#' + container + '_vendor .contextSectionInfo').html(vendorContent);

			$('#' + container + '_vendor .contextShowMore').on('click', function () {
				vendorContent = vendorHelpLink;
				vendorContent += vendorFullDescription;
				$('#' + container + '_vendor .contextSectionInfo').html(vendorContent);
				$('#' + container + '_vendor .contextShowMore').hide();
			});
		} else {
			vendorContent = vendorHelpLink;
			vendorContent += vendorFullDescription;
			$('#' + container + '_vendor .contextSectionInfo').html(vendorContent);
		}


		// Tips


		if (typeof utui.config.manageList[obj.tag_id].comments !== 'undefined') {
			var myComment = utui.config.manageList[obj.tag_id].comments;
			var regex = /(\b(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[\-A-Z0-9+&@#\/%=~_|])/ig;
			var myLinks = myComment.match(regex);
			var linksLength = 0;
			if (myLinks) {
				for (var i = 0; i < myLinks.length; i++) {
					var myNewLink = '<span class="contextHelpLink" onClick="common.utils.openWindow(\'' + myLinks[i] + '\')"><i class="icon-external-link"></i> ' + localize.t('tiq.tags.link') + '</span>';
					myComment = myComment.replace(myLinks[i], myNewLink);
					linksLength += myNewLink.length;
				}

			}
			if ((myComment.length - linksLength) > 150) {

				var myShortComment = myComment.substring(0, 140);
				$('#' + container + '_tips .contextSectionInfo').html(myShortComment + '...');
				$('#' + container + '_tips .contextShowMore').show();
				$('#' + container + '_tips .contextShowMore').on('click', function () {
					$('#' + container + '_tips .contextSectionInfo').html(myComment);
					$('#' + container + '_tips .contextShowMore').hide();
				});
			} else {
				$('#' + container + '_tips .contextSectionInfo').html(myComment);
			}
		}

		// Locations
		// Highlight the environments that this tag is active in
		var foundEnvironment = false;

		var tmpCustomTargets = [];
		if (obj.publishedTargets) {
			for (var i = 0; i < obj.publishedTargets.length; i++) {
				if (obj.publishedTargets[i] == 'dev') {
					$('#' + container + '_settingsEnvironments .devLabel').addClass('active');
					foundEnvironment = true;
				}
				if (obj.publishedTargets[i] == 'qa') {
					$('#' + container + '_settingsEnvironments .qaLabel').addClass('active');
					foundEnvironment = true;
				}
				if (obj.publishedTargets[i] == 'prod') {
					$('#' + container + '_settingsEnvironments .prodLabel').addClass('active');
					foundEnvironment = true;
				}
				if (utui.targets.isCustom(obj.publishedTargets[i])) {
					$('#' + container + '_settingsEnvironments .customLabel').addClass('active');
					foundEnvironment = true;

					tmpCustomTargets.push(obj.publishedTargets[i]);
				}

			}
		}

		if (!$.isEmptyObject(tmpCustomTargets)) {
			var customTitle = tmpCustomTargets.join(", ");
			$('#' + container + '_settingsEnvironments .customLabel').attr('title', customTitle);

			var customTooltipObj = {};
			customTooltipObj[container + '_settingsEnvironments .customLabel'] = { gravity: 'nw' };
			utui.util.addTooltip(customTooltipObj);
		}


		// Check the filters to see which environments to display
		var devCt = utui.manage.knownPublishedTargets['dev'].length;
		var qaCt = utui.manage.knownPublishedTargets['qa'].length;
		var prodCt = utui.manage.knownPublishedTargets['prod'].length;

		var customCt = 0;
		for (var key in utui.manage.knownPublishedTargets) {
			if (utui.targets.isCustom(key)) {
				customCt += utui.manage.knownPublishedTargets[key].length;
			}
		}

		if (devCt < 1) $('#' + container + '_settingsEnvironments .devLabel').hide();
		if (qaCt < 1) $('#' + container + '_settingsEnvironments .qaLabel').hide();
		if (prodCt < 1) $('#' + container + '_settingsEnvironments .prodLabel').hide();
		if (customCt < 1) $('#' + container + '_settingsEnvironments .customLabel').hide();

		if (devCt < 1 && qaCt < 1 && prodCt < 1 && customCt < 1) $('#' + container + '_settingsEnvironments').hide();

		var currentVersion = utui.data.settings.revision;
		if ((devCt < 1 || qaCt < 1 || prodCt < 1 || customCt < 1) && (currentVersion < utui.constants.dates.TAG_PUBLISH_STATUS)) {
			$('#' + container + '_settingsEnvironments .unpublishedLabel').hide();
		}
		var baseVersion = utui.constants.dates.TAG_PUBLISH_STATUS;
		if ((devCt > 0 && qaCt > 0 && prodCt > 0 && customCt > 0 && foundEnvironment == false) || (foundEnvironment == false && currentVersion > baseVersion)) {
			$('#' + container + '_settingsEnvironments .unpublishedLabel').addClass('active');
			foundEnvironment = true;
		} else {
			$('#' + container + '_settingsEnvironments .unpublishedLabel').hide();
		}


		// Notes
		// Mouse Over Edit
		$('#' + container + '_settingsNotes').on('mouseenter', function () {
			$('#' + container + '_settingsNotes .contentItemButton').toggle();
			$('#' + container + '_settingsNotes .contentItemButtonBar').toggleClass('showButtons');
			$('#' + container + '_settingsNotes .contentItemButtonBar:after').css('display', 'none');
		});
		$('#' + container + ' .actionEditNotes').on('click', function () {
			utui.profile.disposeClickCapture();
			utui.manage.editTagNotes(container);
		});

		// Settings
		// Mouse Over Edit
		$('#' + container + '_settingsGeneral').on('mouseenter', function () {
			$('#' + container + '_settingsGeneral .contentItemButton').toggle();
			$('#' + container + '_settingsGeneral .contentItemButtonBar').toggleClass('showButtons');
			$('#' + container + '_settingsGeneral .contentItemButtonBar:after').css('display', 'none');
		});

		$('#' + container + ' .actionEditSettings').on('click', function () {
			utui.profile.disposeClickCapture();
            var tagging = { action: utui.constants.tagging.TAGGING, resource_type : utui.constants.tags.TYPE.toLowerCase()};
            tagging.tealium_event = utui.constants.tagging.EDIT;
            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);// Don't allow any editing if resource lock is applied and user is not assigned to labels
			if ($(this).hasClass('ui-state-disabled') && !utui.labels.canUserModify(obj.labels)) {
				return;
			}
			if (!importedItem) {
				utui.manage.editTagSettings(container);
			}
			else {
				$.when(utui.manage.editTagSettings(container)).then(function () {
					$('.wizard_tabBody').hide();
					$('#tagProperties').hide();
					$('#tagConfigPublishSettings').hide();
					$('#tagConfigAdvSettings').hide();
					$('#tagNotes').hide();
					$('.tagSettingsNextBtn').hide();
				});
			}
		});


		// Title
		tooltipObj[container + '_tooltip_title'] = { gravity: 'nw' };
		if (obj.title) {
			$('#' + container + '_settingsGeneral_title .contentValue').html(utui.util.safeEscape(obj.title));
			$('#' + container + '_settingsGeneral_title').removeClass('contentTableValueNone');
		}

		// Config Settings

		// Generate Config Settings
		var configField = '';
		var requiredDOM = '';
		var optionalDOM = '';
		var optionalConfigCount = 0;
		if (utui.config.manageList[obj.tag_id].configFields) {
			for (var i = 0; i < utui.config.manageList[obj.tag_id].configFields.length; i++) {
				if (utui.config.manageList[obj.tag_id].configFields[i].type != 'hidden') {
					var label = (typeof utui.config.manageList[obj.tag_id].configFields[i].label != 'undefined') ? utui.config.manageList[obj.tag_id].configFields[i].label : '&nbsp;';
					configField += '<tr>';
					configField += '<td class="contentTableLabel"><div>' + utui.config.manageList[obj.tag_id].configFields[i].label + '</div></td>';
					configField += '<td class="contentTableValue">';
					configField += '<div id="' + container + '_settingsGeneral_config_' + utui.config.manageList[obj.tag_id].configFields[i].id + '" class="contentValueContainer contentTableValueNone">';
					configField += '<div class="contentValue"></div>';
					if (typeof utui.config.manageList[obj.tag_id].configFields[i].tooltip != 'undefined' && utui.config.manageList[obj.tag_id].configFields[i].tooltip != '') {
						configField += '<div id="' + container + '_settingsGeneral_tooltip_' + utui.config.manageList[obj.tag_id].configFields[i].id + '" title="' + utui.config.manageList[obj.tag_id].configFields[i].tooltip + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div>';
						tooltipObj[container + '_settingsGeneral_tooltip_' + utui.config.manageList[obj.tag_id].configFields[i].id] = { gravity: 'w' };
					}
					configField += '</div>';
					configField += '</td>';
					configField += '</tr>';
				}
			}
		}
		$('#' + container + '_vendorconfig_settings').append(configField);


		// Fill in Config Settings
		var configCount = 0,
			objList = utui.util.getVars(obj);
		for (var i in objList) {
			if (i.indexOf('config_') == 0) {
				var configKey = i + '';
				configKey = configKey.replace('config_', '');
				var configValue = obj[i];

				// Iterate through the configureation and get the real property label

				for (var configCt = 0; configCt < utui.config.manageList[obj.tag_id].configFields.length; configCt++) {

					if (utui.config.manageList[obj.tag_id].configFields[configCt].id === configKey) {
						if (utui.config.manageList[obj.tag_id].configFields[configCt].type == 'select') {
							var configOptions = utui.config.manageList[obj.tag_id].configFields[configCt].options;
							for (var prop in configOptions) {
								if (configOptions.hasOwnProperty(prop)) {
									if (configOptions[prop] === obj[i]) {
										configValue = prop;
									}
								}
							}
						}
					}
				}
				if (configValue != '') {
					$('#' + container + '_settingsGeneral_' + i + ' .contentValue').html(utui.util.safeEscape(configValue));
					$('#' + container + '_settingsGeneral_' + i).removeClass('contentTableValueNone');
				} else {
					$('#' + container + '_settingsGeneral_' + i + ' .contentValue').html('&nbsp;');
				}
			}
			configCount++;
		}

		//Display default values for newly added dropdown properties
		var nullConfigOptions = $('[id^=' + container + '_settingsGeneral_config].contentTableValueNone');
		if ("selectedTargets" in obj) { //handle the initial obj state prior to tagwizard completeion. selectTargets doesn't exist yet.
			for (var i = 0; i < nullConfigOptions.length; i++) {
				var nullConfigKey = nullConfigOptions[i].id.split('_')[5];
				var nullConfigValue = '';
				for (var configCt = 0; configCt < utui.config.manageList[obj.tag_id].configFields.length; configCt++) {
					if (utui.config.manageList[obj.tag_id].configFields[configCt].id === nullConfigKey) {
						if (utui.config.manageList[obj.tag_id].configFields[configCt].type == 'select') {
							var configOptions = utui.config.manageList[obj.tag_id].configFields[configCt].options;
							nullConfigValue = configOptions[Object.keys(configOptions)[0]];
						}
					}
				}
				if (nullConfigValue != '') {
					$('.contentValue', nullConfigOptions[i]).html(nullConfigValue);
					$(nullConfigOptions[i]).removeClass('contentTableValueNone');
					var tagObj = utui.manage.containerMap[container];
					var nullConfigProp = 'config_' + nullConfigKey;
					if (!(nullConfigProp in tagObj)) {
						tagObj[nullConfigProp] = nullConfigValue;
					}
				}
			}
		}


		// Optional Settings
		// Mouse Over Edit
		$('#' + container + '_optional_settings .contentBlockSubTitle').on('click', function () {
			$('#' + container + '_optional_settings .contentBlockSubBody').slideToggle();
			$('#' + container + '_optional_settings .contentBlockSubTitle .expander i').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
		});
		// Optional Settings Count
		$('#' + container + '_settings_optional_count').html(optionalConfigCount);
		// Hide Section if no Optional Settings exist
		if (optionalConfigCount < 1) {
			$('#' + container + '_optional_settings').hide();
		}


		// Advanced Settings
		// Mouse Over Edit
		$('#' + container + '_settingsAdv').on('mouseover',function () {
			var editButton = $('#' + container + '_settingsAdv .contentItemButtonBar');
			editButton.show();
		}).on('mouseout', function () {
				var editButton = $('#' + container + '_settingsAdv .contentItemButtonBar');
				editButton.hide();
			});
		$('#' + container + '_settingsAdv .actionEdit').on('click', function () {
			if (!$(this).hasClass("ui-state-disabled")) {
				utui.manage.editTagSettings(container);
			}
		});
		$('#' + container + '_advanced_settings .contentBlockSubTitle').on('click', function () {
			$('#' + container + '_advanced_settings .contentBlockSubBody').slideToggle();
			$('#' + container + '_advanced_settings .contentBlockSubTitle .expander i').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
		});

		// Send Flag
		tooltipObj[container + '_tooltip_send'] = { gravity: 'nw' };
		if (obj.advconfig_send == 'no') {
			$('#' + container + '_settingsAdv_sendFlag i').addClass('icon-ban-circle');
			$('#' + container + '_settingsAdv_sendFlag').append(' Off');
		} else {
			$('#' + container + '_settingsAdv_sendFlag i').addClass('icon-ok');
			$('#' + container + '_settingsAdv_sendFlag').append(' On');
		}
		// Wait Flag
		tooltipObj[container + '_tooltip_wait'] = { gravity: 'nw' };
		if (obj.advconfig_wait == 'no') {
			$('#' + container + '_settingsAdv_waitFlag i').addClass('icon-ban-circle');
			$('#' + container + '_settingsAdv_waitFlag').append(' Off');
		} else {
			$('#' + container + '_settingsAdv_waitFlag i').addClass('icon-ok');
			$('#' + container + '_settingsAdv_waitFlag').append(' On');
		}
		// Bundle Flag
		tooltipObj[container+'_tooltip_bundle'] = { gravity:'nw' };
		if(obj.advconfig_bundle == 'no'){
			$('#'+container+'_settingsAdv_bundleFlag i').addClass('icon-ban-circle');
			$('#'+container+'_settingsAdv_bundleFlag').append(' Off');
		}else{
			$('#'+container+'_settingsAdv_bundleFlag i').addClass('icon-ok');
			$('#'+container+'_settingsAdv_bundleFlag').append(' On');
		}
		// Sync Load
		tooltipObj[container + '_tooltip_loadtype'] = { gravity: 'nw' };
		if (obj.advconfig_loadtype == '2') {
			$('#' + container + '_settingsAdv_syncLoad i').addClass('icon-ok');
			$('#' + container + '_settingsAdv_syncLoad').append(' On');
		} else {
			$('#' + container + '_settingsAdv_syncLoad i').addClass('icon-ban-circle');
			$('#' + container + '_settingsAdv_syncLoad').append(' Off');
		}

		// Custom Src
		tooltipObj[container + '_tooltip_src'] = { gravity: 'nw' };
		if (obj.advconfig_src) {
			$('#' + container + '_settingsAdv_src .contentValue').html(utui.util.safeEscape(obj.advconfig_src));
			$('#' + container + '_settingsAdv_src').removeClass('contentTableValueNone');
		} else {
			$('#' + container + '_settingsAdv_src i').hide();
		}

		// S2S Flag
		if (tagapi.hasActiveS2S() && typeof utui.config.manageList[obj.tag_id].s2sEnabled != 'undefined' && utui.config.manageList[obj.tag_id].s2sEnabled == "true") {
			tooltipObj[container + '_tooltip_s2s'] = { gravity: 'nw' };
			if (obj.advconfig_s2s == 'yes') {
				$('#' + container + '_settingsAdv_s2s i').addClass('icon-ok');
				$('#' + container + '_settingsAdv_s2s').append(' On');
			} else {
				$('#' + container + '_settingsAdv_s2s i').addClass('icon-ban-circle');
				$('#' + container + '_settingsAdv_s2s').append(' Off');
			}
		}

		// Publish Locations
		tooltipObj[container + '_tooltip_locations'] = { gravity: 'nw' };

		// Rare config options
		if (utui.config.manageList[obj.tag_id].load_type) {
			obj.loadtype = utui.config.manageList[obj.tag_id].load_type;
		}
		if (utui.config.manageList[obj.tag_id].load_slot) {
			obj.loadslot = utui.config.manageList[obj.tag_id].load_slot;
		}
		if (utui.config.manageList[obj.tag_id].footer_lib) {
			obj.footerlib = utui.config.manageList[obj.tag_id].footer_lib;
		}
		if (utui.config.manageList[obj.tag_id].footer_embed) {
			obj.footerembed = utui.config.manageList[obj.tag_id].footer_embed;
		}
		if (utui.config.manageList[obj.tag_id].preload_lib) {
			obj.preloadlib = utui.config.manageList[obj.tag_id].preload_lib;
		}

		this.updatePublishedTagLocations(container);

		// Load Rules
		if (typeof obj.loadrule == 'undefined') {
			obj.loadrule = 'all';
		}

		// Construct the conditions for the load rules
		utui.manage.constructLoadRules(container);

		// Click Action - Edit Load Rule Assignments
		$('#' + container + '_loadRulesBlock').off('click.edit').on('click.edit', '.actionEditRules', function () {
			if (!$(this).hasClass("ui-state-disabled")) {
				utui.profile.disposeClickCapture();
				utui.manage.editTagSettings(container, 'loadrules');
			}
		});

		// Mapped Variables
		$('#' + container).off('click.mapping').on('click.mapping', '.actionMapping', function () {
			if (!$(this).hasClass("ui-state-disabled")) {
				utui.profile.disposeClickCapture();
				utui.manage.editTagSettings(container, 'variables');
			}
		});
		if (typeof utui.config.manageList[obj.tag_id].map != 'undefined' && utui.config.manageList[obj.tag_id].map == "true") {
			utui.manage.constructMappedVariables(container);
		}

		if (relatedExtCount > 0) {
			// Extensions
			utui.manage.constructRelatedExtensions(container, relatedExtObjs);

			// Event Handler for extension links
			var onRelatedExtLinkClick = function () {
				var dataKey = '' + $(this).attr('data-key');
				utui.util.pubsub.publish(utui.constants.extensions.FOCUSED, 'customize_content', 'customizations', dataKey, '.container_uid');
			}
			// Bind extension link UI elements
			$('.relatedExtensionsSection').find('.tagExtItem-idAndShortcut-shortcut').safeOn('click', onRelatedExtLinkClick);
			
			// modify the flow 
			$('[data-flow="flow_'+container+'"].managedTagContentSection').wrapAll('<div class="contentFlowManager"></div>');
			$('[data-flow="flow_'+container+'"].managedTagContentSection-varsAndLoadRules').wrapAll('<div class="contentFlowManager-varsAndLoadRules"></div>');
			
			// dynamic scroll bars
			$('#'+container+'_extensionsBlock .extOrder').wrapAll('<div class="scrollContainer-tagExtItem"></div>'); 
			$('#'+container+'_loadRulesBlock .LRsRule').wrapAll('<div class="scrollContainer-LRsRule"></div>');
			$('#'+container+'_variableMappingBlock .tagMappedVar').wrapAll('<div class="scrollContainer-tagMappedVar"></div>');
		}	

		// Assign Tooltips
		utui.util.addTooltip(tooltipObj);

			try {
				if (utui.config.manageList[obj.tag_id].showDataHandler) {
					utui.config.manageList[obj.tag_id].showDataHandler(container);
				}
			} catch (e) {}
		// }

		return container;
	},

	updateItemHeader: function(id, container) {
		var obj = utui.data.manage[id] || {},
			labels = obj.labels,
			$container = $('#'+container+' .contentContainer'),
			content = '';

		$container.find('.main-header').remove();

		if (!utui.labels.canUserModify(labels)) {
			if (!$container.find('.main-header')[0]) {
				content += '      <div class="main-header bg-info">';
				content += '          <div class="section-padded text-center">' + localize.t('tiq.tags.you_cannot_modify_this_tag') + '</div>';
				content += '      </div>';
				$container.prepend(content);
			}
		}
	},

	updatePublishedTagLocations: function (container) {
		var targetsList = utui.targets.getList(null, true);
		var _renderPublishedTagLocations = function (containerId) {
			var tagObj = utui.manage.containerMap[containerId],
				tmpTargets = [],
				tmp = {};

			if (tagObj.selectedTargets) {
				for (var i = 0; i < targetsList.length; i++) {
					var key = targetsList[i],
						target = tagObj.selectedTargets[key];

					// Do NOT add custom target if flag is set
					if (tagObj.isNotAllCustomTargets == 'yes' && utui.targets.isCustom(key) && !target) continue;

					tmp[key] = target;

					if (!$.isEmptyObject(target)) {
						if (target == 'true') {
							tmpTargets.push('<span class="env_alias_' + key + '">' + utui.targets.aliasDisplayName(key) + '</span>');
						}
					} else {
						tmp[key] = 'true';
						tmpTargets.push('<span class="env_alias_' + key + '">' + utui.targets.aliasDisplayName(key) + '</span>');
					}

				}
				tagObj.selectedTargets = tmp;

				$('#' + containerId + '_settingsAdv_locations .contentValue').html(tmpTargets.join(", "));
			}
		};

		// Update one container
		if (container) {
			_renderPublishedTagLocations(container);
		}
		// Update every container
		else {
			for (var key2 in utui.manage.containerMap) {
				_renderPublishedTagLocations(key2);
			}
		}
	},
	copyConfirm:function (container) {
		var self = this;
		$('#dialog').dialog('destroy');
		var content = '';
			content += '<div id="manage_delete_confirm_dialogContent">';
			content += '<div class="dialogError"></div>';
            content += '	<div style="font-weight:bold;">' + localize.t('tiq.tags.copy_dialog.copy_this_tag') + '</div>';
            content += '	<p>' + localize.t('tiq.tags.copy_dialog.a_new_tag_created') + '</p>';
			content += '    <div class="manage_config">';
			content += '        <div id="' + container + '_multiplecopylabel">';
			content += '            <div class="manage_label">' + localize.t('tiq.tags.copy_dialog.number_of_copies') + '</div>';
			content += '            <div class="manage_item">';
			content += '                <input type="text" id="' + container + '_numOfCopies" name="' + container + '_title" value="1" class="manage_numOfCopies" maxlength="100">';
			content += '            </div>';
			content += '        </div>';
			content += '    </div>';
			content += '</div>';//end manage_config

		$('#manage_delete_confirm').html(content);

        $('#manage_delete_confirm').dialog({
            resizable:false,
            height:'auto',
            width:420,
            modal:true,
            draggable: true,
            position:['center', 110],
            show:'blind',
            title:localize.t('tiq.tags.copy_dialog.copy_tag'),
            close:function () {
            }
        });

        $('#manage_delete_confirm').dialog("option", "buttons", [
            { text:localize.t('tiq.tags.copy_dialog.copy_tag'), click:function () {
                var dlg = this,
					$error = $('#manage_delete_confirm_dialogContent').find('.dialogError'),
					$field = $('#'+container+'_numOfCopies'),
					numb = $field.val();

				numb = numb.replace(/[^0-9]/g, '');
				$field.val(numb);

				if (isNaN(numb) || numb == '' || numb == 0) {
					$error.html(localize.t('tiq.tags.copy_dialog.enter_a_valid_number')).slideDown();
					$field.addClass('validation-field-outline');
					return false;

				} else if (numb > 10) {
					$error.html(localize.t('tiq.tags.copy_dialog.can_only_make_copies')).slideDown();
					$field.addClass('validation-field-outline');
					return false;
				}

                self.prepareToCopyItems(container, numb, $(this));
            }},
            { text:localize.t('tiq.dialog.button.cancel'), click:function () {
                $(this).dialog('close')
            }, style:'float:left; margin-left: 12px'}
        ]);
    },
    prepareToCopyItems:function(container, count, $dialog) {
        var self = this;
        utui.util.showSpinner();

		this.getNextTagIdFromServer(count, null, function(providedExistingLastTagId, count, nextTagId) {
				// successfully retrieved nextTagId
				for(var i = nextTagId, j = 0; j < count; i++, j++) {
					utui.manage.copyItem(container, j + 1, i);
				}

				utui.util.hideSpinner();
				$dialog.dialog('close');
			},
			function() {
				// failed to retrieve nextTagId
				for(var j = 0; j < count; j++) {
					utui.manage.copyItem(container, j + 1, self.getNextTagIdFromLocal());
				}

				utui.util.hideSpinner();
				$dialog.dialog('close');
			});
	},
	copyItem:function(container,copyCount, newTagId){
		//Perform a deep copy of a specified loadrule object
		var tagToCopy = $.extend(true, {}, utui.manage.containerMap[container]);
		tagToCopy = utui.profile.import.cleanCopiedItemOfImportInfo(tagToCopy);
		var id;

		if(!newTagId) {
			//locate the next id to assign
			if (typeof utui.data.settings.lastmanageid != 'undefined') {
				this.nextId = utui.util.numericValueOf(utui.data.settings.lastmanageid);
			} else {
				for (var i in utui.util.getVars(utui.data.manage)) {
					i = utui.util.numericValueOf(i);
					if (i > this.nextId)this.nextId = i;
				}
			}
			id = ++this.nextId;
		}
		else {
			id = utui.util.numericValueOf(newTagId);
			utui.data.settings.lastmanageid = id;
			this.nextId = utui.data.settings.lastmanageid + 1;
		}

		// copy all elements from old object into new object
		var newTagObj = {};
		for(var k in tagToCopy) newTagObj[k]=tagToCopy[k];

        // Change object properties that need to be unique or reset

		newTagObj.id = id+'';
		newTagObj._id = id+'';
		newTagObj.copiedFromTag = tagToCopy.id;
		newTagObj.tagTemplateToCopy = tagToCopy.id;
		newTagObj.publishedTargets = [];
		newTagObj.new_flag = 'true';
		// Temporary hack to prevent new S2S tags being created CS : 03/08/17 - 
		if (newTagObj.advconfig_s2s && newTagObj.advconfig_s2s == 'yes'){
			newTagObj.advconfig_s2s='no';
			if (utui.labels.hasLabel('Server to server') && typeof newTagObj.labels !== 'undefined'){
				var ssLabelId = utui.labels.getLabelIdByName('Server to server');
				var lIds = newTagObj.labels.split(',');
				if (lIds.length > 1){
					var nLbls = [];
					for (var i = 0; i<lIds.length; i++) {
						if (lIds[i] != ssLabelId){
							nLbls.push(lIds[i]);
						}
					}
					newTagObj.labels = nLbls.join(',');					
				} else {
					newTagObj.labels = '';
				}
			}	
		}
		
		if(newTagObj.title == ''){
			newTagObj.title = newTagObj.tag_name + ' Copy ' + copyCount;
		} else {
			newTagObj.title = newTagObj.title + ' Copy ' + copyCount;
		}

		utui.manage.addItem(newTagObj,true);
		utui.util.pubsub.publish(utui.constants.tags.COPIED, {action: utui.constants.tags.COPIED, data: newTagObj});
	},
	// This constructs mapped variables in the UI Read Only view
	constructMappedVariables:function (container) {
		var tagObj = utui.manage.containerMap[container],
			tagMapping = utui.util.getVars(tagObj.map, 1),
			customizationData = utui.data.customizations;

		var tagId = tagapi.getTagIdByContainerId(container),
			tagMappings = tagapi.getTagMappingsByTagId(tagId);

		// var getCustomizationType = function() {

		// }

		// for(var key in tagMappings) {

		// }

		if (typeof tagObj.map !== 'undefined') {
			var varCounter = 0;

			for (var i in tagMapping) {
				//correcting variable descriptions for existing mappings

				for (var j in customizationData) {

					if (utui.data.customizations[j].scope == "global" || utui.data.customizations[j].scope == this.containerMap[container].id) {

						var outputStr = exapi.getOutputValues(j),
							outputCollection = [];

						if (outputStr && outputStr.length > 0) {
							var drep = outputStr.replace(", ", ",");
								outputCollection = drep.split(",");

							for (var k = 0; k < outputCollection.length; k++) {
								if (tagObj.map[i].key == outputCollection[k]) {
									tagObj.map[i].type = "customization"+utui.data.customizations[j]._id;
								}
							}

						}

					}

				}
				utui.manage.drawMappedVariable(container, tagObj.map[i])
				varCounter++;
			}
			if(varCounter == 0){
				$('#'+container+'_variableMappingBlock .tagMappedTableHeader').hide();
				$('#'+container+'_variableMappingBlock .contentSectionBody').append('<span class="varItem emptySection">'+localize.t('tiq.tags.copy_dialog.there_are_no_mapped_data_sources')+'</span>');
			}
		}

		$('.tagVars .tagMappedVarItem:first-child').addClass('firstTagVar');
		$('.tagVars .tagMappedVarItem:last-child').addClass('lastTagVar');

		// Place count in section title
		var mapCount = $('#'+container+'_variableMappingBlock').find('.tagMappedVar').length;

		$('#'+container+'_variableMappingBlock').find('.titleCount').html(mapCount);

		// Make section scrollable if there are more than 5 items
		if(mapCount > 5){
			$('#'+container+'_variableMappingBlock .contentSectionBodyContent').addClass('scrollSection');
		}
		if(mapCount == 0){
			$('#'+container+'_variableMappingBlock .tagMappedTableHeader').hide();
		}
	},

	drawMappedVariable:function(container,obj){
		var $varContainer = $('#'+container+'_variableMappingBlock').find('.contentSectionBodyContent'),
			isMissingVar = function(obj) {
				var dataKey;

				if(obj.type && obj.type.indexOf('customization') == 0) {
					dataKey = obj.key;
        } else if(obj.type && obj.type.indexOf('static.') == 0) {
          return;
				}
				else {
					dataKey = obj.type + '.' + obj.key;
				}

				dataKey = dsapi.safeEscapeDataKey(dataKey);

				return !dsapi.isExistingGlobalVariable(dataKey);
			},
			hasDuplicateVar = function(container, obj) {
				var tagId = tagapi.getTagIdByContainerId(container),
					mappings = tagapi.getTagMappingsByTagId(tagId, true),
					count = 0,
					objDataKey,
					mappingDataKey;

				if(obj.type && obj.type.indexOf('customization') == 0) {
					objDataKey = obj.key;
				}
				else {
					objDataKey = obj.type + '.' + obj.key;
				}


				for (var i = 0; i < mappings.length; i++) {

					if(mappings[i].type && mappings[i].type.indexOf('customization') == 0) {
						mappingDataKey = mappings[i].key;
					}
					else {
						mappingDataKey = mappings[i].type + '.' + mappings[i].key;
					}

					if(mappingDataKey === objDataKey) {
						count++;
					}
				};

				return count > 1;
			};


    if (typeof obj === 'undefined') {
			obj = {
				id: utui.manage.containerMap[container].id,
				variable: ''
      };

			var $selectedDataSource = $('#'+container+'_mapselect').find('option:selected'),
				tmp = $selectedDataSource.val().split('.'),
				dsID = $selectedDataSource.attr('data-define'),
				origin_id = $selectedDataSource.attr('data-origin_id');

			obj.type = tmp.shift();
			obj.key = tmp.join('.');

			if (dsID) {
				obj.dsID = dsID;
			}
			if (origin_id) {
				obj.origin_id = origin_id;
			}

			$selectedDataSource.remove();
			var size = $('#' + container + '_mapselect').find('option').length;
			if (size == 0) {
				$('#' + container + '_add').hide();
			}
		}

		var pageVariable = obj.key,
			vendorVariableArr = obj.variable.split(','),
			displayType = obj.type,
			dsObj = utui.data.define[obj.dsID];

		if (obj.dsID && dsObj) {
			// If AudienceStream data source use origin_type instead of type
			if (displayType.indexOf('va') == 0) {
				pageVariable = dsapi.getVADataSourceDisplayName(displayType + '.' + pageVariable);
				displayType = utui.util.converter.getAudienceStreamTypeName(dsObj.settings.origin_type);
			} else if (dsObj.title) {
				pageVariable = dsObj.title;
			}
		}

		var containerRoot = container + '_map_' + utui.util.getContainerId();

		var icon;
		var content = '';
			content += '<div id='+containerRoot+' class="tagMappedVar">';
			content += '    <table class="tagMappedTable"><tr><td class="pageVars">';
			content += '        ';

		if (isMissingVar(obj) || hasDuplicateVar(container, obj)) {
			icon = '<i class="icon-warning-sign"></i> ';
		}
			content += utui.define.getDataSourceMappingItemView(obj, containerRoot, icon);
			content += '    ';
			content += '    </td><td class="tagVars">';
			for(var verArrCt = 0; verArrCt < vendorVariableArr.length; verArrCt++){
				var varText = utui.util.safeEscape(vendorVariableArr[verArrCt]);
				if(varText == ''){
					varText = '<span class="emptyValue"><i class="icon-warning-sign"></i> ' + localize.t('tiq.tags.data_source_not_assigned') + '</span>';
				}
				content += '    <div class="tagMappedVarItem">';
				content += '        <div class="tagMappedVarItemTitle">'+varText+'</div>';
				content += '    </div>';
			}
			content += '    </td></tr></table>';
			content += '</div>';

		content += '    </div><!-- end tagMappedVarBody -->';
		content += '</div>'; // End tagMappedVar

		$varContainer.append(content); // Append the item to the end
		// description tooltip
		$('.managemap_label_readonly').tipsy({gravity: 'e'});
	},

	constructLoadRules:function (container){

		$('#'+container+'_loadRulesBlock .contentSectionBodyContent').empty();

		var myTag = utui.manage.containerMap[container];
		var loadRuleCount = 0;
		var content = '';
		if(typeof myTag.loadrule === 'undefined' || myTag.loadrule == 'all'){
			// all load rules
			content += '   <div class="LRsTitle statusOn">'+localize.t('tiq.tags.all_pages')+'</div>';
			loadRuleCount = 1;
		} else if (myTag.loadrule.indexOf(',') !== -1 || myTag.loadrule == utui.manage.mlrSelVal) {
			// multiple load rules
			if (myTag.loadrule.indexOf(',') !== -1){
				var ruleArray = myTag.loadrule.split(',');
			} else{
				var ruleArray = myTag.multipleLoadRules.split(',');
			}
			for(var ra = 0; ra < ruleArray.length; ra++){
				var myLoadRule = utui.data.loadrules[ruleArray[ra]];
				utui.manage.drawLoadRule(container, myLoadRule);
			}
			// content += '<div>This tag will load on multiple conditions</div>';
		} else{
			var myLoadRule = utui.data.loadrules[myTag.loadrule];
			utui.manage.drawLoadRule(container, myLoadRule);
			 // content += '<div>This tag is a single load rule.</div>';
		}

		$('#'+container+'_loadRulesBlock .contentSectionBodyContent').prepend(content);

		// Count the load rules displayed and put the count in the section title
		if(loadRuleCount == 0){
			loadRuleCount = $('#'+container+'_loadRulesBlock .LRsTitle').length;
		}

		if(this.initComplete) {
			utui.util.pubsub.publish(utui.constants.tags.ACCORDION_EXPANDED, {
				"action" : utui.constants.tags.ACCORDION_EXPANDED,
				"container" : container,
				"id" : myTag.id,
				"tag_id" : myTag.tag_id,
				"tag_name" : utui.config.manageList[myTag.tag_id].title
			});
		}
		$('#'+container+'_loadRulesBlock .titleCount').html(loadRuleCount);
	},
	drawLoadRule:function(container, myLoadRule){
			if(typeof myLoadRule == 'undefined'){
				return false;
			}
			var statusClass = 'statusOn',
				tooltipObj = {},
				triggerKey = 'input_', // value used to be inherited from utui.loadrules .triggerKey;
				dateRangeContent = utui.loadrules.dateRange.toDisplayTime(myLoadRule.startDate, myLoadRule.endDate),
				imported = myLoadRule.imported;

			if(myLoadRule.status != 'active') statusClass = 'statusOff';

            var content = '';
            content += '            <div id="'+container+'_loadrule_'+myLoadRule.id+'" class="LRsRule editable ' + (imported ? 'imported' : '') + '">';
            content += '                <div class="contentItemButtonBar">';
            content += '                    <a href="javascript:void(0);" class="btn btn-small contentItemButton actionEdit' + (imported ? ' ui-state-disabled ' : '') + '"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</a>';
            content += '                </div>';
            content += '                <div class="LRsTitle '+statusClass+'">'+utui.util.safeEscape(myLoadRule.title)+'</div>';

			if (dateRangeContent) {
				content += '<div class="LRdateRangeBlock"><div class="LRsDateRange">' + dateRangeContent + '</div></div>';
			}

			content += '                <div class="LRsConditions">';

			tooltipObj[container+'_loadrule_'+myLoadRule.id+' .actionGo'] = { gravity:'ne' }

            var ruleObj = utui.data.loadrules[myLoadRule.id],
                sizeOfRuleObj = utui.util.sizeOf(ruleObj, function(key) {return !isNaN(key)});
            for(var i = 0; i < sizeOfRuleObj; i++) {
                var ruleFilterObj = {};
                for(var j in utui.util.getVars(ruleObj[i])){
                    if(j.indexOf(triggerKey)==0){
                        var k = j.substring(triggerKey.length);
                        ruleFilterObj[k] = { source: ruleObj[i][j], filter: ruleObj[i]['filter_'+k], operator: ruleObj[i]['operator_'+k] };
                    }
                }
                var ruleContent = [];
	            for (var j in utui.util.getVars(ruleFilterObj, 1)) {
		            ruleContent.push('<div class="LRsSource">' + utui.util.safeEscape(dsapi.getVADataSourceDisplayName(ruleFilterObj[j].source)) + '</div><div class="LRsCase">' + ruleFilterObj[j].operator + '</div><div class="LRsFilter">' + utui.util.safeEscape(ruleFilterObj[j].filter) + '</div>');
	            }
                var label = localize.t('tiq.tags.loadrule_dialog.condition');
                if(parseInt(i) > 0)label = localize.t('tiq.tags.loadrule_dialog.or_condition');

				content += '<div class="LRsORcondition">';
					for(var a=0;a<ruleContent.length; a++){
						content += '<div class="LRsANDcondition">'+ruleContent[a]+'</div>';
					}
				content += '</div>';
			}

			content += '                </div>';
			content += '            </div>';
			$('#'+container+'_loadRulesBlock .contentSectionBodyContent').append(content);
			utui.util.addTooltip(tooltipObj);

			// Mouse Over Edit
				$('#'+container+'_loadrule_'+myLoadRule.id).off().on('mouseenter',function(event) {
					event.stopPropagation();
					$('#'+container+'_loadrule_'+myLoadRule.id+' .contentItemButton').toggle();
					$('#'+container+'_loadrule_'+myLoadRule.id+' .contentItemButtonBar').toggleClass('showButtons');
					$('#'+container+'_loadrule_'+myLoadRule.id+' .contentItemButtonBar:after').css('display','none');
					return false;
				}).on('mouseleave',function(event) {
					event.stopPropagation();
					$('#'+container+'_loadrule_'+myLoadRule.id+' .contentItemButton').toggle();
					$('#'+container+'_loadrule_'+myLoadRule.id+' .contentItemButtonBar').toggleClass('showButtons');
					$('#'+container+'_loadrule_'+myLoadRule.id+' .contentItemButtonBar:after').css('display','block');
					return false;
				});
			// Mouse Click Edit
				$('#'+container+'_loadrule_'+myLoadRule.id+' .actionEdit').off().on('click',function() {
					if (!$(this).hasClass("ui-state-disabled")) {
						// Check if you can modify this loadrule
						if (!utui.labels.canUserModify(myLoadRule.labels)) {
							utui.util.showMsgDialog(localize.t('tiq.tags.loadrule_dialog.you_cannot_modify_loadrule'), '');
							return;
						}

	                    var sv = myLoadRule.id;
	                    utui.loadrules.showEditItem(utui.loadrules.containerLookup(sv), function lrShowEditItemCB() {
	                        // utui.manage.setLoadRules:function (true, '', container);
	                        utui.manage.constructLoadRules(container);
	                        utui.manage.setTitle(container);
	                        return false;
	                    });
		            }
                });
            // Mouse Click Pivot
                $('#'+container+'_loadrule_'+myLoadRule.id+' .actionGo').off().on('click',function() {
                    utui.dashboard.shortcutLink(localize.t('tiq.tags.loadrule_dialog.loadrules_name', {name:myLoadRule.title}));
                    return false;
                });

            utui.util.addTooltip(tooltipObj);
    },

    constructRelatedExtensions: function(container, relatedExtObjs) {
		// empty/reset the extension section
    	$('#'+container+'_extensionsBlock .contentSectionBodyContent').empty();

    	// draw each related extension
    	_.each(relatedExtObjs, function(extensionObj) {
    		utui.manage.drawRelatedExtension(container, extensionObj);
    	});
    },

    drawRelatedExtension: function(container, extObj) {
    	var statusClass,
    		statusText, 
    		extType = exapi.getTemplateObject(extObj.id).title,
    		extId = extObj._id;

		if(extObj.status != 'active') {
			statusClass = 'statusOff';
			statusText = 'Off';
		} else {
			statusClass = 'statusOn';
			statusText = 'On';
		}

    	var content = '';

    	content += '<div id="'+container+'_extension_'+extId+'" data-flow="flow_' + container + '" class="tagExtItem">';
    	content += '	<div class="tagExtItem-status '+statusClass+'">'+statusText+'</div>';
    	content += '	<div class="tagExtItem-title">'+utui.util.safeEscape(extObj.title)+'</div>';
    	content += '	<div class="tagExtItem-type">'+extType+'</div>';	
    	content += '	<div class="tagExtItem-idAndShortcut">';
    	content += '		<div class="tagExtItem-idAndShortcut-id">'+extId+'</div>';
    	content += '		<i data-key="'+extId+'" class="icon-reply tagExtItem-idAndShortcut-shortcut"></i>';
    	content += '	</div>';
		content += '</div>';

		// Append to the appropriate order of execution category
		if(extObj.scope === 'global') {
			if(extObj.advExecOption === 'alr') {
				$('#'+container+'_extensionsBlock .afterLRExt').append(content);
			} else if (extObj.advExecOption === 'blr') {
				$('#'+container+'_extensionsBlock .beforeLRExt').append(content);
			} else if (extObj.advExecOption === 'end') {
				$('#'+container+'_extensionsBlock .afterTagsExt').append(content);
			}
		} else if (extObj.scope === 'preload') {
			$('#'+container+'_extensionsBlock .preLoaderExt').append(content);
		} else if (extObj.scope === 'domready') {
			$('#'+container+'_extensionsBlock .domReadyExt').append(content);
		} else { // scoped specifically to tag(s)
			$('#'+container+'_extensionsBlock .tagScopedExt').append(content);
		}
	
		// when an extension item is hovered, make the previous sibling's border transparent
		$('#'+container+'_extension_'+extId).off().on('mouseenter', function(event) {
			event.stopPropagation();
			$(this).prev('.tagExtItem').toggleClass('extNextSiblingHovered'); 
			return false;
		}).on('mouseleave', function(event) {
			event.stopPropagation();
			$(this).prev('.tagExtItem').toggleClass('extNextSiblingHovered');
			return false;	
		});
    },

    syncMLRtoData:function () {
        for (var mTag in utui.util.getVars(utui.data.manage)) {
            if (utui.data.manage[mTag].loadrule === utui.manage.mlrSelVal) {
                utui.data.manage[mTag].loadrule = utui.data.manage[mTag].multipleLoadRules;
            } else if (utui.data.manage[mTag].loadrule.indexOf(',') === -1) {
                delete utui.data.manage[mTag].multipleLoadRules;
            }
        }
    },

	onCustomTargetsChange:function(event, tagObj) {

		tagObj.isNotAllCustomTargets = 'yes';

		if(event.added) {
			var customTargets = $('#manage_config_custom_targets').val();

			if(event.added.id === 'allCustomTargets') {
				customTargets = ['allCustomTargets'];
				tagObj.isNotAllCustomTargets = null;
			}
			else {
				var allCustomTargetsIdx = $.inArray('allCustomTargets', customTargets);
				if(customTargets.length > 1 &&  allCustomTargetsIdx > -1) {
					customTargets.splice(allCustomTargetsIdx,1);
				}
			}
			$('#manage_config_custom_targets').select2('val', customTargets);
		}

	},

	// ----------------------------------------------------------------
	editTagSettings: function (container, selectedTab) {
		// tabSelection options: 'settings', 'loadrules', 'variables', 'newTag'
		if (selectedTab == 'newTag') {
			utui.manage.newTagFlag = true;
		}

		$('#dialog').dialog('destroy');

		var tagObj = utui.manage.containerMap[container],
			tagID = tagObj,
			tooltipObj = {},
			cFramework = '',
			cSettings = '',
			templateObj = utui.config.manageList[tagObj.tag_id],
			$manageWizardDialog = $('#manage_dialog_wizard');

		if (selectedTab == '') {
			selectedTab = 'settings';
		}

		/*** Framework ***/
			// Display wizard framework with toggle buttons to switch between sections
		cFramework += '     <div class="wizard_tabBody ' + selectedTab + '">';
		cFramework += '         <div id="wizard_config_tab" class="wizard_tab activeTab">';
		cFramework += '             <span class="tab-inline-warning-signal"><i class="icon-warning-sign" style="color:orange;"></i></span>';
		cFramework += '             <h2>' + localize.t('tiq.tags.tag_configuration') + '</h2>';
		cFramework += '             <p>' + localize.t('tiq.tags.configure_your_tag_settings') + '</p>';
		cFramework += '         </div>';

		cFramework += '         <div id="wizard_rules_tab" class="wizard_tab">';
		cFramework += '             <span class="tab-inline-warning-signal"><i class="icon-warning-sign" style="color:orange;"></i></span>';
		cFramework += '             <h2>' + localize.t('tiq.tags.load_rules') + '</h2>';
		cFramework += '             <p>' + localize.t('tiq.tags.conditionally_load_tag') + '</p>';
		cFramework += '         </div>';

		if (typeof templateObj.map != 'undefined' && templateObj.map == "true") {
			cFramework += '         <div id="wizard_variables_tab" class="wizard_tab activeTab">';
			cFramework += '             <span class="tab-inline-warning-signal"><i class="icon-warning-sign" style="color:orange;"></i></span>';
			cFramework += '             <h2>' + localize.t('tiq.tags.data_mappings') + '</h2>';
			cFramework += '             <p>' + localize.t('tiq.tags.fuel_your_tag') + '</p>';
			cFramework += '         </div>';
		}

		cFramework += '     </div>';


		cFramework += '<table class="wizard_table"><tr><td class="wizard_nav">';

		// CONTEXT BOX
		cFramework += '            <div class="tagVendorLogo" style="background:url(\'' + templateObj.logo + '?v=' + utui_version + '\');"></div>';


		if (templateObj.helplink) {
			cFramework += '<a href="#" onClick="utui.help.openCommunityLink(\'' + templateObj.helplink + '\'); return false;" class="manage-help-docs-button btn btn-small"><i class="icon-external-link"></i> ' + localize.t('tiq.tags.help_docs') + '</a>';
		}
		// TIPS
		if (templateObj.comments) {
			cFramework += '                <div id="wizard_tag_tips" class="contextSectionWrapper contextHelp">';
			cFramework += '                    <div class="contextSectionHeader">' + localize.t('tiq.tags.tips') + '</div>';
			cFramework += '                    <div class="contextSectionContent">';
			cFramework += '                        <div class="contextSectionInfo">' + templateObj.description + '</div>';
			cFramework += '                        <div class="contextShowMore">' + localize.t('tiq.tags.show_more') + '</div>';
			cFramework += '                    </div>';
			cFramework += '                </div>';
		}

		cFramework += '</td>';
		cFramework += '<td class="wizard_content_container">';
		cFramework += '     <div class="wizard_content">';
		cFramework += '     </div>';
		cFramework += '</td></tr></table>';

		$manageWizardDialog.html(cFramework);

		// Add tag Tips to wizard
		if (typeof templateObj.comments !== 'undefined') {
			var myComment = templateObj.comments,
				regex = /(\b(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[\-A-Z0-9+&@#\/%=~_|])/ig,
				myLinks = myComment.match(regex),
				linksLength = 0;

			if (myLinks) {
				for (var i = 0; i < myLinks.length; i++) {
					var myNewLink = '<span class="contextHelpLink" onClick="common.utils.openWindow(\'' + myLinks[i] + '\')"><i class="icon-external-link"></i> ' + localize.t('tiq.tags.link') + '</span>';
					myComment = myComment.replace(myLinks[i], myNewLink);
					linksLength += myNewLink.length;
				}

			}

			var $contextSectionInfo = $('#wizard_tag_tips .contextSectionInfo'),
				$contextShowMore = $('#wizard_tag_tips .contextShowMore');
			if ((myComment.length - linksLength) > 400) {
				var myShortComment = myComment.substring(0, 300);

				$contextSectionInfo.html(myShortComment + '...');
				$contextShowMore.show();
				$contextShowMore.on('click', function () {
					$contextSectionInfo.html(myComment);
					$contextShowMore.hide();
				});
			} else {
				$contextSectionInfo.html(myComment);
			}
		}


		/*** Tag Wizard Settings View ***/
		cSettings = '<div id="wizard_config_wrapper">';

		// Tag Identificati
		cSettings += '<div id="tagProperties" class="dialogSection">';
		cSettings += '<div class="dialogSectionHeader">' + localize.t('tiq.tags.properties') + '</div>';
		cSettings += '<div class="dialog_section_body">';
		// Tag Title
		if (templateObj.addMore == "true") {
			cSettings += '    <div class="wizard_config">';
			cSettings += '        <div id="' + container + '_titlelabeledit">';
			cSettings += '            <div class="wizard_label">' + localize.t('tiq.tags.title') + '</div>';
			cSettings += '            <div class="wizard_item">';
			cSettings += $('<input/>')
				.attr({'class': 'wizard_title',
					'id': container + '_title',
					'name': container + '_title',
					'maxlength': '100',
					'onchange': 'utui.manage.setTitle(\'' + container + '\');',
					'type': 'text',
					'value': _.unescape(tagObj.title)
				})[0].outerHTML;
			cSettings += '                <div class="wizard_helpText">' + localize.t('tiq.tags.assign_a_unique_name') + '</div>';
			cSettings += '            </div>';
			cSettings += '        </div>';
			cSettings += '    </div>';//end wizard_config
			tooltipObj[container + '_titlelabeledit_tooltip'] = { gravity: 'w' };
		} else if (typeof templateObj.defaultTitle != 'undefined') {
			cSettings += '    <div class="wizard_config">' + templateObj.defaultTitle + '</div>';
		}

		cSettings += '</div>'; // end dialog body
		cSettings += '</div>'; // end dialog section

		// Tag Configuration
		cSettings += '<div id="tagConfigBasicSettings" class="dialogSection">';
		cSettings += '<div class="dialogSectionHeader">' + localize.t('tiq.tags.vendor_configuration') + '</div>';
		cSettings += '<div class="dialog_section_body">';
		cSettings += '</div>'; // end dialog body
		cSettings += '</div>'; // end dialog section

		// Tag Publish Location Settings
		cSettings += '<div id="tagConfigPublishSettings" class="dialogSection" style="padding-bottom:32px;">';
		cSettings += '<div class="dialogSectionHeader">' + localize.t('tiq.tags.publish_locations') + '</div>';
		cSettings += '<div class="dialog_section_body">';


		// Publish Locations
		var devAliasName = utui.targets.aliasDisplayName('dev'),
			qaAliasName = utui.targets.aliasDisplayName('qa'),
			prodAliasName = utui.targets.aliasDisplayName('prod');

		cSettings += '  <div class="dialogSectionDescription rareUse">' + utui.tooltip.manage.advconfig_locations + '</div>';
		cSettings += '  <div class="wizard_config">';
		cSettings += '      <div class="wizard_label ellipsis" title="' + devAliasName + '">' + localize.t('tiq.tags.publish_to', {env:devAliasName}) + '</div>';
		cSettings += '      <div class="wizard_config_item" id="manage_config_locations_devcontainer">';
		cSettings += '          <input type="radio" id="manage_config_locations_dev1" name="manage_config_locations_dev" value="yes"><label for="manage_config_locations_dev1">' + localize.t('tiq.tags.yes') + '</label>';
		cSettings += '          <input type="radio" id="manage_config_locations_dev2" name="manage_config_locations_dev" value="no"><label for="manage_config_locations_dev2">' + localize.t('tiq.tags.no') + '</label>';
		cSettings += '      </div>';
		cSettings += '  </div>';

		cSettings += '  <div class="wizard_config">';
		cSettings += '      <div class="wizard_label ellipsis" title="' + qaAliasName + '">' + localize.t('tiq.tags.publish_to', {env:qaAliasName}) + '</div>';
		cSettings += '      <div class="wizard_config_item" id="manage_config_locations_qacontainer">';
		cSettings += '          <input type="radio" id="manage_config_locations_qa1" name="manage_config_locations_qa" value="yes"><label for="manage_config_locations_qa1">' + localize.t('tiq.tags.yes') + '</label>';
		cSettings += '          <input type="radio" id="manage_config_locations_qa2" name="manage_config_locations_qa" value="no"><label for="manage_config_locations_qa2">' + localize.t('tiq.tags.no') + '</label>';
		cSettings += '      </div>';
		cSettings += '  </div>';

		cSettings += '  <div class="wizard_config">';
		cSettings += '      <div class="wizard_label ellipsis" title="' + prodAliasName + '">' + localize.t('tiq.tags.publish_to', {env:prodAliasName}) + '</div>';
		cSettings += '      <div class="wizard_config_item" id="manage_config_locations_prodcontainer">';
		cSettings += '          <input type="radio" id="manage_config_locations_prod1" name="manage_config_locations_prod" value="yes"><label for="manage_config_locations_prod1">' + localize.t('tiq.tags.yes') + '</label>';
		cSettings += '          <input type="radio" id="manage_config_locations_prod2" name="manage_config_locations_prod" value="no"><label for="manage_config_locations_prod2">' + localize.t('tiq.tags.no') + '</label>';
		cSettings += '      </div>';
		cSettings += '  </div>';

		if (utui.permissions.isCustomTargetsEnabled()) {
			cSettings += '  <div class="wizard_config">';
			cSettings += '      <div class="wizard_label">' + localize.t('tiq.tags.publish_to_custom') + '</div>';
			cSettings += '      <div class="wizard_config_item" id="manage_config_locations_customcontainer">';
			cSettings += '          <select id="manage_config_custom_targets" class="select2" name="manage_config_locations_custom" multiple="multiple">' + this.getCustomTargetSelectOptions() + '</select>';
			cSettings += '      </div>';
			cSettings += '  </div>';
		}

		cSettings += '</div>'; // end dialog body
		cSettings += '</div>'; // end dialog section

		// Tag Advanced Settings
		cSettings += '<div id="tagConfigAdvSettings" class="dialogSection">';
		cSettings += '<div class="dialogSectionHeader clickable"><i class="icon-caret-right"></i> ' + localize.t('tiq.tags.advanced_settings') + '</div>';
		cSettings += '<div class="dialog_section_body">';
		cSettings += '<div class="dialogSectionDescription rareUse"><i class="icon-warning-sign"></i> ' + localize.t('tiq.tags.changes_to_these_settings') + '</div>';

		// Send Flag
		cSettings += '  <div class="wizard_config">';
		cSettings += '    <div class="wizard_label">' + localize.t('tiq.tags.send_flag') + '</div>';
		cSettings += '    <div class="wizard_config_item" id="manage_advconfig_sendcontainer">';
		cSettings += '      <input type="radio" id="manage_advconfig_send1" name="manage_advconfig_send" value="yes"><label for="manage_advconfig_send1">' + localize.t('tiq.tags.yes') + '</label>';
		cSettings += '      <input type="radio" id="manage_advconfig_send2" name="manage_advconfig_send" value="no"><label for="manage_advconfig_send2">' + localize.t('tiq.tags.no') + '</label>';
		cSettings += '      <div class="wizard_helpText">' + utui.tooltip.manage.advconfig_send + '</div>';
		cSettings += '    </div>';
		cSettings += '  </div>';
		tooltipObj['manage_advconfig_send_tooltip'] = { gravity: 'nw' };

        // Bundle Flag
        cSettings += '  <div class="wizard_config">';
        cSettings += '    <div class="wizard_label">' + localize.t('tiq.tags.bundle_flag') + '</div>';
        cSettings += '    <div class="wizard_config_item" id="manage_advconfig_bundlecontainer">';
        cSettings += '      <input type="radio" id="manage_advconfig_bundle1" name="manage_advconfig_bundle" value="yes"><label for="manage_advconfig_bundle1">' + localize.t('tiq.tags.yes') + '</label>';
        cSettings += '      <input type="radio" id="manage_advconfig_bundle2" name="manage_advconfig_bundle" value="no"><label for="manage_advconfig_bundle2">' + localize.t('tiq.tags.no') + '</label>';
        cSettings += '      <div class="wizard_helpText">' + utui.tooltip.manage.advconfig_bundle + '</div>';
        cSettings += '    </div>';
        cSettings += '  </div>';
        tooltipObj['manage_advconfig_bundle_tooltip'] = { gravity:'nw' };


		// Wait Flag
		cSettings += '  <div class="wizard_config">';
		cSettings += '    <div class="wizard_label">' + localize.t('tiq.tags.wait_flag') + '</div>';
		cSettings += '    <div class="wizard_config_item" id="manage_advconfig_waitcontainer">';
		cSettings += '      <input type="radio" id="manage_advconfig_wait1" name="manage_advconfig_wait" value="yes"><label for="manage_advconfig_wait1">' + localize.t('tiq.tags.yes') + '</label>';
		cSettings += '      <input type="radio" id="manage_advconfig_wait2" name="manage_advconfig_wait" value="no"><label for="manage_advconfig_wait2">' + localize.t('tiq.tags.no') + '</label>';
		cSettings += '      <div class="wizard_helpText">' + utui.tooltip.manage.advconfig_wait + '</div>';
		cSettings += '    </div>';
		cSettings += '  </div>';
		tooltipObj['manage_advconfig_wait_tooltip'] = { gravity: 'nw' };

		// Opt Out
		cSettings += '  <div class="wizard_config" style="display:none;">';
		cSettings += '    <div class="wizard_label">' + localize.t('tiq.tags.opt_out') + '</div>';
		cSettings += '    <div class="wizard_config_item" id="manage_advconfig_optoutcontainer">';
		cSettings += '      <input type="radio" id="manage_advconfig_optout1" name="manage_advconfig_optout" value="yes"><label for="manage_advconfig_optout1">' + localize.t('tiq.tags.yes') + '</label>';
		cSettings += '      <input type="radio" id="manage_advconfig_optout2" name="manage_advconfig_optout" value="no"><label for="manage_advconfig_optout2">' + localize.t('tiq.tags.no') + '</label>';
		cSettings += '      <div class="wizard_helpText">' + utui.tooltip.manage.advconfig_wait + '</div>';
		cSettings += '    </div>';
		cSettings += '  </div>';
		tooltipObj['manage_advconfig_optout_tooltip'] = { gravity: 'nw' };

		// Synchronous Load
		var tagId = utui.manage.containerMap[container].tag_id;
		if (typeof utui.config.manageList[tagId].load_type == 'undefined') {
			cSettings += '  <div class="wizard_config">';
			cSettings += '    <div class="wizard_label">' + localize.t('tiq.tags.synchronous_load') + '</div>';
			cSettings += '    <div class="wizard_config_item" id="manage_advconfig_loadtype">';
			cSettings += '      <input type="radio" id="manage_advconfig_loadtype1" name="manage_advconfig_loadtype" value="yes"><label for="manage_advconfig_loadtype1">' + localize.t('tiq.tags.yes') + '</label>';
			cSettings += '      <input type="radio" id="manage_advconfig_loadtype2" name="manage_advconfig_loadtype" value="no"><label for="manage_advconfig_loadtype2">' + localize.t('tiq.tags.no') + '</label>';
			cSettings += '      <div class="wizard_helpText">' + utui.tooltip.manage.loadtype + '</div>';
			cSettings += '    </div>';
			cSettings += '  </div>';
			tooltipObj['manage_advconfig_loadtype_tooltip'] = { gravity: 'nw' };
		}
		// ServerToServer
		if (tagapi.hasActiveS2S() && typeof utui.config.manageList[tagId].s2sEnabled != 'undefined' && utui.config.manageList[tagId].s2sEnabled == "true") {
			cSettings += '  <div class="wizard_config">';
			cSettings += '    <div class="wizard_label">' + localize.t('tiq.tags.enable_server_to_server') + '</div>';
			cSettings += '    <div class="wizard_config_item" id="manage_advconfig_s2scontainer">';
			cSettings += '      <input type="radio" id="manage_advconfig_s2s1" name="manage_advconfig_s2s" value="yes"><label for="manage_advconfig_s2s1">' + localize.t('tiq.tags.yes') + '</label>';
			cSettings += '      <input type="radio" id="manage_advconfig_s2s2" name="manage_advconfig_s2s" value="no"><label for="manage_advconfig_s2s2">' + localize.t('tiq.tags.no') + '</label>';
			cSettings += '      <div class="wizard_helpText">' + utui.tooltip.manage.advconfig_s2s + '</div>';
			cSettings += '    </div>';
			cSettings += '  </div>';
			cSettings += '  <div class="dialogSectionDescription rareUse">' + localize.t('tiq.tags.to_learn_more_about') + '</div><br>';
			tooltipObj['manage_advconfig_s2s_tooltip'] = { gravity: 'nw' };
		}

		// Custom Src
		cSettings += '  <div class="wizard_config">';
		cSettings += '    <div class="wizard_label">' + localize.t('tiq.tags.custom_script_source') + '</div>';
		cSettings += '    <div class="wizard_config_item" id="manage_advconfig_srccontainer">';
		cSettings += $('<input/>')
			.attr({'id': 'manage_advconfig_src',
				'name': 'manage_advconfig_src',
				'type': 'text',
				'value': _.unescape(tagObj.advconfig_src)
			})
			.css('width', '300px')[0].outerHTML;
		cSettings += '      <div class="wizard_helpText">' + utui.tooltip.manage.advconfig_src + '</div>';
		cSettings += '    </div>';
		cSettings += '  </div>';
		tooltipObj['manage_advconfig_src_tooltip'] = { gravity: 'nw' };


		// Only display if !new_tag (templates aren't visible until saved)
		if (!$('#' + container).data("new_tag")) {
			cSettings += '  <div class="wizard_config">';
			cSettings += '    <div class="wizard_label">';
			cSettings += '      <a href="#" id="manage_advconfig_template_tooltip" class="actionAdvConfigEdit btn btn-small i-color-edit" title="' + utui.tooltip.manage.advconfig_template + '"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit_templates') + '</a>';
			cSettings += '    </div>';
			cSettings += '  </div>';
			tooltipObj['manage_advconfig_template_tooltip'] = { gravity: 'nw' };
		}

		cSettings += '</div>'; // end dialog body
		cSettings += '</div>'; // end dialog section

		// Notes
		var myNotes = '';
		if (typeof tagObj.notes != 'undefined') {
			myNotes = tagObj.notes;
		}
		cSettings += '<div id="tagNotes" class="dialogSection">';
		cSettings += '    <div class="dialogSectionHeader">' + localize.t('tiq.tags.notes') + '</div>'
		cSettings += '    <div class="dialog_section_body" style="padding-left:20px;">';
		cSettings += '        <textarea id="' + container + '_notesInput" name="' + container + '_notesInput" style="height:100px;">' + myNotes + '</textarea>';
		cSettings += '    </div>'
		cSettings += '</div>';

		cSettings += '</div>'; // end wizard_config_wrapper

		$manageWizardDialog.find('.wizard_content').append(cSettings);

		var $manageConfigCustomTargets = $('#manage_config_custom_targets');
		if (utui.permissions.isCustomTargetsEnabled()) {
			$manageConfigCustomTargets.select2();
			$manageConfigCustomTargets.safeBind('change', function (event) {
				utui.manage.onCustomTargetsChange(event, tagObj);
			});
		}


		$('#manage_advconfig_loadtype1').on('click', function () {
			var contentHTML = localize.t('tiq.tags.are_you_sure_use_this_option');

			var _namespace = 'sync_warning';
			if ($('#' + _namespace + '_dialog').length == 0) {
				$('<div />', { id: _namespace + '_dialog' }).prependTo('body');
				$('<div />', { id: _namespace + '_dialogContent' }).appendTo('#' + _namespace + '_dialog');
			}

			$('#' + _namespace + '_dialogContent').html(contentHTML);

			$('#' + _namespace + '_dialog').dialog({
				autoOpen: true,
				height: 'auto',
				width: '480',
				modal: true,
				closeOnEscape: false,
				closeText: '',
				resizable: false,
				draggable: false,
				title: localize.t('tiq.tags.warning'),
				open: function () {
					$(this).parents(".ui-dialog:first").find(".ui-dialog-titlebar-close").remove();
				},
				buttons: {
					'Continue': {
						click: function () {
							$('#manage_advconfig_loadtype1').prop('checked', true);
							$(this).dialog('close');
						},
						text: localize.t('tiq.dialog.button.continue')
					},
					'Cancel': {
						click: function () {
							$('label[for="manage_advconfig_loadtype2"]').trigger('click');
							$(this).dialog('close');
						},
						style: 'float:left; margin-left: 12px',
						text: localize.t('tiq.dialog.button.cancel_selection')
					}
				}
			}).on('dialogclose', function () {
					$(this).remove(); //for using 'x' btn
				});
		});


		// Manage Template click handler
		$manageWizardDialog.find('.actionAdvConfigEdit').on('click', function () {
			// Pass in the tag?
			var map = utui.manage.containerMap["" + container + ""],
				id = map ? map.id : null;

			utui.adminlib.getTemplateList(id);
		});


		// Populate Form with Tag Configuration Settings
		var configDOM = '',
			requiredDOM = '',
			optionalDOM = '',
			optionalCount = 0;

		// Only add the Extract From Code button if this tag is supported!
		if ($.inArray(Number(tagObj.tag_id), utui.account.supported_code_snippet_tags) > -1) {
			// On click, hide all wizard_config except code-snippet-txt
			configDOM = '<div class="wizard_config code-snippet-btn">';
			configDOM += '	<div class="wizard_label"></div>';
			configDOM += '	<div class="wizard_item">';
			configDOM += '		<span id="btn_extract_code" class="btn btn-success" onclick="utui.manage.tagSnippet.showExtractCodeDialog()"><i class="icon icon-magic"></i> ' + localize.t('tiq.tags.extract_from_code') + '</span>';
			configDOM += '		<hr />';
			configDOM += '	</div>';
			configDOM += '</div>';

			// On Extract click, show all wizard_config except code_snipped_txt
			configDOM += '<div class="wizard_config code-snippet-txt">';
			configDOM += '	<div class="wizard_label">';
			configDOM += '		<i class="icon-magic"></i>';
			configDOM += '	</div>';
			configDOM += '	<div class="wizard_item">';
			configDOM += '		<span>' + localize.t('tiq.tags.paste_your_tags_code') + '</span>';
			configDOM += '		<div class="code-snippet-error"></div>';
			configDOM += '		<textarea id="code_snippet_script" placeholder="' + localize.t('tiq.tags.paste_single_tag_snippet') + '" rows="8"></textarea>';
			configDOM += '		<div>';
			configDOM += '			<span id="btn_extract_code_cancel" class="btn" onclick="utui.manage.tagSnippet.hideExtractCodeDialog()">' + localize.t('tiq.tags.cancel') + '</span><span id="btn_extract_code_extract" class="btn" onclick="utui.manage.tagSnippet.onExtractCode(' + container + ',' + tagId + ')">' + localize.t('tiq.tags.extract') + '</span>';
			configDOM += '		</div>';
			configDOM += '	</div>';
			configDOM += '</div>';
		}

		// Tag Config Settings (populate with default values)
		if (templateObj.configFields) {
			for (var i = 0; i < templateObj.configFields.length; i++) {
				var configObj = templateObj.configFields[i],
					label = (typeof configObj.label != 'undefined') ? configObj.label : '&nbsp;',
					size = (typeof configObj.size != 'undefined') ? configObj.size : 32,
					configID = configObj.id,
					configDefault = configObj.defaultVal,
					configVal = (typeof tagObj["config_" + configID] !== 'undefined') ? tagObj["config_" + configID] : (typeof configDefault !== 'undefined') ? configDefault : '';

				if (configObj.type == 'hidden') {
					configDOM += '<input type="hidden" value="' + configVal + '" id="' + container + '_config_' + configID + '" name="' + container + '_config_' + configID + '">';
				} else {
					configDOM += '<div class="wizard_config">';
					configDOM += '<div class="wizard_label">' + configObj.label + '</div>';
					configDOM += '<div class="wizard_item">';
					if (configObj.type == "select") {
						configDOM += '<select id="' + container + '_config_' + configID + '" name="' + container + '_config_' + configID + '"' + ("tagversion" === configID ? 'onchange="utui.manage.editTagversionConfirm(\'' + label + '\');" ' : '') + '>';
						for (var o in configObj.options) {
							if (configObj.options[o] === tagObj["config_" + configID]) {
								configDOM += '<option value=' + configObj.options[o] + ' selected>' + o + '</option>';
							}
							else {
								configDOM += '<option value=' + configObj.options[o] + '>' + o + '</option>';
							}
						}
						configDOM += '</select>';
					} else {
						configDOM += $('<input/>')
							.attr({'id': container + '_config_' + configID,
								'name': container + '_config_' + configID,
								'type': 'text',
								'value': _.unescape(configVal)
							})
							.css('width', size * 4 + 'px;')[0].outerHTML;
					}

					if (typeof configObj.tooltip != 'undefined' && configObj.tooltip != '') {
						configDOM += '      <div class="wizard_helpText">' + configObj.tooltip + '</div>';
					}

					configDOM += '</div>';
					configDOM += '</div>';
				}
			}
		}

		$('#tagConfigBasicSettings').find('.dialog_section_body').append(configDOM);

		var $tagConfigAdvSettings = $('#tagConfigAdvSettings');
		// Expand or Collapse advanced settings
		$tagConfigAdvSettings.find('.dialogSectionHeader').on('click', function () {
			$tagConfigAdvSettings.find('.dialog_section_body').slideToggle({
				duration: 'fast',
				queue: false,
				complete: function () {
					var contentHeight = $('#tagProperties').height();
					contentHeight += $('#tagConfigBasicSettings').height();
					$("#wizard_config_wrapper").animate({scrollTop: contentHeight}, 1000);
				}
			});
			$tagConfigAdvSettings.find('.dialogSectionHeader i').toggleClass('icon-caret-right').toggleClass('icon-caret-down');

		});

		if (typeof templateObj.advanced_config == 'undefined' || templateObj.advanced_config == "false") {
			$tagConfigAdvSettings.hide();
			$('#tagConfigPublishSettings').hide();
		}

		// Fill in utui.config special values such as profiles for Tealium Profile Loader
		try {
			if (templateObj.showDataHandler) {
				templateObj.showDataHandler(container);
			}
		} catch (e) {
		}

		// Fill in Advanced Settings Values
		var check = (tagObj.advconfig_send == 'no') ? 'manage_advconfig_send2' : 'manage_advconfig_send1';
		$('#' + check).prop('checked', true);
		check = (tagObj.advconfig_bundle == 'yes') ? 'manage_advconfig_bundle1' : 'manage_advconfig_bundle2';
		$('#' + check).prop('checked', true);

		check = (tagObj.advconfig_wait == 'no' || $('#' + container + '_advconfig_wait').val() == '0') ? 'manage_advconfig_wait2' : 'manage_advconfig_wait1';
		$('#' + check).prop('checked', true);

		check = (tagObj.advconfig_optout == 'no') ? 'manage_advconfig_optout2' : 'manage_advconfig_optout1';
		$('#' + check).prop('checked', true);

		check = (tagObj.advconfig_loadtype == '2') ? 'manage_advconfig_loadtype1' : 'manage_advconfig_loadtype2';
		$('#' + check).prop('checked', true);

		if (tagapi.hasActiveS2S()) {
			check = (tagObj.advconfig_s2s == 'yes') ? 'manage_advconfig_s2s1' : 'manage_advconfig_s2s2';
			$('#' + check).prop('checked', true);

			$('#manage_advconfig_s2s1').on('click', function () {
				title = localize.t('tiq.tags.s2s_deprecation.block_activation_title');
				message = localize.t('tiq.tags.s2s_deprecation.block_activation_text');

				$("<div><p>" + message + "</p></div>").dialog({
					modal: true,
					closeOnEscape: false,
					closeText: '',
					resizable: false,
					draggable: true,
					title: title,
					buttons: [
						{
							text: localize.t('tiq.dialog.button.close'),
							id: 's2sBlockActivation_dialog_closeBtn',
							click: function() {
								$('#manage_advconfig_s2s1').prop('checked', false);
								$('#manage_advconfig_s2s1').button('refresh');
								$('#manage_advconfig_s2s2').prop('checked', true);
								$('#manage_advconfig_s2s2').button('refresh');								
								$(this).dialog('close');
							}
						}
					]
				});				
			});			
		} 

		// Fill in Publish Location Settings Values
		tagObj.selectedTargets = tagObj.selectedTargets || {};
		check = (tagObj.selectedTargets.dev == 'false') ? 'manage_config_locations_dev2' : 'manage_config_locations_dev1';
		$('#' + check).prop("checked", true);

		check = (tagObj.selectedTargets.qa == 'false') ? 'manage_config_locations_qa2' : 'manage_config_locations_qa1';
		$('#' + check).prop("checked", true);

		check = (tagObj.selectedTargets.prod == 'false') ? 'manage_config_locations_prod2' : 'manage_config_locations_prod1';
		$('#' + check).prop("checked", true);

		if (utui.permissions.isCustomTargetsEnabled()) {
			// Fetch all custom targets in this tag's object
			var customTargetsArr = [];
			for (var env in tagObj.selectedTargets) {
				if (utui.targets.isCustom(env)) {
					customTargetsArr.push(env);
				}
			}

			// If we've added a new tag at any time without previously modifying it before, append all custom targets into array
			if (utui.manage.newTagFlag) {
				customTargetsArr = utui.targets.getList('custom') || [];
			}

			if (utui.targets.getList('custom') && (customTargetsArr.sort().toString() == utui.targets.getList('custom').sort().toString())) {
				$manageConfigCustomTargets.select2('val', 'allCustomTargets');
			}
			else {
				$manageConfigCustomTargets.select2('val', customTargetsArr);
			}
		}

		$('#manage_advconfig_sendcontainer').buttonset();
		$('#manage_advconfig_bundlecontainer').buttonset();
		$('#manage_advconfig_waitcontainer').buttonset();
		$('#manage_advconfig_optoutcontainer').buttonset();
		$('#manage_advconfig_loadtype').buttonset();
		$('#manage_config_locations_devcontainer').buttonset();
		$('#manage_config_locations_qacontainer').buttonset();
		$('#manage_config_locations_prodcontainer').buttonset();
		if (tagapi.hasActiveS2S()) {
			$('#manage_advconfig_s2scontainer').buttonset();	
		}


		utui.util.addTooltip(tooltipObj);

		/*** End Tag Wizard - Settings View ***/

		/*** Tag Wizard - Load Rules View ***/

		// add load rule container
		$manageWizardDialog.find('.wizard_content').append('<div id="wizard_rules_wrapper"></div>');

		// externalized rendering for load rule panel
		utui.manage.wizard_loadrulePanel.init(container);

		/*** End Tag Wizard - Load Rules View ***/

		// ------------------------------
		var _dataMappingPanel = function() {

			var _container = '';

			var _tagObj = {};

			var _view = {
				header: function(tagObj) {
					var v = '';
						v += '<div id="wizard_variables_wrapper">';
						v += '     <div class="wizardHeader">';
						v += '       <table class="wizardHeaderTable">';
						v += '         <tr>';
						v += '           <td class="loadRulesHeaderTableLeft">';
						v += '             <div id="' + container + '_add">'+localize.t('tiq.tags.data_sources')+' ';
            v += '               <select style="width:303px; margin-right:10px" class="variableSelect" id="' + container + '_mapselect" name="' + container + '_mapselect" data-list-type="manage"></select>';
						v += '               <span class="btn btn-small actionAddMapping i-color-add"><i class="icon-plus"></i> '+localize.t('tiq.tags.select_destination')+'</span>';
						v += '             </div>';
						v += '           </td>';
						v += '         </tr>';
						v += '       </table>';
						v += '       <div class="noItemsToShow noItemsMapVariable">';
						v += '         <span>'+localize.t('tiq.tags.optionally_add_mapping')+'</span>';
						v += '         <i class="icon-hand-up"></i>';
						v += '       </div>';
						v += '     </div>';
						v += '    <input type="hidden" id="manage_editmapping_id" name="manage_editmapping_id" value="' + tagObj.id + '">';
						v += '    <ul id="' + container + '_mapcontent" class="variable_map_container"></ul>';
						v += '</div>'; // end wizard_rules_wrapper
					return v;
				}
			};

			var _eventHandler = {
				onAddMappingBtnClick: function(e) {
					utui.manage.addMapping(_container, '', true, true);
				},
				onDefineAndMapNewDataSourceClick: function(e) {
					utui.profile.disposeClickCapture();
					utui.define.showAddMore('newvariable', '', '', 'tagWizard', function (isValid) {
						if (isValid) {
							utui.manage.onDefineAndMapNewDataSource(_container);
						}
					});
				}
			};

			var _viewModel = {
				renderMappingList: function() {
					var $mapSelect = $('#' + _container + '_mapselect'),
						tagId = tagapi.getTagIdByContainerId(_container),
						validationMap = utui.validation.getMap('manage',tagId) || [],
						dependentVarStack = validationMap.map(function(entryObj) { return entryObj.reference }),
						duplicateStack = validationMap,
						_constants = {
							CUSTOMIZATION: 'customization',
							GLOBAL: 'global',
							UNDEFINED: 'undefined'
						},
						isInvalid = false,
						customizationsMap = {},
						dataKey;

					// Populate Selection Dropdown
					$mapSelect.empty().html(utui.manage.createMappingSelect(_container));
          dsapi.convertSelectListToSelect2(_container + '_mapselect', null, true, _container, true);

					// Print out list of variables assigned to the Tag
					var tagObj = utui.manage.containerMap[_container];
					if (typeof tagObj.map != _constants.UNDEFINED) {
						// Create customization map for quick lookup
						for (j in utui.data.customizations) {
							if (utui.data.customizations[j].scope == _constants.GLOBAL || utui.data.customizations[j].scope == utui.manage.containerMap[_container].id) {
								var d = utui.data.customizations[j].output,
									outputs = [];
								if (d && d.length > 0) {
									var drep = d.replace(", ", ",");
									outputs = drep.split(",");
									for (k = 0; k < outputs.length; k++) {
										customizationsMap[outputs[k]] = _constants.CUSTOMIZATION + utui.data.customizations[j]._id;
									}
								}
							}
						};

						for (var i in utui.util.getVars(tagObj.map, 1)) {
							isInvalid = false;

							//correcting variable descriptions for existing mappings
							if (customizationsMap[tagObj.map[i].key]) {
								tagObj.map[i].type = customizationsMap[tagObj.map[i].key];
							}

              utui.manage.addMapping(_container, tagObj.map[i], false, isInvalid, tagObj.map[i].type.indexOf('static.') === 0);
						};
					}
				}
			};

			// PUBLIC
			// ----------------------------------------
			return {
				init: function(container, tagObj) {
					_container = container;
					_tagObj = tagObj;

					this.render();
				},
				render: function() {
					$('#manage_dialog_wizard').find('.wizard_content').append( _view.header(_tagObj) );

					// ----------------------------------------
					$('#wizard_variables_wrapper').find('.actionAddMapping').safeOn('click', _eventHandler.onAddMappingBtnClick);
					$('#wizard_variables_wrapper').find('.actionNewVariable').safeOn('click', _eventHandler.onDefineAndMapNewDataSourceClick);

					// Print out the list of Variables for the tag
					_viewModel.renderMappingList();
				}
			};

		}();

		// init and render mapping pannel
		_dataMappingPanel.init(container, tagObj);


		/*** End Tag Wizard - Mapped Variables View ***/

		// Add listeners to the tabs to display the appropriate section when clicked
		$('#wizard_config_tab').safeBind('click', function () {
			utui.manage.wizard_resetAllSections();
			$('#wizard_config_wrapper').show();
			$('#wizard_config_tab').addClass('activeTab');
			if (utui.manage.newTagFlag) {
				$('.tagSettingsNextBtn').show();
				$('.tagSettingsFinishBtn').show();
			}
		});

		$('#wizard_rules_tab').safeBind('click', function () {
			utui.manage.wizard_resetAllSections();
			$('#wizard_rules_wrapper').show();
			$('#wizard_rules_tab').addClass('activeTab');

			if (!$('#wizard_variables_tab').doesExist()) {
				$('#wizard_rules_tab').addClass('activeTabLast'); //last tab so remove chevron
			}

			$('#wizard_rules_wrapper').addClass('wizard_wrapper_active');
			if (utui.manage.newTagFlag) {
				if ($('#wizard_variables_tab').is(':visible')) {
					$('.tagSettingsNextBtn').show();
					$('.tagSettingsFinishBtn').show();
				} else {
					$('.tagSettingsNextBtn').hide();
					$('.tagSettingsFinishBtn').show();
				}
			}
		});
		$('#wizard_variables_tab').safeBind('click', function () {
			utui.manage.wizard_resetAllSections();
			$('#wizard_variables_wrapper').show();
			$('#wizard_variables_tab').addClass('activeTab activeTabLast'); //last tab, remove chevron
			if (utui.manage.newTagFlag) {
				$('.tagSettingsNextBtn').hide();
				$('.tagSettingsFinishBtn').show();
			}
		});

		// Make visible the section (selectedTab) passed to the editTagSettings function
		utui.manage.wizard_resetAllSections();

		if (selectedTab == 'variables') {
			$('#wizard_variables_wrapper').show();
			$('#wizard_variables_tab').addClass('activeTab');
		} else if (selectedTab == 'loadrules') {
			$('#wizard_rules_wrapper').show();
			$('#wizard_rules_tab').addClass('activeTab');
		} else {
			$('#wizard_config_wrapper').show();
			$('#wizard_config_tab').addClass('activeTab');
		}

		// Set dialog title
		var dialogTitle = localize.t('tiq.tags.tag_settings');
		if (typeof utui.manage.containerMap[container].tag_name != 'undefined') {
			dialogTitle = localize.t('tiq.tags.tag_settings_tag', {tag:utui.manage.containerMap[container].tag_name});
		}
		if (utui.manage.containerMap[container].title != '') {
			dialogTitle += ': ' + utui.util.safeEscape(utui.manage.containerMap[container].title);
		}

		var applyBtnAction = function(tagId, containerId) {
			var tagObj = {};

			utui.manage.editTagSettingsHandler(containerId);

			// Remove existing validation (it will be re-evaluated after save)
			utui.validation.removeInstanceByTypeAndId('manage',tagId);

			// do data model check
			utui.validation.runValidationOnAllTabs();

			tagObj = utui.manage.containerMap[containerId];

			utui.manage.setTitle(containerId);

			utui.profile.setActionPerformed({
				action: utui.constants.tags.UPDATED,
				data: {
					id: tagObj.id,
					tag_name: tagObj.tag_name || utui.util.getTagNameFromTagId(tagObj.tag_id),
					name: tagObj.title,
					kind: utui.constants.tags.TYPE,
					operation: utui.constants.operation.UPDATED,
					container: containerId
				}
			}, true);

			utui.manage.newTagFlag = false;
			utui.manage.saveData();

            utui.util.pubsub.publish(utui.constants.tags.UPDATED, {
                action: utui.constants.tags.UPDATED,
                data: {
                    id: tagObj.id,
                    tag_name: tagObj.tag_name || utui.util.getTagNameFromTagId(tagObj.tag_id),
                    name: tagObj.title
                }
            });
            var tagging = tagapi.createTaggingObject(tagObj);

            if ($('#editTagSettings_dialog_finishBtn').text() === 'Apply') {
                tagging.tealium_event = utui.constants.tagging.EDIT_COMPLETED;
            } else {
                tagging.tealium_event = utui.constants.tagging.CREATED_COMPLETED;
            }

            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);
		};

		$manageWizardDialog.dialog({
			dialogClass: "dialog-edit_tag",
			resizable: false,
			modal: true,
			draggable: true,
			position: ['center', 110],
			title: dialogTitle,
			buttons: [
				{
					text: localize.t('tiq.dialog.button.finish'),
					id: 'editTagSettings_dialog_finishBtn',
					class: 'tagSettingsFinishBtn',
					click: function () {

						var containerId = container;
						var tagId = tagapi.getTagIdByContainerId(containerId);

						// If validation is present, caution user...
						if(utui.validation.hasUnresolvedDependency('manage', tagId)) {
							var tagErrors = utui.validation.getMap('manage', tagId);

							for (var i = 0; i < tagErrors.length; i++) {
								if(~tagErrors[i].key.indexOf('loadrule:')) {
									utui.manage.confirmDiscardMissingRuleDialog.show(tagId, containerId, applyBtnAction, this);
									return; // Show confirmation and do not save
								}
							};
						}

						applyBtnAction(tagId, containerId);
						$(this).dialog("close");

					},
					style: 'display:inline-block'
				},
				{
					text: localize.t('tiq.dialog.button.next'),
					id: 'editTagSettings_dialog_nextBtn',
					class: 'tagSettingsNextBtn',
					click: function () {
						var myTabs = $('#manage_dialog_wizard .wizard_tabBody div').map(function () {
							return this.id
						}).get();
						var myCurrentTab = $('#manage_dialog_wizard .wizard_tabBody div.activeTab').attr('id');
						var myCurrentTabPosition = $('#manage_dialog_wizard .wizard_tabBody div').index($('#' + myCurrentTab));
						var myTabCount = myTabs.length;

						var nextTabPosition = myCurrentTabPosition + 1;
						if (nextTabPosition == myTabs.length) {
							nextTabPosition = 0;
						}

						var nextTabID = myTabs[nextTabPosition];
						var baseTabID = nextTabID.replace('_tab', '');

						utui.manage.wizard_resetAllSections();
						$('#' + baseTabID + '_wrapper').show();
						var tabEle = $('#' + baseTabID + '_tab');
						tabEle.addClass('activeTab');
						if (nextTabPosition == myTabCount - 1) { //last tab
							tabEle.addClass('activeTabLast');
						}

						function showNext() {
							$('.tagSettingsNextBtn').show();
							$('.tagSettingsFinishBtn').show();
						}

						function showFinish() {
							$('.tagSettingsNextBtn').hide();
							$('.tagSettingsFinishBtn').show();
						}

						// If new Tag...
						if (utui.manage.newTagFlag) {
							// If tab position is "variables"
							if (nextTabPosition == myTabCount - 1) {
								showFinish()
							} else {
								showNext()
							}
						} else { // if dialog initialized via "edit"
							showFinish();
						}
					}
				},
				{
					text: localize.t('tiq.dialog.button.cancel'),
					id: 'editTagSettings_dialog_cancelBtn',
					class: 'tagSettingsCancelBtn',
					click: function () {
						$(this).dialog('close');
						if (selectedTab == 'newTag') {
                            var tagging = { action: utui.constants.tagging.TAGGING, resource_type : utui.constants.tags.TYPE.toLowerCase()};
							tagging.tealium_event = utui.constants.tagging.CREATED_CANCEL;
                            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);utui.manage.drop(container, []);
							utui.manage.updateAccordion(false);
							utui.manage.updateSortOrder();
							utui.loadrules.updateAllLRTags();
							utui.validation.runValidationOnAllTabs();
						}
					},
					style: 'float:left;'
				}
			],
			close: function () {
				utui.manage.newTagFlag = false;
				utui.manage._cachedOptions = undefined;
			},
			open: function () {
				if (!utui.manage.newTagFlag) {
					$('.tagSettingsFinishBtn').show();
					$('.tagSettingsNextBtn').hide();
					$('.tagSettingsFinishBtn span').html('Apply');
					$('#' + container + '_title').focus();
				}
			}
		});
	},
	wizard_loadrulePanel: function() {
		// ------------------------------
		var _tagObj = {};
		var _tagId;
		var _containerId;

		// ------------------------------
		var $manageWizardDialog = $('#manage_dialog_wizard');

		// ------------------------------
		var loadRuleList = utui.data.loadrules;

		// ------------------------------
		var _util = {
			// ------------------------------
			hasMissingLoadRules: function(tagId) {
				return utui.validation.getMap('manage',tagId) && utui.validation.getMap('manage',tagId).filter(function(obj) { return obj.key.indexOf('loadrule') === 0 }).length;
			},
			// ------------------------------
			getMissingLoadRulesCollection: function(tagId) {
				return utui.validation.getMap('manage',tagId).filter(function(obj) { return obj.key.indexOf('loadrule') === 0 });
			}
		};

		// ------------------------------
		var _view = {
			// ------------------------------
			panelLayout: function() {
				var v = '';
				var checkedStatus = '';
				var checkedClass = 'icon-check-empty';

				if (_tagObj.loadrule == 'all') {
					checkedStatus = ' checked="checked"';
					checkedClass = ' icon-check';
				}

				// Print Load Rules header
				v += '<div class="wizardMessageBox">';
				v += '</div>';
				v += '<div class="wizardHeader">';
				v += '  <table class="wizardHeaderTable"><tr><td class="loadRulesHeaderTableLeft">';
				v += '    <div id="loadRuleAll">';
				v += '       <div class="loadRuleAllCheck"><input type="checkbox" ' + checkedStatus + ' name="loadRuleAll" value="statusActive"><i class="' + checkedClass + '"></i></div>';
				v += '       <div class="loadRuleAllTitle">'+localize.t('tiq.tags.load_on_all_pages')+'</div>';
				v += '    </div>';

				if(_util.hasMissingLoadRules(_tagId)) {
					v += '    <div id="loadRuleMissingDisclaimer" style="display: inline-block; border: 1px solid orange; border-radius: 3px; position: absolute; top: 8px; left: 184px; padding: 2px 16px; box-sizing: border-box;" class="bg-warning"></div>';
				}

				v += '  </td><td class="loadRulesHeaderTableRight">';
				v += '     <span class="btn btn-mini actionNewRule i-color-add"><i class="icon-plus"></i> Create Rule</span>';
				v += '  </td></tr></table>';
				v += '  <div class="noItemsToShow noItemsLoadRule">';
				v += '    <span>'+localize.t('tiq.tags.choose_load_on_all_pages')+'</span>';
				v += '    <i class="icon-hand-up"></i>';
				v += '  </div>';
				v += '</div>';

				v += '<div class="loadRuleList">';
				// List of load rules goes here
				v += '</div>';

				return v;
			}
		};

		// ------------------------------
		var _viewModel = {
			// ------------------------------
			renderPanel: function() {

				// Inject view
				$('#wizard_rules_wrapper').html( _view.panelLayout() );

				// render validation
				if(_util.hasMissingLoadRules(_tagId)) {
					var missingLoadruleCollection = _util.getMissingLoadRulesCollection(_tagId);
					var missingLoadruleCount = missingLoadruleCollection.length;
					var missingWithReference = _util.getMissingLoadRulesCollection(_tagId).filter(function(a) { return a.reference; });

					if(missingWithReference.length > 0) {
						var msg = localize.t('tiq.tags.validation.missing_loadrules', { count: missingLoadruleCount, lr: (missingLoadruleCount > 1 ? localize.t('tiq.tags.validation.loadrules') : localize.t('tiq.tags.validation.loadrule') ) })+' <span class="btn btn-mini" id="'+'reviewLoadRuleMissingBtn'+'" style="margin-left:8px;">'+localize.t('tiq.tags.validation.review')+'</span>';
					} else {
						var msg = localize.t('tiq.tags.validation.missing_loadrules', { count: missingLoadruleCount, lr: (missingLoadruleCount > 1 ? localize.t('tiq.tags.validation.loadrules') : localize.t('tiq.tags.validation.loadrule') ) }) + ' <span class="btn btn-mini" id="'+'dismissMissingLoadRuleBtn'+'" style="margin-left:8px;">'+localize.t('tiq.tags.validation.dismiss')+'</span>';
					}

					$('#loadRuleMissingDisclaimer').html(msg);

					// bind dialog
					$('#reviewLoadRuleMissingBtn').on('click', function(e) {
						utui.manage.restoreLoadRuleDialog.show(_tagId);
					});
					$('#dismissMissingLoadRuleBtn').on('click', function(e) {
						var errorsCollection = utui.validation.getMap('manage', _tagId);
						var key;

						// Remove missing LRs...
						for (var i = errorsCollection.length - 1; i >= 0; i--) {
							key = errorsCollection[i].key;

							if (key.indexOf('loadrule') === 0) {
								utui.validation.removeKeyFromInstanceId('manage', _tagId, key);
							}
						};

						$('#loadRuleMissingDisclaimer').remove();
					});
				}

				// Print out the list of Load Rules for the tag
				utui.manage.wizard_LoadRules_printList(_containerId);

				var $allPagesCheckbox = $('#loadRuleAll').find('input[type=checkbox]');

				// Bind 'All Pages' option to toggle
				$allPagesCheckbox.safeBind('click', function (event) {
					var $el = $(this);

					if ($el.prop("checked")) {
						$('#manage_dialog_wizard').find('.loadRuleList').find('input[type=checkbox]').prop('checked', false);
					} else {
						$el.prop('checked', true);
					}

					utui.manage.wizard_LoadRules_setMLRmessage();
				});

				// Bind 'Create New Rule' button
				$('#wizard_rules_wrapper').find('.actionNewRule').on('click', function () {
					utui.profile.disposeClickCapture();

					utui.loadrules.view.showAddMore('create', function (obj) {
						utui.manage.wizard_LoadRules_printRuleHeader(_containerId, obj.loadruleid, true);
						utui.manage.wizard_LoadRules_expandRule(_containerId, obj.loadruleid);
					})
				});
			}
		};

		// ------------------------------
		function render() {
			_viewModel.renderPanel();
		}

		// ------------------------------
		return {
			// ------------------------------
			init: function(container) {
				_tagObj = utui.manage.containerMap[container];
				_tagId = tagapi.getTagIdByContainerId(container);
				_containerId = container;

				render();
			}
		}
	}(),
	wizard_resetAllSections:function () {
		$('#wizard_config_wrapper').hide();
		$('#wizard_rules_wrapper').hide();
		$('#wizard_variables_wrapper').hide();
		$('#wizard_config_tab').removeClass('activeTab');
		$('#wizard_rules_tab').removeClass('activeTab');
		$('#wizard_variables_tab').removeClass('activeTab');
	},
	// ----------------------------------------------------------------
	onDefineAndMapNewDataSource: function (container) {
		var lastAddedVars = utui.define.lastAdded;

		// For each new page variable autoselect and add the new variable to the list
		for (var i in utui.util.getVars(lastAddedVars, 1)) {
			var ds = lastAddedVars[i];

			// Add Mapping to new page variable
			utui.manage.addMapping(container, {type: ds.type, key: ds.name}, true);
		}
	},
	wizard_LoadRules_setMLRmessage:function(){
		var checkedLoadRulesCount = $('#manage_dialog_wizard .loadRuleList input:checked').length;

		// Add message if load rule is disabled from being selected
		if(checkedLoadRulesCount > 1){
			if($('#manage_dialog_wizard .messageMultipleLoadRules').length < 1){
				$('#manage_dialog_wizard .wizardMessageBox').append('<div class="message messageMultipleLoadRules">' + localize.t('tiq.tags.tag_will_only_trigger') + '</div>');
				utui.manage.wizard_LoadRules_resetHeight();
			}
			$('#manage_dialog_wizard .wizardMessageBox .mlrCount').html(checkedLoadRulesCount);
		} else {
			if($('#manage_dialog_wizard .messageMultipleLoadRules').length > 0){
				$('#manage_dialog_wizard .messageMultipleLoadRules').remove();
				utui.manage.wizard_LoadRules_resetHeight();
			}
		}
	},
	// ----------------------------------------------------------------
	wizard_LoadRules_resetHeight: function () {
		var $manageDialogWizard = $('#manage_dialog_wizard'),
			$wizardMessageBox = $manageDialogWizard.find('.wizardMessageBox'),
			$loadRuleList = $manageDialogWizard.find('.loadRuleList'),
			messageLineHeight = $wizardMessageBox.css('line-height').replace('px', ''),
			messageCount = $wizardMessageBox.find('div.message').length,
			messageBoxHeight = (messageLineHeight * messageCount),
			loadRuleListMaxHeight = $loadRuleList.css('max-height').replace('px', ''),
			newLRlistHeight = loadRuleListMaxHeight - messageBoxHeight;

		if (messageCount > 0) {
			$wizardMessageBox.show();
		}

		$loadRuleList.css('height', newLRlistHeight + 'px');
	},
	// ----------------------------------------------------------------
	wizard_LoadRules_printList: function (container) {
		var loadrules = utui.data.loadrules;

		// sort by title
		var sortedLoadrules = _.sortBy(_.toArray(loadrules), function (option) {
			return option.title.toLowerCase();
		});

		// Print out list of all current load rules in the wizard Load Rules view
		var numLoadrules = sortedLoadrules.length;
		for (i = 0; i < numLoadrules; i++) {
			utui.manage.wizard_LoadRules_printRuleHeader(container, sortedLoadrules[i].id, false);
		}

		// Display multiple load rule message if appropriate
		utui.manage.wizard_LoadRules_setMLRmessage();

		// Hide 'Create A Load Rule' text if load rules exist
		if (numLoadrules > 0) {
			$('#manage_dialog_wizard').find('.noItemsLoadRule').hide();
		}
	},
	wizard_LoadRules_expandRule:function(container, myLoadRuleID, bExpand){

		var clickedItemID = 'loadRuleItem_'+myLoadRuleID;

		$("#manage_dialog_wizard").find(".loadRuleListItem.expandedLR").each(function(){
			if($(this).attr('ID') != clickedItemID){
				$(this).find('.loadRuleListItemContent').slideUp();
				$(this).removeClass('expandedLR');
			}
		});

		// Populate the Load Rule with content
		utui.manage.wizard_LoadRules_printRuleContent(container,myLoadRuleID);

		if(bExpand){
			$('#'+clickedItemID+' .loadRuleListItemContent').show();
			$('#'+clickedItemID).addClass('expandedLR');
		} else {
			// Expand/Collapse load rule content
			$('#'+clickedItemID+' .loadRuleListItemContent').slideToggle();
			$('#'+clickedItemID).toggleClass('expandedLR');
		}

		utui.manage.wizard_LoadRules_setMLRmessage();

	},
	wizard_LoadRules_setAllPages:function(){

		var allPagesCheckbox = $('#loadRuleAll').find('input[type=checkbox]');

		var countCheckedLoadRules = $('#manage_dialog_wizard .loadRuleList input:checked').length;

		if(countCheckedLoadRules < 1){
			allPagesCheckbox.prop('checked', true);
		} else {
			allPagesCheckbox.prop('checked', false);
		}

		utui.manage.wizard_LoadRules_setMLRmessage();

	},
	// ----------------------------------------------------------------
	wizard_LoadRules_printRuleHeader: function (container, loadRuleID, newRuleFlag) {
		var loadRuleObj = utui.data.loadrules[loadRuleID],
			tagObj = utui.manage.containerMap[container],
			content = '',
			imported = loadRuleObj.imported,
			canModify = utui.labels.canUserModify(loadRuleObj.labels),
			isLRchecked = false,
			lrStatus = 'statusOff',
			checkedStatus = '',
			checkedClass = 'icon-check-empty',
			checkboxStatus = '',
			tagStatus = 'tagStatusInactive',
			id = loadRuleObj.id,
			$manageDialogWizard = $('#manage_dialog_wizard'),
			_constants = {
				ACTIVE: 'active'
			};

		if (loadRuleObj.status == _constants.ACTIVE) {
			lrStatus = 'statusOn';
		}

		// Get tag status to only allow valid load rule selection
		if (tagObj.status == _constants.ACTIVE) {
			tagStatus = 'tagStatusActive';
		}

		//see if load rule has a comma marking a multiple load rule
		var tagLRarray = tagObj.loadrule.split(',');
		if (tagLRarray.length > 1) {
			for (var iPos = 0; iPos < tagLRarray.length; iPos++) {
				if (tagLRarray[iPos] == id) {
					checkedStatus = ' checked="checked"';
					checkedClass = ' icon-check';
					isLRchecked = true;
				}
			}
		} else {
			if (tagObj.loadrule == id) {
				checkedStatus = ' checked="checked"';
				checkedClass = ' icon-check';
				isLRchecked = true;
			}
		}

		// Auto-check newly created load rules
		if (newRuleFlag) {
			var allPagesCheckbox = $('#loadRuleAll input:checkbox');
			checkedStatus = ' checked="checked"';
			checkedClass = ' icon-check';
			isLRchecked = true;

			allPagesCheckbox.prop('checked', false);
			$('#loadRuleAll .loadRuleAllCheck i').removeClass('icon-check').addClass('icon-check-empty');

			$manageDialogWizard.find('.noItemsLoadRule').hide();
		}

		// Add message if load rule is disabled from being selected
		if (tagObj.status == _constants.ACTIVE && loadRuleObj.status != _constants.ACTIVE) {
			checkboxStatus = 'disabled';
			if ($manageDialogWizard.find('.messageInactiveLoadRule').length < 1) {
				$manageDialogWizard.find('.wizardMessageBox').append('<div class="message messageInactiveLoadRule">' + localize.t('tiq.tags.inactive_load_rules') + '</div>');
				utui.manage.wizard_LoadRules_resetHeight();
			}
		}

		content += '<div id="loadRuleItem_' + id + '" class="loadRuleListItem ' + tagStatus + ' ' + lrStatus + '">';
		content += '    <div id="loadRuleItem_' + id + '_header" class="loadRuleListItemHeader">';
		content += '        <div class="loadRuleListItemCheck"><input id="loadRuleItemStatus_' + id + '" type="checkbox" ' + checkedStatus + ' name="loadRuleItemStatus_' + id + '" value="statusActive" ' + checkboxStatus + '><i class="' + checkedClass + '"></i></div>';
		content += '        <div class="loadRuleListItemTitle">' + utui.loadrules.dateRange.getLoadRuleTitle(loadRuleObj) + '</div>';
		content += '        <div class="loadRuleListItemButtons">';
		content += '            <a href="#" id="loadRuleItem_edit_'+id+'" class="btn btn-small actionEdit i-color-edit' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</a>';
		content += '            <a href="#" id="loadRuleItem_copy_'+id+'" class="btn btn-small actionCopy i-color-copy' + (!canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-copy"></i> ' + localize.t('tiq.tags.copy') + '</a>';
		content += '            <a href="#" id="loadRuleItem_toggleActive_'+id+'" class="classIDtoggleActivate btn btn-small actionToggleActive i-color-enable' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-play"></i> ' + localize.t('tiq.tags.activate') + '</a>';
		content += '            <a href="#" id="loadRuleItem_toggleActive_'+id+'" class="classIDtoggleDeactivate btn btn-small actionToggleActive i-color-disable' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-pause"></i> ' + localize.t('tiq.tags.deactivate') + '</a>';
		content += '            <a href="#" id="loadRuleItem_delete_'+id+'" class="btn btn-small actionDelete i-color-delete' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-trash"></i> ' + localize.t('tiq.tags.delete') + '</a>';
		content += '        </div>';
		content += '    </div>';
		content += '    <div class="loadRuleListItemContent"></div>';
		content += '</div>';


		var $loadRuleItem = $('#loadRuleItem_' + id);

		// If load rule is not already printed, add it to the list
		if ($loadRuleItem.length < 1) {
			$manageDialogWizard.find('.loadRuleList').append(content);
			$loadRuleItem = $('#loadRuleItem_' + id);

		} else {
			// Replace the existing rule while maintaining the selection
			var bCheckedStatus = $loadRuleItem.is(':checked'),
				bExpanded = $loadRuleItem.hasClass('expandedLR');
      $loadRuleItem.replaceWith(content);
      $loadRuleItem = $('#loadRuleItem_' + id);
			//!! - converts truthy to true/false
      $loadRuleItem.prop('checked', !!bCheckedStatus);
			if (bExpanded) {
				utui.manage.wizard_LoadRules_expandRule(container, id, 'expand');
			}
		}

		//User clicks on the Load Rule Item Bar
		$loadRuleItem.find('.loadRuleListItemHeader').safeBind('click', function (event) {
			var clickedItemID = this.id.replace('_header', ''),
				loadRuleID = clickedItemID.replace('loadRuleItem_', '');

			utui.manage.wizard_LoadRules_expandRule(container, loadRuleID);
		});

		// User changes input checkbox
		$loadRuleItem.find('input[type=checkbox]').safeBind('click', function (event) {
			event.stopPropagation();

			utui.manage.wizard_LoadRules_setAllPages();
		});

		// Mouse Click Edit
		$loadRuleItem.find('.actionEdit').safeBind('click', function (event) {
			event.stopPropagation();

			if (!$(this).hasClass("ui-state-disabled")) {
				var myLoadRuleID = this.id.replace('loadRuleItem_edit_', '');
				utui.loadrules.showEditItem(utui.loadrules.containerLookup(myLoadRuleID), function () {
					var newRuleObj = utui.data.loadrules[myLoadRuleID];

					//Reset Load Rule Title
					$('#loadRuleItem_' + myLoadRuleID + ' .loadRuleListItemTitle').html(utui.loadrules.dateRange.getLoadRuleTitle(newRuleObj));

					//Reset Load Rule Content
					utui.manage.wizard_LoadRules_printRuleContent(container, myLoadRuleID);

					// Refresh all tag headers
					$('#manage_content').find('.manage_container').each(function () {
						var container = this.id;
						utui.manage.setTitle(container);
					});

					// Update tag content
					utui.manage.displayItem(container);
				});
			}

		});

		// Mouse Click Copy
		$loadRuleItem.find('.actionCopy').safeBind('click', function (event) {
			event.stopPropagation();

			if (!$(this).hasClass("ui-state-disabled")) {
				var myLoadRuleID = this.id.replace('loadRuleItem_copy_', '');

				utui.loadrules.copyLoadRule(utui.loadrules.containerLookup(myLoadRuleID), function (obj) {
					//obj.loadruleid
					utui.manage.wizard_LoadRules_printRuleHeader(container, obj.loadruleid, false);
					utui.manage.wizard_LoadRules_expandRule(container, obj.loadruleid);
				});
			}
		});

		// Mouse Click Toggle Active
		$loadRuleItem.find('.actionToggleActive').safeBind('click', function (event) {
			event.stopPropagation();

			if (!$(this).hasClass("ui-state-disabled")) {
				var myLoadRuleID = this.id.replace('loadRuleItem_toggleActive_', '');

				utui.loadrules.toggleActive(utui.loadrules.containerLookup(myLoadRuleID), function (obj) {
					var ruleObj = utui.data.loadrules[obj.loadruleid];

					if (ruleObj.status == 'inactive' && tagObj.status == 'active') {
						$('#loadRuleItemStatus_' + obj.loadruleid).prop('checked', false);
						utui.manage.wizard_LoadRules_setAllPages();
					}

					utui.manage.wizard_LoadRules_printRuleHeader(container, ruleObj.id, false);

					// Refresh all tag headers
					$('#manage_content').find('.manage_container').each(function () {
						var container = this.id;
						utui.manage.setTitle(container);
					});

					// Update tag content
					utui.manage.displayItem(container);


				});
			}
		});

		// Mouse Click Delete
		$loadRuleItem.find('.actionDelete').safeBind('click', function (event) {
			event.stopPropagation();

			var myLoadRuleID = this.id.replace('loadRuleItem_delete_', '');

			if (!$(this).hasClass("ui-state-disabled")) {
				utui.loadrules.dropConfirm(utui.loadrules.containerLookup(myLoadRuleID), function (returnedLRid, action) {
					// alert('dropped tag: '+returnedLRid);
					if (action == 'delete') {
						$('#loadRuleItem_' + returnedLRid).remove();
					} else if (action == 'deactivate') {
						//Reset Load Rule Status
						$('#loadRuleItem_' + returnedLRid).removeClass('statusOn').addClass('statusOff');
					}
					// Refresh all tag headers
					$('#manage_content').find('.manage_container').each(function () {
						var container = this.id;
						utui.manage.setTitle(container);
					});

					var offLoadRulesCount = $('#manage_dialog_wizard .loadRuleList .statusOff').length;

					if ($('#manage_dialog_wizard .messageInactiveLoadRule').length > 0 && offLoadRulesCount < 1) {
						$('#manage_dialog_wizard .messageInactiveLoadRule').remove();
						utui.manage.wizard_LoadRules_resetHeight();
					}


					var tagSaveObj = utui.manage.containerMap[container];

					// Update tag content
					utui.manage.displayItem(container);

					utui.manage.wizard_LoadRules_setAllPages();


				});
			}
		});

	},
	wizard_LoadRules_printRuleContent:function(container, myLoadRuleID){

			var loadRuleList = utui.data.loadrules,
				myLoadRule = loadRuleList[myLoadRuleID],
				triggerKey = 'input_', // value used to be inherited from utui.loadrules.triggerKey;
				dateRangeContent = utui.loadrules.dateRange.toDisplayTime(myLoadRule.startDate, myLoadRule.endDate);

			var content = '';
			content += '            <div id="loadRuleItemContent_'+myLoadRule.id+'" class="loadRuleListItemRule editable">';

			if (dateRangeContent) {
				content += '<div class="LRdateRangeBlock"><div class="LRsDateRange">' + dateRangeContent + '</div></div>';
			}

			content += '                <div class="LRsConditions">';

            var ruleObj = utui.data.loadrules[myLoadRule.id],
                sizeOfRuleObj = utui.util.sizeOf(ruleObj, function(key) {return !isNaN(key)});
            for(var i = 0; i < sizeOfRuleObj; i++) {
                var ruleFilterObj = {};
                for(var j in utui.util.getVars(ruleObj[i])){
                    if(j.indexOf(triggerKey)==0){
                        var k = j.substring(triggerKey.length);
                        ruleFilterObj[k] = { source: ruleObj[i][j], filter: ruleObj[i]['filter_'+k], operator: ruleObj[i]['operator_'+k] };
                    }
                }
                var ruleContent = [];
	            for (var j in utui.util.getVars(ruleFilterObj, 1)) {
		            ruleContent.push('<div class="LRsSource">' + utui.util.safeEscape(ruleFilterObj[j].source) + '</div><div class="LRsCase">' + ruleFilterObj[j].operator + '</div><div class="LRsFilter">' + utui.util.safeEscape(ruleFilterObj[j].filter) + '</div>');
	            }
                var label = localize.t('tiq.tags.condition');
                if(parseInt(i) > 0)label = localize.t('tiq.tags.or_condition');

				content += '<div class="LRsORcondition">';
					for(var a=0;a<ruleContent.length; a++){
						content += '<div class="LRsANDcondition">'+ruleContent[a]+'</div>';
					}
				content += '</div>';
			}

			content += '                </div>';
			content += '            </div>';
			$('#loadRuleItem_'+myLoadRuleID+' .loadRuleListItemContent').empty();
			$('#loadRuleItem_'+myLoadRuleID+' .loadRuleListItemContent').append(content);

			$('#loadRuleItemContent_'+myLoadRule.id+' .contentItemButton').show();
			$('#loadRuleItemContent_'+myLoadRule.id+' .contentItemButtonBar:after').css('display','none');
	},
	editTagSettingsHandler:function (container) {

		var tagSaveObj = utui.manage.containerMap[container],
			imported = tagSaveObj.imported,
			tagId = tagapi.getTagIdByContainerId(container),
			errorCollection = utui.validation.getMap('manage',tagId) || [],
			missingLoadruleCollection = [];

		var errorReferenceCollection = errorCollection.map(function(obj) { return obj.key} );

		if(~errorReferenceCollection.indexOf('loadrule')) {
			missingLoadruleCollection = errorCollection.map(function(obj) { return obj.reference });
		};

		// Save Configuration
			// Save Title
			tagSaveObj.title = $('#' + container + '_title').val();

			// Save Config Settings
			var tagVendorConfigObj = utui.config.manageList[tagSaveObj.tag_id].configFields;
			if (tagVendorConfigObj) {

				for (var i in tagVendorConfigObj) {
				  var configName = 'config_'+tagVendorConfigObj[i].id;

				  if(typeof tagSaveObj[configName] === undefined){
				  } else {}
					var newConfigVal = $('#' + container + '_' + configName).val();
					if (imported) {
						if (tagSaveObj[configName] !== newConfigVal) {
					  var _name = tagSaveObj.libraryId+tagSaveObj.settings.profileid;
							// store config in the profile
							if (typeof utui.profile.modifiedImportConfigs[_name] === 'undefined') {
								utui.profile.modifiedImportConfigs[_name] = {};
							}
					  utui.profile.modifiedImportConfigs[_name][configName] = newConfigVal;
						}
					}
					tagSaveObj[configName] = newConfigVal;
				}
			}

			// Save Advanced Settings
			tagSaveObj.advconfig_send = $('#manage_advconfig_send2').prop('checked') ? 'no' : 'yes';
			tagSaveObj.advconfig_bundle = $('#manage_advconfig_bundle2').prop('checked') ? 'no' : 'yes';
			tagSaveObj.advconfig_wait = $('#manage_advconfig_wait2').prop('checked') ? 'no' : 'yes';
			tagSaveObj.advconfig_optout = $('#manage_advconfig_optout2').prop('checked') ? 'no' : 'yes';
			tagSaveObj.advconfig_loadtype = $('#manage_advconfig_loadtype1').prop('checked') ? '2' : '';
			tagSaveObj.advconfig_src = $('#manage_advconfig_src').val();
			if (tagapi.hasActiveS2S()) {
				tagSaveObj.advconfig_s2s = $('#manage_advconfig_s2s1').prop('checked') ? 'yes' : 'no';
				
			}

			if (tagapi.hasActiveS2S() && tagSaveObj.advconfig_s2s == 'yes') {
				if (!utui.labels.hasLabel('Server to server')){
					utui.labels.addLabel('Server to server', utui.labels.getNextLabelColor(), null, function(id, error) {
						if (id) {
							utui.manage.labels.onLabelAssigned({listType:'single', labelId:id});
						}
					});
				} else {
					utui.manage.labels.onLabelAssigned({listType:'single', labelId:utui.labels.getLabelIdByName('Server to server')});
				}

                var dcTagPresent = false;
                for (var i in utui.util.getVars(utui.data.manage)) {
                    if (utui.data.manage[i].tag_id === "20064"){
                        dcTagPresent = true;
                    }
                }
                if ( ! dcTagPresent){
                    utui.util.showStatusMessage(localize.t('tiq.tags.to_use_the_s2s_feature'));
                }
            } else {
                if (utui.labels.hasLabel('Server to server') && typeof tagSaveObj.labels !== 'undefined'){
                    var ssLabelId = utui.labels.getLabelIdByName('Server to server'),
						s2sLabelUsed = false;

					for (var i in utui.util.getVars(utui.data.manage)) {
						if (typeof utui.data.manage[i].labels != 'undefined'){
							var lIds = utui.data.manage[i].labels.split(',');
							for (var i = 0; i<lIds.length; i++) {
								if (lIds[i] == ssLabelId){
									s2sLabelUsed = true;
								}
							}
						}
					}
					if ( ! s2sLabelUsed){
						// This will delete the label and remove the label from all instances
						utui.labels.removeLabel(ssLabelId);
					}
				}
			}

		// Save selected Environments
			tagSaveObj.selectedTargets = {};
			tagSaveObj.selectedTargets.dev = $("#manage_config_locations_dev1").is(":checked") ? "true" : "false";
			tagSaveObj.selectedTargets.qa = $("#manage_config_locations_qa1").is(":checked") ? "true" : "false";
			tagSaveObj.selectedTargets.prod = $("#manage_config_locations_prod1").is(":checked") ? "true" : "false";

			var selectedCustomTargets = $('#manage_config_custom_targets').val();
			if(selectedCustomTargets) {

				if(selectedCustomTargets[0] === 'allCustomTargets') {
					selectedCustomTargets = utui.targets.getList('custom');
				}

				var customTargetSize = selectedCustomTargets.length;
				for(var j=0; j<customTargetSize; j++) {
					tagSaveObj.selectedTargets[selectedCustomTargets[j]] = "true";
				}
			}

		// Save Notes
			tagSaveObj.notes = $('#'+container+'_notesInput').val();

		// Save Load Rules
			var lrCheckbox = $('#manage_dialog_wizard .loadRuleList input:checked');

			if(lrCheckbox.length > 0){
				//Make comma seperated list of load rules and store in tagSaveObj
				var loadRuleString = '';

				for(var i = 0; i < lrCheckbox.length; i++) {

					var loadRuleID = lrCheckbox[i].name.replace('loadRuleItemStatus_','');

					if(i != 0) {
						loadRuleString += ',';
					}

					loadRuleString += loadRuleID;
				}

				if(missingLoadruleCollection.length) {
					for (var i = missingLoadruleCollection.length - 1; i >= 0; i--) {
						loadRuleString += ',' + missingLoadruleCollection[i].id;
					};
				}

				tagSaveObj.loadrule = loadRuleString

				if(lrCheckbox.length > 1){
					tagSaveObj._multipleLoadRulesTitle = utui.manage.mlrConfig.text;
					tagSaveObj.multipleLoadRulesTitle = utui.manage.mlrConfig.text;
					tagSaveObj._multipleLoadRules = loadRuleString;
					tagSaveObj.multipleLoadRules = loadRuleString;
				}

			} else {
				// All pages should be selected
				tagSaveObj.loadrule = 'all';
			}

		// Save Mapped Variables
			var id = $('#manage_editmapping_id').val();
			var mapChildren = $('#' + container + '_mapcontent').children('li');
			var currentTag = utui.manage.containerMap[container];

			currentTag.map = {};
			for (var i = 0; i < mapChildren.length; i++) {
				var obj = {
					variable: $.trim($('#' + mapChildren[i].id + '_variable').val()).replace(/ *,/g, ","),
					type:$('#' + mapChildren[i].id + '_type').val(),
					key:$('#' + mapChildren[i].id + '_value').val(),
					dsID:$('#' + mapChildren[i].id + '_dsID').val(),
					origin_id:$('#' + mapChildren[i].id + '_origin_id').val()
				}
				utui.manage.containerMap[container].map[i + 1] = obj;
			}

//        utui.manage.displayItem(container);

		utui.manage.updateAccordion(false);
	},
	editTagversionConfirm: function (label) {
		// Do not warn if tag is being added for the first time
		if (this.newTagFlag) {
			return;
		}
		$("#dialog").dialog("destroy");

		var content = '';
		content += '<div>';
		content += '    <div class="dialog-icon-container">';
		content += '        <i class="icon-warning-sign" style="color:orange;"></i>';
		content += '    </div>';
		content += '    <div class="dialog-description">';
		content += '        <p><strong>' + localize.t('tiq.tags.if_template_already_exists', {label:label.toLowerCase()}) + '</strong></p>';
		content += '        <p>' + localize.t('tiq.tags.you_want_to_make_copy') + '</p>';
		content += '    </div>';
		content += '</div>';

		$("#manage_tagversion_confirm").html(content);
		$("#manage_tagversion_confirm").dialog({
			title: localize.t('tiq.tags.important'),
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: false,
			resizable: false,
			autoOpen: true,
			draggable: true,
			position: ['center', 'center'],
			buttons: [
                {
                    text: localize.t('tiq.dialog.button.ok'),
                    id: 'confirmEditTagVersion_dialog_okBtn',
    				click: function () {
    					$(this).dialog('close');
    				}
    			}
            ]
		});

	},
    dropConfirm:function (container) {
        $('#dialog').dialog('destroy');

        var content = '';
            content += '<div style="font-weight:bold;">' + localize.t('tiq.tags.are_you_sure_delete_tag') + '</div>';
            content += '<p><i class="icon-warning-sign" style="font-size:24px; color:orange;"></i> ' + localize.t('tiq.tags.you_cannot_undo_operation') + '</p>';

            if(utui.manage.containerMap[container].status == 'active'){
                content += '<p>' + localize.t('tiq.tags.temporarily_remove_tag') + '</p>';
            }


		//TASK check to see if a customization is scoped to this tag
		var scopeArr = [],
			scope,
			id = utui.manage.containerMap[container].id;

		for (var i in utui.data.customizations) {
			scope = utui.data.customizations[i].scope;
			if (scope) {
				scope = scope.toString().split(",");
				for (var j = 0; j < scope.length; j++) {
					if (scope[j] == id) {
						scopeArr.push(i);
					}
				}
			}
		}

	    if (scopeArr.length > 0) {
		    content += '<div class="ui-state-error" style="margin-top: 12px;padding:8px;">' + localize.t('tiq.tags.there_are_customizations_tied');
		    content += '<ul style="padding-top: 8px">';
		    for (var i = 0; i < scopeArr.length; i++) {
			    var title = utui.util.safeEscape(utui.manage.containerMap[container].title) + ': ' + utui.config.customizationList[utui.data.customizations[scopeArr[i]].id].title + ': ' + utui.util.safeEscape(utui.data.customizations[scopeArr[i]].title);
			    content += '<li>' + title + '</li>';
		    }
		    content += '</ul></div>';
	    }

        $('#manage_delete_confirm').html(content);
        $('#manage_delete_confirm').dialog({
            resizable:false,
            height:'auto',
            width:420,
            modal:true,
            draggable: true,
            position:['center', 110],
            show:'blind',
            title:localize.t('tiq.tags.delete_tag'),
            close:function () {
            }
        });

        var obj = this.containerMap[container];
        if (obj.status == 'active') {
            $('#manage_delete_confirm').dialog("option", "buttons", [
                {
                    text:localize.t('tiq.dialog.button.delete_tag'),
                    click:function () {
                        $(this).dialog("close");
                        utui.manage.drop(container, scopeArr);
                        utui.manage.updateAccordion(false);
                        utui.manage.updateSortOrder();
                        utui.loadrules.updateAllLRTags();
                        utui.validation.runValidationOnAllTabs();
                    }
                },
                {
                    text:localize.t('tiq.dialog.button.disable_tag'),
                    click:function () {
                        $(this).dialog("close");
                        utui.manage.toggleActive(container)
                    }
                },
                {
                    text:localize.t('tiq.dialog.button.cancel'),
                    click:function () {
                        $(this).dialog('close')
                    },
                    style:'float:left; margin-left: 12px'
                }
            ]);
        } else {
            $('#manage_delete_confirm').dialog("option", "buttons", [
                {
                    text:localize.t('tiq.dialog.button.delete_tag'),
                    click:function () {
                        $(this).dialog("close");
                        utui.manage.drop(container, scopeArr);
                        utui.manage.updateAccordion(false);
                        utui.manage.updateSortOrder();
                        utui.loadrules.updateAllLRTags();
                        utui.validation.runValidationOnAllTabs();
                    }
                },
                {
                    text:localize.t('tiq.dialog.button.cancel'),
                    click:function () {
                        $(this).dialog('close')
                    },
                    style:'float:left; margin-left: 12px'
                }
            ]);
        }
    },
	drop: function (container, isOnProfileLoad, bBypassHistoryEvent) {
		$('#' + container).remove();

		var tag = this.containerMap[container],
			tagName = tag.tag_name,
			tagId = tag.tag_id,
			tagTitle = tag.title,
			id = tag.id,
			imported = tag.imported;

		delete this.addedManage[this.containerMap[container].tag_id];
		// utui.manage.updateAccordion(false);
		// utui.manage.updateSortOrder();

		delete utui.manage.containerMap[container];
		delete utui.data.manage[id];

		this.saveData();

		if(!bBypassHistoryEvent) {
			utui.profile.setActionPerformed({
				action: utui.constants.tags.REMOVED,
				data: {
					id: id,
					tag_name: tagName || utui.util.getTagNameFromTagId(tagId),
					name: tagTitle,
					imported: imported,
					library: (imported) ? tag.settings.profileid : '',
					kind : utui.constants.tags.TYPE,
					operation : utui.constants.operation.REMOVED
				}
			}, true, null, isOnProfileLoad);
		}

		utui.util.pubsub.publish(utui.constants.tags.REMOVED, {
			action: utui.constants.tags.REMOVED,
			tag_id: tagId,
			id: id,
			tag_name: tagName || utui.util.getTagNameFromTagId(tagId),
			imported: imported,
			obj: tag
		});
	},
	updateAccordion:function (lastActiveFlag) {
		var itemCount = $('#manage_content > div').length,
			$manageContent = $('#manage_content');

		$manageContent.accordion('destroy');
		$manageContent.accordion({
			header: 'h3',
			active: false,
			autoHeight: false,
			animated: false,
			clearStyle: true,
			changestart: function(e, ui){
				var closedContainerID = $(ui.oldContent).parent().attr("id");
				if((typeof closedContainerID !== 'undefined') && (closedContainerID != '')){
					utui.manage.syncDOMInputsWithContainerMap(closedContainerID);
				}
				if(closedContainerID){
					$('#'+closedContainerID+' .ui-accordion-content').empty();
					utui.manage.lastOpenedContainer = '';
				}
			},
			change: function(e, ui){
				//Display information when accordion opened
				var openedContainerID = $(ui.newContent).parent().attr("id");

				if(openedContainerID){
					utui.manage.displayItem(openedContainerID);
					utui.manage.lastOpenedContainer = openedContainerID;
				}
				utui.manage.initRatings();
			},
			collapsible:(itemCount == 1) ? false : true
		});

		$manageContent.sortable({
			handle:'h3',
			axis:'y',
			update:function(e,ui){
				var containerID = $(ui.item).attr("id");
				var newPosition = ui.item.index();

				utui.manage.updateSortOrder();

				utui.profile.setDirty();

				//save new positions

			}
		});

		utui.manage.updateSortOrder();


		if (lastActiveFlag) {
			$manageContent.accordion('activate', itemCount - 1);
		} else {

			var lastActive = -1,
				foundActive = false,
				tags = $manageContent.find('h3');

            for (i = 0; i < tags.length; i++) {
                if($(tags[i]).parent().attr('id') == utui.manage.lastOpenedContainer) {
                    lastActive = i;
                    foundActive = true;
                    break;
                }
            }


			if (foundActive == true){
				$manageContent.accordion('activate', lastActive);
			}

		}

        if(itemCount == 0){
            var noItemsToShow = '<div class="noItemsToShow">';
            noItemsToShow += '  <span>' + localize.t('tiq.tags.add_new_tag') + '</span>';
            noItemsToShow += '  <i class="icon-hand-up"></i>';
            noItemsToShow += '</div>';
            $('#tabs-manage .config_button_nofloat').append(noItemsToShow)
        } else {
            $('#tabs-manage .noItemsToShow').remove();
        }
    },
    showHelpTab: function() {
        // ----------------------------------------------------
        var _namespace = 'manage';

        // ----------------------------------------------------
        var _articles = [
            {
                id: 0,
                title: localize.t('tiq.tags.help.0.title'),
                type: 'document',
                linkHref: common.community.tags_tab,
                isExternalLink: true
            },
            {
                id: 1,
                title: localize.t('tiq.tags.help.1.title'),
                type: 'document',
                linkHref: common.community.transitioning_to_google_universal_analytics,
                isExternalLink: true
            },
            {
                id: 2,
                title: localize.t('tiq.tags.help.2.title'),
                type: 'document',
                linkHref: common.community.adobe_analytics_tag,
                isExternalLink: true
            },
            {
                id: 3,
                title: localize.t('tiq.tags.help.3.title'),
                type: 'video',
                linkHref: common.community.adding_a_tag,
                isExternalLink: true
            },
            {
                id: 4,
                title: localize.t('tiq.tags.help.4.title'),
                type: 'document',
                linkHref: common.community.tag_configuration_advanced_settings,
                isExternalLink: true
            }
        ];

        var _context = {
            header: localize.t('tiq.tags.help.header'),
            body: localize.t('tiq.tags.help.body')
        }

		utui.help.initHelpTab(_namespace, _articles, _context);
	},
	updateSortOrder: function () {
		var $manageContainers = $('#manage_content .manage_container');

		$manageContainers.each(function (index) {
			var container = $(this).attr('id'),
				tag = utui.manage.containerMap[container];
			tag.sort = index;

		});
	},
	getTitle:function (container, labelsExpanded) {
		var tagObj = utui.manage.containerMap[container],
			v = '',
			canModify = utui.labels.canUserModify(tagObj.labels),
			tagTitle = utui.util.safeEscape(tagObj.title),
			expandedClass = utui.labels.helper.getLabelExpandedClass(labelsExpanded);

		v = '<div class="container_bulk_select">';
		if (!tagObj.imported) {
			var checked = $('#manage_bulk_select_' + tagObj.id).prop('checked');
			v += '<input id="manage_bulk_select_' + tagObj.id + '" value="' + tagObj.id + '" class="label_select_checkbox bulk_select_checkbox" ' + (checked === 'checked' && canModify ? 'checked="checked"' : '') + ' type="checkbox" data-exclude="1" style="display:block;" ' + (!canModify ? 'disabled="disabled"' : '') + ' />';
		}
		v += '</div>';

		// Status
		if (typeof tagObj.status != 'undefined') {
			v += '<div id="' + container + '_status_toggle" class="' + (tagObj.imported || !canModify ? 'disabled_toggle ' : '') + 'container_status_wrapper"><span class="container_status_' + tagObj.status + '"></span></div>';
		}

		// Tag Vendor (Google Analytics) and labels count
		v += '<div class="container_vendor">' + utui.config.manageList[tagObj.tag_id].title + '</div>';

		// Tag Title
		v += '<div class="container_title">';
		v += '  <span class="title" title="' + tagTitle + '">' + tagTitle + '</span>';
		v += '</div>';

		// Load Rules
		if (typeof tagObj.loadrule == 'undefined') {
			tagObj.loadrule = 'all';
		}
		// Fill the title with the loadrule...
		if (tagObj.loadrule == 'all') {
			v += '<div class="container_loadRules">' + localize.t('tiq.rules.all_pages') + '</div>';
		} else if (tagObj.loadrule == utui.manage.mlrSelVal || tagObj.loadrule.indexOf(',') != -1) {
			var multiLRtitle = localize.t('tiq.tags.multiple_load_rules');
			if (typeof tagObj._multipleLoadRulesTitle != 'undefined' && tagObj._multipleLoadRulesTitle != '') {
				// Phase out of using _multipleLoadRulesTitle
				multiLRtitle = tagObj._multipleLoadRulesTitle;
			}
			if (typeof tagObj.multipleLoadRulesTitle != 'undefined' && tagObj.multipleLoadRulesTitle != '') {
				multiLRtitle = tagObj.multipleLoadRulesTitle;
			}
			v += '<div class="container_loadRules">' + utui.loadrules.dateRange.getLoadRuleTitle(tagObj.loadrule, multiLRtitle) + '</div>';
		} else if (!isNaN(tagObj.loadrule) && typeof utui.data.loadrules[tagObj.loadrule] != 'undefined') {
			v += '<div class="container_loadRules">' + utui.loadrules.dateRange.getLoadRuleTitle(utui.data.loadrules[tagObj.loadrule]) + '</div>';
		}

		tagObj.scope = tagObj.loadrule;

		// Label Container
		v += '<div class="container_label ' + expandedClass + '" data-uid="' + tagObj.id + '" data-type="' + utui.manage.id + '"></div>';

		//ensure the UID doesn't show up on the Mapping Toolbox
		if (typeof container != 'undefined') {
			v += ' <div class="container_uid" id="' + container + "_uniq_id_info_tooltip" + '" title="' + utui.tooltip.manage.uniq_id_info + '"><span class="uidLabel">UID</span><span class="uidValue">' + tagObj.id + '</span></div>';
		}

		// Mapped Variables
		if (typeof container != 'undefined') {
			var manageObj = this.containerMap[container];
			if (typeof utui.config.manageList[tagObj.tag_id].map != 'undefined' && utui.config.manageList[tagObj.tag_id].map == "true") {
				var count = 0;
				for (var c in utui.util.getVars(manageObj.map)) {
					count++;
				}
				var varCountPositive = '';
				if (count > 0) {
					varCountPositive = ' valuePositive';
				}
				v += '<div class="container_variables' + varCountPositive + '" id="' + container + "_mappedVars" + '" title="' + localize.t('tiq.tags.number_of_mapped_data_sources') + '"><span class="variableValue">' + count + '</span></div>';
			} else {
				v += '<div class="container_variables"></div>';
			}

			v += '<div class="container_warning"><i class="icon-warning-sign"></i> x <span class="count"></span></div>';
		}


		return v;
	},
	setTitle: function (container, labelsExpanded) {
		var containerMap = this.containerMap[container],
			id = containerMap.id,
			imported = containerMap.imported;

		var $accordion = $('#' + container + '_accordion').html(this.getTitle(container, labelsExpanded));
		utui.labels.helper.renderLabels(container, this.id);

		// Click handler for the bulk select checkbox
		$accordion.find('#manage_bulk_select_' + id).safeBind('click', function () {
			var $this = $(this);

			// hack to enable checkboxes to be checked
			setTimeout(function () {
				$this.prop("checked", !$this.prop("checked"));
				utui.manage.labels.labelCheckboxChecked();
			}, 0);

			return false;
		});

		if (!imported) {
			//Make status toggle in the accordion header clickable
			$accordion.find('#' + container + '_status_toggle').safeBind('click', function (event) {
				// If the accordion toggle contains the class disabled_toggle then do not execute
				if ($(this).hasClass('disabled_toggle')) return;

				utui.manage.toggleActive(container);
				return false;
			});
		}

		//Make UID clickable - opens corresponding utag.js in a new tab/window
		$accordion.find('#' + container + '_uniq_id_info_tooltip').safeBind('click', function (event) {
			var tagObj = utui.data.manage[id];
			// Find and prefer the highest ranking environment (prod over qa over dev)
			var utagEnv = _.find(['prod', 'qa', 'dev'], function (env) {
				return _.indexOf(tagObj.publishedTargets, env) !== -1;
			});
			// If none of the standard environments are published, check to see if a custom environment is published (and just grab the first one in case there are multiple - likely a rare occurrence)
			if (!utagEnv && tagObj.publishedTargets.length) {
				utagEnv = tagObj.publishedTargets[0];
			}
			var utagUrl = '//' + gAppConfig.utag_host + '/' + gAppConfig.utag_path + '/' + utui.data.settings.account + '/' + utui.data.settings.profileid + '/' + utagEnv + '/utag.' + id + '.js';
			common.utils.openWindow(utagUrl);
			return false;
		});

		var uiiTooltipObj = {};
		uiiTooltipObj[container + '_uniq_id_info_tooltip'] = { gravity: 'se' };
		uiiTooltipObj[container + '_mappedVars'] = { gravity: 'se' };
		utui.util.addTooltip(uiiTooltipObj);
	},
	editTitle:function (container) {
		if ($('#' + container + '_titlelabeldisplay').is(':visible')) {
			$('#' + container + '_titlelabeldisplay').hide();
			$('#' + container + '_titlelabeledit').show();
			$('#' + container + '_title').focus();
		} else {
			$('#' + container + '_titlelabeldisplay').show();
			$('#' + container + '_titlelabeledit').hide();
			this.setTitle(container);
		}
	},

	// TODO: toggleActive should be a UI-based function and not treated as a checker.  Many functions rely on this call throughout the code
	// and should be named differently.

	// NOTE: utui.loadrules also has their version of toggleActive.  Structured just as complex as this.
	toggleActive:function (container) {
		var loadrulesMap = utui.loadrules.containerMap;
		var tagsMap = utui.manage.containerMap;

		var MLR_SELECTION_VALUE = utui.manage.mlrSelVal; //999999

		var linkLoadRulesHash = {};
		var isLinkedRuleInactive = false;
		var lrArr = [];
		var linkedLoadRules = [];
		var dm = utui.data.manage;
		var ci = tagsMap[container].id;
		var self = this;

		var checkEachMultiLRstatus = function () {
			for (var lri = 0; lri < lrArr.length; lri++) {  // for every load rule shown in the list from MLR...
				// if Loadrule list index has Inactive status... REPLICATED: when (inactive) load rule is selected and you're toggling tag to active
				if (lrArr[lri] == loadrulesMap[i].id && loadrulesMap[i].status !== 'active') {
					linkLoadRulesHash[i] = i; // Store it in hash
					isLinkedRuleInactive = true; //flag inactive as true
				}
			}
		}
		var checkEachLRstatus = function () {
			if (loadrulesMap[i].status !== 'active') {
				linkLoadRulesHash[i] = i;
				isLinkedRuleInactive = true;
			}
		}
		// TODO: make "toggleTag" function and combine enableTag/disableTag
		var enableTag = function () {
			// if there's no error, set the container as active -- regardless of status (unless undefined)
			tagsMap[container].status = 'active';

			if (typeof dm[ci] !== 'undefined') {
				if (typeof dm[ci].status !== 'undefined') {
					dm[ci].status = 'active';
				}
			}

			loadRulesEditItem();
		}
		var disableTag = function () {
			tagsMap[container].status = 'inactive';

			// if data.manage[the_ID] has any status, set it to inactive.
			if (typeof dm[ci] !== 'undefined') {
				if (typeof dm[ci].status !== 'undefined') {
					dm[ci].status = 'inactive';
				}
			}

			loadRulesEditItem();
		}

		var getLoadruleObj = function(loadruleId) {
			for(var key in loadrulesMap) {
				var loadrule = loadrulesMap[key];
				if (loadrule.id == loadruleId) {
					return loadrule;
				}
			}
		}

		var loadRulesEditItem = function () {
			for (var i in utui.util.getVars(linkedLoadRules)) {
				utui.loadrules.editItem(linkedLoadRules[i]);
			}

			//Update tags scope for multi
			if(tagsMap[container].multipleLoadRules) {
				for(var lrid in lrArr) {
					utui.loadrules.view.updateTagsScoped(getLoadruleObj(lrArr[lrid]));
				}
			}
			else { //update tags scoped for single
				utui.loadrules.view.updateTagsScoped(getLoadruleObj(tagsMap[container].loadrule));
			}

		}

		// this fires off when MLR has active/inactive load rule and you're trying to toggle...
		// TODO: needs to be updated once changes have been done
		var extractMLR = function () {
			var mlr = tagsMap[container].multipleLoadRules;

			if (tagsMap[container].loadrule === MLR_SELECTION_VALUE) { // if tags containermap[container].loadrule is equal to MLR_SELECTION_VALUE (i.e. 999999)
				tagsMap[container].loadrule = multipleLoadRules;
			}
			lrArr = tagsMap[container].loadrule.split(','); // Take the multiple load rules and split it
		}


		for (var i in utui.util.getVars(loadrulesMap)) { // for each loadrule container map (list of load rules and their attributes)
			/* MULTI LOAD RULE CONDITIONING */
			if (tagsMap[container].loadrule === MLR_SELECTION_VALUE || tagsMap[container].loadrule.indexOf(',') !== -1) {
				extractMLR();
				checkEachMultiLRstatus();
			}
			/* SINGLE RULE CONDITIONING */
			if (loadrulesMap[i].id+'' == tagsMap[container].loadrule+'') { // REPLICATED: 1) toggle load rule off that's tied to a tag.  2) toggle inactive tag as active that was symptomed by the load rule in step 1.
				checkEachLRstatus();
			}
		}

		//for each linked Load Rules in the hash, push it into LLR array (basically transfer the hash values to another list)
		// Q: why can't we just reference the hash instead of passing the baton?
		for (var llr in utui.util.getVars(linkLoadRulesHash)) {
			linkedLoadRules.push(linkLoadRulesHash[llr]);
		}

		var tagObj = tagapi.getObjectByTagId(ci);
		var taggingObj = tagapi.createTaggingObject(tagObj);/*
		 * TOGGLE TAG
		 */
		if (tagsMap[container].status === 'active') {
      disableTag();taggingObj.tealium_event = utui.constants.tagging.DISABLE;
		} else {
			if (linkedLoadRules.length > 0 && isLinkedRuleInactive) {
				this.showErrorDialog(linkedLoadRules);
			} else {
				enableTag();
                taggingObj.tealium_event = utui.constants.tagging.ENABLE;
            }
		}

        utui.util.pubsub.publish(utui.constants.tagging.TAGGING, taggingObj);

        $('#' + container + '_status').val(tagsMap[container].status);
		this.setTitle(container);

		utui.profile.setActionPerformed({
			action:utui.constants.tags.TOGGLED,
			data:{
				id:tagsMap[container].id,
				tag_name:tagsMap[container].tag_name,
				name: tagsMap[container].title,
				status:tagsMap[container].status,
				kind : utui.constants.tags.TYPE,
				operation : utui.constants.operation.TOGGLED,
				container: container
			}
		}, true);

		this.saveData();
	},
	syncDOMInputsWithContainerMap:function(container){
		// This function checks for any input fields that were appended to the DOM and ensures they get saved.
		// This is necessary as a catch all as the data used to be stored in the DOM as hidden input fields
		// before they were stored in the containerMap.

		var obj = {};
		var sortObj = [];
		var containerMap = {};

		var manageElements = $('#'+container+' :input :not([data-exclude="1"])');	// Anything with data-exclude="1" will not be saved!
		manageElements = utui.util.getVars(manageElements,3);

		for(var i in manageElements){
			var rxResult = [], id, key;
			if(manageElements[i].id){
				rxResult = manageElements[i].id.match(/^manage_content_(\d+)_(.*)$/);
				id = rxResult[1];
				key = rxResult[2];
			} else {
				id = undefined;
			}

			if(typeof id!='undefined' && id.length > 0 && typeof obj[id] =='undefined'){
				obj[id] = {};
				sortObj.push(id);
			}

			if(manageElements[i].type && manageElements[i].id){
				var container = 'manage_content_'+id;
				containerMap[id]=container;

				if(manageElements[i].type.indexOf('select')>-1){
					obj[id][key] = $('#'+manageElements[i].id+' :selected').val();
					utui.manage.containerMap[container][key] = obj[id][key];
				}else{
					obj[id][key] = $('#'+manageElements[i].id).val();
					utui.manage.containerMap[container][key] = obj[id][key];
				}

				if(typeof obj[id]['map'] == 'undefined' && typeof utui.manage.containerMap[container]!='undefined' && typeof utui.manage.containerMap[container]['map']!='undefined'){
					obj[id]['map'] = utui.manage.containerMap[container]['map'];
				}
			}
		}
	},
	showErrorDialog:function (llr) {
		var content = '<div class="ui-state-error" style="margin-top: 12px;padding:8px;">' + localize.t('tiq.tags.tag_tied_to_inactive_rule');
		content += '<ul style="padding-top: 8px">';
		for (var i in utui.util.getVars(llr)) {
			content += '<li>' + utui.loadrules.containerMap[llr[i]].title + '</li>';
		}
		content += '</ul></div>';

        $('#manage_block_tag_activation').html(content);
        $('#manage_block_tag_activation').dialog({
            resizable:false,
            height:'auto',
            width:450,
            modal:true,
            draggable: true,
            position:['center', 110],
            show:'blind',
            title:localize.t('tiq.tags.tag_cannot_be_activated'),
            buttons: [
                {
                    text:localize.t('tiq.dialog.button.ok'),
                    id: 'activateTagError_dialog_okBtn',
                    click:function () {
                        $(this).dialog('close')
                    },
                    style:'float:left; margin-left: 12px'
                }
            ]
        });
    },
    isToggleActive:function(container){
        var tagStatusActive = $('#'+container+'_status_toggle').children('.container_status_active');
        if(tagStatusActive.length > 0) {
            return true
        }
        return false;
    },
    isLoadRuleContainerActive:function(container){
        var selectedValue = container.val();

		// fetch and store inactive loadrules into an array
		var lrArr = [];
		for(var i in utui.util.getVars(utui.data.loadrules,1)){
			if(utui.data.loadrules[i].status !== 'active'){
				lrArr.push(parseInt(i));
			}
		}

		if(lrArr.indexOf(selectedValue) > -1) {
			return false;
		}

		return true;
	},
	isLoadRuleValueActive:function(v) {
		if(typeof utui.data.loadrules[v] !== 'undefined') {
			if(utui.data.loadrules[v].status !== 'active') {
				return false;
			}
		}
		return true;
	},
	editTagNotes:function (container) {
		var myTag = utui.manage.containerMap[container];

        var myNotes = '';
        if(typeof myTag.notes != 'undefined'){
            myNotes = myTag.notes;
        }
        var content = '';
        content += '<div class="dialogSection">';
        content += '    <div class="dialogSectionHeader">' + localize.t('tiq.tags.note') + '</div>'
        content += '    <div class="dialog_section_body">';
        content += '        <textarea id="'+container+'_notesInput" name="'+container+'_notesInput" style="height:150px;">'+myNotes+'</textarea>';
        content += '    </div>'
        content += '</div>';

		$('#dialog').dialog('destroy');
		$("#manage_dialog_map").html(content);

        $('#manage_dialog_map').dialog({
            resizable:false,
            height:'auto',
            width:550,
            modal:true,
            draggable:true,
            position:['center', 110],
            show:'blind',
            title:localize.t('tiq.tags.edit_notes'),
            buttons: [
                {
                    text: localize.t('tiq.dialog.button.apply'),
                    id:'editTagNotes_dialog_applyBtn',
                    click: function() {
                        myTag.notes = $('#'+container+'_notesInput').val();
                        utui.profile.setDirty();
                        $(this).dialog("close");
                        utui.manage.updateAccordion(false);
                    }
                },
                {
                    text:localize.t('tiq.dialog.button.cancel'),
                    id: 'editTagNotes_dialog_cancelBtn',
                    click:function () {
                        $(this).dialog('close');
                    },
                    style:'float:left; margin-left: 12px'
                }
            ],
            close:function () {
            }
        });
    },
    // --------------------------------------------------
    // @param { oldVar } - object
    // @param { newVar } - object
    updateMappings:function (oldVar, newVar) {
        if (!oldVar || !newVar) return;

		var oldTmp = oldVar.split('.'),
			newTmp = newVar.split('.');
		oldType = oldTmp.shift();
		oldName = oldTmp.join('.');
		newType = newTmp.shift();
		newName = newTmp.join('.');

		var tags = this.containerMap;

		// Iterate through all of the tags, each tag contains a map of variables
		for (var i in tags) {
			var tag = tags[i];

			// Iterate through all of the variables
			for (var j in tag.map) {
				var variable = tag.map[j];

				if (variable.key === oldName && variable.type === oldType) {
					variable.key = newName;
					variable.type = newType;
					// Mark the tag as updated after a mapped datasource change
					if (tag.publish_revisions) { // Create the publish_revisions object if needed
						tag.publish_revisions.last_modified = utui.config.lastServerTimestamp.substring(0,12);
					} else {
						tag.publish_revisions = { last_modified : utui.config.lastServerTimestamp.substring(0,12), svr_save_timestamps : {} };
					}
				}
			}
		}
	},

	_cachedOptions: undefined,

	getOptionForSelect: function() {

		var selectItems = dsapi.getInputs(true);
		// var selectItems = utui.manage.createInlineMappingSelect();

		var optionContent = '';
			optionContent += '<option selected></option>';

		_.each(selectItems, function (selectItems, key) {
			// sort by name
			var sortedVariables = _.sortBy(selectItems, function (option) {
				return option.name.toLowerCase();
			});

			// append group identifier
			optionContent += '<optgroup label="' + dsapi.getDataSourceTypeName(key) + '" data-type="' + key + '">';

			_.each(sortedVariables, function(option) {
				// append the option html
				optionContent += $('<option/>')
					.text(utui.util.safeUnescape(option.name))
					.val(utui.util.safeEscape(option.value))
					.attr('data-type', option.type)[0].outerHTML;
			});
		});

		this._cachedOptions = optionContent;

		return optionContent;
	},

	getInputSelect:function(container){
		// var selectItems = dsapi.getInputs();
		var container_id = (~container.indexOf('_map_')) ? container.substr(0, container.indexOf('_map_')) : container;

		var content = '<select id="'+container+'_inputselect" class="loadrule_inputselect select2 variableSelect" data-placeholder="'+localize.t('tiq.datasources.select_a_datasource')+'" data-list-type="loadrules">';
		// content += this._cachedOptions || this.getOptionForSelect();
		content += utui.manage.createInlineMappingSelect(container_id);
		content += '</select>';

		return content;
	},
	getMappingVariableDescription: function(varName, varType) {
		var vars = utui.data.define,
			variable;

		var varName = utui.util.safeEscape(varName);
		var _vName;

		for (var id in vars) {
			variable = vars[id];

			_vName = utui.util.safeEscape(variable.name);

			// If we have a match...
			if (_vName == varName && variable.type == varType) {
				return utui.util.safeEscape(variable.description || '');
			}
		}

		return '';
	},
  addMapping: function (container, obj, showToolbox_b, isInvalid, isStatic) {
		//if showToolbox_b = true, the toolbox will be displayed.
    
		var dataKey = tagapi.getDataKeyFromMappingEntry(obj),
			tagId = tagapi.getTagIdByContainerId(container),
			errorMsg = utui.validation.getMessageFromVarReference('manage', tagId, dataKey) || '';

    if(isStatic) {
      dataKey = "static";
      errorMsg = "";
    }

		var $varContainer = $('#' + container + '_mapcontent'),
			$mapSelect = $('#' + container + '_mapselect'),
			getDatasourceDisplayName = function (obj) {
				var dsObj = utui.data.define[obj.dsID];
				var displayType = obj.type;
				var displayKey = obj.key;
				var extObj;
				var extId;

        if(obj.type.indexOf('static.') === 0) {
          return localize.t("tiq.tags.toolbox.custom_value");
        };
        
				// If DOM element...
				if(obj.type === 'dom') {
					displayKey = utui.config.defItems[obj.type + '.' + obj.key];
				}

				// If data source
				if (obj.dsID && dsObj) {
					// If AudienceStream data source use origin_type instead of type
					if (obj.type.indexOf('va') === 0) {
						displayKey = dsapi.getVADataSourceDisplayName(obj.type + '.' + obj.key);
						displayType = utui.util.converter.getAudienceStreamTypeName(dsObj.settings.origin_type);
					}
					else if (dsObj.title) {
						displayKey = dsObj.title;
					}
				}
				// If extension variable
				else if (obj.type.indexOf('customization') === 0) {
					extId = obj.type.substring(13);
					extObj = utui.data.customizations[extId];

					if (utui.profile.import.migrateImportExtensions[obj.type]) {
						displayType = utui.profile.import.migrateImportExtensions[obj.type].title;
					}
					else if (!$.isEmptyObject(extObj)) {
						displayType = _.escape(extObj.title);
					}

					if (!utui.profile.import.migrateImportExtensions[obj.type] && extObj && extObj.id === '100011') {
						displayKey = utui.util.safeEscape(extObj.output);
					}
				}

				return (displayKey || obj.key) + ' (' + (displayType || obj.type) + ')';
			},
			getDisplayType = function(obj) {
				var dsObj = utui.data.define[obj.dsID],
					displayType = obj.type,
					extObj,
					extId;

				// If data source
				if (obj.dsID && dsObj) {
					// If AudienceStream data source use origin_type instead of type
					if (obj.type.indexOf('va') == 0) {
						displayType = utui.util.converter.getAudienceStreamTypeName(dsObj.settings.origin_type);
					}
				}
				// If extension variable
				else if (obj.type.indexOf('customization') === 0) {
					extId = obj.type.substring(13);
					extObj = utui.data.customizations[extId];

					if (utui.profile.import.migrateImportExtensions[obj.type]) {
						displayType = utui.profile.import.migrateImportExtensions[obj.type].title;
					}
					else if (!$.isEmptyObject(extObj)) {
						displayType = _.escape(extObj.title);
					}
				}

				return displayType || obj.type;
			},
			getDisplayKey = function(obj) {
				var dsObj = utui.data.define[obj.dsID],
					displayType,
					displayKey,
					extObj,
					extId;

				// If DOM element...
				if(obj.type === 'dom') {
					displayKey = utui.config.defItems[obj.type + '.' + obj.key];
				}
				// If data source
				else if (obj.dsID && dsObj) {
					// If AudienceStream data source use origin_type instead of type
					if (obj.type.indexOf('va') === 0) {
						displayKey = dsapi.getVADataSourceDisplayName(obj.type + '.' + obj.key);
					}
					else if (dsObj.name) {
						displayKey = dsObj.name;
					}
				}
				// If extension variable
				else if (obj.type.indexOf('customization') === 0) {
					extId = obj.type.substring(13);
					extObj = utui.data.customizations[extId];

					if (!utui.profile.import.migrateImportExtensions[obj.type] && extObj && extObj.id === '100011') {
						displayKey = utui.util.safeEscape(extObj.output);
					}
				}

				return displayKey || obj.key;
			},
			setItemDataView = function(containerRoot, obj) {
				var v = '';

					v += $('<input/>')
						.attr({'id': containerRoot + '_value',
							'name': containerRoot + '_value',
							'type': 'hidden',
							'value': obj.key
						})[0].outerHTML;

					v += $('<input/>')
						.attr({'id': containerRoot + '_type',
							'name': containerRoot + '_type',
							'type': 'hidden',
							'value': obj.type
						})[0].outerHTML;


					if (obj.dsID) {
						v += $('<input/>')
							.attr({'id': containerRoot + '_dsID',
								'name': containerRoot + '_dsID',
								'type': 'hidden',
								'value': obj.dsID
							})[0].outerHTML;
					}

					if (obj.origin_id) {
						v += $('<input/>')
							.attr({'id': containerRoot + '_origin_id',
								'name': containerRoot + '_origin_id',
								'type': 'hidden',
								'value': obj.origin_id
							})[0].outerHTML;
					}
				return v;
			},
			getIcon = function(obj) {
				var type = obj.type;

				if(obj.type === 'va') {
					if(obj.key.split('.')[0] === 'current_visit') {
						type = obj.key.split('.')[1];
					} else {
						type = obj.key.split('.')[0];
					}
				}

				return dsapi.getDataSourceTypeIconByTypeValue(type);
			},
			self = this;

		var _view = {
			mappingEntryItemView: function (container, obj, containerRoot, tooltipObj, validationStatus) {
        var v = '', key = obj.key;

				v = '<li id="' + containerRoot + '" class="managemap_div" data-validation="' + (validationStatus || '') + '">';

        if (obj.type.indexOf("static.") ===0 ) {
          key = container;
        }
        
				v += $('<div/>')
					.css('display', 'none')
					.attr({
            'id': obj.type + '.' + key,
						'class': 'selectMenuID'
					})[0].outerHTML;

				// ----------------------------
				// Destination
				v += '<div class="managemap_item">';
				v += $('<input/>')
					.attr({
						'id': containerRoot + '_variable',
						'name': containerRoot + '_variable',
						'type': 'hidden',
						'class': 'js-variable-input',
						'value': utui.util.safeEscape(obj.variable)
					})[0].outerHTML;

				v += '<div class="js-variable-pills">'+_renderPills(utui.util.safeEscape(obj.variable))+'</div>';
				v += '</div>';

				// ----------------------------
				// Arrow
				v += '<div class="destination-mapped-to" style="width: 12px; position: absolute; top: 0; left: 220px;"></div>';

				// ----------------------------
				// Data Source
				v += '<div class="managemap_label js-edit-mapped-datasource">';
				v += '<div id="' + containerRoot + '_var_input"></div>';
				v += utui.define.getDataSourceMappingItemView(obj, containerRoot);
				v += '</div>';

				// ----------------------------
				// Edit btn
				if(utui.manage.containerMap[container] && typeof utui.config.manageList[utui.manage.containerMap[container].tag_id].toolbox !== 'undefined') {
          var _mappedVar = obj.key.replace(/"/g, '&quot;').replace(/'/g, "\\'") + ' (' + displayType + ')';
          if (displayType.indexOf('static.') === 0) {
            _mappedVar = localize.t("tiq.tags.toolbox.custom_value");
          }
          v += '<span class="btn btn-mini i-color-add" style="top: 9px; right: 42px; position: absolute;" id="' + containerRoot + '_toolbox_tooltip" ' +
            'onclick="utui.manage.mappingToolbox.show(\'' + utui.manage.containerMap[container].tag_id + '\',' +
            '\'' + container + '\',' +
            '\'' + containerRoot + '\',' +
            '\'' + _mappedVar + '\', ' +
            '\''+displayType+'\');" title="' + utui.tooltip.manage.mapping_toolbox + '"><i class="icon-pencil"></i> ' + "Edit" + '</span>';
					tooltipObj[containerRoot + '_toolbox_tooltip'] = {gravity: 'ne'};
				}

				// ----------------------------
				// Remove button
				v += '<div class="managemap_menu">';
				v += '<span class="btn btn-mini i-color-delete" id="' + containerRoot + '_drop_tooltip" onclick="utui.manage.removeVariableMapping(\'' + container + '\',\'' + containerRoot + '\')" title="' + utui.tooltip.manage.mapping_drop + '"><i class="icon-trash"></i></span>';
				tooltipObj[containerRoot + '_drop_tooltip'] = {gravity: 'ne'};
				v += '</div>';

				v += '<div class="managemap_description">' + (errorMsg ? errorMsg : utui.manage.getMappingVariableDescription(obj.key, obj.type)) + '</div>';

				// ----------------------------
				// Hidden input fields (req for saving dialog)
				v += '<div class="managemap_data">';
				v += setItemDataView(containerRoot, obj);
				v += '</div>';

				v += '</li>';

				return v;
			},
			pillStaticItemView: function(value, index) {
				var v = '';
					v += '<div class="destination-item" data-value="'+utui.util.safeEscape(value)+'">';
						v += '<span class="destination-item-body js-action-edit" tabindex="-1" title="'+utui.util.safeEscape(value)+'">'+utui.util.safeEscape(value)+'</span>';
					v += '</div>';
				return v;
			},
			pillConditionalItemView: function(value, index) {
				var v = '';
					v += '<div class="destination-item selectable conditional" data-value="'+utui.util.safeEscape(value)+'">';
						v += '<span class="destination-item-body js-action-edit" tabindex="-1" title="'+utui.util.safeEscape(value)+'">'+utui.util.safeEscape(value)+'</span>';
					v += '</div>';
				return v;
			},
			noPillItemView: function() {
				return '<div style="color: #808080; height: 25px;">No destinations mapped...</div>';
			}
		};

		function _renderPills(varStrings) {
			var collection = varStrings.split(', ');
			var v = '';

			if(collection.length && varStrings.length) {
				for (var i = 0; i < collection.length; i++) {					
					if(~collection[i].indexOf(':')) {
						v += _view.pillConditionalItemView(collection[i]);
					} else {
						v += _view.pillStaticItemView(collection[i]);
					}

				};
			} else {
				v += _view.noPillItemView();
			}

			return v;
		}

		var eventHandler = {
			onEditAddedDataSourceBtnClick: function(e) {
				var containerRoot = $(this).closest('.managemap_div').attr('id');

				var type = $('#'+containerRoot+'_type').val();
				var key = $('#'+containerRoot+'_value').val();
				var dataKey = type+'.'+key;
				var setToValue = dataKey;

				var $editBtn = $('#'+containerRoot).find('.js-edit-mapped-datasource-btn');

				$editBtn.hide();

				$('#'+containerRoot+'_var_readonly').hide();
				$('#'+containerRoot+'_var_input').empty().html( utui.manage.getInputSelect(containerRoot) ).show();
				// $('#'+containerRoot+'_var_input').empty().html( utui.manage.createInlineMappingSelect() ).show();

				var $inputSelect = $('#'+containerRoot+'_inputselect');

				$inputSelect.prepend("<option value=''></option>").val('');

				// Set as Select2
				dsapi.convertSelectListToSelect2(containerRoot + '_inputselect', true);
				$inputSelect.select2({ placeholder: localize.t('tiq.datasources.select_a_datasource')});

				// If dataKey doesn't exist (for validation), show placeholder instead...
				if(dataKey.indexOf('customization') === 0) {
					if(!dsapi.isExistingGlobalVariable(key)) {
						setToValue = ''; // set to placeholder
					}
				}

				// Set value
				$inputSelect.val(setToValue);
				$inputSelect.select2('val',setToValue);


				// If value after set is blank, we've detected a missing variable
				if($inputSelect.select2('val') === '') {
					$('#'+containerRoot).find('.managemap_description').html( utui.validation.message.missingVariable(utui.util.safeEscape(dataKey)) );
					$('#wizard_variables_tab').find('.tab-inline-warning-signal').addClass('active');
				}

				// Bind onChange
				$inputSelect.off('change').on('change', eventHandler.onInputChange);

				$inputSelect.select2("open");

				$inputSelect.on("select2-close", function() {
					if(type === 'va') {
						if(key.split('.')[0] === 'current_visit') {
							type = key.split('.')[1];
						} else {
							type = key.split('.')[0];
						}
					}
					$('#'+containerRoot+'_var_readonly').show().find('.managemap_var_icon').empty().html(dsapi.getDataSourceTypeIconByTypeValue(type));
					$('#'+containerRoot+'_var_input').hide();

					$editBtn.show();

					// set to destroy unused selector.  SetTimeout created to handle timing issue
					setTimeout(function() {
						$inputSelect.select2('destroy');
					}, 10);
				});
			},
			onInputChange: function(e) {
				var $el = $(this),
					value = $el.val(),
					dsData = dsapi.getData(),
					$option = $(this).find('option:selected'),
					key,
					type,
					customizationId,
					dsID,
					description,
					dataKey,
					obj;

				// debugger;

				var getValue = function(value) {
					var arr = value.split('.');
					arr.shift();
					return arr.join('.');
				};

				var _val = getValue($option.val());
				var _type = $option.val().split('.')[0];
				var _dsID = $option.attr('data-define');

				var obj = {
					dsID: _dsID,
					origin_id: $option.data('origin_id'),
					key: _val,
					type: _type
				};

				// Update hidden input fields
				$('#'+containerRoot).find('.managemap_data').empty().html( setItemDataView(containerRoot, obj) );

				var dsDisplayValue = getDisplayKey(obj);
				var $varReadOnly = $('#'+containerRoot+'_var_readonly');
				var $varValue = $varReadOnly.find('.managemap_var_value');
				var $varAlias = $varReadOnly.find('.managemap_var_alias');
				var dsObj = dsapi.getDataSource(_dsID);
				var varName = dsapi.getDataSourceTypeName(_type);
				var setVarName = function(name) {
					$varReadOnly.find('.managemap_var_name').empty().html('<div class="emptySection">' + name + '</div>').attr('title',name);
				};

				$varValue.empty().html(utui.util.safeEscape(dsDisplayValue)).attr('title',dsDisplayValue);

				// standard ds type
				if (_dsID && _type !== 'va') {
					$varValue.addClass('ds-name');
					setVarName(varName);
					var dsTitle = dsObj.title;
					if (dsTitle) {
						var ds_alias = localize.t('tiq.datasources.alias_title', {title: dsTitle});
						if ($varAlias.length) {
							$varAlias.empty().html(ds_alias).attr('title',ds_alias);
						} else {
							$varReadOnly.append('<div class="managemap_var_alias" title="' + ds_alias + '">' + ds_alias + '</div>');
						}
					}

				}
				// visitor attribute ds type
				else if (_dsID && _type === 'va') {
					$varValue.removeClass('ds-name');
					varName = utui.profile.import.AUDIENCE_STREAM + ' ' + utui.util.converter.getAudienceStreamTypeName(dsObj.settings.origin_type);
					setVarName(varName);
					$varReadOnly.find('.managemap_var_alias').remove();

				}
				// extension type
				else {
					$varValue.removeClass('ds-name');
					$varReadOnly.find('.managemap_var_alias').remove();

					if (_type.indexOf('customization') === 0) {
						var extId = _type.substring(13);
						var extObj = utui.data.customizations[extId];

						if (!$.isEmptyObject(extObj)) {
							var extType = (exapi.getTemplateObject(extObj.id).title || '');
							if (extType) {
								extType = '(' + extType + ')'
							}
							varName = localize.t('tiq.datasources.extension_variable', {type: extType});
						}
					}
					setVarName(varName);
				}
				$varReadOnly.find('.managemap_var_icon').empty().html(getIcon(obj));

				description = utui.manage.getMappingVariableDescription(obj.key, obj.type);
				// Update description
				$varReadOnly.attr('title', description);

				var $mapSelect = $('#'+container+'_mapselect');

				// Rerender mapselect
				$mapSelect.select2('destroy');

				$mapSelect.empty().html(utui.manage.createMappingSelect(container, true));
				dsapi.convertSelectListToSelect2(container + '_mapselect');

				self.editTagSettingValidation.dataMappings.setErrorsOnView();
			}
		};



		var getValue = function(value) {
			var arr = value.split('.');
			arr.shift();
			return arr.join('.');
		};


		if (!obj) {
			obj = {
				id: tagapi.getTagIdByContainerId(container),
				variable: ''
      };
      if(!isStatic) {
			var $option = $mapSelect.find('option:selected');

			var _val = getValue($option.val());
			var _type = $option.val().split('.')[0];
			var _dsID = $option.attr('data-define');

        obj = _.extend(obj, {
				dsID: _dsID,
				origin_id: $option.data('origin_id'),
				key: _val,
				type: _type
        });
      } else {
        obj = _.extend(obj, {
          dsID: '',
          key: "",
          type: "static.text",
          id : obj.id +"_"+ (new Date().getTime())
        });
      }
		}
		// Fixing a bug that added multiple spaces between values - if more than one space is detected after a comma, replace all instances with a sinlge space
		else if (obj.variable && /, {2,}/.test(obj.variable)) {
			obj.variable = obj.variable.replace(/, */g, ", ");
		}

		// Remove added item from drop down list
    if (!isStatic) {
		$mapSelect.find('option[value="' + obj.type + '.' + obj.key + '"]').remove();
		dsapi.convertSelectListToSelect2(container + '_mapselect', true);
    } else {
      $mapSelect.select2('close');
    }

		// If adding through define and set, refresh cache
		if (showToolbox_b) {
			this.getOptionForSelect();
		}

		// --------------------------------------------
		// Get Display Type and Display Key
		var dsDisplayName = getDatasourceDisplayName(obj);
		var displayType = getDisplayType(obj);
		var itemId = utui.util.getContainerId();
		var containerRoot = container + '_map_' + itemId;
		var tooltipObj = {};
		var content = _view.mappingEntryItemView(container, obj, containerRoot, tooltipObj);

		$varContainer.append(content);

		// -----------------------------------
		// Bind buttons
		$('#'+containerRoot).find('.js-edit-mapped-datasource').off('click').on('click', eventHandler.onEditAddedDataSourceBtnClick);

		tooltipObj[containerRoot+'_toolbox_tooltip'] = { gravity: 'ne' };


		// Scroll to the newly added item
		var topOffset = ~~$varContainer.find('#' + containerRoot).position().top;
		$varContainer.scrollTop(topOffset);
		$varContainer.sortable();


		if (showToolbox_b) {
			if (typeof utui.config.manageList[utui.manage.containerMap[container].tag_id].toolbox != 'undefined') {
				// show toolbox
				utui.manage.mappingToolbox.show(utui.manage.containerMap[container].tag_id, container, containerRoot, dsDisplayName, displayType);
				self.editTagSettingValidation.dataMappings.setErrorsOnView();
			}
		}

		utui.util.addTooltip(tooltipObj);

		$('#wizard_variables_wrapper').find('.noItemsMapVariable').hide();
	},

	renderMappingPills: function(containerRoot, varStrings) {

		var view = {
			pillStaticItemView: function(value, index) {
				var v = '';
					v += '<div class="destination-item" data-value="'+utui.util.safeEscape(value)+'">';
						v += '<span class="destination-item-body js-action-edit" tabindex="-1" title="'+utui.util.safeEscape(value)+'">'+utui.util.safeEscape(value)+'</span>';
					v += '</div>';
				return v;
			},
			pillConditionalItemView: function(value, index) {
				var v = '';
					v += '<div class="destination-item selectable conditional" data-value="'+utui.util.safeEscape(value)+'">';
						v += '<span class="destination-item-body js-action-edit" tabindex="-1" title="'+utui.util.safeEscape(value)+'">'+utui.util.safeEscape(value)+'</span>';
					v += '</div>';
				return v;
			},
			noPillItemView: function() {
				return '<div style="color: #808080; height: 25px;">No destinations mapped...</div>';
			}
		};

		var collection = varStrings.split(', ');
		var v = '';

		if(collection.length && varStrings.length) {
			for (var i = 0; i < collection.length; i++) {
				if(~collection[i].indexOf(':')) {
					v += view.pillConditionalItemView(collection[i]);
				} else {
					v += view.pillStaticItemView(collection[i]);
				}
			};
		} else {
			v += view.noPillItemView();
		}


		$('#'+containerRoot).find('.js-variable-pills').html(v);
	},

	editTagSettingValidation: {
		dataMappings: {
			setErrorsOnView: function() {
				var dupStack = this.getMultipleSelectedValues(),
					tagId = $('#manage_editmapping_id').val(),
					missingStack = [],
					hasError = false,
					self = this;

				var validationMap = utui.validation.getMap('manage',tagId);

				for (var key in validationMap) {
					if(validationMap[key].type === 'missing') {
						missingStack.push(validationMap[key].reference);
					}
				};

				// Remove all descriptions
				$('#wizard_variables_wrapper').find('.managemap_description').empty();

				// Iterate through the dialog and set the condition
				$('#wizard_variables_wrapper').find('.managemap_data').each(function() {
					var $el = $(this),
						containerId = $el.closest('.managemap_div').attr('id');

					var dataKey;
					var type = $('#'+containerId+'_type').val();
					var value = $('#'+containerId+'_value').val();

					if(type.indexOf('customization') === 0) {
						dataKey = value;
					} else {
						dataKey = type + '.' + value;
					}

					// If dataKey is missing
					if(~missingStack.indexOf(dataKey)) {
						hasError = true;
						$('#'+containerId).find('.managemap_description').html( utui.validation.message.missingVariable(utui.util.safeEscape(dataKey)) );
					}
					// If dataKey is a duplicate
					else if(~dupStack.indexOf(dataKey)) {
						hasError = true;
          if(type.indexOf('static.') === 0) {
              dataKey = value;
            }
						$('#'+containerId).find('.managemap_description').html( utui.validation.message.duplicateEntry(utui.util.safeEscape(dataKey)) );
					}
					else {
						// show original description
						$('#'+containerId).find('.managemap_description').html( utui.manage.getMappingVariableDescription(value, type) );
					}
				});

				if(hasError) {
					$('#wizard_variables_tab').find('.tab-inline-warning-signal').addClass('active');
					return;
				}

				$('#wizard_variables_tab').find('.tab-inline-warning-signal').removeClass('active');
			},
			getMultipleSelectedValues: function() {
				var contentArray = [],
					dupStack = [],
					findDuplicates = function(arr) {
						var len=arr.length,
							out=[],
							counts={};

						for (var i=0;i<len;i++) {
							var item = arr[i];
							counts[item] = counts[item] >= 1 ? counts[item] + 1 : 1;
						};

						for (var item in counts) {
							if(counts[item] > 1)
								out.push(item);
						};

						return out;
					}

				$('#wizard_variables_wrapper').find('.managemap_data').each(function() {
					var $el = $(this),
						containerId = $el.closest('.managemap_div').attr('id');

					var type = $('#'+containerId+'_type').val();
					var value = $('#'+containerId+'_value').val();
					var dataKey = type + '.' + value;

					contentArray.push(dataKey);
				});

				// $('#wizard_variables_wrapper').find('select[data-list-type="loadrules"]').each(function(){
				// 	contentArray.push($(this).val());
				// });

				// sort array in alphabetical order
				dupStack = findDuplicates(contentArray);

				return dupStack;

			}
		}
	},
	removeVariableMapping: function (container, itemId) {
		var value = $("#" + itemId + "_value").val(),
			type = $("#" + itemId + "_type").val(),
			dsID = $("#" + itemId + "_dsID").val(),
			origin_id = $("#" + itemId + "_origin_id").val(),
			displayType = type,
			displayValue = value,
			dsObj = utui.data.define[dsID];

		if (dsID && dsObj) {
			// If AudienceStream data source use origin_type instead of type
			if (type.indexOf('va') == 0) {
				displayType = dsObj.settings.origin_type;
				displayValue = dsObj.name;
			} else if (dsObj.title) {
				displayValue = dsObj.title;
			}
		} else if (type.indexOf('customization') == 0) {
			if (utui.profile.import.migrateImportExtensions[type]) {
				displayType = utui.profile.import.migrateImportExtensions[type].title;
			}
			else {
				var x = type.substring(13);
				displayType = _.escape(utui.data.customizations[x].title);
			}
		}

		var $mapSelect = $('#' + container + '_mapselect optgroup[data-type="' + displayType + '"]');
    
    if (type.indexOf("static") === -1) {
		if ($mapSelect.length !== 0) {
			// append to all variable select lists that are in scope
			$mapSelect.append(
				$('<option/>')
					.text(_.unescape(displayValue))
					.val(type + '.' + value)
            .attr({
              'data-define': dsID,
						'data-origin_id': origin_id,
              'data-type': displayType
            })
			);
		} else {
			// append the group
			var $group = $('<optgroup/>', {
				'label': dsapi.getDataSourceTypeName(type),
          'data-type': type
        }).appendTo($('.variableSelect').not('.select2-container'));

			// append the option
			$group.append(
				$('<option/>')
					.text(_.unescape(displayValue))
					.val(type + '.' + value)
            .attr({
              'data-define': dsID,
						'data-origin_id': origin_id,
              'data-type': displayType
            })
			);
		}
		dsapi.convertSelectListToSelect2(container + '_mapselect', true);
    }

		var size = $('#' + container + '_mapselect option').length;
		$('#' + container + '_add').show();
		$('#' + itemId).remove();

		var mappingCount = $('#wizard_variables_wrapper li.managemap_div').length;
		if (mappingCount < 1) {
			$('#wizard_variables_wrapper .noItemsMapVariable').show();
		}

		// run validation
		this.editTagSettingValidation.dataMappings.setErrorsOnView();
	},
	// ----------------------------------------------------------------
	createMappingSelect: function (container, isTriggeredFromInline) {
		var currentMappings = {},
			tagObj = utui.manage.containerMap[container],
			selectArr = [];

		var listContainer = container+'_mapcontent';

		var currentMappingsCollection = [];
		var dataKey;

		// If call is invoked via inline mapping selections
		if(isTriggeredFromInline) {
			// Read through DOM and store used values
			$('#'+listContainer).find('.managemap_div').each(function() {
				var containerRoot = $(this).attr('id');
				var type = $('#'+containerRoot+'_type').val();
				var key = $('#'+containerRoot+'_value').val();

				dataKey = type+'.'+key;

				currentMappings[dataKey] = 1;
				// currentMappingsCollection.push(dataKey);
			});
		}
		else {
			// Mapped Variables only able to be selected once per tag so do NOT add them to the list here
			for (var m in tagObj.map) {
				var tagMap = tagObj.map[m];

				dataKey = tagMap.type+'.'+tagMap.key;
				currentMappings[dataKey] = 1;

				// currentMappingsCollection.push(dataKey);
			}
		}

		// --------
		// DOM Items
		var domItems = utui.util.getVars(utui.config.defItems);
		for (var j in domItems) {
			// if(!currentMappings[j]) {
			if(!currentMappings[j]) {
				selectArr.push({
					html: '<option title="' + localize.t('tiq.tags.dom_value') + ' ' + domItems[j] + '" value="' + j + '" data-type="dom">' + domItems[j] + '</option>',
					variable: domItems[j],
					type: 'dom'
				});
			}
		}

		// --------
		// Data Source Items
		var dataSourceItems = utui.util.getVars(utui.data.define);
		for (j in dataSourceItems) {
			var ds = utui.data.define[j],
				k = ds.name,
				title = ds.title || k,
				t = ds.type,
				d = ds.description,
				id = ds._id,
				origin_id = (ds.settings && ds.settings.origin_id + ds.settings.profileid) ? t + '.' + ds.settings.origin_id + '.' + ds.settings.profileid : '',
				value = t + '.' + k;

			// If AudienceStream data source use origin_type instead of type
			if (ds.imported && ds.imported === utui.profile.import.AUDIENCE_STREAM) {
				if (ds.context !== 'visitor') {
					value = ds.type + '.' + ds.context + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				}
				else {
					value = ds.type + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				}

				t = ds.settings.origin_type;
			}

			if (!currentMappings[value]) {
				selectArr.push({
					html: $('<option/>')
						.text(utui.util.safeUnescape(title))
						.attr({'value': utui.util.safeUnescape(value),
							'title': d,
							'data-define': id,
							'data-origin_id': origin_id,
							'data-type': t
						})[0].outerHTML,
					variable: title + " (" + t + ")",
					type: t
				});
			}
		}

		// ---------
		// Extensions
		for (j in utui.util.getVars(utui.data.customizations)) {

			if (/global|preload|domready/.test(utui.data.customizations[j].scope) || utui.data.customizations[j].scope == this.containerMap[container].id) {
				var d = utui.data.customizations[j].output, outputs = [];

				if (d && d.length > 0) {
					var drep = d.replace(", ", ",");
					outputs = drep.split(",");

					for (k = 0; k < outputs.length; k++) {
						value = 'customization' + j + '.' + outputs[k];
						if (utui.define.isInvalidVariableName(outputs[k])) { continue; }
						if (!currentMappings[value]) {
							if (utui.data.customizations[j].title) {
								selectArr.push({
									html: $('<option/>')
										.text(utui.util.safeUnescape(outputs[k]))
										.attr({'value': utui.util.safeUnescape(value),
											'title': outputs[k],
											'data-type': utui.data.customizations[j].title})[0].outerHTML,
									variable: outputs[k] + " (" + utui.data.customizations[j].title + ")",
									type: utui.data.customizations[j].title
								});
							}
							else {
								selectArr.push({
									html: $('<option/>')
										.text(utui.util.safeUnescape(outputs[k]))
										.attr({'value': utui.util.safeUnescape(value),
											'title': outputs[k]})[0].outerHTML,
									variable: outputs[k],
									type: ""
								});
							}
						}
					}
				}
			}
		}
		//TASK: TY commented this out.. hope that is OK.. may not need map_outputs any more?
		/*
		 for(j in utui.util.getVars(utui.customizations.map_outputs)){
		 var obj = utui.customizations.map_outputs[j];
		 selectArr.push("<option title='"+obj.key+"' value='"+obj.value+"'>"+obj.key+" ("+obj.title+")</option>");
		 }
		 */

		// sort and group the options by type then sort
		// this will sort the groups in alphabetical order with items within groups in order too
		var groupedOptions = _.groupBy(_.sortBy(selectArr, function (option) {
			var optionType = option.type.toLowerCase();
			return (optionType === 'dom') ? -1 : optionType;
		}), 'type');

		var htmlResult = "";

		_.each(groupedOptions, function (selectArr, key) {
			// sort by variable
			var sortedVariables = _.sortBy(selectArr, function (option) {
				return option.variable.toLowerCase();
			});

			// append group identifier
			htmlResult += '<optgroup label="' + dsapi.getDataSourceTypeName(key) + '" data-type="' + key + '">';

			_.each(sortedVariables, function (option) {
				// append the option html
				htmlResult += option.html;
			});
		});

		return htmlResult;
	},
	// ----------------------------------------------------------------
	createInlineMappingSelect: function (container, isTriggeredFromInline) {
		var currentMappings = {},
			selectArr = [];

		// --------
		// DOM Items
		var domItems = utui.util.getVars(utui.config.defItems);
		for (var j in domItems) {
			selectArr.push({
				html: '<option title="' + localize.t('tiq.tags.dom_value') + ' ' + domItems[j] + '" value="' + j + '" data-type="dom">' + domItems[j] + '</option>',
				variable: domItems[j],
				type: 'dom'
			});
		}

		// --------
		// Data Source Items
		var dataSourceItems = utui.util.getVars(utui.data.define);
		for (j in dataSourceItems) {
			var ds = utui.data.define[j],
				k = ds.name,
				title = ds.title || k,
				t = ds.type,
				d = ds.description,
				id = ds._id,
				origin_id = (ds.settings && ds.settings.origin_id + ds.settings.profileid) ? t + '.' + ds.settings.origin_id + '.' + ds.settings.profileid : '',
				value = t + '.' + k;

			// If AudienceStream data source use origin_type instead of type
			if (ds.imported && ds.imported === utui.profile.import.AUDIENCE_STREAM) {
				if (ds.context !== 'visitor') {
					value = ds.type + '.' + ds.context + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				}
				else {
					value = ds.type + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				}

				t = ds.settings.origin_type;
			}

			if (!currentMappings[value]) {
				selectArr.push({
					html: $('<option/>')
						.text(utui.util.safeUnescape(title))
						.attr({'value': utui.util.safeUnescape(value),
							'title': d,
							'data-define': id,
							'data-origin_id': origin_id,
							'data-type': t
						})[0].outerHTML,
					variable: title + " (" + t + ")",
					type: t
				});
			}
		}

		for (j in utui.util.getVars(utui.data.customizations)) {
			if (/global|preload/.test(utui.data.customizations[j].scope) || utui.data.customizations[j].scope == utui.manage.containerMap[container].id) {
				var d = utui.data.customizations[j].output, outputs = [];

				if (d && d.length > 0) {
					var drep = d.replace(", ", ",");
					outputs = drep.split(",");

					for (k = 0; k < outputs.length; k++) {
						value = 'customization' + j + '.' + outputs[k];
						if (utui.define.isInvalidVariableName(outputs[k])) { continue; }
						if (!currentMappings[value]) {
							if (utui.data.customizations[j].title) {
								selectArr.push({
									html: $('<option/>')
										.text(utui.util.safeUnescape(outputs[k]))
										.attr({'value': utui.util.safeUnescape(value),
											'title': outputs[k],
											'data-type': utui.data.customizations[j].title})[0].outerHTML,
									variable: outputs[k] + " (" + utui.data.customizations[j].title + ")",
									type: utui.data.customizations[j].title
								});
							}
							else {
								selectArr.push({
									html: $('<option/>')
										.text(utui.util.safeUnescape(outputs[k]))
										.attr({'value': utui.util.safeUnescape(value),
											'title': outputs[k]})[0].outerHTML,
									variable: outputs[k],
									type: ""
								});
							}
						}
					}
				}
			}
		}
		//TASK: TY commented this out.. hope that is OK.. may not need map_outputs any more?

		// sort and group the options by type then sort
		// this will sort the groups in alphabetical order with items within groups in order too
		var groupedOptions = _.groupBy(_.sortBy(selectArr, function (option) {
			var optionType = option.type.toLowerCase();
			return (optionType === 'dom') ? -1 : optionType;
		}), 'type');

		var htmlResult = "";

		_.each(groupedOptions, function (selectArr, key) {
			// sort by variable
			var sortedVariables = _.sortBy(selectArr, function (option) {
				return option.variable.toLowerCase();
			});

			// append group identifier
			htmlResult += '<optgroup label="' + dsapi.getDataSourceTypeName(key) + '" data-type="' + key + '">';

			_.each(sortedVariables, function (option) {
				// append the option html
				htmlResult += option.html;
			});
		});

		return htmlResult;
	},
	toggleEditRecord:function (id) {
		if ($('#' + id).is(':visible')) {
			this.hideEditRecord(id);
		} else {
			this.editRecord(id);
		}
	},
	editRecord:function (id) {
		if (this.lastEdit != 0) {
			this.hideEditRecord(this.lastEdit);
		}
		$('#' + id + 'show').hide();
		$('#' + id).show();
		$('#' + id).select();

		this.lastEdit = id;
	},
	hideEditRecord:function (id) {
		$('#' + id).hide();
		$('#' + id + 'show').show();
		$('#' + id + 'show').html($('#' + this.lastEdit).val());
	},
	getTagObjectById:function(tagid) {
		var tagContainers = utui.manage.containerMap;
		for(var key in tagContainers) {
			var tagObj = tagContainers[key];
			if (tagObj.id == tagid) {
				return tagObj;
			}
		}
	},
	getCustomTargetSelectOptions:function(){
		var content = '';
		var customTargets = utui.targets.getList('custom');
		if(customTargets) {
			var customTargetSize = customTargets.length;

            content += '<option value="allCustomTargets">' + localize.t('tiq.tags.all_custom_environments') + '</option>';
            for(var i=0; i < customTargetSize; i++) {
                content += '<option value="'+ customTargets[i] + '">' + customTargets[i] + '</option>';
            }
        }

		return content;
	},
	getTagNameById:function(tagid) {
		var result = (tagid) ? utui.config.manageList[tagid].title : '';
		return result;
	},
	getTagCategoryById:function(tagid) {
		var tagGroup = utui.config.manageList[tagid].group;
		if(tagGroup)
			return utui.config.manageGroup[tagGroup].text;
		return '';
	},

	// -------------------------------------------------
	validationMap: {},

	// -------------------------------------------------
	renderCautionOnAccordions: function() {
		var data = utui.data.manage,
			tagId;

		// ------------------------
		// check tag models
		for(tagId in data) {
			utui.manage.validateModel(tagId);
		}

		// ------------------------
		// set validation on view
		for(tagId in data) {
			utui.manage.validateView(tagId);
		}
	},

	validateModel: function(tagId) {
		var tagObj = tagapi.getObjectByTagId(tagId),
			conditionObj = utui.util.interpret.tag.configuration.toFormatted(tagObj),
			arrayLocation = '',
			mappingCollection = tagapi.getTagMappingsByTagId(tagId, true),
			keyCollection = mappingCollection.map(function(entry) { return entry.type + '.' + entry.key }),
			findDuplicates = function(arr) {
				var len=arr.length,
					out=[],
					counts={};

				for (var i=0;i<len;i++) {
					var item = arr[i];
					counts[item] = counts[item] >= 1 ? counts[item] + 1 : 1;
				}

				for (var item in counts) {
					if(counts[item] > 1)
						out.push(item);
				}

				return out;
			},
			dupStack = findDuplicates(keyCollection),
			mappedInstanceObj,
			dataKey,
			andCondition;

		utui.validation.removeInstanceByTypeAndId('manage',tagId);
		delete utui.manage.validationMap[tagId]; // rb - do we need this??

		// validate mappings
		for (var i = mappingCollection.length - 1; i >= 0; i--) {
			mappedInstanceObj = mappingCollection[i];

			if(mappedInstanceObj.type.indexOf('customization') === 0) {
				dataKey = mappedInstanceObj.key;
			}
      else if(mappedInstanceObj.type.indexOf('static.') === 0) {
        continue;
      }
			else {
				dataKey = mappedInstanceObj.type + '.' + mappedInstanceObj.key;
			}

			dataKey = dsapi.safeEscapeDataKey(dataKey);

			if(!dsapi.isExistingGlobalVariable(dataKey)) {
				arrayLocation = '' + i + ':key';

				utui.validation.setValidation('manage',tagId, arrayLocation, utui.validation.message.missingVariable( dataKey ), 'missing', dataKey);
			}
			else if(~dupStack.indexOf(dataKey)) {
				arrayLocation = '' + i + ':key';

				utui.validation.setValidation('manage',tagId, arrayLocation, utui.validation.message.duplicateEntry( dataKey ), 'duplicate', dataKey);
			}
		};

		// validate load rules
		var loadruleCollection = tagapi.getScopedLoadRulesByTagId(tagId, true);
		var loadruleId;
		var tempStorage = utui.diff.tempStorage.getAll();
		var referencedLoadrule = {};

		for (var i = 0; i < loadruleCollection.length; i++) {
			loadruleId = loadruleCollection[i];

			if(loadruleId !== 'all' && $.isEmptyObject(utui.data.loadrules[loadruleId])) {

				if(!$.isEmptyObject(tempStorage.loadrules[loadruleId])) {
					referencedLoadrule = tempStorage.loadrules[loadruleId];

					if(!$.isEmptyObject(referencedLoadrule['imported'])) {
						// Remove inherited properties
						delete referencedLoadrule['imported'];
						delete referencedLoadrule['settings'];
						delete referencedLoadrule['editable'];
						delete referencedLoadrule['oldId'];
					}

					// store in validation
					utui.validation.setValidation('manage', tagId, 'loadrule:'+loadruleId, utui.validation.message.missingLoadrule(), 'missing', referencedLoadrule);
				}
				// TODO: create a storage for removed load rules from inheritance
				else if ($.isEmptyObject(tempStorage.loadrules[loadruleId])) {
					utui.validation.setValidation('manage', tagId, 'loadrule:'+loadruleId, utui.validation.message.missingLoadrule(), 'missing');
				}
			}
		};
	},

	validateView: function(tagId) {
		var containerId = tagapi.getContainerIdByTagId(tagId),
			entryCollection = utui.validation.getMap('manage');

		utui.manage.removeAccordionWarning(containerId);

		if(!$.isEmptyObject(entryCollection[tagId])) {
			utui.manage.showAccordionWarning(containerId, entryCollection[tagId].length);
			utui.manage.validationMap[tagId] = true;
		}
	},

	// -------------------------------------------------
	showAccordionWarning: function(containerId, count) {
		$('#'+containerId).find('.container_warning').addClass('active').find('.count').html(count);
		$('#'+containerId).find('.main-header').html('<div class="js-accordion-header-notification js-accordion-error section-padded text-center bg-danger">'+localize.t('tiq.ext.attention_is_required')+'</div>');
	},

	// -------------------------------------------------
	removeAccordionWarning: function(containerId) {
		$('#'+containerId).find('.container_warning').removeClass('active').find('.count').empty();
		$('#'+containerId).find('.js-accordion-error').remove();
	},

	// ----------------------------------------------------------------
	// Functionality to parse a tag snippet to extract configuration settings to populate fields with
	tagSnippet:function() {
		// Private API
		// ----------------------------------------------------------------
		function _showError(message) {
			$('.code-snippet-error').html(message).slideDown(300);
		}
		// ----------------------------------------------------------------
		function _hideError() {
			$('.code-snippet-error').slideUp(300);
		}

		// Public API
		// ----------------------------------------------------------------
		var _public = {
			// ------------------------------------------------------------
			// Loads all the supported tags every time a new account is loaded
			onAccountChanged:function() {
				var url = utui.service.addParamsToURL(utui.service.restapis.TAG_CONFIG_SUPPORTED_TAGS);
				utui.service.get(url, null, null,
					function(data){
						if (data) {
							utui.account.supported_code_snippet_tags = data;
						}
					}, null
				);
			},

			// ------------------------------------------------------------
			// Triggered when the Extract From Code button is clicked
			showExtractCodeDialog:function() {
				var $basicSettings = $('#tagConfigBasicSettings');

				$basicSettings.find('.wizard_config').hide();
				$basicSettings.find('.code-snippet-txt').show();
				$('#code_snippet_script').focus();
			},

			// ------------------------------------------------------------
			// Triggered when the Cancel button is clicked or upon success of code extraction
			hideExtractCodeDialog:function() {
				_hideError();

				var $basicSettings = $('#tagConfigBasicSettings');

				$basicSettings.find('.wizard_config').show();
				$basicSettings.find('.code-snippet-txt').hide();
				$('#code_snippet_script').val('');
			},

			// ------------------------------------------------------------
			// Triggered when the Extract button is clicked
			onExtractCode:function(container, tagId) {
				_hideError();

				// Do some validation then send to server and wait response
				var $scriptField = $('#code_snippet_script'),
					snippet = $scriptField.val() || '';
				if (snippet.trim() === '') {
					_showError(localize.t('tiq.tags.error.please_enter_tag_code'));
					$scriptField.focus();

				} else {
					utui.util.showSpinner();

					_public.getTagFromSnippet(tagId, snippet,
						function(data) {
							utui.util.hideSpinner();

							// Do we have a result?
							if (data && data.fields) {
								// Populate fields then hide snippet dialog
								_public.updateFields(container.id, data.fields);
								_public.hideExtractCodeDialog();

							} else {
								// Show no tag found error
								_showError(localize.t('tiq.tags.error.no_configuration_settings_detected'));
							}
						},
						function(status, response) {
							utui.util.hideSpinner();

							if (response && response.status === 400) {
								// Show incorrect tag error
								_showError(localize.t('tiq.tags.error.tag_code_does_not_match'));

							} else {
								// Show no tag found error
								_showError(localize.t('tiq.tags.error.no_configuration_settings_detected'));
							}
						}
					);
				}
			},

			// ------------------------------------------------------------
			// Updates the values of the specified in the container
			updateFields:function(containerId, fields) {
				// Iterate of all the fields to update their values
				for (var fieldId in fields) {
					var $input = $('#' + containerId + '_config_' + fieldId);

					// If input is found then populate it
					if ($input[0]) {
						$input.val(fields[fieldId]);
					}
				}
			},

			// ------------------------------------------------------------
			// This will return 1 matched tag with the data from the specified snippet of code
			getTagFromSnippet:function(tagId, snippet, cbSuccess, cbError) {
				var url = utui.service.addParamsToURL((tagId ? utui.service.restapis.TAG_CONFIG_WITH_TAGID : utui.service.restapis.TAG_CONFIG), {tagId:tagId});
				utui.service.post(url, {code_snippet:snippet}, utui.service.options.FORM, cbSuccess, cbError);
			}
		}
		return _public;
	}(),
	// ----------------------------------------------------------------
	destination: function() {
		var _savedData = {};
		var _inProgressData = {};

		var _helper = {
			getContainerId: function(tagId) {
				if(!utui.manage.containerMap) return;

				for (var key in utui.manage.containerMap) {
					if(+utui.manage.containerMap[key].id === +tagId) {
						return key;
					}
				}

				return;
			}
		}

		function _storeTagDestinationsInData(destinationStr, dataKey, dataCollection) {
			// Remove spaces between comma-deliminated lists for easier parse.
			var destinationCollection = destinationStr.replace(/[\s,]+/g, ',').split(',');
			var dItemSplit = [];
			var destinationArr;
			var destinationItem;

			for (var i = 0; i < destinationCollection.length; i++) {
				destinationItem = destinationCollection[i]

				// if destination includes a trigger value, parse the destination
				if(~destinationItem.indexOf(':')) {
					dItemSplit = destinationItem.split(':');
					destinationItem = dItemSplit[dItemSplit.length - 1];
				}

				// if destination doesn't exist in the collection, add it
				if($.isEmptyObject(dataCollection[destinationItem])) {
					dataCollection[destinationItem] = [];
				};

				destinationArr = dataCollection[destinationItem];

				if(!~destinationArr.indexOf(dataKey)) {
					dataCollection[destinationItem].push(dataKey);
				}
			};
		}

		/*
		 *  These are taking destinations that are to be saved (in progress of editing)
		 */
		function _initInProgress(tagId) {

			// We will need to scrap the data from the DOM since that's how data mappings stores into into the tag
			var containerId = _helper.getContainerId(tagId);
			var $mainMappingContainer = $('#'+containerId+'_mapcontent');

			_inProgressData = {};

      $mainMappingContainer.find('.managemap_div').each(function (i) {
				var $el = $(this);
				var dataKey = $el.find('.selectMenuID').attr('id');
        
				var destinationStr = $el.find('.managemap_item').find('input').val();

        if (destinationStr !== '') {
					_storeTagDestinationsInData(destinationStr, dataKey, _inProgressData);
				}
			});
		}


		/*
		 *  These are taking destinations that are actually saved within the tag object (excludes any in progress saves)
		 */
		function _initSaved(tagId) {
			var tagObj = utui.data.manage[tagId];
			var mapCollection = tagObj.map;

			_savedData = {};

			for(var index in mapCollection) {
				var mapItem = mapCollection[index];
				var destinationStr = mapItem.variable;
				var type = mapItem.type;
				var key = mapItem.key;
				var dsID = mapItem.dsID;

				var dataKey = type + '.' + key;

				if(destinationStr !== '') {
					_storeTagDestinationsInData(destinationStr, dataKey, _savedData);
				}
			}
		}

		return {
			getInProgressMap: function(tagId) {
				_initInProgress(tagId);

				return _inProgressData;

			},
			getSavedMap: function(tagId) {
				_initSaved(tagId);

				return _savedData;

			}
		}
	}(),
	restoreLoadRuleDialog: function() {

		// --------------------------------------------
		var _dialogNamespace = 'reviewMissingLoadrule_dialog';
		var _templateModal = utui.ui.template.modal();
		var _templateAccordion = utui.ui.template.accordion;

		var _missingLoadruleObj = {};
		var _tagId;

		// ------------------------------------
		var _view = {
			// ------------------------------------
			headerItemView: function(content) {
				content = '<h2>'+localize.t('tiq.validation.restore_loadrule_dialog.title')+'</h2>';
				content += '<p>'+localize.t('tiq.validation.restore_loadrule_dialog.context')+'</p>';

				var v = '';

					v += '<div class="container-fluid">';
						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += content;
							v += '</div>';
						v += '</div>';
					v += '</div>';

				return v;
			},
			// ------------------------------------
			missingCollectionView: function() {
				var v = '';

					v += '<div class="container-fluid">';
						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += '<div class="table-container"></div>';
							v += '</div>';
						v += '</div>';
					v += '</div>';

				return v;
			},
			// ------------------------------------
			missingEntryItemView: function(id, title) {
				var v = '';

					v += '<div class="missing-loadrule-item item-container" data-id="'+id+'">';
						v += '<div class="header">';
							v += '<div class="status-icon">'+_view._warningIcon()+'</div>';
							v += '<div class="title">'+title+'</div>';
							v += '<div class="status-message"></div>';
							v += '<div class="action-container">';
								v += '<span class="btn js-btn-restore">'+_view._resolvedIcon()+' '+localize.t('tiq.validation.restore_loadrule_dialog.restore')+'</span>';
								v += '<span class="btn js-btn-discard" style="margin-left:8px">'+_view._discardedIcon()+' '+localize.t('tiq.validation.restore_loadrule_dialog.discard')+'</span>';
							v += '</div>';
						v += '</div>';
						v += '<div class="content"></div>';
						v += '<input type="hidden" data-id="'+id+'" value="untouched" />';
					v += '</div>';

				return v;
			},
			// ------------------------------------
			noEntryItemView: function() {
				var content = '<i class="icon-check" style="font-size: 30px; color: green; position: relative; top: 5px; left: -4px;"></i> '+localize.t('tiq.validation.restore_loadrule_dialog.all_items_resolved');
				var v = '';

					v += '<div class="no-view-container" style="font-size: 18px; position: relative; top: 100px; text-align: center; display: block; color:#666">'+content+'<div>';

				return v;
			},
			_resolved: function() {
				return localize.t('tiq.validation.restore_loadrule_dialog.loadrule_to_be_added')+' <span class="btn btn-mini js-btn-undo">'+localize.t('tiq.validation.restore_loadrule_dialog.undo')+'</span>';
			},
			_discarded: function() {
				return localize.t('tiq.validation.restore_loadrule_dialog.loadrule_to_be_discarded')+' <span class="btn btn-mini js-btn-undo">'+localize.t('tiq.validation.restore_loadrule_dialog.undo')+'</span>';
			},
			_resolvedIcon: function() {
				return '<i class="icon-ok"></i>';
			},
			_discardedIcon: function() {
				return '<i class="icon-remove"></i>';
			},
			_warningIcon: function() {
				return '<i class="icon-warning-sign"></i>';
			}
		};

		// ------------------------------------
		var _viewModel = {
			// ------------------------------------
			showMissingCollection: function() {
				var v = '';
				var item;

				for (var key in _missingLoadruleObj) {
					item = _missingLoadruleObj[key];

					v += _view.missingEntryItemView(item.id, item.title);
				};

				$('#'+_dialogNamespace).find('.table-container').html(v);

				// bind
				_bindUI.itemToggle();
				_bindUI.discardItem();
				_bindUI.restoreItem();
				_bindUI.undoDiscardItem();

			}
		};

		// ------------------------------------
		var _render = {
			// ------------------------------------
			modalHead: function() {},
			// ------------------------------------
			modalBody: function() {
				$('#'+_dialogNamespace).find('.modal-body').html( _templateAccordion );
			}
		};

		// --------------------------------------------
		var _bindUI = {
			itemToggle: function() {
				$('#'+_dialogNamespace).on('click', '.header', _eventHandler.onEntryClick);
			},
			discardItem: function() {
				$('#'+_dialogNamespace).on('click','.js-btn-discard', _eventHandler.onDiscardItemClick);
			},
			restoreItem: function() {
				$('#'+_dialogNamespace).on('click','.js-btn-restore', _eventHandler.onRestoreItemClick);
			},
			undoDiscardItem: function() {
				$('#'+_dialogNamespace).on('click','.js-btn-undo', _eventHandler.onUndoDiscardItemClick);
			}
		};

		// --------------------------------------------
		var _eventHandler = {
			// --------------------------------------------
			onCloseBtnClick: function(e) {
				_missingLoadruleObj = {};

				utui.ui.dialog.dispose(_dialogNamespace);
			},
			// --------------------------------------------
			onApplyBtnClick: function(e) {
				// run apply script
				var $inputCollection = $('#'+_dialogNamespace).find('.table-container').find('input');
				var restoreCollection = [];
				var discardCollection = [];
				var untouchedCollection = [];
				var id;
				var value;
				var item;
				var obj;

				var addLoadrule = function(obj) {
					var containerId, loadRule, id;

					if (obj.status !== 'active') {
						obj.status = 'inactive';
					}

					obj.editable = "true";

					containerId = utui.loadrules.addItem(obj.id, obj);

					loadRule = utui.loadrules.containerMap[containerId];

					utui.data.loadrules[loadRule.id] = loadRule;

					utui.loadrules.view.updateAccordion(true);

					return loadRule.id;
				};

				$inputCollection.each(function() {
					id = $(this).attr('data-id');
					value = $(this).val();

					switch(value) {
						case 'restore':
							restoreCollection.push(id);
							break;
						case 'discard':
							discardCollection.push(id);
							break;
						default:
							untouchedCollection.push(id);
							break;
					}
				});

				if(restoreCollection.length > 0) {
					for (var i = 0; i < restoreCollection.length; i++) {
						id = restoreCollection[i];

						// add load rule item from validation layer
						obj = _missingLoadruleObj[id];

						addLoadrule(_missingLoadruleObj[id]);
					};
				}

				if(discardCollection.length > 0) {
					for (var i = 0; i < discardCollection.length; i++) {
						id = discardCollection[i];

						// remove entry from validation
						utui.validation.removeKeyFromInstanceId('manage',_tagId,'loadrule:'+id);

						// remove scope from tag
						tagapi.removeScopedLoadruleFromTagId(_tagId, id);
					};
				}


				setTimeout(function() {
					// Refresh edit settings dialog
					utui.manage.wizard_loadrulePanel.init(utui.manage.lastOpenedContainer);

					// Refresh view for open accordion
					utui.manage.displayItem(utui.manage.lastOpenedContainer);

				}, 10);

				utui.manage.renderCautionOnAccordions();

				_missingLoadruleObj = {};

				utui.ui.dialog.dispose(_dialogNamespace);
			},
			// --------------------------------------------
			onEntryClick: function() {
				var $el = $(this);
				var $item = $el.closest('.item-container');
				var id = $item.attr('data-id');
				var $container = $item.find('.content');

				var missingObj = {};

				var showDetails = function() {

					hideAll();

					var obj = _missingLoadruleObj[id];
					var readOnlyView = '';

					// get read-only view
					readOnlyView = '<div class="container-fluid"><div class="row-fluid"><div class="span12">'+utui.loadrules.view.getReadOnlyConditionInnerView(obj)+'</div></div></div>';

					// invoke
					$container
						.hide()
						.html(readOnlyView)
						.slideDown(400);
				};

				var hideDetails = function() {
					// add transition

					$container.slideUp(400, function() {
						$container.empty();
					});
				};

				var hideAll = function() {
					$item.parent().find('.content').each(function() {
						$(this).empty();
					});
				};

				// if closed
				if($container.is(':empty')) {
					showDetails();
				} else {
					hideDetails();
				}
			},
			// --------------------------------------------
			onRestoreItemClick: function(e) {
				e.stopPropagation();

				var $el = $(this);
				var $item = $el.closest('.item-container');
				var $collection = $el.closest('.table-container');
				var id = $item.attr('data-id');

				// mark as restored
				$item.find('input').val('restore');

				$item.addClass('bg-success');
				$item.find('.action-container').hide();
				$item.find('.status-icon').html(_view._resolvedIcon());
				$item.find('.status-message').html(_view._resolved());
			},
			// --------------------------------------------
			onDiscardItemClick: function(e) {
				e.stopPropagation();

				var $el = $(this);
				var $item = $el.closest('.item-container');
				var $collection = $el.closest('.table-container');
				var id = $item.attr('data-id');

				// mark as discarded
				$item.find('input').val('discard');

				$item.addClass('bg-disabled');
				$item.find('.action-container').hide();
				$item.find('.status-icon').html(_view._discardedIcon());
				$item.find('.status-message').html(_view._discarded());
				// TODO: do we ask them are you sure??
			},
			onUndoDiscardItemClick: function(e) {
				e.stopPropagation();

				var $el = $(this);
				var $item = $el.closest('.item-container');
				var $collection = $el.closest('.table-container');
				var id = $item.attr('data-id');


				// mark as untouched
				$item.find('input').val('untouched');

				$item.removeClass('bg-disabled');
				$item.removeClass('bg-success');
				$item.find('.action-container').show();
				$item.find('.status-icon').html(_view._warningIcon());
				$item.find('.status-message').empty();
			}
		};

		// --------------------------------------------
		function render() {
			// Panel rendering
			_render.modalHead();
			_render.modalBody();

			$('#'+_dialogNamespace).find('.main-header').append( _view.headerItemView() );
			$('#'+_dialogNamespace).find('.main-body').append( _view.missingCollectionView() );

			_viewModel.showMissingCollection();

			utui.ui.dialog.adjustPanelHeights(_dialogNamespace);
		}

		// --------------------------------------------
		function init() {

			// Title
			var title = localize.t('tiq.validation.restore_loadrule_dialog.title');

			// Dialog buttons
			var buttons = [
				{
					text: localize.t('tiq.validation.restore_loadrule_dialog.buttons.apply'),
					id: _dialogNamespace+'_applyBtn',
					click: _eventHandler.onApplyBtnClick,
					style: 'float:right; margin-right: 12px'
				},
				{
					text: localize.t('tiq.validation.restore_loadrule_dialog.buttons.cancel'),
					id: _dialogNamespace+'_closeBtn',
					click: _eventHandler.onCloseBtnClick,
					style: 'float:left; margin-left: 12px'
				}
			];

			// Show the dialog
			utui.ui.dialog.show(_dialogNamespace, title, buttons, _templateModal, { width:700, height:460 }, _eventHandler.onCloseBtnClick);
		}

		return {
			show: function(tagId) {
				_tagId = tagId;
				var data = utui.validation.getMap('manage', tagId);
				var missingCollection = data.filter(function(obj) { return obj.key.indexOf('loadrule') === 0 && obj.type === 'missing'}).map(function(obj) { return obj.reference });

				for (var i = missingCollection.length - 1; i >= 0; i--) {
					_missingLoadruleObj[missingCollection[i].id] = missingCollection[i];
				};

				init();
				render();
			}
		}
	}(),

	// --------------------------------------------
	confirmDiscardMissingRuleDialog: function() {
		// ---------------------------------------------
		var _namespace = 'confirmDiscardMissingRule_dialog',
			_$template = utui.ui.dialog.body(),
			_tagId,
			_containerId,
			_tagSettings,
			_applyAction;

		// ---------------------------------------------
		var _view = {
			// ------------------------------------
			mainContent: function() {
				var v = '';

					v += '<div id="'+_namespace+'_description">';
						v += '<div class="section-padded">';
							v += '<div class="dialog-icon-container">';
								v += '<i class="icon-warning-sign" style="color:orange;"></i>';
							v += '</div>';
							v += '<div class="dialog-description">';
								v += '<h2>'+localize.t('tiq.validation.confirm_discard_missing_loadrule_dialog.headline')+'</h2>';
								v += '<p>'+localize.t('tiq.validation.confirm_discard_missing_loadrule_dialog.context')+'</p>';
							v += '</div>';
						v += '</div>';
					v += '</div>';

				return v;
			}
		}

		// ------------------------------------
		var _eventHandlers = {
			onApplyBtnClick: function(e) {
				_applyAction(_tagId, _containerId);

				// close Tag Settings dialog
				$(_tagSettings).dialog("close");

				// Refresh accordion contents
				utui.manage.displayItem(utui.manage.lastOpenedContainer);
				utui.ui.dialog.dispose(_namespace);
			},
			// ------------------------------------
			onCancelBtnClick: function(e) {
				utui.ui.dialog.dispose(_namespace);
			}
		}

		// ------------------------------------
		// Adds the content to the template
		var _render = {
			// ------------------------------------
			content: function() {
				_$template.find('.dialog-content-body').html(_view.mainContent());
			}
		}

		// ------------------------------------
		var _public = {
			// ------------------------------------
			show: function(tagId, containerId, applyAction, tagSettingsDialog) {
				_tagId = tagId;
				_containerId = containerId;
				_applyAction = applyAction;
				_tagSettings = tagSettingsDialog;

				_render.content();

				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.validation.buttons.apply_anyways'),
						id: _namespace+'_applyBtn',
						click: _eventHandlers.onApplyBtnClick
					},
					{
						text: localize.t('tiq.validation.buttons.go_back'),
						id: _namespace+'_cancelBtn',
						click: _eventHandlers.onCancelBtnClick,
						style: 'float:left; margin-left: 12px'
					}
				];

				utui.ui.dialog.show(_namespace, localize.t('tiq.validation.confirm_discard_missing_loadrule_dialog.title'), buttons, _$template, { width: 360, height: 210 }, _eventHandlers.onCancelBtnClick);
			}
		}

		return _public;
	}(),
	getReadOnlyPropertiesView: function(obj, mainDataObj) {
		var _id = obj.id,
			_status = obj.status || '',
			_title = obj.title || '[NO TITLE]',
			_type = obj.tag_name || '',
			_sort = obj.sort || '',
			_labels = getInterpretedLabelName(obj.labels),
			_loadrules = getInterpretedRulesName(obj.loadrule),
			_notes = obj.notes || '';

		var colwidth = {
			1: 6,
			2: 6
		};

		var valueDictionary = {
			'active': "Active"
		};

		function getInterpretedLabelName(labelValue) {
			var labelNameCollection = [],
				labelId,
				labelName,
				utui_data = mainDataObj || utui.data,
				multipleLabels;

			if(labelValue === undefined) return '';

			if(~labelValue.indexOf(',')) {
				multipleLabels = labelValue.split(',');

				for (var i = 0; i < multipleLabels.length; i++) {
					labelId = multipleLabels[i];
					labelName = utui_data.labels[labelId].name;

					labelNameCollection.push(labelName);
				};

				return labelNameCollection.join(', ');
			}
			else if(labelValue.length > 0) {
				labelId = labelValue;

				return utui_data.labels[labelId].name;
			}

			return '';
		}

		function getInterpretedRulesName(rulesValue) {
			var ruleNameCollection = [],
				utui_data = mainDataObj || utui.data,
				ruleId,
				ruleName,
				multipleRules;

			if(rulesValue === undefined) return '';

			var isLRExist = function(ruleId) {
				return !$.isEmptyObject(utui_data.loadrules[ruleId]);
			};

			// if all pages chosen
			if(rulesValue === 'all') {
				return 'All Pages';
			}
			// if multiple rules
			else if(~rulesValue.indexOf(',')) {
				multipleRules = rulesValue.split(',');

				for (var i = 0; i < multipleRules.length; i++) {
					ruleId = multipleRules[i];
					ruleName = isLRExist(ruleId) ? (utui_data.loadrules[ruleId].title + ' (#'+ruleId+')') : 'Rule ID #'+ruleId;

					ruleNameCollection.push(ruleName);
				};

				return ruleNameCollection.join(', ');
			}
			else if(rulesValue.length > 0) {
				ruleId = rulesValue;

				return isLRExist(ruleId) ? (utui_data.loadrules[ruleId].title + ' (#'+ruleId+')') : 'Rule ID #'+ruleId;
			}

			return '';
		}

		var v = '';
			v += '<div class="readonly-container-bubble">';
				v += '<div class="title">'+localize.t('tiq.ext.properties')+'</div>';
				v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';


					v += '<div class="row-fluid">';
						v += '<div class="span'+colwidth[1]+'">';
							v += '<span class="inline-label">'+localize.t('tiq.tags.id')+':</span>';
						v += '</div>';
						v += '<div class="span'+colwidth[2]+'">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'id', _id);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span'+colwidth[1]+'">';
							v += '<span class="inline-label">'+localize.t('tiq.tags.status')+':</span>';
						v += '</div>';
						v += '<div class="span'+colwidth[2]+'">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'status', valueDictionary[_status] || _status);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span'+colwidth[1]+'">';
							v += '<span class="inline-label">'+localize.t('tiq.tags.title')+':</span>';
						v += '</div>';
						v += '<div class="span'+colwidth[2]+'">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'title', _title);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span'+colwidth[1]+'">';
							v += '<span class="inline-label">'+localize.t('tiq.tags.type')+':</span>';
						v += '</div>';
						v += '<div class="span'+colwidth[2]+'">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'type', _type);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span'+colwidth[1]+'">';
							// Note: shouldn't be applicable for extensions since order is also dependent on scoping
							v += '<span class="inline-label">'+localize.t('tiq.tags.notes')+':</span>';
						v += '</div>';
						v += '<div class="span'+colwidth[2]+'">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'notes', _notes);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span'+colwidth[1]+'">';
							// Note: shouldn't be applicable for extensions since order is also dependent on scoping
							v += '<span class="inline-label">'+localize.t('tiq.tags.load_rules')+':</span>';
						v += '</div>';
						v += '<div class="span'+colwidth[2]+'">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'loadrule', _loadrules);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span'+colwidth[1]+'">';
							v += '<span class="inline-label">'+localize.t('tiq.tags.labels')+':</span>';
						v += '</div>';
						v += '<div class="span'+colwidth[2]+'">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'labels', _labels);
						v += '</div>';
					v += '</div>';

				v += '</div>';
			v += '</div>';
		return v;
	},
	getReadOnlyPublishView: function(obj, dataReference) {
		var configObj = utui.util.interpret.tag.configuration.toFormatted(obj),
			tagTemplateObj = utui.config.manageList[obj.tag_id],
			v = '',
			fieldId,
			fieldObj,
			fieldName,
			fieldValue;

		var colwidth = {
			1: 6,
			2: 6
		};

		var keyDictionary = {
			'dev': localize.t('tiq.tags.publish_to', { env: 'Dev' }),
			'qa': localize.t('tiq.tags.publish_to', { env: 'QA' }),
			'prod': localize.t('tiq.tags.publish_to', { env: 'Prod' })
		};

		var valueDictionary = {
			"true": localize.t('tiq.tags.yes'),
			"false": localize.t('tiq.tags.no'),
			"": "["+localize.t('tiq.tags.not_set')+"]"
		};

		v += '<div class="readonly-container-bubble">';
			v += '<div class="title">'+localize.t('tiq.tags.publish_settings')+'</div>';
			v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

		var targets = obj.selectedTargets;

		for(var key in targets) {
			fieldId = key;
			fieldName = keyDictionary[key] || key; // default handles custom environment names
			fieldValue = valueDictionary[targets[key]];

			v += '<div class="row-fluid">';
				v += '<div class="span'+colwidth[1]+'">';
					v += '<span class="inline-label">'+fieldName+'</span>';
				v += '</div>';
				v += '<div class="span'+colwidth[2]+'">';
					v += utui.ui.template.form.readonly.inputItemView(null, fieldId, fieldValue);
				v += '</div>';
			v += '</div>';
		}

			v += '</div>';
		v += '</div>';

		return v;
	},
	getReadOnlyConfigurationView: function(obj, dataReference) {
		var configObj = utui.util.interpret.tag.configuration.toFormatted(obj),
			tagTemplateObj = utui.config.manageList[obj.tag_id],
			v = '',
			fieldId,
			fieldObj,
			fieldName;

		var colwidth = {
			1: 6,
			2: 6
		};

		v += '<div class="readonly-container-bubble">';
			v += '<div class="title">'+localize.t('tiq.tags.tag_configuration')+'</div>';
			v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

		for(var key in tagTemplateObj.configFields) {
			fieldId = tagTemplateObj.configFields[key].id;
			fieldName = tagTemplateObj.configFields[key].label;

			v += '<div class="row-fluid">';
				v += '<div class="span'+colwidth[1]+'">';
					v += '<span class="inline-label">'+fieldName+'</span>';
				v += '</div>';
				v += '<div class="span'+colwidth[2]+'">';
					v += utui.ui.template.form.readonly.inputItemView(null, 'config_'+ fieldId, obj['config_'+ fieldId]);
				v += '</div>';
			v += '</div>';
		}

			v += '</div>';
		v += '</div>';

		return v;
	},
	getReadOnlyAdvancedConfigurationView: function(obj, dataReference) {
		var configObj = utui.util.interpret.tag.advancedconfiguration.toFormatted(obj),
			tagTemplateObj = utui.config.manageList[obj.tag_id],
			prefix = 'advconfig_',
			hasServer2ServerSupport = false,
			v = '',
			value,
			fieldId,
			fieldObj,
			fieldName;

		var colwidth = {
			1: 6,
			2: 6
		};

		var keyDictionary = {
			'send': localize.t('tiq.tags.send_flag'),
			'bundle': localize.t('tiq.tags.bundle_flag'),
			'wait': localize.t('tiq.tags.wait_flag'),
			'loadtype': localize.t('tiq.tags.synchronous_load'), // "2" = yes, "" = no
			's2s': localize.t('tiq.tags.server_to_server'),
			'src': localize.t('tiq.tags.custom_script_source'),
			'optout': localize.t('tiq.tags.privacy_tracking_support') // Privacy Manager Extension // "yes" = passes through Privacy Manager Ext, "no" = omited by Privacy Manager
		};

		var valueDictionary = {
			"no": "Off",
			"yes": "On",
			"": "[not set]"
		};

		if(tagapi.hasActiveS2S() && tagTemplateObj.s2sEnabled && tagTemplateObj.s2sEnabled == "true") {
			hasServer2ServerSupport = true;
		}

		v += '<div class="readonly-container-bubble">';
			v += '<div class="title">'+localize.t('tiq.tags.advanced_configuration')+'</div>';
			v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

		for(var key in keyDictionary) {
			fieldId = prefix+key;
			fieldName = keyDictionary[key];
			value = valueDictionary[obj[fieldId]] || obj[fieldId];

			if(!hasServer2ServerSupport && fieldId === prefix+'s2s') continue;

			v += '<div class="row-fluid">';
				v += '<div class="span'+colwidth[1]+'">';
					v += '<span class="inline-label">'+fieldName+'</span>';
				v += '</div>';
				v += '<div class="span'+colwidth[2]+'">';
					if(fieldId === prefix+'loadtype') {
						value = obj[fieldId] === '2' ? localize.t('tiq.tags.synchronous') : localize.t('tiq.tags.asynchronous');
						v += utui.ui.template.form.readonly.inputItemView(null, fieldId, value);
					} else {
						v += utui.ui.template.form.readonly.inputItemView(null, fieldId, value);
					}
				v += '</div>';
			v += '</div>';

		}
			v += '</div>';
		v += '</div>';

		return v;
	},
	getReadOnlyMappedDataSourcesView: function(obj, dataReference) {
		var configObj = utui.util.interpret.tag.configuration.toFormatted(obj),
			tagTemplateObj = utui.config.manageList[obj.tag_id],
			v = '',
			fieldIdA,
			fieldIdB,
			fieldObj,
			fieldName,
			item,
			fieldValue;

		var colwidth = {
			1: 6,
			2: 6
		};

		if($.isEmptyObject(obj.map)) return v;

		v += '<div class="readonly-container-bubble">';
			v += '<div class="title">'+localize.t('tiq.tags.mapped_data_sources')+'</div>';
			v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

			v += '<div class="row-fluid">';
				v += '<div class="span'+colwidth[2]+'">';
					v += '<span class="inline-label">'+'<strong>'+localize.t('tiq.tags.data_source')+'</strong>'+'</span>';
				v += '</div>';
				v += '<div class="span'+colwidth[2]+'">';
					v += '<span class="inline-label">'+'<strong>'+localize.t('tiq.tags.destination')+'</strong>'+'</span>';
				v += '</div>';
			v += '</div>';


		for(var key in obj.map) {

			item = obj.map[key];
			fieldName = item['key'] + ' (' + item['type'] + ')';
			fieldValue = item['variable'];
			fieldDataKey = item['type'] + '-' + item['key'];
			fieldIdA = 'mapping_' + fieldDataKey + '_a';
			fieldIdB = 'mapping_' + fieldDataKey + '_b';

				v += '<div class="row-fluid">';
					v += '<div class="span'+colwidth[2]+'">';
						v += utui.ui.template.form.readonly.inputItemView(null, fieldIdA, fieldName);
					v += '</div>';
					v += '<div class="span'+colwidth[2]+'">';
						v += utui.ui.template.form.readonly.inputItemView(null, fieldIdB, fieldValue);
					v += '</div>';
				v += '</div>';
		};

			v += '</div>';
		v += '</div>';

		return v;
	},
	getReadOnlyRulesView: function(obj, dataReference) {
		var value = obj.loadrules || '',
			getLoadRuleCollection = function(rulesValue) {
				var ruleIdCollection = [],
					ruleId,
					ruleName,
					multipleRules;

				if(rulesValue === undefined) return [];

				// if multiple rules
				if(~rulesValue.indexOf(',')) {
					multipleRules = rulesValue.split(',');

					for (var i = 0; i < multipleRules.length; i++) {
						ruleId = multipleRules[i];

						ruleIdCollection.push(ruleId);
					};

					return ruleIdCollection;
				}
				else if(rulesValue.length > 0) {
					ruleId = rulesValue;

					return ruleIdCollection.push(ruleId);
				}

				return [];
			},
			loadruleCollection,
			loadruleId,
			v = '';

		if (value === 'all' || value === '') return '';

		loadruleCollection = getLoadRuleCollection(value);

			v += '<div class="readonly-container-bubble">';
				v += '<div class="title">'+localize.t('tiq.ext.properties')+'</div>';
				v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

		for (var i = 0; i < getLoadRuleCollection.length; i++) {
			loadruleId = getLoadRuleCollection[i];

			v += utui.loadrules.view.getReadOnlyConditionInnerView(loadruleId);
		};

				v += '</div>';
			v += '</div>';

		return v;
	},

	refreshLoadrulePanelInTagSettings: function() {
		_loadrulePanel.init(container)
	},
	
	refreshDestinationMappingView: function(containerRoot, value) {
		var $container = $('#'+containerRoot);
		var _value = value || $container.find('.js-variable-input').val();

		// console.log('containerRoot', containerRoot);

		utui.manage.renderMappingPills(containerRoot, _value);
	},

	vendorCapability: {
		getView: function(capabilityId, capability) {
			var v = '';

			v += '<div class="vendorCapability">';
			v += '	<span>' + capability.longname + '</span><a id="' + capabilityId + '" href="#" class="icon-question-sign" data-title="' + capability.description + '"></a>';
			v += '</div>';

			return v;
		},
		getContextView: function(title) {
			var v = '';

			v += '<div class="vendorCapabiltiyContextMenu">';
			v += '	<div class="main">' + title ;
			v += '		<div><span class="contextHelpLink" onclick="utui.help.openCommunityLink(\'' + common.community.tags.audience_stream_capability_learn_more + '\');">' + localize.t('tiq.learn_more') + '</span></div>';
			v += '	</div>';
			v += '</div>';

			return v;
		},
		hoverContextMenu: function (selector, pos) {
			$(document).off('mouseenter mouseleave', selector);
			$(document).on('mouseenter', selector, function() {
				var $el = $(this);
				var $title = $el.attr('data-title');

				$el.append(utui.manage.vendorCapability.getContextView($title));
				if (pos) {
					$el.find('.vendorCapabiltiyContextMenu').css({"left": $el.position().left - 10});
				}
			});
			$(document).on('mouseleave', selector, function() {
				$(this).find('.vendorCapabiltiyContextMenu').remove();
			});
		}
	}
};

utui.manage.policy = function () {

    // PRIVATE
    // ----------------------------------
    var _namespace = 'tagPolicy',
        _templateModal = utui.ui.template.modal(),
        _templateAccordion = utui.ui.template.accordion(),
        _isPolicyEnabled = false,
        _policyObj; // can be accessed publically
    
    // ----------------------------------
    function PolicyEntity() {
        return {
            account: utui.login.account,
            is_enable: false,
            user_last_modified: utui.login.email,
            tags: {}
        }
    }

    // ----------------------------------
    var _tagState = {};

    // ----------------------------------
    var _context = {
        title: localize.t('tiq.tags.policy.tag_marketplace_policy'),
        description: '<p>' + localize.t('tiq.tags.policy.enabling_the_policy') + '</p>'
    }
    
    // ----------------------------------
    var _view = {
        // ----------------------------------
        contentDescription: function() {
            var v = '';
                v += '<div class="container-fluid" style="padding-top:12px; padding-bottom:12px">';
                    v += '<div class="row-fluid valign-container">';
                        v += '<div class="span8">';
                                v += '<h3 style="font-size:1.22em">'+_context.title+'</h3>';
                                v += _context.description;
                        v += '</div>';
                        v += '<div class="span4 aligncenter">';
                                v += '<label><input type="checkbox" id="'+_namespace+'_enablePolicy"'+ (_isPolicyEnabled ? 'checked' : '') +'> ' + localize.t('tiq.tags.policy.enable_policy') + '</label>';
                        v += '</div>';
                    v += '</div>';
                v += '</div>';
            return v;
        },
        // ----------------------------------
        bsSingleRowTemplate: function() {
            var bs_column_value = 12,
                args = arguments,
                v = '';

            switch(arguments.length) {
                case 1:
                    bs_column_value = 12;
                    break;
                case 2:
                    bs_column_value = 6;
                    break;
                case 3:
                    bs_column_value = 4;
                    break;
                case 4:
                    bs_column_value = 3;
                    break;
                case 6:
                    bs_column_value = 2;
                    break;
                default:
                    bs_column_value = 12;
                    break;
            }

            v += '<div class="container-fluid">';
                v += '<div class="row-fluid">';
        
            for (var i = 0; i < args.length; i++) {
                v += '<div class="span'+bs_column_value+'">'+args[i]+'</div>'
            };
                v += '</div>';
            v += '</div>';

            return v;
        },
        // ----------------------------------
        tagListCompositeView: function(properties) {
            var _id = _collection = _title = _height = _height2 = _info = '';

            if(typeof properties !== undefined) {
                if(properties.hasOwnProperty('id')) {
                    _id = properties.id;
                }

                if(properties.hasOwnProperty('collection')) {
                    _collection = properties.collection;
                }

                if(properties.hasOwnProperty('title')) {
                    _title = properties.title;
                }

                if(properties.hasOwnProperty('height')) {
                    if(properties.height === 'auto') {
                        _height = 'height: '+properties.height+';';
                    }
                    else {
                        _height = 'height: '+properties.height+'px;';
                        _height2 = 'max-height: '+(properties.height - 40)+'px;';
                    }
                }

                if(properties.hasOwnProperty('info')) {
                    _info = properties.info;
                    
                    if(typeof properties.height !== 'undefined') {
                        if(properties.height !== 'auto') {
                            _height2 = 'max-height: '+(properties.height - 62)+'px;';
                        }
                    }
                }
            }

            var v = '';
                v += '<div id="'+_id+'" class="row-fluid item-collection-container" style="'+_height+'">';
                    v += '<div class="span12">';
                        v += '<div class="item-collection-header aligncenter">';
                            v += _title;
                        v += '</div>';
                        
                        if(_info) {
                            v += '<div class="item-collection-info aligncenter">';
                                v += _info;
                            v += '</div>';
                        }

                        v += '<div style="'+_height2+' overflow:auto">';
                            v += _collection;
                        v += '</div>';
                    v += '</div>';
                v += '</div>';
            return v;
        },
        // ----------------------------------
        tableNoItemViewSplash: function() {
            var v = '';
                v += '<div id="'+_namespace+'_noTagView" class="valign-container item-collection-splash inactive">';
                    v += '<div class="row-fluid">';
                        v += '<div class="span12">';
                            v += '<span style="font-size:12px;">' + localize.t('tiq.tags.policy.tag_marketplace_is_empty') + '</span>';
                        v += '</div>';
                    v += '</div>';
                v += '</div>';
            return v;
        },
        // ----------------------------------
        shownTagItemView: function(id, title) {
            var _id = (typeof id !== 'undefined') ? id : '';
            var _title = (typeof title !== 'undefined') ? title : '';

            var v = '';
                v += '<div data-id="'+_id+'" class="js-itemview valign-container item-collection-itemview">';
                    v += '<div class="row-fluid">';
                        v += '<div class="span10" style="padding:6px">';
                            v += '<span style="font-size:12px;">'+_title+'</span>';
                        v += '</div>';
                        v += '<div class="span2 alignright">';
                            v += '<div>';
                                v += '<button type="button" data-id="'+_id+'" class="js-toggle-btn btn">' + localize.t('tiq.tags.policy.hide') + '</button>';
                                v += '<input type="hidden" name="'+_id+'" value="true" />';
                            v += '</div>';
                        v += '</div>';
                    v += '</div>';
                v += '</div>';
            return v;
        },
        // ----------------------------------
        hiddenTagItemView: function(id, title) {
            var _id = (typeof id !== 'undefined') ? id : '';
            var _title = (typeof title !== 'undefined') ? title : '';

            var v = '';
                v += '<div data-id="'+_id+'" class="js-itemview valign-container item-collection-itemview inactive">';
                    v += '<div class="row-fluid">';
                        v += '<div class="span10" style="padding:6px">';
                            v += '<span style="font-size:12px; color:#888">'+_title+'</span>';
                        v += '</div>';
                        v += '<div class="span2 alignright">';
                            v += '<div>';
                                v += '<button type="button" data-id="'+_id+'" class="js-toggle-btn btn">' + localize.t('tiq.tags.policy.show') + '</button>';
                            v += '</div>';
                        v += '</div>';
                    v += '</div>';
                v += '</div>';
            return v;
        },
        // ----------------------------------
        listActionButtonView: function() {
            var v = '';
                v += '<div class="container-fluid">';
                    v += '<div class="row-fluid">';
                        v += '<div class="span12" style="padding:12px">';
                            v += '<button type="button" class="btn" style="margin-right:8px;" id="'+_namespace+'_setAllInactiveBtn">' + localize.t('tiq.tags.policy.hide_all') + '</button>';
                            v += '<button type="button" class="btn" style="margin-right:8px;" id="'+_namespace+'_setAllActiveBtn">' + localize.t('tiq.tags.policy.show_all') + '</button>';
                            v += '<button type="button" class="btn" style="margin-right:8px;" id="'+_namespace+'_reset">' + localize.t('tiq.tags.policy.reset') + '</button>';
                        v += '</div>';
                    v += '</div>';
                v += '</div>';
            return v;
        }
    };

    // ----------------------------------
    var _viewModel = {
        // ----------------------------------
        renderTagLists: function() {
            var manageList = utui.util.getVars(utui.config.manageList, 4, 'title'),
                shownCollection = hiddenCollection ='';

            shownCollection += _view.tableNoItemViewSplash();

            // Add all tags to list
            for(var key in manageList) {
                if(!manageList.hasOwnProperty(key)) continue;
                
                // Prevent deprecated tags from being configured
                if(manageList[key].load == 'false') continue;

                shownCollection += _view.shownTagItemView(manageList[key]._id, manageList[key].title);
                hiddenCollection += _view.hiddenTagItemView(manageList[key]._id, manageList[key].title);
            }

            $('#'+_namespace).find('.main-body').html(_view.bsSingleRowTemplate(
                _view.tagListCompositeView({
                    id: _namespace+'_disabledContainer',
                    title: localize.t('tiq.tags.policy.hidden_tags'),
                    collection: hiddenCollection,
                    height: 258
                }),
                _view.tagListCompositeView({
                    id: _namespace+'_enabledContainer',
                    title: localize.t('tiq.tags.policy.marketplace_tags'),
                    info: localize.t('tiq.tags.policy.only_these_tags_will_appear'),
                    collection: shownCollection,
                    height: 258
                })
            ));

            // Set list configurations based on policy
            this.setItemDefault();
        },
        // ----------------------------------
        renderSelectBtns: function() {
            $('#'+_namespace).find('.main-footer').html( _view.listActionButtonView() );
        },
        // ----------------------------------
        renderContext: function() {
            $('#'+_namespace).find('.main-header').html( _view.contentDescription() );
        },
        // ----------------------------------
        // This goes through the rendered state and stores value in the model, along with handling model cases
        setItemDefault: function() {
            var manageList = utui.util.getVars(utui.config.manageList, 4, 'title');

            // If we have an existing policy
            if(!$.isEmptyObject(_policyObj)) {

                // Iterate through all tags in tealium iq
                for(var key in manageList) {
                    if(!manageList.hasOwnProperty(key)) continue;

                    var id = manageList[key]._id;

                    // If specific tag exists in policy, render to appropriate list
                    if(_policyObj.tags && _policyObj.tags.hasOwnProperty(id)) {
                        if(_policyObj.tags[id].show) {
                            this.setItemActive(id);
                        }
                        else {
                            this.setItemInactive(id);
                        }
                    }
                    // If tag does not exist in policy, render to hidden list
                    // note: this takes care of newly added tags after policy has been established
                    else {
                        this.setItemInactive(id);
                        _policyObj.tags[id] = { show: false };
                    }
                }

                // Once iteration is done, set splash
                this.setSplash();
            }
            // If we do not have a policy, render incomplete
            else {

                // Ierate through all tags
                for(var key in manageList) {
                    if(!manageList.hasOwnProperty(key)) continue;

                    var id = manageList[key]._id;

                    this.setItemInactive(id);
                    _tagState[id] = { show: false };
                    this.setSplash();
                }
            }
        },
        // ----------------------------------
        isMarketplaceListEmpty: function() {
            var $input = $('#'+_namespace+'_enabledContainer').find('input');

            for (var i = $input.length - 1; i >= 0; i--) {
                if($($input[i]).val() == 'true') return false;
            };
            
            return true;
        },
        setSplash: function() {
            if(this.isMarketplaceListEmpty()) {
                $('#'+_namespace+'_noTagView').removeClass('inactive');
            }
            else {
                $('#'+_namespace+'_noTagView').addClass('inactive');
            }
        },
        // ----------------------------------
        setAllActive: function() {
            $('#'+_namespace+'_enabledContainer').find('input').val('true');
            $('#'+_namespace+'_enabledContainer').find('.js-itemview').removeClass('inactive');
            $('#'+_namespace+'_disabledContainer').find('.js-itemview').addClass('inactive');
        },
        // ----------------------------------
        setAllInactive: function() {
            $('#'+_namespace+'_enabledContainer').find('input').val('false');
            $('#'+_namespace+'_enabledContainer').find('.js-itemview').addClass('inactive');
            $('#'+_namespace+'_disabledContainer').find('.js-itemview').removeClass('inactive');
        },
        // ----------------------------------
        setItemActive: function(id) {
            $('#'+_namespace+'_enabledContainer').find('input[name="'+id+'"]').val('true');
            $('#'+_namespace+'_enabledContainer').find('div[data-id="'+id+'"]').removeClass('inactive');
            $('#'+_namespace+'_disabledContainer').find('div[data-id="'+id+'"]').addClass('inactive');
        },
        // ----------------------------------
        setItemInactive: function(id) {
            $('#'+_namespace+'_enabledContainer').find('input[name="'+id+'"]').val('false');
            $('#'+_namespace+'_enabledContainer').find('div[data-id="'+id+'"]').addClass('inactive');
            $('#'+_namespace+'_disabledContainer').find('div[data-id="'+id+'"]').removeClass('inactive');
        },
        // ----------------------------------
        disableAllButtons: function() {
            $('#'+_namespace).find('button').attr('disabled','');
        },
        // ----------------------------------
        enableAllButtons: function() {
            $('#'+_namespace).find('button').prop('disabled' , false);
        }
    };

    // ----------------------------------
    var _bindUI = {
        // ----------------------------------
        setAllActiveBtn: function() {
            $('#'+_namespace+'_setAllActiveBtn').on('click', _eventHandler.onShowAllItemsBtnClick);
        },
        // ----------------------------------
        setAllInactiveBtn: function() {
            $('#'+_namespace+'_setAllInactiveBtn').on('click', _eventHandler.onHideAllItemsBtnClick);
        },
        // ----------------------------------
        resetBtn: function() {
            $('#'+_namespace+'_reset').on('click', _eventHandler.onResetBtnClick);
        },
        // ----------------------------------
        enablePolicyBtn: function() {
            $('#'+_namespace+'_enablePolicy').on('click', _eventHandler.onEnablePolicyBtnClick);
        },
        // ----------------------------------
        itemToggleBtns: function() {
            $('#'+_namespace+'_enabledContainer').on('click', '.js-toggle-btn', _eventHandler.onHideItemBtnClick);
            $('#'+_namespace+'_disabledContainer').on('click', '.js-toggle-btn', _eventHandler.onShowItemBtnClick);
        }
    };
    
    // ----------------------------------
    var _eventHandler = {
        // ----------------------------------
        onCloseBtnClick: function(e) {
            _clear();
            utui.ui.dialog.dispose(_namespace);
        },
        // ----------------------------------
        onSaveBtnClick: function(e) {
            utui.util.loadingModalStart(localize.t('tiq.tags.policy.saving_policy'));

            var $input = $('#'+_namespace+'_enabledContainer').find('input'),
                id;


            // If policy does not exist, create it here
            if(typeof _policyObj === 'undefined') {
                _policyObj = new PolicyEntity();
            }
            
            // Save tags state
            $input.each(function() {
                id = $(this).attr('name');
                value = ($(this).val() == 'true');
                
                _tagState[id] = { show : value };
            });
            
            // Save enabled
            _policyObj.is_enable = _isPolicyEnabled;
            _policyObj.user_last_modified = utui.login.email;
            _policyObj.tags = _tagState;

            // PUT to server
            _request.updateTagPolicy();
        },
        // ----------------------------------
        onEnablePolicyBtnClick: function(e) {
            if(this.checked) {
                _isPolicyEnabled = true;
                _viewModel.enableAllButtons();
            }
            else {
                _isPolicyEnabled = false;
                _viewModel.disableAllButtons();
            }
        },
        // ----------------------------------
        onShowItemBtnClick: function(e) {
            e.preventDefault();

            var key = $(this).attr('data-id');

            _viewModel.setItemActive(key);
            _viewModel.setSplash();
        },
        // ----------------------------------
        onHideItemBtnClick: function(e) {
            e.preventDefault();

            var key = $(this).attr('data-id');

            _viewModel.setItemInactive(key);
            _viewModel.setSplash();
        },
        // ----------------------------------
        onShowAllItemsBtnClick: function(e) {
            e.preventDefault();
            e.stopImmediatePropagation();

            _viewModel.setAllActive();
            _viewModel.setSplash();
        },
        // ----------------------------------
        onHideAllItemsBtnClick: function(e) {
            e.preventDefault();
            e.stopImmediatePropagation();

            _viewModel.setAllInactive();
            _viewModel.setSplash();
        },
        // ----------------------------------
        onResetBtnClick: function(e) {
            e.preventDefault();
            e.stopImmediatePropagation();

            _viewModel.setItemDefault();
        }
    };

    // ----------------------------------
    var _request = {
        // ----------------------------------
        getTagPolicy: function(cb) {
            utui.service.get(utui.service.restapis.MARKETPLACE_POLICY, null, null,
                function(data) {
                    
                    _response.onGetTagPolicySuccess(data);
                    if(cb) cb();
                },
                function(status, response) {
                    _response.onGetTagPolicyFailure();
                }
            );
        },
        // ----------------------------------
        updateTagPolicy: function() {
            utui.service.post(utui.service.restapis.MARKETPLACE_POLICY, JSON.stringify(_policyObj), {contentType : 'application/json'}, _response.onUpdateTagPolicySuccess, _response.onUpdateTagPolicyFailure);
        }
    }

    // ----------------------------------
    var _response = {
        // ----------------------------------
        onGetTagPolicySuccess: function(data) {
            // If we have a policy, assign it
            if(data && !$.isEmptyObject(data.tags)) {
                _policyObj = data;
                _isPolicyEnabled = _policyObj.is_enable;
            }
            // If we do not have a policy, set flag to new
            else {
                _isPolicyEnabled = false;
                _policyObj = undefined;
            }

        },
        onGetTagPolicyFailure: function() {
            var dialog = {
                title: localize.t('tiq.tags.policy.error_retrieving_policy'),
                content: '<p>' + localize.t('tiq.tags.policy.there_was_a_problem') + '</p>'
            }

            utui.util.showMsgDialog(dialog.content, dialog.title);
        },
        // ----------------------------------
        onUpdateTagPolicySuccess: function(data) {
            utui.util.loadingModalStop();
            
            // Close dialog
            utui.ui.dialog.dispose(_namespace);
        },
        onUpdateTagPolicyFailure: function(err) {
            utui.util.loadingModalStop();

            utui.ui.dialog.message.showError(_namespace, localize.t('tiq.tags.policy.there_was_an_error'), true);
        }
    }

    // ----------------------------------
    var _render = {
        // ----------------------------------
        modalBody: function() {
            $('#'+_namespace).find('.modal-body').html( _templateAccordion );
        }
    };

    // ----------------------------------
    function render() {
        _render.modalBody();

        _viewModel.renderContext();
        _viewModel.renderTagLists();
        _viewModel.renderSelectBtns();

        _bindUI.setAllActiveBtn();
        _bindUI.setAllInactiveBtn();
        _bindUI.resetBtn();
        _bindUI.enablePolicyBtn();
        _bindUI.itemToggleBtns();

        if(!$('#'+_namespace+'_enablePolicy').is(':checked')) {
            _viewModel.disableAllButtons();
        }
    }
    
    // ----------------------------------
    function init() {

        // Title
        var title = localize.t('tiq.tags.policy.manage_tag_marketplace_policy');
        
        // Dialog buttons
        var buttons = [
            {
                text: localize.t('tiq.dialog.button.close'),
                id: _namespace+'_closeBtn',
                click: _eventHandler.onCloseBtnClick,
                style: 'float:left; margin-left: 12px'
            },
            {
                text: localize.t('tiq.dialog.button.save'),
                id: _namespace+'_saveBtn',
                click: _eventHandler.onSaveBtnClick,
                style: 'float:right; margin-right: 12px'
            }
        ];

        // Show the dialog
        utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width:800, height:532 }, _eventHandler.onCloseBtnClick);
    }

    // ----------------------------------
    function _clear() {
        _isPolicyEnabled = false;
    }

    // PUBLIC
    // ----------------------------------
    var _public = {

        // ----------------------------------
        initialize: function() {
            utui.util.pubsub.subscribe(utui.constants.account.LOADED, _request.getTagPolicy);
        },
        
        // ----------------------------------
        showConfigureDialog: function() {
            if(utui.permissions.canManageAccount()) {
                _request.getTagPolicy(function() {
                    init();
                    render();
                });
            }
            else {
                utui.util.showPermissionErrorDialog();
            }
        },

        // ----------------------------------
        isTagRestricted: function(tagId) {
            if(this.isEnabled()) {
                if(_policyObj.tags && _policyObj.tags.hasOwnProperty(tagId)) {
                    return (!_policyObj.tags[tagId].show);
                } else {
                    //Tag not in list, must be a new tag, do not show
                    return true;
                }
            }
            return null;
            
        },
        // ----------------------------------
        isEnabled: function() {
            if(_policyObj && _policyObj.hasOwnProperty('is_enable')) {
                return _policyObj.is_enable;
            }
            return _isPolicyEnabled;
        },
        // ----------------------------------
        getPolicy: function() {
            return _policyObj;
        },
        // ----------------------------------
        // call made on utui lifecycle
        getPolicyFromServer: _request.getTagPolicy
    };
    return _public;
}();
utui.manage.marketplace = function() {

    // PRIVATE
    // --------------------------------------------------
    var _namespace = 'tagMarketplace',
        _templateModal = utui.ui.template.modal(),
        _templateAccordion = utui.ui.template.accordion(true),
        _panelHeight,

        _tagList = $.map(utui.config.manageList, function(value, i) { return [value] }),
        _tagGroup = $.map(utui.config.manageGroup, function(value, i) { return [value] }),
        
        _lazyLoadTagIndex = 0,
        LAZYLOAD_INTERVAL = 32,

		// Retains the carousel object so that we can clear the interval when needed
		_carouselObj = null,
        _categorySlug = 'whatsnew',
        _categorySort = 'title',
        _filterObject = null;

    // --------------------------------------------------
    var _view = {
        // --------------------------------------------------
        panelCategoryTemplate: function(categorySlug) {
                return '<div id="'+_namespace+'_'+categorySlug+'" class="panel-wrapper"></div>';
        },
        // --------------------------------------------------
        categoryCompositeView: function(categoryTitle, categorySlug, hasNavLink) {
            var v = '';
                v += _view.tileCategoryItemView(categoryTitle, categorySlug, hasNavLink);
                v += '<div id="'+_namespace+'_'+categorySlug+'_tagContainer" class="tag-itemview-container tag-layout-tile"></div>';
            return v;
        },
        // --------------------------------------------------
        rowItemView: function(templateId, title, description, imageSrc, categoryName, tagObj, ratingContainer, hasBulkBtn) {
            var v = '';
                v += '<div class="tag-container" data-tag-template-id="'+templateId+'">';
                    v += '<div class="tag-image-backdrop1"></div>';
                    v += '<div class="row-fluid">';
                        v += '<div class="span3 aligncenter">';
                            v += '<div class="tag-image"><img src="'+imageSrc+'" /></div>';
                        v += '</div>';
                        v += '<div class="span9">';
                            v += '<div class="tag-title">'+title+'</div>';
                            v += '<div class="tag-description">'+description+'</div>';
                            
                            if(hasBulkBtn) {
                                v += '<button class="btn btn-success pull-right js-addbulktag-btn" data-tag-template-id="'+templateId+'"><i class="icon-plus"></i> ' + localize.t('tiq.tags.market.add_bulk') + '</button>';
                            }
                            v += '<button class="btn btn-success pull-right js-addtag-btn" data-tag-template-id="'+templateId+'"><i class="icon-plus"></i> ' + localize.t('tiq.tags.market.add') + '</button>';

                            v += '<div class="tag-rating">';
                                v += ratingContainer;
                            v += '</div>';

							// Vendor Capabilities
							v += '<div class="tag-vendor-capability-container"></div>';
                        v += '</div>';
                    v += '</div>';
                v += '</div>';
            return v;
        },
        // --------------------------------------------------
		tileItemView: function(templateId, title, description, imageSrc, categoryName, tagObj, ratingContainer, hasBulkBtn) {
            var v = '';
                v += '<div class="tag-container" data-tag-template-id="'+templateId+'">';
                        v += '<div class="tag-body">';
                            v += '<div class="tag-body-inner">';
                                v += '<div class="tag-image">';
                                    v += '<div class="tag-image-backdrop1"></div>';
                                    v += '<div class="tag-image-backdrop2" style="background-image: url('+imageSrc+');"></div>';
                                        v += '<img src="'+imageSrc+'" class="tag-image-object" />';
                                v += '</div>';

								// Vendor Capabilities
								v += '<div class="tag-vendor-capability-container"></div>';

                                v += '<div class="tag-title">'+title+'</div>';
                                v += '<div class="tag-description">'+description+'</div>';
                            v += '</div>';
                        v += '</div>';

                        v += '<div class="tag-footer">';
                            v += '<div class="section-padded">';
                                    if(hasBulkBtn) {
                                        v += '<div class="btn-group pull-right">';
                                        v += '<button class="btn btn-success js-addtag-btn" data-tag-template-id="'+templateId+'"' + (tagObj.fields ? 'data-tag-fields="' + escape(JSON.stringify(tagObj.fields)) + '"' : '') + 'style="margin-right:0"><i class="icon-plus"></i> ' + localize.t('tiq.tags.market.add') + '</button>';
                                            v += '<div id="'+_namespace+'_addBulk_'+tagObj.id+'" class="btn-group">';
                                                v += '<button class="btn btn-success js-dropdown-button" style="padding-left:4px; padding-right:4px; border-radius:0 4px 4px 0" data-toggle="dropdown"><i class="icon-caret-down"></i></button>';
                                                v += '<div class="menu_list_container js-dropdown-listing">';
                                                    v += '<div class="menulistitem"><a class="menulistfont js-addbulktag-btn" data-tag-template-id="'+templateId+'">' + localize.t('tiq.tags.market.add_bulk') + '</a></div>';
                                                v += '</div>';
                                            v += '</div>';
                                        v += '</div>';
                                    }
                                    else {
                                        v += '<button class="btn btn-success pull-right js-addtag-btn" data-tag-template-id="'+templateId+'" ' + (tagObj.fields ? 'data-tag-fields="' + escape(JSON.stringify(tagObj.fields)) + '"' : '') + '><i class="icon-plus"></i> ' + localize.t('tiq.tags.market.add') + '</button>';
                                    }
                                    v += ratingContainer;
                            v += '</div>';
                        v += '</div>';

                v += '</div>';
            return v;
        },
        // --------------------------------------------------
        tileCategoryItemView: function(categoryTitle, categorySlug, hasNavLink) {
            var v = '';
                v += '<div class="tag-category-title">';
                    v += categoryTitle;
                if(hasNavLink) {
                    v += ' <small><a href="#" class="js-tab-toggle" data-tab-toggle="'+categorySlug+'">' + localize.t('tiq.tags.market.show_more') + '</a></small>';
                }
                v += '</div>';
            return v;
        },
        // --------------------------------------------------
        tileCompositeView: function() {
            var v = '';
                v += '<div class="panel-wrapper">';
                    v += '<div id="'+_namespace+'_tileContainer"></div>';
                v += '</div>';
            return v;
        },
        // --------------------------------------------------
        featuredCompositeView: function() {
            var v = '';
                v += '<div id="'+_namespace+'_featuredContainer" class="tag-featured-container tag-layout-featured">';

                    v += '<ol class="utui-carousel-indicators"></ol>';
                    v += '<div class="utui-carousel-inner"></div>';
                    v += '<div class="nav-left carousel-control js-nav-left"><i class="icon-chevron-left" style="font-size: 22px; position: relative; top: -8px;"></i></div>';
                    v += '<div class="nav-right carousel-control js-nav-right"><i class="icon-chevron-right" style="font-size: 22px; position: relative; top: -8px;"></i></div>';

                v += '</div>';
            return v;
        },
        // --------------------------------------------------
        featuredIndicatorItemView: function() {
            return '<li></li>';
        },
        // --------------------------------------------------
        featuredItemView: function(templateId, title, description, imageSrc, categoryName, tagObj, ratingContainer, hasBulkBtn) {
            var v = '';
                v += '<div class="item tag-container" data-tag-template-id="'+templateId+'">';
                        v += '<div class="tag-image-backdrop1"></div>';
                        v += '<div class="tag-image-backdrop2" style="background-image: url('+imageSrc+');"></div>';
                        v += '<div class="row-fluid" style="position:relative; z-index:1500">';
                            v += '<div class="span4">';
                                v += '<div class="tag-image">';
                                    v += '<img src="'+imageSrc+'" class="tag-image-object" />';
                                v += '</div>';
                            v += '</div>';

                            v += '<div class="span8">';
                                v += '<div class="section-padded">';
                                    v += '<div class="tag-title">'+title+'</div>';
                                    v += '<div class="tag-description">'+description+'</div>';
                                v += '</div>';
                                v += '<div class="section-padded" style="padding-top:0">';
                                        if(hasBulkBtn) {
                                            v += '<button class="btn btn-large btn-success pull-right js-addbulktag-btn" data-tag-template-id="'+templateId+'"><i class="icon-plus"></i> ' + localize.t('tiq.tags.market.add_bulk') + '</button>';
                                        }
                                        v += '<button class="btn btn-large btn-success pull-right js-addtag-btn" data-tag-template-id="'+templateId+'"><i class="icon-plus"></i> ' + localize.t('tiq.tags.market.add') + '</button>';
                                        v += ratingContainer;
                                v += '</div>';
                            v += '</div>';
                        v += '</div>';
                v += '</div>';
            return v;
        },
		// --------------------------------------------------
        searchTemplate: function() {
            var v = '';
               // v += _view.searchExitItemView();
                v += _view.searchItemView();
                v += _view.searchResultsItemView();
            return v;
        },
        // --------------------------------------------------
        searchResultsItemView: function() {
            var v = '';
                v += '<div id="'+_namespace+'_searchResults" class="search-popout">';
                    v += '<div id="'+_namespace+'_searchdropdown_tagContainer" class="tag-layout-row"></div>';
                v += '</div>';
            return v;
        },
        // --------------------------------------------------
        searchItemView: function() {
            var v = '';
				v += '<div class="tag-top-searchContainer">';
					v += _view.searchExitItemView();
                	v += '<div class="utui-search-large-container">';
                    	v += '<i class="icon-search"></i>';
                	v += '</div>';
                	v += '<div style="height:34px">';
                    	v += '<input type="text" id="'+_namespace+'_searchInput" class="search-large utui-search-large-input" placeholder="' + localize.t('tiq.tags.market.search_for_tag') + '" />';
                	v += '</div>';
				v += '</div>';
				v += '<div class="tag-top-tagCodeContainer">';
					v += '<a href="#" id="'+_namespace+'_tagCodeBtn">';
						v += '<div>' + localize.t('tiq.tags.market.detect_tag_from_code') + '</div>';
						v += '<div>' + localize.t('tiq.tags.market.paste_tag_snippet') + '</div>';
					v += '</a>';
				v += '</div>';
            return v;
        },
        // --------------------------------------------------
        searchExitItemView: function() {
            var v = '';
                v += '<div id="'+_namespace+'_searchClear" class="search-dispose-container">';
                    v += '<div><i class="icon-remove"></i></div>';
                v += '</div>';
            return v;
        },
        // --------------------------------------------------
        emptySearchItemView: function(value) {
            var v = '';
                v += '<div id="'+_namespace+'_searchResults_empty" class="tag-emptyviewcontainer">';
                    v += '<div class="title">' + localize.t('tiq.tags.market.no_results_found', {term:value}) + '</div>';
                    v += '<div class="description"><a href="#" onclick=\"utui.help.openCommunityLink(\'' + common.community.how_to_use_tealiumiq_custom_tags + '\'); return false;\">' + localize.t('tiq.tags.market.learn_more_about_tiq_custom_tags') + '</a></div>';
                v += '</div>';
            return v;
        },
		// --------------------------------------------------
		tagCodeView: function() {
			var v = '';
				v += '<div class="tagCode-error"></div>';
				v += '<div class="tagCode-inputViewContainer">';
					v += '<div><div class="tagCode-desc">' + localize.t('tiq.tags.market.tealium_will_attempt_to_detect') + '</div><i class="icon-magic"></i></div>';
					v += '<div>';
						v += '<textarea id="'+_namespace+'_tagCodeViewTxt" rows="8" placeholder="' + localize.t('tiq.tags.market.paste_single_tag_snippet') + '"></textarea>';
						v += '<button id="'+_namespace+'_tagCodeViewExtractBtn" class="btn">' + localize.t('tiq.tags.market.detect_configuration') + '</button>';
					v += '</div>';
				v += '</div>';

				v += '<div class="tagCode-stepsContainer">';
					v += '<div class="header">' + localize.t('tiq.tags.market.detect_and_configure') + '</div>';
					v += '<hr />';
					v += '<div class="steps">';
						v += '<div class="step">';
							v += '<div>1. <span>' + localize.t('tiq.tags.market.paste_your_snippet') + '</span></div>';
							v += localize.t('tiq.tags.market.copy_paste_snippet');
						v += '</div>';
						v += '<div class="step">';
							v += '<div>2. <span>' + localize.t('tiq.tags.market.preview_results') + '</span></div>';
							v += localize.t('tiq.tags.market.tealium_will_extract');
						v += '</div>';
						v += '<div class="step">';
							v += '<div>3. <span>' + localize.t('tiq.tags.market.add_tag_configuration') + '</span></div>';
							v += localize.t('tiq.tags.market.finish_applying_rules');
						v += '</div>';
					v += '</div>';
				v += '</div>';

				v += '<div class="tagCode-resultsViewContainer"></div>';

			return v;
		},
		// --------------------------------------------------
		tagCodeResultsView: function() {
			var v = '';
				v += '<div class="tag-layout-tile tagCode-result">';
					v += '<div class="header"></div>';
					v += '<div id="'+_namespace+'_tagCode_tagContainer" class="body"></div>';
				v += '</div>';
				v += '<div class="tagCode-config">';
					v += '<div class="header"></div>';
					v += '<div class="body"></div>';
				v += '</div>';
			return v;
		},
		// --------------------------------------------------
		tagCodeErrorView: function() {
			var v = '';
				v += '<div class="tagCode-result error">';
					v += '<div class="body"><img src="img/arrow_up_left.png" width="50%" height="50%"/></div>';
				v += '</div>';
				v += '<div class="tagCode-config error">';
					v += '<div class="body">';
						v += '<div class="error-text">';
							v += '<p>' + localize.t('tiq.tags.market.sorry_snippet_not_identified') + '</p>';
							v += '<p>' + localize.t('tiq.tags.market.we_are_not_able_to_identify') + '</p>';
							v += '<p>' + localize.t('tiq.tags.market.in_the_meantime') + '</p>';
							v += '<p class="custom-text">' + localize.t('tiq.tags.market.if_you_are_unsure') + '</p>';
						v += '</div>';
						v += '<div class="tag-containers"></div>';
					v += '</div>';
				v += '</div>';
			return v;
		},
		// --------------------------------------------------
		tagCodeConfigurationItemView: function(key, value, tooltipId, tooltip) {
			var v = '';
				v += '<div class="item">';
					v += '<div class="key">' + key + '</div>';
					v += '<div class="value">' + value + '<i id="' + tooltipId + '" class="icon-question-sign" title="' + tooltip + '"></i></div>';
				v += '</div>';
			return v;
		},
		// --------------------------------------------------
		tagCodeConfigurationDescView: function(description) {
			return '<div class="item">' + description + '</div>';
		},
		// --------------------------------------------------
		tagCodeDefaultContainerView: function(tag) {
			var v = '';
				v += '<div class="tag-container">';
					v += '<div class="tag-body">';
						v += '<div class="tag-image"><img src="' + tag.logo + '" /></div>';
						v += '<div class="tag-description">' + tag.description + '</div>';
					v += '</div>';
					v += '<div class="tag-footer">';
						v += '<button class="btn btn-success" data-tag-template-id="' + tag._id + '"><i class="icon-plus"></i> ' + localize.t('tiq.tags.market.add') + '</button>';
					v += '</div>';
				v += '</div>';
			return v;
		},
		// --------------------------------------------------
		tagVendorCapabilityView: function(id, title, name) {
			return '<div class="vendorCapability" id="' + id + '" data-title="' + title + '"><span>' + name + '</span></div>';
		},
		// --------------------------------------------------
		tagVendorCapabilityContextView: function(title) {
			var v = '';

			v += '<div class="vendorCapabiltiyContextMenu">';
			v += '	<div class="main">' + title ;
			v += '		<div><span class="contextHelpLink" onclick="utui.help.openCommunityLink(\'' + common.community.tags.audience_stream_capability_learn_more + '\');">' + localize.t('tiq.learn_more') + '</span></div>';
			v += '	</div>';
			v += '</div>';

			return v;
		}
    };

    // --------------------------------------------------
    var _viewModel = {
        // --------------------------------------------------
        carousel: function($container, options) {

            var _slideIndex = 0,
                $indicators = $container.find('.utui-carousel-indicators > li'),
                $slides = $container.find('.utui-carousel-inner > div'),
                _isSlideInMotion = false,
				_timer = null,
				_defaults = {
					autoRun:true,
					slideInterval: 5000,
					slideSpeed: 800,
					onSlideStart:null,
					onSlideFinish:null
				};

			if (options) {
				$.extend(_defaults, options);
			}

            function _init() {
                _initFirstSlide();
                _bindUI();
            }

            function _initFirstSlide() {
                var $firstSlide = $slides.get(0),
                    $firstIndicator = $indicators.get(0);

                $($firstSlide).addClass('active');
                $($firstIndicator).addClass('active');

				// Call the onSlideFinishCallback since we are showing the first slide
				if (_defaults.onSlideFinish) {
					_defaults.onSlideFinish(_slideIndex);
				}
            }

            function _bindUI() {
                $indicators.on('click', function(e) {
                    e.stopImmediatePropagation();

                    if(_isSlideInMotion) return;

                    var $el = $(this),
                        id = $el.index();

                    if(id < _slideIndex) {
                        _slideIndex = id;
                        _showSlide(id, 'from-left');
                    }
                    else if(id > _slideIndex) {
                        _slideIndex = id;
                        _showSlide(id, 'from-right');
                    }

                });

                $container.find('.js-nav-left').on('click', function(e) {
                    e.stopImmediatePropagation();

                    if(_isSlideInMotion) return;

                    _prevSlide();
                });

                $container.find('.js-nav-right').on('click', function(e) {
                    e.stopImmediatePropagation();

                    if(_isSlideInMotion) return;

                    _nextSlide();
                });

				// If only 1 result then do NOT autorun and hide the indicators
				if ($indicators.length <= 1) {
					_defaults.autoRun = false;
					$indicators.parent().hide();
				}

				if (_defaults.autoRun) {
					_timer = setInterval( _nextSlide, _defaults.slideInterval);
				}

                $container.off('mouseenter').on('mouseenter', function(e) {
                    if (_defaults.autoRun) {
						clearInterval(_timer);
					}
                });

                $container.off('mouseleave').on('mouseleave', function(e) {
					if (_defaults.autoRun) {
						_timer = setInterval( _nextSlide, _defaults.slideInterval);
					}
                });
            }

            function _nextSlide() {
                if(_slideIndex < $indicators.length -1) {
                    _slideIndex++;
                }
                else {
                    _slideIndex = 0;
                }
                _showSlide(_slideIndex, 'from-right');
            }

            function _prevSlide() {
                if(_slideIndex > 0) {
                    _slideIndex--;
                }
                else {
                    _slideIndex = $indicators.length - 1
                }
                _showSlide(_slideIndex, 'from-left');
            }

            function _showSlide(slideNum, direction) {
				var $currentSlide = $container.find('.active'),
					$incomingSlide = $($slides.get(slideNum)),
					$incomingIndicator = $($indicators.get(slideNum));

                if(direction && direction == 'from-left') {
                    _isSlideInMotion = true;

					// Call the slide start callback
					if (_defaults.onSlideStart) {
						_defaults.onSlideStart(slideNum);
					}

                    $currentSlide.animate({
                        left:'100%'
                    }, _defaults.slideSpeed, function() {
                        $currentSlide.removeClass('active');
                        _isSlideInMotion = false;
                    })

                    $incomingSlide.addClass('active').css('left', '-100%').animate({
                        left: '0%'
                    }, _defaults.slideSpeed, function() {
						if (_defaults.onSlideFinish) {
							_defaults.onSlideFinish(slideNum);
						}
					});
                }
                else if(direction && direction == 'from-right') {
                    _isSlideInMotion = true;

					// Call the slide start callback
					if (_defaults.onSlideStart) {
						_defaults.onSlideStart(slideNum);
					}

                    $currentSlide.animate({
                        left:'-100%'
                    }, _defaults.slideSpeed, function() {
                        $currentSlide.removeClass('active');
                        _isSlideInMotion = false;
                    })

                    $incomingSlide.addClass('active').css('left', '100%').animate({
                        left: '0%'
                    }, _defaults.slideSpeed, function() {
						if (_defaults.onSlideFinish) {
							_defaults.onSlideFinish(slideNum);
						}
					});
                }
                else {
                    $slides.removeClass('active');
                    $incomingSlide.addClass('active');
                    _isSlideInMotion = false;
                }

                $indicators.removeClass('active');
                $incomingIndicator.addClass('active');
            }

            _init();

			return {
				dispose:function() {
					if (_defaults.autoRun) {
						clearInterval(_timer);
					}
				}
			}
        },
        // --------------------------------------------------
        renderNavigation: function() {
            var content = '',
				list = '',
                manageGroup,
                filteredObj,
                listArr;

            // Sort group by 'sort'
            manageGroup = utui.util.sortArrayByKey($.extend([], _tagGroup), 'sort');

            list += '<li><a href="#" class="js-navtab" data-tab-id="home">' + localize.t('tiq.tags.market.home') + '</a></li>';

            if(!utui.manage.policy.isEnabled()) {
                list += '<li><a href="#" class="js-navtab" style="padding-left: 20px;" data-tab-id="whatsnew">' + localize.t('tiq.tags.market.whats_new') + '</a></li>';
            }

            for (var i = 0; i < manageGroup.length; i++) {
                filteredObj = {
                    group: String(manageGroup[i].groupid)
                };

                listArr = tagapi.getTagList(0, 4, '_id', filteredObj);

                if(listArr.length > 0) {
                    list += '<li><a href="#" class="js-navtab" style="padding-left: 20px;" data-tab-id="'+manageGroup[i].tab+'">' + manageGroup[i].text + '</a></li>';
                }
            };

			// Append the vendor capabilities
			//var $content = $('<div class="vendorCapabilities"></div>');
			for (var key in utui.config.tagfeatures) {
				var capability = utui.config.tagfeatures[key];
				var capabilityId = _namespace + '_sidebar_capability_' + capability.shortname;
				list += '<li><div class="js-navtab" data-tab-id="' + capability.shortname + '">' + utui.manage.vendorCapability.getView(capabilityId, capability) + '</div></li>';
			}

            content = utui.ui.template.navigationCompositeView('<ul class="dialog-context-nav">'+list+'</ul>');

            //inject into view
            $('#'+_namespace).find('.sidebar-body').html( content );
			for (var key in utui.config.tagfeatures) {
				var capability = utui.config.tagfeatures[key];
				var id = _namespace + '_sidebar_capability_' + capability.shortname;
				utui.manage.vendorCapability.hoverContextMenu('#' + id, true);
			}

            //bind UI
            _bindUI.navMenu();
        },
        // --------------------------------------------------
        renderSearchList: function(listArr, value, listId) {
            var _arr = listArr,
                content = '',
                hasBulk = false,
                _title, _desc, _value, pattern, tagObj = {};

            if(_arr.length > 0) {
                for(var key in _arr) {
                    if(!_arr.hasOwnProperty(key)) continue;

                    tagObj = {
                        id: _arr[key]._id,
                        category: _getCategoryNameById(_arr[key].group),
                        title: _arr[key].title
                    }

                    hasBulk = _isTagBulkEnabled(_arr[key]._id);

                    _value = value.replace(/(\s+)/,"(<[^>]+>)*$1(<[^>]+>)*");
                    pattern = new RegExp("("+_value+")", "gi");

                    _title = _arr[key].title;
                    _desc = _arr[key].description;

                    // TODO: find a way to not allow object to be lower cased...
                    _title = _title.replace(pattern, '<span class="highlighted-text">$1</span>');
                    _title = _title.replace(/(<span class="highlighted-text">[^<>]*)((<[^>]+>)+)([^<>]*<\/span>)/,'$1</span>$2<span class="highlighted-text">$4');

                    _desc = _desc.replace(pattern, '<span class="highlighted-text">$1</span>');
                    _desc = _desc.replace(/(<span class="highlighted-text">[^<>]*)((<[^>]+>)+)([^<>]*<\/span>)/,'$1</span>$2<span class="highlighted-text">$4');

                    content += _view.rowItemView( _arr[key]._id, _title, _desc, _arr[key].logo, _arr[key].title, tagObj, utui.manage.constructRatingContainer(_arr[key]._id), hasBulk );
                }
            }
            else {
                // show empty view
                content += _view.emptySearchItemView(value);
            }

            // inject into view
            $('#'+_namespace+'_'+listId+'_tagContainer').empty().html( content );

            // Force browser reflow (ie10 background fix)
            if(_arr.length == 0) {
                var $container = $('#'+_namespace).find('.search-popout').removeClass('active');
                $container[0].offsetWidth;
                $container.addClass('active');
            }

			// Render Tag Vendor Capabilities
			_viewModel.renderTagVendorCapabilities('#tagMarketplace_searchResults', true);

            // render ratings
            utui.manage.initRatings();

            // rebind new buttons
            _bindUI.addTagBtn();
            _bindUI.addBulkTagBtn();
        },
        // --------------------------------------------------
        renderPanelList: function(listArr, listId) {
            var _arr = listArr,
                content = '',
                hasBulk = false,
                tagObj = {};

            for(var key in _arr) {
                if(!_arr.hasOwnProperty(key)) continue;

                hasBulk = _isTagBulkEnabled(_arr[key]._id);

                tagObj = {
                    id: _arr[key]._id,
                    category: _getCategoryNameById(_arr[key].group),
                    title: _arr[key].title,
					fields: _arr[key].fields
                }
                content += _view.tileItemView( _arr[key]._id, _arr[key].title, _arr[key].description, _arr[key].logo, _arr[key].title, tagObj, utui.manage.constructRatingContainer(_arr[key]._id), hasBulk );
            }

            // inject into view
            $('#'+_namespace+'_'+listId+'_tagContainer').append( content );

            // rebind new buttons
            _bindUI.addTagBtn();
            _bindUI.addBulkTagBtn();

			// Render Tag Vendor Capabilities
			_viewModel.renderTagVendorCapabilities('#tagMarketplace', false);

            // render ratings
            utui.manage.initRatings();

            $('#'+_namespace).find('button[data-toggle="dropdown"]').each(function(i) {
                var $el = $(this),
                    id = $el.parent().attr('id');

                    utui.ui.toggleMenu(id);
            });
        },
        // --------------------------------------------------
        renderFeaturedList: function(listArr) {
            var _arr = listArr,
                content = '',
                indicatorContent = '',
                tagObj = {},
                hasBulk = false;

            for(var key in _arr) {
                if(!_arr.hasOwnProperty(key)) continue;

                hasBulk = _isTagBulkEnabled(_arr[key]._id);

                tagObj = {
                    id: _arr[key]._id,
                    category: _getCategoryNameById(_arr[key].group),
                    title: _arr[key].title
                }

                content += _view.featuredItemView( _arr[key]._id, _arr[key].title, _arr[key].description, _arr[key].logo, _arr[key].title, tagObj, utui.manage.constructRatingContainer(_arr[key]._id), hasBulk );
				indicatorContent += _view.featuredIndicatorItemView();
            }

            // render ratings
            utui.manage.initRatings();

            // inject into view
            $('#'+_namespace+'_featuredContainer').find('.utui-carousel-inner').append( content );
            $('#'+_namespace+'_featuredContainer').find('.utui-carousel-indicators').append( indicatorContent );

            // rebind new buttons
            _bindUI.addTagBtn();
        },
		// --------------------------------------------------
		// Loops over all the tag-containers and populates the vendor capabilities
		renderTagVendorCapabilities: function (container, showTooltips) {
			// Find and loop over all of the tag-container elements
			$(container + ' .tag-container').each(function() {
				// Get the teplate id to find the vendor capabilities associated with this tag
				var id = $(this).data('tag-template-id');
				var $container = $(this).find('.tag-vendor-capability-container');
				// If the id and container were found...
				if (id && $container.length) {
					$container.empty();

					// Get the capabilities for this tag
					var capabilities = tagapi.getVendorCapabilities(id);
					if (capabilities) {

						// Loop over all the capabilities and append them to this container
						for (var i=0; i<capabilities.length; i++) {
							var capability = capabilities[i];
							var name = capability.longname;
							var shortName = capability.shortname;
							var id = 'tag_marketplace_' + id + '_capability_' + shortName;
							var title = capability.description;
							$container.append(_view.tagVendorCapabilityView(id, title, name));
							// Add the tooltip if specified
							if (showTooltips) {
								// Show/Hide labels hover menu
								utui.manage.vendorCapability.hoverContextMenu('#' + id);
							}
						}
					}
				}
			});

		},
        // --------------------------------------------------
        lazyLoadTags: function() {

            // Fetch list
            var listArr = tagapi.getTagList(_lazyLoadTagIndex, LAZYLOAD_INTERVAL, _categorySort, _filterObject);

            // Append List
            _viewModel.renderPanelList(listArr, _categorySlug);

            _lazyLoadTagIndex += LAZYLOAD_INTERVAL;

        },
        // --------------------------------------------------
        setPanel: function(categorySlug) {
			// Retain previous slug if tagCode so we can go back to selected category
			var slug = (categorySlug === 'tagCode') ? _categorySlug : categorySlug;

			// clear defaults
			_clear();

			// set private vars
			_categorySlug = slug;

			// scroll to top
			// Fixes a known FF scroll issue -- https://bugzilla.mozilla.org/show_bug.cgi?id=706792
			setTimeout(function () {
				$('#' + _namespace).find('.main-body').scrollTop(0);
			}, 0);

			// Home Category
			if (categorySlug === 'home') {

				_panel.home.init();
				_panel.home.render();
				return;
			}
			// Whats New Category
			else if (categorySlug === 'whatsnew') {

				_panel.whatsnew.init();
				_panel.whatsnew.render();
				return;
			}
			// Tag Snippet
			else if (categorySlug === 'tagCode') {

				// UnHighlight the context nav
				$('#' + _namespace).find('.dialog-context-nav li').removeClass('selected');

				_panel.tagCode.init();
				_panel.tagCode.render();
				return;
			}
			// Vendor Capability AS
			else if (categorySlug === 'AS') {
				_panel.vendorCapability.init()
				_panel.vendorCapability.render()
				return;
			}
			// Vendor Capability S2S
			else if (categorySlug === 'S2S') {
				_panel.vendorCapability.init()
				_panel.vendorCapability.render()
				return;
			}

            // Set filter to just group
            _filterObject = {
                group: _getCategoryId(categorySlug)
            };

            _panel.category.init();
            _panel.category.render();
        },
        // --------------------------------------------------
        getSearchList: function(filterString) {
            var listArr = tagapi.getTagList(0, null, 'title');

            var value = filterString.toLowerCase(),
                _filterInitTitle = listArr.filter(function(i) {
                    return i['title'].toLowerCase().indexOf(value) === 0
                }),
                _filterTitle = listArr.filter(function(i) {
                    return i['title'].toLowerCase().indexOf(value) > -1 && _filterInitTitle.indexOf(i) === -1
                }),
                _filterDesc = listArr.filter(function(i) {
                    return i['description'].toLowerCase().indexOf(value) > -1 && _filterInitTitle.indexOf(i) === -1 && _filterTitle.indexOf(i) === -1
                });

                _filterDesc = _filterDesc.splice(0, 20);

            return _filterInitTitle.concat(_filterTitle,_filterDesc);
        }
    };


    // --------------------------------------------------
    var _panel = {
        // --------------------------------------------------
        home: {
            // --------------------------------------------------
            init: function() {
                var content = '',
                filteredObj,
                listArr;

                // inject panel template
                $('#'+_namespace).find('.main-body').empty().html( _view.panelCategoryTemplate(_categorySlug) );

                // construct featured & whatsnew compositeviews
                if(!utui.manage.policy.isEnabled()) {
                    content += _view.featuredCompositeView();
                    content += _view.categoryCompositeView(localize.t('tiq.tags.market.whats_new'), 'whatsnew', true);
                }

                // construct group compositeviews
                for(var key in _tagGroup) {
                    if(!_tagGroup.hasOwnProperty(key)) continue;

                    filteredObj = {
                        group: String(_tagGroup[key].groupid)
                    };

                    listArr = tagapi.getTagList(0, 5, '_id', filteredObj, null, true);

                    if(listArr.length > 4) {
                        content += _view.categoryCompositeView(_tagGroup[key].text, _tagGroup[key].tab, true);
                    }
                    else if (listArr.length > 0) {
                        content += _view.categoryCompositeView(_tagGroup[key].text, _tagGroup[key].tab);
                    }
                }

                // inject compositeviews
                $('#'+_namespace+'_'+_categorySlug).append(content);
            },
            // --------------------------------------------------
            render: function() {
                var listArr = [],
                    filteredObj;

                // render compositeviews
                if(!utui.manage.policy.isEnabled()) {

                    // render featured itemviews
                    listArr = tagapi.getTagList(0, 4, 'featured_date', null, 'featured_date', true);
                    _viewModel.renderFeaturedList(listArr, 'featured');

                    listArr = tagapi.getTagList(0, 4, 'created_date', null, 'created_date', false, true);
                    _viewModel.renderPanelList(listArr, 'whatsnew');
                }

                // render group compositeview
                for(var key in _tagGroup) {
                    if(!_tagGroup.hasOwnProperty(key)) continue;

                    filteredObj = {
                        group: String(_tagGroup[key].groupid),
                        marketplace_popular:'true'
                    };

                    if(!utui.manage.policy.isEnabled()) {
                        // get tag list array
                        listArr = tagapi.getTagList(0, 4, 'title', filteredObj);

                        // if we have marketplace popular tags, display them
                        if(listArr.length !== 0) {
                            _viewModel.renderPanelList(listArr, _tagGroup[key].tab);
                        }
                    }
                    // If we have a policy enabled, it's likely we have several missing tags.  In that case, print all.
                    else {
                        listArr = tagapi.getTagList(0, 4, 'title', { group: String(_tagGroup[key].groupid) });
                        _viewModel.renderPanelList(listArr, _tagGroup[key].tab);
                    }
                }

                // render the featured carousel
                _carouselObj = _viewModel.carousel($('#'+_namespace+'_featuredContainer'));

                // bind the show more link
                _bindUI.showMoreLink();

                // unbind scroll
                _bindUI.unbindScrollLazyLoadEngine();
            }
        },
        // --------------------------------------------------
        whatsnew: {
            // --------------------------------------------------
            init: function() {
                var categoryName = localize.t('tiq.tags.market.whats_new');

                _categorySort = 'created_date';

                // inject panel template
                $('#'+_namespace).find('.main-body').empty().html( _view.panelCategoryTemplate(_categorySlug) );

                // inject compositeview
                $('#'+_namespace+'_'+_categorySlug).append( _view.categoryCompositeView(categoryName, _categorySlug) );
            },
            // --------------------------------------------------
            render: function() {
                var listArr = [];

                listArr = tagapi.getTagList(0, 32, 'created_date', null, 'created_date', false, true);
                _viewModel.renderPanelList(listArr, 'whatsnew');

                // unbind scroll
                _bindUI.unbindScrollLazyLoadEngine();
            }
        },
		// --------------------------------------------------
		tagCode: {
			// ----------------------------------------------
			init:function() {
				var slug = 'tagCode';

				// Highlight the button
				$('.tag-top-tagCodeContainer').addClass('active');

				// inject panel template
				$('#'+_namespace).find('.main-body').empty().html( _view.panelCategoryTemplate(slug) );

				var $slug = $('#' + _namespace + '_' + slug);

				// Add the class the prevents scrolling
				$slug.addClass('tagCode-panel-wrapper');

				// inject compositeview
				$slug.append( _view.tagCodeView() );
			},
			// ----------------------------------------------
			render: function() {
				_bindUI.tagCode();

				// Unbind scroll
				_bindUI.unbindScrollLazyLoadEngine();

				$('#'+_namespace+'_tagCodeViewTxt').val('').focus();
			},
			// ----------------------------------------------
			renderSuccess: function(tag, data) {
				// Empty the results view
				var $resultsView = $('.tagCode-resultsViewContainer').html(_view.tagCodeResultsView()),
					$stepsView = $('.tagCode-stepsContainer'),
					configurationContent = '',
					label,	// This will be populated with the label value if a match is found in configFields
					tooltipId,
					tooltip,
					tooltipCount = 0,
					tooltipObj = {};

				// Retain the populated field data
				tag[0].fields = data.fields;

				// Append the matched item(s)
				_viewModel.renderPanelList(tag, 'tagCode');

				// Get the tag configuration content fields
				configurationContent += '<div class="tagCode-config-item">';
				for (var field in data.fields) {
					// Get the label of the field if found
					label = field;
					tooltipId = '';
					tooltip = '';
					if (tag[0].configFields) {
						for (var i=0; i<tag[0].configFields.length; i++) {
							if (field === tag[0].configFields[i].id) {
								label = tag[0].configFields[i].label;
								tooltipId = _namespace + '_tagCodeItem_' + (tooltipCount++) + '_tooltip';
								tooltipObj[tooltipId] = { gravity:'w' };
								tooltip = tag[0].configFields[i].tooltip || '';
								break;
							}
						}
					}
					configurationContent += _view.tagCodeConfigurationItemView(label, data.fields[field], tooltipId, tooltip);
				}
				configurationContent += '</div>';

				// Append the configuration settings
				$('.tagCode-config').find('.body').html(configurationContent);

				// Add the tooltips
				utui.util.addTooltip(tooltipObj);

				// Hide the steps view
				$stepsView.hide();

				// Add the headers
				$resultsView.find('.tagCode-result .header').html(localize.t('tiq.tags.market.match_found'));
				$resultsView.find('.tagCode-config .header').html(localize.t('tiq.tags.tag_configuration'));
				$resultsView.show();
			},
			// ----------------------------------------------
			renderError: function() {
				// Empty the results view
				var $resultsView = $('.tagCode-resultsViewContainer').html(_view.tagCodeErrorView()),
					$stepsView = $('.tagCode-stepsContainer'),
					$configuration = $('.tagCode-config').find('.body');

				// Add the custom containers if tag policy is NOT enabled
				if (!utui.manage.policy.isEnabled()) {
					var customContainer = tagapi.getTagList(0,1,null,{_id:20010}),
						pixelContainer = tagapi.getTagList(0,1,null,{_id:20011}),
						containers = [],
						content = '';

					if (customContainer && customContainer.length > 0) {
						containers.push(customContainer[0]);
					}
					if (pixelContainer && pixelContainer) {
						containers.push(pixelContainer[0]);
					}

					for (var key in containers) {
						if (!containers.hasOwnProperty(key)) continue;
						content += _view.tagCodeDefaultContainerView(containers[key]);
					}

					// Append the custom containers and show the relevant text
					$configuration.find('.tag-containers').html(content);
					$configuration.find('.custom-text').show();

					_bindUI.tagCodeDefaultContainerAddBtn();
				}

				// Hide the steps view
				$stepsView.hide();

				$resultsView.show();
			}
		},
		// --------------------------------------------------
		vendorCapability: {
			// --------------------------------------------------
			init: function() {
				var capability = tagapi.getVendorCapabilityByName(_categorySlug);
				var categoryName = capability.longname || "";

				_categorySort = 'title';

				// inject panel template
				$('#'+_namespace).find('.main-body').empty().html( _view.panelCategoryTemplate(_categorySlug) );

				// inject compositeview
				$('#'+_namespace+'_'+_categorySlug).append( _view.categoryCompositeView(categoryName, _categorySlug) );
			},
			// --------------------------------------------------
			render: function() {
				var listArr = [];
				var capability = tagapi.getVendorCapabilityByName(_categorySlug);

				listArr = tagapi.getTagList(0, 32, 'title', null, 'features', false, true);

				// Now filter by slug
				listArr = listArr.filter(function(i) {
					return $.inArray(capability.id, i['features']) > -1 ? true : false;
				});

				_viewModel.renderPanelList(listArr, _categorySlug);

				// unbind scroll
				_bindUI.unbindScrollLazyLoadEngine();
			}
		},
        // --------------------------------------------------
        category: {
            // --------------------------------------------------
            init: function() {
                var categoryName = _getCategoryName(_categorySlug);

                _categorySort = 'title';

                // inject panel template
                $('#'+_namespace).find('.main-body').empty().html( _view.panelCategoryTemplate(_categorySlug) );

                // inject compositeview
                $('#'+_namespace+'_'+_categorySlug).append( _view.categoryCompositeView(categoryName, _categorySlug) );
            },
            // --------------------------------------------------
            render: function() {
                // inject initial run for scroll engine
                _viewModel.lazyLoadTags();

                // bind scroll engine
                _bindUI.scrollLazyLoadEngine();
            }
        }
    };


    // --------------------------------------------------
    var _bindUI = {
        // --------------------------------------------------
        scrollLazyLoadEngine: function() {
            $('#'+_namespace).find('.main-body').off('scroll').on('scroll', _eventHandler.onWindowScroll);
        },
        // --------------------------------------------------
        unbindScrollLazyLoadEngine: function() {
            $('#'+_namespace).find('.main-body').off('scroll');
        },
        // --------------------------------------------------
        showMoreLink: function() {
            $('#'+_namespace).find('.js-tab-toggle').on('click', _eventHandler.onShowMoreLinkClick);
        },
        // --------------------------------------------------
        addTagBtn: function() {
            $('#'+_namespace).find('.js-addtag-btn').safeBind('click', _eventHandler.onAddBtnClick);
        },
        // --------------------------------------------------
        addBulkTagBtn: function() {
            $('#'+_namespace).find('.js-addbulktag-btn').safeBind('click', _eventHandler.onAddBulkBtnClick);
        },
        // --------------------------------------------------
        navMenu: function() {
            $('#'+_namespace).find('.js-navtab').off('click').on('click', _eventHandler.onNavMenuClick);
        },
        // --------------------------------------------------
        searchBox: function() {
            $('#'+_namespace+'_searchInput').on('propertychange keyup input paste', _eventHandler.onSearchChange);
        },
		// --------------------------------------------------
		tagCodeBtn: function() {
			$('#'+_namespace+'_tagCodeBtn').safeBind('click', _eventHandler.onTagCodeBtnClick);
		},
        // --------------------------------------------------
        searchDispose: function() {
            $('#'+_namespace+'_searchClear').off('click').on('click', _eventHandler.onSearchDispose);
        },
        // --------------------------------------------------
        tileHover: function() {
            $('#'+_namespace).on('mouseover', '.tag-container', _eventHandler.onTileHover);
        },
		// --------------------------------------------------
		tagCode: function() {
			$('#'+_namespace+'_tagCodeViewExtractBtn').safeBind('click', _eventHandler.onTagCodeExtractBtnClick);
		},
		// --------------------------------------------------
		tagCodeDefaultContainerAddBtn: function() {
			$('#'+_namespace+'_tagCode').find('.tagCode-config button').safeBind('click', _eventHandler.onAddBtnClick);
		}
    };

    // --------------------------------------------------
    var _eventHandler = {
        // --------------------------------------------------
        onShowMoreLinkClick: function(e) {
            e.preventDefault();
            e.stopImmediatePropagation();

            var $el = $(this),
                tabSlug = $el.attr('data-tab-toggle');

            $('#'+_namespace).find('.js-navtab[data-tab-id="'+tabSlug+'"]').trigger('click');
        },
        // --------------------------------------------------
        onTileHover: function(e) {
            var $el = $(this).find('.tag-body-inner');

            $el.animate({
                top: -108
            }, 1000)
        },
        // --------------------------------------------------
        onSearchChange: function(e) {
            var $el = $(this),
                value = $.trim($el.val()),
                filterString = '',
                listArr;

            if(value.length > 1) {
                $('#'+_namespace+'_searchResults')
                    .addClass('active')
                    .css('height', _panelHeight);

                // Get matched listings
                filterString = utui.util.safeEscape(value);
                listArr = _viewModel.getSearchList(filterString);

                // Render listing
                _viewModel.renderSearchList(listArr, filterString, 'searchdropdown');

                $('#'+_namespace+'_searchClear').show();

                _bindUI.searchDispose();
            }
            else {
                $('#'+_namespace+'_searchResults')
                    .removeClass('active')
                    .css('height', '0');

                $('#'+_namespace+'_searchdropdown_tagContainer').empty();
                $('#'+_namespace+'_searchClear').hide();
            }
        },
        // --------------------------------------------------
        onSearchDispose: function(e) {
            $('#'+_namespace+'_searchInput').val('').trigger('propertychange');
        },
		// --------------------------------------------------
		onTagCodeBtnClick: function(e) {
			e.preventDefault();

			_viewModel.setPanel('tagCode');

			// dispose search
			$('#'+_namespace+'_searchResults')
				.removeClass('active')
				.css('height','0');
		},
		// --------------------------------------------------
		onTagCodeExtractBtnClick: function(e) {
			// Do some validation then send to server and wait response
			var $scriptField = $('#'+_namespace + '_tagCodeViewTxt'),
				snippet = $scriptField.val() || '';

			_hideTagCodeError();

			// Snippet must NOT be empty
			if (snippet.trim() === '') {
				_showTagCodeError(localize.t('tiq.tags.market.please_enter_tag_code'));
				$scriptField.focus();

			} else {
				utui.util.showSpinner();

				utui.manage.tagSnippet.getTagFromSnippet(null, snippet,
					function(data) {
						utui.util.hideSpinner();

						if (data && data.fields) {
							var tag = tagapi.getTagList(0,1,null,{_id:data.tag_id});
							if (tag && tag.length > 0) {
								_panel.tagCode.renderSuccess(tag, data);
								return;
							}
						}
						_panel.tagCode.renderError();
					},
					function(status, response) {
						utui.util.hideSpinner();

						_panel.tagCode.renderError();
					}
				);
			}
		},
        // --------------------------------------------------
        onWindowScroll: function(e) {
            var $tileContainer = $('#'+_namespace).find('.panel-wrapper'),
                $windowContainer = $(this);

            if( $windowContainer.scrollTop() >= $tileContainer.height() - $windowContainer.height() - 200 ) {
                _viewModel.lazyLoadTags();
            }
        },
        // --------------------------------------------------
        onCloseBtnClick: function(e) {
            _clear();
            utui.ui.dialog.dispose(_namespace);
        },
        // --------------------------------------------------
        onAddBtnClick: function(e) {
            e.stopImmediatePropagation();
            e.preventDefault();

            var $el = $(this),
				tagTemplateId = $el.attr('data-tag-template-id'),
				tagFields = $el.attr('data-tag-fields'),
				tagObj = { tag_id:tagTemplateId };

			if (tagFields) {
				tagObj['fields'] = JSON.parse(unescape(tagFields));
			}

            // button action
            utui.profile.checkTab('manage');
            utui.manage.prepareToAddItem(tagObj);

            // dispose dialog
            _clear();
            utui.ui.dialog.dispose(_namespace);

            var tagCategory = utui.manage.getTagCategoryById(tagObj.tag_id);
            var tagName = utui.manage.getTagNameById(tagObj.tag_id);

            var tagTagging = {tag_template_id : tagObj.tag_id, resource_name : tagName, tag_category : tagCategory,
                                resource_type : utui.constants.tags.TYPE.toLowerCase(), isLinkType : true,
                                action : utui.constants.tagging.TAGGING, tealium_event : utui.constants.tagging.CREATED_STARTED};
            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagTagging);
        },
        // --------------------------------------------------
        onAddBulkBtnClick: function(e) {
            e.stopImmediatePropagation();
            e.preventDefault();

            var $el = $(this),
                tagTemplateId = $el.attr('data-tag-template-id');

            utui.manage.tagBulkUpload(tagTemplateId);

            // dispose dialog
            _clear();
            utui.ui.dialog.dispose(_namespace);
        },
        // --------------------------------------------------
        onNavMenuClick: function(e) {
            e.preventDefault();
            
            var $el = $(this),
                tabId = $el.attr('data-tab-id');

            $(this).closest('.dialog-context-nav').find('.selected').removeClass('selected');
            $(this).closest('li').addClass('selected');

            _viewModel.setPanel(tabId);

            // dispose search
            $('#'+_namespace+'_searchResults')
                .removeClass('active')
                .css('height','0');
        }
    };

    // --------------------------------------------------
    var _render = {
        // --------------------------------------------------
        modalHead: function() {
            // policy message goes here
            if(utui.manage.policy.isEnabled()) {
                $('#'+_namespace).find('.modal-header').html( '<div class="manage-tabs-policy-header">' + localize.t('tiq.tags.market.this_account_has_tag_marketplace') + '</div>' );
            }
        },
        // --------------------------------------------------
        modalBody: function() {
            // main content and sidebar goes here
            $('#'+_namespace).find('.modal-body').html( _templateAccordion );
        },
        // --------------------------------------------------
        accordionHead: function() {
            // search goes here
            $('#'+_namespace).find('.main-header').html( _view.searchTemplate() ).css({'padding':'6px', 'background':'#f5f5f5', 'border-bottom':'1px solid #DDD'});
        },
        // --------------------------------------------------
        // TODO: make these avaialble for all dialogs post-rendering
        adjustDialogHeights: function() {
            var dialogHeight = $('#'+_namespace).outerHeight(),
                modalHeaderHeight = $('#'+_namespace).find('.modal-header').outerHeight(),
                modalBodyHeight = $('#'+_namespace).find('.modal-body').outerHeight(),
                modalFooterHeight = $('#'+_namespace).find('.modal-footer').outerHeight(),

                mainHeaderHeight = $('#'+_namespace).find('.main-header').outerHeight(),
                mainBodyHeight = $('#'+_namespace).find('.main-body').outerHeight(),
                mainFooterHeight = $('#'+_namespace).find('.main-footer').outerHeight();

            _panelHeight = dialogHeight - modalHeaderHeight - mainHeaderHeight - mainFooterHeight;

            $('#'+_namespace).find('.main-body').css({
                'height' : _panelHeight,
                'overflow' : 'auto'
            });
        }
    };

    // --------------------------------------------------
    function _getCategoryName(categorySlug) {
        return $.map(_tagGroup, function(v, i) { if(v.tab === categorySlug) return v.text }).toString();
    }
    // --------------------------------------------------
    function _getCategoryId(categorySlug) {
        return $.map(_tagGroup, function(v, i) { if(v.tab == categorySlug) return v.groupid }).toString();
    }
    // --------------------------------------------------
    function _getCategoryNameById(categoryId) {
        return $.map(_tagGroup, function(v, i) { if(v.groupid == categoryId) return v.text }).toString();
    }
    // --------------------------------------------------
    function _isTagBulkEnabled(tagTemplateId) {
        for (var i = _tagList.length - 1; i >= 0; i--) {
            if(_tagList[i]._id == tagTemplateId) {
                return _tagList[i].allowBulkAdd == 'true'
            }
        };
    }

	// --------------------------------------------------
	function _showTagCodeError(message) {
		$('.tagCode-error').html(message).slideDown(300);
	}
	// --------------------------------------------------
	function _hideTagCodeError() {
		$('.tagCode-error').slideUp(300);
	}

    // --------------------------------------------------
    function _clear() {
        // reset to default values
        _lazyLoadTagIndex = 0;
        LAZYLOAD_INTERVAL = 32;
        _categorySlug = 'whatsnew';
        _categorySort = 'title';

		// Clear the search field
		_eventHandler.onSearchDispose();

		// This clears out the timer
		if (_carouselObj) {
			_carouselObj.dispose();
			_carouselObj = null;
		}
		// Unhighlight the button
		$('.tag-top-tagCodeContainer').removeClass('active');
    }

    // --------------------------------------------------
    function render() {
        _render.modalHead();
        _render.modalBody();
        _render.accordionHead();

        // Post rendering height adjustments
        _render.adjustDialogHeights();

        _viewModel.renderNavigation();

        _bindUI.addTagBtn();
        _bindUI.searchBox();
		_bindUI.tagCodeBtn();
        
        // Set first tab
        $('#'+_namespace).find('.dialog-context-nav li:first-child a').trigger('click');
        
        // Focus on search
        $('#'+_namespace+'_searchInput').focus();
    }

    // --------------------------------------------------
    function init() {

        utui.manage.loadTagMarketplaceData();

        // Title
        var title = localize.t('tiq.tags.market.tag_marketplace');
        
        // Dialog buttons
        var buttons = [
            {
                text: localize.t('tiq.dialog.button.close'),
                id: _namespace+'_closeBtn',
                click: _eventHandler.onCloseBtnClick,
                style: 'float:left; margin-left: 12px'
            }
        ];

        // Show the dialog
        utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width:1020, height:624 }, _eventHandler.onCloseBtnClick);
    }

    // PUBLIC
    // --------------------------------------------------
    var _public = {
        // --------------------------------------------------
        show: function() {
            init();
            render();
        }
    };

    return _public;
}();
utui.manage.mappingToolbox = function() {

	// PRIVATE
	// ------------------------------------
	var _namespace = "enhancedMappingToolbox_dialog";
	var _$template = utui.ui.dialog.body();

	// init params
	var _templateId;
	var _container;
	var _containerItem;
	var _mappedVar;
	var _destinationMapping;
	var _datasourceType;
	var _tagId;

	var _initSelectedCollection = [];
	var _selectedCollection = [];

	var _regexParenthesisBrackets = /\(.+\)|\[.+\]/g;

	// helper
	// ------------------------------------
	var _helper = {
		getTagIdByContainerId: function(containerId) {
			if(!utui.manage.containerMap) return;

			if(utui.manage.containerMap[containerId]) {
				return +utui.manage.containerMap[containerId].id;
			}

			return;
		},
		getFormattedDataSource: function(dataKey) {
			var _prefixHash = ['dom.','js.','js_page.','meta.','cp.','qp.','va.'];
			var dName = '';
			var formattedName = '';

			if (dataKey.indexOf("static.") === 0) {
        dName = dataKey.split(".")[1];
        return localize.t("tiq.tags.toolbox.static", {
          type : localize.t("tiq.tags.toolbox."+dName),
          value: $("#"+_containerItem+"_value").val()
        });
      }
			
			for (var i = 0; i < _prefixHash.length; i++) {
				var prefix = _prefixHash[i];

				if(dataKey.indexOf(prefix) === 0) {
					dName = dataKey.replace(prefix, '');
					dType = prefix.replace('.','');

					return formattedName = _helper.getDataSourceIcon(dType) + ' ' + dName + ' ('+dType+')';
				}
			};
			return dataKey;
		},
		getDataSourceIcon: function(dsType) {
			switch (dsType) {
				case 'dom':
					return "<i class='pictonic icon-geo-cube badge dom'></i> ";
				case 'js_page':
					return '<i class="pictonic icon-prog-js02 badge js_page"></i> ';
				case 'js':
					return '<i class="pictonic icon-Layer_8 badge js"></i> ';
				case 'meta':
					return '<i class="pictonic icon-file1-fav badge meta"></i> ';
				case 'qp':
					return '<i class="pictonic icon-chart-pie-01 badge qp"></i> ';
				case 'cp':
					return '<i class="pictonic icon-geo-quattro4 badge cp"></i> ';
				case 'badges':
					return '<i class="icon-shield badge badges"></i> ';
				case 'metrics':
					return '<i class="icon-bar-chart badge metrics"></i> ';
				case 'properties':
					return '<i class="icon-cog icon badge properties"></i> ';
				case 'flags':
					return '<i class="icon-flag badge flags"></i> ';
				case 'dates':
					return '<i class="icon-calendar badge dates"></i> ';
				case 'static.text' :
				case 'static.js' :
          return '<i class="icon-edit badge static"></i> ';
				default:
					return "<i class='pictonic icon-tl-boltnut badge extension'></i> ";
			}
		}
	};

	// view
	// ------------------------------------
	var _view = {
		headerPanel: function() {
			var v = '';
        v += '<div id="dialog-managetoolbox-error" class="dialog-message dialog-error" style="display: none;">'+localize.t('tiq.tags.toolbox.error_too_long')+'</div>'
				v += '<div class="dialog-managetoolbox-header" style="">';
					v += '<div class="dialog-managetoolbox-header-source">';
						v += '<div style="font-size: 0.8rem; position: relative; top: 26px; width: 100%; z-index: 9; text-align: center;"><strong>'+_helper.getDataSourceIcon(_datasourceType)+' '+_mappedVar+'</strong></div>';
					v += '</div>';
					v += '<div class="dialog-managetoolbox-header-arrow">';
						v += '<div class="destination-mapped-to"></div>';
					v += '</div>';
					v += '<div class="dialog-managetoolbox-header-destinations">';
						v += '<div style="color: #888; text-align: center; line-height: 24px;">'+ localize.t("tiq.tags.toolbox.click_on_a_destination_to_edit") +'</div>';
						v += '<div id="'+_namespace+'_selectedValue" class="destination-item-collection">';
							v += _view.pillAddCustomItem();
						v += '</div>';
					v += '</div>';
				v += '</div>';
			return v;
		},
		htmlInjectionBodyPanel: function(content) {
			var v = '';
				v += '<div class="dialog-managetoolbox-body">'
					v += '<div id="dialog-managetoolbox-content">';
						v += '<div class="title">Category</div>';
						v += content;
					v += '</div>';
					v += '<div class="dialog-managetoolbox-info">';
						v += '<div class="enhanced-select-destination-info"></div>';
					v += '</div>';
				v += '</div>';
			return v;
		},
		bodyPanel: function(content) {
			var v = '';
				v += '<div>'+content+'</div>';
			return v;
		},
		mappedToMenuCollectionView: function(rawDestination, content) {
			var _c = content || '';
			var v = '';
				v += '<div class="menu-datasource-mapping-header">';
					v += '<div class="title raw-text"><strong>' + rawDestination + '</strong></div>';
					v += '<div class="context" >' + localize.t("tiq.tags.toolbox.is_populated_by") + '</div>';
				v += '</div>';
				v += '<ol class="menu-datasource-mapping-collection">'+_c+'</ol>';
			return v;
		},
		mappedToMenuItemView: function(content) {
			var _c = content || '';
			var v = '';
				v += '<li>'+_c+'</li>';
			return v;
		},
		noMappedItemView: function(rawDestination) {
			var v = '';
				v += '<div class="menu-datasource-mapping-header" style="border:none">';
					v += '<div class="title raw-text"><strong>' + rawDestination + '</strong></div>';
					v += '<div class="context" >' + localize.t("tiq.tags.toolbox.has_not_been_mapped") + '</div>';
				v += '</div>';
			return v;
		},
		pillStaticItemView: function(value, index) {
			var v = '';
				v += '<div class="destination-item selectable" data-value="'+utui.util.safeEscape(value)+'" data-index="'+index+'">';
					v += '<span class="destination-item-remove"><i class="icon-remove"></i></span> ';
					v += '<span class="destination-item-body js-action-edit" tabindex="-1" title="'+utui.util.safeEscape(value)+'">'+utui.util.safeEscape(value)+'</span>';
					v += this.pillEditItemView(value, index);
				v += '</div>';
			return v;
		},
		pillConditionalItemView: function(value, index) {
			var v = '';
				v += '<div class="destination-item selectable conditional" data-value="'+utui.util.safeEscape(value)+'" data-index="'+index+'">';
					v += '<span class="destination-item-remove"><i class="icon-remove"></i></span> ';
					v += '<span class="destination-item-body js-action-edit" tabindex="-1" title="'+utui.util.safeEscape(value)+'">'+utui.util.safeEscape(value)+'</span>';
					v += this.pillEditItemView(value, index);
				v += '</div>';
			return v;
		},
		pillEditItemView: function(initValue, index) {
			var v = '';
				v += '<label class="destination-item-edit">';
					v += '<input type="text" value="'+utui.util.safeEscape(initValue)+'" data-value="'+utui.util.safeEscape(initValue)+'" data-index="'+index+'" />';
					v += '<button class="btn btn-mini btn-success js-action-ok">OK</button>';
				v += '</label>';
			return v;
		},
		pillAddCustomItem: function() {
			var v = '';
				v += '<div class="destination-pill-add-item js-add-item" title="' + localize.t("tiq.tags.toolbox.add_custom_destination") + '"> + ' + localize.t("tiq.tags.toolbox.add_custom_destination") + ' </div>';
			return v;
		},
		staticAddBtnItemView: function(isFloatRight) {
			var addStr = '+ Add';
			var v = '';
				v += '<span class="btn btn-mini btn-success js-apply-static-item destination-select-add-item'+(isFloatRight ? ' alignright' : '')+'" title="' + localize.t("tiq.tags.toolbox.add_destination") + '" style="margin:0 8px"> '+addStr+' </span>';
			return v;
		},
		dynamicAddBtnItemView: function() {
			var addStr = '+ Add';
			var v = '';
				v += '<span class="btn btn-mini btn-success js-apply-dynamic-item destination-select-add-item" title="' + localize.t("tiq.tags.toolbox.add_destination") + '" style="margin:0 8px"> '+addStr+' </span>';
			return v;
		},
		enhancedSelectCompositeView: function(id, content) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span12">';
						v += '<div class="enhanced-select-collection-header">';
							v += '<div class="destination">' + localize.t("tiq.tags.toolbox.destination") + '</div>';
							// v += '<div class="mapped">Mapped</div>';
						v += '</div>';
						v += '<div id="'+id+'" class="enhanced-select-collection">';
							v += '<ul>';
								v += content;
							v += '</ul>';
						v += '</div>';
					v += '</div>';
				v += '</div>';
			return v;
		},
		enhancedSelectItemView: function(value, text) {
			var v = '';
				v += '<li class="enhanced-select-item" data-value="'+value+'">';
					// v += this.staticAddBtnItemView(true);
					// v += this.enhancedSelectStatusItemView();
					// v += this.enhancedSelectBadgeItemView();
					v += this.enhancedSelectCheckboxItemView();
					v += '<div class="destination-name">'+text+'</div>';
				v += '</li>';
			return v;
		},
		enhancedSelectCheckboxItemView: function(isChecked) {
			var v = '';
				v += '<div class="destination-checkbox"><i class="icon-ok"></i></div>';
			return v;
		},
		enhancedSelectBadgeItemView: function(badgeContext) {
			var _c = badgeContext || '0';
			var v = '';
				v += '<span class="destination-maps-badge">'+_c+'</span>';
			return v;
		},
		enhancedSelectStatusItemView: function(statusContext) {
			var _c = statusContext || 'added';
			var v = '';
				v += '<span class="destination-status">'+_c+'</span>';
			return v;
		},
		enhancedSelectInfoItemView: function(infoContext) {
			var _c = infoContext || '';
			var v = '';
				v += '<span class="destination-info">'+_c+'</span>';
			return v;
		},
		mappedVarBadgeItemView: function(qty) {
			var v = '';
				v += '<span class="enhanced-dependency"> - ' + localize.t("tiq.tags.toolbox.mapped_to", {content:' <span class="">'+content+ ' '+ localize.t("tiq.tags.toolbox.variables") +'</span>'}) + '.</span>';
			return v;
		},
		customDestinationMenuItemView: function() {
			var v = '<li class="divider"></li>';
				v += '<li><a href="#customDestination_tab">+ ' + localize.t("tiq.tags.toolbox.add_custom_destination") + '</a></li>';
			return v;
		},
		customDestinationPanelItemView: function() {
			var v = '';
				v += '<div id="customDestination_tab" class="tab-panel" style="display: none;">';
					v += '<fieldset>';
						v += '<legend>Event</legend>';
						v += '<h4>' + localize.t("tiq.tags.toolbox.type_in_a_custom_destination_value_below") + '</h4>';

						v += '<div>';
							v += localize.t("tiq.tags.toolbox.custom_destination") + ': ';
							v += '<input type="hidden" name="custom_event_input_hidden" id="custom_event_input_hidden" value>';
							v += '<input type="text" id="custom_event_input" name="custom_event_input">';
							v += '<span class="btn btn-mini btn-success js-apply-dynamic-item destination-select-add-item" title="' + localize.t("tiq.tags.toolbox.add_destination") + '" style="margin:0 8px"> + ' + localize.t("tiq.tags.toolbox.add") + ' </span>';
						v += '</div>';

					v += '</fieldset>';
				v += '</div>';
			v += '';
			return v;
		},
		noMappingToolboxLayout: function() {
			var v = '';
				v += '<ul></ul>';
				v += '<div></div>';
			return v;
		}
	};

	// view model
	// ------------------------------------
	var _viewModel = {
		injectHTML: function() {
			var content = '';

			content += _view.headerPanel();
			if(utui.manage.toolboxContent[_templateId].length) {
				content += _view.htmlInjectionBodyPanel(utui.manage.toolboxContent[_templateId]);
			} else {
				content += _view.htmlInjectionBodyPanel(_view.noMappingToolboxLayout());
			}

			$('#'+_namespace).html(content);

			// Add helpers and classes
			$('div[id^=vendortoolbox_'+_templateId+'_tab]').addClass('tab-panel');
		},
		renderPillsBasedOnSelection: function() {
			var content = '';
			var destination;

			for (var i = 0; i < _selectedCollection.length; i++) {
				destination = _selectedCollection[i];

				if(~destination.indexOf(':')) {
					content += _view.pillConditionalItemView(utui.util.safeEscape(destination), i);
				} else {
					content += _view.pillStaticItemView(utui.util.safeEscape(destination), i);
				}
			};

			$('#'+_namespace+'_selectedValue').html(content).append(_view.pillAddCustomItem());
		},
		generateInfoForDestination: function(destination) {
			var mappedCollection = _viewModel.getMappedDataSourcesAssignedToDestination(destination);
			var collectionView = '';
			var v = '';

			if(mappedCollection.length) {
				for (var i = 0; i < mappedCollection.length; i++) {
					datasource = mappedCollection[i];
					v += _view.mappedToMenuItemView(_helper.getFormattedDataSource(datasource));
				};
				return _view.mappedToMenuCollectionView(utui.util.safeEscape(destination), v);
			}

			return _view.noMappedItemView(utui.util.safeEscape(destination));
		},
		overridePlusButtons: function() {

			// apply missing Add Buttons
			var $fieldsetCollection = $('#'+_namespace).find('fieldset');

			for (var i = 0; i < $fieldsetCollection.length; i++) {
			 	var fieldsetItem = $fieldsetCollection[i];

			 	var selectCollection = $(fieldsetItem).find('select');
			 	var addBtnCollection = $(fieldsetItem).find('span.ui-icon.ui-icon-plus');

			 	// If fieldset contains more than one select node, but missing an add button...
			 	if(selectCollection.length > 1 && addBtnCollection.length === 0) {
			 		$(fieldsetItem).find('select').last().after(_view.dynamicAddBtnItemView());
			 	}
			};

			// Replace all plus icons with add buttons
			$('#'+_namespace).find('span.ui-icon.ui-icon-plus').each(function(i) {
				$(this).get(0).onclick = null;
				$(this).replaceWith(_view.dynamicAddBtnItemView());
			});
		},
		showTab: function(tabNamespace) {
			$('#'+_namespace).find('.tab-panel').hide();
			$('#'+tabNamespace).show();
		},
		renderRichSelect: function() {
			var $collection = $('#'+_namespace).find('select');

			$collection.each(function(i) {
				var $el = $(this);
				var size = $el.attr('size');
				var id = $el.attr('id');
				var $options = $el.find('option');

				if(size && size > 1 && $options.length) {
					_viewModel.convertSelectToRichSelect(id);
				}
			});
		},
		convertSelectToRichSelect: function(id) {
			var $el = $('#'+id);
			var contentMain = '';
			var contentInner = '';

			var containerObj = {
				id: '',
				options: []
			}

			containerObj.id = $el.attr('id');

			var itemObj = {}
			$el.find('option').each(function(i) {
				var $item = $(this);
				var itemObj = {};

				var value = $item.attr('value');
				var text = $item.text();

				var formattedText = _getFormattedText(text);

				itemObj['text'] = text;
				itemObj['formattedText'] = formattedText;
				itemObj['value'] = value;

				containerObj.options.push(itemObj);
			});

			for(var key in containerObj.options) {
				var optionItem = containerObj.options[key];
				var text = optionItem.text;
				var formattedText = optionItem.formattedText;
				var value = optionItem.value;

				contentInner += _view.enhancedSelectItemView(value, formattedText);
			}

			contentMain = _view.enhancedSelectCompositeView(containerObj.id, contentInner);

			$el.replaceWith(contentMain);
		},
		applyStaticMappingUIComponents: function() {
      var v = "";
      v += '<div style="font-size: 0.8rem; position: relative; top: 26px; width: 100%; text-align: center;">';
      v += '<input id="'+_namespace+'_static" style="width: 80%;" maxlength="128">';
      v += '  <div class="wizard_config" style="display: flex;">';
      v += '      <div class="wizard_config_item" id="'+_namespace+'_static_container" style="margin: 0 auto;">';
      v += '          <input type="radio" id="'+_namespace+'_static1" name="'+_namespace+'_static" value="text" checked><label for="'+_namespace+'_static1">' + localize.t('tiq.tags.toolbox.text') + '</label>';
      v += '          <input type="radio" id="'+_namespace+'_static2" name="'+_namespace+'_static" value="js"><label for="'+_namespace+'_static2">' + localize.t('tiq.tags.toolbox.js_code') + '</label>';
      v += '      </div>';
      v += '      <div id="'+_namespace+'_static_tooltip" title="' + localize.t('tiq.tags.toolbox.tooltip') + '" class="infoIcon" ><a href="#" class="icon-question-sign"></a></div>';
      v += '  </div>';
      v +='</div>';
      $("div.dialog-managetoolbox-header-source").html(v);
		},
		applyMappingsDataToSelectListItems: function() {

			// We have to scan and collect all the static destinations that are selectable by the user
			// in order to successfully mark what's been applied and what's not.
			var allDestinationsCollection = [];
			var count = 0;
			var dsArray = [];
			var destinationItem;
			var isSelected = false;
			var $badge;
			var $item;

			$('#'+_namespace).find('.enhanced-select-item').each(function(i) {
				var value = $(this).attr('data-value');
				allDestinationsCollection.push(value);
			});

			for (var i = 0; i < allDestinationsCollection.length; i++) {

				// Check all destination mappings assigned to the tag to see if this particular destination is scoped
				destinationItem = allDestinationsCollection[i];
				dsArray = _destinationMapping[destinationItem] || [];
				// isSelected = false;

				// Iterate thru selectedCondition to ensure triggers are not accounted for
				isSelected = _isDestinationSelected(destinationItem);

				count = dsArray.length || 0;

				$item = $('#'+_namespace).find('.enhanced-select-item[data-value="'+destinationItem+'"]');
				$item.removeClass('selected active');

				if(isSelected && count > 0) {
					$item.addClass('selected');
				} else if(count > 0) {
					$item.removeClass('selected').addClass('already-mapped');
				} else {
					$item.removeClass('selected');
				}
			};
		},
		getMappedDataSourcesAssignedToDestination: function(destination) {
			var collection = [];

			if(!$.isEmptyObject(_destinationMapping[destination])) {
				collection = _destinationMapping[destination];
			}

			return collection;
		},
		addCustomDestinationListItem: function() {

			// Add Custom Destination Panel
			$('#dialog-managetoolbox-content').append(_view.customDestinationPanelItemView());

			// Add Custom Destination Menu Item
			$('#dialog-managetoolbox-content > ul').append(_view.customDestinationMenuItemView());
		}
	};

	// bindings
	// ------------------------------------
	var _bindUI = {
		verticalNav: function() {
			$('#'+_namespace).find('ul li a').on('click', _eventHandlers.onVerticalNavClick);
		},
		selectOption: function() {
			$('#'+_namespace).find('select').on('click', 'option', _eventHandlers.onSelectOptionClick);
		},
		removeDestinationItem: function() {
			$('#'+_namespace).on('click', '.destination-item-remove', _eventHandlers.onDestinationItemRemoveClick);
		},
		editDestinationItem: function() {
			$('#'+_namespace).on('click', '.destination-item', _eventHandlers.onDestinationItemEditClick);
			// $('#'+_namespace).on('click', '.js-action-edit', _eventHandlers.onDestinationItemEditClick);

			// $('#'+_namespace).on('hover', '.destination-item', function(e) {
			// 	$(this).find('.js-action-edit').prop('contentEditable', true);
			// });
		},
		editDestinationOkButton: function() {
			$('#'+_namespace).on('click', '.js-action-ok', _eventHandlers.onDestinationItemOkClick);
		},
		addCustomDestinationItem: function() {
			$('#'+_namespace).on('click', '.js-add-item', _eventHandlers.onCustomDestinationItemClick);
		},
		enhancedSelectItem: function() {
			$('#'+_namespace).on('click', '.enhanced-select-item', _eventHandlers.onEnhancedSelectItemClick);
			$('#'+_namespace).on('mouseenter', '.enhanced-select-item', _eventHandlers.onEnhancedSelectItemHover);
		},
		addBtn: function() {
			$('#'+_namespace).on('click', '.js-apply-dynamic-item', _eventHandlers.onDynamicAddBtnClick);
			$('#'+_namespace).on('click', '.js-apply-static-item', _eventHandlers.onStaticAddBtnClick);
		},
		popoutMappingMenu: function() {
			// $('#'+_namespace).on('mouseenter', '.destination-maps-badge', _eventHandlers.onMapsBadgeHover);
			// $('#'+_namespace).on('mouseleave', '.destination-maps-badge', _eventHandlers.onMapsBadgeMouseLeave);
			$('#'+_namespace).on('mouseenter', '.mapped-to-menu', _eventHandlers.onMapsMenuHover);
		},
		moreInfoBadge: function() {
			// $('#'+_namespace).on('mouseenter', '.destination-maps-badge', _eventHandlers.onDestinationBadgeMouseEnter);
			// $('#'+_namespace).on('mouseleave', '.destination-maps-badge', _eventHandlers.onDestinationBadgeMouseLeave);
			// $('#'+_namespace).on('click', '.destination-maps-badge', function(e) {
			// 	e.stopPropagation();
			// });

			$('#'+_namespace).on('mouseenter', '.destination-item', _eventHandlers.onDestinationItemMouseEnter);
			$('#'+_namespace).on('mouseleave', '.destination-item', _eventHandlers.onDestinationItemMouseLeave);
		},
		customDestinationInput: function() {
			$('#custom_event_input').on('change', _eventHandlers.onCustomDestinationInputChange);
		},
    applyStaticMappingUIComponents: function(_datasourceType) {
  
  
      if (/static\.(text|js)/.test(_datasourceType)) {
        var _cont = "enhancedMappingToolbox_dialog";
        var _updateStaticId = function(){
            var $el = $("#"+_containerItem);
            var id = $el.find('.selectMenuID').attr('id');
            var idArray = id.split(".");
            var _val = $("#" + _cont + "_static").val();
            var _type = $("#" + _cont + "_static_container input:checked").val();
        
            if (idArray[1] === "text" && _type === "js") {
              if (_val && !(
                (_val[0] === "'" && _val[_val.length - 1] === "'") ||
                (_val[0] === '"' && _val[_val.length - 1] === '"'))) {
                _val = "'" + _val.replace(/'/g, "\'") + "'";
                $("#" + _cont + "_static").val(_val);
              }
            }
  
  
            idArray[1] = _type;
            var dataKey = idArray.join(".");
            $el.find('.selectMenuID').attr('id', dataKey);
  
            for (var prop in _destinationMapping) {
              for (var i = 0; i < _destinationMapping[prop].length; i++) {
                if (_destinationMapping[prop][i] === id) {
                  _destinationMapping[prop][i] = dataKey;
                }
              }
            }
        
            $("#" + $el.attr('id') + "_value").val(_val);
            $("#" + $el.attr('id') + "_type").val(idArray[0] + "." + idArray[1]);
            // $("#"+$el.attr('id')+"_type").val(dataKey);
            $el.find("div.managemap_var_name")
               .attr("title", utui.util.safeEscape(_val))
               .html(utui.util.safeEscape(_val));
            utui.manage.editTagSettingValidation.dataMappings.setErrorsOnView();
        };
        var _lengthChecker = function(){
        	var $el = $(this),
					$errorMsg =$("#dialog-managetoolbox-error");
        	if ($el.val().length >= 128) {
            return void $errorMsg.show();
					}
          $errorMsg.hide();
				};
        
        //Tried the safeOn method, but that stops it from working
        $("#enhancedMappingToolbox_dialog")
          .off("input", "#" + _cont + "_static")
          .on("input", "#" + _cont + "_static", _lengthChecker)
				// ;
        // $("#enhancedMappingToolbox_dialog")
          .off("change", "#" + _cont + "_static")
          .on("change", "#" + _cont + "_static", _updateStaticId)
				// ;
        // $("#enhancedMappingToolbox_dialog")
          .off("click", "#" + _cont + "_static_container input")
          .on("click", "#" + _cont + "_static_container input", _updateStaticId);
      }
		  
		  
      $("#enhancedMappingToolbox_dialog_static_container input[value='"+$('#'+_containerItem+"_type").val().split(".")[1]+"']").attr("checked", true);
      $('#'+_namespace+'_static_container').buttonset();
      var tooltipObj = {};
      tooltipObj[_namespace + '_static_tooltip'] = {gravity: 'nw'};
      $("#enhancedMappingToolbox_dialog_static").val($('#'+_containerItem+'_value').val());
      utui.util.addTooltip(tooltipObj);
		}
	};

	// event handlers
	// ------------------------------------
	var _eventHandlers = {
		onApplyBtnClick: function(e) {
			var $inputDestination = $('#'+_containerItem+'_variable');
			if (_datasourceType.indexOf('static.') === 0) {
        var $static = $("#"+_namespace+"_static").val();
        $inputDestination.attr("data-static",$static);
      }
			

			function trim1 (str) {
				return str.replace(/&nbsp;/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
			}

			for (var i = 0; i < _selectedCollection.length; i++) {
				_selectedCollection[i] = trim1(_selectedCollection[i]);
			};

			// Trim empty cells
			_selectedCollection = _selectedCollection.filter(function(a) { return a; });

			// trim whitespace &nbsp;
			var value = _selectedCollection.join(', ');

			$inputDestination.val(value);

			utui.ui.dialog.dispose(_namespace);
		},
		onCancelBtnClick: function(e) {
			utui.ui.dialog.dispose(_namespace);
		},
		onDestinationBadgeMouseEnter: function(e) {
			e.stopPropagation();

			var $el = $(this);
			var destination = $el.closest('.enhanced-select-item').attr('data-value');

			_showDestinationInfo(destination);
		},
		onDestinationBadgeMouseLeave: function(e) {
			$('#'+_namespace).find('.enhanced-select-destination-info').hide();
		},
		onMapsBadgeMouseLeave: function(e) {
			$('#'+_namespace).find('.mapped-to-menu').hide();
		},
		onMapsMenuHover: function(e) {
			$(this).show();
		},
		onMapsBadgeHover: function(e) {
			var $el = $(this);
			var destination = $el.closest('.enhanced-select-item').attr('data-value');
			var offset = $el.offset();

			var $menu = $('#'+_namespace).find('.mapped-to-menu');

			var collectionView = _viewModel.generateInfoForDestination(destination);

			$menu.html(collectionView).css({
				top: offset.top,
				left: offset.left
			}).show();
		},
		onCustomDestinationItemClick: function(e) {
			e.stopImmediatePropagation();

			// Add custom destination
			_addDestinationItem(' ', true);

			// Render pills
			_viewModel.renderPillsBasedOnSelection();

			// Update changes immediately to tag settings
			_applyDestinationsToTagSettingsPanel();

			var lastIndex = _selectedCollection.length - 1;

			$('#'+_namespace).find('.destination-item[data-index="'+lastIndex+'"] .js-action-edit').trigger('click');
		},
		onSelectOptionClick: function(e) {
			e.preventDefault();

			var $el = $(this);
			var value = $el.attr('value');

			_addDestinationItem(value);

			$el.prop("selected", false);
		},
		onEnhancedSelectItemClick: function(e) {
			e.preventDefault();

			var $el = $(this);
			var destination = $el.attr('data-value');

			// Add Destination
			_addDestinationItem(destination);

			// refresh mappings here
			// _viewModel.applyMappingsDataToSelectListItems();
			_showDestinationInfo(destination);
		},
		onEnhancedSelectItemHover: function(e) {
			e.preventDefault();

			var $el = $(this);
			var destination = $el.attr('data-value');

			_showDestinationInfo(destination);
		},
		onStaticAddBtnClick: function(e) {
			var $el = $(this);
			var destination = $el.closest('.enhanced-select-item').attr('data-value');

			_addDestinationItem(destination);

			// refresh mappings here
			// _viewModel.applyMappingsDataToSelectListItems();
		},
		onDynamicAddBtnClick: function(e) {
			var $fieldset = $(this).closest('.tab-panel');

			var $input = $fieldset.find('input[type="hidden"]');
			var value = $input.val();

			// Prevent adding blank fields
			if($.trim(value) === '') return;

			_addDestinationItem(value, true);

			// refresh mappings here
			// _viewModel.applyMappingsDataToSelectListItems();
		},
		onDestinationItemRemoveClick: function(e) {
			e.stopPropagation();

			// TODO: make this an "edit" feature, not delete
			var $el = $(this);
			var $item = $el.closest('.destination-item');
			var value = $item.attr('data-value');

			_removeDestinationItemView(value);

			// refresh mappings here
			// _viewModel.applyMappingsDataToSelectListItems();
		},
		onDestinationItemEditClick: function(e) {
			e.stopPropagation();

			var $el = $(this);
			var $label = $el.closest('.destination-item').find('.destination-item-edit');
			var $input = $label.find('input');

			$el.closest('.destination-item').find('.js-action-edit').hide();

			// Allows users to select content in inputs easier
			if(!$label.is(':visible')) {
				$label.css('display','inline-block');
				$input.select();
			}

			$input.on('keydown', function(e) {
				switch(e.keyCode) {
					// Enter key
					case 13:
						_eventHandlers.onDestinationItemEnter(e.target);
						return false;
					// Esc key
					case 27:
						_eventHandlers.onDestinationItemCancel(e.target);
						return false;
				}
			});

			$input.on('blur', function(e) {
				_eventHandlers.onDestinationItemEnter(e.target);
			});

			return;
		},
		onDestinationItemCancel: function(elem) {
			var $input = $(elem);
			var $label = $input.closest('.destination-item-edit');
			var $el = $input.closest('.destination-item');

			// Set state to be back to normal

			$label.hide();
			$el.find('.js-action-edit').fadeIn(200);

		},
		onDestinationItemEnter: function(elem) {
			var $el = $(elem);
			var $input = $el.closest('.destination-item-edit').find('input');
			var value = $input.val();
			var index = $input.attr('data-index');

			if(value === '') return;
			
			value = _.escape(_.unescape(value));
			
			// Assign data
			_applyInputtedDestinationValue(value, index);

			// Remove field and show pill
			$el.find('.destination-item-edit').hide();
			$el.find('.js-action-edit').fadeIn(200);
		},
		onDestinationItemOkClick: function(e) {
			var $el = $(this);
			var $input = $el.closest('.destination-item-edit').find('input');
			var value = $input.val();
			var index = $input.attr('data-index');

			// Assign data
			_applyInputtedDestinationValue(value, index);

			// Remove field and show pill
			$el.find('.destination-item-edit').hide();
			$el.find('.js-action-edit').fadeIn(200);
		},
		onDestinationItemMouseEnter: function(e) {
			var $el = $(this);
			var destination = _getRawDestination($el.attr('data-value'));

			_showDestinationInfo(destination);
		},
		onDestinationItemMouseLeave: function(e) {
			$('#'+_namespace).find('.enhanced-select-destination-info').hide();
		},
		onVerticalNavClick: function(e) {
			e.preventDefault();

			var $el = $(this);
			var value = $el.attr('href');
			var $ul = $el.closest('ul');
			var $li = $el.closest('li');

			$ul.find('.selected').removeClass('selected');
			$li.addClass('selected');

			var tabId = value.replace('#','');

			_viewModel.showTab(tabId);

			// Clear destination info
			$('#'+_namespace).find('.enhanced-select-destination-info').empty().hide();
		},
		onCustomDestinationInputChange: function(e) {
			// var $el = $(this);
			var value = $('#custom_event_input').val();
			$('#custom_event_input_hidden').val(value);
		}
	};

	// ------------------------------------
	function _getRawDestination(recordedValue) {
		var destination = recordedValue;
		var temp = [];

		if(~recordedValue.indexOf(':')) {
			temp = recordedValue.split(':');
			destination = temp[temp.length-1];
		}

		return destination;
	}

	// ------------------------------------
	function _isDestinationSelected(destination) {
		var _d = destination;

		var rawDestination = _getRawDestination(destination);

		for (var i = 0; i < _selectedCollection.length; i++) {
			var selectedDestination = _getRawDestination(_selectedCollection[i]);

			if(rawDestination === selectedDestination) {
				return true;
			}
		};

		return false;
	}

	// ------------------------------------
	function _getFormattedText(textStr) {
		var text = textStr.split(_regexParenthesisBrackets);
		var rePattern = _regexParenthesisBrackets;

		textStr.replace(rePattern, function(match, text, urlId){
			textStr = urlId.replace(match, _view.enhancedSelectInfoItemView(match));
		});

		return textStr;
	}

	// ------------------------------------
	function _addDestinationItem(value, addOverride) {
		if(!addOverride && value === '') return;

		var _add = function(value) {
			// Add item
			_selectedCollection.push(value);

			// Render pills
			_viewModel.renderPillsBasedOnSelection();

			// Update changes immediately to tag settings
			_applyDestinationsToTagSettingsPanel();

			// refresh mappings here
			_viewModel.applyMappingsDataToSelectListItems();

			$('#'+_namespace+'_selectedValue').animate({
				scrollTop: $('#'+_namespace+'_selectedValue')[0].scrollHeight
			}, 200);
		};

		if(addOverride) {
			// if addOverride, add item anyway (designed for custom values)

			// Trim empty cells (in case we are adding/editing a custom field and choosing to add)
			_selectedCollection = _selectedCollection.filter(function(a) { return a; });
			_add(value);

		} else if (!~_selectedCollection.indexOf(value)) {
			
			// Trim empty cells (in case we are adding/editing a custom field and choosing to add)
			_selectedCollection = _selectedCollection.filter(function(a) { return a; });
			_add(value);

		} else {
			_removeDestinationItemView(value);

		}
	}

	// ------------------------------------
	function _removeDestinationItemView(value) {
		var $el = $(this);
		var index = _selectedCollection.indexOf(value);
		var $item = $('#'+_namespace).find('.destination-item[data-index="'+index+'"]');

		if(~index) {
			_selectedCollection.splice(index, 1);

			// Update changes immediately to tag settings
			_applyDestinationsToTagSettingsPanel();

			// refresh mappings here
			_viewModel.applyMappingsDataToSelectListItems();
		}

		$item.fadeOut(200, function() {
			// Render pills
			_viewModel.renderPillsBasedOnSelection();

		});
	}

	// ------------------------------------
	function _removeEditDestinationState() {
		// $('#destinationClickCapture').remove();
		// $('#'+_namespace).find('.bring-forward').removeClass('bring-forward');
	}

	// ------------------------------------
	function _populateInitValues() {
		var $inputDestination = $('#'+_containerItem+'_variable');
		var value = $inputDestination ? $inputDestination.val() : '';

		if(value) {
			_selectedCollection = value.split(', ');
			_initSelectedCollection = value.split(', ');

			// Render pills
			_viewModel.renderPillsBasedOnSelection();

			// Update changes immediately to tag settings
			_applyDestinationsToTagSettingsPanel();
		}
	}

	// ------------------------------------
	function _showDestinationInfo(destination) {
		var collectionView = _viewModel.generateInfoForDestination(destination);
		$('#'+_namespace).find('.enhanced-select-destination-info').html(collectionView).show();
	}

	// ------------------------------------
	function _applyDestinationsToTagSettingsPanel() {
		var $inputDestination = $('#'+_containerItem+'_variable');

		function trim1 (str) {
			return str.replace(/&nbsp;/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
		}

		for (var i = 0; i < _selectedCollection.length; i++) {
			_selectedCollection[i] = trim1(_selectedCollection[i]);
		};

		// trim whitespace &nbsp;
		var value = _selectedCollection.join(', ');

		$inputDestination.val(value);

		_destinationMapping = utui.manage.destination.getInProgressMap(_tagId);

		utui.util.pubsub.publish(utui.constants.tag_mappings.UPDATED, _containerItem, value);
	}

	// ------------------------------------
	function _applyInputtedDestinationValue(value, index) {
		value = utui.util.safeEscape(value);

		if($.trim(value) === '') {
			// Remove data
			_selectedCollection.splice(index, 1);
		} else {
			// Assign data
			_selectedCollection[index] = value;

		}

		// Trim empty cells
		_selectedCollection = _selectedCollection.filter(function(a) { return a; });

		// Render pills
		_viewModel.renderPillsBasedOnSelection();

		// Update changes immediately to tag settings
		_applyDestinationsToTagSettingsPanel();

		// refresh mappings here
		_viewModel.applyMappingsDataToSelectListItems();
	}

	// ------------------------------------
	function init(cb) {
		// Dialog buttons
		var title = localize.t("tiq.tags.toolbox.map_to_destination",{item:_mappedVar});

		var buttons = [
			{
				text: localize.t("tiq.tags.toolbox.done"),
				id: _namespace+'_applyBtn',
				click: _eventHandlers.onApplyBtnClick,
				style: ''
			}
		];


		utui.ui.dialog.show(_namespace, title, buttons, _$template, { dialogClass: "dialog-mapping_toolbox" }, _eventHandlers.onCancelBtnClick);

		utui.util.loadingModalStart(localize.t('tiq.tags.retrieving_mapped_toolbox'));

		var dataObj = {
			id : _templateId,
			t : utui.config.manageList[_templateId].toolbox
		};

		utui.service.get(utui.service.restapis.TOOLBOX, dataObj, null, function (data) {
			for (var i in data) {
				utui.manage.toolboxContent[i] = data[i];
			}

			utui.util.loadingModalStop();

			cb();
		});
	}

	// ------------------------------------
	function render() {
		_viewModel.injectHTML();
		_viewModel.overridePlusButtons();
		_viewModel.renderRichSelect();

		_viewModel.addCustomDestinationListItem();
		_bindUI.customDestinationInput();

		// Populate
		_populateInitValues();

		_viewModel.applyMappingsDataToSelectListItems();

		_bindUI.verticalNav();
		// _bindUI.selectOption();
		_bindUI.removeDestinationItem();
		_bindUI.editDestinationItem();
		_bindUI.addCustomDestinationItem();
		_bindUI.enhancedSelectItem();
		_bindUI.addBtn();
		_bindUI.moreInfoBadge();

		_bindUI.editDestinationOkButton();
    
    if(_datasourceType.indexOf('static.') === 0) {
     
    	_viewModel.applyStaticMappingUIComponents();
      _bindUI.applyStaticMappingUIComponents(_datasourceType);
    }

		// Show first tab
		if($('#'+_namespace).find('ul li:first-child').hasClass('divider')) {
			$('#'+_namespace).find('ul li:last-child a').trigger('click');
		} else {
			$('#'+_namespace).find('ul li:first-child a').trigger('click');
		}
	}

	// PUBLIC
	// ------------------------------------
	var _public = {
		show: function(templateId, container, containerItem, mappedVar, datasourceType) {
			_tagId = _helper.getTagIdByContainerId(container);
			_destinationMapping = utui.manage.destination.getInProgressMap(_tagId);

			_templateId = templateId || 7110;
			_container = container;
			_containerItem = containerItem;
			_mappedVar = mappedVar;
			_datasourceType = datasourceType;

			_selectedCollection = [];

			init(function() {
				render();
			});
		}
	};

	return _public;
}();

/**
 *
 *  Extensions API
 *
 */

// ----------------------------------------------
var exapi = function() {

	// ----------------------------------------------
	function _getData() {
		return utui.data.customizations;
	}

	// ------------------------------------------------
	function _getScopeAlias(scopeName) {
		var name = '';
		var list = [];
		var scopeList = [];

		var getStaticScopeValues = function(value) {
			switch(value) {
				case 'all':
				case 'global':
					return 'All Tags';
				case 'preload':
					return 'Pre Loader';
				case 'domready':
					return 'DOM Ready';
			}
			return value;
		};

		var getValue = function(value) {
			if(!isNaN(value)) {
				if(!$.isEmptyObject(utui.data.manage[value])) {
					return utui.data.manage[value].title + ' (#'+value+')';
				} else {
					return 'Tag #'+value;
				}
			}

			return getStaticScopeValues(value);
		};

		if(~scopeName.indexOf(',')) {
			scopeList = scopeName.split(',');
			list = [];

			for(var key in scopeList) {
				list.push(getValue(scopeList[key]));
			}

			return list.join(', ');
		}

		return getValue(scopeName);
	}

	// ------------------------------------------------
	function _getNextId() {
		var highestId = _getHighestId();
		return ++highestId;
	}

	// ------------------------------------------------
	function _setNextId(value) {
		if(typeof value !== 'undefined' && !isNaN(value)) {
			utui.data.settings.lastcustomizeid = value;
			return utui.data.settings.lastcustomizeid = value;
		}
		return ++utui.data.settings.lastcustomizeid;
	}

	// ----------------------------------------------
	function _hasOutput(extId) {
		var obj = _getObjectByExtensionId(extId),
			templateObj = exapi.getTemplateObject(obj.id);

		return (templateObj.output == 'true')
	}

	// ----------------------------------------------
	function _getObjectByExtensionId(extId) {
		if(typeof utui.data.customizations[extId] !== 'undefined') {
			return utui.data.customizations[extId];
		}

		return null;
	}

	// ----------------------------------------------
	// @param (isFormatted) - returns in array-formatted
	function _getOutputValues(extId, isFormatted) {
		var obj = _getObjectByExtensionId(extId),
			templateObj = exapi.getTemplateObject(obj.id);

		if(typeof templateObj.outputVars !== 'undefined' && templateObj.outputVars.length > 0) {
			if(isFormatted) {
				return templateObj.outputVars.split(',');
			}

			return templateObj.outputVars;
		}

		return '';
	}

	// ----------------------------------------------
	function _getOutputType(extId) {
		var obj = _getObjectByExtensionId(extId),
			templateObj = exapi.getTemplateObject(obj.id);

		if(typeof obj.id !== 'undefined' && typeof templateObj.outputType !== 'undefined') {
			return templateObj.outputType;
		}

		return '';
	}

	// ----------------------------------------------
	function _getOutputDesc(extId) {
		var obj = _getObjectByExtensionId(extId),
			templateObj = exapi.getTemplateObject(obj.id);

		if(typeof templateObj.outputDesc !== 'undefined') {
			return templateObj.outputDesc;
		}

		return '';
	}

	// ----------------------------------------------
	function _getScope(extId) {
		var obj = _getObjectByExtensionId(extId);

		if(obj.scope) {
			return obj.scope;
		}
		return null;
	}

	// ----------------------------------------------
	function _setScope(extId, value) {
		if(typeof extId !== 'undefined' && typeof value !== 'undefined') {
			utui.data.customizations[extId].scope = value.toString(); //store scope as a string, not an array
			return true;
		}
		return false;
	}

    // ----------------------------------------------
    function _getAdvExecOption(extId) {
        var obj = _getObjectByExtensionId(extId);

        if(obj.advExecOption) {
            return obj.advExecOption;
        }
        return null;
    }

    // ----------------------------------------------
    function _setAdvExecOption(extId, value) {
        if(typeof extId !== 'undefined' && typeof value !== 'undefined') {
            utui.data.customizations[extId].advExecOption = value.toString(); //store scope as a string, not an array
            return true;
        }
        return false;
    }


	// ----------------------------------------------
	// Usages:
	//
	// _isTagScoped(tagId);             // Checks to see if tag is scoped to any extension
	// _isTagScoped(tagId, extId);      // Checks to see if tag is scoped to a specific extension
	// _isTagScoped(false, extId);      // Checks to see if extension has any tags scoped
	//
	// @param (tagId) int
	// @param (extId) int
	// @return boolean
	function _isTagScoped(tagId, extId) {
		if(typeof tagId === 'undefined' && typeof extId === 'undefined') return null;

		var _tagId = tagId || false,
			_extId = extId || false,
			_data = utui.data.customizations,
			scopeList;

		// ---------
		// is tag X scoped to extension X
		if(_tagId && _extId) {
			if(typeof _data[_extId] === 'undefined') return null;

			scopeList = _data[_extId].scope.split(',')

			// returns true if exists
			return scopeList.indexOf(_tagId) > -1;
		}

		// ---------
		// is tag X scoped to any extensions
		if(_tagId && !_extId) {
			if(typeof utui.data.manage[_tagId] === 'undefined') return null;

			for(var key in _data) {
				if(!_data.hasOwnProperty(key)) continue;

				scopeList = _data[key].scope.split(',');

				if(scopeList.indexOf(_tagId) > -1) {
					return true;
				}
			}
			return false;
		}

		// ---------
		// is extension X scoped to any tags
		if(!_tagId && _extId) {
			if(typeof _data[_extId] === 'undefined') return null;

			scopeList = _data[_extId].scope.split(',');

			for(var i = scopeList.length - 1; i >= 0; i--) {

				// returns true if number exists in scope
				if(!isNaN(scopeList[i])) {
					return true;
				}
			}
			return false;
		}

		// ---------
		return null;
	}

	// ----------------------------------------------
	// Called by the toggleActive to check if an extension can be set to active. This is used by Adobe test & target and
	// Adobe Target extensions that cannot be simultaneously active in a profile
	function _canActivate(extId) {
		var templateId = utui.data.customizations[extId].id;
		if (typeof utui.customizations_template[templateId]['activationCheck'] === "function"){
			return utui.customizations_template[templateId].activationCheck(extId);
		} else {
			return true;
		}
	}
	// ----------------------------------------------
	// Checks to see if the particular extension allows users to edit its mappings
	// rb - this is similar to isTagScoped, except it checks to see if one and only one tag is scoped to the extension
	function _isMappable(extId) {
		var scope = exapi.getScope(extId),
			templateTagObj = utui.config.manageList,
			manageData = utui.data.manage,
			scopeList,
			scopeId,
			tagTemplateId,
			tagTemplateIdList = [],
			tagIdList = [];

		if($.isEmptyObject(scope)) return null;

		function isTagTemplateMappable(templateId) {
			if(utui.config.manageList[templateId].map == 'true') {
				return true;
			}
			return false;
		}

		scopeList = scope.split(',');

		// If we have multiple tags scoped, return false
		if(scopeList.length !== 1) return false;

		// Check all entries and store tagTemplateId
		for(var key in scopeList) {
			if(!scopeList.hasOwnProperty(key)) continue;

			// Assign the ID
			scopeId = scopeList[key];

			if(!isNaN(scopeId)) {

				// Check to see if scope is a "tag id" or a "tag template ID"

				// the scopeId is the template Id
				if(typeof templateTagObj[scopeId] !== 'undefined') {

					// rb - we are returning false since extensions that are scoped to template Ids does not
					// guarantee that those tags are present in the profile.
					if(isTagTemplateMappable(scopeId)) {
						// return true;
						return false;
					}
				}

				// the scopeId is the uid, in which case we must extract the template Id
				if(typeof manageData[scopeId] !== 'undefined') {
					tagTemplateId = manageData[scopeId].tag_id;

					// if scoped tag is inherited, we do not allow user to edit its mappings
					if(!$.isEmptyObject(manageData[scopeId].settings)) return false;

					// if tag is mappable, return true
					if(isTagTemplateMappable(tagTemplateId)) {
						return true;
					}

				}
			}
		};

		return false;
	}

	// ----------------------------------------------
	function _getStatus(extId) {
		var obj = _getObjectByExtensionId(extId);

		if(obj.status) {
			return obj.status;
		}
		return null;
	}


	// ----------------------------------------------
	function _setStatus(extId, value) {
		if(typeof extId !== 'undefined') {

			if(value === true || value === 'active') {
				utui.data.customizations[extId].status = 'active';
				return true;
			}

			if(value === false || value === 'inactive') {
				utui.data.customizations[extId].status = 'inactive';
				return true;
			}
		}
		return null;
	}

	// ----------------------------------------------
	function _getTitle(extId) {
		var obj = _getObjectByExtensionId(extId);

		if(obj.title) {
			return obj.title;
		}
		return null;
	}

	// ----------------------------------------------
	function _setTitle(extId, value) {
		if(typeof extId !== 'undefined' && typeof value !== 'undefined') {
			utui.data.customizations[extId].title = value;
			return true;
		}
		return false;
	}


	// ----------------------------------------------
	function _getMapping(containerId) {}

	// ----------------------------------------------
	function _setMapping(containerId, value) {}

	// ----------------------------------------------
	function _getNotes(extId) {
		var obj = _getObjectByExtensionId(extId);

		if(obj.notes) {
			return obj.notes;
		}
		return null;
	}

	// ----------------------------------------------
	function _setNotes(extId, value) {
		if(typeof extId !== 'undefined' && typeof value !== 'undefined') {
			utui.data.customizations[extId].notes = value;
			return true;
		}
		return false;
	}

	// ----------------------------------------------
	function _isImported(containerId) {
		if(typeof containerId !== 'undefined') {
			if(utui.data.customizations[containerId] && utui.data.customizations[containerId].imported) {
				return true;
			}
		}
		return false;
	}

	// ----------------------------------------------
	function _isActive(extId) {
		if(typeof extId !== 'undefined') {
			if(utui.data.customizations[extId] && utui.data.customizations[extId].status === 'active') {
				return true;
			}
			else if(utui.data.customizations[extId] && utui.data.customizations[extId].status === 'inactive') {
				return false;
			}
		}
		return null;
	}

	// ----------------------------------------------
	function _dropExtension(extId) {
		var obj = _getObjectByExtensionId(extId);

		if(typeof obj === 'undefined') return false;

		// Update any tags scoped to this extension.
		_resetScopedTagTimestamps(extId);
		
		// Run any custom UI deconstructors if they exist
		try {
			var extType = utui.data.customizations[extId].id;
			utui.customizations_template[extType].destructor();
		} catch (e) {}

		// Remove from data object
		delete utui.customizations.addedCustomizations[utui.data.customizations[extId].id];
		delete utui.data.customizations[extId];

		// Update global cache
		// dsapi.getInputs();
		dsapi.getAllDataSourceSelection()

		return true;
	}

	// ----------------------------------------------
	function _storeExtensionIntoCollection(extObj) {
		if(typeof extObj !== 'undefined' && extObj.hasOwnProperty('_id')) {
			var id = extObj._id;
			utui.data.customizations[id] = extObj;
			return true;
		}
		return false;
	}

	// ----------------------------------------------
	function _resetScopedTagTimestamps(extId, extraTags) {
		// Any tags scoped to this extension will be affected by any change to the extension
		var allScopes = exapi.getScope(extId);
		allScopes = extraTags ? allScopes + "," + extraTags : allScopes;
		var tagIds2mark = _.uniq(allScopes.split(","));
        _.each(tagIds2mark,function(s){
            if (_.has(utui.data.manage,s)){  // Make sure it's really a tag that's scoped - ignore global & domready scopes
                if (utui.data.manage[s].publish_revisions) { // Create the publish_revisions object if needed
                    utui.data.manage[s].publish_revisions.last_modified = utui.config.lastServerTimestamp.substring(0,12);
                } else {
                    utui.data.manage[s].publish_revisions = { last_modified : utui.config.lastServerTimestamp.substring(0,12), svr_save_timestamps : {} };
                }
            }
        });

	}
	// ----------------------------------------------
	var _getNextId = {

		_nextId : 0,

		_getLocalLastId: function() {
			var maxId = 0,
				lastSettingsId = utui.data.settings.lastcustomizeid;

			if (typeof lastSettingsId !== 'undefined'){
				maxId = +lastSettingsId || 0; // Avoid a NaN if it's empty...
			}

			for(var i in utui.data.customizations) {
				var num = +i;

				if(num > maxId) {
					maxId = num;
				}
			}

			return (this._nextId > maxId) ? this._nextId - 1 : maxId;
		},

		fromServer: function(numOfInstances, importCount, successCallback, failureCallback) {
			var requestOptions = { timeout : 5000 },
				providedLastId = _getNextId._getLocalLastId(),
				url = utui.service.addParamsToURL(utui.service.restapis.GET_NEXT_ID, {type : 'extension'}),
				newId,
				dataObj;

			utui.util.showSpinner();

			// if (importCount) {
			// 	providedLastId += importCount;
			// 	requestOptions = {timeout : 5000, async: false};
			// }

			if(importCount) {
				requestOptions = {timeout : 5000, async: false};
			}

			dataObj = {
				provided_last_id : providedLastId,
				count : (numOfInstances ? numOfInstances : 1)
			};

			utui.service.get(url, dataObj, requestOptions,
				function(data) {
					this._nextId = data.next_unique_id;

					if(successCallback) successCallback(data.provided_existing_last_id, data.count, this._nextId);
					utui.util.hideSpinner();
				},
				function() {
					newId = _getNextId.fromLocal();
					if(failureCallback) failureCallback(newId);
					utui.util.hideSpinner();
				}
			);
		},

		fromLocal: function() {
			return _getNextId._getLocalLastId() + 1;
		},

		reset: function() {
			this._nextId = 0;
		}
	};


	// ----------------------------------------------
	/*
	 * Add New Extension
	 * @param (templateId) string - the extension we're adding
	 * @param (propertiesObj) obj - pass additional/inherited values
	 * @return {extId} - extension id reference
	 */
	function _addExtension(newExtId, templateId, propertiesObj) {
		var templateObj = exapi.getTemplateObject(templateId),
			initialScopeValue,
			newExtensionObj;

		// If scope is 'all', change to 'global' for select2 and filtering compatibility
		initialScopeValue = (templateObj.scope === 'all') ? "global" : templateObj.scope;

		// Create new extension
		newExtensionObj = new Extension(templateId, newExtId, null, null, initialScopeValue, 'new', templateObj.advExecOption);

		// Merge additional prop into new object
		if(!$.isEmptyObject(propertiesObj)) {
			newExtensionObj = $.extend(newExtensionObj, propertiesObj);
		}

		// Inherit template output variables if they exist
		if(templateObj.outputVars && templateObj.outputVars !== '') {
			newExtensionObj['output'] = templateObj.outputVars;
		}

		//add all available targets
    newExtensionObj.selectedTargets = utui.targets.addTargetsToObject({}, 'true');
		
		// Store extension into data object
		_storeExtensionIntoCollection(newExtensionObj);

		// Set flag
		utui.customizations.addedCustomizations[templateId] = 1;

		return newExtensionObj._id;
	}

	// ----------------------------------------------
	/*
	 * Duplicate Extension
	 * if we pass in a duplicated extension ID
	 * @return {extensionObj} - generated object
	 */
	function _duplicateExtension(newExtId, extIdToDup) {
		var sourceExtensionObj = exapi.getObjectByExtensionId(extIdToDup),
			templateObj = exapi.getTemplateObject(sourceExtensionObj.id),
			newExtensionObj;

		// Create new extension
		newExtensionObj = new Extension(sourceExtensionObj.id, 0, null, null, templateObj.scope );

		// Merge existing object into new object
    newExtensionObj = $.extend(newExtensionObj, sourceExtensionObj, {selectedTargets : $.extend({},sourceExtensionObj.selectedTargets), publishedTargets : []} );

		// If we're duplicating an inherited object, strip out inherited properties
		if(!$.isEmptyObject(newExtensionObj.settings) || !$.isEmptyObject(newExtensionObj.imported)) {
			delete newExtensionObj.settings;
			delete newExtensionObj.imported;
		}

		// If we are duplicating the JS Draft Extension, we need reset the codeDevData object
		if (newExtensionObj.id === '100040'){
			var draftSnippets = JSON.stringify(newExtensionObj.codeDevData.draftSnippets);
			delete newExtensionObj.codeDevData;
			newExtensionObj.codeDevData = {
                draftSeq : 0,
                queueSeq : 0,
                promotedSnippets : {},
                queue4Publish : {}
            };
			newExtensionObj.codeDevData.draftSnippets = JSON.parse(draftSnippets);
		}

		// Assign New ID
		newExtensionObj._id = newExtId;

		// Store extension into data object
		_storeExtensionIntoCollection(newExtensionObj);

		// Set flag
		utui.customizations.addedCustomizations[sourceExtensionObj.id] = 1;

		return newExtensionObj._id;
	}

	// ----------------------------------------------
	function _getTemplateObject(templateId) {
		if(typeof utui.config.customizationList[templateId] !== 'undefined') {
			return utui.config.customizationList[templateId];
		}

		return null;
	}

	// ----------------------------------------------
	function _getImportedSettings(extId) {
		if(_isImported(extId)) {
			return utui.data.customizations[extId].settings;
		}

		return null;
	}

	// ----------------------------------------------
	function _hasPassedValidation(extId) {
		if(typeof extId === 'undefined') return null;

		var extObj = exapi.getObjectByExtensionId(extId),
			templateId = extObj.id,
			templateObj = exapi.getTemplateObject(templateId);

		return utui.customizations_template[templateId].isValid(extId);
	}

	// ----------------------------------------------
	function _hasExtConditions(extId) {
		var hasExtConditions = false;
		var extObj = _getObjectByExtensionId(extId);
		if (extObj !== null) {
			var filterRgx = /\d{10,}_filter/;

			// Find all the condition filter IDs
			_.each(extObj,function(val,key){
				if (filterRgx.test(key)){
					hasExtConditions = true;
				}
			});			
		}

		return hasExtConditions;
	}

	// ----------------------------------------------
	function _isExtensionInProfile(templateId) {
		if(typeof templateId === 'undefined') return null;

		var data = utui.data.customizations;

		for(var key in data) {
			if(!data.hasOwnProperty(key)) continue;

			if(data[key].id === templateId) {
				return true;
			}
		}
		return false;
	}

	// ----------------------------------------------
	function _getExtensionIdByOutputVar(variable) {
		var data = utui.data.customizations;

		for(var key in data) {
			if(!data.hasOwnProperty(key)) continue;

			if(data[key].output && ~data[key].output.indexOf(variable)) {
				return key;
			}
		}

		return null;
	}


	// ----------------------------------------------
	function _getAllOutputValues() {

		var instanceCollection = utui.data.customizations,
			variableStack = [],
			variableCollection,
			instanceObj;

		for(var key in instanceCollection) {
			instanceObj = instanceCollection[key];

			if(instanceObj.hasOwnProperty('output')) {
				variableCollection = instanceObj.output.split(',');

				for (var i = 0; i < variableCollection.length; i++) {
					if(!~variableStack.indexOf(variableCollection[i])) {
						variableStack.push(variableCollection[i]);
					}
				};
			}
		};

		return variableStack;
	}

	// ----------------------------------------------
	// Used for dependencyMap to figure out which ID contains the defined implicit variables
	function _getExtensionIdFromOutputVariable(varName) {

		var variablesStack = _getAllOutputValues(),
			dataObj = utui.data.customizations,
			templateId;

		if(~variablesStack.indexOf(varName)) {
			templateId = _getExtensionTemplateIdFromOutputVariable(varName);

			for(var key in dataObj) {
				if(dataObj[key].id === templateId) {
					return key;
				}
			}
		}

		return null;
	}

	// ----------------------------------------------
	// Used for dependencyMap to figure out which template contains the defined implicit variables
	// TODO: what if two extension templates share the same variable?
	// TODO: convert variable types to ext.{ext_name}.variableName
	function _getExtensionTemplateIdFromOutputVariable(varName) {
		var configList = utui.config.customizationList,
			outputList,
			templateExtObj;

		for(var key in configList) {
			templateExtObj = configList[key];

			if(templateExtObj.hasOwnProperty('outputVars') && templateExtObj.outputVars !== '') {
				outputList = templateExtObj.outputVars.split(',');

				if(~outputList.indexOf(varName)) {
					return key;
				}
			}
		}
	}

	// ----------------------------------------------
	function _isTemplateAddOnceOnly(templateId) {
		var templateObj = utui.config.customizationList[templateId];

		if(!templateObj) return null;

		return !utui.util.converter.stringToBool(templateObj.addMore);
	}

	// ----------------------------------------------
	function _isTemplateExistInProfile(templateId, data) {
		var _t = +templateId,
			_d = data || utui.data,
			extData = _d.customizations;

		for(var key in extData) {
			if(!extData.hasOwnProperty(key)) continue;

			if(_t === +extData[key].id) return true;
		}

		return false;
	}

    function _createTaggingObject(extObj) {
		return {
			action : utui.constants.tagging.TAGGING,
            resource_type : utui.constants.extensions.TYPE.toLowerCase(),
            resource_id : extObj._id,
            extension_type : extObj.extType,
            isLinkType : true
		};
    }

	// PUBLIC
	// ----------------------------------------------
	var _public = {
		getObjectByExtensionId: _getObjectByExtensionId,
		getTemplateObject: _getTemplateObject,
		isTemplateAddOnceOnly: _isTemplateAddOnceOnly,
		isTemplateExistInProfile: _isTemplateExistInProfile,

		getAllOutputValues: _getAllOutputValues,
		getOutputValues: _getOutputValues,
		getOutputType: _getOutputType,
		getOutputDesc: _getOutputDesc,
		getExtensionIdFromOutputVariable: _getExtensionIdFromOutputVariable,
		getExtensionIdByOutputVar: _getExtensionIdByOutputVar,
		hasOutput: _hasOutput,
		hasExtConditions : _hasExtConditions,
		
		canActivate : _canActivate,

		getScope: _getScope,
		setScope: _setScope,
        getAdvExecOption: _getAdvExecOption,
        setAdvExecOption: _setAdvExecOption,
		isMappable: _isMappable,
		isTagScoped: _isTagScoped,

		getNextIdFromServer: _getNextId.fromServer,
		getNextIdFromLocal: _getNextId.fromLocal,
		resetNextId: _getNextId.reset,

		getStatus: _getStatus,
		setStatus: _setStatus,

		getTitle: _getTitle,
		setTitle: _setTitle,

		getMapping: _getMapping,
		setMapping: _setMapping,

		getNotes: _getNotes,
		setNotes: _setNotes,

		getImportedSettings: _getImportedSettings,
		isImported: _isImported,
		isActive: _isActive,
		hasPassedValidation: _hasPassedValidation,

		getData: _getData,
		getScopeAlias: _getScopeAlias,

		dropExtension: _dropExtension,
		addExtension: _addExtension,
		duplicateExtension: _duplicateExtension,
		isExtensionInProfile: _isExtensionInProfile,
		resetScopedTagTimestamps: _resetScopedTagTimestamps,
		createTaggingObject : _createTaggingObject
	}

	return _public;
}();

/**
 *
 *  Extensions Mainframe
 *
 */
utui.customizations = function() {

	var _namespace = "customizations";

	var _filtersToInclude = [],
		_initComplete = false,
		_lastOpenAccordion = false,
		_lastOpenExtensionId = false,
		_optionArray = ['<option value="global">' + localize.t('tiq.ext.all_tags') + '</option>', '<option value="preload">' + localize.t('tiq.ext.preloader') + '</option>', '<option value="domready">' + localize.t('tiq.ext.dom_ready') + '</option>', '<option value="footer">' + localize.t('tiq.ext.footer') + '</option>'],
		_map_outputs = {};

	// -------------------------------------------------------
	var _dialogs = {
		// -------------------------------------------------------
		confirmDeactivateExtensionDialog: function() {

			// -------------------------------------------------------
			var _namespace = 'confirmDeactivateExtension_dialog',
				_$template = utui.ui.dialog.body(),
				_container;

			var _view = {
				mainContent: function() {
					var v = '';

						v += '<div id="'+_namespace+'_description">';
							v += '<div class="section-padded">';
								v += '<div class="dialog-icon-container">';
									v += '<i class="icon-warning-sign" style="color:orange;"></i>';
								v += '</div>';
								v += '<div class="dialog-description">';
									v += '<p><strong>' + localize.t('tiq.ext.deactivate.are_you_sure') + '</strong></p>';
									v += '<p>' + localize.t('tiq.ext.deactivate.this_may_impact') + '</p>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				}
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onDeactivateBtnClick: function(e) {
					_toggleActive(_container);
					utui.ui.dialog.dispose(_namespace);
				},
				// --------------------------------------------------------
				onCancelBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.mainContent());
				}
			}

			var _public = {
				show: function(container) {
					_container = container;
					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.deactivate'),
							id: _namespace+'_deactivateBtn',
							click: _eventHandlers.onDeactivateBtnClick
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							id: _namespace+'_cancelBtn',
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					utui.ui.dialog.show(_namespace, localize.t('tiq.ext.deactivate.title'), buttons, _$template, { width: 400, height: 200 }, _eventHandlers.onCancelBtnClick);
				}
			}

			return _public;
		}(),
		// -------------------------------------------------------
		confirmRemoveExtensionDialog: function() {

			// -------------------------------------------------------
			var _namespace = 'removeExtension_dialog',
				_$template = utui.ui.dialog.body(),
				_extTitle = '',
				_isActive = false,
				_hasOutput = false;

			// --------------------------------------------------------
			var _context = {
				description: function() {
					var v = '';

					v += '<p><strong>' + localize.t('tiq.ext.remove.are_you_sure') + '</strong></p>';
					v += '<p>' + localize.t('tiq.ext.remove.you_cannot_undo') + '</p>';
					if(_hasOutput) {
						v += '<div class="bg-danger section-padded">' + localize.t('tiq.ext.remove.this_extension_contains') + '</div>';
					}

					return v;
				}
			}

			// --------------------------------------------------------
			var _view = {
				// --------------------------------------------------------
				mainContentTemplate: function() {
					var v = '';

						v += '<div id="'+_namespace+'_description">';
							v += '<div class="section-padded">';
								v += '<div class="dialog-icon-container">';
									v += '<i class="icon-warning-sign" style="color:orange;"></i>';
								v += '</div>';
								v += '<div class="dialog-description">'+_context.description()+'</div>';
							v += '</div>';
						v += '</div>';

					return v;
				}
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onCancelBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				},
				// --------------------------------------------------------
				onDeactivateExtensionBtnClick: function(e) {
					_toggleActive(extId);
					utui.ui.dialog.dispose(_namespace);
				},
				// --------------------------------------------------------
				onDropExtensionBtnClick: function(e) {
					utui.customizations.dropExtension(extId);
					_viewModel.drawJUIAccordion();
					utui.validation.runValidationOnAllTabs();

					utui.ui.dialog.dispose(_namespace);
				},
			}

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.mainContentTemplate());
				}
			}

			var _public = {
				show: function(extObj) {
					var _buttons, _title;

					_title = localize.t('tiq.ext.remove.title', {name:_getExtensionTitleByExtensionId(extObj._id)});
					_hasOutput = (extObj.output && extObj.output != '');
					_isActive = (extObj.status == 'active');
					extId = extObj._id;

					_render.content();

                    // Dialog buttons
                    if(_isActive) {
                        buttons = [
                            {
                                text: localize.t('tiq.dialog.button.drop_extension'),
                                click: _eventHandlers.onDropExtensionBtnClick
                            },
                            {
                                text: localize.t('tiq.dialog.button.deactivate'),
                                click: _eventHandlers.onDeactivateExtensionBtnClick
                            },
                            {
                                text: localize.t('tiq.dialog.button.cancel'),
                                click: _eventHandlers.onCancelBtnClick,
                                style: 'float:left; margin-left: 12px'
                            }
                        ];
                    }
                    else {
                        buttons = [
                            {
                                text: localize.t('tiq.dialog.button.drop_extension'),
                                click: _eventHandlers.onDropExtensionBtnClick
                            },
                            {
                                text: localize.t('tiq.dialog.button.cancel'),
                                click: _eventHandlers.onCancelBtnClick,
                                style: 'float:left; margin-left: 12px'
                            }
                        ];
                    }

					utui.ui.dialog.show(_namespace, _title, buttons, _$template, { width: 400, height: (_hasOutput) ? 230 : 200 }, _eventHandlers.onCancelBtnClick);
				}
			}

			return _public;
		}(),
		// -------------------------------------------------------
		addExtension: function() {

			// -------------------------------------------------------
			var _namespace = 'addExtension_dialog',
				_$template = utui.ui.dialog.body(),
				_itemTabLookup = {};

			// -------------------------------------------------------
			var _view = {
				mainContent: function() {
					var v = '';
						v += '<div id="customize-tabs">';

							v += '<div class="ui-widget inputSearchContainer" style="float:right; margin:7px 4px 0 0;">';
								v += '<input class="search" id="customize_search" value="">';
							v += '</div>';


							v += '<ul>';
							for (var i in utui.util.getVars(utui.config.customizationGroup, 1)) {
								v += '<li><a href="#customize-tabs-' + i + '">' + utui.config.customizationGroup[i] + '</a></li>';
							}
							v += '</ul>'


							v += '<div class="tab-contents">'
							v += this.tabContents();
							v += '</div>'
						v += '</div>';
					return v;
				},
				tabContents: function() {
					var tabContent = {};

					// Setup Begin
					for (var i in utui.util.getVars(utui.config.customizationGroup, 1)) {
						tabContent[i] = '<div id="customize-tabs-' + i + '">';
					}

					var extTemplates = _.values(utui.config.customizationList);

					extTemplates.sort(function (obj1, obj2) {
						return obj1.sort - obj2.sort
					});


					for (var i = 0, len = extTemplates.length; i < len; i++) {
						if (!isTemplateScoped(extTemplates[i])) continue;

						var template = extTemplates[i],
							lookup = template.title.replace(/ /g, "_");

						_itemTabLookup[lookup] = template.group;

						// If user cannot edit javascript permissions, do not show the Javascript Extension
						if(( template.id === '100011' || template.id === '100036' || template.id === '100040' ) && !utui.permissions.canEditJavascriptExtensions()) continue;
						
						var flag_new = '';
						if (typeof template.lastNewDay !== 'undefined' ){
						    var exp = new Date(template.lastNewDay);
						    var now = new Date().getTime();
						    if (now < exp.getTime()){
						        flag_new = ' flag_new';
						    }
						}						

						tabContent[template.group] += '<div class="customization_catalog_item'+flag_new+'" data-template-id="'+template.id+'">';
						if (flag_new !== ''){
							tabContent[template.group] += '<div class="flag_new_text">New</div>';
						}

                        if (typeof utui.customizations.addedCustomizations[template.id] !== "undefined" && template.addMore == 'false') {

                            tabContent[template.group] += '<div class="customization_catalog_btnContainer">';
                                tabContent[template.group] += '<span class="btn btn-small disabled">' + localize.t('tiq.ext.add.added') + '</span>';
                            tabContent[template.group] += '</div>';
                        }
                        else {
                            tabContent[template.group] += '<a href="#" id="customization_item_' + lookup + '" class="customization_catalog_btnContainer">';
                                tabContent[template.group] += '<span class="add-extension-button btn btn-small btn-success"><i class="icon-plus"></i> ' + localize.t('tiq.ext.add.add') + ' </span>';
                            tabContent[template.group] += '</a>';
                        }

							tabContent[template.group] += '<div class="customization_catalog_textblock">';
                        	tabContent[template.group] += '<div class="customization_catalog_title">' + template.title + '</div>';
							tabContent[template.group] += '<div class="customization_catalog_description">' + template.description + '</div>';
							tabContent[template.group] += '</div>';

						tabContent[template.group] += '</div>'; //end customization_catalog_item

					}

					// Setup End
					var v = '';
					for (var i in utui.util.getVars(utui.config.customizationGroup, 1)) {
						v += tabContent[i] + '</div>';
					}

					return v;
				}
			}

			// -------------------------------------------------------
			var _viewModel = {
				initSearch: function() {
					var searchTags = [];
					for (var i in utui.util.getVars(utui.config.customizationList)) {
						if (utui.config.customizationList[i].load === "true") {
							searchTags.push(utui.config.customizationList[i].title);
						}
					}

					$('#customize_search').autocomplete({
						source: searchTags,
						position: {
							my: 'right top',
							at: 'right bottom',
							collision: 'none'
						},
						select: function (event, ui) {
							var lookup = ui.item.value.replace(/ /g, "_");
							$('#customize-tabs').tabs('select', _itemTabLookup[lookup] - 1);
							$('#customization_item_' + lookup).parent().addClass('customize-row-highlight');

							setTimeout("$('#customize_search').val('');", 500);
							setTimeout("$('#customization_item_" + lookup + "').parent().removeClass('customize-row-highlight');", 2000);
						}
					});
				},
				initTabs: function() {
					$('#customize-tabs').tabs({
						fx: { opacity: 'toggle', duration: 'fast' },
						select: function () {
							$('#customize_search').focus()
						}
					});
				}
			}

			// -------------------------------------------------------
			var _bindUI = {
				addExtensionBtn: function() {
					$('#customize-tabs').find('.add-extension-button').on('click', _eventHandlers.onAddExtensionBtnClick);
				}
			}

			// -------------------------------------------------------
			var _eventHandlers = {
				onCloseBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				},
				onAddExtensionBtnClick: function(e) {
					e.stopImmediatePropagation();

					var templateId = $(this).closest('.customization_catalog_item').attr('data-template-id'),
						addExtension = function(extId, templateId) {
							// Add to Model
							exapi.addExtension(extId, templateId);

							// Add to View
							utui.customizations.addItem(extId);

							utui.customizations.drawJUIAccordion(extId);

							utui.labels.helper.renderLabels(extId, utui.customizations.id);

							if(exapi.hasOutput(extId)) {
								// update cache
								dsapi.getAllDataSourceSelection();
							}

                            var extType = utui.config.customizationList[templateId];
                            var extensionObject = {_id : extId, extType : extType.title};
                            var extensionTagging = exapi.createTaggingObject(extensionObject);
                            extensionTagging.tealium_event = utui.constants.tagging.CREATED_COMPLETED;

                            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, extensionTagging);

							$('#customize_content').animate({ scrollTop: $('#customizations_'+extId).offset().top - $('#customize_content').offset().top + $('#customize_content').scrollTop() }, 'slow');
						};

					exapi.getNextIdFromServer(1, null,
						// onSuccess
						function(providedLastId, count, extId) {
							addExtension(extId, templateId);
						},
						// onFailure
						function(extId) {
							addExtension(extId, templateId);
						});

					utui.ui.dialog.dispose(_namespace);
					return false;
				}
			}

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.mainContent());
				}
			}

			// -------------------------------------------------------
			function isTemplateScoped(extItem) {
				var profileTagList = {},
					manageData = utui.data.manage;

				for (var i in manageData) {
					if(!manageData.hasOwnProperty(i)) continue;

					profileTagList[manageData[i].tag_id] = 1;
				}

				if(extItem.load == 'true' && (extItem.scope === 'all' || extItem.scope === 'global' || extItem.scope === 'footer' || extItem.scope === 'preload' || extItem.scope === 'domready' || typeof profileTagList[extItem.scope] !== 'undefined')) {
					return true;
				}

				return false;

			}

			// PUBLIC
			// -------------------------------------------------------
			var _public = {
				show: function() {

					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.close'),
							id: _namespace+'_closeBtn',
							click: _eventHandlers.onCloseBtnClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					var options = {
						width: 800,
						height: 'auto',
						open: function() {
							$('#customize_search').focus();
						}
					}

					utui.ui.dialog.show(_namespace, localize.t('tiq.ext.add.title'), buttons, _$template, options, _eventHandlers.onCloseBtnClick);

					_viewModel.initSearch();
					_viewModel.initTabs();

					_bindUI.addExtensionBtn();
					utui.util.setSession(true);
				}
			}

			return _public;
		}()
	}

	// -------------------------------------------------
	var _view = {
		// -------------------------------------------------
		mainTabTemplate: function() {
			var v = '';

				v += '<div id="customizeContainer_headerControls" class="config_button_nofloat" style="text-align:right; padding:4px 50px 4px 0;">';
				v += '      <div class="tab-menu-item labels_menu_list labels_select_wrapper">';
				v += '      <select id="customize_labels_menu_list" data-list-type="bulk"></select>';
				v += '  </div>';

				v += '	<div class="tab-menu-item">';
				v += '		<div style="float:right;top:1px;">';
				v += '			<span id="customize_filter_menu_button" class="btn js-dropdown-button filter_button">';
			v += '					<span id="customize_filter_menu_text"><span class="menufont">' + localize.t('tiq.filter') + '</span></span>';
				v += '				<i class="icon-caret-down"></i>';
				v += '			</span>';
				v += '			<div id="customize_filter_menu_list" class="filter_menu_list menu_list_container gradient"></div>';
				v += '		</div>';
				v += '	</div>';

				v += '	<div class="tab-menu-item">';
				v += '		<span id="customize_addMoreBtn" class="btn customize_button_addmore btn-primary" style="margin-top:0;"><i class="icon-plus"></i> ' + localize.t('tiq.ext.add_extension') + '</span>';
				v += '	</div>';
				v += '</div>';

                // Table Header
                v += '<div id="customize_content_header"></div>';

                // Accordions
                v += '<div id="customize_content" style="min-height: 200px;"></div>';

                // Dialogs
                v += '<div id="customize_dialog_addmore" style="display: none"></div>';
                v += '<div id="customize_delete_confirm" style="display: none"></div>';
            return v;
        },
        // -------------------------------------------------
        tableHeader: function() {
            var v = '';
                v += '<div id="customizations_accordionHeader_status" class="container_status_header">' + localize.t('tiq.ext.status') + '</div>';
                v += '<div id="customizations_accordionHeader_scope" class="container_scope_header">' + localize.t('tiq.ext.tag_scope') + '</div>';
                v += '<div id="customizations_accordionHeader_exType" class="container_exType_header">' + localize.t('tiq.ext.extension_type') + '</div>';
                v += '<div id="customizations_accordionHeader_title" class="container_title_header">' + localize.t('tiq.ext.title') + '</div>';
                v += '<div id="customizations_accordionHeader_label" class="container_label_header">' + localize.t('tiq.ext.labels');
	            v += '  <span class="columnToggle"><i class="icon-plus-sign-alt"></i></span>';
	            v += '</div>';
                v += '<div id="customizations_accordionHeader_id" class="container_uid_header">' + localize.t('tiq.ext.uid') + '</div>';
            return v;
        },
        // -------------------------------------------------
        accordionTemplate: function(extId, templateId) {
            var v = '';

				// Main Accordion
				v += '<div id="'+_namespace+'_'+extId+'" data-id="' + extId + '" data-template-id="'+templateId+'" class="customize_container">';

					// Main Accordion Header
					v += '<h3><a href="#" id="'+_namespace+'_'+extId+'_accordion" class="js-accordion-header"></a></h3>';

					// Main Accordion Body
					v += '<div id="'+_namespace+'_'+extId+'_accordionBody"></div>';

				v += '</div>';

			return v;
		},
		// -------------------------------------------------
		accordionHeaderTemplate: function (id, status, isImported, scopeName, type, title, labelsExpanded) {
			var v = '',
				obj = exapi.getObjectByExtensionId(id),
				canModify = utui.labels.canUserModify(obj.labels),
				expandedClass = utui.labels.helper.getLabelExpandedClass(labelsExpanded);

			v = '<div class="container_bulk_select">';
			if (!isImported) {
				var checked = $('#customize_bulk_select_'+id).prop('checked');
				v += '<input id="customize_bulk_select_'+id+'" value="'+id+'" class="label_select_checkbox" '+(checked === 'checked' && canModify ? 'checked="checked"' : '')+' type="checkbox" data-exclude="1" style="display:block;" '+(!canModify ? 'disabled="disabled"' : '')+' />';
			}
			v += '</div>';

			if (typeof status !== 'undefined') {
				v += '<div id="'+_namespace+'_'+id+'_status_toggle" class="' + (isImported || !canModify ? 'disabled_toggle ' : '') + ' js-status-toggle container_status_wrapper">';
					v += '<span class="container_status_' + status + '"></span>';
				v += '</div>';
			}
				v += '<div class="container_scope">' + scopeName + '</div>';
				v += '<div class="container_exType">' + type + '</div>';
				v += '<div class="container_title">';
				v += '  <span class="title" title="' + title + '">' + title + '</span>';
				v += '</div>';
				v += '<div class="container_label ' + expandedClass + '" data-uid="' + id + '" data-type="' + utui.customizations.id + '"></div>';
				v += '<div class="container_uid">' + id + '</div>';
				v += '<div class="container_warning"><i class="icon-warning-sign"></i> x <span class="count"></span></div>';

			return v;
		},
		// -------------------------------------------------
		accordionSideResources: {
			editWorkflowBtn: function() {
				return '<a href="#" class="js-edit-btn btn btn-block i-color-edit"><i class="icon-edit"></i> ' + localize.t('tiq.ext.edit_workflow') + '</a>';
			},
			editMappingBtn: function() {
				return '<a href="#" class="js-mapping-btn btn btn-block i-color-copy"><i class="icon-edit"></i> ' + localize.t('tiq.ext.edit_mappings') + '</a>';
			},
			duplicateBtn: function() {
				return '<a href="#" class="js-copy-btn btn btn-block i-color-copy"><i class="icon-copy"></i> ' + localize.t('tiq.ext.duplicate') + '</a>';
			},
			dropBtn: function() {
				return '<a href="#" class="js-delete-btn btn btn-block i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.ext.delete') + '</a>';
			}
		},
		// -------------------------------------------------
		accordionMainResources: {
			titleField: function(extId, value, isDisabled) {
				var v = '';

					v += '<input type="text" id="'+_namespace+'_'+extId+'_title" class="js-title-input" name="'+_namespace+'_'+extId+'_title" value="'+value+'" maxlength="100" size="52">';

				return utui.ui.template.contextBox(v, localize.t('tiq.ext.title'));
			},
			hiddenTitleField: function(extId, value) {
				return '<input type="hidden" id="'+_namespace+'_'+extId+'_title" name="'+_namespace+'_'+extId+'_title" value="'+value+'">';
			},
			scopeField: function(extId, isMultiple, options) {
				var v = '';

				v += '<div class="extension-scope-container">';
					v += '<select id="'+_namespace+'_'+extId+'_scope" class="select2 js-scope-selector" name="'+_namespace+'_'+extId+'_scope" '+((isMultiple) ? 'multiple="multiple"' : '')+' title="'+utui.tooltip.customizations.scope+'">'+options+'</select>';
				v += '</div>';

                // Add the select for advanced execution timing options relavant to the extension scope
                v += _view.accordionMainResources.generateAdvExecSelectorContent(extId);

				return utui.ui.template.contextBox(v, localize.t('tiq.ext.scope'));
			},
			scopeFieldDisabled: function(extId, value, context) {
				var v = '';
					v += '<input type="hidden" id="'+_namespace+'_'+extId+'_scope" name="'+_namespace+'_'+extId+'_scope" value="'+value+'">';
					v += '<div class="scope-disabled">'+context+'</div>'

                // Add the select for advanced execution timing options relavant to the extension scope
                v += _view.accordionMainResources.generateAdvExecSelectorContent(extId);

				return utui.ui.template.contextBox(v, localize.t('tiq.ext.scope'));
            },
            //----------------------------------------------
            // Utility function to build the <select> for advanced extension attributes used to specify execution timing in utag.
            // @return string
            generateAdvExecSelectorContent: function(extId){
                var obj = exapi.getObjectByExtensionId(extId),
                    aesContent = '',
                    isVisible = _isUseAdvExtAttribs(extId),
					isAdvSingExec = _isUseAdvSingleExecOptions(extId),
                    readOnly = '',
                    advExcTmgOptions = '';
                // Set the default option
                if (_.isUndefined(obj.advExecOption)) {
                    exapi.setAdvExecOption(extId, "alr");
                }
                // Lock the option if needed
                if (_isAdvExtLocked(extId)){
                	readOnly = ' disabled ';
                }
                advExcTmgOptions += '<option value="blr"' + (obj.advExecOption === 'blr' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_blr')+'</option>'; //
                advExcTmgOptions += '<option value="alr"' + (obj.advExecOption === 'alr' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_alr')+'</option>'; //
                //==> Commented out - This may be needed in the future , but for now it should just be retained, unused. CS: 5/6/15
                // advExcTmgOptions += '<option value="bwq"' + (obj.advExecOption === 'bwq' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_bwq')+'</option>';
                advExcTmgOptions += '<option value="end"' + (obj.advExecOption === 'end' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_end')+'</option>';
				if (isAdvSingExec){
					advExcTmgOptions += '<option value="alr_ro"' + (obj.advExecOption === 'alr_ro' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_alr_ro')+'</option>';
					advExcTmgOptions += '<option value="blr_ro"' + (obj.advExecOption === 'blr_ro' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_blr_ro')+'</option>';
					advExcTmgOptions += '<option value="end_ro"' + (obj.advExecOption === 'end_ro' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_end_ro')+'</option>';
					// ===> Commented out - the DOM ready scope is mutually exclusive with the All Tags scope, making this unfeasable. CS : 10/25/16
					// advExcTmgOptions += '<option value="domready_ro"' + (obj.advExecOption === 'domready_ro' ? " selected" : "") + '>'+localize.t('tiq.ext.adv_exec_option_domready_ro')+'</option>';
				}

                aesContent += '<div style="margin-top:5px;min-height:25px;">';
                    aesContent += '<table id="' + _namespace + '_' + extId + '_advExcDiv" style="display:' + (isVisible ? 'block':'none') + ';">';
                    aesContent += '<tr>';
                        aesContent += '<td><b>'+localize.t('tiq.ext.adv_exec_execution')+'</b></td>';
                        aesContent += '<td><select id="'+_namespace+'_'+extId+'_advExcTmg" class="select js-adv-exc-tmg-selector" name="'+_namespace+
                        						'_'+extId+'_advExcTmg" title="'+utui.tooltip.customizations.scope+'" '+readOnly+'>'+advExcTmgOptions+'</select></td>';
                        var minUtag = _getMinUtagLevel(extId);
						if (minUtag){
	                        aesContent += '<td><i class="icon-info-sign"></i>&nbsp;'+localize.t('tiq.ext.adv_exec_min_utag_warning', {utagvsn:minUtag})+'</td>';							
						} else {
	                        aesContent += '<td><i class="icon-info-sign"></i>&nbsp;'+localize.t('tiq.ext.adv_exec_438_warning')+'</td>';							
						}                        						
                    aesContent += '</tr>';
                    aesContent += '</table>';
                aesContent += '</div>';

                return aesContent;
			}

		}
	}

	// -------------------------------------------------
	var _viewModel = {

		// -------------------------------------------------
		// initial template injection
		// @return undefined
		initTabFrame: function() {
			$('#tabs-customizations').html(_view.mainTabTemplate);
		},

		// -------------------------------------------------
		// initial template injection for headers
		// @return undefined
		initTableHeader: function() {
			$('#customize_content_header').html(_view.tableHeader());
		},

		// -------------------------------------------------
		// initial template injection for accordion body
		// @return undefined
		initAccordionBody: function(extId) {
			$('#'+_namespace+'_'+extId+'_accordionBody').html( utui.ui.template.accordion(true, true) );
		},

		// -------------------------------------------------
		// refreshes any open accordion contents (this updates scoped names that may have been renamed)
		// @return undefined
		refreshLastOpenAccordionContainer: function() {
			// If container is open, we should re-render the internal view
			if(_lastOpenExtensionId && _isContainerOpen()) {
				_saveTemplateData(_lastOpenExtensionId);

				_viewModel.constructAccordionContents(_lastOpenExtensionId, function () {
					$('#customizations_' + _lastOpenExtensionId + '_accordionBody').find('.accordion-container').show();
				});
			}
		},

		// -------------------------------------------------
		// Initializes and renders all accordion headers
		// @return undefined
		renderAccordionHeaderCollectionView: function() {
			var sortedCollection,
				data = utui.data.customizations || {};

			 // add sort numbers based on order
			for(var i in utui.util.getVars(data, 1)) {
				if(!data.hasOwnProperty(i)) continue;

				if(typeof data[i].sort === 'undefined') {
					data[i].sort = i-1;
				}
			}

			// return object indexed by 'sort'
			sortedCollection = utui.util.getVars(data, 3, 'sort');

			for(var i in sortedCollection) {
				if(!sortedCollection.hasOwnProperty(i)) continue;

				_public.addItem(sortedCollection[i]._id, true);
			}

			// This gets rendered
			for(var i in sortedCollection) {
				if(!sortedCollection.hasOwnProperty(i)) continue;

				// render each individual extension header
				this.renderAccordionHeaderItemView( sortedCollection[i] );
			}

			for(var i in sortedCollection) {
				if(!sortedCollection.hasOwnProperty(i)) continue;

				// run data model validation
				_viewModel.validateExtModel( sortedCollection[i]._id );
			}
		},

		// -------------------------------------------------
		// Initializes and renders specific accordion header
		// @return undefined
		renderAccordionHeaderItemView: function(extObj) {
			var extId = extObj._id,
				isImported = exapi.isImported(extId),
				status = extObj.status,
				scopeName = _getScopeNameByExtensionId(extId),
				type = _getExtensionTypeByExtensionId(extId),
				title = _getExtensionTitleByExtensionId(extId),
				labelsExpanded = utui.labels.helper.getLabelsExpandedForTab();

			// Initial accordion header rendering
			$('#'+_namespace+'_'+extId+'_accordion').html( _view.accordionHeaderTemplate(extId, status, isImported, scopeName, type, title, labelsExpanded) );

			$('#'+_namespace+'_'+extId+'_status_toggle').on('click', _eventHandlers.onToggleStatusBtnClick);

			// Click handler for the bulk select checkbox
			$('#customize_bulk_select_'+extObj._id).safeBind('click', function(){
				var $this = $(this);

				// hack to enable checkboxes to be checked
				setTimeout(function () {
					$this.prop("checked", !$this.prop("checked"));
					utui.customizations.labels.labelCheckboxChecked();
				}, 0);

				return false;
			});
		},

		// -------------------------------------------------
		// Initializes and renders help contextual dropdown
		// @return undefined
		renderHelpTab: function() {
			// ----------------------------------------------------
			var _namespace = 'customizations';

            // ----------------------------------------------------
            var _articles = [
                {
                    id: 0,
                    title: localize.t('tiq.help.ext.intro_to_extensions'),
                    type: 'document',
                    linkHref: common.community.extensions_tab,
                    isExternalLink: true
                },
                {
                    id: 1,
                    title: localize.t('tiq.help.ext.extension_series'),
                    type: 'document',
                    linkHref: common.community.extension_series,
                    isExternalLink: true
                },
                {
                    id: 2,
                    title: localize.t('tiq.help.ext.order_of_operations'),
                    type: 'document',
                    linkHref: common.community.utag_js_order_of_operation,
                    isExternalLink: true
                }
            ];

			var _context = {
				header: localize.t('tiq.help.ext.header'),
				body: localize.t('tiq.help.ext.body')
			}

			utui.help.initHelpTab(_namespace, _articles, _context);
		},


		// -------------------------------------------------
		// Renders accordion sidebar contents
		// @return undefined
		renderAccordionSidebar: function(extId) {
			var context = '',
				$container = $('#'+_namespace+'_'+extId+'_accordionBody'),
				container = _namespace + '_' + extId,
				obj = exapi.getObjectByExtensionId(extId);

				context += _viewModel.constructActionButtons(extId);
				context += _viewModel.constructSidebarLabels(extId);
				if (utui.targets.isPublishTargetsForExtensionOk(extId)) {
				context += _viewModel.constructPublishLocations(extId,container);
				}
				context += _viewModel.constructSidebarDescription(extId);

			$container.find('.sidebar-body').html(context);

			// Disable the buttons if the a resource lock is applied
			if (!utui.labels.canUserModify(obj.labels)) {
				$container.find('.js-edit-btn').addClass('ui-state-disabled');
				$container.find('.js-mapping-btn').addClass('ui-state-disabled');
				$container.find('.js-copy-btn').addClass('ui-state-disabled');
				$container.find('.js-delete-btn').addClass('ui-state-disabled');
			}

			utui.customizations.labels.renderSingleLabelSelect(extId, container);
			utui.customizations.labels.redrawLabels(obj.labels, container);
			utui.customizations.publishLocations.renderLocations(extId, container)
		},

		// -------------------------------------------------
		// Renders accordion main contents
		// @return undefined
		renderAccordionMain: function(extId) {
			var obj = exapi.getObjectByExtensionId(extId),
				content = "",
				templateId = obj.id,
				canModify = utui.labels.canUserModify(obj.labels);
      
			if (utui.targets.isPublishTargetsForExtensionOk(extId)){
      	content += _viewModel.constructPublishLocationsWidget(extId, _namespace);
			}
				
				content += _viewModel.constructTitle(extId);
				content += _viewModel.constructScope(extId);

	            // Extension Template Reference (customize_templates use this to inject its configurations)
				content += utui.ui.template.contextBox('<div id="'+_namespace+'_'+extId+'_content" class="customization_body"></div>', localize.t('tiq.ext.configuration'));

				// Output Data Sources (if available)
				content += _viewModel.constructOutputListing(extId);

				// Notes Container
				content += utui.ui.template.contextBox( '<div id="'+_namespace+'_'+extId+'_notes_container" class="notes_container"></div>');
				// content += utui.ui.template.contextBox(' <div id="'+_namespace+'_'+extId+'_contentReadOnly" class=""></div>', 'Configuration (Read Only)');

			$('#'+_namespace+'_'+extId+'_accordionBody').find('.main-body').html(content);

			// Extension Template Injection
			utui.customizations_template[obj.id].fillData(extId, true);
   
            if (utui.targets.isPublishTargetsForExtensionOk(extId)){
			//Add tooltip for publish target
			var tooltipObj = {};
      tooltipObj[_namespace+"_"+extId+"_tooltip_title"] = { gravity: 'nw' };
      utui.util.addTooltip(tooltipObj);
      
      obj.selectedTargets = obj.selectedTargets || {};
      $('#' + _namespace+"_"+extId+"_prod_target").prop("checked", obj.selectedTargets.prod !== 'false');
      $('#' + _namespace+"_"+extId+"_qa_target").prop("checked", obj.selectedTargets.qa !== 'false');
      $('#' + _namespace+"_"+extId+"_dev_target").prop("checked", obj.selectedTargets.dev !== 'false');
      
      if (utui.permissions.isCustomTargetsEnabled()) {
        
        var customTargetsArr = [];
        for (var env in obj.selectedTargets) {
          if (utui.targets.isCustom(env)) {
            customTargetsArr.push(env);
          }
        }
        
        var allCustom = utui.targets.getList('custom') || [];
        if (customTargetsArr.length !== allCustom.length) {
          customTargetsArr = allCustom;
        }
        _.each(customTargetsArr, function (env) {
          $('#' + _namespace + "_" + extId + "_" + env + "_target").prop("checked", obj.selectedTargets[env] !== "false");
        });
        
      }
			
			$("input.ext_publish_target").safeOn("click",function(){
			   var dataset = this.dataset,
				 ext = utui.data.customizations[dataset.uid];
         ext.selectedTargets[dataset.env] = ""+this.checked;
			});
   
			}

			// Hide any prevision header message
			_viewModel.hideAccordionHeaderMessage(extId);

			// If inherited, prevent tabbing into accordion
			if(exapi.isImported(extId)) {
				// _viewModel.showHeaderInherited(extId);
				var profile = '<span class="output-variable-item">' + obj.settings.profileid + '</span>';
				_viewModel.showAccordionHeaderMessage(extId, localize.t('tiq.ext.imported_extension', {profile:profile}), 'info');
				_viewModel.disableAccordionInterface(extId, templateId);
			}
			else if (!canModify) {
				_viewModel.showAccordionHeaderMessage(extId, localize.t('tiq.ext.you_cannot_modify'), 'info');
				_viewModel.disableAccordionInterface(extId, templateId);
			}
            // If Javascript Code Extension, prevent tabbing into accordion
			else if(( templateId === '100011' || templateId === '100036' || templateId === '100040' ) && !utui.permissions.canEditJavascriptExtensions()) {
                _viewModel.showAccordionHeaderMessage(extId, localize.t('tiq.ext.dont_have_necessary_permission'), 'warning');
                _viewModel.disableAccordionInterface(extId, templateId);
            }
            else if(templateId === '100030') {
                _viewModel.showAccordionHeaderMessage(extId, localize.t('tiq.ext.mobile_library_extension'), 'danger');
            }

            _bindUI.bindInputSelectors(extId);

			// Accordion Content Renders
			_viewModel.renderSelect2Scope(extId);
			_viewModel.renderNotes(extId);
			_viewModel.renderTooltips();
		},
		// ------------------------------------------------
		// Sets Scope to use Select2
		renderSelect2Scope: function(extId) {
			var manageTitles = _getManageOptions(); // Create list of Manage Titles one time, then append those in getScopeSelectOptions()

			var $scopeEl = $('#'+_namespace+'_'+extId+'_scope'),
				obj = exapi.getObjectByExtensionId(extId),
				templateObj = exapi.getTemplateObject(obj.id),
				scopeOptions = utui.customizations.getScopeSelectOptions(templateObj, manageTitles, extId),
				scope = obj.scope || '',
				tooltipObj = [];

			// Append the options in the select field
			$scopeEl.empty();
			$scopeEl.append(scopeOptions);

			if(scope === 'all' && $scopeEl.hasClass('select2')) {

				$scopeEl.select2({ containerCssClass: 'js-scope-selector' });
				$scopeEl.val(scope);

			} else {

				if ($scopeEl.hasClass('select2')) {
					$scopeEl.select2({ containerCssClass: 'js-scope-selector' });
					$scopeEl.select2('val', scope.toString().split(","));
				} else {
					$scopeEl.val(scope);
				}
			}

			// If the extension is scoped to a tag directly (by template), then set its scope
			// rb - Potential deprecation since no extension today uses this
			var scopedTagLookup = 0;
			for (var i in utui.util.getVars(utui.data.manage)) {

				// If the tag template is equal to the scope template...
				if (utui.data.manage[i] && utui.data.manage[i].tag_id == templateObj.scope) {
					scopedTagLookup = i;
					break;
				}

			}
			$scopeEl.prop('value', scopedTagLookup);

			if (scopedTagLookup !== 0) return;

			if ($scopeEl.hasClass('select2')) {
				// Default to global (All Tags)
				var selectValues = (scope === 'all') ? ['global'] : obj.scope.toString().split(",");
				$scopeEl.select2('val', selectValues);

				// Add the tooltip to the generated select2 div
				$('#s2id_'+_namespace+'_'+extId+'_scope').attr("title", utui.tooltip.customizations.scope_multiple);

				tooltipObj['s2id_'+_namespace+'_'+extId+'_scope'] = { gravity: 's' };
				utui.util.addTooltip(tooltipObj)
			}
			else {
				$scopeEl.val(scope);
			}
		},
		// ------------------------------------------------
		renderNotes: function(extId) {

			var defaultNotesLabel = localize.t('tiq.ext.enter_notes'),
				obj = exapi.getObjectByExtensionId(extId),
				canModify = utui.labels.canUserModify(obj.labels);

			function _renderNotesReadonlyContainer($readonly, notes, defaultText) {
				$readonly.empty();
				var notesArray = notes ? notes.split("\n") : [];

				for (var i = 0; i < notesArray.length; i++) {
					var paragraph = notesArray[i] || " ";
					$("<p></p>").text(notesArray[i]).appendTo($readonly);
				}
				if (i == 0)
					$readonly.text(defaultText);
			}

			$('#'+_namespace+'_'+extId+'_notes_container').attr('style','width: 640px').append(
				$("<div></div>", {
					"class": "icon_container"
				}).append(
					$("<i></i>", {
						"class": "icon-edit sticky_icon"
					})
				)
			).append(
				$("<div></div>", {
					"class": "readonly",
					click: function () {
						var $el = $(this);
						var $parent = $el.parent();
						var $textarea = $parent.find("textarea");

						if(exapi.isImported(extId) || !canModify) {
							return false;
						}

						$parent.addClass("edit_mode");
						$textarea.show();

                        if ($el.height() > 50) {
                            $textarea.height($el.height());
                            $textarea.focus();
                        } else {
                            $textarea.height($el.height()).animate({
                                "height": 50
                            }, 220, function () {
                                $textarea.focus();
                            })
                        }

                        $('#'+_namespace+'_'+extId+'_notes_container').append(
                            $('<span />', {
                                "id" : "notes_"+extId+"_saveBtn",
                                "class" : "btn btn-small",
                                "style" : "position: absolute; top: 84px; right: 32px;"
                            }).text(localize.t('tiq.ext.save_note'))
                        );
                    }
                })
            ).append(
                $("<textarea />", {
                    id: extId + "_notes",
                    name: extId + "_notes",
                    placeholder: defaultNotesLabel,
                    css: {
                        width: "550px",
                        height: "18px"
                    },
                    class: (exapi.isImported(extId) || !canModify) ? 'ui-state-disabled ' : ' ',
                    focusout: function () {
                        var $el = $(this);
                        var $parent = $el.parent();
                        var val = $el.val();
                        var $readonly = $parent.find(".readonly");

						_renderNotesReadonlyContainer($readonly, val, defaultNotesLabel);

						$parent.removeClass("edit_mode");
						$el.height(18);

						$("#notes_"+extId+"_saveBtn").remove();
					},
					change: function () {
						var val = $(this).val();
						exapi.setNotes(extId, val);
						utui.profile.setDirty();
					}
				}).val(exapi.getNotes(extId) ? _.unescape(exapi.getNotes(extId)) : "").attr("spellcheck", "false").attr("disabled", exapi.isImported(extId) || !canModify)
			)

			_renderNotesReadonlyContainer($('#'+_namespace+'_'+extId+'_notes_container').find('.readonly'), _.unescape(exapi.getNotes(extId)), defaultNotesLabel);
		},
		// ------------------------------------------------
		renderTooltips: function() {
			// Show condition filter tooltip if regex is selected
			var $conditionFilters = $("#customize_content").find("select[id$='_filtertype']"),
				cfl = $conditionFilters.length,
				tooltipObj = {};

			for (var i = $conditionFilters.length - 1; i >= 0; i--) {
				var $filter = $($conditionFilters[i]);

				if($filter.val() === "regular_expression") {
					var filterId = $filter.attr("id").replace('_filtertype','');
					$filter
						.closest(".customization_item, .customization_body")
						.after('<div id="'+filterId+'_regex_tooltip" class="ui-icon ui-icon-info customization_condition_tooltip" title="'+utui.tooltip.customizations.regex+'"></div>');

					tooltipObj[filterId+'_regex_tooltip'] = { gravity:'w' };
				}
			};

			utui.util.addTooltip(tooltipObj);
		},
		// ------------------------------------------------
		disableAccordionInterface: function(extId, templateId) {
			// Allow extensions to handle the disable/locking responsibility if this generic logic is unsuitable.
            if (utui.customizations_template[templateId].delegateDisableAccordionInterface){
                utui.customizations_template[templateId].delegateDisableAccordionInterface(extId);
            	return;
			}

			_bindUI.unbindInputSelectors(extId);

			// Add disabled events
			$('#'+_namespace+'_'+extId+'_accordionBody .main-container').find('select, input, button, a').attr({
				'tabIndex':'-1',
				'disabled':''
			});

			// Set color of fields to appear disabled
			$('#'+_namespace+'_'+extId+'_accordionBody .main-container').find('input').css('background','#f1f1f1');

			// Prevent all anchors from being clicked on if disabled attribute is binded to them
			$('#'+_namespace+'_'+extId+'_accordionBody').find('a[onclick]').each(function(e) {
				$(this).data('onclick', this.onclick);

				this.onclick = function(event) {
					if($(this).attr('disabled')) {
						return false;
					};

					$(this).data('onclick').call(this, event || window.event);
				};
			});

			var aceEditors = utui.customizations_template[templateId].aceEditor;
            _.each(aceEditors, function(editor) {
                editor.setReadOnly(true);
            });

		},

		// -------------------------------------------------
		// @param (extId) integer - Extension ID
		// @param (message) string - Message to be displayed
		// @param (errorType) string - (success | warning | danger | info)
		// @param (isError) boolean - adds handler for validation check
		showAccordionHeaderMessage: function(extId, message, msgType, isError) {
			var content = '<div class="js-accordion-header-notification'+(isError ? ' js-accordion-error' : '')+' section-padded text-center'+(msgType ? ' bg-'+msgType : '')+'">'+message+'</div>';

			$('#'+_namespace+'_'+extId+'_accordionBody').find('.main-header').html(content);
		},

		// -------------------------------------------------
		hideAccordionHeaderMessage: function(extId) {
			$('#'+_namespace+'_'+extId+'_accordionBody').find('.main-header').empty();
		},

		clearValidationView: function(obj) {
			var extId = obj._id;

			utui.customizations_template.util.clearValidationView(obj);

			$('#'+_namespace+'_'+extId+'_accordionBody').find('.js-error-field').hide();
		},

		renderCautionOnAccordions: function() {
			var data = utui.data.customizations,
				extId;

			for(extId in data) {
				_viewModel.validateExtModel(extId);
			}

			for(extId in data) {
				_viewModel.validateView(extId);
			}
		},

		// -------------------------------------------------
		validateExtModel: function(extId) {
			var extObj = exapi.getObjectByExtensionId(extId),
				templateId = extObj.id;

			// If extension is imported, do not run validation
			if(exapi.isImported(extId)) return;

			// If javascript code extension and cannot edit, do not run validation
			if(( extObj.id === '100011' || extObj.id === '100036'  || extObj.id === '100040') && !utui.permissions.canEditJavascriptExtensions()) return;

			// Check model
			if(utui.customizations_template[templateId].validateModel) {
				utui.customizations_template[templateId].validateModel(extObj);
			}
		},

		// -------------------------------------------------
		validateView: function(extId) {
			var entryCollection = utui.validation.getMap('customizations');

			this.removeAccordionWarning(extId);

			if(!$.isEmptyObject(entryCollection[extId])) {
				this.showAccordionWarning(extId, entryCollection[extId].length);
			} else if($.isEmptyObject(entryCollection)) {
				// clear tab warning when all resolved
				utui.validation.renderCautionOnTabs();
			}
		},

		// -------------------------------------------------
		validateExtView: function(extObj) {
			var extId = extObj._id,
				templateId = extObj.id;

			// If extension is imported, do not run validation
			if(exapi.isImported(extId)) return;

			// If javascript code extension and cannot edit, do not run validation
			if(extObj.id === '100011' && !utui.permissions.canEditJavascriptExtensions()) return;

			// validate accordion view
			this.validateView(extId);

			// validate extension
			utui.customizations_template[templateId].isValid(extId);

			// validate config view
			utui.customizations_template.util.validateView(extObj);

		},

		// -------------------------------------------------
		showAccordionWarning: function(extId, count) {
			var $extNamespace = $('#'+_namespace+'_'+extId);

			$extNamespace.find('.container_warning').addClass('active').find('.count').html(count);
			$extNamespace.find('.main-header').html('<div class="js-accordion-header-notification js-accordion-error section-padded text-center bg-danger">' + localize.t('tiq.ext.attention_is_required') + '</div>');
		},

		// -------------------------------------------------
		removeAccordionWarning: function(extId) {
			var $extNamespace = $('#'+_namespace+'_'+extId);

			$extNamespace.find('.container_warning').removeClass('active').find('count').empty();
			$extNamespace.find('.js-accordion-error').remove();
		},

		// -------------------------------------------------
		// Constructs view for title based on extension ID
		// @return string
		constructTitle: function(extId) {
			var obj = exapi.getObjectByExtensionId(extId),
				templateObj = exapi.getTemplateObject(obj.id);

            return _view.accordionMainResources.titleField(extId, obj.title);

            // Used for single-instance extensions only (i.e. E-Commerce, Domain-Based Deployment, etc.)
            return _view.accordionMainResources.hiddenTitleField(extId, templateObj.title);
        },
		
		// -------------------------------------------------
		// Constructs publish locations widget
		// @return string
		constructPublishLocationsWidget: function(extId, _namespace) {
      
      var devAliasName = utui.targets.aliasDisplayName('dev'),
          qaAliasName = utui.targets.aliasDisplayName('qa'),
          prodAliasName = utui.targets.aliasDisplayName('prod'),
      		obj = exapi.getObjectByExtensionId(extId);
			
      if (!obj.selectedTargets) {
        obj.selectedTargets = utui.targets.addTargetsToObject({} , 'true');
			}
      
      var content = "";
      content += "<div class='customization_pub_target_outter'>";
      content += "<div class='customization_pub_target_inner'>";
      content += "<div class='customization_pub_target_container'>";
      content += "<span class='dialogSectionHeader'>Publish Locations ";
      content += "<div id='"+_namespace+"_"+extId+"_tooltip_title' class='icon-question-sign' original-title='"+localize.t("tiq.ext.tooltip.publish_targets")+"' style='font-size:15px; margin-top: -2px;'></div></span>";
      content += "<br><br><input class='ext_publish_target' data-uid='"+extId+"' data-env='prod' id='"+_namespace+"_"+extId+"_prod_target' type='checkbox'> "+prodAliasName;
      content += "<br><input class='ext_publish_target' data-env='qa' data-uid='"+extId+"' id='"+_namespace+"_"+extId+"_qa_target' type='checkbox'> "+qaAliasName;
      content += "<br><input class='ext_publish_target' data-env='dev' data-uid='"+extId+"' id='"+_namespace+"_"+extId+"_dev_target' type='checkbox'> "+ devAliasName;
      if (utui.permissions.isCustomTargetsEnabled()) {
      	//Update selectedTargets to conatin all envs
        obj.selectedTargets = utui.targets.addTargetsToObject(obj.selectedTargets, 'true', "custom");
        var customTargets = utui.targets.addTargetsToObject([], null, "custom").sort();
        _.each(customTargets, function(env){
          content += "<br><input class='ext_publish_target' data-env='"+env+"' data-uid='"+extId+"' id='"+_namespace+"_"+extId+"_"+env+"_target' type='checkbox'> "+ utui.targets.aliasDisplayName(env);
				});
      }
      content += "</div></div></div>";
			return content;
		},

		// -------------------------------------------------
		// Constructs view for scope based on extension ID
		// @return string
		constructScope: function(extId) {
			var obj = exapi.getObjectByExtensionId(extId),
				templateObj = exapi.getTemplateObject(obj.id),
				options = '',
				v = '';

			switch(templateObj.scope) {

				// GLOBAL
				case 'global':
					v += _view.accordionMainResources.scopeFieldDisabled(extId, templateObj.scope, localize.t('tiq.ext.all_tags'));
					break;

				// PRELOAD
				case 'preload':
					v += _view.accordionMainResources.scopeFieldDisabled(extId, templateObj.scope, localize.t('tiq.ext.preloader'));
					break;

				// DOM READY
				case 'domready':
					v += _view.accordionMainResources.scopeFieldDisabled(extId, templateObj.scope,localize.t('tiq.ext.dom_ready'));
					break;

				// ALL
				case 'all':
					v += _view.accordionMainResources.scopeField(extId, true);
					break;

				// FOOTER
				case 'footer':
					if(templateObj.domready == "true" || templateObj.preload == "true") {
						options += _optionArray[3]
						if (templateObj.preload == "true") { options += _optionArray[1] }
						if (templateObj.domready == "true") { options += _optionArray[2] }

						v += _view.accordionMainResources.scopeField(extId, false, options);
					}
					else {
						v += _view.accordionMainResources.scopeFieldDisabled(extId, templateObj.scope, localize.t('tiq.ext.footer'));
					}
					break;

				// TAGS (EXPLICIT) SCOPED
				default:
					v += _view.accordionMainResources.scopeFieldDisabled(extId, '', utui.config.manageList[templateObj.scope].title);
					break;
			}

			return v;
		},

		// -------------------------------------------------
		// Constructs view for output variables based on extension ID
		// @return string
		constructOutputListing: function(extId) {
			var outputType = exapi.getOutputType(extId),
				outputValue = exapi.getOutputValues(extId),
				outputDesc = exapi.getOutputDesc(extId),
				outputValueArr, outputDescriptionArr,
				v = '';

			if(outputType !== 'hidden' && outputValue.length > 0) {

				outputValueArr = outputValue.split(',');
				outputDescriptionArr = outputDesc.split(',');

                // Construct listing
                v += '<ul class="list-unstylized '+((outputValueArr.length !== outputDescriptionArr.length) ? ' list-inline' : '' )+'">';

                for (var i = 0; i < outputValueArr.length; i++) {
                    v += '<li><div class="output-variable-item"><i class="icon-signout"></i> ';
                        v += outputValueArr[i];
                    v += '</div>';
                        if(outputValueArr.length === outputDescriptionArr.length && outputDescriptionArr[0] !== '') {
                            v += ' - <span>' + outputDescriptionArr[i] + '</span>'
                        }
                    v += '</li>';
                };
                v += '</ul>';

                // Print
                // return  _view.accordionMainResources.contextBox(v, 'Output Data Sources');
                return  utui.ui.template.contextBox(v, localize.t('tiq.ext.output_data_sources'));
            }

			return '';
		},

		// -------------------------------------------------
		// Constructs view for action buttons based on extension ID
		// @return string
		constructActionButtons: function(extId) {
			var obj = exapi.getObjectByExtensionId(extId),
				templateObj = exapi.getTemplateObject(obj.id),
				v = '';

				// Do not render any action buttons if user has no javascript extension permissions
				if(( obj.id === '100011' || obj.id === '100036'  || obj.id === '100040') && !utui.permissions.canEditJavascriptExtensions()) return '';

				// Extension Properties (Edit, Mapping, Duplicate, Drop)
				v += '<div class="section-padded">';

				if(!exapi.isImported(extId)) {
					// If we're using Privacy Manager (100026) or iOS Library (100030)
					if (templateObj.useWorkflow == "true") {
						v += _view.accordionSideResources.editWorkflowBtn();
					}
					else if(exapi.isMappable(extId)) {
						v += _view.accordionSideResources.editMappingBtn();
					}
					if (templateObj.addMore == "true") {
						v += _view.accordionSideResources.duplicateBtn();
					}

					v += _view.accordionSideResources.dropBtn();
				}
				else {
					if (templateObj.addMore == "true") {
						v += _view.accordionSideResources.duplicateBtn();
					}
				}

				v += '</div>';
			return v;
		},

		// -------------------------------------------------
		constructSidebarLabels: function(extId) {
			// LABELS
			var content = '';
			if (!exapi.isImported(extId)) {
				content += '<div id="'+_namespace+'_'+extId+'_labels" class="contextSectionContent">';
				content += '	<div class="contextSectionHeader labels js-labels-container">' + localize.t('tiq.ext.labels');
				content += '		<div class="labels_select_wrapper">';
				content += '			<select id="customize_labels_select_' + extId + '" data-list-type="single"></select>';
				content += '		</div>';
				content += '	</div>';
				content += '</div>';
			}
			return content;
		},

		// -------------------------------------------------
		constructPublishLocations: function(extId,container) {
			// LABELS
			var content = '';
			if (!exapi.isImported(extId)) {
        content += '                    <div class="contextSectionContent"><div class="contextSectionHeader labels js-labels-container">'+localize.t('tiq.tags.current_published_locations')+' </div>';
        // ENVIRONMENTS
        var devAliasName = utui.targets.aliasDisplayName('dev'),
            qaAliasName = utui.targets.aliasDisplayName('qa'),
            prodAliasName = utui.targets.aliasDisplayName('prod');
        
        content += '                             <div id="' + container + '_settingsEnvironments" class="contentBlockBodyCenter blockTypeEnvironments">';
        content += '                                 <div class="envLabel unpublishedLabel">' + localize.t('tiq.tags.unpublished') + '</div>';
        content += '                                 <div class="envLabel devLabel"><div class="ellipsis env_alias_dev" title="' + devAliasName + '">' + devAliasName + '</div></div>';
        content += '                                 <div class="envLabel qaLabel"><div class="ellipsis env_alias_qa" title="' + qaAliasName + '">' + qaAliasName + '</div></div>';
        content += '                                 <div class="envLabel prodLabel"><div class="ellipsis env_alias_prod" title="' + prodAliasName + '">' + prodAliasName + '</div></div>';
        if (utui.permissions.isCustomTargetsEnabled()) {
          content += '                             <div class="envLabel customLabel"><div class="ellipsis env_alias_dev" title="'+localize.t('tiq.tags.custom') +'">'+localize.t('tiq.tags.custom') +'</div></div>';
        }
        content += '                             </div></div>'; // end contentBlock
			}
   
   
			
			return content;
		},

		// -------------------------------------------------
		// Constructs view for description context based on extension ID
		// @return string
		constructSidebarDescription: function(extId) {
			var obj = exapi.getObjectByExtensionId(extId),
				templateObj = exapi.getTemplateObject(obj.id),
				descriptionContext = (typeof templateObj.comments != 'undefined') ? templateObj.comments : templateObj.description,
				descriptionHelpLink = templateObj.helplink || '';

            if(descriptionHelpLink !== '') {
                descriptionHelpLink = '<a href="#" onClick="utui.help.openCommunityLink(\'' + templateObj.helplink + '\'); return false;" target="_blank">' + localize.t('tiq.ext.help_docs') + '</a>';
            }

			// return _view.accordionSideResources.contextBox('<p>'+descriptionContext+'</p>', 'Description', descriptionHelpLink);
			return utui.ui.template.contextBox('<p>'+descriptionContext+'</p>', localize.t('tiq.ext.description'), descriptionHelpLink);
		},

		// ------------------------------------------------------------
		updateSort: function() {
			$('#customize_content').children().each(function(i) {
				var id = $(this).attr('data-id');

				utui.data.customizations[id].sort = i;
			});
		},

		// ------------------------------------------------------------
		// @param (setExtensionToOpen) integer - persist open state of an accordion container after sorting
		// @return
		drawJUIAccordion: function (setExtensionToOpen) {
			var $customizeContent = $('#customize_content'),
				accordionCollection = $('#customize_content').children();

			// ------------------------------------------------------------
			$customizeContent.accordion('destroy').accordion({
				header: 'h3',
				active: false,
				autoHeight: false,
				animated: false,
				clearStyle: true,
				collapsible: true,
				change: _eventHandlers.onAccordionChange,
				event: '' // We're clearing the event in order to allow our extension validation to control the close
			}).sortable({
				handle: 'h3',
				axis: 'y',
				update: function(e, ui) {
					_viewModel.updateSort();

					// Once sorted, rebind the accordion
					if(_isContainerOpen()) {
						_viewModel.drawJUIAccordion(_lastOpenExtensionId);
					} else {
						_viewModel.drawJUIAccordion();
					}
					utui.profile.setDirty();
				}
			});

			_bindUI.accordionHeader();

			// Open the passed extension param
			if(setExtensionToOpen) {
				$('#'+_namespace+'_'+setExtensionToOpen+'_accordion').trigger('click');
			}

			_viewModel.updateSort();

            // Add hint watermark
            if (accordionCollection.length == 0) {
                var v = '';
                v += '<div class="noItemsToShow">';
                    v += '<span>' + localize.t('tiq.ext.add_new_extension') + '<span>';
                    v += '<i class="icon-hand-up"></i>';
                v += '</div>';


				if($('.noItemsToShow').length === 0) {
					$('#tabs-customizations').find('.config_button_nofloat').append(v);
				}
			} else {
				$('#tabs-customizations').find('.noItemsToShow').remove();
			}
		},

		// -------------------------------------------------
		// Constructor
		// @return
		constructAccordionContents: function(extId, callback) {
			var obj = exapi.getObjectByExtensionId(extId);

			// Inject accordion template
			_viewModel.initAccordionBody(extId);

			// Render accordion body
			_viewModel.renderAccordionSidebar(extId);
			_viewModel.renderAccordionMain(extId)

			if(!exapi.isImported(extId)) {
				// Save data once initialized
				_saveTemplateData(extId);
			}

			_viewModel.validateExtView(obj);

			_lastOpenExtensionId = extId;

			if(callback) callback();
		},

		// -------------------------------------------------
		// Deconstructor
		// @return
		deconstructAccordionContents: function(extId) {
			_saveTemplateData(extId);

			// Run any custom UI deconstructors if they exist
			try {
				var extType = utui.data.customizations[extId].id;
				utui.customizations_template[extType].destructor();
			} catch (e) {}
			

			// Clear DOM
			$('#'+_namespace+'_'+extId+'_accordionBody').empty();
			_bindUI.unbindInputSelectors(extId);
		}
	}

	// -------------------------------------------------
	// Bind Events to Elements
	var _bindUI = {
		// Main Tab
		// -------------------------------------------------
		labelSelectBtn:function() {
			// Init the labels select2 box
			utui.customizations.labels.renderBulkLabelSelect();
		},
		// -------------------------------------------------
		bulkSelectCheckbox:function() {
			// Hides/shows the label select box in the header
			utui.customizations.labels.labelCheckboxChecked();
		},
		// -------------------------------------------------
		toggleFilterMenu:function() {
			$("#customize_filter_menu_button").off('click').on('click', _eventHandlers.onFilterMenuClick);
		},
		// -------------------------------------------------
		addExtensionBtn: function() {
			// bind Add Extension Dialog
			$('#customize_addMoreBtn').on('click', _eventHandlers.onAddExtensionBtnClick);
		},
		// Accordion Outer Shell
		// -------------------------------------------------
		accordionHeader: function() {
			$('#customize_content').find('h3').off().on('click', _eventHandlers.onAccordionHeaderClick);
		},
		// Accordion Inner Shell
		// -------------------------------------------------
		scopeSelectInput: function() {
			$('#customize_content').on('change', '.js-scope-selector', _eventHandlers.onScopeSelectorChange);
		},
        advExcSelectInput: function() {
            $('#customize_content').on('change', '.js-adv-exc-tmg-selector', _eventHandlers.onAdvExcSelectorChange);
        },
		// -------------------------------------------------
		titleInput: function() {
			$('#customize_content').on('change keyup', '.js-title-input', _eventHandlers.onTitleInputChange);
		},
		// -------------------------------------------------
		actionBtns: function() {
			// Edit, Mappings, Copy, Delete
			$('#customize_content').on('click', '.js-edit-btn', _eventHandlers.onEditExtensionBtnClick);
			$('#customize_content').on('click', '.js-mapping-btn', _eventHandlers.onEditMappingBtnClick);
			$('#customize_content').on('click', '.js-copy-btn', _eventHandlers.onDuplicateExtensionBtnClick);
			$('#customize_content').on('click', '.js-delete-btn', _eventHandlers.onDeleteExtensionBtnClick);
		},
		// Extension Template
		// -------------------------------------------------
		bindInputSelectors: function(extId) {
			var $accordionBody = $("#"+_namespace+"_"+extId+"_accordionBody");

			// Add / Remove / Modify rule conditions
			$accordionBody.off();
			$accordionBody.on('click.extensionplusminus','.ext-data-action', _eventHandlers.onConditionActionClick);
			$accordionBody.on('click','.ui-icon-plus, .ui-icon-minus', _eventHandlers.onInputContentChange);
			$accordionBody.on('click','.js-action-addbtn', _eventHandlers.onInputContentChange);
			$accordionBody.on('click','.js-action-removebtn', _eventHandlers.onInputContentChange);
			$accordionBody.on("change.extensionfiltertype","select[id$='_filtertype']", _eventHandlers.onExtensionFilterChange);

			// Modify Content
			$accordionBody.on('change', 'input, select, textarea', _eventHandlers.onInputContentChange);
			$accordionBody.on('change', '.CodeMirror', _eventHandlers.onInputContentChange);
		},
		// -------------------------------------------------
		unbindInputSelectors: function(extId) {
			var $accordionBody = $("#"+_namespace+"_"+extId+"_accordionBody");

			// Add / Remove / Modify rule conditions
			$accordionBody.off();
			$accordionBody.off('click.extensionplusminus');
			$accordionBody.off('click','.ui-icon-plus, .ui-icon-minus');
			$accordionBody.off("change.extensionfiltertype");
			$accordionBody.off('click','.js-action-addbtn');
			$accordionBody.off('click','.js-action-removebtn');
			$accordionBody.off("blur.extensionfilter");

			// Modify Content
			$accordionBody.off('change', 'input, select, textarea');
			$accordionBody.off('change', '.CodeMirror');
		}
	}

	// -------------------------------------------------
	// Event Handlers
	var _eventHandlers = {

		// Main Tab
		// -------------------------------------------------
		onFilterMenuClick: function() {
			var $filterMenu = $("#customize_filter_menu_list");

			if($filterMenu.is(":hidden")) {
				$filterMenu.empty();
				utui.filters.helper.showFilterMenu($filterMenu, utui.customizations.filterConditions, _namespace, _filtersToInclude, _filter);

				utui.profile.menuToggle('customize_filter_menu_list');
			}
			else {
				utui.profile.menuToggle('customize_filter_menu_list');
			}
		},
		// -------------------------------------------------
		onAddExtensionBtnClick: function(e) {
			e.stopImmediatePropagation();

			utui.customizations.showAddExtensionDialog();

			var tooltipObj = {};
			$('.ui-icon-remove-circle').each(function() {
				tooltipObj[this.id] = { gravity: 'nw' };
			});
			utui.util.addTooltip(tooltipObj);
		},

		// Accordion Outer Shell
		// -------------------------------------------------
		onAccordionHeaderClick: function(e) {
			var i = $('#customize_content').find('.customize_container > h3').index(this),
				extId = _getExtensionIdByChildElement(this);

			$('#customize_content').accordion('activate', i);

			// Set validation warning here...
			utui.customizations_template.util.validateView(utui.data.customizations[extId]);
			utui.customizations.renderCautionOnAccordions();

			return false;
		},
		// -------------------------------------------------
		onAccordionChange: function(e, ui) {
			e.stopImmediatePropagation();

			var accordionCollection = $('#customize_content').children(),
				openAccordionSortPosition = ui.options.active;

			/*
			 * Deconstruct old accordion
			 */
			if(!$.isEmptyObject(_lastOpenExtensionId)) {
				_viewModel.deconstructAccordionContents(_lastOpenExtensionId);
			}

			/*
			 * Construct new accordion
			 */
			if (typeof openAccordionSortPosition === 'number') {
				var extId = $(accordionCollection[openAccordionSortPosition]).attr('data-id');

				if (extId) {
					// Animate accordion to slide down after constructing contents
					_viewModel.constructAccordionContents(extId, function () {
						$('#customizations_' + extId + '_accordionBody').find('.accordion-container').slideDown(300);
					});
				}
			}
		},
		// -------------------------------------------------
		onToggleStatusBtnClick: function(e) {
			e.preventDefault();
			e.stopImmediatePropagation();

			var extId = _getExtensionIdByChildElement(this);

			// If accordion toggle contains the class disabled_toggle then do not execute
			if ($(this).hasClass('disabled_toggle')) return;

			// If accordion is imported, do not execute
			if (exapi.isImported(extId)) return;

			if(exapi.isActive(extId)) {
				_dialogs.confirmDeactivateExtensionDialog.show(extId);
			} else {
				_toggleActive(extId);
			}

			return false;
		},

		// Accordion Inner Shell
		// -------------------------------------------------
		onScopeSelectorChange: function(e) {
			e.stopImmediatePropagation();

			var extId = _getExtensionIdByChildElement(this);
            // Get a list of scoped tags before applying this change, to include tags that are being removed from this
            // extension's scope list.
            var oldScopedTags = exapi.getScope(extId);

			 //Set scope title on scope change
			var $scopeEl = $('#'+_namespace+'_'+extId+'_scope');

			if($scopeEl[0].type.indexOf('select') === 0){

				// Handle multiple select...
				if ($scopeEl.hasClass("select2")) {
					var addedScope = (e && e.added) ? e.added.id : '';
					// Make sure that at least 1 option is selected and if not, default to all tags (global);
					// If this is empty, set value to 'All Tags' (global)
					if ( $.isEmptyObject($scopeEl.val()) || (addedScope === "global")) {
						$scopeEl.select2("val", ["global"]);
					}
					// If we have multiple scopes, we need to handle non-tag scopes that are mutually exclusive
					else {
						if (addedScope === "preload" || addedScope === "domready"){
							$scopeEl.select2("val", addedScope);
						} else { // We are switching to a tag scope, then we need to remove non-tag specific scopes (global,preload",domready)
							var val = $scopeEl.val();
							_.each(["global","preload","domready"],function (mutexScope){
								var msIdx = $.inArray(mutexScope, val);

								if (msIdx >= 0 && val.length > 1) {
									val.splice(msIdx,1);
									$scopeEl.select2("val", val);
								}							
							});
						}
					}
				}
			}

            var oldScope = exapi.getScope(extId);
            var newScope = $scopeEl.val().toString();
            if (oldScope !== newScope){
                var aeSelect = $('#'+_namespace+'_'+extId+'_advExcDiv');
                if (oldScope === 'global' || newScope === 'global'){
                    aeSelect.toggle( "fade" );
                }
            }
            if ($scopeEl.val().toString().indexOf("preload") !== -1) {
            	utui.customizations_template.shared.disableExtensionConditions(extId);	
            } else {
				utui.customizations_template.shared.enableExtensionConditions(extId);            	
            }
			

			exapi.setScope(extId, $scopeEl.val() );
			$('#'+_namespace+'_'+extId).find('.container_scope').html( _getScopeNameByExtensionId(extId) );

            // Any tag that is scoped or has been scoped to this extension needs to be marked as modified
            // so that it's published utag is cache-busted on the next load.
			exapi.resetScopedTagTimestamps(extId, oldScopedTags);

			// Refresh context (this toggles edit mapping button)
			_viewModel.renderAccordionSidebar(extId);
		},
		// -------------------------------------------------
        onAdvExcSelectorChange: function(e) {
            e.stopImmediatePropagation();

            var extId = _getExtensionIdByChildElement(this);
            var aeSelect = $('#'+_namespace+'_'+extId+'_advExcTmg');
            if(aeSelect[0].type.indexOf('select') === 0){
                exapi.setAdvExecOption(extId, aeSelect.val());
            }
        },
		// -------------------------------------------------
		onTitleInputChange: function(e) {
			e.stopImmediatePropagation();

			var extId = _getExtensionIdByChildElement(this),
				obj = exapi.getObjectByExtensionId(extId),
				value = utui.util.safeEscape($(this).val()),
				$title = $('#'+_namespace+'_'+extId).find('.container_title');

			if($.trim(value) !== "") {
				exapi.setTitle(extId, value);
			}
			else {
				exapi.setTitle(extId, '');
				value = _getExtensionTypeByExtensionId(extId);
			}

			_setTitleContent(extId, value);
		},
		// -------------------------------------------------
		onEditExtensionBtnClick: function(e) {
			e.stopImmediatePropagation();

			// -------------------------------------------------------
			var extId = _getExtensionIdByChildElement(this);

			var obj = exapi.getObjectByExtensionId(extId),
				templateObj = exapi.getTemplateObject(obj.id),
				templateFunc = utui.customizations_template[templateObj.id];

			// -------------------------------------------------------
			var _namespace = 'editCustomization_dialog',
				_$content = $('<div />', {
					"style":"padding:6px"
				});

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onCloseBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				},
				onApplyBtnClick: function(e) {
					// first save
					templateFunc.save(extId);

					// then refresh
					templateFunc.fillData(extId, true);

                    $(this).dialog('close');

                    var containerId = 'customizations_' + extId;
                    utui.profile.setActionPerformed({
                        action : utui.constants.extensions.UPDATED,
                        data : {
                            id : obj._id,
                            name : obj.title,
                            type : obj.id,
                            kind : utui.constants.extensions.TYPE,
                            operation : utui.constants.operation.UPDATED,
                            container: containerId
                        }
                    }, true);
                }
            }

			// --------------------------------------------------------
			// Dialog buttons
			var buttons = [
				{
					text: localize.t('tiq.dialog.button.close'),
					id: _namespace+'_closeBtn',
					click: _eventHandlers.onCloseBtnClick
				},
				{
					text: localize.t('tiq.dialog.button.apply'),
					id: _namespace+'_applyBtn',
					click: _eventHandlers.onApplyBtnClick
				}
			];

			// --------------------------------------------------------
			// Render content and dialog
			var title = localize.t('tiq.ext.edit_title', {title:utui.config.customizationList[templateObj.id].title })
			utui.ui.dialog.show(_namespace, title, buttons, _$content, { width: 950, height: 'auto', position: ['center',110] }, _eventHandlers.onCloseBtnClick);
			templateFunc.edit(extId, _$content);
		},
		// -------------------------------------------------
		onEditMappingBtnClick: function(e) {
			e.stopImmediatePropagation();

			if ($(this).hasClass('ui-state-disabled')) return;

			var extId = _getExtensionIdByChildElement(this);

			_map_outputs = {};

			var manageContainer = '';
			var scope = $('#'+_namespace+'_'+extId+'_scope').val();

			for(var i in utui.util.getVars(utui.manage.containerMap)){
				if(scope == utui.manage.containerMap[i].id){
					manageContainer = i;
					break;
				}
			}

			var children = $('#customize_content').children();
			var activeIndex = 1;

			for(var i=0; i<children.length; i++){
				if(children[i].id == extId){
					activeIndex = i + 1;
				}
			}

			var output = '';
			var outputType = $('#'+_namespace+'_'+extId+'_var').attr('type');

			if(outputType && outputType.indexOf('select')==0){
				output = $('#'+_namespace+'_'+extId+'_var').val();
			}else{
				output = $('#'+_namespace+'_'+extId+'_var').val();
			}

			if(output && output.length>0) {
				output = output.replace(/ /g,'');
			}
			else {
				output = '';
			}

			var outputArr = output.split(',');

			for(var i=0; i<outputArr.length; i++){
				_map_outputs[i] = {
					key: outputArr[i],
					value: 'customization'+activeIndex+'.'+outputArr[i],
					title: $('#'+_namespace+'_'+extId+'_title').val()
				}
			}

			//TASK will need to have a way to modify mappings when a customization changes order
			//TASK not sure if I should care...mapping is mapping and I don't really need the accurate source
			utui.manage.editTagSettings(manageContainer,'variables');
		},
		// -------------------------------------------------
		onDuplicateExtensionBtnClick: function(e) {
			e.stopImmediatePropagation();

			if ($(this).hasClass('ui-state-disabled')) return;

			var existingExtId = _getExtensionIdByChildElement(this),
				templateId = _getTemplateIdByChildElement(this),
				addDuplicateExtension = function(newExtId) {
					// add model
					exapi.duplicateExtension(newExtId, existingExtId);

					// add view
					utui.customizations.addItem(newExtId);

					// Since duplication has occurred, we'll now render labels and auto-open the new duplicated extension
					_viewModel.drawJUIAccordion(newExtId);

					utui.labels.helper.renderLabels(newExtId, _namespace);

					$('#customize_content').animate({ scrollTop: $('#customizations_'+newExtId).offset().top - $('#customize_content').offset().top + $('#customize_content').scrollTop() }, 'slow');
				};

			exapi.getNextIdFromServer(1, null,
				// onSuccess
				function(providedLastId, count, newExtId) {
					addDuplicateExtension(newExtId);
				},
				// onFailure
				function(newExtId) {
					addDuplicateExtension(newExtId);
				});
		},
		// -------------------------------------------------
		onDeleteExtensionBtnClick: function(e) {
			e.stopImmediatePropagation();

			var extId = _getExtensionIdByChildElement(this),
				obj = exapi.getObjectByExtensionId(extId);

			if ($(this).hasClass('ui-state-disabled')) return;

			if (obj.imported) return;

			_dialogs.confirmRemoveExtensionDialog.show(obj);
		},

		// Extension Template
		// -------------------------------------------------
		onInputContentChange: function(e) {
			var extId = _getExtensionIdByChildElement(this);
			var $this = $(this);
			var obj = exapi.getObjectByExtensionId(extId),
				idsWithDependencies = utui.validation.getIdsWithDependencyItems('customizations', extId),
				containerId = _namespace + '_' + extId,
				nodeId,
				value;

			// Don't update on imported extensions
			if(exapi.isImported(extId)) return;

			// assumes input...
			nodeId = $this.attr('id');
			value = $this.val();

			if(~idsWithDependencies.indexOf(nodeId)) {
				utui.validation.removeKeyFromInstanceId('customizations',extId, nodeId);
			}

			if(extId) {
				_updateExtensionData(extId);
			}
		},
		// -------------------------------------------------
		onExtensionFilterChange: function(e) {
			var id = $(this).attr('id').replace('_filtertype',''),
				$filter = $('#'+id+'_filter'),
				$tooltip = $('#'+id+'_regex_tooltip'),
				tooltipObj = {};

			if($(this).val() === 'regular_expression') {
				if ($tooltip.length === 0) { //add tooltip if it does not exist
					$(this).closest(".customization_item").after('<div id="' + id + '_regex_tooltip" class="ui-icon ui-icon-info customization_condition_tooltip" title="' + utui.tooltip.customizations.regex + '"></div>');
					tooltipObj[id + '_regex_tooltip'] = {
						gravity: 'w'
					};
					utui.util.addTooltip(tooltipObj);
				}

				$filter.trigger('blur');
				$tooltip.show();
			} else {
				$filter.trigger('blur');
				$tooltip.hide();
			}
		},
		// -------------------------------------------------
		onConditionActionClick: function(e){
			e.preventDefault();
			var data = $(this).data('action'),
				extId = _getExtensionIdByChildElement(this);

			if(data) {
				// Execute action as defined in the element's data object
				utui.customizations_template[data.template][data.action](data.container,data.instanceId);
			}

			_updateExtensionData(extId);

			utui.util.pubsub.publish(utui.constants.extensions.UPDATED);
		}
	}

	// ------------------------------------------------
	// PubSub Handlers
	var _pubHandlers = {
		// ------------------------------------------------
		// This call will update the select2 scoping
		onTagsAdded: function(tagData) {
			// Rerender any scoping that's currently in view
			$('#customize_content').find('.js-scope-selector').each(function() {
				_viewModel.renderSelect2Scope( _getExtensionIdByChildElement($(this)) );
			});

			return;
		},
		// This call will update the select2 scoping
		onExtCondsUpdated: function(extData) {
			// Rerender any scoping that's currently in view - remove preloader scope if conditions are present 
			_viewModel.renderSelect2Scope( extData.id );
			return;
		},
		// ------------------------------------------------
		// This call will update the select2 scoping
		// We are updating the view only. Data model is not affected since it only contains a referenced tag id
		onTagsUpdated: function(tagData) {
			var tagObj = tagData.data,
				dataObj = utui.data.customizations,
				extId;

			// For each extension
			for(var key in dataObj) {
				if(!dataObj.hasOwnProperty(key)) continue;

				// Take the scope of the extension and split into an array
				scopeList = dataObj[key].scope.split(',');

				// If the scope contains the tag
				if(scopeList.indexOf(tagObj.id) > -1) {

					// rerender the header view
					_viewModel.renderAccordionHeaderItemView(dataObj[key]);
				}
			}

			// Rerender labels
			_renderLabels();

			// Refresh any scoping that's currently in view
			$('#customize_content').find('.js-scope-selector').each(function() {
				_viewModel.renderSelect2Scope( _getExtensionIdByChildElement($(this)) );
			});

		},
		// ------------------------------------------------
		// This call will update the select2 scoping and adjust extension
		onTagsRemoved: function(tagObj) {

			// If removing imported tags, store into migrateImportTags
			if(!$.isEmptyObject(tagObj.imported)) {

				var migrateImportTags = utui.profile.import.migrateImportTags,
					obj = tagObj.obj,
					profile_name = obj.settings.profileid,
					origin_id = obj.libraryId,
					old_id = tagObj.id;


				if($.isEmptyObject(migrateImportTags[profile_name])) {
					migrateImportTags[profile_name] = {}
				}

				migrateImportTags[profile_name][origin_id] = $.extend(migrateImportTags[profile_name][origin_id], {
					old_id: old_id
				});

				return;
			};



			var dataObj = utui.data.customizations;

            // For each extension
            for(var key in dataObj) {
                if(!dataObj.hasOwnProperty(key)) continue;

                // Take the scope of the extension and split into an array
                scopeList = dataObj[key].scope.split(',');

                // If the scope contains the tag
                if(scopeList.indexOf(tagObj.id) >= 0) {

                    // remove tag from scope list
                    scopeList.splice(scopeList.indexOf(tagObj.id), 1);

                    if(scopeList.length === 0) { //  Disable the extension if no other tags are scoped to it.
                        utui.data.customizations[key].status = 'inactive';
                        utui.data.customizations[key].scope = 'global';
                    } else {
                        utui.data.customizations[key].scope = scopeList.toString();
                    }

                    //Update the version history -
                    utui.profile.setActionPerformed({
                        action : (scopeList.length === 0) ? utui.constants.extensions.TOGGLED : utui.constants.extensions.UPDATED,
                        data : {
                            id : utui.data.customizations[key]["_id"],
                            name : utui.data.customizations[key].title,
                            type : utui.data.customizations[key].id,
                            status : utui.data.customizations[key].status,
                            kind : utui.constants.extensions.TYPE,
                            operation : (scopeList.length === 0) ? utui.constants.operation.TOGGLED : utui.constants.operation.UPDATED,
                            container: 'customizations_' + utui.data.customizations[key]["_id"]
                        }
                    }, true);

                    // rerender ext header
                    _viewModel.renderAccordionHeaderItemView(dataObj[key]);
                }
            }

			// Rerender labels
			_renderLabels();

			// rerender scope selector if present in DOM
			$('#customize_content').find('.js-scope-selector').each(function() {
				_viewModel.renderSelect2Scope( _getExtensionIdByChildElement($(this)) );
			});
		},
		// ------------------------------------------------
		onDataSourcesAdded: function (obj) {
			var dataKey = obj.dataKey;

			// Update DOM Select Nodes that are currently in view
			if (dataKey) {
				var dsType = dataKey.split('.')[0],
					dsName = dataKey.split('.')[1],
					ds = dsapi.getDataSource(dataKey);

				// Display data source title for option text if available
				if (ds) {
					dsName = ds.title || dsName;
				}

				$('#customize_content').find('select[data-select-content-type]').each(function (i) {
					var attrValuesArr = $(this).attr('data-select-content-type').split(',');

					if (attrValuesArr.indexOf(dsType) !== -1 || attrValuesArr.indexOf('all') !== -1) {
						$(this).append(utui.customizations_template.util.buildOption(dataKey, dsName + ' (' + dsType + ')'));
					}
				});

			}

			// update cache
			dsapi.getAllDataSourceSelection();
		},
		// ------------------------------------------------
		onDataSourcesUpdated: function(oldDataKey, newDataKey) {
			var newTmp = newDataKey.split('.'),
				newType = newTmp.shift(),
				newName = newTmp.join('.'),
				newTextLabel = newName + ' (' + newType + ')';

			// Update the data model
			for(var i in utui.data.customizations) {
				if(!utui.data.customizations.hasOwnProperty(i)) continue;

				var extObj = utui.data.customizations[i];

				for (var j in extObj) {
					if(!extObj.hasOwnProperty(j)) continue;

					if(typeof extObj[j] === 'string') {
						if(extObj[j] === oldDataKey) {
							extObj[j] = newDataKey;
						}
					}
				}
			}

			// Update the DOM
			var customizeSelect = $('#customize_content').find('option[value="'+_.unescape(oldDataKey)+'"]');

			for (var i = customizeSelect.length - 1; i >= 0; i--) {
				$(customizeSelect[i]).val(newDataKey);
				$(customizeSelect[i]).text(newTextLabel);
			};

			// update cache
			dsapi.getAllDataSourceSelection();
		},
		// ------------------------------------------------
		onImportFinished: function() {

			function isDefinedTag(scopeItem) {
				var scopeOptions = ['preload', 'footer', 'domready', 'global', 'all'];
				// check to see if defined tag, or if scopeitem is special
				return typeof utui.data.manage[scopeItem] !== 'undefined' || ~scopeOptions.indexOf(scopeItem);
			}

			// Revalidate extensions
			var extDataObject = utui.data.customizations,
				scopeItem,
				scopeList;

			// Verify scoped extensions
			for(var key in extDataObject) {
				if(!extDataObject.hasOwnProperty(key)) continue;

				extObj = extDataObject[key];

				scopeList = extObj.scope.split(',');
				scopeList = scopeList.filter(isDefinedTag);

				if(scopeList.length == 0) {
					utui.data.customizations[key].status = 'inactive';
					utui.data.customizations[key].scope = 'global';
				}
				else {
					utui.data.customizations[key].scope = scopeList.toString();
				}

				utui.customizations.renderAccordionHeaderItemView(utui.data.customizations[key]);
			}

			// once we're done importing all items; draw the accordion
			_viewModel.drawJUIAccordion();
			_renderLabels();
		},
        onProfileRemoved: function(data) {
            // note: see onImportFinished
        },
        // ------------------------------------------------
        privacyManagementConsentEnabled: function() {
            _.each(utui.data.customizations, function(ext) {
                if (ext.id === "100026" && ext.status === "active") {
                    exapi.setStatus(ext._id, 'inactive');
                    $('#customizations_' + ext._id).find('.js-status-toggle').children('span').removeClass('container_status_active').addClass('container_status_inactive');
                }
            });
        },
        // ------------------------------------------------
		setDefaultFilterConditions: function() {
			// Setup the initial filter conditions
			var filterConditions = {
				inactive : {
					show : true
				},
				scope : {
					show : "-1"
				},
				label : {
					id : "-1"
				},
				target:{
					allTags:{
						show:true
					},
					dev:{
						show:false
					},
					qa:{
						show:false
					},
					prod:{
						show:false
					},
					unpublished:{
						show:false
					}
      	}
			};
      
      filterConditions.target = utui.targets.addTargetsToObject(filterConditions.target,{show:false},'custom');
      
			this.filterConditions = filterConditions;
		}
	}

	// ------------------------------------------------
	function _getExtensionIdByChildElement(elem) {
		var $el = $(elem),
			$container = $el.closest(".customize_container"),
			extId = $container.attr("data-id");

		return extId || null;
	}

	// ------------------------------------------------
	function _getTemplateIdByChildElement(elem) {
		var $el = $(elem),
			$container = $el.closest(".customize_container"),
			templateId = $container.attr("data-template-id");

		return templateId || null;
	}

	// ------------------------------------------------
	function _isContainerOpen() {
		var accordion = $('#customize_content').accordion('option', 'active');

		if( typeof accordion === 'number' ) {
			return true;
		}
		return false;
	}

	// ------------------------------------------------
	function _getScopeNameByExtensionId(extId) {
		var obj = exapi.getObjectByExtensionId(extId),
			scope = obj.scope.toString(),
			manageList = utui.config.manageList,
			manageObj;

		switch(scope) {
			case 'undefined':
			case 'global':
			case 'all':
				return localize.t('tiq.ext.all_tags');
				break;
			case 'footer':
				return localize.t('tiq.ext.footer');
				break;
			case 'preload':
				return localize.t('tiq.ext.preloader');
				break;
			case 'domready':
				return localize.t('tiq.ext.dom_ready');
				break;
		}

		scope = scope.split(',');

		if(scope.length > 1) {
			return localize.t('tiq.ext.multiple_tags');
		}

		manageObj = utui.data.manage[scope];

		// If tag has a user-assigned title, return it...
		if (manageObj && typeof manageObj.title !== 'undefined' && manageObj.title !== '') {
			return utui.util.safeEscape(manageObj.title);
		}

		// If we're scoped to a template, return tag template title
		if(typeof manageList[scope] !== "undefined" && manageList[scope].title) {
			return manageList[scope].title;
		}

		// If, for some reason, user set title to an empty string, return the tag name
		if (manageObj && manageObj.title === "" && manageObj.tag_name) {
			return manageObj.tag_name;
		}

		return '[' + localize.t('tiq.ext.no_scope') + ']';
	}

	// ------------------------------------------------
	function _getExtensionTitleByExtensionId(extId) {
		var obj = exapi.getObjectByExtensionId(extId),
			templateObj = exapi.getTemplateObject(obj.id);

		// if(obj.title && templateObj.addMore != 'false') {
		if(obj.title) {
			return utui.util.safeEscape(obj.title);
		}

		return utui.util.safeEscape(templateObj.title);
	}

	// ------------------------------------------------
	function _getExtensionTypeByExtensionId(extId) {
		var obj = exapi.getObjectByExtensionId(extId),
			templateObj = exapi.getTemplateObject(obj.id);

		return templateObj.title
	}

	// ------------------------------------------------
	// Used for initalizing scope entries
	function _getManageOptions() {
		var options = '',
			sortedTags = utui.util.getVars(utui.data.manage, 4, 'title'),
			tagTitle;

		for (var j in utui.util.getVars(sortedTags, 1)) {
			if(!sortedTags.hasOwnProperty(j)) continue;

			tagTitle = $.isEmptyObject(sortedTags[j].title) ? utui.config.manageList[sortedTags[j].tag_id].title : sortedTags[j].title;

			options += '<option value="' + sortedTags[j].id + '">' + utui.util.safeEscape(tagTitle) + '</option>';
		}
		return options;
	}

	// --------------------------------------------------------
	// When accordion is open, this scans the input fields and stores everything in the data model.
	// We then validate the data
	function _saveTemplateData(extId) {
		if(exapi.isImported(extId)) return;

		var extTemplateInputs = $('#customizations_' + extId + '_content :input'),
			extObj = exapi.getObjectByExtensionId(extId);

		// ----------------------------------------
		for (var j = 0; j < extTemplateInputs.length; j++) {
			var inputName = extTemplateInputs[j].name;

			if (inputName === '') continue;

			// Added Select2 fix
			if (inputName.indexOf('autogen') === 0) continue;

			if (extTemplateInputs[j].type == 'radio') {
				if (extTemplateInputs[j].checked == true) {
					utui.data.customizations[extId][inputName] = extTemplateInputs[j].value;
				}
			}
			else if (extTemplateInputs[j].type === "select-one") {
				if(!utui.validation.hasUnresolvedDependency('customizations', extId, inputName)) {
					utui.data.customizations[extId][inputName] = extTemplateInputs[j].value;
				}
			}
			else if (extTemplateInputs[j].type == "select-multiple") {
				var val = $(extTemplateInputs[j]).val() || "";
				utui.data.customizations[extId][inputName] = val.toString();
			}
			else {
				utui.data.customizations[extId][inputName] = extTemplateInputs[j].value;
			}
		}
	}

	// ------------------------------------------------
	function _toggleActive(extId){
		var extension = utui.data.customizations[extId],
			containerId = _namespace + '_' + extId;
		var tagging = exapi.createTaggingObject(extension);

		if(exapi.isActive(extId)) {
			tagging.tealium_event = utui.constants.tagging.DISABLE;
			exapi.setStatus(extId, 'inactive');
			$('#'+_namespace+'_'+extId).find('.js-status-toggle').children('span').removeClass('container_status_active').addClass('container_status_inactive');
		}
		else {
			if (exapi.canActivate(extId)){
                tagging.tealium_event = utui.constants.tagging.ENABLE;
                exapi.setStatus(extId, 'active');
				$('#'+_namespace+'_'+extId).find('.js-status-toggle').children('span').removeClass('container_status_inactive').addClass('container_status_active');
			} else {
				return;
			}
		}

        utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);
		var status = exapi.getStatus(extId);

		if(typeof status !== 'undefined') {
			$('#'+_namespace+'_'+extId+'_status').val(status);
		}
		
		// Update any tags scoped to this extension.
		exapi.resetScopedTagTimestamps(extId);

		utui.profile.setActionPerformed({
			action : utui.constants.extensions.TOGGLED,
			data : {
				id : extension["_id"],
				name : extension.title,
				type : extension.id,
				status : extension.status,
				kind : utui.constants.extensions.TYPE,
				operation : utui.constants.operation.TOGGLED,
				container: containerId
			}
		}, true);
	}

	// ------------------------------------------------
	function _filter(conditions) {
		var dataCollection = utui.data.customizations,
			isResetAction;

		for(var id in dataCollection) {
			var extension = dataCollection[id],
				bShow = utui.filters.run(conditions, extension, _filtersToInclude); // if all filters pass, it will return true

			if(bShow)
				$("#" + _namespace + '_' + id).show();
			else
				$("#" + _namespace + '_' + id).hide();
		}

		isResetAction = utui.filters.isResetAction(conditions, _filtersToInclude);

		// update the filter button to indicate whether the filter is on or off
		utui.filters.helper.updateFilterButton('customize_filter_menu_button', isResetAction);
	}

	// ------------------------------------------------
	function _updateExtensionData(extId) {
		// Don't update on imported extensions
		if(exapi.isImported(extId)) return;

		var obj = exapi.getObjectByExtensionId(extId),
			idsWithDependencies = utui.validation.getIdsWithDependencyItems('customizations', extId),
			containerId = _namespace + '_' + extId,
			nodeId,
			value;

		_saveTemplateData(extId);

		/*
		 * rb - Validation applies to both the Extensions tab and each extension individually. Since
		 * every extension has its own template, they follow different validation rules as well.
		 */

		// Validate the model of the extensions tab
		_viewModel.validateExtModel(extId);

		// Render caution signs onto the Extensions tab
		_viewModel.validateExtView(obj);

		// Render caution on navigation-level
		utui.validation.renderCautionOnTabs();

		utui.profile.setActionPerformed({
			action : utui.constants.extensions.UPDATED,
			data : {
				id : obj._id,
				name : obj.title,
				type : obj.id,
				kind : utui.constants.extensions.TYPE,
				operation : utui.constants.operation.UPDATED,
				container: containerId
			}
		}, true);

		utui.util.pubsub.publish(utui.constants.extensions.UPDATED);
	}

	// ------------------------------------------------
	function _renderLabels() {
		var dataCollection = utui.data.customizations;

		// Render labels
		for(var i in dataCollection) {
			if(!dataCollection.hasOwnProperty(i)) continue;

			utui.labels.helper.renderLabels(i, _namespace);
		}
	}

	// ------------------------------------------------
	function _getTitleLabelsContent(extId) {
		if (!exapi.isImported(extId)){
			return utui.labels.labelsView.getLabelContent(utui.data.customizations[extId].labels, utui.customizations.id);
		}
		return '';
	}

	// ------------------------------------------------
	function _setTitleContent(extId, title) {
		var title = title || exapi.getTitle(extId),
			titleSpan  = '  <span class="title" title="' + title + '">' + title + '</span>',
			$title = $('#'+_namespace+'_'+extId).find('.container_title');

		$title.html(titleSpan);

		utui.labels.helper.renderLabels(extId, _namespace);
	}
    // ------------------------------------------------
    // Utility method that determines if the advanced extension attribute selector should be in use for the given extension
    // Returns true|false
    function _isUseAdvExtAttribs(extId) {
        var obj = utui.data.customizations[extId];
        if (obj.id == "100026") { // Advanced attributes do not apply to Privacy Manager.
            return false;
        }
		if (!obj.multiScopeLoad) {
			return (obj.scope === 'global');
		} else {
			return false;
		}
    }

    // ------------------------------------------------
    // Utility method to determine if an extension is allowed to present advanced single execution options
    // Returns true|false
    function _isUseAdvSingleExecOptions(extId) {
      var obj = utui.data.customizations[extId];
      var cfg = utui.config.customizationList[obj.id];
      if (cfg.hasOwnProperty('advSnglExc') && cfg.advSnglExc === 'true'){
        return true;
      } else {
        return false;
      }
    }
    // ------------------------------------------------
    // Utility method that determines if the advanced extension attribute selector should be in use for the given extension
    // Returns true|false
    function _isAdvExtLocked(extId) {
        var obj = utui.data.customizations[extId];
        if (typeof utui.config.customizationList[obj.id].advExecOptionState !== 'undefined' 
          && utui.config.customizationList[obj.id].advExecOptionState === 'locked'){
          return true;
        } else {
          return false;
        }
    }
    // ------------------------------------------------
    // Utility method that returns a minimum utag level if it is specified
    // Returns version string if found, otherwise undefined
    function _getMinUtagLevel(extId) {
        var obj = utui.data.customizations[extId];
        if (typeof utui.config.customizationList[obj.id].advExecOptionMinUtag !== 'undefined'){
          return utui.config.customizationList[obj.id].advExecOptionMinUtag;
        } else {
          return undefined;
        }
    }
	// ------------------------------------------------
	// Called from within utui.labels when a label is updated
	// This will update the title to append the labels as well as toggle the status toggle depending on security applied
	function _setTitle(extId, title) {
		var obj = utui.data.customizations[extId] || {},
			canModify = utui.labels.canUserModify(obj.labels),
			$statusToggle = $('#'+_namespace+'_'+extId+'_status_toggle');

		if (canModify) {
			$statusToggle.removeClass('disabled_toggle');
		} else {
			$statusToggle.addClass('disabled_toggle');
		}

		_setTitleContent(extId, title);
	}

	// PUBLIC
	// ------------------------------------------------
	var _public = {

		id:"customizations",

		/*
		 * automater.js
		 */
		nextId:0,

		/*
		 * customization_template.js
		 * automater.js
		 * define.js
		 */
		containerMap:{},

		/*
		 * customization_template.js
		 * automater.js
		 * define.js
		 * profile.js
		 * profile.import.js
		 */
		validationMap:{},

		privacyMgrExtId: '',

		/*
		 * utui.profile.js (clearProfileData)
		 */
		clear:function(){
			utui.customizations.addedCustomizations = {};
			_map_outputs = {};
			this.containerMap = {};
			$('#customize_dialog_addmore').empty();
			$("#customize_content").empty();
			_lastOpenAccordion = false;
			_lastOpenExtensionId = false;
			_initComplete = false;
		},

		/*
		 * core.footer.js
		 */
		load:function(a){},

		/**
		 * Render
		 */
		render: function() {
			_viewModel.initTabFrame();
			_viewModel.initTableHeader();

			_viewModel.renderHelpTab();
			_viewModel.renderAccordionHeaderCollectionView();
			_viewModel.drawJUIAccordion();

			_viewModel.renderTooltips();

			_bindUI.labelSelectBtn();
			_bindUI.bulkSelectCheckbox();
			_bindUI.addExtensionBtn();
			_bindUI.titleInput();
			_bindUI.actionBtns();
			_bindUI.scopeSelectInput();
            _bindUI.advExcSelectInput();
			_bindUI.toggleFilterMenu();
		},

		/**
		 * Render
		 */
		show: function () {
			_renderLabels();

			_viewModel.renderCautionOnAccordions();

			_viewModel.refreshLastOpenAccordionContainer();

			utui.profile.showAllModifiedTabLabels(utui.constants.extensions.TYPE);
		},

		/**
		 * Initialize listeners
		 */
		init: function () {
			//Specify the filters that this tab uses
			_filtersToInclude = [utui.filters.FILTER_STATUS, utui.filters.FILTER_TARGET, utui.filters.FILTER_DIVIDER, utui.filters.FILTER_SCOPE, utui.filters.FILTER_LABEL];

			// Setup listeners
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _pubHandlers.setDefaultFilterConditions, this);
      utui.util.pubsub.subscribe(utui.constants.environments.ADDED, _pubHandlers.setDefaultFilterConditions, this);
      utui.util.pubsub.subscribe(utui.constants.environments.REMOVED, _pubHandlers.setDefaultFilterConditions, this);
      
			utui.util.pubsub.subscribe(utui.constants.profile.REMOVED, _pubHandlers.onProfileRemoved, this);
			utui.util.pubsub.subscribe(utui.constants.variables.ADDED, _pubHandlers.onDataSourcesAdded, this);
			utui.util.pubsub.subscribe(utui.constants.variables.UPDATED, _pubHandlers.onDataSourcesUpdated, this);
			utui.util.pubsub.subscribe(utui.constants.tags.ADDED, _pubHandlers.onTagsAdded, this);
			utui.util.pubsub.subscribe(utui.constants.tags.REMOVED, _pubHandlers.onTagsRemoved, this);
			utui.util.pubsub.subscribe(utui.constants.tags.UPDATED, _pubHandlers.onTagsUpdated, this);
			utui.util.pubsub.subscribe(utui.constants.profile.LIBRARY_IMPORT_FINISHED, _pubHandlers.onImportFinished, this);
			utui.util.pubsub.subscribe(utui.constants.extensions.UPDATED_EXT_CONDITION, _pubHandlers.onExtCondsUpdated, this);

			utui.util.pubsub.subscribe(utui.constants.tags.ACCORDION_EXPANDED, utui.customizations_template[100026].updateCategories, this);
			utui.util.pubsub.subscribe(utui.constants.tags.REMOVED, utui.customizations_template[100026].updateCategories, this);

			utui.util.pubsub.subscribe(utui.constants.labels.ADDED, this.labels.onLabelAdded, this);
			utui.util.pubsub.subscribe(utui.constants.labels.REMOVED, this.labels.onLabelRemoved, this);
			utui.util.pubsub.subscribe(utui.constants.labels.CHANGED, this.labels.onLabelChanged, this);
			//utui.util.pubsub.subscribe(utui.constants.labels.MENU_OPENING, this.labels.onLabelMenuOpening, this);
			utui.util.pubsub.subscribe(utui.constants.labels.MENU_CLOSING, this.labels.onLabelMenuClosing, this);
			utui.util.pubsub.subscribe(utui.constants.labels.ASSIGNED, this.labels.onLabelAssigned, this);
			utui.util.pubsub.subscribe(utui.constants.labels.UNASSIGNED, this.labels.onLabelUnAssigned, this);

      utui.util.pubsub.subscribe(utui.constants.profile.LOADED, dsapi.getAllDataSourceSelection, this);
      utui.util.pubsub.subscribe(utui.constants.privacy_management.consent.ENABLED, _pubHandlers.privacyManagementConsentEnabled, this); //
      
      utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.loadPublishedTargetsForExtensions, this);
      utui.util.pubsub.subscribe(utui.constants.profile.PUBLISHED, this.loadPublishedTargetsForExtensions, this);
      utui.util.pubsub.subscribe(utui.constants.environments.ADDED, this.updatePublishedExtensionLocations, this);
      utui.util.pubsub.subscribe(utui.constants.environments.REMOVED, this.updatePublishedExtensionLocations, this);
			
            // Purge any ace editor threads anytime the user navigates
            utui.util.pubsub.subscribe(utui.constants.views.TAB_CLICK, this.purgeExtensionAceEditorThreads, this);

            utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.purgeJSDraftTransientData, this);


			_lastOpenAccordion = false;
			// Reinitialize the last customize ID
			if (typeof utui.data.settings.lastcustomizeid === 'undefined') {
				utui.data.settings.lastcustomizeid = 0;
			}

			// init id
			exapi.resetNextId();
			exapi.getNextIdFromLocal();
			
      _.forEach(utui.data.customizations, function (ext) {
        if (!ext.selectedTargets) {
          // Migration - This property will be null on first use so let's populate it
          ext.selectedTargets = utui.targets.addTargetsToObject({}, 'true', null, true);
        }
      });
			
			this.render();

			_initComplete = true;
		},
    
    loadPublishedTargetsForExtensions:function() {
      function _getPublishedEnvsForExtensions(extension) {
        var envs = [];
        extension.selectedTargets = extension.selectedTargets || [];
        for (var key in publishedTargets) {
          if (publishedTargets[key].indexOf(extension._id) !== -1 && extension.selectedTargets[key] === 'true'){
            envs.push(key);
          }
        }
        
        return envs;
      }
      // Get all of the revisions for the current version
      var allRevisions = utui.profile.getAllRevisions(utui.data.settings.revision);
      var publishedTargets = utui.targets.addTargetsToObject({}, []);
      utui.customizations.knownPublishedTargets = publishedTargets;
      
      // Make sure to iterate through the sorted version
      utui.util.forEachSorted(allRevisions, function(revisionId, revision) {
        var publishedExtensions = revision.publishedExtensions ? JSON.parse(revision.publishedExtensions) : [];
        var statuses = revision.status ? revision.status.split(",") : [];
        
        if(statuses.length > 0 && publishedExtensions.length > 0) {
          for(var i = 0; i < statuses.length; i++) {
            var env = statuses[i];
            
            publishedTargets[env] = publishedExtensions;
            
          }
        }
      });
      
      // merge publishedTargets into utui.manage.containerMap
      for(var key in utui.data.customizations) {
        var ext = utui.data.customizations[key];
        
        if(!ext.id) continue;
        
        ext.publishedTargets = _getPublishedEnvsForExtensions(ext);
      }
      // Update Extensions accordion if the Extensions tab is open.
      if(utui.config.currentTab === utui.customizations.id){
      	utui.customizations.purgeExtensionAceEditorThreads();
        utui.customizations.drawJUIAccordion();
      }
    },
	// Destroy any running Ace Editor worker threads to prevent memory leaks
    purgeExtensionAceEditorThreads: function(){
        _.each(utui.data.customizations, function(extObj,extId){
            if (utui.customizations_template[extObj.id].aceEditor){
                _.each(utui.customizations_template[extObj.id].aceEditor, function(editor) {
                    editor.destroy();
                });
            }
        });
    },
	// Wipe any the transient data object used by JS draft extension 100040
	purgeJSDraftTransientData : function () {
        utui.customizations_template[100040].transientData = null;
	},
    updatePublishedExtensionLocations: function () {
      var targetsList = utui.targets.getList(null, true);
      var _renderPublishedTagLocations = function (extId) {
        var extObj     = utui.data.customizations[extId],
            tmp        = {};
    
        if (extObj.selectedTargets) {
          for (var i = 0; i < targetsList.length; i++) {
            var key    = targetsList[i],
                target = extObj.selectedTargets[key];
        
            tmp[key] = target;
        
            if ($.isEmptyObject(target)) {
              tmp[key] = 'true';
            }
        
          }
          extObj.selectedTargets = tmp;
        }
      };
  
      for (var key2 in utui.data.customizations) {
        _renderPublishedTagLocations(key2);
      }
  
      if (utui.config.currentTab === utui.customizations.id) {
        utui.customizations.drawJUIAccordion(_lastOpenExtensionId);
      }
  
    },
		
		/*
		 * Add Item will insert the extension into the view.
		 * @param (extId) object - (used for initialized tab and imported extensions)
		 *
		 */
		addItem: function (extId, isOnProfileLoad, bBypassHistoryEvent) {
			var extObj = exapi.getObjectByExtensionId(extId),
				templateId = extObj.id,
				templateObj = exapi.getTemplateObject(templateId),
				containerId = _namespace + '_' + extId,
				outputVariablesStack = [];

			// Inject Main Frame
			$('#customize_content').append( _view.accordionTemplate(extId, templateId) );

			_viewModel.renderAccordionHeaderItemView(extObj);

			if (templateObj.addMore == 'true') {
				utui.profile.changeFocusFlag = true;
			}

			if (!$.isEmptyObject(templateObj.outputVars)) {
				outputVariablesStack = templateObj.outputVars.split(',');

				for (var i = 0; i < outputVariablesStack.length; i++) {
					utui.validation.resolveMissingVariables( outputVariablesStack[i] );
				}

				utui.customizations.renderCautionOnAccordions();

				// refresh loadrule accordion view
				if(utui.loadrules.lastOpenLoadruleId) {
					var _lrContainerId = utui.loadrules.lastOpenLoadruleId;
					var loadruleContainerObj = lrapi.getContainerObjectByContainerId(_lrContainerId);

					if(!$.isEmptyObject(loadruleContainerObj)) {
							utui.loadrules.view.constructAccordionContents(_lrContainerId, loadruleContainerObj, function () {
									$('#'+_lrContainerId).find('.accordion-container').slideDown(300);
							});
					}
				}
			}

			var extType = templateObj.title;
			extObj.extType = extType;

			// Record what got added
			utui.customizations.addedCustomizations[extObj.id] = 1;

			if(!bBypassHistoryEvent) {
				utui.profile.setActionPerformed({
					action: utui.constants.extensions.ADDED,
					data: {
						id: "" + extObj._id,
						name: extObj.title,
						type: extObj.id,
						imported: extObj.imported,
						library: (extObj.imported) ? extObj.settings.profileid : '',
						kind : utui.constants.extensions.TYPE,
						operation : utui.constants.operation.ADDED,
						container: containerId
					}
				}, true, !_initComplete, isOnProfileLoad);
			}

			// Update DS cache
			dsapi.getAllDataSourceSelection();
			return extId;
		},

		/*
		 * utui.profile.import.js
		 */
		
    generateNextUniqueServerIds: function(count, cb) {
      var that = this;
      exapi.getNextIdFromServer(count, true,
        function(providedLastId, count, nextId) {
          that._nextId = nextId;
          that._generatedIds = count;
          if (cb) cb(nextId);
        },
        function(nextId) {
          that._nextId = nextId;
          that._generatedIds = 1;
          if (cb) cb(nextId);
        });
    },
    addBulkImportedItems: function(data, dataItems) {
      var that = this;
      
      _.each(dataItems, function(val){
        that.addImportedItem(val,data);
      });
      
    },
		addImportedItem: function (inheritedExtObj, data) {
			utui.profile.import.setImportOriginId(inheritedExtObj, inheritedExtObj._id);

			// create instance of existing object rather than reference it (fixed for utui.data.customizations[undefined] issue);
			var inheritedObj = $.extend({}, inheritedExtObj),
				oldExtId = inheritedObj._id,
				templateId = inheritedObj.id,
				templateObj = exapi.getTemplateObject(templateId),
				addExtension = function(nextId) {
					// add model
					exapi.addExtension(nextId, templateId, inheritedObj);

					// add view
					utui.customizations.addItem(nextId);
					
					utui.data.customizations[nextId].selectedTargets = utui.targets.addTargetsToObject(inheritedObj.selectedTargets || {}, 'true', 'custom', true);

					if (templateId === "100026") {
						utui.customizations.privacyMgrExtId = nextId;
					}

					for (var i in utui.util.getVars(utui.data.manage)) {
						if(!utui.data.manage.hasOwnProperty(i)) continue;

						var tagObj = utui.data.manage[i];

						if (tagObj.settings && tagObj.settings.profileid === inheritedObj.settings.profileid && tagObj.map) {
							for (var i in utui.util.getVars(tagObj.map, 1)) {
								var mapObj = tagObj.map[i];
								if (mapObj.type.indexOf('customization') == 0) {
									var x = mapObj.type.substring(13);
									if (x === oldExtId) {
										// Update tag extension mapping id to the new extension id
										mapObj.type = 'customization' + nextId;
									}
								}
							}
						}
					}


					// Re-map profile tag to imported extension type
					var key = inheritedObj.settings.origin_id + '.' + inheritedObj.settings.profileid;
					if (utui.profile.import.deletedImportExtensions[key]) {
						var tag = utui.data.manage[utui.profile.import.deletedImportExtensions[key].tag_id],
							importMap = utui.profile.import.deletedImportExtensions[key].map,
							mapIndex = utui.profile.import.deletedImportExtensions[key].index;

						if (tag && importMap) {
							importMap.type = 'customization' + nextId;
							tag.map[mapIndex] = importMap;
						}
					}

					// Update history and show change status
					var options = {
						origin_id:  oldExtId,
						container: 'customizations_' + nextId,
						new_id: "" + nextId,
						name: inheritedObj.title
					};
					utui.profile.import.updateImportedHistory(data, utui.constants.extensions.TYPE, options);
				};

			delete inheritedObj._id; // Delete the extension ID

			if (templateId === "100022"     /* Opt Out */
				|| templateId === "100026"  /* Multi Tag Opt Out */
				|| templateId === "100015"  /* Link Tracking */
				|| templateId === "100006"  /* Domain Based Deployment */
				|| templateId === '100005'  /* Ecommerce */
				) {
				for(var i in utui.util.getVars(utui.data.customizations)) {
					if(!utui.data.customizations.hasOwnProperty(i)) continue;

					var extensionObj = utui.data.customizations[i];

					if (extensionObj && extensionObj.id == templateId) {
						utui.profile.import.libraryQueue.exemptExtensions.push({ name: templateObj.title, library: inheritedObj.settings.profileid });
						utui.profile.import.libraryQueue.numExtensions--;
						return;
					}
				}
			}
      
      if (this._generatedIds !== undefined && this._generatedIds > 0) {
        this._generatedIds--;
        addExtension(this._nextId++);
      } else {
        this.generateNextUniqueServerIds(1, function(nextId) {
          addExtension(nextId);
        })
      }
		},
    
    /*
     * utui.publish.js
     */
    updatePublishedTargetsForExtensions : function(target) {
        for(var key in utui.data.customizations) {
          var ext = utui.data.customizations[key];
      
          if(!ext.id) continue;
  
          ext.publishedTargets = ext.publishedTargets || [];
      
          if((!ext.publishedTargets || ext.publishedTargets.length === 0) && ext.status === "active") {
            ext.publishedTargets = target;
          }
        }
		},

		/*
		 * utui.diff.js
		 */
		addStashedItem: function (stashedExtObj) {
			// create instance of existing object rather than reference it (fixed for utui.data.customizations[undefined] issue);
			var stashedObj = $.extend({}, stashedExtObj),
				templateId = stashedObj.id,
				templateObj = exapi.getTemplateObject(templateId),
				extId = stashedObj._id;

			exapi.addExtension(extId, templateId, stashedObj);
			utui.customizations.addItem(extId, null, true);

			if (templateId === "100026") {
				utui.customizations.privacyMgrExtId = extId;
			}
		},


		/*
		 * utui.profile.import.js
		 */
		conflictExtensionsConfirm: function (extCollection) {
			$("#dialog").dialog("destroy");

			var extItem;

			var v = '';
				v += '<div>';
				v += '    <div class="dialog-icon-container">';
				v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
				v += '    </div>';
				v += '    <div class="dialog-description">';
				v += '        <p><strong>' + localize.t('tiq.ext.conflict.tealium_has_detected') + '</strong></p>';
				v += '        <p>' + localize.t('tiq.ext.conflict.possible_conflict') + '</p>';
				v += '        <fieldset>';
				v += '        <legend>' + localize.t('tiq.ext.conflict.conflicting_extension') + '</legend>';
				for (var i in extCollection) {
					extItem = extCollection[i];
					v += '<div title="' + extItem.name + ' / ' + extItem.library + '" class="conflictExtension">' + extItem.name + ' / ' + extItem.library + '</div>';
				}
				v += '        </fieldset>';
				v += '        <p>' + localize.t('tiq.ext.conflict.be_aware') + '</p>';
				v += '    </div>';
				v += '</div>';

			$("#manage_tagversion_confirm").html(v);
			$("#manage_tagversion_confirm").dialog({
				title: localize.t('tiq.ext.conflict.title'),
				height: 'auto',
				width: 'auto',
				modal: true,
				closeOnEscape: false,
				resizable: false,
				autoOpen: true,
				draggable: true,
				position: ['center', 'center'],
				buttons: [
					{
						text: localize.t('tiq.dialog.button.ok'),
						id: 'confirmConflictExtensions_dialog_okBtn',
						click: function () {
							$(this).dialog('close');
						}
					}
				]
			});

		},

		/*
		 * utui.manage.js
		 */

		getScopeSelectOptions: function (templateObj, manageTitles, extId) {
			var templateScope = templateObj.scope,
				optionArray = _optionArray,
				content = '';

			if (typeof templateScope === 'undefined' || templateScope === 'all') {
				content = optionArray[0];

				if (templateObj.preload === 'true') {
					if ( ! exapi.hasExtConditions(extId)){
						// If there is conditional execution, then block preloader scope if conditions are visible
						if ($('.extension-scope-container').is(':visible')){
							var $addCondBtn = $('#button_addcondition');
							if ($addCondBtn.length != 0){
								if ($addCondBtn.is(':visible')){
									content += optionArray[1];		
								}
							} else {
								content += optionArray[1];
							}						
						} else {
							content += optionArray[1];
						}
					}					
				}

				if (templateObj.domready === 'true') {
					content += optionArray[2];
				}

				if (manageTitles) {
					content += manageTitles;
				} else {
					var sort = utui.util.getVars(utui.data.manage, 4, 'title');
					for (var i in utui.util.getVars(sort, 1)) {
						var title = sort[i].title;

						if (jQuery.isEmptyObject(title)) {
							title = utui.config.manageList[sort[i].tag_id].title;
						}
						content += '<option value="' + sort[i].id + '">' + utui.util.safeEscape(title) + '</option>';
					}
				}
			} else if (templateScope === 'footer') {
				if (templateObj.preload === "true") {
					content += optionArray[1];
				}

				content += optionArray[3];

				if (templateObj.domready === 'true') {
					content += optionArray[2];
				}
			}
			return content;
		},

		/*
		 * utui.profile.import.js
		 */
		// Drops the extension
		dropExtension:function(extId, isOnProfileLoad, bBypassHistoryEvent) {
			// Remove from DOM
			$('#customizations_'+extId).remove();

			var obj = exapi.getObjectByExtensionId(extId);

			exapi.dropExtension(extId);

			// if extension that is dropped has output variables
			if(!$.isEmptyObject(obj.output)) {

				// refresh cache
				dsapi.getAllDataSourceSelection();
			}

			if(!bBypassHistoryEvent) {
				utui.profile.setActionPerformed({
					action : utui.constants.extensions.REMOVED,
					data : {
						id : extId,
						name : obj.title,
						type : obj.id,
						imported : obj.imported,
						library : (obj.imported) ? obj.settings.profileid : '',
						kind : utui.constants.extensions.TYPE,
						operation : utui.constants.operation.REMOVED
					}
				}, true, null, isOnProfileLoad);
			}

			utui.validation.removeInstanceByTypeAndId('customizations', extId);

			utui.util.pubsub.publish(utui.constants.extensions.REMOVED, this);
		},

        /**
         * Flag for validation
         */
        hasErrors: function() {
            return utui.util.sizeOf(utui.validation.getMap('customizations'));
        },

		/**
		 * Show Add Extensions Dialog
		 */

		showAddExtensionDialog: _dialogs.addExtension.show,

		addedCustomizations: {},

		filter: _filter,

		validateExtModel: _viewModel.validateExtModel,

		renderAccordionHeaderItemView: _viewModel.renderAccordionHeaderItemView,

		drawJUIAccordion: _viewModel.drawJUIAccordion,

		setTitle: _setTitle,

		renderCautionOnAccordions: _viewModel.renderCautionOnAccordions,

		updateExtensionData: _updateExtensionData,

		labels: {
			renderSingleLabelSelect: function(id, container) {
				utui.labels.labelsSelectBtn().render(utui.config.tabList.customizations.tab, $('#customize_content'), $('#customize_labels_select_' + id), $('#'+container));
			},
			renderBulkLabelSelect: function() {
				utui.labels.labelsSelectBtn().render(utui.config.tabList.customizations.tab, $('#customize_content'), $('#customize_labels_menu_list'), $('#customizeContainer_headerControls'));
			},
			// Returns the active container
			getActiveContainer: function() {
				return $('#customize_content').find('.ui-accordion-content-active').closest('.customize_container');
			},
			redrawLabels: function(labels, container) {
				utui.labels.helper.redrawLabels(labels, container, utui.customizations.id);
			},
			assignOrRemoveLabels: function (isAssignAction, isBulkAction, labelId, forceApplyToAll) {
				utui.labels.helper.assignOrRemoveLabels(utui.customizations.id, isAssignAction, isBulkAction, labelId, forceApplyToAll);
			},
			onLabelAdded:function () {
				// redraw bulk select list
				utui.customizations.labels.renderBulkLabelSelect();

				// Get the expanded view
				var $activeContainer = utui.customizations.labels.getActiveContainer();
				if ($activeContainer[0]) {
					// redraw single selected list
					utui.customizations.labels.renderSingleLabelSelect($activeContainer.attr('data-id'), $activeContainer.attr('id'));
				}
			},
			onLabelRemoved:function (data) {
				utui.labels.helper.onLabelRemoved(utui.customizations.id, data);
			},
			onLabelChanged:function(data) {
				utui.labels.helper.onLabelChanged(utui.customizations.id, data);
			},
			onLabelMenuClosing: function() {
				// We have to loop over all the items to set the fields to enabled/disabled depending on security
				for (var id in utui.data.customizations){
					var labels = utui.data.customizations[id].labels;
					if (labels && !utui.labels.canUserModify(labels)) {
						utui.customizations.labels.setEditable(id);
					}
				}
			},
			onLabelAssigned: function (data) {
				if (utui.config.currentTab === utui.customizations.id && data) {
					utui.customizations.labels.assignOrRemoveLabels(true, data.listType === 'bulk', data.labelId);
				}
			},
			onLabelUnAssigned: function (data) {
				if (utui.config.currentTab === utui.customizations.id && data) {
					utui.customizations.labels.assignOrRemoveLabels(false, data.listType === 'bulk', data.labelId);

					if (!data.action) { // If NOT coming from a select menu
						var $container = utui.customizations.labels.getActiveContainer();
						if ($container[0]) {
							utui.customizations.labels.setEditable($container.attr('data-id'));
						}
					}
				}
			},
			labelCheckboxChecked: function() {
				utui.labels.helper.onBulkSelectCheckboxClicked('customize');
			},
			setEditable: function(id) {
				if (!id) return;

				var $activeContainer = utui.customizations.labels.getActiveContainer(),
					obj = exapi.getObjectByExtensionId(id);

				if ($activeContainer[0] && $activeContainer.attr('data-id') == id) {
					_viewModel.renderAccordionMain(id);
					_viewModel.renderAccordionSidebar(id);
				}

				// Enable/Disable the checkbox
				var $checkbox = $('#customize_bulk_select_'+id),
					canModify = utui.labels.canUserModify(obj.labels);

				$checkbox.attr('disabled', !canModify);
				if (!canModify) {
					$checkbox.prop('checked', false);
				}

				// Hide show the bulk label select box
				utui.customizations.labels.labelCheckboxChecked();
			}
		},
		publishLocations :{
			renderLocations : function(extId, container){
        // Locations
        // Highlight the environments that this extension is active in
        var foundEnvironment = false,
				obj = utui.data.customizations[extId];
        
        var tmpCustomTargets = [];
        if (obj.publishedTargets) {
          for (var i = 0; i < obj.publishedTargets.length; i++) {
            if (obj.publishedTargets[i] === 'dev') {
              $('#' + container + '_settingsEnvironments .devLabel').addClass('active');
              foundEnvironment = true;
            }
            if (obj.publishedTargets[i] === 'qa') {
              $('#' + container + '_settingsEnvironments .qaLabel').addClass('active');
              foundEnvironment = true;
            }
            if (obj.publishedTargets[i] === 'prod') {
              $('#' + container + '_settingsEnvironments .prodLabel').addClass('active');
              foundEnvironment = true;
            }
            if (utui.targets.isCustom(obj.publishedTargets[i])) {
              $('#' + container + '_settingsEnvironments .customLabel').addClass('active');
              foundEnvironment = true;
              
              tmpCustomTargets.push(obj.publishedTargets[i]);
            }
            
          }
        }
        
        if (!$.isEmptyObject(tmpCustomTargets)) {
          var customTitle = tmpCustomTargets.join(", ");
          $('#' + container + '_settingsEnvironments .customLabel').attr('title', customTitle);
          
          var customTooltipObj = {};
          customTooltipObj[container + '_settingsEnvironments .customLabel'] = { gravity: 'nw' };
          utui.util.addTooltip(customTooltipObj);
        }
        
        
        // Check the filters to see which environments to display
        var devCt = utui.customizations.knownPublishedTargets['dev'].length;
        var qaCt = utui.customizations.knownPublishedTargets['qa'].length;
        var prodCt = utui.customizations.knownPublishedTargets['prod'].length;
        
        var customCt = 0;
        for (var key in utui.customizations.knownPublishedTargets) {
          if (utui.targets.isCustom(key)) {
            customCt += utui.customizations.knownPublishedTargets[key].length;
          }
        }
        
        if (devCt < 1) $('#' + container + '_settingsEnvironments .devLabel').hide();
        if (qaCt < 1) $('#' + container + '_settingsEnvironments .qaLabel').hide();
        if (prodCt < 1) $('#' + container + '_settingsEnvironments .prodLabel').hide();
        if (customCt < 1) $('#' + container + '_settingsEnvironments .customLabel').hide();
        
        var currentVersion = utui.data.settings.revision;
        if ((devCt < 1 || qaCt < 1 || prodCt < 1 || customCt < 1) && (currentVersion < utui.constants.dates.EXTENSION_PUBLISH_STATUS)) {
          $('#' + container + '_settingsEnvironments .unpublishedLabel').hide();
        }
        
        if ((devCt > 0 && qaCt > 0 && prodCt > 0 && customCt > 0 && foundEnvironment == false) || (foundEnvironment == false && currentVersion > utui.constants.dates.EXTENSION_PUBLISH_STATUS)) {
          $('#' + container + '_settingsEnvironments .unpublishedLabel').addClass('active');
          foundEnvironment = true;
        } else {
          $('#' + container + '_settingsEnvironments .unpublishedLabel').hide();
        }
        if (!foundEnvironment) $('#' + container + '_settingsEnvironments').hide();
			}
		}
	};

	return _public;
}();

//tealium tag management console - utui.customizations_template, Copyright 2011 Tealium.com Inc. All Rights Reserved.

utui.customizations_template.shared = {
	getReadOnlyPropertiesView: function(dataObj, mainDataObj) {
		var _title = dataObj.title || '[No Title]',
			_sort = String(dataObj.sort) || '[]',
			_id = dataObj._id,
			_notes = String(dataObj.notes) || '',
			_type = exapi.getTemplateObject(dataObj.id).title,
			_scope = exapi.getScopeAlias(dataObj.scope),
			_labels = getInterpretedLabelName(dataObj.labels),
			_status = dataObj.status === 'active' ? 'Active' : 'Inactive';

		function getInterpretedLabelName(labelValue) {
			var labelNameCollection = [],
				labelId,
				labelName,
				_dataObj = mainDataObj || utui.data,
				multipleLabels;

			if(labelValue === undefined) return '';

			if(~labelValue.indexOf(',')) {
				multipleLabels = labelValue.split(',');

				for (var i = 0; i < multipleLabels.length; i++) {
					labelId = multipleLabels[i];
					labelName = _dataObj.labels[labelId].name;

					labelNameCollection.push(labelName);
				};

				return labelNameCollection.join(', ');
			}
			else if(labelValue.length > 0) {
				labelId = labelValue;

				return _dataObj.labels[labelId].name;
			}

			return '';
		}

		var v = '';
			v += '<div class="readonly-container-bubble">';
				v += '<div class="title">'+localize.t('tiq.ext.properties')+'</div>';
				v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.id')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, '_id', _id);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.status')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'status', _status);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.title')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'title', _title);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.type')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'template_id', _type);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.scope')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'scope', _scope);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.labels')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'labels', _labels);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							// Note: shouldn't be applicable for extensions since order is also dependent on scoping
							v += '<span class="inline-label">'+localize.t('tiq.ext.notes')+':</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'notes', _notes);
						v += '</div>';
					v += '</div>';

				v += '</div>';
			v += '</div>';
		return v;
	},
	getConditionalView: function(formattedObj) {
		var content = '',
			orCondition,
			andCondition,
			objectKey,
			exclusionInputMap = ['defined', 'notdefined', 'populated', 'notpopulated'],
			className = '';

		content += '<div class="condition-container">';

		for (var i = 0; i < formattedObj.length; i++) {
			orCondition = formattedObj[i];

			if(!utui.util.interpret.isOrConditionValid(orCondition)) continue;

			content += '<div class="condition-or">';

			for (var k = 0; k < orCondition.length; k++) {
				andCondition = orCondition[k];

				content += '<div class="condition-and">';

				keyMapping = utui.util.interpret.getConditionalKeyMapping(andCondition);

				for (var key in keyMapping) {
					if(!keyMapping.hasOwnProperty(key)) continue;

					if(key.indexOf('_') === 0) continue; // ignore private keys

					if(andCondition._instanceId === "0") {
						objectKey = andCondition._parentInstanceId + '_' + keyMapping[key];
					}
					else {
						objectKey = andCondition._parentInstanceId + '_' + andCondition._instanceId + '_' + keyMapping[key];
					}

					// (2) Operator
					if(key == 1) {
						// TODO: interpret operator values
						className = "condition-cell-operator";
						content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, ruleapi.condition.interpretOperatorValue(andCondition[keyMapping[1]]))+'</span>';
					}
					// (3) Value
					else if(key == 2) {
						className = "condition-cell-value";

						if(!~exclusionInputMap.indexOf(andCondition[keyMapping[1]])) {
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[2]])+'</span>';

							if(ruleapi.condition.isOperatorIgnoreCase(andCondition[keyMapping[1]])) {
								content += '<span class="condition-strict-case inline-label">('+localize.t('tiq.rules.case_insensitive')+')</span>';
							}
						}
					}
					// (1) Input
					else {
						className = "condition-cell-input";
						content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[3]])+'</span>';
					}
				};

				content += '</div>';
			};

			content += '</div>';
		};

		content += '</div>';

		return content;
	},
	getReadOnlyView: function(extensionObj, mainDataObj, bUseLinearView) {
        var content = '';
        var _mainDataObj = mainDataObj || utui.data;
        var templateId = extensionObj.id;

			if(!$.isEmptyObject(extensionObj)) {
				content += utui.customizations_template.shared.getReadOnlyPropertiesView(extensionObj, mainDataObj);
				if(bUseLinearView && utui.customizations_template[templateId].template.mainLinear) {
					content += utui.customizations_template[templateId].template.mainLinear(extensionObj);
				} else {
					content += utui.customizations_template[templateId].template.main(extensionObj);
				}
			}
			else {
				content = '<div>'+localize.t('tiq.ext.no_view')+'</div>';
			}

		return content;
	},
	populateReadOnlyView:  function(extensionObj, namespace) {
		var templateMain,
			templateId = extensionObj.id,
			reservedKeys = utui.util.interpret.extension._reservedKeys,
			value;

		var $data = function(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		// Set rules on view based on data model
		utui.customizations_template[templateId].setRulesOnView(extensionObj, namespace);

		// Populate Data
		for(var key in extensionObj) {
			if(!extensionObj.hasOwnProperty(key)) continue;

			// skip if it's a reserved key (prevents overwrite)
			if(~reservedKeys.indexOf(key)) continue;

			value = utui.customizations_template[templateId].getValue(extensionObj, key);
			value = dsapi.getDataSourceFormattedName(value);

			$data(key).find('.value').html(utui.util.safeEscape(value));
		}
	},
	view: {
		boxedSection: function(title, content) {
            var v = '';
                v += '<div class="readonly-container-bubble">';
                    v += '<div class="title">'+(title || '')+'</div>';
                    v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';
                    v += content;
                    v += '</div>';
                v += '</div>';

			return v;
		},
		linearRowTitleItemView: function(title) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span12">';
						v += '<h3>'+title+'</h3>';
					v += '</div>';
				v += '</div>';
			return v;
		},
		linearRowFieldItemView: function(title, field, col1size, col2size) {
			var _s1 = col1size || 4; // define column size
			var _s2 = col2size || 8; // define column size

			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span'+_s1+'">';
						v += title;
					v += '</div>';
					v += '<div class="span'+_s2+'">';
						v += field;
					v += '</div>';
				v += '</div>';
			return v;
		},
		getSetConfiguration: function(configObj) {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
			var _x = '';
			var _y = '';

				for (var i = 0; i < configObj.length; i++) {
					_x = '<span class="inline-label">'+localize.t('tiq.ext.set')+'</span>';
					_x += '<div>';
					_x += _input(null, configObj[i][0]._parentInstanceId +'_set', '');
					_x += '</div>';

					_y = '<span class="inline-label">'+localize.t('tiq.ext.to')+'</span>';
					_y += _input(null, configObj[i][0]._parentInstanceId +'_setoption', '');
					// _y += '<div>';
					_y += _input(null, configObj[i][0]._parentInstanceId +'_settovar', '');
					_y += _input(null, configObj[i][0]._parentInstanceId +'_settotext', '');
					// _y += '</div>';

					v += _row(_x, _y, 6, 6);
					v += '<br>';
				};
			return v;
		},
		getRules: function(rulesObj) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span12">';
						v += utui.customizations_template.shared.getConditionalView(rulesObj);
					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	isDisableExtConds: function(extId){
		var extObj = utui.data.customizations[extId];
		var disable = false;
		_.each(extObj.scope.split(","),function(s){
			if (s === 'preload'){
				disable = true;
			}
		});
		return disable;
	},
	enableExtensionConditions: function(extId){
		if ($('#' + extId + '_ext_cond_block').length === 0){
			return;
		}
		$('#inactive_ext_conds').css('display','none');
		$('#' + extId + '_ext_cond_block button').prop("disabled",false);		
	},
	disableExtensionConditions: function(extId){
		if ($('#' + extId + '_ext_cond_block').length === 0){
			return;
		}
		$('#inactive_ext_conds').css('display','block');
		$('#' + extId + '_ext_cond_block button').prop("disabled",true);
	},


	populateExtensionConditionsOnFillData: function(container, extensionObj, fixSingleCond){
		for (var i in utui.util.getVars(extensionObj, 2)) {
			// Backwards compatibility to handle single conditions - Used by 100004 to fix up old format extensions
			if (fixSingleCond && i === 'source') {
				$('#button_addcondition').hide();

					var itemId = utui.customizations_template[extensionObj.id].addCondition(container)
					$('#' + itemId + '_source').val(obj.source);
					$('#' + itemId + '_source').select2('val', obj.source || '');

					$('#' + itemId + '_filtertype').val(obj.filtertype);
					$('#' + itemId + '_filtertype').select2('val', obj.filtertype || '');

					$('#' + itemId + '_filter').val(obj.filter);
					$('#' + itemId + '_filter').select2('val', obj.filter || '');

					utui.customizations_template.util.operatorSelectHandler(itemId);

				// Delete the old (incorrect) attributes as we have now created the correct attributes above
				delete obj.source;
				delete obj.filtertype;
				delete obj.filter;

			} 
			else if (i.indexOf('_source') >= 0 && i.split('_').length <= 2) {
				$('#button_addcondition').hide();
				var conditionId = i.substring(0, i.indexOf('_source'));
				var itemId = utui.customizations_template[extensionObj.id].addCondition(container, conditionId);

				$('#' + itemId + '_source').val(extensionObj[i]);
				$('#' + itemId + '_source').select2('val', extensionObj[i]);

				$('#' + itemId + '_filtertype').val(extensionObj[i.replace('_source', '_filtertype')]);
				$('#' + itemId + '_filtertype').select2('val', extensionObj[i.replace('_source', '_filtertype')]);

				$('#' + itemId + '_filter').val(extensionObj[i.replace('_source', '_filter')]);
				$('#' + itemId + '_filter').select2('val', extensionObj[i.replace('_source', '_filter')]);


				utui.customizations_template.util.operatorSelectHandler(itemId);
				// process the "AND" conditions
				for (var i in utui.util.getVars(extensionObj)) {
					if (i.indexOf('_source') >= 0 && i.split('_').length > 2 && i.indexOf(conditionId) == 0) {
						var addConditionId = i.split('_')[1];
						var itemAddId = utui.customizations_template[extensionObj.id].addAndCondition(itemId, addConditionId);

						$('#' + itemAddId + '_source').val(extensionObj[i]);
						$('#' + itemAddId + '_source').select2('val', extensionObj[i]);

						$('#' + itemAddId + '_filtertype').val(extensionObj[i.replace('_source', '_filtertype')]);
						$('#' + itemAddId + '_filtertype').select2('val', extensionObj[i.replace('_source', '_filtertype')]);

						$('#' + itemAddId + '_filter').val(extensionObj[i.replace('_source', '_filter')]);
						$('#' + itemAddId + '_filter').select2('val', extensionObj[i.replace('_source', '_filter')]);


						utui.customizations_template.util.operatorSelectHandler(itemAddId);
					}
				}
			}
		}
	},
	addExtensionCondition: function(extensionObj, container, instanceId) {

		var id = instanceId || utui.util.getContainerId();
        var content = '';
        if ($('#' + container + '_conditioncontainer').children('div').length > 0) {
            content += '  <div id="' + id + '_ortext"><div class="customization_div" style="float:left; clear:both;">';
            content += '    <div class="customization_labelthin">' + localize.t('tiq.ext.or') + '</div><div class="customization_labelwide"></div>';
            content += '  </div>';
            content += '  </div>';
        }

		content += '<div id="' + id + '_conditioncontainer" class="widget-container" style="min-width:600px;float:left;clear:both;">';
		//Condition
		var itemId = id + '_source';
		content += '<div id="' + id + '_conditioncontainer">';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelthin" style="white-space:nowrap;"></div>';
		content += '    <div class="customization_item">';

		content += '<span id="' + itemId + '_varpane">';

		var field = utui.customizations_template.util.buildSelect({ item: itemId, container: container, id: extensionObj.id });
		content += utui.ui.template.form.validationWrapper(field, itemId)

		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		content += '    <input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '    </div>';
		content += '    <button onclick="utui.customizations_template['+extensionObj.id+'].addAndCondition(\'' + id + '\')" class="btn btn-mini js-action-addbtn" style="float:left; margin:2px 0 0 3px;"><i class="icon-plus"></i></button>';
		content += '  </div>';
		content += '</div>';
		content += '</div>';

		content += '<div id="' + id + '_buttons" style="float:right">'
		var addCondition = '{"template":"'+extensionObj.id+'","action":"addCondition","container":"' + container + '"}';
		var removeCondition = '{"template":"'+extensionObj.id+'","action":"removeCondition","container":"' + id + '"}';
		content += '<button data-action=\'' + removeCondition + '\' class="btn btn-mini ext-data-action js-action-removebtn" title="' + localize.t('tiq.ext.remove_sub_condition') + '"><i class="icon-minus clickable"></i></button>';
		content += '<button data-action=\'' + addCondition + '\' class="btn btn-mini ext-data-action js-action-addbtn" title="' + localize.t('tiq.ext.add_sub_condition') + '"><i class="icon-plus clickable"></i></button>';
		content += '</div>';

		$('#' + container + '_conditioncontainer').append(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2(id+'_source', true);

		return id;

	},
	addExtensionAndCondition: function (extensionObj, container, instanceId) {
		var id = container + '_' + (instanceId || utui.util.getContainerId());
		var itemId = id + '_source';
		var content = '<div id="' + id + '_andcontainer" class="customization_div"><div class="customization_labelthin" style="white-space:nowrap;">' + localize.t('tiq.ext.and_colon') + '</div>';
		content += '<div class="customization_item">';

		content += '<span id="' + itemId + '_varpane">';

		var field = utui.customizations_template.util.buildSelect({ item: itemId, container: container, id: extensionObj.id });
		content += utui.ui.template.form.validationWrapper(field, itemId)

		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		content += '<input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '</div>';
		var removeAndCondition = '{"template":"'+extensionObj.id+'","action":"removeAndCondition","container":"' + id + '"}';
		content += '<button data-action=\'' + removeAndCondition + '\' class="btn btn-mini ext-data-action js-action-removebtn">';
		content += '<i class="icon-minus"></i>';
		content += '</button>';
		content += '</div>';
		content += '</div>';
		$('#' + container + '_conditioncontainer').append(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2(id+'_source', true);

		return id;

	},
	removeExtensionCondition: function (extensionObj, container) {
		if ($('#' + container + '_conditioncontainer').siblings().length <= 2) {
			$('#button_addcondition').show();
		}
		$('#' + container + '_conditioncontainer').remove();
		$('#' + container + '_ortext').remove();
		$('#' + container + '_buttons').remove();

		var dataObj = utui.data.customizations[extensionObj.container];

		for(var i in dataObj) {
			// if(!extensionObj.hasOwnProperty(i)) continue;
			if(i.indexOf(container) == 0) {
				delete utui.data.customizations[extensionObj.container][i];
			}
		}

		utui.customizations.updateExtensionData(extensionObj.container);

	},
	removeExtensionAndCondition: function (extensionObj, container) {
		$('#' + container + '_andcontainer').remove();

		delete utui.data.customizations[extensionObj.container][container + '_filter'];
		delete utui.data.customizations[extensionObj.container][container + '_filtertype'];
		delete utui.data.customizations[extensionObj.container][container + '_source'];

		utui.customizations.updateExtensionData(extensionObj.container);

	}
};

utui.customizations_template.util = {
	hideFilter : { defined:1, notdefined:1, notpopulated:1, populated:1, is_badge_assigned:1, is_badge_not_assigned:1 },
	operatorSelectHandler:function(container){
		var sel = $('#'+container+'_filtertype :selected').val();
		if(typeof utui.customizations_template.util.hideFilter[sel]!='undefined'){
			$('#'+container+'_filter').hide();
		}else{
			$('#'+container+'_filter').show();
		}
	},
	buildOperatorSelect: function (container) {
		var content = '<select name="' + container + '_filtertype" id="' + container + '_filtertype" onchange="utui.customizations_template.util.operatorSelectHandler(\'' + container + '\')">';
		for (var i in utui.util.getVars(utui.config.defOperators, 2)) {
			content += '<option value="' + i + '">' + _.escape(utui.config.defOperators[i]) + '</option>';
		}
		content += '</select>';
		return content;
	},
	buildMobileOperatorSelect: function (container, type) {
		var content = '<select name="' + container + '_filtertype" id="' + container + '_filtertype" onchange="utui.customizations_template.util.operatorSelectHandler(\'' + container + '\')">';

		var operators = utui.config.defMobileOperators;
		for (var key in operators) {
			var operator = operators[key];
			content += '<option value="' + key + '">' + operator + '</option>'
		}
		content += '</select>';
		return content;
	},
	buildOption: function(value, title, attrObj) {
		var attr = attrObj || {};

		return $('<option/>')
			.text(_.unescape(title))
			.val(_.unescape(value))
			.attr(attr)[0].outerHTML;
	},
	buildMobileSelect: function (obj) {
		var self = this,
			content = '',
			classType = obj.classType,
			operand1Choice;

		if (classType !== 'Custom Class') {
			if (typeof obj.stylefloat != 'undefined' && obj.stylefloat == 'left') {
				content = '<select name="' + obj.item + '" id="' + obj.item + '" style="float:left">';
			} else {
				content = '<select name="' + obj.item + '" id="' + obj.item + '">';
			}

			var defValues = utui.config.defMobileItems;
			for (var i = 0; i < defValues.all.length; i++) {
				operand1Choice = defValues.all[i];
				content += self.buildOption( operand1Choice, _.escape(operand1Choice) );
				// content += '<option value="' + operand1Choice + '">' + _.escape(operand1Choice) + '</option>';
			}

			var sortedDSList = utui.util.getVars(utui.data.define,4,'name');
			for (var id in sortedDSList) {
				var ds = sortedDSList[id];
				operand1Choice = ds.title || ds.name;
				content += self.buildOption( operand1Choice, _.escape(operand1Choice) );
				// content += '<option value="' + operand1Choice + '">' + _.escape(operand1Choice) + '</option>';
			}

			content += '</select>';
		} else {
			content = '<input type="text" name="' + obj.item + '" id="' + obj.item + '" style="width:120px;" />';
		}

		return content;
	},

	buildSelect: function (obj) {

		var self = this,
			selectId = obj.item,
			selectContentType = obj.showvars || 'all',
			selectArr = [],
			varFilter = {},
			content = '';

		//TASK TY: This only works for left right now...
		content += '<select name="' + _.escape(selectId) + '" id="' + _.escape(selectId) + '" data-placeholder="'+localize.t('tiq.datasources.select_a_datasource')+'" data-list-type="customizations" data-select-content-type='+selectContentType+' '+ ((typeof obj.stylefloat !== 'undefined' && obj.stylefloat == 'left') ? 'style="float:left"' : '') + '>';

		// Initialize filters based on passed showvars
		if (typeof obj.showvars !== 'undefined') {
			varFilter = {};

			// Construct filter based on passed showvars
			var selectContentTypeArr = selectContentType.split(',');
			for (var i = 0; i < selectContentTypeArr.length; i++) {
				varFilter[ selectContentTypeArr[i] ] = 1;
			}
		}
		// If we do not pass our own filters, set to all
		else {
			varFilter = { all: 1 };
		}

		content += '<option selected></option>';

		// // OPTIONS - Initial Select
		if (typeof varFilter['nooutput'] !== 'undefined') {
			content += self.buildOption('none', localize.t('tiq.ext.no_output_selected'));
		}

		if (typeof varFilter['none'] !== 'undefined') {
			content += self.buildOption('none', '-- ' + localize.t('tiq.ext.not_used') + ' --');
		}

		// OPTIONS - DOM
		if(typeof varFilter['all'] !== 'undefined' || typeof varFilter['dom'] !== 'undefined'){
			var defValues = utui.util.cp(utui.config.defItems);
			for(var i in utui.util.getVars(defValues)){
				selectArr.push({
					html: self.buildOption(i, _.escape(defValues[i]), { 'data-type' : 'dom' }),
					name: _.escape(defValues[i])+' (dom)',
					value: i,
					type: 'dom'
				});
			}
		}

		// OPTIONS - Data Sources
		var collectionDataSources = utui.util.getVars(utui.data.define);
		for (var i in collectionDataSources) {
			var ds = utui.data.define[i],
				ds_id = ds._id,
				name = ds.name,
				type = ds.type,
				displayName = ds.title || name,
				text = displayName + ' (' + type + ')',
				value = type + '.' + name,
				origin_id = (ds.settings && ds.settings.origin_id && ds.settings.profileid) ? type + '.' + ds.settings.origin_id + '.' + ds.settings.profileid : '';

			// If AudienceStream data source use origin_type instead of type
			if (ds.imported && ds.imported === utui.profile.import.AUDIENCE_STREAM) {
				text = ds.name + ' (' + utui.util.converter.getAudienceStreamTypeName(ds.settings.origin_type) + ')';
				type = ds.settings.origin_type;
				if (ds.context !== 'visitor') {
					value = ds.type + '.' + ds.context + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				} else {
					value = ds.type + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				}
			}

			//TODO: 12/12/2013 mo
			// previous import data didn't have origin_id, so this data needs to be migrated
			// eventually this should be removed
			if (ds.imported && !origin_id) {
				origin_id = ds.type + '.' + ds.name + '.' + ds._id;
			}

			if (typeof varFilter['all'] !== 'undefined' || typeof varFilter[ds.type] !== 'undefined') {
				selectArr.push({
					html: self.buildOption(value, _.unescape(text), {'data-ds_id': ds_id, 'data-origin_id': origin_id, 'data-type':type }),
					name: text,
					value: value,
					type: type
				});
			}
		}

		// TASK TY: I'm not sure if I like having the customization title displayed..
		// A good naming convention makes these unnecessary.. a better solution might be to "link" customizations to each other..
		if (typeof varFilter['all'] !== 'undefined' || typeof varFilter['custom'] !== 'undefined') {
			var collectionExtensions = utui.util.getVars(utui.data.customizations);

			for (var i in collectionExtensions) {
				if (typeof utui.data.customizations[i].output != 'undefined' && utui.data.customizations[i].output != '') {
					var a = utui.data.customizations[i].output.split(',');

					for(var b=0;b<a.length;b++){
						if ( utui.define.isInvalidVariableName(a[b]) ) { continue; }
						if (utui.data.customizations[i].title && typeof utui.data.customizations[i].title != 'undefined') {
							selectArr.push({
								html: self.buildOption( _.escape(a[b]), _.unescape(a[b]) + ' ('+_.unescape(utui.data.customizations[i].title)+')', { 'data-type' : _.escape(utui.data.customizations[i].title) } ),
								name: _.escape(a[b]) + ' ('+_.escape(utui.data.customizations[i].title)+')',
								value: _.escape(a[b]),
								type: _.escape(utui.data.customizations[i].title)
							});
						} else {
							selectArr.push({
								html: self.buildOption( _.escape(a[b]), _.unescape(a[b]), { 'data-type' : "" }),
								name: _.escape(a[b]),
								value: _.escape(a[b]),
								type: ""
							});
						}
					}
				}
			}
		}


		if (typeof varFilter['textvalue'] !== 'undefined') {
			content += self.buildOption('textvalue', localize.t('tiq.ext.text_value'), { 'data-type': 'text' });
		}

		// sort and group the options by type then sort
		// this will sort the groups in alphabetical order with items within groups in order too
		var groupedOptions = _.groupBy(_.sortBy(selectArr, function (option) {
			var optionType = option.type.toLowerCase();
			return (optionType === 'dom') ? -1 : optionType;
		}), 'type');
		_.each(groupedOptions, function (selectArr, key) {
			// sort by name
			var sortedVariables = _.sortBy(selectArr, function (option) {
				return option.name.toLowerCase();
			});

			_.each(sortedVariables, function(option) {
				// append the option html
				content += option.html;
			});
		});
		content += '</select>';

		return content;
	},
	updateDestination: function (container, item, vartype) {
		var lastAddedVars = utui.define.lastAdded,
			$selectList = $('#' + item);

		for (var i in utui.util.getVars(lastAddedVars, 1)) {
			var optionValue = lastAddedVars[i].type + '.' + lastAddedVars[i].name;
			$selectList.val(optionValue);
			utui.data.customizations[container][item] = optionValue;

			$selectList.change();
			$selectList.find('option[value="'+optionValue+'"]').attr('data-type',vartype);
		}
	},
	getInputSelect:function(container){
		var selectItems = dsapi.getInputs();

		var content = '<select id="'+container+'_inputselect" class="select2 variableSelect" data-placeholder="'+localize.t('tiq.datasources.select_a_datasource')+'" data-list-type="manage">';
			content += '<option selected></option>';
			_.each(selectItems, function (selectItems, key) {
				// sort by name
				var sortedVariables = _.sortBy(selectItems, function (option) {
					return option.name.toLowerCase();
				});

				// append group identifier
				content += '<optgroup label="' + dsapi.getDataSourceTypeName(key) + '" data-type="' + key + '">';

				_.each(sortedVariables, function(option) {
					// append the option html
					content += $('<option/>')
						.text(_.unescape(option.name))
						.val(_.unescape(option.value))
						.attr('data-type', option.type)[0].outerHTML;
				});
			});
			content += '</select>';
		return content;
	},
	getDuplicateEntryIds: function(container, key) {
		var dynamicConfig = utui.util.interpret.extension.configuration.dynamic.toFormatted(utui.data.customizations[container]),
			duplicateStack = [],
			newDuplicateStack = [],
			keyStack = [],
			resultStack = [],
			entryCollection,
			entryModel;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj.instanceId + '_' + key;
		}

		for (var i = 0; i < dynamicConfig.length; i++) {
			entryCollection = dynamicConfig[i]

			// detect duplicates first
			for(var j in entryCollection) {
			   entryModel = entryCollection[j];

				if(!~keyStack.indexOf(entryModel[key])) {
					keyStack.push(entryModel[key]);
				}
				else {
					duplicateStack.push(entryModel[key]);
				}
			}

			// identify all keys
			for(var j in entryCollection) {
			   entryModel = entryCollection[j];

				if(~duplicateStack.indexOf(entryModel[key])) {
					newDuplicateStack.push(entryModel[key]);
				}
			}

			// Set results based on duplicated keys
			for(var j in entryCollection) {
			   entryModel = entryCollection[j];

				if(~newDuplicateStack.indexOf(entryModel[key])) {
					resultStack.push(getInstanceKey(entryModel, key));
				}
			}
		};

		return resultStack;
	},
	getEmptyEntryIds: function(container, key, isConditionMet) {
		var dynamicConfig = utui.util.interpret.extension.configuration.dynamic.toFormatted(utui.data.customizations[container]),
			resultStack = [],
			entryCollection,
			entryModel;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj.instanceId + '_' + key;
		}

		for (var i = 0; i < dynamicConfig.length; i++) {
			entryCollection = dynamicConfig[i]

			// Get duplicates first
			for(var j in entryCollection) {
			   entryModel = entryCollection[j];

				if(entryModel[key] === '' && ((typeof isConditionMet === 'function') ? isConditionMet(entryModel) : true) ) {
					resultStack.push(getInstanceKey(entryModel, key));
				}
			}
		};

		return resultStack;
	},
	getEmptyConditionalIds: function(container, key) {
		var dynamicConfig = utui.util.interpret.extension.condition.toFormatted(utui.data.customizations[container]),
			resultStack = [],
			entryCollection,
			entryModel;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj.instanceId + '_' + key;
		}

		for (var i = 0; i < dynamicConfig.length; i++) {
			entryCollection = dynamicConfig[i]

			// Get duplicates first
			for(var j in entryCollection) {
			   entryModel = entryCollection[j];

				if(entryModel.set === '') {
					resultStack.push(getInstanceKey(entryModel, key));
				}
			}
		};

		return resultStack;
	},
	removeInputError: function($el) {
		$el.closest('.input-group').removeClass('has-error');
		$el.closest('.input-message').find('.input-message').empty();
	},
	setInputError: function($el, message) {
		var _m = message || '';
		$el.closest('.input-group').addClass('has-error');
		$el.closest('.input-group').find('.input-message').empty().html(_m);
	},
	validateView: function(extObj) {
		var extId = extObj._id,
			_util = utui.customizations_template.util,
			errorMessages = utui.validation.getMap('customizations', extId) || [],
			$collection = $('#customizations_'+extId+'_accordionBody').find('.input-group.has-error');

		// remove all errors first
		for (var i = 0; i < $collection.length; i++) {
			$el = $($collection[i]);
			_util.removeInputError($el);
		};

		for (var i = 0; i < errorMessages.length; i++) {
			key = errorMessages[i].key;
			message = errorMessages[i].message;

			_util.setInputError( $('#'+key), message);
		};
	},
	clearValidationView: function(extObj) {
		var extId = extObj._id;

		$('#customizations_'+extId+'_accordionBody').find('.input-group.has-error').removeClass('has-error');
	}
}
 //Customization 100001 - LowerCasing
utui.customizations_template[100001] = {
    id: 100001,
    eventHandler: {
        onRadioSelection: function(e) {
            var self = utui.customizations_template[100001];

            // write to data object
            utui.data.customizations[self.container].all = this.value;

            self.showVariableSelection(self.container);
        }
    },
    init: {
        // ---------------------------------------------
        isExtensionDirty: function(obj) {
            var isInitialized = false;

            for (var key in obj) {
                if(!obj.hasOwnProperty(key)) continue;

                if(key.indexOf('_set') > -1) {
                    isInitialized = true;
                    break;
                }
            }

            return isInitialized;
        },
        // ---------------------------------------------
        // if this template has not been initialized before, set initial values for build
        prepareData: function(obj, container) {
            if(!this.isExtensionDirty(obj)) {
                // Set default to YES
                utui.data.customizations[container].all = 'yes';
            }
        },
        // ---------------------------------------------
        fillData: function(obj, extId) {
            var objState = (obj.all === 'yes') ? 0 : 1;
            $('#customizations_' + extId + '_accordionBody').find('input[name="all"]')[objState].checked = true;

            var sortedObj = utui.util.getVars(obj, 2);
            for (var i in sortedObj) {
                if (i.indexOf('_set') >= 0) {
                    var setId = i.substring(0, i.indexOf('_set'));
                    var itemId = utui.customizations_template[100001].addItem(extId, setId);

                    // Conversion to Select2
                    $('#' + itemId).select2('val', sortedObj[i]);
                    $('#' + extId + '_items').show();
                }
            }
        }
    },
    template: {
        editMain: function(container) {
            var v = "";
                v = '<div id="' + container + '_pane" class="customization_padded"><div>';
                v += '<div>';
                    v += 'All Variables to Lower Case:';
                    v += '<div id="all" style="display:inline-block">';
                        v += '<input type="radio" name="all" value="yes" checked>'+localize.t('tiq.ext.yes');
                        v += '<input type="radio" name="all" value="no">'+localize.t('tiq.ext.no');
                    v += '</div>';
                v += '</div>';
                v += '<div id="' + container + '_items" style="margin-top: 5px; display: none">'+localize.t('tiq.ext.lower_case')+'<br></div>';
            return v;
        },
        main: function(extensionObj) {
            var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
            var v = '';

            if(dynamic.length > 0)
                v += this.selectedVariables(extensionObj, dynamic);
            else
                v += this.allVariables(extensionObj);

            return utui.customizations_template.shared.view.boxedSection(localize.t('tiq.ext.configuration'), v);
        },
        mainLinear: function(extensionObj) {
            var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

            var v = '';
                v += this.allVariables(extensionObj);
                v += this.selectedVariables(extensionObj, dynamic);

            return utui.customizations_template.shared.view.boxedSection(localize.t('tiq.ext.configuration'), v);
        },
        allVariables: function(extensionObj) {
            var v = '';
                v += '<div class="row-fluid">';
                    v += '<div class="span4">';
                        v += '<span class="inline-label">'+localize.t('tiq.ext.100001.all_datasources_to_lowercase')+'</span>';
                    v += '</div>';
                    v += '<div class="span8">';
                        v += utui.ui.template.form.readonly.inputItemView(null, 'all', '');
                    v += '</div>';
                v += '</div>';
            return v;
        },
        selectedVariables: function(extensionObj, dynamic) {
            var v = '';
                if(dynamic.length > 0) {

                    v += '<div class="row-fluid">';
                        v += '<div class="span4">';
                            v += '<span class="inline-label">'+localize.t('tiq.ext.100001.assigned_datasources_to_lowercase')+':</span>';
                        v += '</div>';
                        v += '<div class="span8">';
                    		v += utui.ui.template.form.readonly.inputItemView(null, dynamic[0][0]._parentInstanceId +'_set', '');
                        v += '</div>';
                    v += '</div>';

	                for (var i = 1; i < dynamic.length; i++) {
	                    v += '<div class="row-fluid">';
	                        v += '<div class="span8 offset4">';
	                    		v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_set', '');
	                        v += '</div>';
	                    v += '</div>';
                	}

	        	};
            return v;
        }
    },
    setRulesOnView: function(extensionObj, namespace) {
        var obj = extensionObj,
            target = '';

        function $data(key) {
            if(namespace) {
                return $('#'+namespace).find('span[data-key="'+key+'"]');
            }
            return $('span[data-key="'+key+'"]');
        }
    },
    getValue: function(extensionObj, key) {
        var value = extensionObj[key],
            roValue = '',
            options = {},
            dsCollection;

        switch(key) {
            default:
                roValue = dsapi.getDataSourceFormattedName(value)
                break;
        }

        return roValue;
    },
    fillData: function (container) {
        var obj = exapi.getObjectByExtensionId(container),
            self = this;

        this.container = container;

        // -----------------------------------------------------------------
        // Append READ ONLY view
        $('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

        // Render READ ONLY view
        utui.customizations_template.shared.populateReadOnlyView(obj);
        // -----------------------------------------------------------------

        // set layout
        // ---------------
        $('#customizations_' + container + '_content').html( self.template.editMain(container) );

        // prepare data
        // ---------------
        this.init.prepareData(obj, container);

        // populate with data
        // ---------------
        this.init.fillData(obj, container);

        // apply bindings
        // ---------------
        $('#all input[type="radio"]').on('change', self.eventHandler.onRadioSelection);

    },
    showVariableSelection: function (container) {
        // if ($('#all:checked').val() == 'no') {
        if ($('#customizations_'+container+'_accordionBody').find('input[name="all"]:checked').val() == 'no') {
            $('#' + container + '_items').show();
            this.addItem(container);
        } else {
            delete utui.customizations.validationMap[container];
            this.clearAllItems(container);
            $('#' + container + '_items').children().remove();
            $('#' + container + '_items').hide();
        }
    },
    addItem: function (container, instanceId) {
        var id = instanceId || utui.util.getContainerId();
        var itemId = id + '_set';
        var self = this;

        var content = '<div class="js-extension-item" style="display:block; margin-top:5px; position:relative">';

                content += '<div style="display:inline-block; vertical-align:top">';
                    content += '<span id="' + itemId + '_varpane">';//' class="js-extension-item">';

                    var field = utui.customizations_template.util.buildSelect({
                        item: itemId,
                        container: container,
                        id: 100001,
                        stylefloat: 'none',
                        showvars: 'js,js_page,cp,qp,meta,va'
                    });
                    content += utui.ui.template.form.validationWrapper(field, itemId);

                    content += '</span>';
                content += '</div>';

                content += '<div style="display:inline-block; vertical-align:top">';
                    content += '<button onclick="utui.customizations_template[100001].addItem(\'' + container + '\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
                    content += '<button onclick="utui.customizations_template[100001].dropItem(\'' + container + '\',\'' + itemId + '\')" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';
                content += '</div>';

            content += '</div>';

        $('#' + container + '_items').append(content);

        // Conversion to Select2
        dsapi.convertSelectListToSelect2(id+'_set', true);

        // this.validation(container);
        return itemId;
    },
    clearAllItems: function(container) {
        var extId = this.container;

        $('#customizations_'+container+'_content').find('.js-extension-item').each(function() {
            var $el = $(this),
                attrId = $el.find('select').attr('id');

            delete utui.data.customizations[extId][attrId];
        });
    },
    dropItem: function (container, containerItem) {
        delete utui.customizations.validationMap[container];

        var selectList = $('#customizations_'+container+'_content').find('.js-extension-item');

        if (selectList.length <= 1) {
            // If we only have one item or less, default to yes and clear everything out
            $('#customizations_'+container+'_content').find('input[name="all"]:eq(0)').prop('checked', true);
            utui.customizations_template[100001].showVariableSelection(container);

            this.clearAllItems(container);
        }
        else {
            // Otherwise, remove just the item only
            $('#'+containerItem).closest('.js-extension-item').remove();
            delete utui.data.customizations[this.container][containerItem];
        }

        utui.customizations.updateExtensionData(container);
    },
    show: function (container) {},
    validateModel: function(extObj) {
        var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
            dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
            conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
            kSetDupStack = utui.customizations_template.util.getDuplicateEntryIds(extObj._id, 'set'),
            validationObj = {},
            entryCollection,
            entryItem,
            key;

        var getInstanceKey = function(obj, key) {
            if(obj._instanceId === '0')
                return obj._parentInstanceId + '_' + key;
            else
                return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
        }

        utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

        if(!$.isEmptyObject(staticConfigCollection)) {
            // do nothing
        }

        if(dynamicConfigCollection.length > 0) {
            // do something
            for (var i = 0; i < dynamicConfigCollection.length; i++) {
                entryCollection = dynamicConfigCollection[i]

                for(var j = 0; j < entryCollection.length; j++) {
                    entryItem = entryCollection[j];

                    key = getInstanceKey(entryItem, 'set');

                    if(entryItem.set === '') {
                        message = localize.t('tiq.validation.message.define_variable');
                        validationObj[key] = message;

                        utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
                    }
                    else if(!dsapi.isExistingGlobalVariable(entryItem.set)) {
                        message = utui.validation.message.missingVariable( entryItem.set );
                        validationObj[key] = message;

                        utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.set);
                    }
                    else if(kSetDupStack.length > 0) {
                        message = localize.t('tiq.validation.message.duplicate_variable_reselect');

                        if(~kSetDupStack.indexOf(key)) {
                            validationObj[key] = message;
                            utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.set);
                        }
                    }

                };
            };
        }

        if(conditionCollection.length > 0) {

        }

        return validationObj;
    },

    // -----------------------------------------------
    // Verifies the entry strictly based on what's in the data model
    // @return true if all extension input conditions are valid and error-free
    isValid: function(container) {
        if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
            return false;
        }

        return true;
    }
}

//Customization 100002 - Join Variables (Complete)
utui.customizations_template[100002] = {
	id: 100002,
	template: {
		main: function(extensionObj) {
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getStaticConfiguration();
				_x += this.getJoinConfiguration(configDynamicObj);

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);

				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += sharedView.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}

			return v;
		},
		getStaticConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
				v += _row(localize.t('tiq.ext.destination'), _input(null, 'var', ''));
				v += _row(localize.t('tiq.ext.delimiter'), _input(null, 'delimiter', ''));
				v += _row(localize.t('tiq.ext.leading_delimiter'), _input(null, 'leadingdelimiter', ''));
				v += _row(localize.t('tiq.ext.default_value'), _input(null, 'defaultvalue', ''));
			return v;
		},
		getJoinConfiguration: function(configDynamicObj) {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
			var _w = '';

				v += '<div class="section-padded-top-bottom" style="border-top: 1px dashed #ddd;">';
				for (var i = 0; i < configDynamicObj.length; i++) {
					if(i === 0) {
						_w = _input(null, configDynamicObj[i][0]._parentInstanceId +'_set', '');
						_w += _input(null, configDynamicObj[i][0]._parentInstanceId +'_set_text', '');
						v += _row(localize.t('tiq.ext.join'), _w);
					} else {
						v += '<br>';
						_w = _input(null, configDynamicObj[i][0]._parentInstanceId +'_set', '');
						_w += _input(null, configDynamicObj[i][0]._parentInstanceId +'_set_text', '');
						v += _row(localize.t('tiq.ext.and'), _w);
					}
				};
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].set === 'textvalue') {
				$data(instanceId+'_set_text').show();
			} else {
				$data(instanceId+'_set_text').hide();
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "position":
				options = {
					insertbefore: localize.t('tiq.ext.before_node'),
					insertafter: localize.t('tiq.ext.after_node'),
					insertfirst: localize.t('tiq.ext.beginning_of_node'),
					insertlast: localize.t('tiq.ext.end_of_node'),
					replace: localize.t('tiq.ext.replace_node_content'),
					replacenode: localize.t('tiq.ext.replace_node')
				}

				roValue = options[value];
				break;
			case "type":
				options = {
					domid: localize.t('tiq.ext.dom_id'),
					xpath: localize.t('tiq.ext.xpath')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false,
			self = this;

		this.container = container;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var tooltipObj = {};
		var content = '';
		content += '<div id="' + container + '" class="customization_padded">';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.destination') + '</div>';
		content += '    <div class="customization_item">';
		content += '<span id="' + container + '_varpane">';

		var field = utui.customizations_template.util.buildSelect({ item: 'var', container: container, id: 100002, stylefloat: 'none', showvars: 'nooutput,js,js_page,cp,va' });
		content += utui.ui.template.form.validationWrapper(field, 'var');

		content += '</span>'
		content += '<span id="' + container + '_varerror" class="js-error-field bg-danger required-container pull-right" style="display:none;"></span>'
		content += '<button onclick="utui.define.showAddMore(\'' + container + '\',\'js\', \'\', \'\', function() { utui.customizations_template.util.updateDestination(\'' + container + '\', \'var\', \'js\'); })" class="btn btn-mini"><i class="icon-plus" id="' + container + '_addmore_tooltip" title="' + localize.t('tiq.ext.click_here_to_create_datasource') + '"></i></button>';
		tooltipObj[container + '_addmore_tooltip'] = {
			gravity: 'sw'
		};
		content += '    </div>';
		content += '  </div>';

		content += '<div class="customization_div">';

		var itemId = 'delimiter';
		content += '<div class="customization_labelwide">' + localize.t('tiq.ext.delimiter') + '</div>';
		content += '<input type="text" id="' + itemId + '" name="' + itemId + '" value=":" size="2" style="float:left" onkeyup="utui.customizations_template[100002].showSample(\'' + container + '\');">';

		itemId = 'leadingdelimiter';
		content += '<div class="customization_labelwide">' + localize.t('tiq.ext.leading_delimiter') + '</div>';
		content += '<input type="radio" id="' + itemId + '" name="' + itemId + '" value="yes" style="float:left;margin-top:7px" onchange="utui.customizations_template[100002].showSample(\'' + container + '\')">';
		content += '<span style="float:left;margin-top:5px">' + localize.t('tiq.ext.yes') + '</span>';
		content += '<input type="radio" id="' + itemId + '" name="' + itemId + '" value="no" checked style="float:left;margin-top:7px" onchange="utui.customizations_template[' + this.id + '].showSample(\'' + container + '\')">';
		content += '<span style="float:left;margin-top:5px">' + localize.t('tiq.ext.no') + '</span>';

		itemId = 'defaultvalue';
		content += '<div class="customization_labelwide">' + localize.t('tiq.ext.default_value') + '</div><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="16" style="float:left">';
		content += '</div>';
		//content += '</div>';

		content += '<div class="customization_div">';

		itemId = 'pane';
		content += '<div style="text-align: left" id="' + itemId + '"></div>';
		content += '</div>';

		content += '<div class="customization_div">';

		itemId = 'sample';
		content += '<div class="customization_labelwide">' + localize.t('tiq.ext.sample') + '</div>';
		content += '<div style="word-wrap:break-word;width:500px;margin-top:5px;float:left">';
		content += '<span id="' + itemId + '" style="color: blue;"></span>';
		content += '</div>';
		content += '</div>';

		// Conditions
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
		content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn ext-data-action">' + localize.t('tiq.ext.add_condition') + '</button></div>';
		content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left">';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2('var', true);

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_set') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			this.addItem(container, 'none');
			this.addItem(container, 'add');
		}

		if (fillFlag) {

			if ($('#' + container + '_scope').hasClass("select2")) {
				// Must be an array since is multiple select
				var scopeVal = obj.scope ? obj.scope.toString().split(",") : obj.scope;
				$('#' + container + '_scope').select2('val', scopeVal || "");
			} else {
				$('#' + container + '_scope').val(obj.scope);
			}

			$('#delimiter').val(obj.delimiter);

			$('input[name="leadingdelimiter"]')[(obj.leadingdelimiter == 'yes') ? 0 : 1].checked = true;

			$('#defaultvalue').val(obj.defaultvalue);
			$('#var').select2('val', obj['var'] || "");

			var j = 0;
			for (var i in utui.util.getVars(obj, 2)) {
				if (i.match('_set$') == '_set') {
					j++;
					var setId = i.substring(0, i.indexOf('_set'));
					var itemId = utui.customizations_template[100002].addItem(container, (j == 1) ? 'none' : (j > 2) ? 'remove' : 'add', setId);
					$('#' + itemId).val(obj[i]);
					$('#' + itemId).select2('val',obj[i]);

					if (obj[i] == 'textvalue') {
						$('#' + itemId + '_text').val(obj[i + '_text']);
						$('#' + itemId + '_text').select2('val', obj[i + '_text']);
						$('#' + itemId + '_text').show();
					}
					else {
						$('#' + itemId + '_text').val(obj[i + '_text']);
						$('#' + itemId + '_text').select2('val', obj[i + '_text']);
						$('#' + itemId + '_text').hide();
					}
				}
			}
			// Set up the conditions for ext 100002
			utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,100002);

			this.showSample(container);
		} else {
			this.addItem(container, 'none');
			this.addItem(container, 'add');
		}

		utui.util.addTooltip(tooltipObj);

		$('#button_addcondition').attr('onClick', '{utui.customizations_template[100002].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()}');

		if(cb) cb();
	},
	addItem: function (container, addflag, instanceId) {
		var id = instanceId || utui.util.getContainerId();
		var content = '<div style="margin-top: 7px">';
		content += '<div class="customization_labelwide" style="float:left;">' + (addflag == 'none' ? localize.t('tiq.ext.join') : localize.t('tiq.ext.and')) + ':</div>';

		content += '<span id="' + id + '_set_varpane">';
		var field = utui.customizations_template.util.buildSelect({ item: id + '_set', container: container, id: 100002, stylefloat: 'left', showvars: 'textvalue,all' });
		content += utui.ui.template.form.validationWrapper(field, id + '_set');

		content += '<input type="text" name="' + id + '_set_text" id="' + id + '_set_text" value="" style="display:none">';
		content += '</span>';

		if (addflag == 'add') {
			content += '<button onclick="utui.customizations_template[100002].addItem(\'' + container + '\',\'remove\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
		} else if (addflag == 'remove') {
			content += ' <button onclick="utui.customizations_template[100002].removeJoinAndCondition(\'' + id + '_set\');" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';
		}
		content += '</div>';
		$('#pane').append(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id + '_set', true);

		// initial state
		this.changeHandler(id, container);
		utui.customizations_template[100002].showSample(container);

		$('#' + id + '_set').on('change', function (eventObj) {
			utui.customizations_template[100002].changeHandler(id, container)
			utui.customizations_template[100002].showSample(container);
		});

		// this.showSample(container);
		// $("#" + container).find(":button").button();
		return id + '_set';
	},
	removeJoinAndCondition: function(itemId) {
		$('#'+itemId+'_varpane').parent().remove();

		this.showSample(this.container);

		delete utui.data.customizations[this.container][itemId];
		delete utui.data.customizations[this.container][itemId+'_text'];

		utui.customizations.updateExtensionData(this.container);
	},
	changeHandler: function (instanceId, container) {
		if ($('#' + instanceId + '_set').select2('val') == 'textvalue') {
			$('#' + instanceId + '_set_text').show();
		} else {
			$('#' + instanceId + '_set_text').hide();
		}
	},
	showSample: function (container) {
		var sample = [];
		var a = $('#delimiter').val();
		var b = $('#leadingdelimiter:checked').val();

		var items = $('#pane').find('select');
		for (var i = 0; i < items.length; i++) {
			var c = items[i].value;
			c=c.replace(/\s+\(\w+\)$/,"");
			c=dsapi.getVADataSourceDisplayName(c);
			sample.push(c)
		}

		$('#sample').html((b == 'yes' ? _.escape(a) : '') + _.escape(sample.join(a)));
	},
	show: function (container) {},
	addCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);		
	},
	removeCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			kSetDupStack = utui.customizations_template.util.getDuplicateEntryIds(extObj._id, 'set'),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'var') {
					if(value === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}
			}
		}

		if(dynamicConfigCollection.length > 0) {

			for (var i = 0; i < dynamicConfigCollection.length; i++) {
				entryCollection = dynamicConfigCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'set');

					if(entryItem.set === '') {
						message = localize.t('tiq.validation.message.select_value');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.set === 'textvalue') {
						// do nothing
						continue;
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.set)) {
						message = utui.validation.message.missingVariable( entryItem.set );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.set);
					}
					else if(kSetDupStack.length > 0) {
						message = localize.t('tiq.validation.message.duplicate_variable_reselect');

						if(~kSetDupStack.indexOf(key)) {
							validationObj[key] = message;
							utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.set);
						}
					}

				};
			};
		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					if(entryItem.source === '') {
						key = getInstanceKey(entryItem, 'source');
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						key = getInstanceKey(entryItem, 'source');
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.source);
					}
				};
			};
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//TASK Customization 100003 - Set Variables
//TASK TY: shrink the screen width and the scope log wraps to the bottom.. (should stay at the top)
//TASK TY: Error handling - check for duplicate conditions in "and"
//TASK TY: Error handling - check for " in the JS Code snippet (do not allow double quotes)
//TASK TY: weird drag and drop issue (very senstive to hold a mouse down while clicking)
utui.customizations_template[100003] = {
	id: 100003,
	template: {
		main: function(extensionObj) {
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var configObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
				// Configuration
				if(!$.isEmptyObject(configObj)) {
					v += utui.customizations_template.shared.view.boxedSection(localize.t('tiq.ext.configuration'), sharedView.getSetConfiguration(configObj));
				}
				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += utui.customizations_template.shared.view.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show().before(' <span class="inline-label">'+localize.t('tiq.ext.data_source')+'</span><br>');
				$data(instanceId+'_settotext').hide();
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.text')+'</span><br>');
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.code')+'</span><br>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	index: 0,
	container:'',
	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------


		this.container = container;
		var content = '<div class="customization_padded">';

		// Set Items
		content += '  <div><div class="customization_div">';
		content += '        <div id="'+container+'_setcontainer" class="customization_item" style="float:left">';
		content += '    </div>';
		content += '  </div>';

		// Conditions
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_label" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
		content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini ext-data-action">' + localize.t('tiq.ext.add_condition') + '</button></div>';
		content += '    <div id="'+container+'_conditioncontainer" class="customization_item" style="float:left">';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';
		content += '</div>';

		$('#customizations_'+container+'_content').html(content);

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_setoption') > -1) {
				isInitialized = true;
				break;
			}
		}

		if(!isInitialized) {
			utui.customizations_template[100003].addSetItem(container);
		}

		if(fillFlag){

			for(var i in utui.util.getVars(obj,2)){

				if(i.indexOf('_setoption')>=0){
					var setId = i.substring(0,i.indexOf('_set'));
					var itemId = utui.customizations_template[100003].addSetItem(container,setId);

					$('#'+itemId+'_set').val(obj[setId+'_set']);
					$('#'+itemId+'_set').select2('val', obj[setId+'_set']);

					$('#'+itemId+'_setoption').val(obj[setId+'_setoption']);

					if (obj[setId+'_setoption']=='var'){
						$('#'+itemId+'_settovar').val(obj[setId+'_settovar']);
						$('#'+itemId+'_settovar').select2('val', obj[setId+'_settovar']);
					}
					else{
						$('#'+itemId+'_settotext').val(obj[setId+'_settotext']);
					}

					utui.customizations_template[100003].updateSetOption(itemId);
				}
			}
			// Set up the conditions for ext 100003
			utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj, 100003);

		}else{
			utui.customizations_template[100003].addSetItem(container);
		}
		// $("#"+container).find(":button").button();
		$('#button_addcondition').attr('onClick', '{utui.customizations_template[100003].addCondition(\''+container+'\');$(\'#button_addcondition\').hide()}');

		if(cb) cb();
	},
	show: function (container) {},
	addSetItem:function(container,instanceId){
		var tooltipObj = {};
		var id = instanceId || utui.util.getContainerId();
		var content = '';

		// #######_setitem (row-container)

		content += '<div id="'+id+'_setitem" class="" style="margin-top: 2px;position: relative">';


		// #######_set
			content += '<div id="'+id+'_set_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.set')+'</div>';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_set', container: container, id: 100003, stylefloat: 'left' });

				content += utui.ui.template.form.validationWrapper(field, id+'_set');

			content += '</div>';
			content += '<div class="inline vertical-align-bottom">';
				content += '<button onclick="utui.define.showAddMore(\''+container+'\',\'js\',\''+id+'_set'+'\', \'\', function() { utui.customizations_template.util.updateDestination(\'' + container + '\', \'' + id+'_set' + '\', \'js\'); })" class="btn btn-mini" style="float:left;"><i class="icon-plus" id="'+container+'_addmore_tooltip" title="'+localize.t('tiq.ext.click_here_to_create_datasource')+'"></i></button>';
			content += '</div>';

			tooltipObj[container+'_addmore_tooltip'] = { gravity: 'w' };


		// #######_setoption
			content += '<div id="'+id+'_setoption_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.to')+'</div>';
				content += '<select id="'+id+'_setoption" name="'+id+'_setoption" onchange="utui.customizations_template[100003].updateSetOption(\''+id+'\');" style="float:left">';
					content += '<option value="text">'+localize.t('tiq.ext.text')+'</option>';
					content += '<option value="var">'+localize.t('tiq.ext.variable')+'</option>';
					content += '<option value="code">'+localize.t('tiq.ext.js_code')+'</option>';
				content += '</select>';
			content += '</div>';


		// #######_settovar
			content += '<div id="'+id+'_settovar_container" class="inline vertical-align-bottom">';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_settovar', container: container, id: 100003, stylefloat: 'left' });
				content += utui.ui.template.form.validationWrapper(field, id+'_settovar');
			content += '</div>';


		// #######_settotext
			content += '<div id="'+id+'_settotext_container" class="inline vertical-align-bottom">';
			content += '    <input type="text" size="48" id="'+id+'_settotext" name="'+id+'_settotext'+'" style="float:left;">';
			content += '</div>';

			content += '<div id="'+id+'_action_container" class="inline vertical-align-bottom">';
				content += '<button onclick="if($(\'#'+id+'_setitem'+'\').siblings().length>=1){utui.customizations_template[100003].removeSetItem(\''+id+'_setitem'+'\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';
				content += '<button onclick="utui.customizations_template[100003].addSetItem(\''+container+'\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
			content += '</div>'

		content += '</div>';


		$('#'+container+'_setcontainer').append(content);

		// ---------------------------------------------
		// Conversion to Select2
		dsapi.convertSelectListToSelect2(id+'_set', true);
		dsapi.convertSelectListToSelect2(id+'_settovar', true);

		utui.customizations_template[100003].updateSetOption(id);
		utui.util.addTooltip(tooltipObj);
		return id;
	},
	updateSetOption:function(instanceId){
		var value = $('#'+instanceId+'_setoption').val();

		if (value === 'var') {
			$('#'+instanceId+'_settovar_container').show();
			$('#'+instanceId+'_settotext_container').hide();
		}
		else {
			$('#'+instanceId+'_settotext_container').show();
			$('#'+instanceId+'_settovar_container').hide();
		}
	},
	removeSetItem:function(container){
		$('#'+container).remove();

		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}

		delete utui.data.customizations[this.container][container + '_set'];
		delete utui.data.customizations[this.container][container + '_setoption'];
		delete utui.data.customizations[this.container][container + '_settotext'];
		delete utui.data.customizations[this.container][container + '_settovar'];

		utui.customizations.updateExtensionData(this.container);
	},
	addCondition:function(container,instanceId){
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition:function(container,instanceId){
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);
	},
	removeCondition:function(container){
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition:function(container){
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			// do nothing
		}

		if(dynamicConfigCollection.length > 0) {
			// do something
			for (var i = 0; i < dynamicConfigCollection.length; i++) {
				entryCollection = dynamicConfigCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					if(entryItem.set === '') {
						key = getInstanceKey(entryItem, 'set');
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.set)) {
						key = getInstanceKey(entryItem, 'set');
						message = utui.validation.message.missingVariable( entryItem.set );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.set);
					}



					if(entryItem.setoption === 'var' && entryItem.settovar === '') {
						key = getInstanceKey(entryItem, 'settovar');
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.setoption === 'var' && !dsapi.isExistingGlobalVariable(entryItem.settovar)) {
						key = getInstanceKey(entryItem, 'settovar');
						message = utui.validation.message.missingVariable( entryItem.settovar );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.settovar);
					}
				};
			};
		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					if(entryItem.source === '') {
						key = getInstanceKey(entryItem, 'source');
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						key = getInstanceKey(entryItem, 'source');
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.source);
					}
				};
			};
		}

		return validationObj;
	},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//Customization 100004 - Persist Variables
utui.customizations_template[100004] = {
	id: 100004,
	template: {
		main: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.persist')+'</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'setoption', '');
								v += utui.ui.template.form.readonly.inputItemView(null, 'settotext', '', 'TEXT');
								v += utui.ui.template.form.readonly.inputItemView(null, 'settovar', '', 'VARIABLE');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.duration')+'</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'persistencetext', '');
								v += utui.ui.template.form.readonly.inputItemView(null, 'persistence', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.update')+'</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'allowupdate', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.store_in_cookie')+'</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'var', '');
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';


				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.condition')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += utui.customizations_template.shared.getConditionalView(utui.util.interpret.extension.condition.toFormatted(extensionObj));
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		if(obj.setoption === 'text') {
			$data('setoption').hide();
			$data('settovar').hide();
			$data('settotext').show();
		}

		if(obj.setoption === 'var') {
			$data('setoption').hide();
			$data('settovar').show();
			$data('settotext').hide();
		}

		if(obj.persistence === 'hours') {
			$data('persistence').hide();
			$data('persistencetext').show().after('<span class="inline-label">'+localize.t('tiq.ext.hours')+'</span>');
		}

		if(obj.persistence === 'days') {
			$data('persistence').hide();
			$data('persistencetext').show().after('<span class="inline-label">'+localize.t('tiq.ext.days')+'</span>');
		}

		if(obj.persistence === 'session') {
			$data('persistence').show();
			$data('persistencetext').hide();
		}

		if(obj.persistence === 'visitor') {
			$data('persistence').show();
			$data('persistencetext').hide();
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container) {
		var obj = exapi.getObjectByExtensionId(container);

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		this.container = container;
		var tooltipObj = {};
		var content = '<div class="customization_padded">';
		// Set Value to Persist
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.persist') + '</div>';
		content += '    <div class="customization_item">';
		content += '        <select id="setoption" name="setoption" onchange="utui.customizations_template[100004].updateSetOption(\'' + container + '\');" style="float:left">';
		content += '        <option value="text">' + localize.t('tiq.ext.text') + '</option>';
		content += '        <option value="var">' + localize.t('tiq.ext.variable') + '</option>';
		content += '        </select>';

			content += '<div id="settovar_container" class="inline vertical-align-bottom">';
				var field = utui.customizations_template.util.buildSelect({item: 'settovar', container: container, id: 100004, showvars: 'js,js_page,qp,va' });
				content += utui.ui.template.form.validationWrapper(field, 'settovar');
			content += '</div>';

			content += '<div id="settotext_container" class="inline vertical-align-bottom">';
			content += '    <input type="text" size="32" id="settotext" name="settotext" style="float:left;">';
			content += '</div>';

		content += '      </div>';
		content += '    </div>';
		content += '  </div>';

		// - - - - - -
		// Set Persist Duration
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.duration') + '</div>';
		content += '    <div class="customization_item">';
		content += '        <input type="text" size="2" id="persistencetext" name="persistencetext" style="display:none">';
		content += '        <select id="persistence" name="persistence" onchange="utui.customizations_template[100004].showPersistenceText(\'' + container + '\')">';
		content += '        <option value="session">' + localize.t('tiq.ext.session') + '</option>';
		content += '        <option value="visitor">' + localize.t('tiq.ext.visitor') + '</option>';
		content += '        <option value="hours">' + localize.t('tiq.ext.hours') + '</option>';
		content += '        <option value="days">' + localize.t('tiq.ext.days') + '</option>';
		content += '        </select>';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';

		// - - - - - -
		// Allow Update
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.update') + '</div>';
		content += '    <div class="customization_item">';
		content += '        <select id="allowupdate" name="allowupdate">';
		content += '        <option value="multiple">' + localize.t('tiq.ext.allow_update_on_page_view') + '</option>';
		content += '        <option value="once">' + localize.t('tiq.ext.keep_first_value_set') + '</option>';
		content += '        </select>';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';

		// - - - - - -
		// Condition
		content += '  <div>';
		content += '    <div class="customization_div">';
		content += '      <div class="customization_labelwide" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
		content += '      <div class="customization_item" style="float:left"><button id="button_addcondition" class="btn js-action-addbtn ext-data-action" style="margin-left:2px" >' + localize.t('tiq.ext.add_condition') + '</button></div>';
		content += '      <div id="'+container+'_conditioncontainer" class="customization_item"></div>';
		content += '    </div>';
		content += '  </div>';

		// - - - - - -
		// Cookie Name (this is actually the "output" field)
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.store_in_cookie') + '</div>';
		content += '    <div class="customization_item">';
		content += '<span id="var_varpane">';
		var field = utui.customizations_template.util.buildSelect({ item: 'var', container: container, id: 100004, stylefloat: 'none', showvars: 'nooutput,cp' });
		content += utui.ui.template.form.validationWrapper(field, 'var');


		content += '</span>';
		content += '<span id="'+container+'_varerror" class="js-error-field bg-danger required-container pull-right" style="display:none;"></span>'
		content += '<button onclick="utui.define.showAddMore(\'' + container + '\',\'cp\',\'\',\'\',function() {utui.customizations_template.util.updateDestination(\'' + container + '\', \'var\', \'cp\');})" class="btn btn-mini"><i class="icon-plus" id="' + container + '_addmore_tooltip" title="' + localize.t('tiq.ext.click_here_to_create') + '"></i></button>';
		tooltipObj[container + '_addmore_tooltip'] = {
			gravity: 'w'
		};

		content += '    </div>';
		content += '    </div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + container + '_content').html(content);


		// Conversion to Select2
		dsapi.convertSelectListToSelect2('settovar', true);
		// Conversion to Select2
		dsapi.convertSelectListToSelect2('var', true);


		$('#persist').val(obj.persist);
		$('#persistence').val(obj.persistence);
		$('#persistencetext').val(obj.persistencetext);
		$('#allowupdate').val(obj.allowupdate);
		$('#var').select2('val', obj['var'] || '');
		$('#setoption').val(obj.setoption);

		if (obj.setoption == 'text') {
			$('#settotext').val(obj.settotext);
		} else {
			$('#settovar').select2('val', obj.settovar || '');
		}
		utui.customizations_template[100004].updateSetOption(container);
		this.showPersistenceText(container);

		// Set up the conditions for ext 100004
		utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,100004, true);

		utui.util.addTooltip(tooltipObj);
		$('#button_addcondition').attr('onClick', '{utui.customizations_template[100004].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()}');
	},
	updateSetOption: function () {
		var value = $('#setoption').val();

		if (value === 'var') {
			$('#settovar_container').show();
			$('#settotext_container').hide();
		}
		else {
			$('#settotext_container').show();
			$('#settovar_container').hide();
		}
	},
	addCondition:function(container,instanceId){
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition:function(container,instanceId, isNewlyDefined){
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);		
	},
	removeCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},
	showPersistenceText: function (container) {
		var value = $('#persistence option:selected').val();
		if (value == 'days' || value == 'hours') {
			$('#persistencetext').show().focus();
		} else {
			$('#persistencetext').hide();
		}
	},
	show: function (container) {},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			kSetDupStack = utui.customizations_template.util.getDuplicateEntryIds(extObj._id, 'set'),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'var') {
					if(value === '' || value === 'none') {
						message = localize.t('tiq.validation.message.select_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}

				if(key === 'settovar' && staticConfigCollection.setoption === 'var') {
					if(value === '') {
						message = localize.t('tiq.validation.message.select_destination');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}
			}
		}

		if(dynamicConfigCollection.length > 0) {
			// do nothing
		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.source === 'textvalue') {
						// do nothing
						continue;
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}
					else if(kSetDupStack.length > 0) {
						message = localize.t('tiq.validation.message.duplicate_variable_reselect');

						if(~kSetDupStack.indexOf(key)) {
							validationObj[key] = message;
							utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.source);
						}
					}

				};
			};
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}

//TASK Customization 100005 - E-Commerce
//TASK TY: Should log a ticket to use "USD" or add this as an option here for currency select?
utui.customizations_template[100005] = {
	id: 100005,
	ecommerce : [
		{ col:'l', label:localize.t('tiq.ext.tooltip.order'), name:'order', tooltip: localize.t('tiq.ext.tooltip.order_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.total'), name:'total', tooltip: localize.t('tiq.ext.tooltip.order_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.subtotal'), name:'subtotal', tooltip: localize.t('tiq.ext.tooltip.subtotal_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.ship'), name:'ship', tooltip: localize.t('tiq.ext.tooltip.ship_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.tax'), name:'tax', tooltip: localize.t('tiq.ext.tooltip.tax_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.store'), name:'store', tooltip: localize.t('tiq.ext.tooltip.store_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.currency'), name:'currency', tooltip: localize.t('tiq.ext.tooltip.currency_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.promo'), name:'promo', tooltip: localize.t('tiq.ext.tooltip.promo_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.type'), name:'type', tooltip: localize.t('tiq.ext.tooltip.type_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.custid'), name:'custid', tooltip: localize.t('tiq.ext.tooltip.custid_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.city'), name:'city', tooltip: localize.t('tiq.ext.tooltip.city_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.state'), name:'state', tooltip: localize.t('tiq.ext.tooltip.state_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.zip'), name:'zip', tooltip: localize.t('tiq.ext.tooltip.zip_desc')},
		{ col:'l', label:localize.t('tiq.ext.tooltip.country'), name:'country', tooltip: localize.t('tiq.ext.tooltip.country_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.prod'), name:'prod', tooltip: localize.t('tiq.ext.tooltip.prod_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.prodname'), name:'prodname', tooltip: localize.t('tiq.ext.tooltip.prodname_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.sku'), name:'sku', tooltip: localize.t('tiq.ext.tooltip.sku_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.brand'), name:'brand', tooltip: localize.t('tiq.ext.tooltip.brand_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.cat'), name:'cat', tooltip: localize.t('tiq.ext.tooltip.cat_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.cat2'), name:'cat2', tooltip: localize.t('tiq.ext.tooltip.cat2_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.quan'), name:'quan', tooltip: localize.t('tiq.ext.tooltip.quan_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.price'), name:'price', tooltip: localize.t('tiq.ext.tooltip.price_desc')},
		{ col:'r', label:localize.t('tiq.ext.tooltip.pdisc'), name:'pdisc', tooltip: localize.t('tiq.ext.tooltip.pdisc_desc')}
	],
	template: {
		main: function(extensionObj) {
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getStaticConfiguration();
				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);

				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += sharedView.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}
			return v;
		},
		getStaticConfiguration: function() {
			var _title = utui.customizations_template.shared.view.linearRowTitleItemView;
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
				v += _title(localize.t('tiq.ext.order_values'));

				v += _row(localize.t('tiq.ext.tooltip.order'), _input(null, 'corder', ''));
				v += _row(localize.t('tiq.ext.tooltip.total'), _input(null, 'ctotal', ''));
				v += _row(localize.t('tiq.ext.tooltip.subtotal'), _input(null, 'csubtotal', ''));
				v += _row(localize.t('tiq.ext.tooltip.ship'), _input(null, 'cship', ''));
				v += _row(localize.t('tiq.ext.tooltip.tax'), _input(null, 'ctax', ''));
				v += _row(localize.t('tiq.ext.tooltip.store'), _input(null, 'cstore', ''));
				v += _row(localize.t('tiq.ext.tooltip.currency'), _input(null, 'ccurrency', ''));
				v += _row(localize.t('tiq.ext.tooltip.promo'), _input(null, 'cpromo', ''));
				v += _row(localize.t('tiq.ext.tooltip.type'), _input(null, 'ctype', ''));
				v += _row(localize.t('tiq.ext.tooltip.custid'), _input(null, 'ccustid', ''));
				v += _row(localize.t('tiq.ext.tooltip.city'), _input(null, 'ccity', ''));
				v += _row(localize.t('tiq.ext.tooltip.state'), _input(null, 'cstate', ''));
				v += _row(localize.t('tiq.ext.tooltip.zip'), _input(null, 'czip', ''));
				v += _row(localize.t('tiq.ext.tooltip.country'), _input(null, 'ccountry', ''));
				v += _row(localize.t('tiq.ext.calculate_order_total'), _input(null, 'totalcalculate', ''));

				v += '<br>';
				v += _title(localize.t('tiq.ext.product_values'));

				v += _row(localize.t('tiq.ext.tooltip.prod'), _input(null, 'cprod', ''));
				v += _row(localize.t('tiq.ext.tooltip.prodname'), _input(null, 'cprodname', ''));
				v += _row(localize.t('tiq.ext.tooltip.sku'), _input(null, 'csku', ''));
				v += _row(localize.t('tiq.ext.tooltip.brand'), _input(null, 'cbrand', ''));
				v += _row(localize.t('tiq.ext.tooltip.cat'), _input(null, 'ccat', ''));
				v += _row(localize.t('tiq.ext.tooltip.cat2'), _input(null, 'ccat2', ''));
				v += _row(localize.t('tiq.ext.tooltip.quan'), _input(null, 'cquan', ''));
				v += _row(localize.t('tiq.ext.tooltip.price'), _input(null, 'cprice', ''));
				v += _row(localize.t('tiq.ext.tooltip.pdisc'), _input(null, 'cpdisc', ''));
				v += _row(localize.t('tiq.ext.list_type'), _input(null, 'listtype', ''));
				v += _row(localize.t('tiq.ext.separator'), _input(null, 'separator', ''));
				v += _row(localize.t('tiq.ext.prices_are_in'), _input(null, 'pricetype', ''));

			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		if(obj.pricetype === 'text') {
			$data('setoption').hide();
			$data('settovar').hide();
			$data('settotext').show();
		}

		if(obj.setoption === 'var') {
			$data('setoption').hide();
			$data('settovar').show();
			$data('settotext').hide();
		}

		if(obj.persistence === 'hours') {
			$data('persistence').hide();
			$data('persistencetext').show().after('<span class="inline-label">'+localize.t('tiq.ext.hours')+'</span>');
		}

		if(obj.persistence === 'days') {
			$data('persistence').hide();
			$data('persistencetext').show().after('<span class="inline-label">'+localize.t('tiq.ext.days')+'</span>');
		}

		if(obj.persistence === 'session') {
			$data('persistence').show();
			$data('persistencetext').hide();
		}

		if(obj.persistence === 'visitor') {
			$data('persistence').show();
			$data('persistencetext').hide();
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}

				roValue = dsapi.getDataSourceFormattedName(value);
				break;
		}

		return roValue;
	},
	clearSelect2: function() {
		for (var i = 0; i < this.ecommerce.length; i++) {
			$('#'+this.ecommerce[i].name).select2('destroy');
		}
	},
	fillData: function (container) {
		var obj = exapi.getObjectByExtensionId(container);
		var tooltipObj = {},
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		this.container = container;

		var content = '<div id="' + container + '" class="customization_padded">';

		content += '<div class="container-fluid">';
			content += '<div class="row-fluid">';

		content += ' <div class="span6">';
			content += ' <div style="font-weight: normal; text-align: center; font-size: 12px; margin: 12px; border-bottom: 1px solid rgb(204, 204, 204); padding-bottom: 6px;">' + localize.t('tiq.ext.order_values') + '</div>';
		for (var i = 0; i < this.ecommerce.length; i++) {
			if (this.ecommerce[i].col == 'l') {
				var id = container + '_' + this.ecommerce[i].name + '_tooltip';
				tooltipObj[id] = {
					gravity: 'w'
				};
				content += '  <div class="customization_div highlight-on-hover" id="' + id + '" title="' + this.ecommerce[i].tooltip + '">';
				content += '    <div class="customization_labelwide">' + this.ecommerce[i].label + ': </div>';
				content += '    <div class="customization_item">';
				var itemId = 'c' + this.ecommerce[i].name;
				content += '<span id="' + itemId + '_varpane">';

				var field = utui.customizations_template.util.buildSelect({item: itemId, container: container, id: 100005, stylefloat: 'none', showvars: 'none,js,js_page,cp,qp,meta,va'});
				content += utui.ui.template.form.validationWrapper(field, itemId);

				content += '</span>';
				content += '    </div>';
				content += '    <div class="customization_itemright">_c' + this.ecommerce[i].name + '</div>';
				content += '  </div>';
			}
		}
		content += '	<div class="customization_div highlight-on-hover" align="center" id="' + container + '_totalcalculate_tooltip" title="' + localize.t('tiq.ext.extension_to_calculate') + '">';
		content += 			localize.t('tiq.ext.calculate_order_total') + ' ( _ctotal ): ';
		content += '		<input type="radio" id="totalcalculate" name="totalcalculate" value="yes">' + localize.t('tiq.ext.yes');
		content += '		<input type="radio" id="totalcalculate" name="totalcalculate" value="no" checked>' + localize.t('tiq.ext.no');
		content += '	</div>';

		tooltipObj[container + '_totalcalculate_tooltip'] = { gravity: 'w' };
		content += ' </div>';


		content += ' <div class="span6">';
			content += ' <div style="font-weight: normal; text-align: center; font-size: 12px; margin: 12px; border-bottom: 1px solid rgb(204, 204, 204); padding-bottom: 6px;">' + localize.t('tiq.ext.product_values') + '</div>';
		for (var i = 0; i < this.ecommerce.length; i++) {
			if (this.ecommerce[i].col == 'r') {
				var id = container + '_' + this.ecommerce[i].name + '_tooltip';
				tooltipObj[id] = {
					gravity: 'e'
				};
				content += '  <div class="customization_div highlight-on-hover" id="' + id + '" title="' + this.ecommerce[i].tooltip + '">';
				content += '    <div class="customization_labelwide">' + this.ecommerce[i].label + ': </div>';
				content += '    <div class="customization_item">';
				var itemId = 'c' + this.ecommerce[i].name;
					content += '<span id="' + itemId + '_varpane">';

					var field = utui.customizations_template.util.buildSelect({item: itemId, container: container, id: 100005, stylefloat: 'none', showvars: 'none,js,js_page,cp,qp,meta,va'});
					content += utui.ui.template.form.validationWrapper(field, itemId);

					content += '</span>';

				content += '    </div>';
				content += '    <div class="customization_itemright">_c' + this.ecommerce[i].name + '</div>';
				content += '  </div>';
			}
		}

        //list separator
        content += '  <div class="customization_div highlight-on-hover" id="' + container + '_listtype_tooltip" title="' + localize.t('tiq.ext.how_variables_are_tagged') + '">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.list_variables_type') + ' </div>';
        content += '    <div class="customization_item">';
        content += '        <select id="listtype" name="listtype" style="float:left" onchange="utui.customizations_template[100005].showSeparatorText(\'' + container + '\')">';
        content += '        <option value="array">' + localize.t('tiq.ext.array') + '</option>';
        content += '        <option value="string">' + localize.t('tiq.ext.string') + '</option>';
        content += '        </select>';
        content += '      <div class="customization_item" id="' + container + '_separatorcontainer" style="display:none" title="' + localize.t('tiq.ext.this_is_the_token') + '">';
        content += '        <div class="customization_label" style="float:left"> ' + localize.t('tiq.ext.separator') + ' </div>';
        content += '        <input type="text" id="separator" name="separator" value="," size="2" style="float:left">';
        content += '      </div>';
        content += '    </div>';
        content += '  </div>';

		//use unit or total price
		content += '  <div class="customization_div highlight-on-hover" style="clear:both" align="center" id="' + container + '_pricetype_tooltip" title="' + localize.t('tiq.ext.select_the_corresponding_price') + '">';
		content += '    Prices are in:';
		content += '      <input type="radio" id="pricetype" name="pricetype" value="unit" checked>' + localize.t('tiq.ext.unit_price');
		content += '      <input type="radio" id="pricetype" name="pricetype" value="line">' + localize.t('tiq.ext.line_price');
		content += '  </div>';
		content += '</div>';

			content += '</div>';
		content += '</div>';

		tooltipObj[container + '_pricetype_tooltip'] = { gravity: 'e' };
		tooltipObj[container + '_listtype_tooltip'] = { gravity: 'e' };
		tooltipObj[container + '_separatorcontainer'] = { gravity: 's' };

		$('#customizations_' + container + '_content').html(content);

		// Conversion to Select2
		for (var i = 0; i < this.ecommerce.length; i++) {
			dsapi.convertSelectListToSelect2('c'+this.ecommerce[i].name, true);
		}

		$('#' + container + '_titlelabel').html(utui.config.customizationList[100005].title);
		$('#separator').val(obj.separator);
		$('#listtype').val(obj.listtype);
		$('input[name="pricetype"]')[(obj.pricetype == 'line') ? 1 : 0].checked = true;
		$('input[name="totalcalculate"]')[(obj.totalcalculate == 'yes') ? 0 : 1].checked = true;
		this.showSeparatorText(container);

		for (var i = 0; i < this.ecommerce.length; i++) {
			var itemId = 'c'+this.ecommerce[i].name;

			if(typeof obj[itemId] !== 'undefined') {
				$('#' + itemId).select2('val', obj[itemId]);
			}
		}

		utui.util.addTooltip(tooltipObj);
	},
	show: function (container) {},
	showSeparatorText: function (container) {
		var value = $('#listtype option:selected').val();
		if (value == 'string') {
			$('#' + container + '_separatorcontainer').show().focus();
		} else {
			$('#' + container + '_separatorcontainer').hide();
		}
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key.indexOf('c') === 0) {
					if(value === 'none') {
						continue;
					}
					else if(value !== '' && !dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}
			}
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//TASK Customization 100006 - Domain Based Deployment
//TASK TY: Error handling (check for blank values, duplicates, and cases where a Dev matches a QA)
//TASK TY: Add a comment that everything else is assumed to be a production domain (add this in the 'notes'?)
utui.customizations_template[100006] = {
	id: 100006,
	template: {
		main: function(extensionObj) {
			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += this.getDevDeploymentList(extensionObj, dynamic);
						v += this.getQADeploymentList(extensionObj, dynamic);

					v += '</div>';
				v += '</div>';

			return v;
		},
		getDevDeploymentList: function(extensionObj, dynamic) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.dev_domains')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						for (var i = dynamic.length - 1; i >= 0; i--) {
							if(dynamic[i][0].hasOwnProperty('devdomain')) {
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId+'_devdomain', '');
							}
						};
					v += '</div>';
				v += '</div>';
			return v;
		},
		getQADeploymentList: function(extensionObj, dynamic) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.qa_domains')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						for (var i = dynamic.length - 1; i >= 0; i--) {
							if(dynamic[i][0].hasOwnProperty('qadomain')) {
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId+'_qadomain', '');
							}
						};
					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		this.container = container;
		var obj = exapi.getObjectByExtensionId(container);


		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);


		//this.container = container;
		var content = '';
		content += '<div class="customization_padded">';

		// Development domains
		content += '  <div>';
		content += '    <div class="customization_div">';
		content += '      <div class="customization_labelwide">' + localize.t('tiq.ext.dev_domains') + '</div>';
		content += '      <div class="customization_item">';
		content += '        <div id="' + container + '_dev" class="customization_item" style="min-width:500px"></div>';
		content += '      </div>';
		content += '    </div>';
		content += '  </div>';

		// QA domains
		content += '  <div>';
		content += '    <div class="customization_div">';
		content += '      <div class="customization_labelwide">' + localize.t('tiq.ext.qa_domains') + '</div>';
		content += '      <div class="customization_item">';
		content += '        <div id="' + container + '_qa" class="customization_item" style="min-width:500px"></div>';
		content += '      </div>';
		content += '    </div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		var found_dev = false;
		var found_qa = false;

		if (fillFlag) {
			var obj = utui.data.customizations[container];

			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_devdomain') >= 0) {
					found_dev = true;
					var instanceId = i.substring(0, i.indexOf('_devdomain'));
					var itemId = utui.customizations_template[100006].addDomain(container, 'dev', instanceId);
					$('#' + itemId).val(obj[i]);
				}
				else if (i.indexOf('_qadomain') >= 0) {
					found_qa = true;
					var instanceId = i.substring(0, i.indexOf('_qadomain'));
					var itemId = utui.customizations_template[100006].addDomain(container, 'qa', instanceId);
					$('#' + itemId).val(obj[i]);
				}
			}
		}

		if (!found_dev) utui.customizations_template[100006].addDomain(container, 'dev');
		if (!found_qa) utui.customizations_template[100006].addDomain(container, 'qa');

		if(cb) cb();
	},
	addDomain: function (container, environment, instanceId) {
		var id = instanceId || utui.util.getContainerId();

		var content = '';

		//Domain
		var itemId = id + '_' + environment;
		content += '<div id="' + itemId + '">';
		content += '    <input type="text" size="48" id="' + itemId + 'domain" name="' + itemId + 'domain" style="display:inline-block">';
		content += '     <button onclick="utui.customizations_template[100006].addDomain(\'' + container + '\',\'' + environment + '\')" class="btn btn-mini" title="' + localize.t('tiq.ext.add_domain') + '"><i class="icon-plus"></i></button>';
		content += '     <button onclick="if($(\'#' + itemId + '\').siblings().length>1){utui.customizations_template[100006].removeDomain(\'' + itemId + '\');utui.customizations_template[100006].validation(\'' + container + '\');}" class="btn btn-mini" title="' + localize.t('tiq.ext.remove_domain') + '"><i class="icon-minus"></i></button>';
		content += '</div>';
		content += '<div id="' + itemId + '_errordiv" style="float:right">';
		content += '<span id="' + itemId + 'domain' + '_varerror" class="js-error-field bg-danger required-container pull-right" style="display:none;">-</span>';
		content += '</div>';

		$('#' + container + '_' + environment).append(content);

		return itemId + 'domain';
	},
	removeDomain: function (container) {
		$('#' + container).remove();
		$('#' + container + '_errordiv').remove();

		delete utui.data.customizations[this.container][container+'domain'];

		utui.customizations.updateExtensionData(this.container);
	},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


//TASK Customization 100007  Channel Flow (previously Marketing Attribution)
utui.customizations_template[100007] = {
	id: 100007,
	aceEditor: {},
    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editor
    //------------------------------------------------------------------------------------------------------------------
    destructor: function(){
        if (utui.customizations_template[100007].aceEditor){
            _.each(utui.customizations_template[100007].aceEditor,function(ae){
                ae.destroy();
            });
        }
    },

	template: {
		main: function(extensionObj) {
			var conditions = utui.util.interpret.extension.condition.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					v += '<h3>'+localize.t('tiq.ext.channels')+'</h3>';
					v += '<div class="section-padded">';
						v += this.getConditionalChannelsView(conditions);
					v += '</div>';

					v += '<h3>'+localize.t('tiq.ext.attribution_period_population')+'</h3>';
					v += '<div class="section-padded">';
						v += this.getAttributionPeriods(extensionObj);
					v += '</div>';

					v += '<h3>'+localize.t('tiq.ext.conversion')+'</h3>';
					v += '<div class="section-padded">';
						v += this.getConversionView(extensionObj);
					v += '</div>';

					v += '</div>';
				v += '</div>';

				// v += this.rules(extensionObj);
			return v;
		},
		getConditionalChannelsView: function(formattedObj) {
			var content = '',
				contentHeader = '',
				orCondition,
				andCondition,
				objectKey,
				exclusionInputMap = ['defined', 'notdefined', 'populated', 'notpopulated'],
				className = '';

			content += '<div class="condition-container">';

			for (var i = formattedObj.length - 1; i >= 0; i--) {
				orCondition = formattedObj[i];

				if(!utui.util.interpret.isOrConditionValid(orCondition)) continue;


				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					if(andCondition._instanceId === '0') {
						channelKey = andCondition._parentInstanceId + '_channelname';
						categoryKey = andCondition._parentInstanceId + '_category';

						contentHeader = '<div class="condition-custom">';
							contentHeader += '<div class="row-fluid">';
								contentHeader += '<div class="span4">';
									contentHeader += '<span class="inline-label">'+localize.t('tiq.ext.channel_name')+'</span> '+utui.ui.template.form.readonly.inputItemView(null, channelKey, '');
								contentHeader += '</div>';
								contentHeader += '<div class="span8">';
									contentHeader += '<span class="inline-label">'+localize.t('tiq.ext.category')+'</span> '+utui.ui.template.form.readonly.inputItemView(null, categoryKey, '');
								contentHeader += '</div>';
							contentHeader += '</div>';
						contentHeader += '</div>';
					}
				}


				content += contentHeader;

				content += '<div class="row-fluid">';
				content += '<div class="span12">';

				content += '<div class="condition" style="padding-left:12px; margin-bottom:32px">';

				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					content += '<div class="condition-and">';

					keyMapping = utui.util.interpret.getConditionalKeyMapping(andCondition);

					for (var key in keyMapping) {
						if(!keyMapping.hasOwnProperty(key)) continue;

						if(key.indexOf('_') === 0) continue; // ignore private keys

						if(andCondition._instanceId === "0") {
							objectKey = andCondition._parentInstanceId + '_' + keyMapping[key];
						}
						else {
							objectKey = andCondition._parentInstanceId + '_' + andCondition._instanceId + '_' + keyMapping[key];
						}

						// (2) Operator
						if(key == 1) {
							// TODO: interpret operator values
							className = "condition-cell-operator";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, ruleapi.condition.interpretOperatorValue(andCondition[keyMapping[1]]))+'</span>';
						}
						// (3) Value
						else if(key == 2) {
							className = "condition-cell-value";

							if(!~exclusionInputMap.indexOf(andCondition[keyMapping[1]])) {
								content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[2]])+'</span>';

								if(ruleapi.condition.isOperatorIgnoreCase(andCondition[keyMapping[1]])) {
									content += '<span class="condition-strict-case inline-label">'+localize.t('tiq.rules.case_insensitive')+'</span>';
								}
							}
						}
						// (1) Input
						else {
							className = "condition-cell-input";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[3]])+'</span>';
						}
					};

					content += '</div>';
				};

				content += '</div>';
				content += '</div>';
				content += '</div>';
			};

			content += '</div>';

			return content;
		},
		getAttributionPeriods: function(extensionObj) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.attribution_period')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'persistencetext', '');
						v += utui.ui.template.form.readonly.inputItemView(null, 'persistence', '');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.populate_data_values_on')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'populaterule', '');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.clear_persisted_values')+'</span>';
					v += '</div>';
					v += '<div class="span4">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'clear', '');
					v += '</div>';
				v += '</div>';
			return v;
		},
		getConversionView: function(extensionObj) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.conversion_value_source')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'conversionvariable', '');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.originator_credit')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'originatorcredit', '', '%');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.influencer_credit')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'influencercredit', '', '%');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.closer_credit')+'</span>';
					v += '</div>';
					v += '<div class="span4">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'closercredit', '', '%');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.include_originator_influencer')+'</span>';
					v += '</div>';
					v += '<div class="span4">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'originatorinfluencer', '');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.include_closer_as_influencer')+'</span>';
					v += '</div>';
					v += '<div class="span4">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'closerinfluencer', '');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.allow_repeat_channel_responses')+'</span>';
					v += '</div>';
					v += '<div class="span4">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'repeatresponse', '');
					v += '</div>';
				v += '</div>';

				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.custom_handling')+'</span>';
					v += '</div>';
					v += '<div class="span4">';
						v += utui.ui.template.form.readonly.inputItemView(null, 'code', '');
					v += '</div>';
				v += '</div>';
			return v;
		},
		rules: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.condition')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += utui.customizations_template.shared.getConditionalView(utui.util.interpret.extension.condition.toFormatted(extensionObj));
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			// **
			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};


		if(obj.persistence === 'days') {
			$data('persistencetext').show();
		} else {
			$data('persistencetext').hide();
		}

	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	editor: {},
	index: 0,
	container: '',
	fillData: function (container, fillFlag, cb) {
		this.container = container;

		var obj = exapi.getObjectByExtensionId(container),
			tooltipObj = {},
			isInitialized = false;

        utui.customizations_template[100007].channelAceEditorEditStart = false;
		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------


		var content = '<input type="hidden" id="scope" name="scope" value="' + obj.scope + '">';
			content += '<div id="channeltabs" style="min-width:720px">';
			content += '  <ul>';
			content += '    <li><a href="#' + container + '_channeldefinition">' + localize.t('tiq.ext.channels') + '</a></li>';
			content += '    <li><a href="#' + container + '_channelpopulation">' + localize.t('tiq.ext.attribution_period_population') + '</a></li>';
			content += '    <li><a href="#' + container + '_channelconversion">' + localize.t('tiq.ext.conversion') + '</a></li>';
			content += '  </ul>';
			content += '  <div id="' + container + '_channeldefinition" class="relative">'
			content += '    <div style="position:absolute;top:5px;right:5px;z-index:1;"><button id="button_addchannel">' + localize.t('tiq.ext.add_channel') + '</button></div>';
			content += '    <div id="' + container + '_channelcontainer"></div>';
			content += '  </div>';
			content += '  <div id="' + container + '_channelpopulation"></div>';
			content += '  <div id="' + container + '_channelconversion"></div>';
			content += '</div>';
		$('#customizations_' + container + '_content').html(content);

		$('#channeltabs').tabs();


		var populationContent = "";
		populationContent += '<div class="customization_padded" style="margin:5px; padding:10px">';
		populationContent += '  <div>';
		populationContent += '    <div class="customization_div">';
		populationContent += '        <div class="customization_labelwide">' + localize.t('tiq.ext.attribution_period') + '</div>';
		populationContent += '        <div class="customization_item">';
		populationContent += '          <input type="text" size="1" id="persistencetext" name="persistencetext" style="display:none">';
		populationContent += '          <select id="persistence" name="persistence" onchange="utui.customizations_template[100007].showPersistenceText(\'' + container + '\')">';
		populationContent += '          <option value="session">' + localize.t('tiq.ext.same_session') + '</option>';
		populationContent += '          <option value="visitor">' + localize.t('tiq.ext.visitor') + '</option>';
		populationContent += '          <option value="days">' + localize.t('tiq.ext.days') + '</option>';
		populationContent += '          </select>';
		populationContent += '        </div>';
		populationContent += '    </div>';
		populationContent += '    <div class="customization_div">';
		populationContent += '        <div class="customization_labelwide">' + localize.t('tiq.ext.data_sources') + '</div>';
		populationContent += '        <div class="customization_item">';
		populationContent += 			localize.t('tiq.ext.populate_data_values_on') + ' ';

		var field = '<select id="populaterule" name="populaterule" placeholder="'+localize.t('tiq.ext.select_a_loadrule')+'"></select>';
		populationContent += utui.ui.template.form.validationWrapper(field, 'populaterule');

		populationContent += '        </div>';
		populationContent += '      <div><button onclick="utui.loadrules.view.showAddMore(\'create\',function(){utui.customizations_template[100007].setPopulateRules()})" class="btn btn-mini" style="float:left;margin-top:2px"><i class="icon-plus" id="' + container + '_addmore_tooltip" title="' + localize.t('tiq.ext.click_here_to_create_loadrule') + '"></i></button></div>';
		populationContent += '    </div>';
		populationContent += '    <div class="customization_div">';
		populationContent += '        <div class="customization_labelwide"></div>';
		populationContent += '        <div class="customization_item"><input type="checkbox" id="clear" name="clear" onchange="utui.customizations_template[100007].toggleValue(\'clear\');">' + localize.t('tiq.ext.clear_persisted_values') + '</div>';
		populationContent += '    </div>';
		populationContent += '  </div>';
		populationContent += '</div>';



		$('#' + container + '_channelpopulation').append(populationContent);
		$('#populaterule').on('change', function () {
			utui.customizations_template[100007].showEditPopulateRule(container)
		});
		this.setPopulateRules();



		var conversionContent = "";
		conversionContent += '<div id="' + container + '_accordion" class="customization_padded">';
		conversionContent += '  <div class="padded">';
		conversionContent += '    <div class="customization_div">';
		conversionContent += '        <div class="customization_labelwide">' + localize.t('tiq.ext.conversion_value_source') + '</div>';
		conversionContent += '        <div class="customization_item" id="conversionvariablepane">';
		var field = utui.customizations_template.util.buildSelect({
			item: 'conversionvariable',
			container: container,
			id: 100007,
			stylefloat: 'none',
			showvars: 'js,js_page,cp,qp,meta,custom,va'
		});

		conversionContent += utui.ui.template.form.validationWrapper(field, 'conversionvariable');

		conversionContent += '        </div>';
		conversionContent += '    </div>';
		conversionContent += '    <div class="customization_div">';
		conversionContent += '        <div class="customization_labelwide">' + localize.t('tiq.ext.originator_credit') + '</div>';
		conversionContent += '        <div class="customization_item">';
		conversionContent += '          <select id="originatorcredit" name="originatorcredit">';
		for (var i = 0; i <= 100; i++) {
			conversionContent += '<option value="' + i + '">' + i + ' %</option>';
		}
		conversionContent += '          </select>';
		conversionContent += '        </div>';
		conversionContent += '    </div>';
		conversionContent += '    <div class="customization_div">';
		conversionContent += '        <div class="customization_labelwide">' + localize.t('tiq.ext.influencer_credit') + '</div>';
		conversionContent += '          <span class="customization_item">';
		conversionContent += '            <select id="influencercredit" name="influencercredit">';
		for (var i = 0; i <= 100; i++) {
			conversionContent += '<option value="' + i + '">' + i + ' %</option>';
		}
		conversionContent += '          </select>';
		conversionContent += '          </span>';
		conversionContent += '      </div>';
		conversionContent += '      <div class="customization_div">';
		conversionContent += '          <div class="customization_labelwide">' + localize.t('tiq.ext.closer_credit') + '</div>';
		conversionContent += '          <div class="customization_item">';
		conversionContent += '            <select id="closercredit" name="closercredit">';
		for (var i = 0; i <= 100; i++) {
			conversionContent += '<option value="' + i + '">' + i + ' %</option>';
		}
		conversionContent += '            </select>';
		conversionContent += '          </div>';
		conversionContent += '      </div>';
		conversionContent += '    </div>';

		conversionContent += '    <div class="customization_div">';
		conversionContent += '      <div class="customization_labelwide">&nbsp;</div>';
		conversionContent += '      <div class="customization_item">';
		conversionContent += '         <span class="customization_item" style="margin-top:3px;clear:both">';
		conversionContent += '            <input id="originatorinfluencer" name="originatorinfluencer" type="checkbox" onchange="utui.customizations_template[100007].toggleValue(\'originatorinfluencer\');"><label for="originatorinfluencer">' + localize.t('tiq.ext.include_originator_influencer') + '</label>';
		conversionContent += '         </span>';
		conversionContent += '         <div style="margin-top:5px;margin-left:2px;float:left" id="originatorinfluencer_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100007_originatorinfluencer + '"></div>';
		conversionContent += '         <span class="customization_item" style="margin-top:3px;clear:both">';
		conversionContent += '            <input id="closerinfluencer" name="closerinfluencer" type="checkbox" onchange="utui.customizations_template[100007].toggleValue(\'closerinfluencer\');"><label for="closerinfluencer">' + localize.t('tiq.ext.include_closer_as_influencer') + '</label>';
		conversionContent += '         </span>';
		conversionContent += '         <div style="margin-top:5px;margin-left:2px;float:left" id="closerinfluencer_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100007_closerinfluencer + '"></div>';
		conversionContent += '         <span class="customization_item" style="margin-top:3px;clear:both">';
		conversionContent += '            <input id="repeatresponse" name="repeatresponse" type="checkbox" onchange="utui.customizations_template[100007].toggleValue(\'repeatresponse\');"><label for="repeatresponse">' + localize.t('tiq.ext.allow_repeat_channel_responses') + '</label>';
		conversionContent += '         </span>';
		conversionContent += '         <div style="margin-top:5px;margin-left:2px;float:left" id="repeatresponse_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100007_repeatresponse + '"></div>';
		conversionContent += '      </div>';
		conversionContent += '    </div>';
		tooltipObj[container + '_originatorinfluencer_tooltip'] = {
			gravity: 'w'
		};
		tooltipObj[container + '_closerinfluencer_tooltip'] = {
			gravity: 'w'
		};
		tooltipObj[container + '_repeatresponse_tooltip'] = {
			gravity: 'w'
		};

		conversionContent += '    <div class="customization_div">';
		conversionContent += '      <div class="customization_labelwide">' + localize.t('tiq.ext.custom_handling') + ' </div>';
		conversionContent += '      <div style="float:left;margin-top:5px">';
		conversionContent += '        <div style="float:left" id="' + container + '_code_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100007_code + '"></div>';
		conversionContent += '        <button class="btn btn-mini" class="clickable" id="codepanetoggle">' + localize.t('tiq.ext.hide') + '</button>';
		conversionContent += '      </div>';
		conversionContent += '    </div>';

		conversionContent += '    <div id="codepane" class="customization_div">';
		conversionContent += '      <div id="channel-ext-ace-editor" class="ext-ace-edit-container"></div>';
        conversionContent += '      <textarea id="code" value="" name="code" style="display:none"></textarea>';
		conversionContent += '    </div>';

		conversionContent += '  </div>';
		conversionContent += '</div>';
		$('#' + container + '_channelconversion').append(conversionContent);


			// Conversion to Select2
			dsapi.convertSelectListToSelect2('conversionvariable', true);
			utui.ui.convertSelectListToSelect2('populaterule');

		$('#codepanetoggle').on('click', function () {
			utui.customizations_template[100007].toggleCodePane(container)
		});
		tooltipObj[container + '_code_tooltip'] = {
			gravity: 'w'
		};
		utui.util.addTooltip(tooltipObj);


		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_source') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			var itemId = utui.customizations_template[this.id].addChannel(container);
		}


		if (fillFlag) {

			$('#titlelabel').html(utui.config.customizationList[100007].title);
			$('#persistencetext').val(obj.persistencetext);
			$('#persistence').val(obj.persistence);
			$('#populaterule').select2('val', obj.populaterule || '');
			if (obj.clear == 'yes' || obj.clear == 'on') {
				$('#clear').prop('checked', true);
				$('#clear').val('yes');
			} else {
				$('#clear').val('no');
			}

			$('#conversionvariable').select2('val', obj.conversionvariable || '');
			$('#originatorcredit').val(obj.originatorcredit);
			$('#influencercredit').val(obj.influencercredit);
			$('#closercredit').val(obj.closercredit);
			if (obj.originatorinfluencer == 'yes' || obj.originatorinfluencer == 'on') {
				$('#originatorinfluencer').prop('checked', true);
				$('#originatorinfluencer').val('yes');
			} else {
				$('#originatorinfluencer').val('no');
			}
			if (obj.closerinfluencer == 'yes' || obj.closerinfluencer == 'on') {
				$('#closerinfluencer').prop('checked', true);
				$('#closerinfluencer').val('yes');
			} else {
				$('#closerinfluencer').val('no');
			}
			if (obj.repeatresponse == 'yes' || obj.repeatresponse == 'on') {
				$('#repeatresponse').prop('checked', true);
				$('#repeatresponse').val('yes');
			} else {
				$('#repeatresponse').val('no');
			}
			this.showPersistenceText(container);


			for (var i in utui.util.getVars(obj, 2)) {

				if (i.indexOf('_source') > -1 && i.split('_').length <= 2) {
					var conditionId = i.substring(0, i.indexOf('_source'));
					var itemId = utui.customizations_template[100007].addChannel(container, conditionId);
					$('#' + itemId + '_source').val(obj[i]);
					$('#' + itemId + '_source').select2('val', obj[i] || '');

					$('#' + itemId + '_channelname').val(obj[i.replace('_source', '_channelname')]);
					$('#' + itemId + '_channelname').select2('val', obj[i.replace('_source', '_channelname')] || '');

					$('#' + itemId + '_category').val(obj[i.replace('_source', '_category')]);
					$('#' + itemId + '_category').select2('val', obj[i.replace('_source', '_category')] || '');

					$('#' + itemId + '_filtertype').val(obj[i.replace('_source', '_filtertype')]);
					$('#' + itemId + '_filtertype').select2('val', obj[i.replace('_source', '_filtertype')] || '');

					$('#' + itemId + '_filter').val(obj[i.replace('_source', '_filter')]);
					$('#' + itemId + '_filter').select2('val', obj[i.replace('_source', '_filter')] || '');

					utui.customizations_template.util.operatorSelectHandler(itemId);

					// process the "AND" conditions
					for (var i in utui.util.getVars(obj, 2)) {
						if (i.indexOf('_source') >= 0 && i.split('_').length > 2 && i.indexOf(conditionId) == 0) {

							var addConditionId = i.split('_')[1];
							var itemAddId = utui.customizations_template[100007].addChannelCondition(itemId, addConditionId);

							$('#' + itemAddId + '_source').val(obj[i]);
							$('#' + itemAddId + '_source').select2('val', obj[i] || '');

							$('#' + itemAddId + '_filtertype').val(obj[i.replace('_source', '_filtertype')]);
							$('#' + itemAddId + '_filtertype').select2('val', obj[i.replace('_source', '_filtertype')] || '');

							$('#' + itemAddId + '_filter').val(obj[i.replace('_source', '_filter')]);
							$('#' + itemAddId + '_filter').select2('val', obj[i.replace('_source', '_filter')] || '');

							utui.customizations_template.util.operatorSelectHandler(itemAddId);
						}
					}
				}
			}

            if (obj.code && obj.code.length > 0) {
                $('#code').val(obj.code);
                $('#codepanetoggle').html(localize.t('tiq.ext.hide'));
            } else {
                $('#codepane').hide();
                $('#codepanetoggle').html(localize.t('tiq.ext.show'));
            }

        } else {
            this.addChannel(container);
            $('#codepane').hide();
            $('#codepanetoggle').html(localize.t('tiq.ext.show'));
        }
        $('#button_addchannel').on('click', function () {
            utui.customizations_template[100007].addChannel(container)
        });
        // $("#" + container).find(":button").button();
        //------------------------------------------------------------------------------------------------------------------
        // Create the Ace Editor
        //------------------------------------------------------------------------------------------------------------------
        utui.customizations_template[100007].aceEditor['code'] = ace.edit("channel-ext-ace-editor");
        var chnlEd = utui.customizations_template[100007].aceEditor['code'];
        chnlEd.$blockScrolling = Infinity;
        chnlEd.setOptions({
            maxLines : 50,
            mode : "ace/mode/javascript",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });

        chnlEd.setValue("");
        chnlEd.clearSelection();

        chnlEd.on("blur", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100007].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
        });

        chnlEd.on("change", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100007].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
            if (utui.customizations_template[100007].channelAceEditorEditStart){
                $('#code').trigger('change');
			}
        });

        chnlEd.on("focus", function(e){
            utui.customizations_template[100007].channelAceEditorEditStart = true;
        });

        chnlEd.setValue($('#code').val(),-1);

		this.setAlternateRows(container);

		// If imported, make editor read only
		if(exapi.isImported(container)) {
            chnlEd.setReadOnly(true);
		}

		if(cb) cb();
	},
	setPopulateRules: function (editFlag) {
		var rules = utui.util.cp(utui.loadrules.config);
		var container = utui.customizations_template[100007].container;
		delete rules[0];
		var obj = utui.data.customizations[container];
		if (editFlag && obj) {
			obj.populaterule = $('#populaterule :selected').val();
		}
		utui.loadrules.setLoadRulesSelect('populaterule', rules);
		if (obj && obj.populaterule) {
			$('#populaterule').val(obj.populaterule);
		}
		utui.customizations_template[100007].showEditPopulateRule(container);
	},
	showEditPopulateRule: function (container) {
		var pr = $('#populaterule').val();
		if (pr != 'all') {
			$('#editpopulaterule').show();
		} else {
			$('#editpopulaterule').hide();
		}
	},
	addChannel: function (container, instanceId) {
		++this.index;
		var id = instanceId || utui.util.getContainerId();
		var content = '';
		if ($('#' + container + '_channelcontainer').children('div').length > 0) {
			content += '<hr align="center" width="96%" style="margin-bottom: 8px;" id="' + id + '_hrule">';
		}
		content += '<div id="' + id + '_channelcontainer">';

		//Channel Name
		content += '<div class="customization_div">';
		content += '  <div class="customization_labelwide">' + localize.t('tiq.ext.channel_name') + '</div>';
		content += '  <div class="customization_item"><input type="text" id="' + id + '_channelname" name="' + id + '_channelname" value="" size="24"></div>';

		if ($('#' + container + '_channelcontainer').children('div').length > 0) {
			if (this.index > 1) {
				var removeChannel = '{"template":"100007","action":"removeChannel","container":"' + id + '"}';
				content += '  <button data-action=\'' + removeChannel + '\' class="btn btn-mini ext-data-action js-action-removebtn alignright" style=""><i class="icon-minus"></i></button>';
			}
		}

		//Channel Category
		var itemId = id + '_category';
		content += '  <div class="customization_labelwide">' + localize.t('tiq.ext.category') + '</div>';
		content += '    <div class="customization_item">';
		content += '      <select id="' + _.escape(itemId) + '" name="' + _.escape(itemId) + '">"';
		content += '      <option value="affiliate">' + localize.t('tiq.ext.affiliate') + '</option>';
		content += '      <option value="displayads">' + localize.t('tiq.ext.display_ads') + '</option>';
		content += '      <option value="email">' + localize.t('tiq.ext.email') + '</option>';
		content += '      <option value="naturalsearch">' + localize.t('tiq.ext.natural_search') + '</option>';
		content += '      <option value="paidsearch">' + localize.t('tiq.ext.paid_search') + '</option>';
		content += '      <option value="socialmedia">' + localize.t('tiq.ext.social_media') + '</option>';
		content += '      <option value="sponsorships">' + localize.t('tiq.ext.sponsorships') + '</option>';
		content += '      <option value="other">' + localize.t('tiq.ext.other') + '</option>';
		content += '      </select>';
		content += '    </div>';
		content += '</div>';

		//Condition
		var itemId = id + '_source';
		content += '<div id="' + id + '_conditioncontainer">';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide" style="white-space:nowrap;">' + localize.t('tiq.ext.condition') + '</div>';
		content += '    <div class="customization_item">';
		content += '<span id="' + _.escape(itemId) + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: 100007,
			stylefloat: 'none',
			showvars: 'dom,js,js_page,cp,qp,va'
		});

		content += utui.ui.template.form.validationWrapper(field, itemId);


		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);
		itemId = id + "_filter";
		content += '    <input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '    </div>';
		var addChannelCondition = '{"template":"100007","action":"addChannelCondition","container":"' + id + '"}';
		content += '    <button data-action=\'' + addChannelCondition + '\' class="btn btn-mini ext-data-action js-action-addbtn" style=""><i class="icon-plus"></i></button>';
		content += '  </div>';
		content += '</div>';

		$('#' + container + '_channelcontainer').append(content);
		this.setAlternateRows(container);


			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_source', true);

		$('#' + id + '_channelname').focus();
		return id;
	},
	addChannelCondition: function (container, instanceId) {
		var id = container + '_' + (instanceId || utui.util.getContainerId());
		var itemId = id + '_source';
		var content = '<div id="' + id + '_conditioncontainer" class="customization_div"><div class="customization_labelwide" style="white-space:nowrap;">' + localize.t('tiq.ext.and_colon') + '</div>';
		content += '<div class="customization_item">';
		content += '<span id="' + itemId + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: 100007,
			stylefloat: 'none',
			showvars: 'dom,js,js_page,cp,qp,va'
		});

		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);
		itemId = id + "_filter";
		content += '<input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '</div>';

		var removeChannelCondition = '{"template":"100007","action":"removeChannelCondition","container":"' + id + '"}';
		content += '<button data-action=\'' + removeChannelCondition + '\' class="btn btn-mini ext-data-action js-action-removebtn" style=""><i class="icon-minus"></i></button>';
		content += '</div>';
		content += '</div>';

		$('#' + container + '_channelcontainer').append(content);


			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_source', true);

		$('#' + itemId).focus();

		return id;
	},
	removeChannel: function (container) {
		$('#' + container + '_channelcontainer').remove();
		$('#' + container + '_hrule').remove();
		var channel = utui.data.customizations[this.container];
    
    _.each(channel, function(value,key){
    	
    	//covers both initial condition & AND conditions
      if (key.indexOf(container) > -1) {
      	delete channel[key];
			}
      
    });

		this.setAlternateRows(utui.util.getContainerIdFromInputId(container));
	},
	removeChannelCondition: function (container) {
		$('#' + container + '_conditioncontainer').remove();

		delete utui.data.customizations[this.container][container + '_filter'];
		delete utui.data.customizations[this.container][container + '_filtertype'];
		delete utui.data.customizations[this.container][container + '_source'];

		utui.customizations.updateExtensionData(this.container);
	},
	showPersistenceText: function (container) {
		var value = $('#persistence option:selected').val();
		if (value == 'days' || value == 'hours') {
			$('#persistencetext').show().focus();
		} else {
			$('#persistencetext').hide();
		}
	},
	show: function (container) {},
	toggleValue: function (item) {
		if ($('#' + item).is(':checked')) {
			$('#' + item).val('yes');
		} else {
			$('#' + item).val('no');
		}
	},
	toggleCodePane: function (container) {
		if ($('#codepane').is(':visible')) {
			$('#codepanetoggle').html(localize.t('tiq.ext.show'));
			$('#codepane').hide();
		} else {
			$('#codepanetoggle').html(localize.t('tiq.ext.hide'));
			$('#codepane').show();
			utui.customizations_template[100007].aceEditor['code'].focus();
		}
	},
	setAlternateRows: function (container) {
		var arr = $('#' + container + '_channelcontainer').children('div');
		for (var i = 0; i < arr.length; i++) {
			if (i % 2 == 0) {
				$('#' + arr[i].id).removeClass('ui-alternate-background');
			} else {
				$('#' + arr[i].id).addClass('ui-alternate-background');
			}
		}
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'populaterule') {
					if(value === 'all') {
						continue;
					} else if(value === '' || $.isEmptyObject(utui.data.loadrules[value])) {
						message = localize.t('tiq.validation.message.assign_loadrule');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
				}
			}

		}

		if(dynamicConfigCollection.length > 0) {
		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.source === 'textvalue') {
						// do nothing
						continue;
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}

				};
			};

		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}

//TASK Customization 100010 - Report Pixel
//TASK TY: Add a validation button that sends a request (validate URL location)
utui.customizations_template[100010] = {
	id: 100010,
	fillData: function (container) {
		var content = '';
		content += '<div class="customization_padded">';

		// Base URL
		content += '  <div class="customization_div" >';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.base_url') + '</div>';
		content += '    <div class="customization_item">';
		content += '      <input type="text" size="64" id="' + container + '_baseurl" name="' + container + '_baseurl" style="float:left">';
		content += '    </div>';
		content += ' </div>';

		content += '</div>';
		$('#customizations_' + container + '_content').html(content);

		var obj = utui.data.customizations[container];
		$('#' + container + '_titlelabel').html(utui.config.customizationList[100010].title);
		$('#' + container + '_baseurl').val(obj['baseurl']);
	},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


//Customization 100011 - Javascript Code
utui.customizations_template[100011] = {
	id: 100011,
	editor: {},
	template: {
		main: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

							v += '<div class="row-fluid">';
								v += '<div class="span12">';
									v += '<span class="inline-label">'+localize.t('tiq.ext.scope_vars')+'</span>';
									v += utui.ui.template.form.readonly.inputItemView(null, 'scopevars', '');
								v += '</div>';
							v += '</div>';

						v += '<div class="section-padded-top-bottom">';
							v += '<div class="row-fluid">';
								v += '<div class="span12">';
									v += '<span class="inline-label">'+localize.t('tiq.ext.code')+'</span>';
									v += utui.ui.template.form.readonly.codeItemView(null, 'code', '');
								v += '</div>';
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';

			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},
	fillData: function (container) {
		var obj = exapi.getObjectByExtensionId(container),
			extId = container,
			tooltipObj = {},
			self = this,
			content = '';

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);

		content += '<div class="customization_padded">';

			content += '<div class="container-fluid">';
				content += '<div class="row-fluid">';

					content += '<div class="span12">';
						content += '<label>' + localize.t('tiq.ext.scope_vars') + ' ';
							content += '<input type="text" value="" id="scopevars" name="scopevars" size="64">';
							content += '<div style="margin-left: 72px; margin-bottom: 8px;">' + localize.t('tiq.ext.optional') + ' ' + utui.tooltip.customizations.customization_100011_scope+'</div>';
						content += '</label>';
					content += '</div>';

				content += '</div>';
				content += '<div class="row-fluid">';
					content += '<div class="span12">';

						content += '<div id="' + container + '" class="cm-js-extension">';
							content += '<div style="height:100%; width:100%">';
								content += '<textarea id="code" value="" name="code"></textarea>';
							content += '</div>';
						content += '</div>';

					content += '</div>';
				content += '</div>';


				if(obj.hasOwnProperty('output')) {
					content += '<div class="row-fluid">';
						content += '<div class="span12">';

							content += '<label>' + localize.t('tiq.ext.output_variables') + ' ';
								content += '<input type="text" value="" id="output" name="output" size="64">';
							content += '</label>';

						content += '</div>';
					content += '</div>';
				}

			content += '</div>';

		content += '</div>';

		$('#customizations_' + extId + '_content').html(content);

		tooltipObj[container+'_syntaxCheckBtn'] = { gravity: 'se' };
		tooltipObj['scopevars'] = { gravity: 'sw' };
		utui.util.addTooltip(tooltipObj);

		$('#code').val(obj.code);
		$('#output').val(obj.output);
		$('#scopevars').val(obj.scopevars);
		$('#title').val(obj.title);

		// Initialize CodeMirror
		this.editor[container] = CodeMirror.fromTextArea(document.getElementById('code'), {
			mode: 'javascript',
			indentWithTabs: true,
			tabMode: 'indent',
			matchBrackets: true,
			dragDrop: false,
			lineNumbers: true
		});

		this.editor[container].setValue($('#code').val());

		// onChange - set validation flag to be checked
		this.editor[container].setOption('onChange', function () {
			utui.data.customizations[container]._ignoreError = false;
			$('#code').val(utui.customizations_template[100011].editor[container].getValue());
		});

		this.editor[container].setOption('onCursorActivity', function () {
			$('#code').val(utui.customizations_template[100011].editor[container].getValue())
		});

		// onBlur - run validation
		this.editor[container].setOption('onBlur', function () {
			$('#code').val(utui.customizations_template[100011].editor[container].getValue())
			$('#code').trigger('change');
		});

		// If imported, make editor read only
		if(exapi.isImported(container)) {
			this.editor[container].setOption("readOnly","nocursor");
		}

		$('#scopevars').off('change').on('change', function (e) {
			$('#code').val(utui.customizations_template[100011].editor[container].getValue())
		});
	},
	show: function (container) {},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


//TASK Customization 100012 - SiteCatalyst Report Suite
utui.customizations_template[100012] = {
	id: 100012,
	template: {
		main: function(extensionObj) {

			var conditions = utui.util.interpret.extension.condition.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					if(conditions.length > 0)
						v += this.getConditionalEventsView(conditions);

					v += '</div>';
				v += '</div>';
			return v;
		},

		getConditionalEventsView: function(formattedObj) {
			var content = '',
				contentHeader = '',
				orCondition,
				andCondition,
				objectKey,
				exclusionInputMap = ['defined', 'notdefined', 'populated', 'notpopulated'],
				className = '';

			content += '<div class="condition-container">';

			for (var i = formattedObj.length - 1; i >= 0; i--) {
				orCondition = formattedObj[i];

				if(!utui.util.interpret.isOrConditionValid(orCondition)) continue;


				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					if(andCondition._instanceId === '0') {
						channelKey = andCondition._parentInstanceId + '_reportsuite';

						contentHeader = '<div class="condition-custom">';
							contentHeader += '<div class="row-fluid">';
								contentHeader += '<div class="span12">';
									contentHeader += '<span class="inline-label">'+localize.t('tiq.ext.report_suites')+'</span> '+utui.ui.template.form.readonly.inputItemView(null, channelKey, '');
								contentHeader += '</div>';
							contentHeader += '</div>';
						contentHeader += '</div>';
					}
				}


				content += contentHeader;

				content += '<div class="row-fluid">';
				content += '<div class="span12">';

				content += '<div class="condition" style="padding-left:12px; margin-bottom:32px">';

				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					content += '<div class="condition-and">';

					keyMapping = utui.util.interpret.getConditionalKeyMapping(andCondition);

					for (var key in keyMapping) {
						if(!keyMapping.hasOwnProperty(key)) continue;

						if(key.indexOf('_') === 0) continue; // ignore private keys

						if(andCondition._instanceId === "0") {
							objectKey = andCondition._parentInstanceId + '_' + keyMapping[key];
						}
						else {
							objectKey = andCondition._parentInstanceId + '_' + andCondition._instanceId + '_' + keyMapping[key];
						}

						// (2) Operator
						if(key == 1) {
							// TODO: interpret operator values
							className = "condition-cell-operator";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, ruleapi.condition.interpretOperatorValue(andCondition[keyMapping[1]]))+'</span>';
						}
						// (3) Value
						else if(key == 2) {
							className = "condition-cell-value";

							if(!~exclusionInputMap.indexOf(andCondition[keyMapping[1]])) {
								content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[2]])+'</span>';

								if(ruleapi.condition.isOperatorIgnoreCase(andCondition[keyMapping[1]])) {
									content += '<span class="condition-strict-case inline-label">'+localize.t('tiq.rules.case_insensitive')+'</span>';
								}
							}
						}
						// (1) Input
						else {
							className = "condition-cell-input";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[3]])+'</span>';
						}
					};

					content += '</div>';
				};

				content += '</div>';
				content += '</div>';
				content += '</div>';
			};

			content += '</div>';

			return content;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		this.container = container;

		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var content = ''
			content += '<div id="' + container + '_reportsuiteparent" class="customization_padded"></div>';

		$('#customizations_' + container + '_content').html(content);

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_reportsuite') > -1) {
				isInitialized = true;
				break;
			}
		}

		if(!isInitialized) {
			utui.customizations_template[100012].addReportSuite(container);
		}

		if (fillFlag) {

			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_reportsuite') >= 0) {
					var conditionId = i.substring(0,i.indexOf('_reportsuite'));

					var itemId = utui.customizations_template[100012].addReportSuite(container, conditionId);
					$('#' + itemId + '_reportsuite').val(obj[i]);
					$('#' + itemId + '_source').val(obj[i.replace('_reportsuite', '_source')]);
					$('#' + itemId + '_source').select2('val', obj[i.replace('_reportsuite', '_source')]);

					$('#' + itemId + '_filtertype').val(obj[i.replace('_reportsuite', '_filtertype')]);
					$('#' + itemId + '_filtertype').select2('val', obj[i.replace('_reportsuite', '_filtertype')]);

					$('#' + itemId + '_filter').val(obj[i.replace('_reportsuite', '_filter')]);
					$('#' + itemId + '_filter').select2('val', obj[i.replace('_reportsuite', '_filter')]);

					utui.customizations_template.util.operatorSelectHandler(itemId);
				}
			}
		} else {
			utui.customizations_template[100012].addReportSuite(container);
		}

		if(cb) cb();
	},
	addReportSuite: function (container, instanceId) {
		var id = instanceId || utui.util.getContainerId();

		var content = '';
		// CSV List of Report Suites
		content += '<div id="' + id + '_reportsuitecontainer">';
		content += '  <div  class="widget-container" style="display:inline-block;margin-top:10px">';
		content += '    <div  class="customization_div">';
		content += '      <div class="customization_labelwide">' + localize.t('tiq.ext.report_suites') + '</div>';
		content += '      <div class="customization_item">';
		content += '          <input type="text" size="64" id="' + id + '_reportsuite" name="' + id + '_reportsuite">';
		content += '      </div>';
		content += '    </div>';
		// Condition
		content += '    <div class="customization_div">';
		content += '      <div class="customization_labelwide" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
		content += '      <div class="customization_item" style="float:left">';
		var itemId = id + '_source';
		content += '<span id="' + itemId + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: 100012,
			stylefloat: 'none',
			showvars: 'dom,js,js_page,cp,qp,va'
		});
		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';
		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		content += '    <input type="text" size="32" id="' + itemId + '" name="' + itemId + '">';

		content += '      </div>';
		content += '    </div>';
		content += '  </div>';
		itemId = id + '_reportsuitecontainer';
		content += '  <div style="margin-top:15px; display:inline-block; vertical-align:top">';
		content += '    <button onclick="if($(\'#' + itemId + '\').siblings().length>=1){utui.customizations_template[100012].removeReportSuite(\'' + itemId + '\')}" class="btn btn-mini js-action-removebtn" title="' + localize.t('tiq.ext.remove_report_suite') + '"><i class="icon-minus"></i></button>';
		content += '    <button onclick="utui.customizations_template[100012].addReportSuite(\'' + container + '\')" class="btn btn-mini js-action-addbtn" title="' + localize.t('tiq.ext.add_report_suite') + '"><i class="icon-plus"></i></button>';
		content += '  </div>';
		content += '</div>';

		$('#' + container + '_reportsuiteparent').append(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2(id+'_source', true);

		return id;
	},
	removeReportSuite: function (container) {
		//TASK TY: Hide the minus if there is only one left (need to re-show on next add)
		$('#' + container).remove();

		//remove from the DO
		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}
		delete utui.data.customizations[this.container][container + '_reportsuite'];
		delete utui.data.customizations[this.container][container + '_source'];
		delete utui.data.customizations[this.container][container + '_filtertype'];
		delete utui.data.customizations[this.container][container + '_filter'];

		utui.customizations.updateExtensionData(this.container);
	},
	show: function (container) {},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}

//Customization 100013 - Previous Page
utui.customizations_template[100013] = {
	id: 100013,
	template: {
		main: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.page_value')+'</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'prevpage', '', localize.t('tiq.ext.value_mapped_to', { ds: 'previous_page_name' }));
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';

			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},
	fillData: function (container) {
		var obj = exapi.getObjectByExtensionId(container);
		var content = '';

		this.container = container;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);

		// -----------------------------------------------------------------
		content += '<div id="' + container + '" class="customization_padded">';
			content += '<div class="customization_div">';
				content += '<div class="customization_labelwide">' + localize.t('tiq.ext.page_value') + ' </div>';
				content += '<div class="customization_item">';
					content += '<span id="prevpage_varpane">';
					var field = utui.customizations_template.util.buildSelect({ item: 'prevpage', container: container, id: 100013, stylefloat: 'none', showvars: 'js,js_page,va' });
					content += utui.ui.template.form.validationWrapper(field, 'prevpage');
					content += '</span>';
				content += '</div>';
			content += '</div>';
		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2('prevpage', true);

		$('#' + container + '_titlelabel').html(utui.config.customizationList[100013].title);
		$('#prevpage').select2('val',obj.prevpage || '');
	},
	show: function (container) {},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'prevpage') {
					if(value === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}
			}
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//Customization 100014 - Google Analytics Social Interaction Tracking
// TASK TY: Should I take out the 'Google Analytics' from the title to make this shorter?
// TASK TY: Error checking - if this is set to active then at least one should be checked
// TASK TY: Question - do we want to enable this for every page or allow a condition (I think we automatically should check for like/tweet button on the page)
utui.customizations_template[100014] = {
	id: 100014,
	fillData: function (container, fillFlag, cb) {
		var fbVal, twVal,
			obj = exapi.getObjectByExtensionId(container);

		this.container = container;

		var facebookValue = (obj.hasOwnProperty('facebook')) ? obj['facebook'] : 'yes';
		var twitterValue = (obj.hasOwnProperty('twitter')) ? obj['twitter'] : 'yes';

		var content = '<div id="' + container + '" class="customization_padded">';
		content += '<div class="customization_div">';
		content += '<div class="customization_labelwide">' + localize.t('tiq.ext.enable_tracking') + '<br><br> </div>';
		content += '<div class="customization_item" style="margin-top:5px">';

		var itemId = 'facebook';
		content += '<label><input type="checkbox" id="' + itemId + '" name="' + itemId + '" value="'+facebookValue+'" ' + ((facebookValue == 'yes') ? 'checked' : '') + ' onchange="utui.customizations_template[100014].toggleValue(\'' + itemId + '\');">' + localize.t('tiq.ext.facebook') + '</label>';
		content += '<br><br>';

		itemId = 'twitter';
		content += '<label><input type="checkbox" id="' + itemId + '" name="' + itemId + '" value="'+twitterValue+'" ' + ((twitterValue == 'yes') ? 'checked' : '') + ' onchange="utui.customizations_template[100014].toggleValue(\'' + itemId + '\');">' + localize.t('tiq.ext.twitter') + '</label>';

		content += '</div></div>';

        content += '<div class="customization_div">';
        content += '<div class="customization_labelwide">' + localize.t('tiq.ext.note') + '<br><br> </div>';
        content += '<div class="customization_item" style="margin-top:5px">';
        content += localize.t('tiq.ext.tracking_will_only_be_enabled');

		content += '</div>';
		content += '</div>';
		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		if(cb) cb();
	},
	toggleValue: function (item) {
		if ($('#' + item).is(':checked')) {
			$('#' + item).val('yes');
		} else {
			$('#' + item).val('no');
		}
	},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


// Extension 100015 - Link Tracking (internal,external,download,social)
// TASK TY: Add "event_name" as an output for the this event (and all events)
utui.customizations_template[100015] = {
	id: 100015,
    aceEditor: {},
    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editor
    //------------------------------------------------------------------------------------------------------------------
    destructor: function(){
        if (utui.customizations_template[100015].aceEditor){
            _.each(utui.customizations_template[100015].aceEditor,function(ae){
                ae.destroy();
            });
        }
    },
	container: '',
	template: {
		main: function(extensionObj) {

			var dynamic = utui.util.interpret.extension.condition.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.event_name')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'eventname', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.track_all_links')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'all', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="ext-filters row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.inclusion_filters')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += this.getInclusionFiltersView(dynamic);
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.download_filter')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'downloadfilter', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.internal_link_filter')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'internalfilter', '');
						v += '</div>';
					v += '</div>';


					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.keep_query_string_in_link')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'keepqp', '');
						v += '</div>';
					v += '</div>';


					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.custom_handling')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.codeItemView(null, 'code', '');
						v += '</div>';
					v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		},
		getInclusionFiltersView: function(formattedObj) {
			var content = '',
				contentHeader = '',
				orCondition,
				andCondition,
				objectKey,
				exclusionInputMap = ['defined', 'notdefined', 'populated', 'notpopulated'],
				className = '';

			content += '<div class="condition-container">';

			for (var i = formattedObj.length - 1; i >= 0; i--) {
				orCondition = formattedObj[i];

				if(!utui.util.interpret.isOrConditionValid(orCondition)) continue;

				content += '<div class="row-fluid">';
				content += '<div class="span12">';

				content += '<div class="condition">';

				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					content += '<div class="condition-and">';

					keyMapping = utui.util.interpret.getConditionalKeyMapping(andCondition);

					for (var key in keyMapping) {
						if(!keyMapping.hasOwnProperty(key)) continue;

						if(key.indexOf('_') === 0) continue; // ignore private keys

						if(andCondition._instanceId === "0") {
							objectKey = andCondition._parentInstanceId + '_' + keyMapping[key];
						}
						else {
							objectKey = andCondition._parentInstanceId + '_' + andCondition._instanceId + '_' + keyMapping[key];
						}

						// (2) Operator
						if(key == 1) {
							// TODO: interpret operator values
							className = "condition-cell-operator";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, ruleapi.condition.interpretOperatorValue(andCondition[keyMapping[1]]))+'</span>';
						}
						// (3) Value
						else if(key == 2) {
							className = "condition-cell-value";

							if(!~exclusionInputMap.indexOf(andCondition[keyMapping[1]])) {
								content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[2]])+'</span>';

								if(ruleapi.condition.isOperatorIgnoreCase(andCondition[keyMapping[1]])) {
									content += '<span class="condition-strict-case inline-label">'+localize.t('tiq.rules.case_insensitive')+'</span>';
								}
							}
						}
						// (1) Input
						else {
							className = "condition-cell-input";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[3]])+'</span>';
						}
					};

					content += '</div>';
				};

				content += '</div>';
				content += '</div>';
				content += '</div>';
			};

			content += '</div>';

			return content;
		},
		setConfigurationView: function(extensionObj, dynamic) {
			var v = '';
				for (var i = 0; i < dynamic.length; i++) {
					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.inclusion_filters')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_source', '');
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_filter', '');
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_filtertype', '');
						v += '</div>';
					v += '</div>';
				};
			return v;
		},
		rules: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.condition')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += utui.customizations_template.shared.getConditionalView(utui.util.interpret.extension.condition.toFormatted(extensionObj));
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		if(obj.all === 'no') {
			$('#'+namespace).find('.ext-filters').show();
		}

		if(obj.all === 'yes') {
			$('#'+namespace).find('.ext-filters').hide();
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container);
		var itemId = 'eventname';
		var tooltipObj = {};
		var content = '';
		this.container = container;
        utui.customizations_template[100015].aceEditorEditStart = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------


		content = '<div id="' + container + '" class="customization_padded">';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.event_name') + ' </div>';
		content += '    <div class="customization_item">';
		content += '      <input type="text" id="' + itemId + '" name="' + itemId + '" value="link" size="16" style="float:left">';
		content += '      <div id="' + itemId + '_tooltip" class="ui-icon ui-icon-info" style="float:right;margin-top:5px" title="' + localize.t('tiq.ext.set_link_event_name') + '"></div>';
		tooltipObj[itemId + '_tooltip'] = {
			gravity: 'w'
		};

		content += '    </div>';
		content += '  </div>';
		itemId = 'all';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.track_all_links') + '</div>';
		content += '    <div class="customization_item" style="margin-top:2px">';
		content += '      <input type="radio" id="' + itemId + '" name="' + itemId + '" value="yes" checked onchange="utui.customizations_template[100015].showFilters(\'' + container + '\')">' + localize.t('tiq.ext.yes') + ' <input type="radio" id="' + itemId + '" name="' + itemId + '" value="no" onchange="utui.customizations_template[100015].showFilters(\'' + container + '\')">' + localize.t('tiq.ext.no');
		content += '    </div>';
		content += '  </div>';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide"> </div>';
		content += '    <div class="customization_item" id="' + container + '_filtercontainer" style="margin-top: 5px;display: none">';
		content += '      <div class="customization_labelwide">' + localize.t('tiq.ext.inclusion_filters') + '</div>';
		content += '      <div id="' + container + '_conditioncontainer" class="customization_div" style="width:590px">';
		itemId = 'source';
		content += '        <select id="' + itemId + '" name="' + itemId + '" style="float:left">';
		content += '          <option value="link_url">' + localize.t('tiq.ext.link_url') + '</option>';
		content += '          <option value="link_text">' + localize.t('tiq.ext.link_text') + '</option>';
		content += '        </select>';

		itemId = 'filtertype';
		content += '        <select id="' + itemId + '" name="' + itemId + '" style="float:left">';
		content += '          <option value="equals">' + localize.t('tiq.ext.equals') + '</option>';
		content += '          <option value="starts_with">' + localize.t('tiq.ext.starts_with') + '</option>';
		content += '          <option value="ends_with">' + localize.t('tiq.ext.ends_with') + '</option>';
		content += '          <option value="contains">' + localize.t('tiq.ext.contains') + '</option>';
		content += '          <option value="regular_expression">' + localize.t('tiq.ext.regular_expression') + '</option>';
		content += '        </select>';

		itemId = "filter";
		content += '        <input type="text" size="32" id="' + itemId + '" name="' + itemId + '" style="float:left;">';
		content += '        <button onclick="utui.customizations_template[100015].addFilterCondition(\'' + container + '\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';

		content += '      </div>';
		content += '    </div>';
		content += '  </div>';
		// TASK TY: Do we need to add this for SiteCatalyst?
		// Answer: Yes, we should remove the "Download Types" from SiteCatalyst Tag config.. and put it here instead.
		itemId = 'downloadfilter';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.download_filter') + ' </div>';
		content += '    <div class="customization_item">';
		content += '      <input type="text" id="' + itemId + '" name="' + itemId + '" value="exe,zip,wav,mp3,mov,mpg,avi,wmv,doc,pdf,xls" size="64" style="float:left">';
		content += '    </div>';
		content += '  </div>';
		itemId = 'internalfilter';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.internal_link_filter') + ' </div>';
		content += '    <div class="customization_item">';
		content += '      <input type="text" id="' + itemId + '" name="' + itemId + '" value="javascript:,yourwebsite.com,localhost" size="64" style="float:left">';
		content += '    </div>';
		content += '  </div>';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.link_url_output') + ' </div>';
		content += '    <div class="customization_item" style="margin-top:3px">';
		itemId = 'keepqp';
		content += '      <input type="checkbox" id="' + itemId + '" name="' + itemId + '" onchange="utui.customizations_template[100015].toggleValue(\'' + itemId + '\');">' + localize.t('tiq.ext.keep_query_string_in_link');
		content += '    </div>';
		content += '  </div>';

		itemId = 'code';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.custom_handling') + ' </div>';
		content += '    <div style="float:left;margin-top:5px">';
		content += '      <div style="float:left;margin-left:6px"><button class="clickable btn btn-mini" id="' + container + '_codepanetoggle"></button></div>';
		content += '      <div style="float:left" id="' + itemId + '_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100015_code + '"></div>';
		content += '    </div>';
		content += '  </div>';

		content += '  <div id="' + container + '_codepane" class="customization_div">';
		content += '     <div id="linktrack-ext-ace-editor" class="ext-ace-edit-container"></div>';
        content += '     <textarea id="' + itemId + '" value="" name="' + itemId + '"  style="display:none"></textarea>';
		content += '  </div>';
		content += '</div>';
		tooltipObj[itemId + '_tooltip'] = {
			gravity: 'w'
		};

		// TASK TY: Display a NOTE: Indicate that next step is to map the link_url (or link_text) to the appropriate variables.
		// TASK MIKE: need to auto create these variables when the extension is added

		$('#customizations_' + container + '_content').html(content);
		$('#' + container + '_codepanetoggle').off('click').on('click', function () {
			utui.customizations_template[100015].toggleCodePane(container)
		});

		var hideCodePane = false;

		if (fillFlag) {
			var obj = exapi.getObjectByExtensionId(container);

			$('#downloadfilter').val(obj.downloadfilter);
			$('#internalfilter').val(obj.internalfilter);
			$('#eventname').val(obj.eventname);
			$('input[name="all"]')[(obj.all == 'no') ? 1 : 0].checked = true;
			utui.customizations_template[100015].showFilters(container);
			if (obj.keepqp == 'yes') $('#keepqp').prop('checked', true).val('yes');
			else $('#keepqp').val('no');

			$('#source').val(obj.source);
			$('#filtertype').val(obj.filtertype);
			$('#filter').val(obj.filter);

            for (var i in utui.util.getVars(obj, 2)) {
                if (i.indexOf('_source') > -1) {
                    var instanceId = i.substring(0, i.indexOf('_source'));
                    var itemId = utui.customizations_template[100015].addFilterCondition(container, instanceId);
                    $('#'+itemId+'_source').val(obj[i]);
                    $('#'+itemId+'_filtertype').val(obj[i.replace('_source', '_filtertype')]);
                    $('#'+itemId+'_filter').val(obj[i.replace('_source', '_filter')]);
                }
            }
            if (obj.code && obj.code.length > 0) {
                $('#code').val(obj.code);
                $('#' + container + '_codepanetoggle').html(localize.t('tiq.ext.hide'));
            } else {
                hideCodePane = true;
            }
        } else {
            hideCodePane = true;
        }

		//------------------------------------------------------------------------------------------------------------------
		// Create the Ace Editor
		//------------------------------------------------------------------------------------------------------------------
        utui.customizations_template[100015].aceEditor['code'] = ace.edit("linktrack-ext-ace-editor");
        var lnTrkEd = utui.customizations_template[100015].aceEditor['code'];
        lnTrkEd.$blockScrolling = Infinity;
        lnTrkEd.setValue("");
        lnTrkEd.setOptions({
            maxLines : 50,
            mode : "ace/mode/javascript",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });
        lnTrkEd.clearSelection();

        lnTrkEd.on("blur", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100015].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
        });

        lnTrkEd.on("change", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100015].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
            if (utui.customizations_template[100015].aceEditorEditStart){
                $('#code').trigger('change');
			}
        });

        lnTrkEd.on("focus", function(e){
            utui.customizations_template[100015].aceEditorEditStart = true;
        });

        lnTrkEd.setValue($('#code').val(),-1);

		// If imported, make editor read only
        if(exapi.isImported(container)) {
            lnTrkEd.setReadOnly(true);
        }

		if (hideCodePane) {
			this.toggleCodePane(container);
		}
		utui.util.addTooltip(tooltipObj);

        if(cb) cb();
    },
    toggleCodePane: function (container) {
        if ($('#' + container + '_codepane').is(':visible')) {
            $('#' + container + '_codepanetoggle').html(localize.t('tiq.ext.show'));
            $('#' + container + '_codepane').hide();
        } else {
            $('#' + container + '_codepanetoggle').html(localize.t('tiq.ext.hide'));
            $('#' + container + '_codepane').show();
        }
    },
    toggleValue: function (item) {
        if ($('#' + item).is(':checked')) {
            $('#' + item).val('yes');
        } else {
            $('#' + item).val('no');
        }
    },
    showFilters: function (container) {
        if ($('#all:checked').val() == 'no') {
            $('#' + container + '_filtercontainer').show();
        } else {
            delete utui.customizations.validationMap[container];
            $('#' + container + '_filtercontainer').hide();
        }
    },
    addFilterCondition: function (container, instanceId) {
        var id = instanceId || utui.util.getContainerId();
        var itemId = id + '_source';
        var content = '<div id="' + id + '_conditioncontainer" class="customization_div">';

		// if this is the first filter condition
		// TASK TY: Move the stuff out of the initialization and put them here for the first filter condition item
		// if this is the second or later filter condition
		content += '<div class="customization_labelwide">' + localize.t('tiq.ext.or') + '</div>';
		content += '<div class="customization_item">';

		content += '<select id="' + itemId + '" name="' + itemId + '">';
			content += '<option value="link_url">' + localize.t('tiq.ext.link_url') + '</option>';
			content += '<option value="link_text">' + localize.t('tiq.ext.link_text') + '</option>';
		content += '</select>';

		itemId = id + '_filtertype';
		content += '<select id="' + itemId + '" name="' + itemId + '">';
			content += '<option value="equals">' + localize.t('tiq.ext.equals') + '</option>';
			content += '<option value="starts_with">' + localize.t('tiq.ext.starts_with') + '</option>';
			content += '<option value="ends_with">' + localize.t('tiq.ext.ends_with') + '</option>';
			content += '<option value="contains">' + localize.t('tiq.ext.contains') + '</option>';
			content += '<option value="regular_expression">' + localize.t('tiq.ext.regular_expression') + '</option>';
		content += '</select>';

		itemId = id + "_filter";
		content += '<input type="text" size="32" id="' + itemId + '" name="' + itemId + '">';
		content += '</div>';
		content += '<button onclick="utui.customizations_template[100015].removeFilterCondition(\'' + id + '\')" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';
		content += '</div>';

		$('#' + container + '_filtercontainer').append(content);

		$('#' + itemId).focus();

		return id;
	},
	removeFilterCondition: function (container) {
		$('#' + container + '_conditioncontainer').remove();

		//remove from the DO
		// condition is set if we remove during same session
		if(utui.data.customizations[this.container][container + '_filter'] !== 'undefined') {
			delete utui.data.customizations[this.container][container + '_filter'];
			delete utui.data.customizations[this.container][container + '_filtertype'];
			delete utui.data.customizations[this.container][container + '_source'];
		}

		utui.customizations.updateExtensionData(this.container);
	},
	show: function (container) {},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


// Content Modification
utui.customizations_template[100016] = {
	id: 100016,
	index: 0,
	aceEditor: {},
    clearedAceAnnotations : {},
    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editors
    //------------------------------------------------------------------------------------------------------------------
    destructor: function(){

        if (utui.customizations_template[100016].aceEditor){
            _.each(utui.customizations_template[100016].aceEditor,function(ae){
            	ae.destroy();
			});
        }
    },
	container: '',
	template: {
		main: function(extensionObj) {
			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					if(dynamic.length > 0)
						v += this.setConfigurationView(extensionObj, dynamic);

					v += '</div>';
				v += '</div>';

				v += this.rules(extensionObj);
			return v;
		},
		setConfigurationView: function(extensionObj, dynamic) {
			var v = '';
				for (var i = 0; i < dynamic.length; i++) {

					v += '<div class="row-fluid">';
						v += '<div class="span12">';
							v += '<h3>'+localize.t('tiq.ext.content_modification')+' '+(i+1)+'</h3>';
						v += '</div>';
					v += '</div>';

					v += '<div class="container-fluid">';
						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.element_type')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_type', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.identifier')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_domid', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.position')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_position', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.content')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.codeItemView(null, dynamic[i][0]._parentInstanceId +'_domcontent', '');
							v += '</div>';
						v += '</div>';
					v += '</div>';
				};
			return v;
		},
		rules: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.condition')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += utui.customizations_template.shared.getConditionalView(utui.util.interpret.extension.condition.toFormatted(extensionObj));
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "position":
				options = {
					insertbefore: localize.t('tiq.ext.before_node'),
					insertafter: localize.t('tiq.ext.after_node'),
					insertfirst: localize.t('tiq.ext.beginning_of_node'),
					insertlast: localize.t('tiq.ext.end_of_node'),
					replace: localize.t('tiq.ext.replace_node_content'),
					replacenode: localize.t('tiq.ext.replace_node')
				}

				roValue = options[value];
				break;
			case "type":
				options = {
					domid: localize.t('tiq.ext.dom_id'),
					xpath: localize.t('tiq.ext.xpath')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	index: 0,
	container:'',
	fillData: function (container, fillFlag, cb) {
		this.container = container;
        utui.customizations_template[100016].aceEditorEditStart = false;

		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var content = '<div class="customization_padded">';

		// Set Items
		content += '  <div><div class="customization_div">';
		content += '        <div id="' + container + '_setcontainer" class="customization_item" style="float:left; width:100%">';
		content += '    </div>';
		content += '  </div>';

		// Conditions
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_label" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
		content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini js-action-addbtn">' + localize.t('tiq.ext.add_condition') + '</button></div>';
		content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left">';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';
		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_domid') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			utui.customizations_template[this.id].addSetItem(container);
		}


		if (fillFlag) {
			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_domid') > -1) {

					var setId = i.substring(0, i.indexOf('_domid'));
					var itemId = utui.customizations_template[this.id].addSetItem(container, setId);

					$('#' + itemId + '_type').val(obj[setId + '_type']);
					$('#' + itemId + '_domid').val(obj[setId + '_domid']);
					$('#' + itemId + '_position').val(obj[setId + '_position']);
					var domContent = $('#' + itemId + '_domcontent').val(obj[setId + '_domcontent']);

					this.aceEditor[itemId + '_domcontent'].setValue(domContent.val(),-1);
					utui.customizations_template[this.id].updateSetOption(itemId);
				}
			}
			// Set up the conditions for ext 100016
			utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,this.id);

		} else {
			utui.customizations_template[this.id].addSetItem(container);
		}
		// $("#" + container).find(":button").button();
		$('#button_addcondition').attr('onClick', 'utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()');

		if(cb) cb();
	},
	show: function (container) {},
	addSetItem: function (container, instanceId) {
		var id = instanceId || utui.util.getContainerId(),
			self = this;

		var tooltipObj = {};
		var content = '';
		content += '<div id="' + id + '" class="widget-container" style="margin-top:2px; padding-bottom:12px; position:relative">';

			content += '<div class="pull-right">';
			content += '<button onclick="if($(\'#' + id + '\').siblings().length>=1){utui.customizations_template[' + this.id + '].removeSetItem(\'' + id + '\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus clickable"></i></button>';
			content += '<button onclick="utui.customizations_template[' + this.id + '].addSetItem(\'' + container + '\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus clickable"></i></button>';
			content += '</div>';

		var itemId = id + '_type';
		content += '  <div class="" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.element_type') + '</div><div class="customization_item" style="margin-bottom: 8px;"><select id="' + itemId + '" name="' + itemId + '"><option value="domid">' + localize.t('tiq.ext.dom_id') + '</option><option value="xpath">' + localize.t('tiq.ext.xpath') + '</option></select></div></div>';

		var itemId = id + '_domid';
		content += '  <div class="" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.identifier') + '</div><div class="customization_item" style="margin-bottom: 8px;"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="48"></div></div>';

		var itemId = id + '_position';


		content += '  <div class="" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.position') + '</div><div class="customization_item" style="margin-bottom: 8px;">';
		content += '<select id="' + itemId + '" name="' + itemId + '">';
		content += '  <option value="insertbefore">' + localize.t('tiq.ext.before_node') + '</option>';
		content += '  <option value="insertafter">' + localize.t('tiq.ext.after_node') + '</option>';
		content += '  <option value="insertfirst">' + localize.t('tiq.ext.beginning_of_node') + '</option>';
		content += '  <option value="insertlast">' + localize.t('tiq.ext.end_of_node') + '</option>';
		content += '  <option value="replace">' + localize.t('tiq.ext.replace_node_content') + '</option>';
		content += '  <option value="replacenode">' + localize.t('tiq.ext.replace_node') + '</option>';
		content += '</select></div></div>';


		var itemId = id + '_domcontent';
		content += '  <div class="" style="clear:both">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.content') + '</div>';

		var field = '';
		field += '    <div class="customization_item" style="width: 800px">';
//class="ext-ace-edit-supress-linting"
        field += '      <div  style="min-height:120px;border:1px solid grey;">';
        field += '          <textarea id="' + itemId + '" value="" name="' + itemId + '"  style="display:none"></textarea>';
        field += '          <div id="contentmod-ext-ace-editor-' + itemId + '" class="ext-ace-edit-container"></div>';
        field += '      </div>';
		field += '    </div>';

		content += utui.ui.template.form.validationWrapper(field, itemId);
		content += '    <span id="' + itemId + '_error" class="ui-state-error ui-corner-all" style="display:none;float:left;clear:both;padding:4px;margin-left:125px;margin-top:4px"></span>'
		tooltipObj[id + '_domcontent_tooltip'] = {
			gravity: 'w'
		};
		content += '  </div>';
		content += '  <div style="clear:both;margin-top:5px; margin-bottom:8px">';
        content += '    <div class="customization_labelwide"></div>';
        content += '    <div class="customization_item">';
		content += '      <span style="float:left;margin-right:2px;" id="' + itemId + '_tooltip" class="ui-icon ui-icon-info" ></span>' + utui.tooltip.customizations.customization_100016_content_tooltip;
        content += '    </div>';
        content += '  </div>';
        content += '  <div style="clear:both;"></div>';

		content += '</div>';
		$('#' + container + '_setcontainer').append(content);
		utui.util.addTooltip(tooltipObj);
		utui.customizations_template[this.id].updateSetOption(id);


        //------------------------------------------------------------------------------------------------------------------
        // Create the Ace Editor
        //------------------------------------------------------------------------------------------------------------------
        this.aceEditor[itemId] = ace.edit("contentmod-ext-ace-editor-"+itemId);
        var cModEditor = this.aceEditor[itemId];
        cModEditor.$blockScrolling = Infinity;
        cModEditor.setValue("");
        cModEditor.setOptions({
            maxLines : 50,
            mode : "ace/mode/html",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });

        cModEditor.clearSelection();
        var cmeEditSession = cModEditor.getSession();

		// Logic required to remove unwanted, irrelevant  code annotations that would confuse users.
        cmeEditSession.on("changeAnnotation", function(){
        	var annotationsList = utui.customizations_template[100016].aceEditor[itemId].getSession().getAnnotations();
            // The clearAnnotations function triggers a changedAnnotation event, so we need flags to stop recursive invocation on empty annotation lists
        	if (annotationsList.length){
        		if ( !  utui.customizations_template[100016].clearedAceAnnotations[itemId]){
                    utui.customizations_template[100016].aceEditor[itemId].getSession().clearAnnotations();
                    utui.customizations_template[100016].clearedAceAnnotations[itemId] = true;
				}
			}
		});

        cModEditor.on("blur", function(e){
            var value = utui.customizations_template[100016].aceEditor[itemId].getValue();
            utui.data.customizations[container][itemId] = value;
            $('#' + itemId).val(value);
        });

        cModEditor.on("change", function(e){
            // The code is annotated on every change, so the annotations need be removed after each parsing by Ace.
            utui.customizations_template[100016].clearedAceAnnotations[itemId] = false;
            utui.customizations_template[100016].aceEditor[itemId].getSession().clearAnnotations();
            var value = utui.customizations_template[100016].aceEditor[itemId].getValue();
            utui.data.customizations[container][itemId] = value;
            $('#' + itemId).val(value);

            if (utui.customizations_template[100016].aceEditorEditStart){
                $('#' + itemId).trigger('change');
            }
        });

        cModEditor.on("focus", function(e){
            utui.customizations_template[100016].aceEditorEditStart = true;
        });

        cModEditor.setValue($('#' + itemId).val(),-1);
        $('#' + "contentmod-ext-ace-editor-"+itemId).find('.ace_info').removeClass('ace_info');

        // If imported, make editor read only
        if(exapi.isImported(container)) {
            cModEditor.setReadOnly(true);
        }

		return id;
	},
	updateSetOption: function (container) {
		var itemId = container + '_setoption';
		if ($('#' + itemId).val() == 'var') {
			$('#' + container + '_settovar').show();
			$('#' + container + '_settotext').hide();
		} else {
			$('#' + container + '_settotext').show();
			$('#' + container + '_settovar').hide();
		}
	},
	removeSetItem: function (container) {
		$('#' + container).remove();

		if (utui.customizations_template[100016].aceEditor[container + '_domcontent']){
            utui.customizations_template[100016].aceEditor[container + '_domcontent'].destroy();
		}
		//remove from the DO
		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}
		delete utui.data.customizations[this.container][container + '_type'];
		delete utui.data.customizations[this.container][container + '_domid'];
		delete utui.data.customizations[this.container][container + '_position'];
		delete utui.data.customizations[this.container][container + '_domcontent'];

		utui.customizations.updateExtensionData(this.container);
	},
	addCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);
	},
	removeCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

		}

		if(dynamicConfigCollection.length > 0) {

			for (var i = 0; i < dynamicConfigCollection.length; i++) {
				entryCollection = dynamicConfigCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'domcontent');

					if(entryItem.domcontent.match(/[^\\]\'|^\'/g) || entryItem.domcontent.indexOf("\\\\'") > 0) {
						message = localize.t('tiq.validation.message.unescaped_quotes');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'invalid');
					}
				};
			};

		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.source === 'textvalue') {
						// do nothing
						continue;
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}

				};
			};

		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//Customization 100017: Conversion Event Naming ID Mapping
//TASK TY: Will they evenutally want mutliple campaign ids set to multiple values (can this extension work 'across tags'?)
//TASK TY: Build a separate campaign extension.  This is just for events.
//TASK TY: Add dropdown for "mouse event" or "page view" event in the future
utui.customizations_template[100017] = {
	id: 100017,
	container: '',
	index: 0,
	template: {
		main: function(extensionObj) {

			var conditions = utui.util.interpret.extension.condition.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					v += '<span class="inline-label">'+localize.t('tiq.ext.destination')+'</span> '+utui.ui.template.form.readonly.inputItemView(null, 'set', '');

					if(conditions.length > 0)
						v += this.getConditionalEventsView(conditions);

					v += '</div>';
				v += '</div>';
			return v;
		},

		getConditionalEventsView: function(formattedObj) {
			var content = '',
				contentHeader = '',
				orCondition,
				andCondition,
				objectKey,
				exclusionInputMap = ['defined', 'notdefined', 'populated', 'notpopulated'],
				className = '';

			content += '<div class="condition-container">';

			for (var i = formattedObj.length - 1; i >= 0; i--) {
				orCondition = formattedObj[i];

				if(!utui.util.interpret.isOrConditionValid(orCondition)) continue;


				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					if(andCondition._instanceId === '0') {
						channelKey = andCondition._parentInstanceId + '_settotext';

						contentHeader = '<div class="condition-custom">';
							contentHeader += '<div class="row-fluid">';
								contentHeader += '<div class="span12">';
									contentHeader += '<span class="inline-label">'+localize.t('tiq.ext.event_name_id')+'</span> '+utui.ui.template.form.readonly.inputItemView(null, channelKey, '');
								contentHeader += '</div>';
							contentHeader += '</div>';
						contentHeader += '</div>';
					}
				}


				content += contentHeader;

				content += '<div class="row-fluid">';
				content += '<div class="span12">';

				content += '<div class="condition" style="padding-left:12px; margin-bottom:32px">';

				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					content += '<div class="condition-and">';

					keyMapping = utui.util.interpret.getConditionalKeyMapping(andCondition);

					for (var key in keyMapping) {
						if(!keyMapping.hasOwnProperty(key)) continue;

						if(key.indexOf('_') === 0) continue; // ignore private keys

						if(andCondition._instanceId === "0") {
							objectKey = andCondition._parentInstanceId + '_' + keyMapping[key];
						}
						else {
							objectKey = andCondition._parentInstanceId + '_' + andCondition._instanceId + '_' + keyMapping[key];
						}

						// (2) Operator
						if(key == 1) {
							// TODO: interpret operator values
							className = "condition-cell-operator";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, ruleapi.condition.interpretOperatorValue(andCondition[keyMapping[1]]))+'</span>';
						}
						// (3) Value
						else if(key == 2) {
							className = "condition-cell-value";

							if(!~exclusionInputMap.indexOf(andCondition[keyMapping[1]])) {
								content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[2]])+'</span>';

								if(ruleapi.condition.isOperatorIgnoreCase(andCondition[keyMapping[1]])) {
									content += '<span class="condition-strict-case inline-label">'+localize.t('tiq.rules.case_insensitive')+'</span>';
								}
							}
						}
						// (1) Input
						else {
							className = "condition-cell-input";
							content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[3]])+'</span>';
						}
					};

					content += '</div>';
				};

				content += '</div>';
				content += '</div>';
				content += '</div>';
			};

			content += '</div>';

			return content;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container) {
		this.container = container;
		var obj = exapi.getObjectByExtensionId(container);

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var itemId = '';
		var content = '';

		//content = '<input type="hidden" id="'+container+'_scope" name="'+container+'_scope" value="'+obj.scope+'">';
		content += '<div id="' + container + '_accordion" class="customization_padded">';
		content += '  <div class="padded">';
		content += '    <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.destination') + '</div>';
		content += '    <div class="customization_item">';
		var itemId = 'set';
		content += '<span id="' + itemId + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: 100017,
			stylefloat: 'none',
			showvars: 'js,js_page,va'
		});
		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';

		content += '  <div style="text-align:right;">';
		content += '    <div id="' + container + '_itemcontainer"></div>';
		content += '    <div style="margin-top:4px;"><button id="' + container + '_button_additem" type="button" class="btn js-action-addbtn">' + localize.t('tiq.ext.add_new_event_name') + '</button></div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2('set', true);

		$('#' + container + '_button_additem').attr('onClick', 'utui.customizations_template[100017].addItem(\'' + container + '\')');


		$('#set').select2('val', obj['set'] || '');

		for (var i in utui.util.getVars(obj, 2)) {
			if (i.indexOf('_source') >= 0 && i.split('_').length <= 2) {

				var conditionId = i.substring(0, i.indexOf('_source'));
				var itemId = utui.customizations_template[100017].addItem(container, conditionId);


				$('#' + itemId + '_source').val(obj[i]);
				$('#' + itemId + '_source').select2('val', obj[i]);

				$('#' + itemId + '_settotext').val(obj[i.replace('_source', '_settotext')]);

				$('#' + itemId + '_filtertype').val(obj[i.replace('_source', '_filtertype')]);
				$('#' + itemId + '_filtertype').select2('val', obj[i.replace('_source', '_filtertype')]);

				$('#' + itemId + '_filter').val(obj[i.replace('_source', '_filter')]);
				$('#' + itemId + '_filter').select2('val', obj[i.replace('_source', '_filter')]);

				utui.customizations_template.util.operatorSelectHandler(itemId);

				// process the "AND" conditions
				for (var i in utui.util.getVars(obj, 2)) {
					if (i.indexOf('_source') >= 0 && i.split('_').length > 2 && i.indexOf(conditionId) == 0) {

						var conditionId2 = i.split('_')[1];
						var itemAddId = utui.customizations_template[100017].addItemCondition(itemId, conditionId2);

						$('#' + itemAddId + '_source').val(obj[i]);
						$('#' + itemAddId + '_filtertype').val(obj[i.replace('_source', '_filtertype')]);
						$('#' + itemAddId + '_filter').val(obj[i.replace('_source', '_filter')]);
						utui.customizations_template.util.operatorSelectHandler(itemAddId);
					}
				}
			}
		}
	},
	addItem: function (container, instanceId) {
		this.index++;
		var id = instanceId || utui.util.getContainerId();

		var content = '';
		content += '<div class="padded widget-container" id="' + id + '_itemcontainer">';

		//Text  (Event Label/Name)
		var itemId = id + '_settotext';
		content += '<div class="customization_div">';
		content += '  <div class="customization_labelwide">' + localize.t('tiq.ext.event_name_id') + '</div>';
		content += '  <div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="36"></div>';
		if (this.index > 1)
			content += '  <button onclick="utui.customizations_template[100017].removeItem(\'' + id + '\')" class="btn btn-mini js-action-removebtn"><i class="icon-trash"></i> ' + localize.t('tiq.ext.delete') + '</button>';
		content += '</div>';

		//Condition
		itemId = id + '_source';
		content += '<div id="' + id + '_conditioncontainer">';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide" style="white-space:nowrap;">' + localize.t('tiq.ext.condition') + '</div>';
		content += '    <div class="customization_item">';
		content += '<span id="' + itemId + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: 100017,
			stylefloat: 'none',
			showvars: 'dom,js,js_page,cp,qp,va'
		});

		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		content += '    <input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '    </div>';
		content += '    <button onclick="utui.customizations_template[100017].addItemCondition(\'' + id + '\')" class="btn btn-mini js-action-addbtn" style="float:left"><i class="icon-plus"></i></button>';
		content += '  </div>';
		content += '</div>';

		$('#' + container + '_itemcontainer').append(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_source', true);

		$('#' + id + '_settotext').focus();
		return id;
	},
	addItemCondition: function (container, instanceId) {
		var id = container + '_' + (instanceId || utui.util.getContainerId());

		var itemId = id + '_source';
		var content = '<div id="' + id + '_conditioncontainer" class="customization_div"><div class="customization_labelwide" style="white-space:nowrap;">' + localize.t('tiq.ext.or') + '</div>';
		content += '<div class="customization_item">';

		content += '<span id="' + itemId + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: 100017,
			stylefloat: 'none',
			showvars: 'dom,js,js_page,cp,qp,va'
		});

		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		content += '<input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '</div>';
		content += '<button onclick="utui.customizations_template[100017].removeItemCondition(\'' + id + '\')" class="btn btn-mini js-action-removebtn" style="float:left"><i class="icon-minus"></i></button>';
		content += '</div>';
		content += '</div>';
		$('#' + container + '_itemcontainer').append(content);


			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_source', true);

		return id;
	},
	removeItem: function (container) {
		$('#' + container + '_itemcontainer').remove();
		$('#' + container + '_hrule').remove();

		var dataObj = utui.data.customizations[this.container];

		for(var i in dataObj) {
			if(i.indexOf(container) == 0) {
				delete utui.data.customizations[this.container][i];
			}
		}

		utui.customizations.updateExtensionData(this.container);
	},
	removeItemCondition: function (container, property) {
		$('#' + container + '_conditioncontainer').remove();

		var dataObj = utui.data.customizations[this.container];

		for(var i in dataObj) {
			if(i.indexOf(container) == 0) {
				delete utui.data.customizations[this.container][i];
			}
		}

		utui.customizations.updateExtensionData(this.container);
	},
	show: function (container) {},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


// Segment Visitor (Split Segmentation)
utui.customizations_template[100018] = {
	id: 100018,
	index: 0,
	container: '',
	template: {

		main: function(extensionObj) {
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getStaticConfiguration();
				_x += this.getSegmentationConfiguration(configDynamicObj);

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);
			return v;
		},
		getStaticConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
				v += _row(localize.t('tiq.ext.destination_cookie'), _input(null, 'var', ''));
				v += _row(localize.t('tiq.ext.cookie_name'), _input(null, 'domain', ''));
				v += _row(localize.t('tiq.ext.duration'), _input(null, 'persistence', ''));
			return v;
		},
		getSegmentationConfiguration: function(configObj) {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
			var _x = '';
			var _y = '';

				for (var i = 0; i < configObj.length; i++) {
					v += '<br>';

					_x = '<span class="inline-label">'+localize.t('tiq.ext.set')+'</span><br>';
					_x += _input(null, configObj[i][0]._parentInstanceId +'_segname', '');

					_y = '<span class="inline-label">'+localize.t('tiq.ext.to')+'</span><br>';
					_y += _input(null, configObj[i][0]._parentInstanceId +'_segpercent', '', '%');

					v += _row(_x, _y);
				};
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var self = this;
		var tooltipObj = {};
		this.container = container;

		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var content = '<div class="customization_padded">';
		var selectContainerId = container + '_var' + '_varpane';

		// Set Value to Persist
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.destination_cookie') + ' </div>';
		content += '    <div class="customization_item">';
		content += '<span id="' + selectContainerId + '" class="cookieSelect" data-container="' + container + '">';

		var field = utui.customizations_template.util.buildSelect({ item: 'var', container: container, id: 100018, stylefloat: 'left', showvars: 'nooutput,cp' });
		content += utui.ui.template.form.validationWrapper(field, 'var');

		content += '</span>';
		content += '<button id="' + selectContainerId + '_addMore" class="btn btn-mini js-action-addbtn"><i class="icon-plus" id="' + container + '_addmore_tooltip" title="' + localize.t('tiq.ext.click_here_to_create_cookie') + '"></i></button>';
        content += '    <span id="' + container + '_outputcookie_tooltip" class="bg-danger required-container" style="display:none;" title="' + localize.t('tiq.ext.note_preloader_script') + '"></span>';
		content += '    <span id="' + container + '_varerror" class="js-error-field bg-danger required-container" style="display:none;"></span>';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';
		tooltipObj[container + '_addmore_tooltip'] = {
			gravity: 'w'
		};
		tooltipObj[container + '_outputcookie_tooltip'] = {
			gravity: 'w'
		};

		// Cookie Domain (leave blank for utag.cfg.domain or location.hostname)
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.cookie_domain') + ' </div>';
		content += '    <div class="customization_item">';
		content += '        <input type="text" size="48" id="domain" name="domain">';
		content += '    </div>';
		content += '    <div id="' + container + '_domain_tooltip" class="ui-icon ui-icon-info" title="' + localize.t('tiq.ext.leave_blank_config_domain') + '"></div>';
		content += '  </div>';
		tooltipObj[container + '_domain_tooltip'] = {
			gravity: 'w'
		};

		// Segment Persist Duration
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.duration') + ' </div>';
		content += '    <div class="customization_item">';
		content += '        <input type="text" size="2" id="persistencetext" name="persistencetext" style="display:none">';
		content += '        <select id="persistence" name="persistence" onchange="utui.customizations_template[100018].showPersistenceText(\'' + container + '\')">';
		content += '        <option value="session">' + localize.t('tiq.ext.session') + '</option>';
		content += '        <option value="visitor">' + localize.t('tiq.ext.visitor') + '</option>';
		content += '        </select>';
		content += '    </div>';
		content += '  </div>';

		// Segment Lable/Percent Items
		content += '  <div class="customization_div widget-container">';
		content += '     <div id="segmentcontainer" class="customization_item" style="float:left"></div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2('var', true);

		$("#" + selectContainerId + "_addMore").click(function () {
			utui.define.showAddMore(container, 'cp', '', '', function() { utui.customizations_template.util.updateDestination(container, 'var', 'cp'); });
		});

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_segname') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			var itemId = utui.customizations_template[100018].addSegmentItem(container);
			$('#' + itemId + '_segname').val(obj[setId + '_segname']);
			$('#' + itemId + '_segpercent').val(obj[setId + '_segpercent']);
		}


		if (fillFlag) {
			$('#var').select2('val', obj['var'] || '');
			$('#persistence').val(obj.persistence);
			$('#domain').val(obj.domain);
			$('#persistencetext').val(obj.persistencetext);
			utui.customizations_template[100018].showPersistenceText(container);

			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_segname') > -1) {
					var setId = i.substring(0, i.indexOf('_segname'));
					var itemId = utui.customizations_template[100018].addSegmentItem(container, setId);
					$('#' + itemId + '_segname').val(obj[setId + '_segname']);
					$('#' + itemId + '_segpercent').val(obj[setId + '_segpercent']);
				}
			}
		} else {
			utui.customizations_template[100018].addSegmentItem(container);
		}

		utui.util.addTooltip(tooltipObj);

		if(cb) cb();
	},
	show: function (container) {},
	addSegmentItem: function (container, instanceId) {
		var id = instanceId || utui.util.getContainerId();

		var itemId = id + '_setitem';
		var content = '';
		content += '<div id="' + itemId + '" class="nooverflow" style="margin-top: 2px;position: relative">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.segment_label') + '</div>';
		itemId = id + '_segname';
		content += '    <input type="text" size="48" id="' + itemId + '" name="' + itemId + '" style="float:left;">';

		itemId = id + '_segpercent';
		content += '    <div class="customization_label">' + localize.t('tiq.ext.percent') + '</div>';
		content += '        <select id="' + itemId + '" name="' + itemId + '">';
		for (var i = 0; i <= 100; i++) {
			content += '<option value="' + i + '">' + i + ' %</option>';
		}
		content += '        </select>';

		content += '<button onclick="utui.customizations_template[100018].addSegmentItem(\'' + container + '\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
		content += '<button onclick="if($(\'#' + id + '_setitem' + '\').siblings().length>=1){utui.customizations_template[100018].removeSegmentItem(\'' + id + '\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';

		content += '</div>';
		$('#segmentcontainer').append(content);
		return id;
	},
	removeSegmentItem: function (container) {
		$('#' + container + '_setitem').remove();

		delete utui.data.customizations[this.container][container + '_segname'];
		delete utui.data.customizations[this.container][container + '_segpercent'];

		utui.customizations.updateExtensionData(this.container);
	},
	showPersistenceText: function (container) {
		var value = $('#persistence option:selected').val();
		if (value == 'days' || value == 'hours') {
			$('#persistencetext').show().focus();
		} else {
			$('#persistencetext').hide();
		}
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'var') {
					if(value === '' || value === 'none') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(value.indexOf('cp.utag_main_') === 0 && staticConfigCollection.scope === 'preload') {
						message = localize.t('tiq.ext.please_use_non_utag_cookie');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'invalid');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}
			}
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}

}


// Lookup Table
utui.customizations_template[100020] = {
	id: 100020,
	index: 0,
	container:'',
	template: {
		main: function(extensionObj) {
			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					v += this.setConfigurationView(extensionObj, dynamic);

					if(dynamic.length > 0)
						v += this.setLookupTableMatchView(extensionObj, dynamic);

					v += '</div>';
				v += '</div>';
			return v;
		},
		setConfigurationView: function(extensionObj) {
			var v = '';
				v += '<div class="container-fluid section-padded-top-bottom">';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.lookup_value_in')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'varlookup', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.destination')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'var', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.default_output')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'settotext', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.variable_type')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'vartype', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.match_type')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'filtertype', '');
						v += '</div>';
					v += '</div>';
				v += '</div>';
			return v;
		},
		setLookupTableMatchView: function(extensionObj, dynamic) {
			var v = '';
				v += '<div class="section-padded-top-bottom" style="border-top: 1px dashed #ddd;">';
					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label"><strong>'+localize.t('tiq.ext.lookup_match')+'</strong></span>';
						v += '</div>';
						v += '<div class="span4">';
							v += '<span class="inline-label"><strong>'+localize.t('tiq.ext.output')+'</strong></span>';
						v += '</div>';
						v += '<div class="span4">';
							v += '<span class="inline-label"><strong>'+localize.t('tiq.ext.notes')+'</strong></span>';
						v += '</div>';
					v += '</div>';

				for (var i = 0; i < dynamic.length; i++) {
					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_name', '');
						v += '</div>';
						v += '<div class="span4">';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_value', '');
						v += '</div>';
						v += '<div class="span4">';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_comment', '');
						v += '</div>';
					v += '</div>';
				};
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "position":
				options = {
					insertbefore: localize.t('tiq.ext.before_node'),
					insertafter: localize.t('tiq.ext.after_node'),
					insertfirst: localize.t('tiq.ext.beginning_of_node'),
					insertlast: localize.t('tiq.ext.end_of_node'),
					replace: localize.t('tiq.ext.replace_node_content'),
					replacenode: localize.t('tiq.ext.replace_node')
				}

				roValue = options[value];
				break;
			case "type":
				options = {
					domid: localize.t('tiq.ext.dom_id'),
					xpath: localize.t('tiq.ext.xpath')
				}
				roValue = options[value];
				break;
			case "vartype":
				options = {
					string: 'String',
					array: 'Array'
				}
				roValue = options[value];
				break;
			case "filtertype":
				options = {
					equals: 'Exact',
					contains: 'Contains',
					regular_expression: 'RegExp'
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var tooltipObj = {},
			browserVersion = utui.util.getBrowser(),
			disabledClass = 'password-btn-disabled',
			obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		this.container = container;
		var content = '<div class="customization_padded">';
		// Input variable used for lookup
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.lookup_value_in') + ' </div>';
		content += '    <div class="customization_item">';
		// content += '<span id="' + container + '_varlookup' + '_varpane">';
		content += '<span id="' + container + 'varlookup' + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({ item: 'varlookup', container: container, id: 100020 });
		content += utui.ui.template.form.validationWrapper(field, 'varlookup');

		content += '</span>';
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';

		// Output
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.destination') + ' </div>';
		content += '    <div class="customization_item">';
		content += '<span id="' + container + '_var' + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({ item: 'var', container: container, id: 100020 });
		content += utui.ui.template.form.validationWrapper(field, 'var');

		content += '</span>';
		content += '<button onclick="utui.define.showAddMore(\'' + container + '\',\'js\', \'\', \'\', function() {utui.customizations_template.util.updateDestination(\'' + container + '\', \'var\', \'js\'); })" class="btn btn-mini js-action-addbtn"><i class="icon-plus" id="' + container + '_addmore_tooltip" title="' + localize.t('tiq.ext.click_here_to_create_new_output') + '"></i></button>';
		tooltipObj[container + '_addmore_tooltip'] = {
			gravity: 'w'
		};
		content += '    </div>';
		content += '    </div>';

		content += '  </div>';
		tooltipObj[itemId + '_tooltip'] = {
			gravity: 's'
		};

		// Variable Types (String or Array determines if we generate a loop0)
		// var itemId = container + '_vartype';
		var itemId = 'vartype';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.variable_type') + ' </div>';
		content += '    <div class="customization_item" id="' + itemId + '_tooltip" title="' + localize.t('tiq.ext.for_array_types') + '">';
		content += '        <select id="' + itemId + '" name="' + itemId + '">';
		content += '        <option value="string">' + localize.t('tiq.ext.string') + '</option>';
		content += '        <option value="array">' + localize.t('tiq.ext.array') + '</option>';
		content += '        </select>';
		content += '    </div>';
		content += '  </div>';
		tooltipObj[itemId + '_tooltip'] = {
			gravity: 'w'
		};

		// Match Types (equals, contains, regex)
		// var itemId = container + '_filtertype';
		var itemId = 'filtertype';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.match_type') + ' </div>';
		content += '    <div class="customization_item" id="' + itemId + '_tooltip" title="' + localize.t('tiq.ext.set_the_lookup_match_type') + '">';
		content += '        <select id="' + itemId + '" name="' + itemId + '">';
		content += '        <option value="equals">' + localize.t('tiq.ext.exact') + '</option>';
		content += '        <option value="contains">' + localize.t('tiq.ext.contains') + '</option>';
		content += '        <option value="regular_expression">' + localize.t('tiq.ext.regexp') + '</option>';
		content += '        </select>';
		content += '    </div>';
		content += '  </div>';
		tooltipObj[itemId + '_tooltip'] = {
			gravity: 'w'
		};


		content += '<div class="customization_div" id="' + container + '_appendLookups" style="border-top: 1px solid rgb(221, 221, 221); margin-top: 12px; padding-top: 12px;">'

		content += '<div style="text-align:right;float:right">';

				content += '<button style="display:inline-block; margin-right:12px;" class="btn" id="'+container+'_button_uploadLookups" role="button" aria-disabled="false">';
					content += '<span class="ui-button-text">' + localize.t('tiq.ext.import_from_csv') + '</span>';
				content += '</button>';

			content += '<div id="'+container+'_button_exportToCSV_container" '+((browserVersion.indexOf('IE') > -1) ? 'title="' + localize.t('tiq.ext.exporting_to_cvs_not_supported') + '"' : '') +' style="display:inline-block; margin-right:12px;">';
				content += '<button class="btn" id="'+container+'_button_exportToCSV" role="button" aria-disabled="false">';
					content += '<span class="ui-button-text">' + localize.t('tiq.ext.export_to_csv') + '</span>';
				content += '</button>';
			content += '</div>';

		content += '</div>';

		content += '<div style="margin-left:12px;">' + localize.t('tiq.ext.the_note_is_an_optional_field') + '</div>';

		content += '  </div>';

		// Table container
		content += '  <div>';
		content += '  	<div class="customization_div">';
		content += '        <div id="' + container + '_tablecontainer" class="customization_item" style="float:left">';
		content += '    	</div>';
		content += '  	</div>';

		// Defaulting options container: Default text to use when no match found & option to disable this logic
		var setTxtItem = 'settotext';
		var disDfltItem = 'disable_default_logic';
		content += '  	<div class="customization_div" style="border-top: 1px solid rgb(221, 221, 221); margin-top: 12px; padding-top: 12px;">';
		content += '        <div id="' + container + '_default_options_container">';
		content += '    		<div class="customization_labelwide">' + localize.t('tiq.ext.default_output') + ' </div>';
		content += '    		<div class="customization_item">';
		content += '    			<div id="' + setTxtItem + '_tooltip" title="' + localize.t('tiq.ext.if_no_match_found_lookup_table') + '">';
		content += '    				<input type="text" size="48" id="' + setTxtItem + '" name="' + setTxtItem + '" style="float:left;">';
		content += '    				<div class="customization_item icon-question-sign" style="font-size:15px;padding:4px;">&nbsp; &nbsp;</div>';
		content += '    			</div>';
		content += '    			<div style="clear:both; height:20px; padding:5px;" id="' + disDfltItem + '_tooltip" title="' + localize.t('tiq.ext.default_disabled_tooltip') + '">';
		content += '    				<div class="customization_item" style="padding-top:3px;">';
		content += '    					<input type="checkbox" id="' + disDfltItem + '" name="' + disDfltItem + '" onchange="utui.customizations_template[100020].toggleValue(\'' + disDfltItem + '\');" style="float:left;">';
		content += '    				</div>';
		content += '    				<div class="customization_itemright">' + localize.t('tiq.ext.default_disabled') + ' </div>';
		content += '    				<div class="customization_item icon-question-sign" style="font-size:15px;padding:4px;">&nbsp; &nbsp;</div>';
		content += '    			</div>';
		content += '    		</div>';
		content += '    	</div>';
		content += '    </div>';
		content += '  </div>';
		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2('varlookup', true);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2('var', true);

		$('#' + container + '_button_uploadLookups').on("click", function (event) {
			utui.customizations_template[100020].uploadLookupList(container);
		});
		$('#'+container+'_button_exportToCSV').on("click", function(event){
			if(browserVersion.indexOf('IE') > -1) return false;

			utui.customizations_template[100020].exportToCSV(container);
		});

		if(browserVersion.indexOf('IE') > -1) {
			var toolObj = {};
			toolObj[container+'_button_exportToCSV_container'] = { gravity: 'se' };
			utui.util.addTooltip(toolObj);
			$('#'+container+'_button_exportToCSV').addClass('password-btn-disabled');
		}

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_name') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			utui.customizations_template[this.id].addItem(container);
		}



		if (fillFlag) {
			$('#var').select2('val', obj['var'] || '');
			$('#varlookup').select2('val',obj.varlookup || '');
			$('#vartype').val(obj.vartype);
			$('#filtertype').val(obj.filtertype);
			$('#settotext').val(obj.settotext);
			if (obj.disable_default_logic && obj.disable_default_logic === 'yes'){
				$('#disable_default_logic').val('yes');
				$('#disable_default_logic').prop('checked', true);
			} else {
				$('#disable_default_logic').val('no');
				$('#disable_default_logic').prop('checked', false);
			}

			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_name') > -1) {
					var setId = i.substring(0, i.indexOf('_name'));
					var itemId = utui.customizations_template[100020].addItem(container, setId);
					$('#' + itemId + '_name').val(obj[setId + '_name']);
					$('#' + itemId + '_value').val(obj[setId + '_value']);
					$('#' + itemId + '_comment').val(obj[setId + '_comment']);
				}
			}
		} else {
			utui.customizations_template[100020].addItem(container);
		}
		utui.util.addTooltip(tooltipObj);

		if(cb) cb();
	},
	show: function (container) {},
	exportToCSV: function(container) {
		var csvString = "data:text/csv;charset=utf-8,",
			dataString,
			encodedUri,
			link,
			getValues = (function() {
				var rows = $('#customizations_'+container).find('div[id$="_setitem"]'),
					tableArr = [],
					rowArr = [],
					$el;


				for (var i = 0; i < rows.length; i++) {
					var $el = $(rows[i]);

					rowArr = [];

					rowArr.push( $el.find('[id$="_name"]').val() );
					rowArr.push( $el.find('[id$="_value"]').val() );
					rowArr.push( $el.find('[id$="_comment"]').val() );

					tableArr.push(rowArr);
				};

				return tableArr;
			})();

		// If we're attempting to export an empty table, prevent it
		if(getValues.length === 1 && getValues[0][0] === "" && getValues[0][1] === "") {
			return false;
		}

		// Construct URI for table.
		for (var i = 0; i < getValues.length; i++) {
			dataString = getValues[i].join(',');
			csvString += i < getValues.length ? dataString+ "\n" : dataString;
		};

		encodedUri = encodeURI(csvString);
		link = document.createElement('a');
		link.href = encodedUri;
		link.target = '_blank';
		link.download = 'lookup.csv';

        document.body.appendChild(link);
        link.click();
    },
    uploadLookupList:function(container){
        var content = '<div class="admin_div" style="overflow-x:hidden">';
        content += '<div class="admin_labelno" style="margin-top:5px;width:600px;text-align:left;margin-bottom:5px;">' + localize.t('tiq.ext.paste_comma_separated_values') + '</div>';
        content += '<div style="margin-top:5px;width:600px;text-align:left;margin-bottom:5px;">' + localize.t('tiq.ext.use_cvs_formatted_lists') + '</div>';
        content += '<div id="' + container + '_uploadLookupContainer" style="margin-top:10px;height:300px;width:600px;overflow:auto;clear:both;">';
        content += '<textarea id="' + container + '_LookupListCode" value="" name="' + container + '_code" style="width:98%;height:97%;"></textarea></div>';
        content += '<div style="background:#FCC;width:97%;height:120px;padding:5px;overflow:auto;display:none;" id="' + container + '_lookupUploadErrors"></div>';
        content += '</div>'
        $('#admin_uploadLookup').html(content).show();

		$("#dialog").dialog("destroy");
		$("#dialog").show();

		$("#admin_dialog").dialog({
			autoOpen: true,
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: true,
			closeText: '',
			position: ['center', 110],
			title: localize.t('tiq.ext.bulk_lookup'),
			draggable: true,
			resizable: false,
			buttons: [{
				text: localize.t('tiq.dialog.button.append'),
				id: 'uploadLookupList_dialog_appendBtn',
				click: function () {
					if (utui.customizations_template[100020].handleUploadSubmit(container, 'Append')) {
						$(this).dialog('close');

						// triggers a save form
						$('#settotext').trigger('change');
					}
				}
			}, {
				text: localize.t('tiq.dialog.button.replace'),
				id: 'uploadLookupList_dialog_replaceBtn',
				click: function () {
					if (utui.customizations_template[100020].handleUploadSubmit(container, 'Replace')) {
						$(this).dialog('close');

						// triggers a save form
						$('#settotext').trigger('change');
					}
				}
			}, {
				text: localize.t('tiq.dialog.button.cancel'),
				id: 'uploadLookupList_dialog_cancelBtn',
				click: function () {
					$(this).dialog('close');
				}
			}],
			close: function () {
				$('#admin_uploadLookup').html('').hide();
			},
			resizeStop: function () {
				try {
					utui.adminlib.editor.resize()
				} catch (e) {}
			}
		});
	},
	handleUploadSubmit: function (container, action) {
		var lookupRegister = {};
		var keyRegister = {};
		var errorMessages = [];
		var recsFound = false;

		// Pre populate the key lookup register from what is currently showing so that we can catch duplicates.
		if (action === 'Append') {
			var allNameTxts = $("#" + container + "_tablecontainer > div > input[id$='_name']");
			for (var nt = 0; nt < allNameTxts.length; nt++) {
				keyRegister[$.trim(allNameTxts[nt].value)] = 1;
			}
		}

        var csvLookupCode = $('#' + container + '_LookupListCode').val();
        // If the input is empty, then just stop processing.
        if ($.trim(csvLookupCode).length == 0) {
            return true;
        }
        // Look out for unclosed quotes - this breaks the CSV parser logic.
        if ((csvLookupCode.match(/\"/g) || []).length % 2 == 1) {
            $('#' + container + '_lookupUploadErrors').empty();
            $('#' + container + '_lookupUploadErrors').append('<p><strong>' + localize.t('tiq.ext.the_csv_is_unparseable') + '</strong></p>');
            $('#' + container + '_lookupUploadErrors').css('display', 'block');
            return false;
        }
        // Parse the input into an array of arrays.
        var csvRecs = utui.customizations_template[100020].CSVToArray(csvLookupCode, ",");

        // Process and validate the parsed records and populate the lookupRegister with the records.
        for (var i = 0; i < csvRecs.length; i++) {
            if (csvRecs[i].length === 2 || csvRecs[i].length === 3) { // Supports optional comment field
                var cKey = $.trim(csvRecs[i][0]);
                var cValue = $.trim(csvRecs[i][1]);
                var cComment = $.trim(csvRecs[i][2]); // Returns an empty string if comment is omitted
                if (cKey.length == 0 || cValue.length == 0) {
                    errorMessages.push(localize.t('tiq.ext.line_num', {num:(i+1)}) + ' ' + localize.t('tiq.ext.error.key_or_value_cannot_be_empty') + ' : <strong>' + csvRecs[i].join() + '</strong>');
                } else {
                    if (keyRegister[cKey] === undefined) {
                        keyRegister[cKey] = 1;
                        var newKey = cKey + "-" + cValue;
                        recsFound = true;
                        if (lookupRegister[newKey] === undefined) {
                            lookupRegister[newKey] = {
                                name: cKey,
                                value: cValue,
                                comment: cComment
                            };
                        }
                    } else {
                        errorMessages.push(localize.t('tiq.ext.line_num', {num:(i+1)}) + ' ' + localize.t('tiq.ext.error.duplicate_lookup_match_found') + ' <strong>' + cKey + '</strong>');
                    }
                }
            } else {
                if (csvRecs[i].length !== 1 || csvRecs[i][0].length !== 0) {
                    var errmsg = localize.t('tiq.ext.line_num', {num:(i+1)}) + ' <strong>' + csvRecs[i].join() + '</strong>';
                    errorMessages.push(errmsg);
                }
            }
        }

		// Handle the error scenario.
		if (errorMessages.length > 0) {
			$('#' + container + '_lookupUploadErrors').empty();
			$('#' + container + '_lookupUploadErrors').append("<p><strong>" + localize.t('tiq.ext.please_ensure_the_following_lines') + "</strong></p>");
			for (var i = 0; i < errorMessages.length; i++) {
				$('#' + container + '_lookupUploadErrors').append(utui.util.safeEscape(errorMessages[i]) + "<br>");
			}
			$('#' + container + '_lookupUploadErrors').css('display', 'block');
			return false;
		} else {
			var myList = utui.util.getVars(lookupRegister);
			if (recsFound) { // Only process if there are valid records in the register.
				if (action === 'Replace') { // Flush the list of current records if the user wants to replace them
					$('#' + container + '_tablecontainer').empty();

					for(var key in utui.data.customizations[this.container]) {
						if(key.indexOf('_name') > 0) {
							delete utui.data.customizations[this.container][key]
						}
						if(key.indexOf('_value') > 0) {
							delete utui.data.customizations[this.container][key]
						}
						if(key.indexOf('_comment') > 0) {
							delete utui.data.customizations[this.container][key]
						}
					}
				}
				for (var lkpItem in myList) { // Create new entries for the uploaded records.
					var itemId = utui.customizations_template[100020].addItem(container);
					$('#' + itemId + '_name').val(lookupRegister[lkpItem].name);
					$('#' + itemId + '_value').val(lookupRegister[lkpItem].value);
					$('#' + itemId + '_comment').val(lookupRegister[lkpItem].comment);
				}
			}
		}

        return true;
    },
    addItem: function (container, instanceId) {
        var id = instanceId || utui.util.getContainerId();
        // var itemId = id + '_setitem';
        var itemId = id + '_setitem';
        var content = '';
        content += '<div id="' + itemId + '" class="nooverflow" style="margin-top: 2px;position: relative">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.lookup_match') + '</div>';
        itemId = id + '_name';
        content += '    <input type="text" size="22" id="' + itemId + '" name="' + itemId + '" style="float:left;">';

        itemId = id + '_value';
        content += '    <div class="customization_label">' + localize.t('tiq.ext.output') + '</div>';
        content += '    <input type="text" size="22" id="' + itemId + '" name="' + itemId + '" style="float:left;">';

        itemId = id + '_comment';
        content += '    <div class="customization_label">' + localize.t('tiq.ext.note') + '</div>';
        content += '    <input type="text" size="36" id="' + itemId + '" name="' + itemId + '" style="float:left;">';

		content += '<button onclick="if($(\'#' + id + '_setitem' + '\').siblings().length>=1){utui.customizations_template[100020].removeItem(\'' + id + '_setitem' + '\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus clickable"></i></button>';
		content += '<button onclick="utui.customizations_template[100020].addItem(\'' + container + '\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus clickable"></i></button>';

		content += '</div>';
		$('#' + container + '_tablecontainer').append(content);

		return id;
	},
	removeItem: function (container) {
		$('#' + container).remove();

		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}

		delete utui.data.customizations[this.container][container + '_name'];
		delete utui.data.customizations[this.container][container + '_value'];
		delete utui.data.customizations[this.container][container + '_comment'];

		utui.customizations.updateExtensionData(this.container);
	},
	// This will parse a delimited string into an array of
	// arrays. The default delimiter is the comma, but this
	// can be overriden in the second argument.
	CSVToArray: function (strData, strDelimiter) {
		// remove whitespace following commas
		strData = strData.replace(/,\s+/g, ',');
		// Check to see if the delimiter is defined. If not,
		// then default to comma.
		strDelimiter = (strDelimiter || ",");
		// Create a regular expression to parse the CSV values.
		var objPattern = new RegExp(
			(
				// Delimiters.
				"(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
				// Quoted fields.
				"(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
				// Standard fields.
				"([^\"\\" + strDelimiter + "\\r\\n]*))"
			),
			"gi"
		);
		// Create an array to hold our data. Give the array
		// a default empty first row.
		var arrData = [
			[]
		];
		// Create an array to hold our individual pattern
		// matching groups.
		var arrMatches = null;
		// Keep looping over the regular expression matches
		// until we can no longer find a match.
		while (arrMatches = objPattern.exec(strData)) {
			// Get the delimiter that was found.
			var strMatchedDelimiter = arrMatches[1];
			// Check to see if the given delimiter has a length
			// (is not the start of string) and if it matches
			// field delimiter. If id does not, then we know
			// that this delimiter is a row delimiter.
			if (
				strMatchedDelimiter.length &&
				(strMatchedDelimiter != strDelimiter)
			) {
				// Since we have reached a new row of data,
				// add an empty row to our data array.
				arrData.push([]);
			}
			// Now that we have our delimiter out of the way,
			// let's check to see which kind of value we
			// captured (quoted or unquoted).
			if (arrMatches[2]) {
				// We found a quoted value. When we capture
				// this value, unescape any double quotes.
				var strMatchedValue = arrMatches[2].replace(
					new RegExp("\"\"", "g"),
					"\""
				);
			} else {
				// We found a non-quoted value.
				var strMatchedValue = arrMatches[3];
			}
			// Now that we have our value string, let's add
			// it to the data array.
			arrData[arrData.length - 1].push(strMatchedValue);
		}
		// Return the parsed data.
		return (arrData);
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'varlookup') {
					if(value === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}

				if(key === 'var') {
					if(value === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}
			}
		}

		return validationObj;
	},
	toggleValue: function (item) {
		if ($('#' + item).is(':checked')) {
			$('#' + item).val('yes');
		} else {
			$('#' + item).val('no');
		}
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


// JSON Flatten
utui.customizations_template[100021] = {
	id: 100021,
	index: 0,
	container: '',
	template: {
		main: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';
					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.json_object')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'jsonobject', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.output_object')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'outputobject', '');
						v += '</div>';
					v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			content = '',
			tooltipObj = {},
			self = this;

		this.container = container;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var itemId = 'jsonobject';

		content += '<div class="customization_padded">';
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.json_object') + ' </div>';
		content += '    <div class="customization_item">';
		// content += '    <input type="text" size="32" id="' + itemId + '" name="' + itemId + '" style="float:left;">';


		var field = '<input type="text" size="32" id="' + itemId + '" name="' + itemId + '" style="float:left;">';
		content += utui.ui.template.form.validationWrapper(field, itemId);

		// content += '    <span id="' + itemId + '_error" class="bg-danger required-container pull-right" style="display:none;"></span>'
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';

		itemId = 'outputobject';

		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.output_object') + ' </div>';
		content += '    <div class="customization_item">';
		// content += '    <input type="text" size="32" id="' + itemId + '" name="' + itemId + '" style="float:left;">';

		var field = '<input type="text" size="32" id="' + itemId + '" name="' + itemId + '" style="float:left;">';
		content += utui.ui.template.form.validationWrapper(field, itemId);

		// content += '    <span id="' + itemId + '_error" class="bg-danger required-container pull-right" style="display:none;"></span>'
		content += '    </div>';
		content += '    </div>';
		content += '  </div>';
		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		$('#jsonobject').val(obj.jsonobject);
		$('#outputobject').val(obj.outputobject);

		utui.util.addTooltip(tooltipObj);
	},
	show: function (container) {},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'jsonobject') {
					if(value === '') {
						message = localize.t('tiq.validation.message.missing_json');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
				}
				else if(key === 'outputobject') {
					if(value === '') {
						message = localize.t('tiq.validation.message.missing_output_obj_var');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
				}
			}
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


// Tracking Opt Out
utui.customizations_template[100022] = {
	id: 100021,
	index: 0,
	container: '',
	template: {
		main: function(extensionObj) {
			var sharedView = utui.customizations_template.shared.view;
			var v = '';

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), 'No configuration necessary.');
			return v;
		}
	},
    setRulesOnView: function(extensionObj, namespace) {
        var obj = extensionObj,
            target = '';

        function $data(key) {
            if(namespace) {
                return $('#'+namespace).find('span[data-key="'+key+'"]');
            }
            return $('span[data-key="'+key+'"]');
        }
    },
    getValue: function(extensionObj, key) {
        var value = extensionObj[key],
            roValue = '',
            options = {},
            dsCollection;

        switch(key) {
            default:
                roValue = dsapi.getDataSourceFormattedName(value)
                break;
        }

        return roValue;
    },
	fillData: function (container, fillFlag, cb) {
		this.container = container;

		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var content = '<div class="customization_padded">';
		content += '  <div><div class="customization_div">';
		content += '    <div class="customization_item">' + localize.t('tiq.ext.activate_extension_include_link') + '<br /><br />';
		content += '    Opt In: <input type="text" size="72" style="max-width: 400px;" value="<a href=\'javascript:utag_trackingOptIn()\'>' + localize.t('tiq.ext.tracking_opt_in') + '</a>"><br>';
		content += '    Opt Out: <input type="text" size="72" style="max-width: 400px;" value="<a href=\'javascript:utag_trackingOptOut()\'>' + localize.t('tiq.ext.tracking_opt_out') + '</a>">';
		content += '    </div>';
		content += '  </div>';
		$('#customizations_' + container + '_content').html(content);

		if(cb) cb();
	},
	show: function (container) {},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


// TnT Content Modification
utui.customizations_template[100023] = {
	id: 100023,
	index: 0,
	container: '',
	template: {
		main: function(extensionObj) {
			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					if(dynamic.length > 0)
						v += this.setConfigurationView(extensionObj, dynamic);

					v += '</div>';
				v += '</div>';

				v += this.rules(extensionObj);
			return v;
		},
		setConfigurationView: function(extensionObj, dynamic) {
			var v = '';
				for (var i = 0; i < dynamic.length; i++) {

					v += '<div class="row-fluid">';
						v += '<div class="span12">';
							v += '<h3>TnT '+localize.t('tiq.ext.content_modification')+' '+(i+1)+'</h3>';
						v += '</div>';
					v += '</div>';

					v += '<div class="container-fluid">';
						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.element_type')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_type', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.identifier')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_domid', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.mod_position')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_position', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.mbox_div_id')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_mboxid', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.static_params')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_mboxparams', '');
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.flicker_free_enabled')+'</span>';
							v += '</div>';

							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_flickerFree', '');
							v += '</div>';
						v += '</div>';

					v += '</div>';
				};
			return v;
		},
		rules: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.condition')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += utui.customizations_template.shared.getConditionalView(utui.util.interpret.extension.condition.toFormatted(extensionObj));
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_0code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for(var i in configDynamicObj) {
			var obj = configDynamicObj[i][0],
				keyType = obj._parentInstanceId + '_type',
				keyPos = obj._parentInstanceId + '_position';

			switch(key) {
				case keyType:
					if(extensionObj[keyType] === 'domid') return localize.t('tiq.ext.dom_id');
					if(extensionObj[keyType] === 'xpath') return localize.t('tiq.ext.xpath');
					break;
				case keyPos:
					if(extensionObj[keyPos] === 'insertbefore') return localize.t('tiq.ext.before_node');
					if(extensionObj[keyPos] === 'insertafter') return localize.t('tiq.ext.after_node');
					if(extensionObj[keyPos] === 'insertfirst') return localize.t('tiq.ext.beginning_of_node');
					if(extensionObj[keyPos] === 'insertlast') return localize.t('tiq.ext.end_of_node');
					if(extensionObj[keyPos] === 'replace') return localize.t('tiq.ext.replace_node_content');
					if(extensionObj[keyPos] === 'replacenode') return localize.t('tiq.ext.replace_node');
					if(extensionObj[keyPos] === 'replacekeepdefault') return localize.t('tiq.ext.replace_node_content_leave_default');
					break;
				}
		};

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "position":
				options = {
					insertbefore: localize.t('tiq.ext.before_node'),
					insertafter: localize.t('tiq.ext.after_node'),
					insertfirst: localize.t('tiq.ext.beginning_of_node'),
					insertlast: localize.t('tiq.ext.end_of_node'),
					replace: localize.t('tiq.ext.replace_node_content'),
					replacenode: localize.t('tiq.ext.replace_node'),
					replacekeepdefault: localize.t('tiq.ext.replace_node_content_leave_default')
				}

				roValue = options[value];
				break;
			case "type":
				options = {
					domid: localize.t('tiq.ext.dom_id'),
					xpath: localize.t('tiq.ext.xpath')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		this.container = container;

		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var content = '<div class="customization_padded">';
		// Set Items
		content += '  <div><div class="customization_div">';
		content += '        <div id="' + container + '_setcontainer" class="customization_item" style="float:left">';
		content += '    </div>';
		content += '  </div>';

        // Conditions
        content += '  <div><div class="customization_div">';
        content += '    <div class="customization_label" style="float:left">' +localize.t('tiq.ext.condition') + '</div>';
        content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini ext-data-action">' + localize.t('tiq.ext.add_condition') + '</button></div>';
        content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left">';
        content += '    </div>';
        content += '    </div>';
        content += '  </div>';
        content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_domid') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			utui.customizations_template[this.id].addSetItem(container);
		}

		if (typeof fillFlag != 'undefined' && fillFlag) {
			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_domid') >= 0) {
					var setId = i.substring(0, i.indexOf('_domid'));
					var itemId = utui.customizations_template[this.id].addSetItem(container, setId);
					$('#' + itemId + '_type').val(obj[setId + '_type']);
					$('#' + itemId + '_domid').val(obj[setId + '_domid']);
					$('#' + itemId + '_position').val(obj[setId + '_position']);
					$('#' + itemId + '_mboxid').val(obj[setId + '_mboxid']);
					$('#' + itemId + '_mboxparams').val(obj[setId + '_mboxparams']);
					$('#' + itemId + '_flickerFree').prop('checked', (obj[setId + '_flickerFree'] === 'yes'));
					if (obj[setId + '_position'].indexOf('replacekeepdefault') === -1) {
						$('#' + itemId + '_flickerFree').attr("disabled", true);
					} else {
						$('#' + itemId + '_flickerFree').attr("disabled", false);
					}
					utui.customizations_template[100023].toggleValue(itemId + '_flickerFree');
					utui.customizations_template[this.id].updateSetOption(itemId);
				}
			}
			// Set up the conditions for ext 100023
			utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,100023);

		} else {
			utui.customizations_template[this.id].addSetItem(container);
		}
		// $("#" + container).find(":button").button();
		$('#button_addcondition').attr('onClick', 'utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()');

		if(cb) cb();
	},
	show: function (container) {},
	addSetItem: function (container, instanceId) {
		if (typeof utui.customizations.tmpExtData == 'undefined') {
			utui.customizations.tmpExtData = {};
		}
		if (typeof utui.customizations.tmpExtData[100023] == 'undefined') {
			utui.customizations.tmpExtData[100023] = {};
		}

		if (typeof instanceId != "undefined") {
			var id = instanceId;
			utui.customizations.tmpExtData[100023][id] = 'defined';
		} else {
			var id = utui.util.getContainerId();
			utui.customizations.tmpExtData[100023][id] = 'new';
		}
		var content = '';
		content += '<div id="' + id + '" class="widget-container">';

		content += '<div class="pull-right">';
			content += '<button onclick="if($(\'#' + id + '\').siblings().length>=1){utui.customizations_template[' + this.id + '].removeSetItem(\'' + id + '\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus clickable"></i></button>';
			content += '<button onclick="utui.customizations_template[' + this.id + '].addSetItem(\'' + container + '\')" class="btn btn-mini"><i class="icon-plus clickable js-action-addbtn"></i></button>';
		content += '</div>';

        var itemId = id + '_type';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.element_type') + '</div><div class="customization_item">';
        content += '<select id="' + itemId + '" name="' + itemId + '">';
        content += '  <option value="domid">' + localize.t('tiq.ext.dom_id') + '</option>';
        content += '  <option value="xpath">' + localize.t('tiq.ext.xpath') + '</option>';
        content += '</select></div></div>';
        itemId = id + '_domid';
        content += '  <div class="config_item" style="clear:both;"><div class="customization_labelwide">' + localize.t('tiq.ext.identifier') + '</div><div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="48" style="margin:5px;"></div></div>';

        var itemId = id + '_position';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.mod_position') + '</div><div class="customization_item">';

        var posSelId = itemId;
        content += '<select id="' + itemId + '" name="' + itemId + '">';
        content += '  <option value="insertbefore">' + localize.t('tiq.ext.before_node') + '</option>';
        content += '  <option value="insertafter">' + localize.t('tiq.ext.after_node') + '</option>';
        content += '  <option value="insertfirst">' + localize.t('tiq.ext.beginning_of_node') + '</option>';
        content += '  <option value="insertlast">' + localize.t('tiq.ext.end_of_node') + '</option>';
        content += '  <option value="replace">' + localize.t('tiq.ext.replace_node_content') + '</option>';
        content += '  <option value="replacenode">' + localize.t('tiq.ext.replace_node') + '</option>';
        content += '  <option value="replacekeepdefault">' + localize.t('tiq.ext.replace_node_content_leave_default') + '</option>';
        content += '</select></div></div>';

        itemId = id + '_mboxid';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.mbox_div_id') + '</div><div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="24" style="margin:5px;"></div></div>';

        itemId = id + '_mboxparams';
        content += '  <div class="config_item" style="clear:both;"><div class="customization_labelwide">' + localize.t('tiq.ext.static_params') + '</div><div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="64"  style="margin-left:5px;"></div>';
        content += '    <span style="margin-top:5px;margin-left:2px;float:right" id="' + itemId + '_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100023_params_tooltip + '"></span>';
        content += '  </div>';

        var ffItemId = id + '_flickerFree';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.flicker_free') + '</div><div class="customization_item" style="padding:4px; width:640px">';
        content += '  <span id="' + ffItemId + '_tooltip" title="' + localize.t('tiq.ext.flicker_free_logic_requires') + '">';
        content += '  <input type="checkbox" id="' + ffItemId + '" name="' + ffItemId + '" disabled onchange="utui.customizations_template[100023].toggleValue(\'' + ffItemId + '\');"></span>&nbsp;&nbsp;';
        content += localize.t('tiq.ext.flicker_free_option_requires') + '</div></div>';
        content += '  <div style="clear:both"></div>';

        content += '<input type="hidden" id="multiScopeLoad" name="multiScopeLoad" value="sync,preload,domready" />';
        $('#' + container + '_setcontainer').append(content);
        // Logic to disable the flicker free option if it's not a replacekeepdefault selection.
        $('#' + posSelId).change(function (evt) {
            var myId = evt.currentTarget.id.substring(0, evt.currentTarget.id.indexOf("_position"));
            var ffID = myId + "_flickerFree";
            if (evt.currentTarget.value.indexOf('replacekeepdefault') !== -1) {
                $("#" + ffID).prop("disabled" , false);
                $("#" + ffID).prop('checked', true);
                if (utui.data.publish.enable_sync_loader !== "yes") {
                    utui.data.publish.enable_sync_loader = "yes";
                    utui.util.showStatusMessage(localize.t('tiq.ext.weve_turned_on_utag'), true);
                }
            } else {
                $("#" + ffID).attr("disabled", true);
                $("#" + ffID).prop('checked', false);
            }
            utui.customizations_template[100023].toggleValue(ffID);
        });
        if (utui.customizations.tmpExtData[100023][id] == 'new') {
            $('#' + id + '_position').val('replacekeepdefault');
            $("#" + id + '_flickerFree').prop("disabled" , false);
            $("#" + id + '_flickerFree').prop('checked', true);
            utui.data.publish.enable_sync_loader = "yes";
            utui.customizations_template[100023].toggleValue(id + '_flickerFree');
        }

		var tooltipObj = {};
		tooltipObj[ffItemId + '_tooltip'] = {
			gravity: 'w'
		};
		utui.util.addTooltip(tooltipObj);
		utui.customizations_template[this.id].updateSetOption(id);

		return id;
	},
	updateSetOption: function (container) {
		var itemId = container + '_setoption';
		if ($('#' + itemId).val() == 'var') {
			$('#' + container + '_settovar').show();
			$('#' + container + '_settotext').hide();
		} else {
			$('#' + container + '_settotext').show();
			$('#' + container + '_settovar').hide();
		}
	},
	removeSetItem: function (container) {
		$('#' + container).remove();

		delete utui.data.customizations[this.container][container + '_domid'];
		delete utui.data.customizations[this.container][container + '_flickerFree'];
		delete utui.data.customizations[this.container][container + '_mboxid'];
		delete utui.data.customizations[this.container][container + '_mboxparams'];
		delete utui.data.customizations[this.container][container + '_position'];
		delete utui.data.customizations[this.container][container + '_type'];

		utui.customizations.updateExtensionData(this.container);
	},
	toggleValue: function (item) {
		if ($('#' + item).is(':checked')) {
			$('#' + item).val('yes');
		} else {
			$('#' + item).val('no');
		}
	},
    addCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);		
	},
	removeCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},
	activationCheck: function(extId){
		var okToActivate = true;
		_.each(utui.data.customizations,function(ext){
			if (ext.id === "100038" && ext.status === "active"){
				okToActivate = false;
			}
		});
		
		return okToActivate;
	},
	
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			// do nothing
		}

		if(dynamicConfigCollection.length > 0) {
			// do nothing
		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}

				};
			};
		}

		// Check for an active instance of an new style Adobe Tag extension
		if (extObj.status === "active"){
			if (utui.customizations_template[100023].activationCheck() == false){
				exapi.setStatus(extObj._id, 'inactive');
				$('#customizations_'+extObj._id).find('.js-status-toggle').children('span').removeClass('container_status_active').addClass('container_status_inactive');

				var confirmationContent= localize.t('tiq.ext.simultaneous_tnt');

				$("#dialog-confirmation-content").html(confirmationContent);

				$("#dialog-confirmation").dialog({
					autoOpen: true,
					height: 'auto',
					width: 'auto',
					modal: true,
					closeOnEscape: false,
					closeText: "",
					close: function( event, ui ) {
						
					},
					resizable: false,
					draggable: true,
					buttons: [
						{
							text: localize.t('tiq.dialog.button.ok'),
							id: 'confirmDisableSimultaneosTnt',
							click: function() {
								$(this).dialog('close');
							}
						}
					]
				});									
			}			
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}

// Data Validation and Error Reporting
utui.customizations_template[100024] = {
	id: 100024,
	index: 0,
	container: '',
	template: {
		main: function(extensionObj) {

			var conditions = utui.util.interpret.extension.condition.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					v += '<span class="inline-label">'+localize.t('tiq.ext.validate_on')+'</span> '+utui.ui.template.form.readonly.inputItemView(null, 'rule', '');

					if(conditions.length > 0)
						v += this.getConditionalLabelView(conditions);

					v += '</div>';
				v += '</div>';
			return v;
		},
		getConditionalLabelView: function(formattedObj) {
			var content = '',
				contentHeader = '',
				orCondition,
				andCondition,
				objectKey,
				exclusionInputMap = ['defined', 'notdefined', 'populated', 'notpopulated'],
				className = '';

			content += '<div class="condition-container">';

			for (var i = formattedObj.length - 1; i >= 0; i--) {
				orCondition = formattedObj[i];

				if(!utui.util.interpret.isOrConditionValid(orCondition)) continue;


				for (var k = 0; k < orCondition.length; k++) {
					andCondition = orCondition[k];

					if(andCondition._instanceId === '0') {
						channelKey = andCondition._parentInstanceId + '_label';

						contentHeader = '<div class="condition-custom" style="border-top: 1px dashed #ddd; margin-top:12px; padding-top:12px;">';
							contentHeader += '<div class="row-fluid">';
								contentHeader += '<div class="span12">';
									contentHeader += '<span class="inline-label">'+localize.t('tiq.ext.label')+'</span> '+utui.ui.template.form.readonly.inputItemView(null, channelKey, '');
								contentHeader += '</div>';
							contentHeader += '</div>';
						contentHeader += '</div>';
					}
				}

				content += contentHeader;
				content += '<div class="row-fluid">';
					content += '<div class="span12">';

						content += '<div class="condition">';

						for (var k = 0; k < orCondition.length; k++) {
							andCondition = orCondition[k];

							content += '<span class="inline-label">'+localize.t('tiq.ext.failure_if')+'</span> ';

							keyMapping = utui.util.interpret.getConditionalKeyMapping(andCondition);

							for (var key in keyMapping) {
								if(!keyMapping.hasOwnProperty(key)) continue;

								if(key.indexOf('_') === 0) continue; // ignore private keys

								if(andCondition._instanceId === "0") {
									objectKey = andCondition._parentInstanceId + '_' + keyMapping[key];
								}
								else {
									objectKey = andCondition._parentInstanceId + '_' + andCondition._instanceId + '_' + keyMapping[key];
								}

								// (2) Operator
								if(key == 1) {
									// TODO: interpret operator values
									className = "condition-cell-operator";
									content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, ruleapi.condition.interpretOperatorValue(andCondition[keyMapping[1]]))+'</span>';
								}
								// (3) Value
								else if(key == 2) {
									className = "condition-cell-value";

									if(!~exclusionInputMap.indexOf(andCondition[keyMapping[1]])) {
										content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[2]])+'</span>';

										if(ruleapi.condition.isOperatorIgnoreCase(andCondition[keyMapping[1]])) {
											content += '<span class="condition-strict-case inline-label">'+localize.t('tiq.rules.case_insensitive')+'</span>';
										}
									}
								}
								// (1) Input
								else {
									className = "condition-cell-input";
									content += '<span class="condition-cell '+className+'">'+utui.ui.template.form.readonly.inputItemView(null, objectKey, andCondition[keyMapping[3]])+'</span>';
								}
							};
						};

						content += '</div>';
					content += '</div>';
				content += '</div>';
			};

			content += '</div>';

			return content;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		this.container = container;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var content = '';
		var itemId = '';
		content += '<div class="customization_padded">';

		content += '  <div class="customization_div" style="min-width:600px">';
		content += '    <div class="customization_labelwide">'+localize.t('tiq.ext.validate_on')+'</div>';
		content += '    <div class="customization_item">';

		var field = '<select id="rule" name="rule" placeholder="'+localize.t('tiq.ext.select_a_loadrule')+'"></select>';
		content += utui.ui.template.form.validationWrapper(field, 'rule');

		content += '    </div>';
		content += '    <div class="inline">';
		content += '      <button onclick="utui.loadrules.view.showAddMore(\'create\',function(){utui.customizations_template[100024].setRules()})" class="btn btn-mini"><i class="icon-plus" id="' + container + '_addmore_tooltip" title="'+localize.t('tiq.ext.click_here_to_create_loadrule')+'"></i></button>';
		content += '    </div>';
		content += '  </div>';
		// Items
		content += '  <div class="customization_div">';
		content += '    <div class="customization_item"><button id="button_additem" class="btn js-action-addbtn">'+localize.t('tiq.ext.add_data_validation_rule')+'</button>';
		content += '    </div>';
		content += '    <div id="' + container + '_itemcontainer"></div>';
		content += '  </div>';
		content += '</div>';

		$('#customizations_' + container + '_content').html(content);
		var tooltipObj = {};
		tooltipObj[container + '_additem_tooltip'] = {
			gravity: 'w'
		};
		utui.util.addTooltip(tooltipObj);
		$('#rule').on('change', function () {
			utui.customizations_template[100024].showEditRule(container)
		});
		this.setRules();

		if (typeof fillFlag != 'undefined' && fillFlag) {
			var obj = utui.data.customizations[container];
			//$('input[name="'+container+'_jserror"]')[(obj.jserror=='yes')?0:1].checked = true;
			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_source') >= 0 && i.split('_').length <= 2) {
					$('#button_additem').hide();
					var checkId = i.substring(0, i.indexOf('_source'));
					var itemId = utui.customizations_template[100024].addItem(container, checkId);
					$('#' + itemId + '_label').val(obj[i.replace('_source', '_label')]);
					$('#' + itemId + '_source').val(obj[i]);
					$('#' + itemId + '_source').select2('val', obj[i]);

					$('#' + itemId + '_filtertype').val(obj[i.replace('_source', '_filtertype')]);
					$('#' + itemId + '_filtertype').select2('val', obj[i.replace('_source', '_filtertype')]);

					$('#' + itemId + '_filter').val(obj[i.replace('_source', '_filter')]);
					$('#' + itemId + '_filter').select2('val', obj[i.replace('_source', '_filter')]);

					utui.customizations_template.util.operatorSelectHandler(itemId);
				}
			}
		}
		// $("#" + container).find(":button").button();
		$('#button_additem').attr('onClick', '{utui.customizations_template[100024].addItem(\'' + container + '\');$(\'#button_additem\').hide()}');

		if(cb) cb();
	},
	show: function (container) {},
	addItem: function (container, instanceId) {
		var id = instanceId || utui.util.getContainerId();
		var addItem = '{"template":"100024","action":"addItem","container":"' + container + '"}';
		var removeItem = '{"template":"100024","action":"removeItem","container":"' + id + '"}';
		var content = '';

		// Check Item
		var itemId = id + '_label';
		content += '<div id="' + id + '_item" class="nooverflow widget-container" style="margin-top:2px; position:relative; padding-top:10px; padding-bottom:10px">';
		content += '<div id="' + id + '_buttons" class="pull-right">';
			content += '<button data-action=\'' + removeItem + '\' class="btn btn-mini ext-data-action js-action-removebtn" title="'+localize.t('tiq.ext.remove_data_validation_check')+'"><i class="icon-minus clickable js-action-removebtn"></i></button>';
			content += '<button data-action=\'' + addItem + '\' class="btn btn-mini ext-data-action js-action-addbtn" title="'+localize.t('tiq.ext.add_data_validation_check')+'"><i class="icon-plus clickable js-action-addbtn"></i></button>';
		content += '</div>';

        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.label') + '</div>';
        content += '    <div class="customization_item">';
        content += '      <input type="text" size="32" id="' + itemId + '" name="' + itemId + '">';
        content += '    </div>';
        content += '    <div class="customization_labelwide" style="clear:both">' + localize.t('tiq.ext.failure_if') + '</div>';
        content += '    <div class="customization_item">';

		itemId = id + '_source';
		content += '<span id="' + itemId + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({ item: itemId, container: container, id: 100024 });
		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		content += '    <input type="text" size="32" id="' + itemId + '" name="' + itemId + '">';

		content += '</div>';
		content += '</div>';

		$('#' + container + '_itemcontainer').append(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_source', true);

		return id;
	},
	removeItem: function (container) {
		if ($('#' + container + '_item').siblings().length < 1) {
			$('#button_additem').show()
		}
		$('#' + container + '_item').remove();
		//$('#'+container+'_buttons').remove();

		delete utui.data.customizations[this.container][container + '_filter'];
		delete utui.data.customizations[this.container][container + '_filtertype'];
		delete utui.data.customizations[this.container][container + '_label'];
		delete utui.data.customizations[this.container][container + '_source'];

		utui.customizations.updateExtensionData(this.container);
	},
	setRules: function (editFlag) {
		var rules = utui.util.cp(utui.loadrules.config);
		var container = utui.customizations_template[100024].container;
		delete rules[0];
		var obj = utui.data.customizations[container];
		if (editFlag) {
			obj.rule = $('#rule :selected').val();
		}
		utui.loadrules.setLoadRulesSelect('rule', rules);
		$('#rule').val(obj.rule);
		utui.customizations_template[100024].showEditRule(container);
	},
	showEditRule: function (container) {
		var pr = $('#rule').val();
		if (pr != 'all') {
			$('#editrule').show();
		} else {
			$('#editrule').hide();
		}
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'var') {
					if(value === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(value)) {
						message = utui.validation.message.missingVariable( value );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', value);
					}
				}
			}
		}

		if(dynamicConfigCollection.length > 0) {

		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.set);
					}

				};
			};
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//Customization 100025 - PathName Tokenizer
utui.customizations_template[100025] = {
	id: 100025,
	template: {
		main: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';
						v += '<div class="row-fluid">';
							v += '<div class="span12">';
								v += '<strong>'+localize.t('tiq.ext.no_configuration_needed')+'</strong>';
							v += '</div>';
						v += '</div>';
					v += '</div>';
				v += '</div>';

			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var templateObj = exapi.getTemplateObject(this.id),
			obj = exapi.getObjectByExtensionId(container),
			content = '';

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);

		content += '<div class="customization_padded">';
			content += '<p style="font-weight: bold;">'+localize.t('tiq.ext.no_configuration_needed')+'</p>';
			content += '<p>'+templateObj.description+'</p>';
			content += '<p>Ex: http://www.example.com/_pathname1/_pathname2/.../_pathname8</p>';
		content += '</div>';

		$('#customizations_'+container+'_content').html(content);

		if(cb) cb();
	},
	show: function (container) {},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


// Multi tag opt - Privacy Manager
utui.customizations_template[100026] = {
    id: 100026,
    index: 0,
    container: '',
    widgetDomMap: {
        "domid": localize.t('tiq.ext.dom_id'),
        "xpath": localize.t('tiq.ext.xpath')
    },
    widgetPositionMap: {
        "insertbefore": localize.t('tiq.ext.before_node'),
        "insertafter": localize.t('tiq.ext.after_node'),
        "insertfirst": localize.t('tiq.ext.beginning_of_node'),
        "insertlast": localize.t('tiq.ext.end_of_node'),
        "replace": localize.t('tiq.ext.replace_node_content'),
        "replacenode": localize.t('tiq.ext.replace_node')
    },
	template: {
		main: function(extensionObj) {
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getDynamicConfiguration(extensionObj);
				_x += this.getStaticConfiguration(extensionObj);

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);

				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += sharedView.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}

			return v;
		},
		getStaticConfiguration: function(extensionObj) {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			// Added a fix since the key may go missing
			var singleCookieReqValue = (function() {
				if(extensionObj.singleCookieReq === '1') {
					return localize.t('tiq.ext.remove_tealium_cookie');
				} else {
					return localize.t('tiq.ext.retain_tealium_cookie');
				}
			})();

			var v = '';
				v += _row(localize.t('tiq.ext.opt_method'), _input(null, 'optMethod', ''));
				v += _row(localize.t('tiq.ext.single_cookie_req'), _input(null, 'singleCookieReq', singleCookieReqValue));
				v += _row(localize.t('tiq.ext.visitor_selection_type'), _input(null, 'visitorSelectionType', ''));

			if($.isEmptyObject(extensionObj.categories) || extensionObj.categories === '' || extensionObj.categories === '{}') return v;

			var _v = '';
			var categoryArr = [];
			var categoryName;
			var categoryCollectionObj = JSON.parse(utui.util.safeUnescape(extensionObj.categories));

			_v += '<h3 style="text-transform:uppercase;">'+localize.t('tiq.ext.categories')+'</h3>';

			for(var key in categoryCollectionObj) {
				var categoryName = key;
				var categoryObj = categoryCollectionObj[key];
				var categoryDesc = categoryObj.desc;

				_v += '<div style="height:24px; width:100%;"></div>';
				_v += _row(localize.t('tiq.ext.category'), _input(null, 'categoryName', categoryName ));
				_v += _row(localize.t('tiq.ext.description'), _input(null, 'categoryDesc', categoryDesc ));

				var tagCollectionObj = categoryObj.tags;

				for(var i in tagCollectionObj) {
					_v += _row('', _input(null, 'tag_'+tagCollectionObj[i].tag_id, tagCollectionObj[i].tag_name ));
				};
			}

			_v += '<div style="height:24px; width:100%;"></div>';
			_v += '<h3 style="text-transform:uppercase;">'+localize.t('tiq.ext.omitted_tags')+'</h3>';

			for(var key in categoryCollectionObj) {
				var categoryObj = categoryCollectionObj[key];
				var tagCollectionObj = categoryObj.tags;

				for(var i in tagCollectionObj) {
					_v += _row(tagCollectionObj[i].tag_name, _input(null, 'tag_'+tagCollectionObj[i].tag_id, (tagCollectionObj[i].on === 'true' ? localize.t('tiq.ext.default') : localize.t('tiq.ext.always_served')) ));
				};
			}

			v += _v;

			return v;
		},
		getDynamicConfiguration: function(extensionObj) {
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;
			var obj = {};
			var keyDom;
			var keyPos;
			var keyType;

			var v = '';
				// Configuration
				if(!$.isEmptyObject(configDynamicObj)) {
					obj = configDynamicObj[0][0];
					keyDom = obj._parentInstanceId + '_domid';
					keyPos = obj._parentInstanceId + '_position';
					keyType = obj._parentInstanceId + '_type';

					v += _row(localize.t('tiq.ext.element_type'), _input(null, keyType, extensionObj[keyType] ));
					v += _row(localize.t('tiq.ext.identifier'), _input(null, keyDom, extensionObj[keyDom] ));
					v += _row(localize.t('tiq.ext.position'), _input(null, keyPos, extensionObj[keyPos] ));
				}

			return v;
		}
	},
    setRulesOnView: function(extensionObj, namespace) {
        var obj = extensionObj,
            target = '';

        function $data(key) {
            if(namespace) {
                return $('#'+namespace).find('span[data-key="'+key+'"]');
            }
            return $('span[data-key="'+key+'"]');
        }

        function showRow(key) {
        	$data(key).closest('.row-fluid').show();
        }

        function hideRow(key) {
        	$data(key).closest('.row-fluid').hide();
        }
    },
    getValue: function(extensionObj, key) {
        var value = extensionObj[key],
            roValue = '',
            options = {},
            dsCollection;

        var obj,
        	keyType,
        	keyPos,
        	keyDom;

		var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		if(configDynamicObj.length) {
			obj = configDynamicObj[0][0];
			keyType = obj._parentInstanceId + '_type';
			keyPos = obj._parentInstanceId + '_position';
			keyDom = obj._parentInstanceId + '_domid';
		}

        switch(key) {
        	case keyType:
        		if(extensionObj[keyType] === 'domid') roValue = localize.t('tiq.ext.dom_id');
        		if(extensionObj[keyType] === 'xpath') roValue = localize.t('tiq.ext.xpath');
        		break;
        	case keyPos:
        		if(extensionObj[keyPos] === 'insertbefore') roValue = localize.t('tiq.ext.before_node');
        		if(extensionObj[keyPos] === 'insertafter') roValue = localize.t('tiq.ext.after_node');
        		if(extensionObj[keyPos] === 'insertfirst') roValue = localize.t('tiq.ext.beginning_of_node');
        		if(extensionObj[keyPos] === 'insertlast') roValue = localize.t('tiq.ext.end_of_node');
        		if(extensionObj[keyPos] === 'replace') roValue = localize.t('tiq.ext.replace_node_content');
        		if(extensionObj[keyPos] === 'replacenode') roValue = localize.t('tiq.ext.replace_node');
        		break;

			case "visitorSelectionType":
				if(extensionObj.visitorSelectionType === '1') {
					roValue = localize.t('tiq.ext.by_category');
				} else {
					roValue = localize.t('tiq.ext.by_tag');
				}
				break;
			case "optMethod":
				if(extensionObj.optMethod === '1') {
					roValue = localize.t('tiq.ext.opted_out_default');
				} else {
					roValue = localize.t('tiq.ext.opted_in_default');
				}
				break;
			case "singleCookieReq":
				if(extensionObj.singleCookieReq === '1') {
					roValue = localize.t('tiq.ext.remove_tealium_cookie');
				} else {
					roValue = localize.t('tiq.ext.retain_tealium_cookie');
				}
				break;
            default:
                roValue = dsapi.getDataSourceFormattedName(value)
                break;
        }

        return roValue;
    },

    fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

    	this.container = container;

        utui.customizations.privacyMgrExtId = container;
        var customization = utui.data.customizations[container];
        var content = '<div>';
        var categoryId = "categories";
        var visitorSelectionTypeId = "visitorSelectionType";
        var optMethodId = "optMethod";
        var singleCookieReqId = "singleCookieReq";
        var lastUnqCatNoId = "lastUnqCatNo";
        var catNmIdLkpId = "catNameIdLookup";

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------


        var itemId;
        if (customization) {
            for (var key in customization) {
                if (key.indexOf('_domid') >= 0) {
                    itemId = key.substring(0, key.indexOf('_domid'));
                    break;
                }
            }
        }
        if (itemId)
            this.itemId = itemId;
        else
            this.itemId = utui.util.getContainerId();

        var elementTypeId = this.itemId + "_type";
        var elementDomId = this.itemId + "_domid";
        var elementPositionId = this.itemId + "_position";

		content += '<input type="hidden" id="' + elementTypeId + '" name="' + elementTypeId + '" value="" />';
		content += '<input type="hidden" id="' + elementDomId + '" name="' + elementDomId + '" value="" />';
		content += '<input type="hidden" id="' + elementPositionId + '" name="' + elementPositionId + '" value="" />';
		content += '</div>';

		content += '<div id="multi_opt_out_content" />';
		content += '<input type="hidden" id="' + categoryId + '" name="' + categoryId + '" value="" />';
		content += '<input type="hidden" id="' + visitorSelectionTypeId + '" name="' + visitorSelectionTypeId + '" value="0" />';
		content += '<input type="hidden" id="' + optMethodId + '" name="' + optMethodId + '" value="0" />';
		content += '<input type="hidden" id="' + lastUnqCatNoId + '" name="' + lastUnqCatNoId + '" value="0" />';
		content += '<input type="hidden" id="' + catNmIdLkpId + '" name="' + catNmIdLkpId + '" value="{}" />';
		content += '<input type="hidden" id="multiScopeLoad" name="multiScopeLoad" value="preload,domready" />';

		$('#customizations_' + container + '_content').html(content);

        $("#multi_opt_out_content").addClass('customization_padded').append(
            $("<div />", {
                "class": "optout_row"
            }).append(
                $("<div />", {
                    "class": "header"
                }).text(localize.t('tiq.ext.widget_type'))
            ).append(
                $("<span />", {
                    "id": "element_type"
                })
            )
        ).append(
            $("<div />", {
                "class": "optout_row"
            }).append(
                $("<div />", {
                    "class": "header"
                }).text(localize.t('tiq.ext.widget_identifier'))
            ).append(
                $("<span />", {
                    "id": "element_identifier"
                })
            )
        ).append(
            $("<div />", {
                "class": "optout_row"
            }).append(
                $("<div />", {
                    "class": "header"
                }).text(localize.t('tiq.ext.widget_position'))
            ).append(
                $("<span />", {
                    "id": "element_position"
                })
            )
        ).append(
            $("<div />", {
                "class": "optout_row"
            }).append(
                $("<div />", {
                    "class": "header"
                }).text(localize.t('tiq.ext.opt_method'))
            ).append(
                $("<span />", {
                    "id": "multioptout_method"
                }).text(localize.t('tiq.ext.opted_in_default'))
            )
        ).append(
            $("<div />", {
                "class": "optout_row"
            }).append(
                $("<div />", {
                    "class": "header"
                }).text(localize.t('tiq.ext.visitor_selection_type'))
            ).append(
                $("<span />", {
                    "id": "multioptout_visitor_selection_type"
                }).text(localize.t('tiq.ext.choose_by_tag'))
            )
        ).append(
            $("<div />", {
                "class": "optout_row"
            }).append(
                $("<div />", {
                    "class": "header"
                }).text(localize.t('tiq.ext.single_cookie_restriction'))
            ).append(
                $("<span />", {
                    "id": "single_cookie_req"
                }).text(localize.t('tiq.ext.retain_tealium_cookie'))
            )
        ).append(
            $("<p />").text(localize.t('tiq.ext.all_tags_are_eligible_opt_out'))
        );

		if (typeof fillFlag != 'undefined' && fillFlag) {
			var obj = utui.data.customizations[container];
			var isNewExtension = false;
			for (var i in utui.util.getVars(obj, 2)) {

				if (i.indexOf('_domid') >= 0) {
					var setId = i.substring(0, i.indexOf('_domid'));
					$('#' + this.itemId + '_type').val(obj[setId + '_type']);
					$('#' + this.itemId + '_domid').val(obj[setId + '_domid']);
					$('#' + this.itemId + '_position').val(obj[setId + '_position']);

					$("#element_type").text(this.widgetDomMap[obj[setId + '_type']]);
					$("#element_identifier").text(obj[setId + '_domid']);
					$("#element_position").text(this.widgetPositionMap[obj[setId + '_position']]);
				}
				else if (i.indexOf('_source') >= 0) {
					var sourceId = i.substring(0, i.indexOf('_source'));
					var $sourceInput = $("#" + sourceId + "_source");
					if ($sourceInput.length > 0) {
						$sourceInput.val(obj[i]);
						$sourceInput.select2('val', obj[i]);
					} else {
						$("#" + container).append(
							$("<input />", {
								"type": "hidden",
								id: sourceId + "_source",
								name: sourceId + "_source"
							}).val(obj[i]).attr("iscondition", "true")
						)
					}
					continue;
				}
				else if (i.indexOf('_filtertype') >= 0) {
					var filterTypeId = i.substring(0, i.indexOf('_filtertype'));
					var $filterTypeInput = $("#" + filterTypeId + "_filtertype");
					if ($filterTypeInput.length > 0) {
						$filterTypeInput.val(obj[i]);
					} else {
						$("#" + container).append(
							$("<input />", {
								"type": "hidden",
								id: filterTypeId + "_filtertype",
								name: filterTypeId + "_filtertype"
							}).val(obj[i]).attr("iscondition", "true")
						)
					}
					continue;
				}
				else if (i.indexOf('_filter') >= 0) {
					var filterId = i.substring(0, i.indexOf('_filter'));
					var $filterInput = $("#" + filterId + "_filter");
					if ($filterInput.length > 0) {
						$filterInput.val(obj[i]);
					} else {
						$("#" + container).append(
							$("<input />", {
								"type": "hidden",
								id: filterId + "_filter",
								name: filterId + "_filter"
							}).val(obj[i]).attr("iscondition", "true")
						)
					}
					continue;
				}

                if (i === "optMethod") {
                    var optMethod = obj[i];
                    $("#multioptout_method").text(optMethod == "0" ? localize.t('tiq.ext.opted_in_default') : localize.t('tiq.ext.opted_out_default'));
                    $("#" + optMethodId).val(optMethod);
                    isNewExtension = true;
                }

				if (i === "lastUnqCatNo") {
					var lastUnqCatNo = obj[i];
					$("#" + lastUnqCatNoId).val(lastUnqCatNo);
					isNewExtension = true;
				}

				if (i === "catNameIdLookup") {
					var catNmIdLkp = obj[i];
					$("#" + catNmIdLkpId).val(catNmIdLkp);
					isNewExtension = true;
				}

                if (i === "visitorSelectionType") {
                    var visitorSelectionType = obj[i];
                    $("#multioptout_visitor_selection_type").text(visitorSelectionType == "0" ? localize.t('tiq.ext.choose_by_tag') : localize.t('tiq.ext.choose_by_category'));
                    $("#" + visitorSelectionTypeId).val(visitorSelectionType);
                    $("#" + categoryId).val(obj['categories']);
                }

                if (i === "singleCookieReq") {
                    var singleCookieReq = obj[i];
                    $("#single_cookie_req").text(singleCookieReq == "0" ? localize.t('tiq.ext.retain_tealium_cookie') : localize.t('tiq.ext.remove_tealium_cookie'));
                    $("#" + singleCookieReqId).val(singleCookieReq);
                    isNewExtension = true;
                }
            }

            if (!isNewExtension) {
                // This is the old multi-opt extension, initialize the defaults
                $("#" + optMethodId).val("0"); // opt-in by default
                $("#multioptout_method").text(localize.t('tiq.ext.opted_in_default'));

                $("#" + singleCookieReqId).val("0"); // retain tealium cookie
                $("#single_cookie_req").text(localize.t('tiq.ext.retain_tealium_cookie'));

                $("#" + visitorSelectionTypeId).val("0"); // choose by tag by default
                $("#multioptout_visitor_selection_type").text(localize.t('tiq.ext.choose_by_tag'));
            }
        }

		if(cb) cb();
	},
	edit: function (container, $domWrapper) {
		var customization = utui.data.customizations[container],
			categories = customization.categories,
			self = this;

		var $content = $("<div />", {
			id: "multioptout_dialog_content"
		});

		$content.appendTo($domWrapper);

        var tabsHTML = '<ul><li><a href="#widget_settings">' + localize.t('tiq.ext.widget_settings') + '</a></li><li><a href="#user_options">' + localize.t('tiq.ext.visitor_options') + '</a></li><li><a href="#tags_to_ignore">' + localize.t('tiq.ext.tags_to_omit') + '</a></li></ul><div id="widget_settings" class="tabContainer"></div><div id="user_options" class="tabContainer"></div><div id="tags_to_ignore" class="tabContainer"></div>';

        var $tabs = $("<div />", {
            id: "multiopt_tabs"
        }).append(tabsHTML).appendTo($content);

		$("#multiopt_tabs").tabs();

		var $widgetSettings = $("#widget_settings");

		utui.customizations_template[this.id].addSetItem($widgetSettings, container);
		utui.customizations_template[this.id].addConditions($widgetSettings, container);

		var $userOptions = $("#user_options");
		this.helper.renderOptions(container, $userOptions);

		$userOptions.append($("<div />", {
			"class": "container"
		}));

		if (customization.visitorSelectionType === "1") {
			// This is a hack to make sure renderCategories() is called after the $content is inserted successfully
			setTimeout(function () {
				self.helper.renderCategories(container, $userOptions);
			}, 0);
		}

        var $tagsToIgnore = $("#tags_to_ignore");
        $("<p />").text(localize.t('tiq.ext.please_select_tags_always_served')).appendTo($tagsToIgnore);
        self.helper.renderTagsToIgnore(container, $tagsToIgnore);

        $("#" + container).find(":button").button();
        $('#button_addcondition').attr('onClick', 'utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()');
    },
    helper: {
        DEFAULT_CATEGORY_NAME: localize.t('tiq.ext.default'),
        DEFAULT_CATEGORY_DESCRIPTION: localize.t('tiq.ext.default_category'),
        handleCategoryDrop: function ($el, $container) {
            $el.fadeOut(function () {
                $el.appendTo($container).show();
            })
        },
        renderOptions: function (container, $container) {
            var self = this,
                customization = utui.data.customizations[container],
                visitorChoiceId = "mutioptout_dialog_visitorChoice",
                optMethodId = "mutioptout_dialog_optMethod",
                singleCookieReqId = "mutioptout_dialog_singleCookieReq";

			var $optionsContainer = $("<div />", {
				"class": "optionsRow"
			}).appendTo($container);

			var $optMethodBlock = $("<div />", {
				"class": "optionsColumn"
			}).appendTo($optionsContainer);

			var $visitorSelectionBlock = $("<div />", {
				"class": "optionsColumn"
			}).appendTo($optionsContainer);

			var $singleCookieRequirementBlock = $("<div />", {
				"class": "optionsColumn"
			}).appendTo($optionsContainer);

            // build the dom for the opt method
            $("<div />", {
                "class": "header"
            }).text(localize.t('tiq.ext.opt_method')).appendTo($optMethodBlock);

			var $radioOptMethod0 = $("<input />", {
				"id": optMethodId + "0",
				"name": optMethodId,
				"type": "radio"
			}).val("0");

			var $radioOptMethod1 = $("<input />", {
				"id": optMethodId + "1",
				"name": optMethodId,
				"type": "radio"
			}).val("1");

			customization.optMethod === "1" ? $radioOptMethod1.prop("checked", "checked") : $radioOptMethod0.prop("checked", "checked");

            $("<div />", {
                "class": "row"
            }).append(
                $radioOptMethod0
            ).append(
                $("<label />", {
                    "for": optMethodId + "0"
                }).text(localize.t('tiq.ext.opted_in_default'))
            ).appendTo($optMethodBlock);

            $("<div />", {
                "class": "row"
            }).append(
                $radioOptMethod1
            ).append(
                $("<label />", {
                    "for": optMethodId + "1"
                }).text(localize.t('tiq.ext.opted_out_default'))
            ).appendTo($optMethodBlock);

            // Build the dom for the visitor choice
            $("<div />", {
                "class": "header"
            }).text(localize.t('tiq.ext.visitor_selection_type')).appendTo($visitorSelectionBlock);

			var $radioVistorChoice0 = $("<input />", {
				id: visitorChoiceId + "0",
				name: visitorChoiceId,
				"type": "radio",
				click: function () {
					$container.find(".container").hide();
				}
			}).val("0");

			var $radioVistorChoice1 = $("<input />", {
				id: visitorChoiceId + "1",
				name: visitorChoiceId,
				"type": "radio",
				click: function () {
					self.renderCategories(container, $container);
				}
			}).val("1");

			customization.visitorSelectionType === "1" ? $radioVistorChoice1.prop("checked", "checked") : $radioVistorChoice0.prop("checked", "checked");

            $("<div />", {
                "class": "row"
            }).append(
                $radioVistorChoice0
            ).append(
                $("<label />", {
                    "for": visitorChoiceId + "0"
                }).text(localize.t('tiq.ext.by_tag'))
            ).appendTo($visitorSelectionBlock)

            $("<div />", {
                "class": "row"
            }).append(
                $radioVistorChoice1
            ).append(
                $("<label />", {
                    "for": visitorChoiceId + "1"
                }).text(localize.t('tiq.ext.by_category'))
            ).appendTo($visitorSelectionBlock);

            // Build the dom for the single cookie requirement
            $("<div />", {
                "class": "header"
            }).text(localize.t('tiq.ext.single_cookie_restriction')).appendTo($singleCookieRequirementBlock);

			var $radioSingleCookieReq0 = $("<input />", {
				id: singleCookieReqId + "0",
				name: singleCookieReqId,
				"type": "radio",
				click: function () {
					// console.log('Single Cookie Req - 0');
				}
			}).val("0");

			var $radioSingleCookieReq1 = $("<input />", {
				id: singleCookieReqId + "1",
				name: singleCookieReqId,
				"type": "radio",
				click: function () {
					// console.log('Single Cookie Req - 0');
				}
			}).val("1");

			customization.singleCookieReq === "1" ? $radioSingleCookieReq1.prop("checked", "checked") : $radioSingleCookieReq0.prop("checked", "checked");

            $("<div />", {
                "class": "row"
            }).append(
                $radioSingleCookieReq0
            ).append(
                $("<label />", {
                    "for": singleCookieReqId + "0"
                }).text(localize.t('tiq.ext.retain_tealium_cookie'))
            ).appendTo($singleCookieRequirementBlock);

            $("<div />", {
                "class": "row"
            }).append(
                $radioSingleCookieReq1
            ).append(
                $("<label />", {
                    "for": singleCookieReqId + "1"
                }).text(localize.t('tiq.ext.remove_tealium_cookie'))
            ).appendTo($singleCookieRequirementBlock);
        },
        renderCategoriesHeaderBar: function (container, $container) {
            var self = this;

            $("<div />", {
                "class": "toolbar"
            }).append(
                $("<span />").text(localize.t('tiq.ext.new_category'))
            )
                .append(
                    $("<input />", {
                        id: "addCategoryInput",
                        "class": "field",
                        placeholder: localize.t('tiq.ext.category_name')
                    })
            )
                .append(
                    $("<div />", {
                        "class": "prettyBtn",
                        click: function () {
                            var $categoryName = $("#addCategoryInput");
                            var $errorBlock = $(".addCategoryError");

                            if ($.trim($categoryName.val()).length === 0) {
                                $errorBlock.text(localize.t('tiq.ext.please_make_name_valid')).show();
                                return;
                            }

                            if ($(".categoriesBlock .column").length >= 8) {
                                $errorBlock.text(localize.t('tiq.ext.you_can_only_create_categories')).show();
                                return;
                            }

							var existingCategoryNames = [];
							$(".categoriesBlock").find("h4").each(function () {
								var $el = $(this);
								existingCategoryNames.push($el.text());
							});

                            if (existingCategoryNames.indexOf($.trim($categoryName.val())) >= 0) {
                                $errorBlock.text(localize.t('tiq.ext.category_name_already_exists')).show();
                                return;
                            }

							$errorBlock.hide();

							// update UI
							var $categoriesBlock = $container.find(".categoriesBlock");
							self.renderCategory(container, $categoriesBlock, $.trim($categoryName.val()), [], "");
							self.enableDragDrop();

							$categoryName.val("");
						}
					}).text(localize.t('tiq.ext.add.add'))
			)
				.appendTo($container);

			$("<div />", {
				"class": "addCategoryError"
			}).appendTo($container);
		},
		renderTagsToIgnore: function (container, $modalContent) {
			var tags = utui.manage.containerMap;
			var uniqueTags = [];

			var $tagsToIgnoreContainer = $("<div />", {
				"id": "tagsIgnoreSelectionContainer"
			}).appendTo($modalContent);

			for (var key in tags) {
				var tag = tags[key];
				var tagId = tag["tag_id"];
				var tagName = tag.tag_name;
				var isException = false; // has either tag_id of 20010 or 20011

				var style = "";
				if (tag.advconfig_optout && tag.advconfig_optout === "no") {
					style = "on";
				} else {
					style = "";
				}

				if (String(tagId) === '20010' || String(tagId) === '20011') {
					isException = true;
				}

				if (uniqueTags.indexOf(tagId) < 0 || isException) {

					// either this tag hasn't appeared yet or this is one of the two exceptions

					if (isException) {
						tagName += ' [UID ' + tag.id + ']';
					}

					var $tag = $("<div />", {
						"class": "tagEl " + style,
						"click": function (event) {
							var $el = $(this);
							$el.toggleClass("on");
						}
					}).text(tagName).data("container", key).data("tag_id", tagId).appendTo($tagsToIgnoreContainer);

					if (isException) {
						$tag.data('uid', tag.id);
					}

					uniqueTags.push(tag.tag_id);
				}
			}
		},
		renderCategories: function (container, $modalContent) {
			var $container = $modalContent.find(".container").show();
			var customization = utui.data.customizations[container];
			var managedTags = {};

			$("#manage_content > .manage_container").each(function () {
				var containerId = this.id;
				managedTags[containerId] = utui.manage.containerMap[containerId];
			});

			var categorizedTags = [];
			var dedupedTags = _getUniqueTags($.extend({}, managedTags));
			var self = this;

			function _getHash(tag) {
				if (String(tag.tag_id) === '20010' || String(tag.tag_id) === '20011') {
					return tag.tag_id + '_' + tag.id;
				}

				return String(tag.tag_id);
			}

			function _getUniqueTags(tags) {
				var deduped = [];
				var hashtable = {};
				for (var key in tags) {
					var tag = tags[key];
					// Make the exception for tealium custom container and tealium pixel container
					if (!hashtable[tag.tag_id] || String(tag.tag_id) === '20010' || String(tag.tag_id) === '20011') {
						tag.hash = _getHash(tag);
						deduped.push(tag);
						hashtable[tag.tag_id] = true;
					}
				}

				return deduped;
			}

			// if this container already has children, don't regenerate categories
			if ($container.children().length > 0)
				return;

			var categories = JSON.parse(customization.categories || "{\"Default\":{\"tags\":[]}}");
			var numOfCategories = utui.util.sizeOf(categories);

			this.renderCategoriesHeaderBar(container, $container);

			var $categoriesBlock = $("<div />", {
				class: "categoriesBlock"
			}).appendTo($container);

			if (numOfCategories === 0) {
				// No categories have been setup yet, do it now
				this.renderCategory(container, $categoriesBlock, this.DEFAULT_CATEGORY_NAME, dedupedTags, this.DEFAULT_CATEGORY_DESCRIPTION);
			} else {
				for (var k in categories) {
					var description = categories[k].desc;
					var tags = categories[k].tags;
					categorizedTags = categorizedTags.concat(tags);
					this.renderCategory(container, $categoriesBlock, k, tags, description);
				}

				if (utui.util.sizeOf(dedupedTags) > categorizedTags.length) {
					// There are tags that are added recently
					var uncategorizedTags = [];
					var categorizedTagHashes = [];
					// copy all of the categorized tag ids to a temporary array for comparison reasons (enhances performance)
					for (var i = 0; i < categorizedTags.length; i++) {
						categorizedTagHashes.push(_getHash(categorizedTags[i]));
					}
					for (var i = 0; i < dedupedTags.length; i++) {
						var dedupedTag = dedupedTags[i];
						if (categorizedTagHashes.indexOf(dedupedTag.hash) < 0) {
							uncategorizedTags.push(dedupedTags[i]);
						}
					}

					this.injectTagsIntoDefaultCategory(uncategorizedTags);
				}
			}

			this.enableDragDrop();
		},
		renderCategory: function (container, $container, categoryName, tags, description) {
			var tagIds = [];
			var tagNames = [];
			var self = this;

			for (var k = 0; k < tags.length; k++) {
				var tag = tags[k];
				tagIds.push(tag.id);
				if (String(tag.tag_id) !== '20010' && String(tag.tag_id) !== '20011') {
					tagNames.push("<div class='tag' data-id='" + tag['tag_id'] + "'><span class='name'>" + tag['tag_name'] + "</span></div>");
				} else {
					tagNames.push("<div class='tag' data-id='" + tag['tag_id'] + "' data-uid='" + tag['id'] + "'><span class='name'>" + tag['tag_name'] + "</span><span class='uid'>" + " [UID " + tag['id'] + "]</span></div>");
				}
			}

			var $defaultColumn = $("<div />", {
				"class": "column"
			}).appendTo($container);

			var $columnHeader = $("<div />", {
				"class": "header"
			}).append(
				$("<h4 />").text(categoryName)
			);

            var $columnDescription = $("<div />", {
                "class": "desc"
            }).append(
                $("<textarea />", {
                    rows: 2,
                    cols: 19,
                    spellcheck: false,
                    placeholder: localize.t('tiq.ext.no_description')
                }).text(description)
            );

			var $columnTags = $("<div />", {
				"class": "categoryContainer"
			}).html(tagNames.join(""));

			if (categoryName !== this.DEFAULT_CATEGORY_NAME) {
				$columnHeader.append(
					$("<div />", {
						"class": "icon-remove",
						click: function (evt) {
							// delete the category
							var $el = $(this);
							var $parentColumn = $el.closest(".column");

							var orphanedTags = $parentColumn.find(".categoryContainer").html();

							$(".categoriesBlock .column:first-child .categoryContainer").append(orphanedTags);
							self.enableDragDrop();

							$parentColumn.remove();
						}
					})
				);
			}

			$defaultColumn.append($columnHeader).append($columnDescription).append($columnTags);
		},
		injectTagsIntoDefaultCategory: function (tags) {
			var tagNames = [];
			var tagName = '',
				tagData = '';
			for (var k = 0; k < tags.length; k++) {
				var tag = tags[k];
				tagName = tag['tag_name'];
				tagData = '';

				if (String(tag['tag_id']) === '20010' || String(tag['tag_id']) === '20011') {
					tagName += ' [UID ' + tag['id'] + ']';
					tagData = " data-uid='" + tag['id'] + "' ";
				}
				tagNames.push("<div class='tag' data-id='" + tag['tag_id'] + "' " + tagData + "><span class='name'>" + tagName + "</span></div>");
			}

			var $defaultContainer = $($("#multioptout_dialog_content .categoryContainer").get(0));
			$defaultContainer.html($defaultContainer.html() + tagNames.join(""));
		},
		enableDragDrop: function () {
			var self = this;
			// setup all of the drag/drop code
			$(".categoryContainer .tag").draggable({
				cancel: "a.ui-icon", // clicking an icon won't initiate dragging
				revert: "invalid", // when not dropped, the item will revert back to its initial position
				containment: $("#demo-frame").length ? "#demo-frame" : "document", // stick to demo-frame if present
				helper: "clone",
				cursor: "move"
			});

			$(".categoryContainer").droppable({
				accept: ".tag",
				activeClass: "ui-state-highlight",
				drop: function (event, ui) {
					self.handleCategoryDrop(ui.draggable, $(this));
				}
			});
		}
	},
	saveProperty: function (customization, key, inputId, value) {
		customization[key] = value;
	},
	updateCategories: function (data) {
		var container = utui.customizations.privacyMgrExtId,
			tag = {
				'tag_id': data['tag_id'],
				'id': data['id']
			};
		var tagId = data["tag_id"],
			tagName = data["tag_name"];

		var categoryInputId = 'categories',
			categories,
			action = data.action,
			customization = utui.data.customizations[container],
			tagContainer = data.container;

		// Nothing to update
		if (!customization) {
			return;
		}

		try {
			categories = JSON.parse(_.unescape(customization.categories) || "{\"Default\":{\"tags\":[]}}");
		} catch (e) {
			categories = {Default: {tag:[]}};
		}

		function _tagExistsInCategories(t, categories) {
			// check to see if this tag already exists
			for (var categoryName in categories) {
				var category = categories[categoryName];
				for (var i = 0; i < category.tags.length; i++) {
					var tag = category.tags[i];
					var tagId = String(tag['tag_id']);
					if ((tagId === '20010' || tagId === '20011') && tagId === String(t['tag_id'])) {
						if (parseInt(tag['id']) === parseInt(t['id'])) {
							return true;
						}
					} else if (tagId === String(t['tag_id'])) {
						return true;
					}
				}
			}
			return false;
		}

		function _removeTag(t) {
			for (var categoryName in categories) {
				var category = categories[categoryName];
				for (var i = 0; i < category.tags.length; i++) {
					var tag = category.tags[i];
					var tagId = String(tag['tag_id']);
					if ((tagId === '20010' || tagId === '20011') && tagId === String(t['tag_id'])) {
						if (parseInt(tag['id']) === parseInt(t['id'])) {
							// Found the tag
							category.tags.splice(i, 1);
						}
					} else if (tagId === String(t['tag_id'])) {
						// Found the tag
						category.tags.splice(i, 1);
					}
				}
			}
		}

		function _alwaysEnableTag(t) {
			var tagId = String(t.tag_id);
			var uid = t.id;
			var tags = utui.manage.containerMap;
			for (var container in tags) {
				var tag = tags[container];
				if (String(tag['tag_id']) == tagId) {
					if (tagId === '20010' || tagId === '20011') {
						if (String(tag['id']) === uid) {
							return tag['advconfig_optout'] == "no";
						}
					} else {
						// Found the tag
						return tag['advconfig_optout'] == "no";
					}
				}
			}

			return false;
		}

		if (action === utui.constants.tags.ACCORDION_EXPANDED) {
			if (!_tagExistsInCategories(tag, categories)) {
				//This tag doesn't exist yet
				if (categories.Default && categories.Default.tags) {
					var newTag = {
						"tag_id": parseInt(tagId),
						"tag_name": tagName,
						"on": true
					};

					if (String(tagId) === '20010' || String(tagId) === '20011') {
						newTag.id = tag.id;
					}

					categories["Default"]["tags"].push(newTag);

					// Stringify the categories object and save it off
					utui.customizations_template[100026].saveProperty(customization, "categories", categoryInputId, JSON.stringify(categories));
					utui.customizations_template[100026].setHiddenInput(tagContainer, "_advconfig_optout", "yes");
				}
			} else {
				utui.customizations_template[100026].setHiddenInput(tagContainer, "_advconfig_optout", _alwaysEnableTag(tag) ? "no" : "yes");
			}
		} else if (action === utui.constants.tags.REMOVED) {
			var tagIdInt = parseInt(tagId);
			var multipleTagsFound = false;
			// Check to see if there's another tag with the same tagId
			if (tagIdInt !== 20010 && tagIdInt !== 20011) {
				$("#manage_content > .manage_container").each(function () {
					var containerId = this.id;
					if (parseInt(utui.manage.containerMap[containerId].tag_id) === tagIdInt) {
						multipleTagsFound = true;
					}
				});
			}

			if (!multipleTagsFound) {
				_removeTag(tag);

				if (customization) {
					utui.customizations_template[100026].saveProperty(customization, "categories", categoryInputId, JSON.stringify(categories));
				}
			}
		}
	},
	setHiddenInput: function (id, prop, value) {
		var $elContainer = $("#" + id);
		var $el = $("#" + id + prop);
		if ($el.length == 0 && $elContainer.length > 0) {
			$elContainer.append(
				$("<input />", {
					id: id + prop,
					type: "hidden"
				}).val(value)
			);
		} else if ($el.length == 1) {
			$el.val(value);
		}
	},
	save: function (container) {
		var customization = utui.data.customizations[container];
		var $container = $("#multioptout_dialog_content").find(".container");
		var categories = {};
		var categoryInputId = "categories";
		var visitorSelectionTypeId = "visitorSelectionType";
		var opMethodInputId = "optMethod";
		var singleCookieReqId = "singleCookieReq";
		var elementTypeId = this.itemId + "_edit_type";
		var elementDomId = this.itemId + "_edit_domid";
		var elementPositionId = this.itemId + "_edit_position";
		var tagsToIgnore = [];
		var tagUIDsToIgnore = [];
		var lastUnqCatNoId = "lastUnqCatNo";
		var catNmIdLkpId = "catNameIdLookup";

		$("#multioptout_dialog_content .tagEl").each(function () {
			var $el = $(this);
			if ($el.hasClass("on")) {
				// opting out of this class is not allowed
				tagsToIgnore.push($el.data("tag_id"));

				if ($el.data('uid')) {
					tagUIDsToIgnore.push(String($el.data('uid')));
				}
			}
		});

		for (var key in utui.manage.containerMap) {
			var tag = utui.manage.containerMap[key];
			if (tagsToIgnore.indexOf(tag.tag_id) >= 0) {
				if (String(tag.tag_id) === '20010' || String(tag.tag_id) === '20011') {
					if (tagUIDsToIgnore.indexOf(String(tag.id)) >= 0) {
						this.setHiddenInput(key, "_advconfig_optout", "no");
						tag.advconfig_optout = "no";
					} else {
						this.setHiddenInput(key, "_advconfig_optout", "yes");
						tag.advconfig_optout = "yes";
					}
				} else {
					// this tag's advconfig_optout flag should set to "no"
					this.setHiddenInput(key, "_advconfig_optout", "no");
					tag.advconfig_optout = "no";
				}
			} else {
				this.setHiddenInput(key, "_advconfig_optout", "yes");
				tag.advconfig_optout = "yes";
			}
		}

		// Save all of the properties
		var elementType = $("#" + container + "_" + elementTypeId + " option:selected").val();
		var elementDom = $("#" + container + "_" + elementDomId).val();
		var elementPosition = $("#" + container + "_" + elementPositionId + " option:selected").val();

		this.saveProperty(customization, this.itemId + "_type", container + "_" + this.itemId + "_type", elementType);
		this.saveProperty(customization, this.itemId + "_domid", container + "_" + this.itemId + "_domid", elementDom);
		this.saveProperty(customization, this.itemId + "_position", container + "_" + this.itemId + "_position", elementPosition);

		// Save the conditions
		$("#" + container).find("[isCondition=true]").remove();
		for (var key in customization) {
			if (typeof key !== "string")
				continue;

			if (key.indexOf("_filter") >= 0 || key.indexOf("_filtertype") >= 0 || key.indexOf("_source") >= 0)
				delete customization[key];
		}

		$("#multioptout_dialog_content .conditionsBlock").find("input, select").each(function (event) {
			var $el = $(this);
			var elId = $el.attr("id");

			$("#" + container).append(
				$("<input />", {
					id: elId,
					name: elId,
					"type": "hidden"
				}).val($el.val()).attr("isCondition", "true")
			);

			var propKey = elId.substring(container.length + 1);
			customization[propKey] = $el.val();
		});

		// Save the opt out/in options
		var optMethod = $("input[name=mutioptout_dialog_optMethod]:checked").val();
		var visitorChoice = $("input[name=mutioptout_dialog_visitorChoice]:checked").val();
		var singleCookieReqChoice = $("input[name=mutioptout_dialog_singleCookieReq]:checked").val();

		this.saveProperty(customization, "optMethod", opMethodInputId, optMethod);
		this.saveProperty(customization, "visitorSelectionType", visitorSelectionTypeId, visitorChoice);
		this.saveProperty(customization, "singleCookieReq", singleCookieReqId, singleCookieReqChoice);

		if (visitorChoice === "1") {
			// Re-construct the categories object
			$container.find(".column").each(function () {
				var $el = $(this);
				var categoryName = $el.find(".header h4").text();
				var description = $el.find(".desc textarea").val();
				var tags = [];
				var $tagEls = $el.find(".tag");

				$tagEls.each(function () {
					var $tag = $(this);
					var tag = {};
					tag["tag_id"] = $tag.data("id");
					tag["tag_name"] = $tag.find(".name").text();

					if ($tag.data('uid')) {
						tag['id'] = $tag.data('uid');
					}

					if (tagsToIgnore.indexOf("" + tag["tag_id"]) < 0) {
						tag["on"] = 'true';
					} else {
						if (String(tag["tag_id"]) === '20010' || String(tag["tag_id"]) === '20011') {
							if (tagUIDsToIgnore.indexOf(String(tag['id'])) >= 0) {
								tag['on'] = 'false';
							} else {
								tag['on'] = 'true';
							}
						} else {
							tag["on"] = 'false';
						}
					}

					tags.push(tag);
				});

				categories[categoryName] = {
					desc: description,
					tags: tags
				};
			})

			// Stringify the categories object and save it off
			this.saveProperty(customization, "categories", categoryInputId, JSON.stringify(categories));

			// Create the unique category ID lookup needed by publish for opt out by category
			var catNmIdLkp = JSON.parse($('#' + catNmIdLkpId).val());
			var lastUnqCatNo = parseInt($("#" + lastUnqCatNoId).val());
			for (var i in utui.util.getVars(categories)) {
				if (typeof catNmIdLkp[i] === 'undefined') {
					lastUnqCatNo += 1;
					catNmIdLkp[i] = lastUnqCatNo;
				}
			}
			// Save the category name/id lookup and the last id value
			this.saveProperty(customization, "catNameIdLookup", catNmIdLkpId, JSON.stringify(catNmIdLkp));
			this.saveProperty(customization, "lastUnqCatNo", lastUnqCatNoId, lastUnqCatNo);

		} else {
			this.saveProperty(customization, "categories", categoryInputId, JSON.stringify({}));
		}

        // Call fillData to display the changes
        this.fillData(container, true);
    },
    show: function (container) {},
    addConditions: function ($container, container) {
        var customization = utui.data.customizations[container];
        var content = '';
        content += '  <div><div class="customization_div">';
        content += '    <div class="customization_label" style="float:left">' +localize.t('tiq.ext.condition') + '</div>';
        content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn">' + localize.t('tiq.ext.add_condition') + '</button></div>';
        content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left">';
        content += '    </div>';
        content += '    </div>';
        content += '  </div>';

		var $conditionsBlock = $("<div />", {
			"class": "conditionsBlock"
		}).append(content);

		$container.append($conditionsBlock);

		for (var i in customization) {
			if (i.indexOf('_source') >= 0 && i.split('_').length <= 2) {
				$('#button_addcondition').hide();
				var conditionId = i.substring(0, i.indexOf('_source'));
				var itemId = utui.customizations_template[this.id].addCondition(container, conditionId);
				$('#' + itemId + '_source').val(customization[i]);
				$('#' + itemId + '_source').select2('val', customization[i]);

				$('#' + itemId + '_filtertype').val(customization[i.replace('_source', '_filtertype')]);
				$('#' + itemId + '_filtertype').select2('val', customization[i.replace('_source', '_filtertype')]);

				$('#' + itemId + '_filter').val(customization[i.replace('_source', '_filter')]);
				$('#' + itemId + '_filter').select2('val', customization[i.replace('_source', '_filter')]);

				utui.customizations_template.util.operatorSelectHandler(itemId);
				// process the "AND" conditions
				for (var i in utui.util.getVars(customization)) {
					if (i.indexOf('_source') >= 0 && i.split('_').length > 2 && i.indexOf(conditionId) == 0) {
						var addConditionId = i.split('_')[1];
						var itemAddId = utui.customizations_template[this.id].addAndCondition(itemId, addConditionId);
						$('#' + itemAddId + '_source').val(customization[i]);
						$('#' + itemAddId + '_source').select2('val', customization[i]);

						$('#' + itemAddId + '_filtertype').val(customization[i.replace('_source', '_filtertype')]);
						$('#' + itemAddId + '_filtertype').select2('val', customization[i.replace('_source', '_filtertype')]);

						$('#' + itemAddId + '_filter').val(customization[i.replace('_source', '_filter')]);
						$('#' + itemAddId + '_filter').select2('val', customization[i.replace('_source', '_filter')]);

						utui.customizations_template.util.operatorSelectHandler(itemAddId);
					}
				}
			}
		}
	},
	addSetItem: function ($container, container) {
		var id = container + "_" + this.itemId + "_edit";
		var customization = utui.data.customizations[container];

        var content = '';
        content += '<div id="' + id + '" class="properties">';
        var itemId = id + '_type';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.element_type') + '</div><div class="customization_item"><select id="' + itemId + '" name="' + itemId + '"><option value="domid">' + this.widgetDomMap['domid'] + '</option><option value="xpath">' + this.widgetDomMap['xpath'] + '</option></select></div></div>';
        itemId = id + '_domid';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.identifier') + '</div><div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="48"></div></div>';

		var itemId = id + '_position';
		content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">'+localize.t('tiq.ext.position')+'</div><div class="customization_item">';
		content += '<select id="' + itemId + '" name="' + itemId + '">';
		content += '  <option value="insertbefore">' + this.widgetPositionMap['insertbefore'] + '</option>';
		content += '  <option value="insertafter">' + this.widgetPositionMap['insertafter'] + '</option>';
		content += '  <option value="insertfirst">' + this.widgetPositionMap['insertfirst'] + '</option>';
		content += '  <option value="insertlast">' + this.widgetPositionMap['insertlast'] + '</option>';
		content += '  <option value="replace">' + this.widgetPositionMap['replace'] + '</option>';
		content += '  <option value="replacenode">' + this.widgetPositionMap['replacenode'] + '</option>';
		content += '</select></div></div>';

		content += '</div>';
		//        $('#'+container+'_setcontainer').append(content);
		$container.append(content);

		var elementType = customization[this.itemId + "_type"];
		var elementDomId = customization[this.itemId + "_domid"];
		var elementPosition = customization[this.itemId + "_position"];

		if (elementType) {
			$("#" + id + "_type").val(elementType);
		}
		if (elementDomId) {
			$("#" + id + "_domid").val(elementDomId);
		}
		if (elementPosition) {
			$("#" + id + "_position").val(elementPosition);
		}

        //        utui.customizations_template[this.id].updateSetOption(id);
    },
    updateSetOption: function (container) {
        var itemId = container + '_setoption';
        if ($('#' + itemId).val() == 'var') {
            $('#' + container + '_settovar').show();
            $('#' + container + '_settotext').hide();
        } else {
            $('#' + container + '_settotext').show();
            $('#' + container + '_settovar').hide();
        }
    },
    addCondition: function (container, instanceId) {
        var id = container + '_' + (instanceId || utui.util.getContainerId());
        var content = '';
        if ($('#' + container + '_conditioncontainer').children('div').length > 0) {
            content += '  <div id="' + id + '_ortext"><div class="customization_div" style="float:left; clear:both;">';
            content += '    <div class="customization_labelthin">' + localize.t('tiq.ext.or') + '</div><div class="customization_labelwide"></div>';
            content += '  </div>';
            content += '  </div>';
        }

		content += '<div id="' + id + '_conditioncontainer" class="widget-container" style="min-width:600px;float:left;clear:both;">';
		//Condition
		var itemId = id + '_source';
		var existingSourceVal = $("#" + itemId).val();

		content += '<div id="' + id + '_conditioncontainer">';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelthin" style="white-space:nowrap;"></div>';
		content += '    <div class="customization_item">';

		content += '<span id="' + itemId + '_varpane">';
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: this.id
		});

		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';
		var existingFilterType = $("#" + id + "_filtertype").val();

		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		var existingFilter = $("#" + itemId).val();

		content += '    <input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '    </div>';
		content += '    <button onclick="utui.customizations_template[100026].addAndCondition(\'' + id + '\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
		content += '  </div>';
		content += '</div>';
		content += '</div>';

		content += '<div id="' + id + '_buttons" style="float:right">'
		content += '<button onclick="if($(\'#' + id + '_conditioncontainer\').siblings().length<=2){$(\'#button_addcondition\').show()};utui.customizations_template[100026].removeCondition(\'' + id + '\')" class="btn btn-mini js-action-addbtn" title="' + localize.t('tiq.ext.remove_sub_condition') + '"><i class="icon-minus clickable"></i></button>';
		content += '<button onclick="utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\')" class="btn btn-mini js-action-removebtn" title="' + localize.t('tiq.ext.add_sub_condition') + '"><i class="icon-plus clickable"></i></button>';
		content += '</div>';

		$('#' + container + '_conditioncontainer').append(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_source', true);

		if (existingSourceVal) {
			$("#multioptout_dialog_content").find("#" + id + "_source").val(existingSourceVal);
			$("#multioptout_dialog_content").find("#" + id + "_source").select2('val', existingSourceVal);
		}
		if (existingFilterType) {
			$("#multioptout_dialog_content").find("#" + id + "_filtertype").val(existingFilterType);
		}
		if (existingFilter) {
			$("#multioptout_dialog_content").find("#" + id + "_filter").val(existingFilter);
		}
		return id;
	},
	addAndCondition: function (container, instanceId) {
		var id = container + '_' + (instanceId || utui.util.getContainerId());
		var itemId = id + '_source';
		var existingSourceVal = $("#" + itemId).val();
		var content = '<div id="' + id + '_andcontainer" class="customization_div"><div class="customization_labelthin" style="white-space:nowrap;">' + localize.t('tiq.ext.and_colon') + '</div>';
		content += '<div class="customization_item">';

		content += '<span id="' + itemId + '_varpane">';
		var existingFilterType = $("#" + id + "_filtertype").val();
		var field = utui.customizations_template.util.buildSelect({
			item: itemId,
			container: container,
			id: this.id
		});
		content += utui.ui.template.form.validationWrapper(field, itemId);

		content += '</span>';

		content += utui.customizations_template.util.buildOperatorSelect(id);

		itemId = id + "_filter";
		var existingFilter = $("#" + itemId).val();
		content += '<input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '</div>';
		content += '<button onclick="utui.customizations_template[' + this.id + '].removeAndCondition(\'' + id + '\')" class="btn btn-mini js-action-removebtn">';
		content += '<i class="icon-minus"></i>';
		content += '</button>';
		content += '</div>';
		content += '</div>';
		$('#' + container + '_conditioncontainer').append(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id + '_source', true);


		if (existingSourceVal) {
			$("#multioptout_dialog_content").find("#" + id + "_source").val(existingSourceVal);
			$("#multioptout_dialog_content").find("#" + id + "_source").select2('val', existingSourceVal);
		}
		if (existingFilterType) {
			$("#multioptout_dialog_content").find("#" + id + "_filtertype").val(existingFilterType);
		}
		if (existingFilter) {
			$("#multioptout_dialog_content").find("#" + id + "_filter").val(existingFilter);
		}

		return id;
	},
	removeCondition: function (container) {
		$('#' + container + '_conditioncontainer').remove();
		// TASK TY: remove 'Or:' label text if it exists[done], [todo:] elese remove the next one (that means we now have a new first item)
		$('#' + container + '_ortext').remove();
		$('#' + container + '_buttons').remove();



		utui.customizations.updateExtensionData(this.container);
	},
	removeAndCondition: function (container) {
		$('#' + container + '_andcontainer').remove();

		utui.customizations.updateExtensionData(this.container);
	},
    activationCheck: function(extId){
        if (utui.data.privacy_management && utui.data.privacy_management.preferences && utui.data.privacy_management.preferences.isEnabled){
            return false;
        } else { 
            return true; 
        }
	},
    validateModel: function(extObj) {
        if (extObj.status === "active"){
			if (utui.customizations_template[100026].activationCheck() == false){
				exapi.setStatus(extObj._id, 'inactive');
				$('#customizations_'+extObj._id).find('.js-status-toggle').children('span').removeClass('container_status_active').addClass('container_status_inactive');
				var confirmationContent= localize.t('tiq.ext.100026.disable_if_gdpr');
				$("#dialog-confirmation-content").html(confirmationContent);
				$("#dialog-confirmation").dialog({
					autoOpen: true,
					height: 'auto',
					width: 'auto',
					modal: true,
					closeOnEscape: false,
					closeText: "",
					close: function( event, ui ) {
					},
					resizable: false,
					draggable: true,
					buttons: [
						{
							text: localize.t('tiq.dialog.button.ok'),
							id: 'confirmDisableDeprecatedprivacyMgr',
							click: function() {
								$(this).dialog('close');
							}
						}
					]
				});									
			}			
		}
        return true;
    },
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
        this.validateModel(utui.data.customizations[container]);
		return true;
	}
}


//Customization 100027 - jQuery liveHandler
utui.customizations_template[100027] = {
	id: 100027,
	editor: {},
	container: '',
	template: {
		main: function(extensionObj) {
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getStaticConfiguration();

				if(extensionObj.handler === 'custom') {
					_x += this.getCustomCodeConfiguration();
				} else if(!$.isEmptyObject(configDynamicObj)) {
					_x += sharedView.getSetConfiguration(configDynamicObj);
				}

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);

				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += sharedView.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}
			return v;
		},
		getStaticConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
				v += _row(localize.t('tiq.ext.jquery_selector'), _input(null, 'domid', ''));
				v += _row(localize.t('tiq.ext.trigger_on'), _input(null, 'event', ''));
				v += _row(localize.t('tiq.ext.trackingEvent'), _input(null, 'handler', ''));
			return v;
		},
		getCustomCodeConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			return _row(localize.t('tiq.ext.custom_tracking_code'), _input(null, 'code', ''));
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show().before(' <span class="inline-label">'+localize.t('tiq.ext.data_source')+'</span><br>');
				$data(instanceId+'_settotext').hide();
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.text')+'</span><br>');
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.code')+'</span><br>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container) {
		this.container = container;
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		this.addItem(container);

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_setoption') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			var itemId = this.addSetItem(container);
			$('#' + itemId + '_set').val(obj[setId + '_set']);
			$('#' + itemId + '_setoption').val(obj[setId + '_setoption']);
			if (obj[setId + '_setoption'] == 'var') {
				$('#' + itemId + '_settovar').val(obj[setId + '_settovar']);

				$('#'+itemId+'_settovar').select2('val', obj[setId+'_settovar'] || '');
			} else {
				$('#' + itemId + '_settotext').val(obj[setId + '_settotext']);
			}
			this.updateSetOption(itemId);
			this.editor[container].setValue($('#code').val());
			this.selectHandler(container, obj.handler);

		}

		// if (fillFlag) {
		var obj = utui.data.customizations[container];

		$('#domid').val(obj.domid);
		$('#handler').val(obj.handler);
		$('#event').val(obj.event);
		$('#code').val(obj.code);
		for (var i in utui.util.getVars(obj, 2)) {

			if (i.indexOf('_setoption') >= 0) {
				var setId = i.substring(0, i.indexOf('_set'));
				var itemId = this.addSetItem(container, setId);

				$('#' + itemId + '_set').val(obj[setId + '_set']);
				$('#' + itemId + '_set').select2('val', obj[setId + '_set'] || '');

				$('#' + itemId + '_setoption').val(obj[setId + '_setoption']);

				if (obj[setId + '_setoption'] == 'var') {
					$('#' + itemId + '_settovar').val(obj[setId + '_settovar']);
					$('#'+itemId+'_settovar').select2('val', obj[setId+'_settovar'] || '');
				} else {
					$('#' + itemId + '_settotext').val(obj[setId + '_settotext']);
				}

				this.updateSetOption(itemId);
				this.editor[container].setValue($('#code').val());
				this.selectHandler(container, obj.handler);
			}
		}
		// } else {
		//     this.addSetItem(container);
		// }
	},
	show: function (container) {},
	addItem: function (container) {
		var content = '';
        content += '<div id="' + container + '" class="customization_padded">';
        content += '  <div class="customization_div" style="min-width:600px">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.jquery_selector') + '</div>';
        content += '    <div class="customization_item">';
        content += '        <input type="text" id="domid" name="domid" value="" size="64" style="float:left">';
        content += '    </div>';
        content += '  </div>';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.trigger_on') + '</div>';
        content += '    <div class="customization_item">';
        content += '        <select id="event" name="event"><option value="show">' + localize.t('tiq.ext.show', {lcase:true}) + '</option><option value="hide">' + localize.t('tiq.ext.hide', {lcase:true}) + '</option><option value="click">' + localize.t('tiq.ext.click') + '</option><option value="mousedown">' + localize.t('tiq.ext.mousedown') + '</option><option value="mouseup">' + localize.t('tiq.ext.mouseup') + '</option><option value="mouseover">' + localize.t('tiq.ext.mouseover') + '</option><option value="change">' + localize.t('tiq.ext.change_elements') + '</option><option value="blur">' + localize.t('tiq.ext.blur_elements') + '</option><option value="focus">' + localize.t('tiq.ext.focus_elements') + '</option></select>';
        content += '    </div>';
        content += '  </div>';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.trackingEvent') + '</div>';
        content += '    <div class="customization_item">';
        content += '        <select id="handler" name="handler"><option value="link">' + localize.t('tiq.ext.link') + '</option><option value="view">' + localize.t('tiq.ext.view') + '</option><option value="custom">' + localize.t('tiq.ext.custom') + '</option></select>';
        content += '    </div>';
        content += '  </div>';

		content += '  <div class="customization_div" style="min-width:600px" id="' + container + '_sethandler">';
		content += '    <div class="customization_div widget-container">';
		content += '      <div id="' + container + '_setcontainer"></div>';
		content += '    </div>';
		content += '  </div>';

		content += '  <div class="customization_div" style="min-width:600px;display:none" id="' + container + '_customhandler">';
		content += '    <div class="customization_div widget-container" style="width: 600px;min-height:100px">';
		content += '      <div style="min-height:90px"><textarea id="code" value="" name="code"></textarea></div>';
		content += '    </div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		$('#handler').on("change", function () {
			utui.customizations_template[100027].selectHandler(container)
		});
		this.editor[container] = CodeMirror.fromTextArea(document.getElementById('code'), {
			mode: 'javascript',
			indentWithTabs: true,
			tabMode: 'indent',
			matchBrackets: true,
			lineNumbers: true
		});

		this.editor[container].setOption('onChange', function () {
			$('#code').val(utui.customizations_template[100027].editor[container].getValue())
		});
		this.editor[container].setOption('onCursorActivity', function () {
			$('#code').val(utui.customizations_template[100027].editor[container].getValue())
		});
		$('#' + container + '_scopevars').on('change', function () {
			$('#code').val(utui.customizations_template[100027].editor[container].getValue())
		});

		// If imported, make editor read only
		if(exapi.isImported(container)) {
			this.editor[container].setOption("readOnly","nocursor");
		}

		this.editor[container].refresh();

		var tooltipObj = {};
		tooltipObj[container + '_syntaxcheck'] = { gravity: 'w' };
		tooltipObj[container + '_scopevars'] = { gravity: 'w' };
		utui.util.addTooltip(tooltipObj);
	},
	selectHandler: function (id, b) {
		b = $('#handler').val();

		$('#' + id + '_sethandler').hide();
		$('#' + id + '_customhandler').hide();

		if (b == "custom") {
			$('#' + id + '_customhandler').show();
			utui.customizations_template[100027].editor[id].refresh();
			utui.customizations_template[100027].editor[id].focus();

		} else {
			$('#' + id + '_sethandler').show();

		}
	},
	addSetItem: function (container, instanceId) {
		var tooltipObj = {};
		var id = instanceId || utui.util.getContainerId();
		var content = '';

		content += '<div id="'+id+'_setitem" class="" style="margin-top: 2px;position: relative">';

			content += '<div id="'+id+'_set_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.set')+'</div>';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_set', container: container, id: this.id, stylefloat: 'left', showvars: 'js,va' });
				content += utui.ui.template.form.validationWrapper(field, id+'_set');
			content += '</div>';

			content += '<div class="inline vertical-align-bottom">';
				content += '<button onclick="utui.define.showAddMore(\''+container+'\',\'js\',\''+id+'_set'+'\', \'\', function() { utui.customizations_template.util.updateDestination(\'' + container + '\', \'' + id+'_set' + '\', \'js\'); })" class="btn btn-mini" style="float:left;">';
					content += '<i class="icon-plus" id="'+container+'_addmore_tooltip" title="'+localize.t('tiq.ext.click_here_to_create_datasource')+'"></i>';
				content += '</button>';
			content += '</div>';

			tooltipObj[container+'_addmore_tooltip'] = { gravity: 'w' };

			content += '<div id="'+id+'_setoption_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.to')+'</div>';
				content += '<select id="'+id+'_setoption" name="'+id+'_setoption" onchange="utui.customizations_template['+this.id+'].updateSetOption(\''+id+'\');" style="float:left">';
					content += '<option value="text">'+localize.t('tiq.ext.text')+'</option>';
					content += '<option value="var">'+localize.t('tiq.ext.variable')+'</option>';
					content += '<option value="code">'+localize.t('tiq.ext.js_code')+'</option>';
				content += '</select>';
			content += '</div>';

			content += '<div id="'+id+'_settovar_container" class="inline vertical-align-bottom">';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_settovar', container: container, id: this.id, stylefloat: 'left' });
				content += utui.ui.template.form.validationWrapper(field, id+'_settovar');
			content += '</div>';

			content += '<div id="'+id+'_settotext_container" class="inline vertical-align-bottom">';
			content += '    <input type="text" size="48" id="'+id+'_settotext" name="'+id+'_settotext'+'" style="float:left;">';
			content += '</div>';
			content += '<div id="'+id+'_action_container" class="inline vertical-align-bottom">';
				content += '<button onclick="if($(\'#'+id+'_setitem'+'\').siblings().length>=1){utui.customizations_template['+this.id+'].removeSetItem(\''+id+'_setitem'+'\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';
				content += '<button onclick="utui.customizations_template['+this.id+'].addSetItem(\''+container+'\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
			content += '</div>'

		content += '</div>';
		//content += '</div>';
		$('#' + container + '_setcontainer').append(content);

		// Conversion to Select2
		// dsapi.convertSelectListToSelect2(id + '_setitem', true);
		dsapi.convertSelectListToSelect2(id + '_set', true);
		dsapi.convertSelectListToSelect2(id + '_settovar', true);

		// Conversion to Select2
		// dsapi.convertSelectListToSelect2(id+'_setoption', true);

		utui.customizations_template[100027].updateSetOption(id);
		utui.util.setOptionHandler(id, 100027);
		utui.util.jqQuoteHandler(id + '_settotext');
		utui.util.addTooltip(tooltipObj);
		return id;
	},
	updateSetOption: function (instanceId) {
		var value = $('#'+instanceId+'_setoption').val();

		if (value === 'var') {
			$('#'+instanceId+'_settovar_container').show();
			$('#'+instanceId+'_settotext_container').hide();
		}
		else {
			$('#'+instanceId+'_settotext_container').show();
			$('#'+instanceId+'_settovar_container').hide();
		}
	},
	rebuildSelect: function (container, item) {
		var field = utui.customizations_template.util.buildSelect({
			item: item,
			container: container,
			id: this.id,
			stylefloat: 'left',
			showvars: 'js,va'
		});
		var s = utui.ui.template.form.validationWrapper(field, item);
		$('#' + item).replaceWith(s);

					// Conversion to Select2
			dsapi.convertSelectListToSelect2(item, true);
	},
	removeSetItem: function (container) {
		$('#' + container).remove();

		//remove from the DOM
		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}
		delete utui.data.customizations[this.container][container + '_set'];
		delete utui.data.customizations[this.container][container + '_setoption'];
		delete utui.data.customizations[this.container][container + '_settotext'];
		delete utui.data.customizations[this.container][container + '_settovar'];

		utui.customizations.updateExtensionData(this.container);
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			kSetDupStack = utui.customizations_template.util.getDuplicateEntryIds(extObj._id, 'set'),
			validationObj = {},
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			// do nothing
		}

		if(dynamicConfigCollection.length > 0) {

			if(extObj.handler !== 'custom') {

				for (var i = 0; i < dynamicConfigCollection.length; i++) {
					entryCollection = dynamicConfigCollection[i]

					for(var j = 0; j < entryCollection.length; j++) {
						entryItem = entryCollection[j];

						key = getInstanceKey(entryItem, 'set');

						if(entryItem.set === '') {
							message = localize.t('tiq.validation.message.define_variable');
							validationObj[key] = message;

							utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
						}
						else if(!dsapi.isExistingGlobalVariable(entryItem.set)) {
							message = utui.validation.message.missingVariable( entryItem.set );
							validationObj[key] = message;

							utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.set);
						}
						else if(kSetDupStack.length > 0) {
							message = localize.t('tiq.validation.message.duplicate_variable_reselect');

							if(~kSetDupStack.indexOf(key)) {
								validationObj[key] = message;
								utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.set);
							}
						}

					};
				};

			}
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}

//Customization 100028 - jQuery ajaxHandler
// NOTE: rb - this extension is incomplete
utui.customizations_template[100028] = {
    id: 100028,
    fillData: function (container, fillFlag, cb) {
        var content = '<div>' + localize.t('tiq.ext.ajax_url_filter') + '</div><div>' + localize.t('tiq.ext.code_container') + '</div><div>' + localize.t('tiq.ext.allow_multiple') + '</div>'
        $('#customizations_' + container + '_content').html(content);

		if(cb) cb();
	},
	show: function (container) {},
	addItem: function (container, instanceId) {},
	removeItem: function (container) {
		$('#' + container + '_item').remove();

		utui.customizations.updateExtensionData(this.container);
	},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


//Customization 100029 - jQuery ClickHandler
utui.customizations_template[100029] = {
	id: 100029,
    aceEditor: {},
    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editor
    //------------------------------------------------------------------------------------------------------------------
    destructor: function(){
        if (utui.customizations_template[100029].aceEditor){
            _.each(utui.customizations_template[100029].aceEditor,function(ae){
                ae.destroy();
            });
        }
    },
	container: '',
	template: {
		main: function(extensionObj) {
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getStaticConfiguration();

				if(extensionObj.handler === 'custom') {
					_x += this.getCustomCodeConfiguration();
				} else if(!$.isEmptyObject(configDynamicObj)) {
					_x += sharedView.getSetConfiguration(configDynamicObj);
				}

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);

				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += sharedView.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}
			return v;
		},
		getStaticConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
				v += _row(localize.t('tiq.ext.jquery_selector'), _input(null, 'domid', ''));
				v += _row(localize.t('tiq.ext.trigger_on'), _input(null, 'event', ''));
				v += _row(localize.t('tiq.ext.trackingEvent'), _input(null, 'handler', ''));
			return v;
		},
		getCustomCodeConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			return _row(localize.t('tiq.ext.custom_tracking_code'), _input(null, 'code', ''));
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		if(extensionObj.handler === 'custom') {
			// $data('code').hide();
		}
		else {
			for (var i = 0; i < dynamic.length; i++) {
				instanceId = dynamic[i][0]._parentInstanceId;

				if(dynamic[i][0].setoption === 'var') {
					$data(instanceId+'_setoption').hide();
					$data(instanceId+'_settovar').show().before(' <span class="inline-label">'+localize.t('tiq.ext.variable')+'</span><br>');
					$data(instanceId+'_settotext').hide();
				}
				if(dynamic[i][0].setoption === 'text') {
					$data(instanceId+'_setoption').hide();
					$data(instanceId+'_settovar').hide();
					$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.text')+'</span><br>');
				}
				if(dynamic[i][0].setoption === 'code') {
					$data(instanceId+'_setoption').hide();
					$data(instanceId+'_settovar').hide();
					$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.js_code')+'</span><br>');
				}
			};
		}

	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		this.addItem(container);
		this.container = container;
        utui.customizations_template[100029].aceEditorEditStart = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------


		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_setoption') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			var itemId = this.addSetItem(container);
			$('#' + itemId + '_set').val(obj[setId + '_set']);
			$('#' + itemId + '_setoption').val(obj[setId + '_setoption']);
			if (obj[setId + '_setoption'] == 'var') {
				$('#' + itemId + '_settovar').val(obj[setId + '_settovar']);
				$('#'+itemId+'_settovar').select2('val', obj[setId+'_settovar'] || '');
			} else {
				$('#' + itemId + '_settotext').val(obj[setId + '_settotext']);
			}
			this.updateSetOption(itemId);
            this.aceEditor['code'].setValue($('#code').val(),-1);
			this.selectHandler(container, obj.handler);

		}


		if (fillFlag) {
			$('#domid').val(obj.domid);
			$('#handler').val(obj.handler);
			$('#event').val(obj.event);
			$('#code').val(obj.code);
			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_setoption') >= 0) {
					var setId = i.substring(0, i.indexOf('_set'));
					var itemId = this.addSetItem(container, setId);
					$('#' + itemId + '_set').val(obj[setId + '_set']);
					$('#' + itemId + '_set').select2('val', obj[setId + '_set'] || '');

					$('#' + itemId + '_setoption').val(obj[setId + '_setoption']);
					if (obj[setId + '_setoption'] == 'var') {
						$('#' + itemId + '_settovar').val(obj[setId + '_settovar']);
						$('#'+itemId+'_settovar').select2('val', obj[setId+'_settovar'] || '');
					} else {
						$('#' + itemId + '_settotext').val(obj[setId + '_settotext']);
					}
					this.updateSetOption(itemId);
                    this.aceEditor['code'].setValue($('#code').val(),-1);
					this.selectHandler(container, obj.handler);
				}
			}
			// Set up the conditions for ext 100029
			utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,this.id);

		} else {
			this.addSetItem(container);
		}

        if(cb) cb();
    },
    show: function (container) {},
    addItem: function (container) {
        var id = container;
        var content = '';
        content += '<div id="' + id + '" class="customization_padded">';
        content += '  <div class="customization_div" style="min-width:600px">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.jquery_selector') + '</div>';
        content += '    <div class="customization_item">';
        content += '      <input type="text" id="domid" name="domid" value="" size="64" style="float:left">';
        content += '    </div>';
        content += '  </div>';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.trigger_on') + '</div>';
        content += '    <div class="customization_item">';
        content += '        <select id="event" name="event"><option value="click">' + localize.t('tiq.ext.click') + '</option><option value="mousedown">' + localize.t('tiq.ext.mousedown') + '</option><option value="mouseup">' + localize.t('tiq.ext.mouseup') + '</option><option value="mouseover">' + localize.t('tiq.ext.mouseover') + '</option><option value="change">' + localize.t('tiq.ext.change_elements') + '</option><option value="blur">' + localize.t('tiq.ext.blur_elements') + '</option><option value="focus">' + localize.t('tiq.ext.focus_elements') + '</option></select>';
        content += '    </div>';
        content += '  </div>';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.trackingEvent') + '</div>';
        content += '    <div class="customization_item">';
        content += '      <select id="handler" name="handler"><option value="link">' + localize.t('tiq.ext.link') + '</option><option value="view">' + localize.t('tiq.ext.view') + '</option><option value="custom">' + localize.t('tiq.ext.custom') + '</option></select>';
        content += '    </div>';
        content += '  </div>';

        content += '  <div class="customization_div" style="min-width:600px" id="' + id + '_sethandler">';
        content += '    <div class="customization_div widget-container">';
        content += '      <div id="' + id + '_setcontainer"></div>';
        content += '    </div>';
        content += '  </div>';

        content += '  <div class="customization_div" style="display:none" id="' + id + '_customhandler">';
        content += '      <textarea id="code" value="" name="code" style="display:none"></textarea>';
        content += '      <div id="jq16-ext-ace-editor" class="ext-ace-edit-container"></div>';
        content += '  </div>';

		content += '  <div class="customization_div" style="padding-top:10px;border-top: 1px solid #999;">';
		content += '    <div class="customization_labelwide" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
		content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn ext-data-action">' + localize.t('tiq.ext.add_condition') + '</button></div>';
		content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left"></div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + id + '_content').html(content);
		$('#handler').on("change", function () {
			utui.customizations_template[100029].selectHandler(id)
		});



        utui.customizations_template[100029].aceEditor['code'] = ace.edit("jq16-ext-ace-editor");
        var aceEd16 = utui.customizations_template[100029].aceEditor['code'];
        aceEd16.$blockScrolling = Infinity;
        aceEd16.setOptions({
            maxLines : 50,
            mode : "ace/mode/javascript",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });
        aceEd16.setValue("");
        aceEd16.clearSelection();

        aceEd16.on("blur", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100029].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
        });

        aceEd16.on("change", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100029].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
            if (utui.customizations_template[100029].aceEditorEditStart){
                $('#code').trigger('change');
            }
        });

        aceEd16.on("focus", function(e){
            utui.customizations_template[100029].aceEditorEditStart = true;
        });

        aceEd16.setValue($('#code').val(),-1);

        // If imported, make editor read only
        if(exapi.isImported(container)) {
            aceEd16.setReadOnly(true);
        }

		$('#button_addcondition').attr('onClick', 'utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()');

		var tooltipObj = {};
		tooltipObj[id + '_syntaxcheck'] = {
			gravity: 'w'
		};
		tooltipObj[id + '_scopevars'] = {
			gravity: 'w'
		};
		utui.util.addTooltip(tooltipObj);
	},
	selectHandler: function (id, b) {
		b = $('#handler').val();

		$('#' + id + '_sethandler').hide();
		$('#' + id + '_customhandler').hide();

		if (b == "custom") {
			$('#' + id + '_customhandler').show();
            utui.customizations_template[100029].aceEditor['code'].focus();
		} else {
			$('#' + id + '_sethandler').show();

		}
	},
	addSetItem: function (container, instanceId) {
		var tooltipObj = {};
		var id = instanceId || utui.util.getContainerId();
		var content = '';

		content += '<div id="'+id+'_setitem" class="" style="margin-top: 2px;position: relative">';

			content += '<div id="'+id+'_set_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.set')+'</div>';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_set', container: container, id: this.id, stylefloat: 'left', showvars: 'js,va' });
				content += utui.ui.template.form.validationWrapper(field, id+'_set');
			content += '</div>';

			content += '<div class="inline vertical-align-bottom">';
				content += '<button onclick="utui.define.showAddMore(\''+container+'\',\'js\',\''+id+'_set'+'\', \'\', function() { utui.customizations_template.util.updateDestination(\'' + container + '\', \'' + id+'_set' + '\', \'js\'); })" class="btn btn-mini" style="float:left;">';
					content += '<i class="icon-plus" id="'+container+'_addmore_tooltip" title="'+localize.t('tiq.ext.click_here_to_create_datasource')+'"></i>';
				content += '</button>';
			content += '</div>';

			tooltipObj[container+'_addmore_tooltip'] = { gravity: 'w' };

			content += '<div id="'+id+'_setoption_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.to')+'</div>';
				content += '<select id="'+id+'_setoption" name="'+id+'_setoption" onchange="utui.customizations_template['+this.id+'].updateSetOption(\''+id+'\');" style="float:left">';
				content += '        <option value="text">' + localize.t('tiq.ext.text') + '</option>';
				content += '        <option value="var">' + localize.t('tiq.ext.variable') + '</option>';
				content += '        <option value="code">' + localize.t('tiq.ext.js_code') + '</option>';
				content += '</select>';
			content += '</div>';

			content += '<div id="'+id+'_settovar_container" class="inline vertical-align-bottom">';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_settovar', container: container, id: this.id, stylefloat: 'left' });
				content += utui.ui.template.form.validationWrapper(field, id+'_settovar');
			content += '</div>';

			content += '<div id="'+id+'_settotext_container" class="inline vertical-align-bottom">';
			content += '    <input type="text" size="48" id="'+id+'_settotext" name="'+id+'_settotext'+'" style="float:left;">';
			content += '</div>';
			content += '<div id="'+id+'_action_container" class="inline vertical-align-bottom">';
				content += '<button onclick="if($(\'#'+id+'_setitem'+'\').siblings().length>=1){utui.customizations_template['+this.id+'].removeSetItem(\''+id+'_setitem'+'\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';
				content += '<button onclick="utui.customizations_template['+this.id+'].addSetItem(\''+container+'\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
			content += '</div>'

		content += '</div>';


		$('#' + container + '_setcontainer').append(content);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_set', true);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_settovar', true);

		utui.customizations_template[100029].updateSetOption(id);
		utui.util.setOptionHandler(id, 100029);
		utui.util.jqQuoteHandler(id + '_settotext');
		utui.util.addTooltip(tooltipObj);
		return id;
	},
	updateSetOption:function(instanceId){
		var value = $('#'+instanceId+'_setoption').val();

		if (value === 'var') {
			$('#'+instanceId+'_settovar_container').show();
			$('#'+instanceId+'_settotext_container').hide();
		}
		else {
			$('#'+instanceId+'_settotext_container').show();
			$('#'+instanceId+'_settovar_container').hide();
		}
	},
	rebuildSelect: function (container, item) {
		var field = utui.customizations_template.util.buildSelect({
			item: item,
			container: container,
			id: this.id,
			stylefloat: 'left',
			showvars: 'js,va'
		});
		var s = utui.ui.template.form.validationWrapper(field, item);
		$('#' + item).replaceWith(s);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(item, true);
	},
	removeSetItem: function (container) {
		$('#' + container).remove();

		//remove from the DO
		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}
		delete utui.data.customizations[this.container][container + '_set'];
		delete utui.data.customizations[this.container][container + '_setoption'];
		delete utui.data.customizations[this.container][container + '_settotext'];
		delete utui.data.customizations[this.container][container + '_settovar'];

		utui.customizations.updateExtensionData(this.container);
	},
	removeItem: function (container) {
		$('#' + container).remove();

		utui.customizations.updateExtensionData(this.container);
	},
	addCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);
	},
	removeCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},	
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			kSetDupStack = utui.customizations_template.util.getDuplicateEntryIds(extObj._id, 'set'),
			validationObj = {},
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			// do nothing
		}

		if(dynamicConfigCollection.length > 0) {

			if(extObj.handler !== 'custom') {

				for (var i = 0; i < dynamicConfigCollection.length; i++) {
					entryCollection = dynamicConfigCollection[i]

					for(var j = 0; j < entryCollection.length; j++) {
						entryItem = entryCollection[j];

						key = getInstanceKey(entryItem, 'set');

						if(entryItem.set === '') {
							message = localize.t('tiq.validation.message.define_variable');
							validationObj[key] = message;

							utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
						}
						else if(!dsapi.isExistingGlobalVariable(entryItem.set)) {
							message = utui.validation.message.missingVariable( entryItem.set );
							validationObj[key] = message;

							utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.set);
						}
						else if(kSetDupStack.length > 0) {
							message = localize.t('tiq.validation.message.duplicate_variable_reselect');

							if(~kSetDupStack.indexOf(key)) {
								validationObj[key] = message;
								utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.set);
							}
						}

					};
				};
			}
		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.source === 'textvalue') {
						// do nothing
						continue;
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}
				};
			};
		}


		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//Customization 100030 - Mobile Library Manager
utui.customizations_template[100030] = {
	id: 100030,
	index: 0,
	container: '',
	fillData: function (container, fillFlag, cb) {
		this.container = container;

		var customization = utui.data.customizations[container];
		var content = '<div>';
		var titleId = 'title';
		var appId = 'appid';
		var trackAllViewsId = 'trackAllViews';
		var trackAllEventsId = 'trackAllEvents';
		var customTrackingId = 'customTracking';
		var trackVideoId = 'trackVideo';
		var trackIvarsId = 'trackIvars';
		var onId = 'mobileCompanionOn';
		var powerSaveId = 'mobilePowerSaveOn';
		var powerSaveCallLimitId = 'powerSaveCallLimit';

		content += '<div id="mobile_extension_content_' + container + '" class="mobile_extension_content customization_padded"></div>';
		content += '<input type="hidden" id="' + trackAllViewsId + '" name="' + trackAllViewsId + '" value="true" />';
		content += '<input type="hidden" id="' + trackAllEventsId + '" name="' + trackAllEventsId + '" value="false" />';
		content += '<input type="hidden" id="' + customTrackingId + '" name="' + customTrackingId + '" value="false" />';
		content += '<input type="hidden" id="' + appId + '" name="' + appId + '" />';
		content += '<input type="hidden" id="' + trackVideoId + '" name="' + trackVideoId + '" value="false" />';
		content += '<input type="hidden" id="' + trackIvarsId + '" name="' + trackIvarsId + '" value="false" />';
		content += '<input type="hidden" id="' + onId + '" name="' + onId + '" value="true"/>';
		content += '<input type="hidden" id="' + powerSaveId + '" name="' + powerSaveId + '" value="false" />';
		content += '<input type="hidden" id="' + powerSaveCallLimitId + '" name="' + powerSaveCallLimitId + '" value="0" />';

		$('#customizations_' + container + '_content').html(content);



        $('#mobile_extension_content_' + container).append(
                $('<div />', {
                    'class' : 'row'
                }).append(
                        $('<div />', {
                            'class' : 'header'
                        }).text(localize.t('tiq.ext.app_id'))
                    ).append(
                        $('<div />', {
                            id : 'app_id' + container,
                            'class' : 'rowValue'
                        }).text($('#me_app_id').val())
                    )
            ).append(
                $('<div />', {
                    'class' : 'row'
                }).append(
                        $('<div />', {
                            'class' : 'header'
                        }).text(localize.t('tiq.ext.mobile_companion'))
                    ).append(
                        $('<div />', {
                            id : 'mobile_extension_on' + container,
                            'class' : 'rowValue'
                        }).text('On')
                    )
            ).append(
                $('<div />', {
                    'class' : 'row'
                }).append(
                        $('<div />', {
                            'class' : 'header'
                        }).text(localize.t('tiq.ext.power_save_call'))
                    ).append(
                        $('<div />', {
                            id : 'mobile_extension_powerSaveCallLimit' + container,
                            'class' : 'rowValue'
                        }).text('0')
                    )
            ).append(
                $('<div />', {
                    'class' : 'row'
                }).append(
                        $('<div />', {
                            'class' : 'header'
                        }).text(localize.t('tiq.ext.tracking_type'))
                    ).append(
                        $('<div />', {
                            id : 'mobile_extension_auto_tracking' + container,
                            'class' : 'rowValue'
                        }).text(localize.t('tiq.ext.track_all_views'))
                    )
            );

		if (fillFlag) {
			var obj = utui.data.customizations[container];
			var isTrackingCustomSelection = false;
			var trackingType = '';

            for (var i in utui.util.getVars(obj, 2)) {
                // if (i.indexOf('title') === 0) {
                //     $('#' + titleId).val(obj[i]);
                //     $('#mobile_extension_title' + container).text(obj[i]);
                // }
                if(i.indexOf('appid')===0) {
                    $('#' + appId).val(obj[i]);
                    $('#app_id' + container).text(obj[i]);
                }
                if(i.indexOf('trackAllViews')>=0) {
                    if(obj[i] === 'true') {
                        trackingType = trackingType ? trackingType.split(', ') : [];
                        trackingType.push(localize.t('tiq.ext.tracking_all_views'));
                        trackingType = trackingType.join(', ');
                    }

                    $('#' + trackAllViewsId).val(obj[i]);
                } else if (i.indexOf('trackAllEvents') >= 0) {
                    if (obj[i] === 'true') {
                        trackingType = trackingType ? trackingType.split(', ') : [];
                        trackingType.push(localize.t('tiq.ext.tracking_all_events'));
                        trackingType = trackingType.join(', ');
                    }

                    $('#' + trackAllEventsId).val(obj[i]);
                }
                else if(i.indexOf('trackVideo')>=0) {
                    if(obj[i] === 'true') {
                        trackingType = trackingType ? trackingType.split(', ') : [];
                        trackingType.push(localize.t('tiq.ext.tracking_video'));
                        trackingType = trackingType.join(', ');
                    }

                    $('#' + trackVideoId).val(obj[i]);
                }
                else if(i.indexOf('trackIvars')>=0) {
                    if(obj[i] === 'true') {
                        trackingType = trackingType ? trackingType.split(', ') : [];
                        trackingType.push(localize.t('tiq.ext.tracking_ivars'));
                        trackingType = trackingType.join(', ');
                    }

					$('#' + trackIvarsId).val(obj[i]);
				}
				else if(i.indexOf('mobileCompanionOn')>=0) {
					if(obj[i] === 'true') {
						$('#mobile_extension_on' + container).text(localize.t('tiq.ext.on'));
					} else {
						$('#mobile_extension_on' + container).text(localize.t('tiq.ext.off'));
					}
					$('#' + onId).val(obj[i]);
				}
				else if(i.indexOf('powerSaveCallLimit')>=0) {

					$('#mobile_extension_powerSaveCallLimit' + container).text(obj[i]);
					var psVal = (parseInt(obj[i]) > 0) ? 'true' : 'false';
					$('#' + powerSaveId).val(psVal);

                    $('#' + powerSaveCallLimitId).val(obj[i]);
                } else if (i.indexOf('customTracking') >= 0) {
                    if (obj[i] === 'true') {
                        trackingType = trackingType ? trackingType.split(', ') : [];
                        trackingType.push(localize.t('tiq.ext.custom_tracking'));
                        trackingType = trackingType.join(', ');

						isTrackingCustomSelection = true;
					}

					$('#' + customTrackingId).val(obj[i]);
				} else if (i.indexOf('_source') >= 0) {
					var sourceId = i.substring(0, i.indexOf('_source'));
					var $sourceInput = $("#" + container + "_" + sourceId + "_source");
					if ($sourceInput.length > 0) {
						$sourceInput.val(obj[i]);
					} else {
						$("#" + container).append(
							$("<input />", {
								"type": "hidden",
								id: container + "_" + sourceId + "_source",
								name: container + "_" + sourceId + "_source"
							}).val(obj[i]).attr("isCondition", "true")
						)
					}
					continue;
				} else if (i.indexOf('_filtertype') >= 0) {
					var filterTypeId = i.substring(0, i.indexOf('_filtertype'));
					var $filterTypeInput = $("#" + container + "_" + filterTypeId + "_filtertype");
					if ($filterTypeInput.length > 0) {
						$filterTypeInput.val(obj[i]);
					} else {
						$("#" + container).append(
							$("<input />", {
								"type": "hidden",
								id: container + "_" + filterTypeId + "_filtertype",
								name: container + "_" + filterTypeId + "_filtertype"
							}).val(obj[i]).attr("isCondition", "true")
						)
					}
					continue;
				} else if (i.indexOf('_filter') >= 0) {
					var filterId = i.substring(0, i.indexOf('_filter'));
					var $filterInput = $("#" + container + "_" + filterId + "_filter");
					if ($filterInput.length > 0) {
						$filterInput.val(obj[i]);
					} else {
						$("#" + container).append(
							$("<input />", {
								"type": "hidden",
								id: container + "_" + filterId + "_filter",
								name: container + "_" + filterId + "_filter"
							}).val(obj[i]).attr("isCondition", "true")
						)
					}
					continue;
				}
			}

			$('#mobile_extension_auto_tracking' + container).text(trackingType);
		}

		if(cb) cb();
	},
	edit: function (container, $domWrapper) {
		var customization = utui.data.customizations[container],
			title = customization.title || '',
			appid = customization.appid || '',
			trackAllViews = customization.trackAllViews || 'true',
			trackAllEvents = customization.trackAllEvents,
			customTracking = customization.customTracking,
			trackVideo = customization.trackVideo,
			trackIvars = customization.trackIvars,
			on = customization.mobileCompanionOn || 'true',
			powerSaveCallLimit = customization.powerSaveCallLimit || '',
			self = this;

		function _reconstructConditionsBlock(isCustomClassType) {
			self.initializeConditionsBlock(container);
		}

		function _showCustomClassInput(bShow, fillValue) {
			fillValue = fillValue || '';

			if (bShow) {
				$('#customClassRow').show();
				$('#me_dialog_custom_class').val(fillValue);
			} else {
				$('#customClassRow').hide();
			}
		}

		var $content = $("<div />", {
			id: "mobile_extension_dialog_content"
		});

		$content.appendTo($domWrapper);

        var autoTrackingHtml = '<div>'
            + '<input type="checkbox" id="trackAllViewsCB" /><label for="trackAllViewsCB">' + localize.t('tiq.ext.track_all_views') + '</label>'
            + '<input type="checkbox" id="trackAllEventsCB" /><label for="trackAllEventsCB">' + localize.t('tiq.ext.track_all_events') + '</label>'
            + '<input type="checkbox" id="customTrackingCB" /><label for="customTrackingCB" title="' + localize.t('tiq.ext.selecting_custom_tracking') + '">' + localize.t('tiq.ext.custom_tracking') + '</label>'
            + '</div>';

        var autoTrackingOptionsHtml = '<div>'
            + '<input type="checkbox" id="trackVideoCB" /><label for="trackVideoCB">' + localize.t('tiq.ext.track_video') + '</label>'
            + '<input type="checkbox" id="trackIvarsCB" /><label for="trackIvarsCB">' + localize.t('tiq.ext.track_ivars') + '</label>'
            + '</div>';

        var mobileCompanionHtml = '<div id="mobileCompanionToggle">'
            + '<input type="radio" id="mobileCompanionToggleOn" name="mobileCompanionToggle" /><label for="mobileCompanionToggleOn">' + localize.t('tiq.ext.on') + '</label>'
            + '<input type="radio" id="mobileCompanionToggleOff" name="mobileCompanionToggle" /><label for="mobileCompanionToggleOff">' + localize.t('tiq.ext.off') + '</label>'
            + '</div>';

		var powerSaveCallLimitHtml = '<input type="text" id="powerSaveCallLimitField" />';

        $content.append(
                $('<div />', {
                    'class' : 'config_item'
                }).css({
                        'color' : '#999'
                    }).text(localize.t('tiq.ext.requires_tealium_mobile_tagging'))
            ).append(
                $('<div />', {
                    'class' : 'config_item'
                }).append(
                        $('<div />', {
                            'class' : 'customization_labelwide'
                        }).text(localize.t('tiq.ext.app_id'))
                    ).append(
                        $('<div />', {
                            'class' : 'customization_item'
                        }).append(
                                $('<input />', {
                                    id : 'me_app_id'
                                }).val(appid)
                            )
                    )
            ).append(
                $('<div />', {
                    'class' : 'config_item'
                }).append(
                        $('<div />', {
                            'class' : 'customization_labelwide'
                        }).text(localize.t('tiq.ext.mobile_companion'))
                    ).append(
                        $('<div />', {
                            'class' : 'customization_item'
                        }).append(mobileCompanionHtml)
                    )
            ).append(
                $('<div />', {
                    'class' : 'config_item'
                }).append(
                        $('<div />', {
                            'class' : 'customization_labelwide'
                        }).text(localize.t('tiq.ext.power_save_call'))
                    ).append(
                        $('<div />', {
                            'class' : 'customization_item'
                        }).append(powerSaveCallLimitHtml)
                    )
            ).append(
                $('<div />', {
                    'class' : 'config_item'
                }).append(
                        $('<div />', {
                            'class' : 'customization_labelwide'
                        }).text(localize.t('tiq.ext.tracking'))
                    ).append(
                        $('<div />', {
                            'class' : 'customization_item'
                        }).append(autoTrackingHtml)
                    )
            ).append(
                $('<div />', {
                    'class' : 'config_item',
                    'id' : 'auto_tracking_options'
                }).append(
                        $('<div />', {
                            'class' : 'customization_labelwide'
                        }).text('')
                    ).append(
                        $('<div />', {
                            'class' : 'customization_item'
                        }).append(autoTrackingOptionsHtml)
                    )
            ).append(
                $('<div />', {
                    css : {
                        clear : 'both'
                    }
                })
            );

		utui.customizations_template[this.id].addConditions($content, container);

		$("#" + container).find(":button").button();
		$('#mobileCompanionToggle').buttonset();
		$('#powerSaveModeToggle').buttonset();

		if (on === 'true') {
			$('#mobileCompanionToggleOn').get(0).checked = true;
			$('#mobileCompanionToggleOn').button('refresh');
		} else {
			$('#mobileCompanionToggleOff').get(0).checked = true;
			$('#mobileCompanionToggleOff').button('refresh');
		}

		$('#powerSaveCallLimitField').val(powerSaveCallLimit);

		if (trackAllViews === 'true') {
			$('#trackAllViewsCB').prop('checked', true);
		}
		if (trackAllEvents === 'true') {
			$('#trackAllEventsCB').prop('checked', true);
		}
		if (customTracking === 'true') {
			$('#customTrackingCB').prop('checked', true);
			$('#mobile_extension_dialog_content .conditionsBlock').show();
			$('#auto_tracking_options').show();
		}
		if(trackVideo === 'true') {
			$('#trackVideoCB').prop('checked', true);
		}
		if(trackIvars === 'true') {
			$('#trackIvarsCB').prop('checked', true);
		}

		$('#customTrackingCB').click(function () {
			var $el = $(this);
			if ($el.is(':checked')) {
				$('#mobile_extension_dialog_content .conditionsBlock').show();
				$('#trackVideoCB').prop('checked', true);
				$('#trackIvarsCB').prop('checked', true);
				$('#auto_tracking_options').show();
			}
			else {
				$('#mobile_extension_dialog_content .conditionsBlock').hide();
				$('#auto_tracking_options').hide();
				$('#trackVideoCB').prop('checked', false);
				$('#trackIvarsCB').prop('checked', false);

			}
		});

		$('#powerSaveCallLimitField').blur(function() {

            var numbers = /^[0-9]+$/;
            var pwrSaveVal = $.trim($('#powerSaveCallLimitField').val());
            if( !pwrSaveVal.match(numbers) || isNaN(parseInt(pwrSaveVal)) || pwrSaveVal.indexOf(' ') >= 0) {
                $('#powerSaveCallLimitField').val('0');
            }
        });
    },
    initializeConditionsBlock: function (container) {
        var content = '';
        var self = this;
        content += '  <div><div class="customization_div">';
        content += '    <div class="customization_label" style="float:left">' +localize.t('tiq.ext.condition') + '</div>';
        content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini">' + localize.t('tiq.ext.add_condition') + '</button></div>';
        content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left">';
        content += '    </div>';
        content += '    </div>';
        content += '  </div>';

		$('#auto_tracking_options').hide();
		$('.conditionsBlock').empty().append(content);
		$("#" + container).find(":button").button();

		$('#button_addcondition').click(function () {
			utui.customizations_template[self.id].addCondition(container);
			$('#button_addcondition').hide();
		});
	},
	addConditions: function ($container, container) {
		var customization = utui.data.customizations[container];
		var selectorPrefix = '#mobile_extension_dialog_content ';

		var $conditionsBlock = $("<div />", {
			"class": "conditionsBlock",
			css: {
				display: 'none'
			}
		});

		$container.append($conditionsBlock);
		this.initializeConditionsBlock(container);

		for (var i in customization) {
			if (i.indexOf('_source') >= 0 && i.split('_').length <= 2) {
				$('#button_addcondition').hide();
				var conditionId = i.substring(0, i.indexOf('_source'));
				var itemId = utui.customizations_template[this.id].addCondition(container, conditionId);
				$(selectorPrefix + '#' + itemId + '_source').val(customization[i]);
				$(selectorPrefix + '#' + itemId + '_filtertype').val(customization[i.replace('_source', '_filtertype')]);
				$(selectorPrefix + '#' + itemId + '_filter').val(customization[i.replace('_source', '_filter')]);
				utui.customizations_template.util.operatorSelectHandler(itemId);
				// process the "AND" conditions
				for (var i in utui.util.getVars(customization)) {
					if (i.indexOf('_source') >= 0 && i.split('_').length > 2 && i.indexOf(conditionId) == 0) {
						var addConditionId = i.split('_')[1];
						var itemAddId = utui.customizations_template[this.id].addAndCondition(itemId, addConditionId);
						$(selectorPrefix + '#' + itemAddId + '_source').val(customization[i]);
						$(selectorPrefix + '#' + itemAddId + '_filtertype').val(customization[i.replace('_source', '_filtertype')]);
						$(selectorPrefix + '#' + itemAddId + '_filter').val(customization[i.replace('_source', '_filter')]);
						utui.customizations_template.util.operatorSelectHandler(itemAddId);
					}
				}
			}
		}
	},
	addCondition: function (container, instanceId) {
		var classType = $('#classTypeSelect').val();

		var id = instanceId || utui.util.getContainerId();

        var content = '';
        if ($('#' + container + '_conditioncontainer').children('div').length > 0) {
            content += '  <div id="' + id + '_ortext"><div class="customization_div" style="float:left; clear:both;">';
            content += '    <div class="customization_labelthin">' + localize.t('tiq.ext.or') + '</div><div class="customization_labelwide"></div>';
            content += '  </div>';
            content += '  </div>';
        }

		content += '<div id="' + id + '_conditioncontainer" class="widget-container" style="min-width:600px;float:left;clear:both;">';
		//Condition
		var itemId = id + '_source';
		var existingSourceVal = $("#" + itemId).val();

		content += '<div id="' + id + '_conditioncontainer">';
		content += '  <div class="customization_div">';
		content += '    <div class="customization_labelthin" style="white-space:nowrap;"></div>';
		content += '    <div class="customization_item">';

		content += '<span id="' + itemId + '_varpane">';
		content += utui.customizations_template.util.buildMobileSelect({
			item: itemId,
			container: container,
			id: this.id,
			classType: classType
		});
		content += '</span>';
		var existingFilterType = $("#" + id + "_filtertype").val();

		content += utui.customizations_template.util.buildMobileOperatorSelect(id);

		itemId = id + "_filter";
		var existingFilter = $("#" + itemId).val();

		content += '    <input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '    </div>';
		content += '    <button onclick="utui.customizations_template[' + this.id + '].addAndCondition(\'' + id + '\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
		content += '  </div>';
		content += '</div>';
		content += '</div>';

		content += '<div id="' + id + '_buttons" style="float:right">'
		content += '<button onclick="if($(\'#' + id + '_conditioncontainer\').siblings().length<=2){$(\'#button_addcondition\').show()};utui.customizations_template[100030].removeCondition(\'' + id + '\')" class="btn btn-mini" title="'+localize.t('tiq.ext.remove_sub_condition')+'"><i class="icon-minus clickable"></i></button>';
		content += '<button onclick="utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\')" class="btn btn-mini" title="'+localize.t('tiq.ext.add_sub_condition')+'"><i class="icon-plus clickable"></i></button>';
		content += '</div>';

		$('#' + container + '_conditioncontainer').append(content);

		if (existingSourceVal) {
			$("#multioptout_dialog_content").find("#" + id + "_source").val(existingSourceVal);
		}
		if (existingFilterType) {
			$("#multioptout_dialog_content").find("#" + id + "_filtertype").val(existingFilterType);
		}
		if (existingFilter) {
			$("#multioptout_dialog_content").find("#" + id + "_filter").val(existingFilter);
		}
		return id;
	},
	addAndCondition: function (container, instanceId) {
		var classType = $('#classTypeSelect').val();
		var id = container + '_' + (instanceId || utui.util.getContainerId());
		var itemId = id + '_source';
		var existingSourceVal = $("#" + itemId).val();
		var content = '<div id="' + id + '_andcontainer" class="customization_div"><div class="customization_labelthin" style="white-space:nowrap;">' + localize.t('tiq.ext.and_colon') + '</div>';
		content += '<div class="customization_item">';

		content += '<span id="' + itemId + '_varpane">';
		var existingFilterType = $("#" + id + "_filtertype").val();
		content += utui.customizations_template.util.buildMobileSelect({
			item: itemId,
			container: container,
			id: this.id,
			classType: classType
		});
		content += '</span>';

		content += utui.customizations_template.util.buildMobileOperatorSelect(id);

		itemId = id + "_filter";
		var existingFilter = $("#" + itemId).val();
		content += '<input type="text" size="24" id="' + itemId + '" name="' + itemId + '">';
		content += '</div>';
		content += '<button onclick="utui.customizations_template[' + this.id + '].removeAndCondition(\'' + id + '\')" class="btn btn-mini js-action-removebtn">';
			content += '<i class="icon-minus"></i>';
		content += '</button>';
		content += '</div>';
		content += '</div>';
		$('#' + container + '_conditioncontainer').append(content);

		if (existingSourceVal) {
			$("#multioptout_dialog_content").find("#" + id + "_source").val(existingSourceVal);
		}
		if (existingFilterType) {
			$("#multioptout_dialog_content").find("#" + id + "_filtertype").val(existingFilterType);
		}
		if (existingFilter) {
			$("#multioptout_dialog_content").find("#" + id + "_filter").val(existingFilter);
		}

		return id;
	},
	removeCondition: function (container) {
		$('#' + container + '_conditioncontainer').remove();
		$('#' + container + '_ortext').remove();
		$('#' + container + '_buttons').remove();

		utui.customizations.updateExtensionData(this.container);
	},
	removeAndCondition: function (container) {
		$('#' + container + '_andcontainer').remove();

		utui.customizations.updateExtensionData(this.container);
	},
	saveProperty: function (customization, key, inputId, value) {
		customization[key] = value;
		$("#" + inputId).val(value);
	},
	save: function (container) {
		var customization = utui.data.customizations[container];
		var $container = $("#mobile_extension_dialog_content");

		var appId = 'appid';
		var trackAllViewsId = 'trackAllViews';
		var trackAllEventsId = 'trackAllEvents';
		var customTrackingId = 'customTracking';
		var trackVideoId = 'trackVideo';
		var trackIvarsId = 'trackIvars';
		var onId = 'mobileCompanionOn';
		var powerSaveModeId = 'mobilePowerSaveOn';
		var powerSaveCallLimit = 'powerSaveCallLimit';

		// Save all of the properties
		var appIdVal = $('#me_app_id').val();
		var isOnVal = $('#mobileCompanionToggleOn').is(':checked').toString();
		var isPowerSaveModeOnVal = (parseInt($.trim($('#powerSaveCallLimitField').val())) > 0) ? 'true':'false';
		var powerSaveCallLimit = $('#powerSaveCallLimitField').val();
		var trackingAllViewsVal = $('#trackAllViewsCB').is(':checked').toString();
		var trackingAllEventsVal = $('#trackAllEventsCB').is(':checked').toString();
		var customTrackingVal = $('#customTrackingCB').is(':checked').toString();
		var trackVideoVal = $('#trackVideoCB').is(':checked').toString();
		var trackIvarsVal = $('#trackIvarsCB').is(':checked').toString();

		this.saveProperty(customization, 'appid', appId, appIdVal);
		this.saveProperty(customization, 'mobileCompanionOn', onId, isOnVal);
		this.saveProperty(customization, 'mobilePowerSaveOn', powerSaveModeId, isPowerSaveModeOnVal);
		this.saveProperty(customization, 'powerSaveCallLimit', powerSaveCallLimit, powerSaveCallLimit);
		this.saveProperty(customization, 'trackAllViews', trackAllViewsId, trackingAllViewsVal);
		this.saveProperty(customization, 'trackAllEvents', trackAllEventsId, trackingAllEventsVal);
		this.saveProperty(customization, 'customTracking', customTrackingId, customTrackingVal);
		this.saveProperty(customization, 'trackVideo', trackVideoId, trackVideoVal);
		this.saveProperty(customization, 'trackIvars', trackIvarsId, trackIvarsVal);

		// Update the title in the extension header bar
		// $('#' + container).find('h3 .container_title').text(titleVal);

		// Save the conditions
		$("#" + container).find("[isCondition=true]").remove();
		for (var key in customization) {
			if (typeof key !== "string")
				continue;

			if (key.indexOf("_filter") >= 0 || key.indexOf("_filtertype") >= 0 || key.indexOf("_source") >= 0)
				delete customization[key];
		}

		$("#mobile_extension_dialog_content .conditionsBlock").find("input, select").each(function (event) {
			var $el = $(this);
			var elId = $el.attr("id");

			$("#" + container).append(
				$("<input />", {
					id: elId,
					name: elId,
					type: "hidden"
				}).val($el.val()).attr("isCondition", "true")
			);

			var propKey = elId.substring(container.length + 1);
			customization[propKey] = $el.val();
		});

		// Call fillData to display the changes
		this.fillData(container, true);
	},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


//Customization 100031 - Currency Converter
utui.customizations_template[100031] = {
	id: 100031,
	index: 0,
	container: '',
	currencyList: [
		{code: 'AED', title: 'AED (United Arab Emirates Dirham)'},
		{code: 'AFN', title: 'AFN (Afghanistan Afghani)'},
		{code: 'ALL', title: 'ALL (Albania Lek)'},
		{code: 'AMD', title: 'AMD (Armenia Dram)'},
		{code: 'ANG', title: 'ANG (Netherlands Antilles Guilder)'},
		{code: 'AOA', title: 'AOA (Angola Kwanza)'},
		{code: 'ARS', title: 'ARS (Argentina Peso)'},
		{code: 'AUD', title: 'AUD (Australia Dollar)'},
		{code: 'AWG', title: 'AWG (Aruba Guilder)'},
		{code: 'AZN', title: 'AZN (Azerbaijan New Manat)'},
		{code: 'BAM', title: 'BAM (Bosnia and Herzegovina Marka)'},
		{code: 'BBD', title: 'BBD (Barbados Dollar)'},
		{code: 'BDT', title: 'BDT (Bangladesh Taka)'},
		{code: 'BGN', title: 'BGN (Bulgaria Lev)'},
		{code: 'BHD', title: 'BHD (Bahrain Dinar)'},
		{code: 'BIF', title: 'BIF (Burundi Franc)'},
		{code: 'BMD', title: 'BMD (Bermuda Dollar)'},
		{code: 'BND', title: 'BND (Brunei Darussalam Dollar)'},
		{code: 'BOB', title: 'BOB (Bolivia Boliviano)'},
		{code: 'BRL', title: 'BRL (Brazil Real)'},
		{code: 'BSD', title: 'BSD (Bahamas Dollar)'},
		{code: 'BTC', title: 'BTC (Bitcoin)'},
		{code: 'BTN', title: 'BTN (Bhutan Ngultrum)'},
		{code: 'BWP', title: 'BWP (Botswana Pula)'},
		{code: 'BYR', title: 'BYR (Belarus Ruble)'},
		{code: 'BZD', title: 'BZD (Belize Dollar)'},
		{code: 'CAD', title: 'CAD (Canada Dollar)'},
		{code: 'CDF', title: 'CDF (Congo/Kinshasa Franc)'},
		{code: 'CHF', title: 'CHF (Switzerland Franc)'},
		{code: 'CLF', title: 'CLF (Chilean Unidad de Fomento)'},
		{code: 'CLP', title: 'CLP (Chile Peso)'},
		{code: 'CNY', title: 'CNY (China Yuan Renminbi)'},
		{code: 'COP', title: 'COP (Colombia Peso)'},
		{code: 'CRC', title: 'CRC (Costa Rica Colon)'},
		{code: 'CUP', title: 'CUP (Cuba Peso)'},
		{code: 'CVE', title: 'CVE (Cape Verde Escudo)'},
		{code: 'CZK', title: 'CZK (Czech Republic Koruna)'},
		{code: 'DJF', title: 'DJF (Djibouti Franc)'},
		{code: 'DKK', title: 'DKK (Denmark Krone)'},
		{code: 'DOP', title: 'DOP (Dominican Republic Peso)'},
		{code: 'DZD', title: 'DZD (Algeria Dinar)'},
		{code: 'EEK', title: 'EEK (Estonian Kroon)'},
		{code: 'EGP', title: 'EGP (Egypt Pound)'},
		{code: 'ETB', title: 'ETB (Ethiopia Birr)'},
		{code: 'EUR', title: 'EUR (Euro Member Countries)'},
		{code: 'FJD', title: 'FJD (Fiji Dollar)'},
		{code: 'FKP', title: 'FKP (Falkland Islands Pound)'},
		{code: 'GBP', title: 'GBP (United Kingdom Pound)'},
		{code: 'GEL', title: 'GEL (Georgia Lari)'},
		{code: 'GHS', title: 'GHS (Ghana Cedi)'},
		{code: 'GIP', title: 'GIP (Gibraltar Pound)'},
		{code: 'GMD', title: 'GMD (Gambia Dalasi)'},
		{code: 'GNF', title: 'GNF (Guinea Franc)'},
		{code: 'GTQ', title: 'GTQ (Guatemala Quetzal)'},
		{code: 'GYD', title: 'GYD (Guyana Dollar)'},
		{code: 'HKD', title: 'HKD (Hong Kong Dollar)'},
		{code: 'HNL', title: 'HNL (Honduras Lempira)'},
		{code: 'HRK', title: 'HRK (Croatia Kuna)'},
		{code: 'HTG', title: 'HTG (Haiti Gourde)'},
		{code: 'HUF', title: 'HUF (Hungary Forint)'},
		{code: 'IDR', title: 'IDR (Indonesia Rupiah)'},
		{code: 'ILS', title: 'ILS (Israel Shekel)'},
		{code: 'INR', title: 'INR (India Rupee)'},
		{code: 'IQD', title: 'IQD (Iraq Dinar)'},
		{code: 'IRR', title: 'IRR (Iran Rial)'},
		{code: 'ISK', title: 'ISK (Iceland Krona)'},
		{code: 'JEP', title: 'JEP (Jersey Pound)'},
		{code: 'JMD', title: 'JMD (Jamaica Dollar)'},
		{code: 'JOD', title: 'JOD (Jordan Dinar)'},
		{code: 'JPY', title: 'JPY (Japan Yen)'},
		{code: 'KES', title: 'KES (Kenya Shilling)'},
		{code: 'KGS', title: 'KGS (Kyrgyzstan Som)'},
		{code: 'KHR', title: 'KHR (Cambodia Riel)'},
		{code: 'KMF', title: 'KMF (Comoros Franc)'},
		{code: 'KPW', title: 'KPW (Korea (North) Won)'},
		{code: 'KRW', title: 'KRW (Korea (South) Won)'},
		{code: 'KWD', title: 'KWD (Kuwait Dinar)'},
		{code: 'KYD', title: 'KYD (Cayman Islands Dollar)'},
		{code: 'KZT', title: 'KZT (Kazakhstan Tenge)'},
		{code: 'LAK', title: 'LAK (Laos Kip)'},
		{code: 'LBP', title: 'LBP (Lebanon Pound)'},
		{code: 'LKR', title: 'LKR (Sri Lanka Rupee)'},
		{code: 'LRD', title: 'LRD (Liberia Dollar)'},
		{code: 'LSL', title: 'LSL (Lesotho Loti)'},
		{code: 'LTL', title: 'LTL (Lithuania Litas)'},
		{code: 'LVL', title: 'LVL (Latvia Lat)'},
		{code: 'LYD', title: 'LYD (Libya Dinar)'},
		{code: 'MAD', title: 'MAD (Morocco Dirham)'},
		{code: 'MDL', title: 'MDL (Moldova Leu)'},
		{code: 'MGA', title: 'MGA (Madagascar Ariary)'},
		{code: 'MKD', title: 'MKD (Macedonia Denar)'},
		{code: 'MMK', title: 'MMK (Myanmar (Burma) Kyat)'},
		{code: 'MNT', title: 'MNT (Mongolia Tughrik)'},
		{code: 'MOP', title: 'MOP (Macau Pataca)'},
		{code: 'MRO', title: 'MRO (Mauritania Ouguiya)'},
		{code: 'MUR', title: 'MUR (Mauritius Rupee)'},
		{code: 'MVR', title: 'MVR (Maldives Rufiyaa)'},
		{code: 'MWK', title: 'MWK (Malawi Kwacha)'},
		{code: 'MXN', title: 'MXN (Mexico Peso)'},
		{code: 'MYR', title: 'MYR (Malaysia Ringgit)'},
		{code: 'MZN', title: 'MZN (Mozambique Metical)'},
		{code: 'NAD', title: 'NAD (Namibia Dollar)'},
		{code: 'NGN', title: 'NGN (Nigeria Naira)'},
		{code: 'NIO', title: 'NIO (Nicaragua Cordoba)'},
		{code: 'NOK', title: 'NOK (Norway Krone)'},
		{code: 'NPR', title: 'NPR (Nepal Rupee)'},
		{code: 'NZD', title: 'NZD (New Zealand Dollar)'},
		{code: 'OMR', title: 'OMR (Oman Rial)'},
		{code: 'PAB', title: 'PAB (Panama Balboa)'},
		{code: 'PEN', title: 'PEN (Peru Nuevo Sol)'},
		{code: 'PGK', title: 'PGK (Papua New Guinea Kina)'},
		{code: 'PHP', title: 'PHP (Philippines Peso)'},
		{code: 'PKR', title: 'PKR (Pakistan Rupee)'},
		{code: 'PLN', title: 'PLN (Poland Zloty)'},
		{code: 'PYG', title: 'PYG (Paraguay Guarani)'},
		{code: 'QAR', title: 'QAR (Qatar Riyal)'},
		{code: 'RON', title: 'RON (Romania New Leu)'},
		{code: 'RSD', title: 'RSD (Serbia Dinar)'},
		{code: 'RUB', title: 'RUB (Russia Ruble)'},
		{code: 'RWF', title: 'RWF (Rwanda Franc)'},
		{code: 'SAR', title: 'SAR (Saudi Arabia Riyal)'},
		{code: 'SBD', title: 'SBD (Solomon Islands Dollar)'},
		{code: 'SCR', title: 'SCR (Seychelles Rupee)'},
		{code: 'SDG', title: 'SDG (Sudan Pound)'},
		{code: 'SEK', title: 'SEK (Sweden Krona)'},
		{code: 'SGD', title: 'SGD (Singapore Dollar)'},
		{code: 'SHP', title: 'SHP (Saint Helena Pound)'},
		{code: 'SLL', title: 'SLL (Sierra Leone Leone)'},
		{code: 'SOS', title: 'SOS (Somalia Shilling)'},
		{code: 'SRD', title: 'SRD (Suriname Dollar)'},
		{code: 'STD', title: 'STD (São Tomé and Príncipe Dobra)'},
		{code: 'SVC', title: 'SVC (El Salvador Colon)'},
		{code: 'SYP', title: 'SYP (Syria Pound)'},
		{code: 'SZL', title: 'SZL (Swaziland Lilangeni)'},
		{code: 'THB', title: 'THB (Thailand Baht)'},
		{code: 'TJS', title: 'TJS (Tajikistan Somoni)'},
		{code: 'TMT', title: 'TMT (Turkmenistan Manat)'},
		{code: 'TND', title: 'TND (Tunisia Dinar)'},
		{code: 'TOP', title: 'TOP (Tonga Pa\'anga)'},
		{code: 'TRY', title: 'TRY (Turkey Lira)'},
		{code: 'TTD', title: 'TTD (Trinidad and Tobago Dollar)'},
		{code: 'TWD', title: 'TWD (Taiwan New Dollar)'},
		{code: 'TZS', title: 'TZS (Tanzania Shilling)'},
		{code: 'UAH', title: 'UAH (Ukraine Hryvna)'},
		{code: 'UGX', title: 'UGX (Uganda Shilling)'},
		{code: 'USD', title: 'USD (United States Dollar)'},
		{code: 'UYU', title: 'UYU (Uruguay Peso)'},
		{code: 'UZS', title: 'UZS (Uzbekistan Som)'},
		{code: 'VEF', title: 'VEF (Venezuela Bolivar)'},
		{code: 'VND', title: 'VND (Viet Nam Dong)'},
		{code: 'VUV', title: 'VUV (Vanuatu Vatu)'},
		{code: 'WST', title: 'WST (Samoa Tala)'},
		{code: 'XAF', title: 'XAF (CFA Franc BEAC)'},
		{code: 'XCD', title: 'XCD (East Caribbean Dollar)'},
		{code: 'XDR', title: 'XDR (International Monetary Fund)'},
		{code: 'XOF', title: 'XOF (CFA Franc BCEAO)'},
		{code: 'XPF', title: 'XPF (CFP Franc)'},
		{code: 'YER', title: 'YER (Yemen Rial)'},
		{code: 'ZAR', title: 'ZAR (South Africa Rand)'},
		{code: 'ZMK', title: 'ZMK (Zambia Kwacha)'},
		{code: 'ZWL', title: 'ZWL (Zimbabwean Dollar)'}
	],

	template: {
		main: function(extensionObj) {
			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

					if(dynamic.length > 0)
						v += this.setConfigurationView(extensionObj, dynamic);

					v += '</div>';
				v += '</div>';
			return v;
		},
		setConfigurationView: function(extensionObj, dynamic) {
			var v = '';
				for (var i = 0; i < dynamic.length; i++) {
					v += '<div class="row-fluid">';
						v += '<div class="span6">';
							v += '<div>'+localize.t('tiq.ext.convert')+'</div>';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_currencyconvertvariable', '');
						v += '</div>';
						v += '<div class="span6">';
							v += '<div>'+localize.t('tiq.ext.on_condition')+'</div>';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_loadrule', '');
						v += '</div>';
					v += '</div>';

					v += '<div class="row-fluid">';
						v += '<div class="span6">';
							v += '<div>'+localize.t('tiq.ext.from_currency')+'</div>';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_fromcurrency', '');
						v += '</div>';
						v += '<div class="span6">';
							v += '<div>'+localize.t('tiq.ext.to_currency')+'</div>';
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_tocurrency', '');
						v += '</div>';
					v += '</div>';

				};
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		this.container = container;

		var obj = exapi.getObjectByExtensionId(container);

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		var content = '';
		content += '<div id="' + container + '_container" class="customization_padded"></div>';
		content += '<div class="customization_padded" style="text-align:center">';
			content += '<button id="container_add" class="btn actionNewRule i-color-add js-action-addbtn" original-title=""><i class="icon-plus"></i> '+localize.t('tiq.ext.add_currency_conversion')+'</button>';
		content += '</div>';
		$('#customizations_' + container + '_content').html(content);

		if (fillFlag) {
			//create the currency convert items
			for (var i in utui.util.getVars(obj, 2)) {
				if (i.indexOf('_currencyconvertvariable') > 0) {
					var a = i.split('_');
					this.addCurrencyConvertItem(this, container, a[0]);
				}
			}

			//fill the data
			var $element;
			var elementValue;
			for (var i in utui.util.getVars(obj)) {
				$element = $('#' + i);
				elementValue = obj[i];
				// Need to handle multiple select
				if (i == "scope" && $element.hasClass("select2") && elementValue) {
					$element.select2('val', elementValue.toString().split(",") || '');
				} else {
					$element.val(elementValue);
					$element.select2('val', elementValue || '');
				}
			}

		} else {
			this.addCurrencyConvertItem(this, container);
		}
		$('#container_add').on('click', {
			param0: this,
			param1: container,
			param2: this.addCurrencyConvertItem
		}, function (event) {
			event.data.param2(event.data.param0, event.data.param1)
		});

		if(cb) cb();
	},
	show: function (container) {},
	addCurrencyConvertItem: function (self, container, instanceId) {
		var tooltipObj = {};
		var id = instanceId || utui.util.getContainerId();
		var itemId = id + '_currencyconvertitem';
		var content = '';
		content += '<div id="' + itemId + '" class="widget-container" style="margin-top: 8px; position: relative; padding:10px">';
		content += '  <div class="customizations-row" style="">';

		content += '  <div class="inline vertical-align-bottom">';
		content += '    <div class="customization_label" style="text-align:left">'+localize.t('tiq.ext.convert')+'</div>';
		content += '    <span id="' + id + '_currencyconvertvariable_container" class="inline">';
		var field = utui.customizations_template.util.buildSelect({ item: id + '_currencyconvertvariable', container: container, id: self.id, stylefloat: 'left' });
		content += utui.ui.template.form.validationWrapper(field, id+'_currencyconvertvariable');
		content += '    </span>';
		content += '  </div>'
		content += '  <div class="inline vertical-align-bottom">';
		content += '    <div class="customization_label" style="text-align:left;width:90px;margin-left:30px">'+localize.t('tiq.ext.on_condition')+'</div>';
		content += '    <span>';

		var field = '<select id="'+id+'_loadrule" name="'+id+'_loadrule" title="'+utui.tooltip.manage.loadrule+'" style="float:left;" placeholder="'+localize.t('tiq.ext.select_a_loadrule')+'">';
		field += utui.loadrules.setLoadRulesSelect(undefined);
		field += '</select>';

		content += utui.ui.template.form.validationWrapper(field, id+'_loadrule');



		content += '    </span>';
		content += '  </div>'
		content += '  <button id="' + id + '_delete" class="actionDelete btn btn-small i-color-delete js-action-removebtn" style="float:right;margin-left:10px"><i class="icon-trash"></i> '+localize.t('tiq.ext.delete')+'</button>';
		content += '  </div>'

		content += '  <div class="customizations-row" style="clear:both;margin-top:10px">';
		content += '  <div class="inline vertical-align-bottom">';
		content += '    <div class="customization_labelwide" style="text-align:left;width:100px">'+localize.t('tiq.ext.from_currency')+'</div>';
		itemId = id + '_fromcurrency';
		content += '    <select id="' + itemId + '" name="' + itemId + '" style="float:left">';
		for (var i = 0; i < self.currencyList.length; i++) {
			var v = self.currencyList[i];
			content += '<option value="' + v.code + '">' + _.escape(v.title) + '</option>';
		}
		content += '    </select>';
		content += '  </div>';

		content += '  <div class="inline vertical-align-bottom">';
		content += '    <div class="customization_labelwide" style="text-align:left;margin-left:30px;width:90px">'+localize.t('tiq.ext.to_currency')+'</div>';
		itemId = id + '_tocurrency';
		content += '    <select id="' + itemId + '" name="' + itemId + '" style="float:left">';
		for (var i = 0; i < self.currencyList.length; i++) {
			var v = self.currencyList[i];
			if (v.code == 'USD') {
				content += '<option value="' + v.code + '" selected>' + _.escape(v.title) + '</option>';
			} else {
				content += '<option value="' + v.code + '">' + _.escape(v.title) + '</option>';
			}
		}
		content += '    </select>';
		content += '  </div>';
		content += '  </div>';

		content += '</div>';
		$('#' + container + '_container').append(content);


			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_currencyconvertvariable', true);
			utui.ui.convertSelectListToSelect2(id+'_loadrule');
			utui.ui.convertSelectListToSelect2(id+'_fromcurrency');
			utui.ui.convertSelectListToSelect2(id+'_tocurrency');

		$('#' + id + '_delete').on('click', {
			param0: self,
			param1: id + '_currencyconvertitem',
			param2: self.removeCurrencyConvertItem
		}, function (event) {
			event.data.param2(event.data.param0, event.data.param1)
		});
		utui.util.addTooltip(tooltipObj);

		return id;
	},
	removeCurrencyConvertItem: function (self, container) {
		$('#' + container).remove();

		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}

		delete utui.data.customizations[self.container][container + '_currencyconvertvariable'];
		delete utui.data.customizations[self.container][container + '_fromcurrency'];
		delete utui.data.customizations[self.container][container + '_loadrule'];
		delete utui.data.customizations[self.container][container + '_tocurrency'];

		utui.customizations.updateExtensionData(self.container);
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			// do nothing
		}

		if(dynamicConfigCollection.length > 0) {
			// do something
			for (var i = 0; i < dynamicConfigCollection.length; i++) {
				entryCollection = dynamicConfigCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'currencyconvertvariable');

					if(entryItem.currencyconvertvariable === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.currencyconvertvariable)) {
						message = utui.validation.message.missingVariable( entryItem.currencyconvertvariable );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.currencyconvertvariable);
					}

					key = getInstanceKey(entryItem, 'loadrule');

					if(entryItem.loadrule === 'all') {
						continue;
					} else if(entryItem.loadrule === '' || $.isEmptyObject(utui.data.loadrules[entryItem.loadrule])) {
						message = localize.t('tiq.validation.message.assign_loadrule');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
				};
			};
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}



//Customization 100032 - jQuery onHandler Live
utui.customizations_template[100032] = {
	id: 100032,
    aceEditor: {},
    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editor
    //------------------------------------------------------------------------------------------------------------------
    destructor: function(){
        if (utui.customizations_template[100032].aceEditor){
            _.each(utui.customizations_template[100032].aceEditor,function(ae){
                ae.destroy();
            });
        }
    },
	container: '',
	template: {
		main: function(extensionObj) {
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getStaticConfiguration();

				if(extensionObj.handler === 'custom') {
					_x += this.getCustomCodeConfiguration();
				} else if(!$.isEmptyObject(configDynamicObj)) {
					_x += sharedView.getSetConfiguration(configDynamicObj);
				}

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);

				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += sharedView.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}
			return v;
		},
		getStaticConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
				v += _row(localize.t('tiq.ext.jquery_selector'), _input(null, 'selector', ''));
				v += _row(localize.t('tiq.ext.primary_selector'), _input(null, 'primaryselector', ''));
				v += _row(localize.t('tiq.ext.trigger_on'), _input(null, 'event', ''));
				v += _row(localize.t('tiq.ext.trackingEvent'), _input(null, 'handler', ''));
			return v;
		},
		getCustomCodeConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			return _row(localize.t('tiq.ext.custom_tracking_code'), _input(null, 'code', ''));
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show().before(' <span class="inline-label">'+localize.t('tiq.ext.variable')+'</span><br>');
				$data(instanceId+'_settotext').hide();
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.text')+'</span><br>');
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().before(' <span class="inline-label">'+localize.t('tiq.ext.js_code')+'</span><br>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "settotext":
			case "settovar":
				if(extensionObj.setoption === 'text') {
					roValue = value;
				}
				if(extensionObj.setoption === 'var') {
					roValue = dsapi.getDataSourceFormattedName(value);
				}
				break;
			case "allowupdate":
				options = {
					multiple: localize.t('tiq.ext.allow_update_on_page_view'),
					once: localize.t('tiq.ext.keep_first_value_set')
				}
				roValue = options[value];
				break;
			case "persistence":
				options = {
					session: localize.t('tiq.ext.session'),
					visitor: localize.t('tiq.ext.visitor'),
					hours: localize.t('tiq.ext.hours'),
					days: localize.t('tiq.ext.days')
				}
				roValue = options[value];
				break;
			case "var":
				//TODO: create or use API to get extension name...
				roValue = dsapi.getDataSourceFormattedName(value);
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		this.container = container;
        utui.customizations_template[100032].aceEditorEditStart = false;
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		this.addItem(container);

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		// rb - If this template has not been initialized before, add the initial value
		for (var key in obj) {
			if(!obj.hasOwnProperty(key)) continue;

			if(key.indexOf('_setoption') > -1) {
				isInitialized = true;
				break;
			}
		}
		if(!isInitialized) {
			var itemId = this.addSetItem(container);
			$('#' + itemId + '_set').val(obj[setId + '_set']);
			$('#' + itemId + '_setoption').val(obj[setId + '_setoption']);
			if (obj[setId + '_setoption'] == 'var') {
				$('#' + itemId + '_settovar').val(obj[setId + '_settovar']);
				$('#'+itemId+'_settovar').select2('val', obj[setId+'_settovar'] || '');
			} else {
				$('#' + itemId + '_settotext').val(obj[setId + '_settotext']);
			}
			this.updateSetOption(itemId);
			this.aceEditor['code'].setValue($('#code').val(),-1);
			this.selectHandler(container, obj.handler);

		}

		if (fillFlag) {
			var obj = exapi.getObjectByExtensionId(container);

			$('#selector').val(obj.selector);
			$('#handler').val(obj.handler);
			$('#event').val(obj.event);
			$('#code').val(obj.code);
			$('#primaryselector').val(obj.primaryselector);
			if (obj.live) {
				$('#' + container + '_live').prop('checked', true);
			}
			for (var i in utui.util.getVars(obj, 2)) {

				if (i.indexOf('_setoption') >= 0) {
					var setId = i.substring(0, i.indexOf('_set'));
					var itemId = this.addSetItem(container, setId);
					$('#' + itemId + '_set').val(obj[setId + '_set']);
					$('#' + itemId + '_set').select2('val', obj[setId + '_set'] || '');

					$('#' + itemId + '_setoption').val(obj[setId + '_setoption']);

					if (obj[setId + '_setoption'] == 'var') {
						$('#' + itemId + '_settovar').val(obj[setId + '_settovar']);
						$('#'+itemId+'_settovar').select2('val', obj[setId+'_settovar'] || '');
					} else {
						$('#' + itemId + '_settotext').val(obj[setId + '_settotext']);
					}

					this.updateSetOption(itemId);
					this.aceEditor['code'].setValue($('#code').val(),-1);
					this.selectHandler(container, obj.handler);
				}
			}

			// Set up the conditions for extension 100032
			utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,this.id);

		} else {
			this.addSetItem(container);
		}

		if(cb) cb();
	},
	show: function (container) {},
	addItem: function (container) {
		var id = container;

        var content = '';
        content += '<div id="' + id + '" class="customization_padded">';
        content += '  <div class="customization_div" style="min-width:600px">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.jquery_selector') + '</div>';
        content += '    <div class="customization_item">';
        content += '      <input type="text" id="selector" name="selector" value="" size="64" style="float:left">';
        content += '    </div>';
        content += '  </div>';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.primary_selector') + '</div>';
        content += '    <div class="customization_item" style="padding:4px">';
        content += '        <input type="text" id="primaryselector" name="primaryselector" value="" style="float:left">';
        content += '        <span style="margin-top:5px;margin-left:2px;float:right" id="' + id + '_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100032_primaryselector_tooltip + '"></span>';
        content += '    </div>';
        content += '  </div>';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.trigger_on') + '</div>';
        content += '    <div class="customization_item">';
        content += '      <select id="event" name="event"><option value="show">' + localize.t('tiq.ext.show', {lcase:true}) + '</option><option value="hide">' + localize.t('tiq.ext.hide', {lcase:true}) + '</option><option value="click">' + localize.t('tiq.ext.click') + '</option><option value="mousedown">' + localize.t('tiq.ext.mousedown') + '</option><option value="mouseup">' + localize.t('tiq.ext.mouseup') + '</option><option value="mouseover">' + localize.t('tiq.ext.mouseover') + '</option><option value="change">' + localize.t('tiq.ext.change_elements') + '</option><option value="blur">' + localize.t('tiq.ext.blur_elements') + '</option><option value="focus">' + localize.t('tiq.ext.focus_elements') + '</option></select>';
        content += '    </div>';
        content += '  </div>';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_labelwide">' + localize.t('tiq.ext.trackingEvent') + '</div>';
        content += '    <div class="customization_item">';
        content += '      <select id="handler" name="handler"><option value="link">' + localize.t('tiq.ext.link') + '</option><option value="view">' + localize.t('tiq.ext.view') + '</option><option value="custom">' + localize.t('tiq.ext.custom') + '</option></select>';
        content += '    </div>';
        content += '  </div>';

		content += '  <div class="customization_div" style="min-width:600px" id="' + id + '_sethandler">';
		content += '    <div class="customization_div widget-container">';
		content += '      <div id="' + id + '_setcontainer"></div>';
		content += '    </div>';
		content += '  </div>';

		content += '  <div class="customization_div" style="display:none" id="' + id + '_customhandler">';
        content += '      		<textarea id="code" value="" name="code" style="display:none"></textarea>';
        content += '      		<div id="jq17-ext-ace-editor" class="ext-ace-edit-container"></div>';
		content += '  </div>';

		content += '  <div class="customization_div" style="padding-top:10px;border-top: 1px solid #999;">';
		content += '    <div class="customization_labelwide" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
		content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn ext-data-action">' + localize.t('tiq.ext.add_condition') + '</button></div>';
		content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left"></div>';
		content += '  </div>';

		content += '</div>';

		$('#customizations_' + id + '_content').html(content);

		$('#handler').on("change", function () {
			utui.customizations_template[100032].selectHandler(id)
		});


        utui.customizations_template[100032].aceEditor['code'] = ace.edit("jq17-ext-ace-editor");
        var aceEd17 = utui.customizations_template[100032].aceEditor['code'];
        aceEd17.$blockScrolling = Infinity;
        aceEd17.setOptions({
            maxLines : 50,
            mode : "ace/mode/javascript",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });
        aceEd17.setValue("");
        aceEd17.clearSelection();

        aceEd17.on("blur", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100032].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
        });

        aceEd17.on("change", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100032].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
            if (utui.customizations_template[100032].aceEditorEditStart){
                $('#code').trigger('change');
            }
        });

        aceEd17.on("focus", function(e){
            utui.customizations_template[100032].aceEditorEditStart = true;
        });

        aceEd17.setValue($('#code').val(),-1);

		// If imported, make editor read only
        if(exapi.isImported(container)) {
            aceEd17.setReadOnly(true);
        }


        $('#button_addcondition').attr('onClick', 'utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()');

		var tooltipObj = {};
		tooltipObj[id + '_syntaxcheck'] = {
			gravity: 'w'
		};
		tooltipObj[id + '_scopevars'] = {
			gravity: 'w'
		};
		utui.util.addTooltip(tooltipObj);

	},
	selectHandler: function (id, b) {
		b = $('#handler').val();

		$('#' + id + '_sethandler').hide();
		$('#' + id + '_customhandler').hide();

		if (b == "custom") {
			$('#' + id + '_customhandler').show();
            utui.customizations_template[100032].aceEditor['code'].focus();
		} else {
			$('#' + id + '_sethandler').show();

		}
	},
	addSetItem: function (container, instanceId) {
		var id = instanceId || utui.util.getContainerId();
		var tooltipObj = {};
		var itemId = id + '_setitem';

		var content = '';


		content += '<div id="'+id+'_setitem" class="" style="margin-top: 2px;position: relative">';

			content += '<div id="'+id+'_set_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.set')+'</div>';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_set', container: container, id: this.id, stylefloat: 'left', showvars: 'js' });
				content += utui.ui.template.form.validationWrapper(field, id+'_set');
			content += '</div>';

			content += '<div class="inline vertical-align-bottom">';
				content += '<button onclick="utui.define.showAddMore(\''+container+'\',\'js\',\''+id+'_set'+'\', \'\', function() { utui.customizations_template.util.updateDestination(\'' + container + '\', \'' + id+'_set' + '\', \'js\'); })" class="btn btn-mini" style="float:left;">';
					content += '<i class="icon-plus" id="'+container+'_addmore_tooltip" title="'+localize.t('tiq.ext.click_here_to_create_datasource')+'"></i>';
				content += '</button>';
			content += '</div>';

			tooltipObj[container+'_addmore_tooltip'] = { gravity: 'w' };

			content += '<div id="'+id+'_setoption_container" class="inline vertical-align-bottom">';
				content += '<div class="customization_label">'+localize.t('tiq.ext.to')+'</div>';
				content += '<select id="'+id+'_setoption" name="'+id+'_setoption" onchange="utui.customizations_template['+this.id+'].updateSetOption(\''+id+'\');" style="float:left">';
					content += '<option value="text">'+localize.t('tiq.ext.text')+'</option>';
					content += '<option value="var">'+localize.t('tiq.ext.variable')+'</option>';
					content += '<option value="code">'+localize.t('tiq.ext.js_code')+'</option>';
				content += '</select>';
			content += '</div>';

			content += '<div id="'+id+'_settovar_container" class="inline vertical-align-bottom">';
				var field = utui.customizations_template.util.buildSelect({ item: id+'_settovar', container: container, id: this.id, stylefloat: 'left' });
				content += utui.ui.template.form.validationWrapper(field, id+'_settovar');
			content += '</div>';

			content += '<div id="'+id+'_settotext_container" class="inline vertical-align-bottom">';
			content += '    <input type="text" size="48" id="'+id+'_settotext" name="'+id+'_settotext'+'" style="float:left;">';
			content += '</div>';
			content += '<div id="'+id+'_action_container" class="inline vertical-align-bottom">';
				content += '<button onclick="if($(\'#'+id+'_setitem'+'\').siblings().length>=1){utui.customizations_template['+this.id+'].removeSetItem(\''+id+'_setitem'+'\')};" class="btn btn-mini js-action-removebtn"><i class="icon-minus"></i></button>';
				content += '<button onclick="utui.customizations_template['+this.id+'].addSetItem(\''+container+'\')" class="btn btn-mini js-action-addbtn"><i class="icon-plus"></i></button>';
			content += '</div>'

		content += '</div>';

		$('#' + container + '_setcontainer').append(content);


			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_set', true);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(id+'_settovar', true);

		utui.customizations_template[100032].updateSetOption(id);
		utui.util.setOptionHandler(id, 100032);
		utui.util.jqQuoteHandler(id + '_settotext');
		utui.util.addTooltip(tooltipObj);
		return id;
	},
	updateSetOption: function (instanceId) {
		var value = $('#'+instanceId+'_setoption').val();

		if (value === 'var') {
			$('#'+instanceId+'_settovar_container').show();
			$('#'+instanceId+'_settotext_container').hide();
		}
		else {
			$('#'+instanceId+'_settotext_container').show();
			$('#'+instanceId+'_settovar_container').hide();
		}
	},
	rebuildSelect: function (container, item) {
		var field = utui.customizations_template.util.buildSelect({
			item: item,
			container: container,
			id: this.id,
			stylefloat: 'left',
			showvars: 'js'
		});
		var s = utui.ui.template.form.validationWrapper(field, item);
		$('#' + item).replaceWith(s);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(item, true);
	},
	removeSetItem: function (container) {
		$('#' + container).remove();

		//remove from the DOM
		if(container.indexOf('_') > -1) {
			container = container.split('_')[0];
		}
		delete utui.data.customizations[this.container][container + '_set'];
		delete utui.data.customizations[this.container][container + '_setoption'];
		delete utui.data.customizations[this.container][container + '_settotext'];
		delete utui.data.customizations[this.container][container + '_settovar'];

		utui.customizations.updateExtensionData(this.container);
	},
	removeItem: function (container) {
		$('#' + container).remove();

		utui.customizations.updateExtensionData(this.container);
	},
	toggleValue: function (item) {
		if ($('#' + item).is(':checked')) {
			$('#' + item).val('true');
		} else {
			$('#' + item).val('');
		}
	},
	addCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);	
	},
	removeCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);		
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			kSetDupStack = utui.customizations_template.util.getDuplicateEntryIds(extObj._id, 'set'),
			validationObj = {},
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			// do nothing
		}

		if(dynamicConfigCollection.length > 0) {

			if(extObj.handler !== 'custom') {

				for (var i = 0; i < dynamicConfigCollection.length; i++) {
					entryCollection = dynamicConfigCollection[i]

					for(var j = 0; j < entryCollection.length; j++) {
						entryItem = entryCollection[j];

						key = getInstanceKey(entryItem, 'set');

						if(entryItem.set === '') {
							message = localize.t('tiq.validation.message.define_variable');
							validationObj[key] = message;

							utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
						}
						else if(!dsapi.isExistingGlobalVariable(entryItem.set)) {
							message = utui.validation.message.missingVariable( entryItem.set );
							validationObj[key] = message;

							utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.set);
						}
						else if(kSetDupStack.length > 0) {
							message = localize.t('tiq.validation.message.duplicate_variable_reselect');

							if(~kSetDupStack.indexOf(key)) {
								validationObj[key] = message;
								utui.validation.setValidation('customizations',extObj._id, key, message, 'duplicate', entryItem.set);
							}
						}

					};
				};

			}
		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.source === 'textvalue') {
						// do nothing
						continue;
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}
				};
			};
		}


		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}
}


//Customization 100033 - Crypto Extension
utui.customizations_template[100033] = {
	id: 100033,
	index: 0,
	container:'',
	template: {
		main: function(extensionObj) {
			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

						v += '<div class="row-fluid">';
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.hash_method')+'</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += utui.ui.template.form.readonly.inputItemView(null, 'hash', '');
							v += '</div>';
						v += '</div>';

					if(dynamic.length > 0)
						v += this.selectedVariables(extensionObj, dynamic);

					v += '</div>';
				v += '</div>';

			return v;
		},
		selectedVariables: function(extensionObj, dynamic) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.data_sources')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						for (var i = 0; i < dynamic.length; i++) {
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_source', '');
						};
					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case 'hash':
				if(value === '1') {
					roValue = 'md5'
				}
				break;
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		this.container = container;
		var obj = exapi.getObjectByExtensionId(container),
			hashValue = obj.hash || '';


		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);

		var content = '<div id="'+container+'_pane" class="customization_padded"><div>';

        content += '<div class="customization_div" style="min-width:600px">';
        content += 		localize.t('tiq.ext.use_extension_encrypt_data');
        content += '</div>';

		var itemId = 'hash';
		content += '<div class="customization_div">'+localize.t('tiq.ext.hash_method')+' ' + utui.customizations_template[100033].buildHashSelect(itemId) + '</div>';

		content += '<div class="customization_div">';
		content += '  <button class="btn btn-mini js-action-newencrypt i-color-add js-action-addbtn"><i class="icon-plus"></i> '+localize.t('tiq.ext.add_datasource')+'</button>';
		content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		$('#hash').val(hashValue);

		for(var i in utui.util.getVars(obj,2)){
			if(i.indexOf('_source')>=0){
				var sourceId = i.substring(0,i.indexOf('_source'));
				var containerId = utui.customizations_template[100033].addItem(container,sourceId);
				$('#'+containerId + '_source').select2('val', obj[sourceId+'_source'] || '');
			}
		}

		$('#customizations_'+container+'_content').off('click').on('click', '.js-action-newencrypt', function(e) {
			utui.customizations_template[100033].addItem(container);
		});


		$('#'+container+'_pane').on('click','.js-action-deletebtn',function(){
			utui.customizations_template[100033].deleteItem(this);
		});
	},
	addItem:function(container,instanceId){
		var id = instanceId || utui.util.getContainerId();

		var itemId = id + '_source';

		var content = '<div class="js-item-container customization-row">';
			var field = utui.customizations_template.util.buildSelect({ item: itemId, container: container, id: 100033, stylefloat: 'none', showvars: 'js,js_page,cp,qp' });
			content += '<div class="ext-crypt-source" style="display:inline-block">';
				content += localize.t('tiq.ext.data_source')+' ' + utui.ui.template.form.validationWrapper(field, itemId);
			content += '</div>';

			content += '<div class="ext-crypt-delete" style="display:inline-block">';
				content += '<button class="btn btn-small i-color-delete js-action-deletebtn js-action-removebtn" data-instance-id="'+id+'"><i class="icon-trash"></i> '+localize.t('tiq.ext.remove_txt')+'</button>';
			content += '</div>';
		content += '</div>';

		$('#'+container+'_pane').append(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2(id+'_source', true);

		return id;
	},
	show:function(container) {},
	deleteItem:function(deleteElem){
		var id = $(deleteElem).attr('data-instance-id');
		$(deleteElem).closest('div.js-item-container').remove();

		delete utui.data.customizations[this.container][id + '_source'];
		utui.customizations.updateExtensionData(this.container);		
	},
	buildHashSelect:function(itemId){
		var content = '<select id="'+itemId+'" name="'+itemId+'">';
		var hashes =  utui.config.cryptoHashOptions;
		for (var id in hashes){
			content += '<option value="'+id+'">'+hashes[id]+'</option>';
		}
		content += '</select>';
		return content
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {

		}

		if(dynamicConfigCollection.length > 0) {

			for (var i = 0; i < dynamicConfigCollection.length; i++) {
				entryCollection = dynamicConfigCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}

				};
			};
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}

}


// Do Not Track
utui.customizations_template[100034] = {
	id: 100034,
	index: 0,
	container:'',
	template: {
		main: function(extensionObj) {

			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';


					v += '<div class="row-fluid">';
						v += '<div class="span4">';
							v += '<span class="inline-label">'+localize.t('tiq.ext.halt_load')+'</span>';
						v += '</div>';
						v += '<div class="span8">';
							v += utui.ui.template.form.readonly.inputItemView(null, 'donotload', '', localize.t('tiq.ext.prevent_any_tags_managed'));
						v += '</div>';
					v += '</div>';

					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

		var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

		for (var i = 0; i < dynamic.length; i++) {

			instanceId = dynamic[i][0]._parentInstanceId;

			if(dynamic[i][0].setoption === 'var') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').show();
				$data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
			}
			if(dynamic[i][0].setoption === 'text') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show();
			}
			if(dynamic[i][0].setoption === 'code') {
				$data(instanceId+'_setoption').hide();
				$data(instanceId+'_settovar').hide();
				$data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_code')+')</span>');
			}
		};
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case "donotload":
				if(extensionObj.donotload === 'true') {
					roValue = localize.t('tiq.ext.checked');
				}
				if(extensionObj.donotload === '') {
					roValue = localize.t('tiq.ext.unchecked');
				}
				break;
			default:
				// Is filtertype
				if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
					if(ruleapi.condition.isOperatorValue(value)) {
						roValue = ruleapi.condition.interpretOperatorValue(value);
					}
					else {
						roValue = value;
					}
				}
				else {
					roValue = value;
				}
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

        var content = '<div class="customization_padded">';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_item" style="float:left;margin:0px 2px 10px 0px;">';
        content += 			localize.t('tiq.ext.use_extension_detect_visitor');
        content += '    </div>';

        var itemId=container+'_donotload';
        content += '  <div class="customization_div">';
        content += '    <div class="customization_label">' + localize.t('tiq.ext.halt_load') + '</div>';
        content += '    <div class="customization_item" style="padding:4px;">';
        content += '    <input type="checkbox" id="'+itemId+'" name="donotload" value="" >';
        content += 		localize.t('tiq.ext.prevent_any_tags_managed') + '</div>';
        content += '  </div>';
        content += '</div>';

		$('#customizations_' + container + '_content').html(content);

		if(fillFlag){
			var obj = exapi.getObjectByExtensionId(container);

			if(obj.donotload){
				$('#'+itemId).prop('checked',true);
				$('#'+itemId).val('true');
			}else {
				$('#'+itemId).val('');
			}
		}

		$('#'+itemId).on('change', this.toggleValue);

		if(cb) cb();
	},
	toggleValue:function(item){
		if ($(this).is(':checked')){
			$(this).val('true');
		}else{
			$(this).val('');
		}
	},
	show:function(container){},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}


// Modal Window Extension
utui.customizations_template[100035] = {
	id: 100035,
    aceEditor: {},
    clearedAceAnnotations: {},
    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editors
    //------------------------------------------------------------------------------------------------------------------
    destructor: function(){
        if (utui.customizations_template[100035].aceEditor){
            _.each(utui.customizations_template[100035].aceEditor,function(ae){
                ae.destroy();
            });
        }
    },	
	// cssEditor: {},
	// htmlEditor: {},
	container: '',
	modalHtmlDefine : [
		'<div id="_tealiumModalWindow">' ,
			'<div id="_tealiumModalHeader">##MDLHD##</div>' ,
			'<div id="_tealiumModalBody">##MDLBDY##</div>' ,
			'<div id="_tealiumModalFooter">##MDLFT##</div>' ,
			'<div id="_tealiumModalClose" class="tClsIcn" onclick="utag.extn.mdlW.dismiss()">X</div>' ,
		'</div>'
	],
	modalCssDefine : [
		'#_tealiumModalWindow {' ,
			'width : ##MDLWIDTH##px;' ,
			'height : ##MDLHEIGHT##px;' ,
			'position : relative;' ,
			'margin : 100px auto;' ,
			'background-color : #fff;' ,
			'border : 1px solid #000;' ,
			'border-radius : 4px;' ,
		'} ' ,
		'#_tealiumModalHeader {' ,
			'position : absolute;' ,
			'width : 95%;' ,
			'padding : 15px;' ,
			'overflow : hidden;' ,
			'font-size : 1.5em;' ,
			'text-align : center;' ,
		'} ' ,
		'#_tealiumModalBody {' ,
			'position : absolute;' ,
			'top : 15%;' ,
			'width : 95%;' ,
			'overflow : hidden;' ,
			'padding : 15px;' ,
			'max-height : 55%;' ,
			'font-size : 0.8em;' ,
			'text-align : center;' ,
		'} ' ,
		'#_tealiumModalFooter {' ,
			'position : absolute;' ,
			'border-top : 1px solid #CCC;' ,
			'bottom : 2px;' ,
			'height : 10%;' ,
			'padding : 15px;' ,
			'overflow : hidden;' ,
			'width : ##MDLINNERWIDTH##px;' ,
			'font-size : 0.75em;' ,
			'text-align : center;' ,
		'} ' ,
		'#_tealiumModalClose {' ,
			'background : #606061;' ,
			'color : #FFFFFF;' ,
			'line-height : 25px;' ,
			'position : absolute;' ,
			'right : -12px;' ,
			'text-align : center;' ,
			'top : -10px;' ,
			'width : 24px;' ,
			'text-decoration : none;' ,
			'font-weight : bold;' ,
			'-webkit-border-radius : 12px;' ,
			'-moz-border-radius : 12px;' ,
			'border-radius : 12px;' ,
			'-moz-box-shadow : 1px 1px 3px #000;' ,
			'-webkit-box-shadow : 1px 1px 3px #000;' ,
			'box-shadow : 1px 1px 3px #000;' ,
			'cursor : pointer;' ,
		'} ' ,
		'#_tealiumModalClose:hover { background : #CCC; }'
	],
	template: {
		main: function(extensionObj) {
			var rulesObj = utui.util.interpret.extension.condition.toFormatted(extensionObj);
			var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			var _x = '';

				// Configuration
				_x += this.getStaticConfiguration();

				v += sharedView.boxedSection(localize.t('tiq.ext.configuration'), _x);

				// Rules
				if(!$.isEmptyObject(rulesObj)) {
					v += sharedView.boxedSection(localize.t('tiq.ext.condition'), sharedView.getRules(rulesObj));
				}

			return v;
		},
		getStaticConfiguration: function() {
			var _row = utui.customizations_template.shared.view.linearRowFieldItemView;
			var _input = utui.ui.template.form.readonly.inputItemView;

			var v = '';
				v += _row(localize.t('tiq.ext.modal_publish_mode'), _input(null, 'mdlIsStandardModal', ''));
				v += _row(localize.t('tiq.ext.css_code'), _input(null, 'mdlCssCode', ''));
				v += _row(localize.t('tiq.ext.html_code'), _input(null, 'mdlHtmlCode', ''));
				v += _row(localize.t('tiq.ext.modal_header'), _input(null, 'mdlHeaderTxt', ''));
				v += _row(localize.t('tiq.ext.modal_body'), _input(null, 'mdlBodyTxt', ''));
				v += _row(localize.t('tiq.ext.modal_footer'), _input(null, 'mdlFooterTxt', ''));
				v += _row(localize.t('tiq.ext.window_height'), _input(null, 'mdlDlgHeight', ''));
				v += _row(localize.t('tiq.ext.window_width'), _input(null, 'mdlDlgWidth', ''));

			return v;
		}
	},
    setRulesOnView: function(extensionObj, namespace) {
        var obj = extensionObj,
            target = '';

        function $data(key) {
            if(namespace) {
                return $('#'+namespace).find('span[data-key="'+key+'"]');
            }
            return $('span[data-key="'+key+'"]');
        }

        function showRow(key) {
        	$data(key).closest('.row-fluid').show();
        }

        function hideRow(key) {
        	$data(key).closest('.row-fluid').hide();
        }

		if(obj.mdlIsStandardModal === 'true') {
			hideRow('mdlCssCode');
			hideRow('mdlHtmlCode');

			showRow('mdlHeaderTxt');
			showRow('mdlBodyTxt');
			showRow('mdlFooterTxt');
			showRow('mdlDlgHeight');
			showRow('mdlDlgWidth');
		} else {
			showRow('mdlCssCode');
			showRow('mdlHtmlCode');

			hideRow('mdlHeaderTxt');
			hideRow('mdlBodyTxt');
			hideRow('mdlFooterTxt');
			hideRow('mdlDlgHeight');
			hideRow('mdlDlgWidth');
		}
    },
    getValue: function(extensionObj, key) {
        var value = extensionObj[key],
            roValue = '',
            options = {},
            dsCollection;

        switch(key) {
			case "mdlIsStandardModal":
				if(extensionObj.mdlIsStandardModal === 'false') {
					roValue = 'Custom';
				}
				if(extensionObj.mdlIsStandardModal === 'true') {
					roValue = 'Standard';
				}
				break;
            default:
                roValue = dsapi.getDataSourceFormattedName(value)
                break;
        }

        return roValue;
    },
	fillData: function (container, fillFlag, cb) {
		this.container = container;
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;

		var mdlHtmlCode;

        utui.customizations_template[100035].aceEditorEditStart = false;
		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------

		this.addItem(container);

		if (fillFlag) {
			// Set default values if extension is being created.
			if ( _.isUndefined( obj.mdlIsStandardModal ) ){
				obj.mdlIsStandardModal = 'true';
			}
			if ( _.isUndefined( obj.mdlDlgHeight ) ) {
				obj.mdlDlgHeight = 200;
			}
			if ( _.isUndefined( obj.mdlDlgWidth ) ) {
				obj.mdlDlgWidth = 300;
			}

			// Copy the base CSS & HTML into this instance
			obj.mdlBaseCss = '';
			for (var i=0; i<this.modalCssDefine.length; i++){
				obj.mdlBaseCss += this.modalCssDefine[i];
			}
			obj.mdlBaseHtml = '';
			for (var i=0; i<this.modalHtmlDefine.length; i++){
				obj.mdlBaseHtml += this.modalHtmlDefine[i];
			}

			// Populate the values from the data object into the UI
			$('#mdlIsStandardModal').val(obj.mdlIsStandardModal);
			if (obj.mdlIsStandardModal === 'true') {
				$('#mdlStandardCfgToggleOn').get(0).checked = true;
			} else {
				$('#mdlStandardCfgToggleOff').get(0).checked = true;
			}
			$('#mdlHeaderTxt').val(obj.mdlHeaderTxt);
			$('#mdlBodyTxt').val(obj.mdlBodyTxt);
			$('#mdlFooterTxt').val(obj.mdlFooterTxt);
			$('#mdlDlgHeight').val(obj.mdlDlgHeight);
			$('#mdlDlgWidth').val(obj.mdlDlgWidth);

			// Cache the value of obj.mdlHtmlCode before a 'change' event is fired by mdlCssCode.editor calling setValue.
			// this will allow us to recover the value that should have been populated before it is set to an empty string.
			mdlHtmlCode = obj.mdlHtmlCode;
			// Copy over the base css to the this profile's version if it hasn't been defined yet
			if ( _.isUndefined( obj.mdlCssCode ) ) {
				obj.mdlCssCode = '';
				for (var i=0; i<this.modalCssDefine.length; i++){
					obj.mdlCssCode += this.modalCssDefine[i] + "\n";
				}
			}
			$('#mdlCssCode').val( _.unescape( obj.mdlCssCode ) );
			utui.customizations_template[100035].aceEditor['cssEditor_'+obj._id].setValue(_.unescape(obj.mdlCssCode),-1);

			// Copy over the base html to the this profile's version if it hasn't been defined yet
			if ( _.isUndefined( obj.mdlHtmlCode ) ){
				obj.mdlHtmlCode = '';
				for (var i=0; i<this.modalHtmlDefine.length; i++){
					obj.mdlHtmlCode += this.modalHtmlDefine[i] + "\n";
				}
			}

			// restore the cached value if there was something there when the extension was loading.
			if (mdlHtmlCode && obj.mdlHtmlCode !== mdlHtmlCode) {
				obj.mdlHtmlCode = mdlHtmlCode;
				mdlHtmlCode = '';
			}

			$('#mdlHtmlCode').val( _.unescape( obj.mdlHtmlCode ) );
			utui.customizations_template[100035].aceEditor['htmlEditor_'+obj._id].setValue(_.unescape(obj.mdlHtmlCode),-1);

			// Set up the conditions for ext 100035
			utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,100035);

			this.selectHandler(container,'N');
		}

		if(cb) cb();
	},
	show: function (container) {},
	addItem: function (container) {
		var id = container;
		var content = '';
		content += '<div id="' + id + '" class="customization_padded">';
		content += '   <input type="hidden" id="mdlIsStandardModal" name="mdlIsStandardModal" value="true">';

		content += '<div id="mdlStandardCfgToggle"  class="customization_div" style="margin-left:20px;margin-bottom: 10px;padding-bottom: 10px; border-bottom: 1px solid #999;">';
		content += '    <div class="customization_labelwide" style="padding-right:20px;">'+localize.t('tiq.ext.modal_publish_mode')+'</div>';
		content += '    <input type="radio" id="mdlStandardCfgToggleOn" name="mdlStandardCfgToggle" /><label for="mdlStandardCfgToggleOn">'+localize.t('tiq.ext.standard')+'</label>';
		content += '    <input type="radio" id="mdlStandardCfgToggleOff" name="mdlStandardCfgToggle" /><label for="mdlStandardCfgToggleOff">'+localize.t('tiq.ext.custom_up')+'</label>';
		content += '</div>';

		// Modal title
		content += '<div id="mdlStandardCfg"  style="display:block">';
		content += '  <div class="customization_div" style="min-width:600px">';
		content += '    <div class="customization_labelwide">'+localize.t('tiq.ext.modal_header')+'</div>';
		content += '    <div class="customization_item">';
		content += '      <input type="text" id="mdlHeaderTxt" name="mdlHeaderTxt" value="" size="64" style="float:left">';
		content += '    </div>';
		content += '  </div>';
		// Modal Body
		content += '  <div class="customization_div" style="min-width:600px">';
		content += '    <div class="customization_labelwide">'+localize.t('tiq.ext.modal_body')+'</div>';
		content += '    <div class="customization_item">';
		content += '      <textarea id="mdlBodyTxt" name="mdlBodyTxt" value="" rows="3" style="float:left;width:245px;"></textarea>';
		content += '    </div>';
		content += '  </div>';
		// Modal Footer
		content += '  <div class="customization_div" style="min-width:600px">';
		content += '    <div class="customization_labelwide">'+localize.t('tiq.ext.modal_footer')+'</div>';
		content += '    <div class="customization_item">';
		content += '      <textarea id="mdlFooterTxt" name="mdlFooterTxt" value="" rows="3" style="float:left;width:245px;"></textarea>';
		content += '    </div>';
		content += '  </div>';
		// Dialog Height
		content += '  <div class="customization_div" style="min-width:600px">';
		content += '    <div class="customization_labelwide">'+localize.t('tiq.ext.window_height')+'</div>';
		content += '    <div class="customization_item">';

		var field = '<input type="text" id="mdlDlgHeight" name="mdlDlgHeight" value="" size="4" style="float:left">';
		content += utui.ui.template.form.validationWrapper(field, 'mdlDlgHeight');
		content += '    </div>';
		content += '  </div>';
		// Dialog Width
		content += '  <div class="customization_div" style="min-width:600px">';
		content += '    <div class="customization_labelwide">'+localize.t('tiq.ext.window_width')+'</div>';
		content += '    <div class="customization_item">';

		var field = '<input type="text" id="mdlDlgWidth" name="mdlDlgWidth" value="" size="4" style="float:left">';
		content += utui.ui.template.form.validationWrapper(field, 'mdlDlgWidth');
		content += '    </div>';
		content += '  </div>';
		content += '</div>';
		// Custom Modal dialog
		content += '<div id="mdlCustomCfg" class="container-fluid" style="display:none;" id="' + id + '_customhandler">';
        content += '    <div class="form-group" style="min-height:250px; margin-bottom:10px;">';
        content += '    	<div class="row-fluid">';
        content += '   			<div class="span1"><div class="customization_label">'+localize.t('tiq.ext.css_code')+'</div></div>';
        content += '    		<div class="span11" style="border: 1px grey solid;">';
        content += '      			<textarea id="mdlCssCode" value="" name="mdlCssCode" style="display:none"></textarea>';
        content += '				<div id="modal-ext-css-ace-editor" style="min-height:250px; border-radius:unset; margin:0;"></div>';
        content += '      		</div>';
        content += '    	</div>';
        content += '   </div>';
        content += '    <div class="form-group"  style="min-height:250px; margin-bottom:5px;">';
        content += '    	<div class="row-fluid">';
        content += '   			<div class="span1"><div class="customization_label">'+localize.t('tiq.ext.html_code')+'</div></div>';
        content += '    		<div class="span11"  style="border: 1px grey solid;">';
        content += '      			<textarea id="mdlHtmlCode" value="" name="mdlHtmlCode" style="display:none"></textarea>';
        content += '				<div id="modal-ext-html-ace-editor" style="min-height:250px; border-radius:unset; margin:0;"></div>';
        content += '      		</div>';
        content += '    	</div>';
        content += '   </div>';
		content += '   <div class="customization_div" >';
		content += '      <div class="customization_item" style="margin-left:2px;float:left"><button id="button_reset_custom_modal" class="btn btn-mini js-action-reset">'+localize.t('tiq.ext.reset')+'</button></div>';
		content += '   </div>';
		content += '</div>';
		content += '<div>';
		content += '   <div class="customization_div" style="margin-left:20px;padding-top:10px;border-top: 1px solid #999;">';
		content += '      <div class="customization_label" style="float:left">'+localize.t('tiq.ext.condition')+'</div>';
		content += '      <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini js-action-addbtn">'+localize.t('tiq.ext.add_condition')+'</button></div>';
		content += '      <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left"></div>';
		content += '  </div>';
		content += '</div>';

		content += '</div>';

		$('#customizations_' + id + '_content').html(content);

		$('#mdlStandardCfgToggle').on("change", function () {
			var isStdMdl = $('#mdlStandardCfgToggleOn').is(':checked');
			$('#mdlIsStandardModal').val(isStdMdl);
			utui.customizations_template[100035].selectHandler(id,'Y')
		});

        //------------------------------------------------------------------------------------------------------------------
        // Create the Ace Editors
        //------------------------------------------------------------------------------------------------------------------

		// CSS Editor
        this.aceEditor['cssEditor_'+container] = ace.edit("modal-ext-css-ace-editor");
        var cssEd = this.aceEditor['cssEditor_'+container];
        cssEd.$blockScrolling = Infinity;
        cssEd.setOptions({
            maxLines : 50,
            mode : "ace/mode/css",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });

        cssEd.setValue("");
        cssEd.clearSelection();

        var cssEdSession = cssEd.getSession();

		// Logic required to remove unwanted, irrelevant  code annotations that would confuse users.
        cssEdSession.on("changeAnnotation", function(){
            var annotationsList = utui.customizations_template[100035].aceEditor['cssEditor_'+container].getSession().getAnnotations();
            // The clearAnnotations function triggers a changedAnnotation event, so we need flags to stop recursive invocation on empty annotation lists
            if (annotationsList.length){
                if ( !  utui.customizations_template[100035].clearedAceAnnotations['cssEditor_'+container]){
                    utui.customizations_template[100035].aceEditor['cssEditor_'+container].getSession().clearAnnotations();
                    utui.customizations_template[100035].clearedAceAnnotations['cssEditor_'+container] = true;
                }
            }
        });


        cssEd.on("blur", function(e){
            var value = utui.customizations_template[100035].aceEditor['cssEditor_'+container].getValue();
            utui.data.customizations[container]['mdlCssCode'] = value;
            $('#mdlCssCode').val(value).trigger('change');
        });

        cssEd.on("change", function(e){
			// The code is annotated on every change, so the annotations need be removed after each parsing by Ace.
            utui.customizations_template[100035].clearedAceAnnotations['cssEditor_'+container] = false;
            utui.customizations_template[100035].aceEditor['cssEditor_'+container].getSession().clearAnnotations();
            var value = utui.customizations_template[100035].aceEditor['cssEditor_'+container].getValue();
            utui.data.customizations[container]['mdlCssCode'] = value;
            $('#mdlCssCode').val(value).trigger('change');

            if (utui.customizations_template[100035].aceEditorEditStart){
                utui.profile.setDirty();
            }
        });

        cssEd.on("focus", function(e){
            utui.customizations_template[100035].aceEditorEditStart = true;
        });

        cssEd.setValue($('#mdlCssCode').val(),-1);

		// HTML Editor
        this.aceEditor['htmlEditor_'+container] = ace.edit("modal-ext-html-ace-editor");
        var htmlEd = this.aceEditor['htmlEditor_'+container];
        htmlEd.$blockScrolling = Infinity;
        htmlEd.setOptions({
            maxLines : 50,
            mode : "ace/mode/html",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });
        htmlEd.setValue("");
        htmlEd.clearSelection();
        var htmlEdSession = htmlEd.getSession();

		// Logic required to remove unwanted, irrelevant  code annotations that would confuse users.
        htmlEdSession.on("changeAnnotation", function(){
            var annotationsList = utui.customizations_template[100035].aceEditor['htmlEditor_'+container].getSession().getAnnotations();
            // The clearAnnotations function triggers a changedAnnotation event, so we need flags to stop recursive invocation on empty annotation lists
            if (annotationsList.length){
                if ( !  utui.customizations_template[100035].clearedAceAnnotations['htmlEditor_'+container]){
                    utui.customizations_template[100035].aceEditor['htmlEditor_'+container].getSession().clearAnnotations();
                    utui.customizations_template[100035].clearedAceAnnotations['htmlEditor_'+container] = true;
                }
            }
        });

        htmlEd.on("blur", function(e){
            var value = utui.customizations_template[100035].aceEditor['htmlEditor_'+container].getValue();
            utui.data.customizations[container]['mdlHtmlCode'] = value;
            $('#mdlHtmlCode').val(value).trigger('change');
        });

        htmlEd.on("change", function(e){
			// The code is annotated on every change, so the annotations need be removed after each parsing by Ace.
            utui.customizations_template[100035].clearedAceAnnotations['htmlEditor_'+container] = false;
            utui.customizations_template[100035].aceEditor['htmlEditor_'+container].getSession().clearAnnotations();
            var value = utui.customizations_template[100035].aceEditor['htmlEditor_'+container].getValue();
            utui.data.customizations[container]['mdlHtmlCode'] = value;
            $('#mdlHtmlCode').val(value).trigger('change');

            if (utui.customizations_template[100035].aceEditorEditStart){
                utui.profile.setDirty();
            }
        });

        htmlEd.on("focus", function(e){
            utui.customizations_template[100035].aceEditorEditStart = true;
        });

        htmlEd.setValue($('#mdlHtmlCode').val(),-1);

		$('#button_addcondition').attr('onClick', 'utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()');
		$('#button_reset_custom_modal').attr('onClick', 'utui.customizations_template[' + this.id + '].resetCustomCode(\'' + container + '\');');

		// If imported, make editors read only
		if(exapi.isImported(container)) {
            htmlEd.setReadOnly(true);
            cssEd.setReadOnly(true);
		}

    },
    selectHandler: function (id, confirmDlg) {
        var modalPublishMode = $('#mdlIsStandardModal').val();
        if (confirmDlg === 'Y' && modalPublishMode === "true"){
            var confirmationContent= localize.t('tiq.ext.switching_to_standard_publish');

			$("#dialog-confirmation-content").html(confirmationContent);

            $("#dialog-confirmation").dialog({
                autoOpen: true,
                height: 'auto',
                width: 'auto',
                modal: true,
                closeOnEscape: false,
                closeText: "",
                close: function( event, ui ) {
                    utui.customizations_template[100035].updateModalPublishMode(id,(modalPublishMode == "true") ? "false":"true")
                },
                resizable: false,
                draggable: true,
                buttons: [
                    {
                        text: localize.t('tiq.dialog.button.yes'),
                        id: 'confirmChgModalPublishMode_dialog_yesBtn',
                        click: function() {
                            $(this).dialog('close');
                            utui.customizations_template[100035].updateModalPublishMode(id,modalPublishMode)
                        }
                    },
                    {
                        text: localize.t('tiq.dialog.button.no'),
                        id: 'confirmChgModalPublishMode_dialog_noBtn',
                        click: function() {
                            $(this).dialog('close');
                            utui.customizations_template[100035].updateModalPublishMode(id,(modalPublishMode == "true") ? "false":"true")
                        },
                        style: 'float:left; margin-left: 12px'
                    }
                ]
            });
        } else {
            utui.customizations_template[100035].updateModalPublishMode(id,modalPublishMode);
        }

		$("#dialog").dialog("destroy");
		$("#dialog").show();

	},
	updateModalPublishMode: function (id, mPmode){
		var obj = exapi.getObjectByExtensionId(id);
		obj.mdlIsStandardModal = mPmode;

		$('#mdlStandardCfg').hide();
		$('#mdlCustomCfg').hide();

		if (mPmode == "true") {
			$('#mdlStandardCfg').show();
			$('#mdlStandardCfgToggleOn').get(0).checked = true;
		} else {
			$('#mdlCustomCfg').show();
			$('#mdlStandardCfgToggleOff').get(0).checked = true;
		}

	},
	resetCustomCode: function (container) {
		var obj = exapi.getObjectByExtensionId(container);
		obj.mdlCssCode = '';
		for (var i=0; i<this.modalCssDefine.length; i++){
			obj.mdlCssCode += this.modalCssDefine[i] + "\n";
		}
		$('#mdlCssCode').val(_.unescape(obj.mdlCssCode));
		obj.mdlHtmlCode = '';
		for (var i=0; i<this.modalHtmlDefine.length; i++){
			obj.mdlHtmlCode += this.modalHtmlDefine[i] + "\n";
		}
		$('#mdlHtmlCode').val(_.unescape(obj.mdlHtmlCode));
		this.aceEditor['cssEditor_'+container].setValue(_.unescape(obj.mdlCssCode),-1);
		this.aceEditor['htmlEditor_'+container].setValue(_.unescape(obj.mdlHtmlCode),-1);

	},

    addCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
	},
	addAndCondition: function (container, instanceId) {
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);
	},
	removeCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionCondition(this, container);
	},
	removeAndCondition: function (container) {
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},
	rebuildSelect: function (container, item) {
		var field = utui.customizations_template.util.buildSelect({
			item: item,
			container: container,
			id: this.id,
			stylefloat: 'left',
			showvars: 'js'
		});
		var s = utui.ui.template.form.validationWrapper(field, item)
		$('#' + item).replaceWith(s);

			// Conversion to Select2
			dsapi.convertSelectListToSelect2(item, true);
	},
	removeItem: function (container) {
		$('#' + container).remove();

		utui.customizations.updateExtensionData(this.container);
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			reg = /^\d+$/,
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection) && staticConfigCollection.mdlIsStandardModal === 'true') {

			for(var key in staticConfigCollection) {
				value = staticConfigCollection[key];

				if(key === 'mdlDlgHeight') {
					if(value === '') {
						message = localize.t('tiq.validation.message.modal_offer.enter_numeric_value');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!reg.test(value)) {
						message = localize.t('tiq.validation.message.modal_offer.height_must_be_numeric');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(value <= 50 || value >= 1000) {
						message = localize.t('tiq.validation.message.modal_offer.height_greater_than')
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
				}
				else if(key === 'mdlDlgWidth') {
					if(value === '') {
						message = localize.t('tiq.validation.message.modal_offer.enter_numeric_value');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!reg.test(value)) {
						message = localize.t('tiq.validation.message.modal_offer.width_must_be_numeric');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(value <= 50 || value >= 1000) {
						message = localize.t('tiq.validation.message.modal_offer.width_greater_than');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
				}
			}
		}

		if(dynamicConfigCollection.length > 0) {

		}

		if(conditionCollection.length > 0) {

			for (var i = 0; i < conditionCollection.length; i++) {
				entryCollection = conditionCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(entryItem.source === 'textvalue') {
						// do nothing
						continue;
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}
				};
			};
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}

}


//Customization 100036 - Javascript Code 2.0 
utui.customizations_template[100036] = {
	id: 100036,
    aceEditor: {},
    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editor
    //------------------------------------------------------------------------------------------------------------------
    destructor: function(){
        if (utui.customizations_template[100036].aceEditor){
            _.each(utui.customizations_template[100036].aceEditor,function(ae){
                ae.destroy();
            });
        }
    },
	template: {
		main: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

							v += '<div class="row-fluid">';
								v += '<div class="span12">';
									v += '<span class="inline-label">'+localize.t('tiq.ext.scope_vars')+'</span>';
									v += utui.ui.template.form.readonly.inputItemView(null, 'scopevars', '');
								v += '</div>';
							v += '</div>';

						v += '<div class="section-padded-top-bottom">';
							v += '<div class="row-fluid">';
								v += '<div class="span12">';
									v += '<span class="inline-label">'+localize.t('tiq.ext.code')+'</span>';
									v += utui.ui.template.form.readonly.codeItemView(null, 'code', '');
								v += '</div>';
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';

			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},
	fillData: function (container) {
		var obj = exapi.getObjectByExtensionId(container),
			extId = container,
			tooltipObj = {},
			self = this,
			content = '';

        utui.customizations_template[100036].aceEditorEditStart = false;
		this.container = container;
		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);

		content += '<div class="customization_padded">';

			content += '<div class="container-fluid">';
				content += '<div class="row-fluid">';

					content += '<div class="span12">';
						content += '<label>' + localize.t('tiq.ext.scope_vars') + ' ';
							content += '<input type="text" value="" id="scopevars" name="scopevars" size="64">';
							content += '<div style="margin-left: 72px; margin-bottom: 8px;">' + localize.t('tiq.ext.optional') + ' ' + utui.tooltip.customizations.customization_100036_scope+'</div>';
						content += '</label>';
					content += '</div>';

				content += '</div>';
				content += '<div class="row-fluid">';
					content += '<div class="span12">';
        				content += '<textarea id="code" value="" name="code" style="display:none"></textarea>';
						content += '<div id="js_ext_' + container + '" class="ext-ace-edit-container"></div>';
					content += '</div>';
				content += '</div>';


				// Conditions
				content += '<div style="margin-top:10px;">';
					content += '<div class="customization_div" id="inactive_ext_conds" style="margin-top:20px;display:none">';	
						content += '<div style="float:left"><i class="icon-info-sign"></i>&nbsp;' + localize.t('tiq.ext.cond_exec_inactive') + '</div>';
					content += '</div>';
					content += '<div class="customization_div" id="' + container + '_ext_cond_block">';
						content += '<div class="customization_label" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
						content += '<div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini">' + localize.t('tiq.ext.add_condition') + '</button></div>';
						content += '<div id="' + container + '_conditioncontainer" class="customization_item" style="float:left"></div>';
					content += '</div>';
				content += '</div>';

				if(obj.hasOwnProperty('output')) {
					content += '<div class="row-fluid">';
						content += '<div class="span12">';

							content += '<label>' + localize.t('tiq.ext.output_variables') + ' ';
								content += '<input type="text" value="" id="output" name="output" size="64">';
							content += '</label>';

						content += '</div>';
					content += '</div>';
				}

			content += '</div>';

		content += '</div>';

		$('#customizations_' + extId + '_content').html(content);

		tooltipObj[container+'_syntaxCheckBtn'] = { gravity: 'se' };
		tooltipObj['scopevars'] = { gravity: 'sw' };
		utui.util.addTooltip(tooltipObj);

		$('#code').val(obj.code);
		$('#output').val(obj.output);
		$('#scopevars').val(obj.scopevars);
		$('#title').val(obj.title);

		// Set up the conditions for ext 100036
		utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,this.id);

		// Add click handler for add condition button
		$('#button_addcondition').attr('onClick', '{$(\'#button_addcondition\').hide();utui.customizations_template[100036].addCondition(\''+container+'\');}');



		//------------------------------------------------------------------------------------------------------------------
		// Create the Ace Editor
		//------------------------------------------------------------------------------------------------------------------
        utui.customizations_template[100036].aceEditor['code'] = ace.edit("js_ext_"+container);
        var jsEd = utui.customizations_template[100036].aceEditor['code'];
        jsEd.$blockScrolling = Infinity;
        jsEd.setValue("");
        jsEd.setOptions({
            maxLines : 100,
            mode : "ace/mode/javascript",
            showPrintMargin : false,
            theme : "ace/theme/chrome"
        });

        jsEd.clearSelection();

        jsEd.on("blur", function(e){
            utui.data.customizations[container].code = utui.customizations_template[100036].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
        });

        jsEd.on("change", function(e){
            utui.data.customizations[container]._ignoreError = false;
            utui.data.customizations[container].code = utui.customizations_template[100036].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code);
            if (utui.customizations_template[100036].aceEditorEditStart){
                $('#code').trigger('change');
            }
        });

        jsEd.on("focus", function(e){
            utui.customizations_template[100036].aceEditorEditStart = true;
        });

        jsEd.setValue($('#code').val(),-1);

        // If imported, make editor read only
        if(exapi.isImported(container)) {
            jsEd.setReadOnly(true);
        }


		$('#scopevars').off('change').on('change', function (e) {
            utui.data.customizations[container].code = utui.customizations_template[100036].aceEditor['code'].getValue();
            $('#code').val(utui.data.customizations[container].code).trigger('change');
		});

		if (utui.customizations_template.shared.isDisableExtConds(extId)) {
			utui.customizations_template.shared.disableExtensionConditions(extId);	
		} else {
			utui.customizations_template.shared.enableExtensionConditions(extId);            	
		}

	},
	addCondition:function(container,instanceId){
		var rtn = utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
		utui.util.pubsub.publish(utui.constants.extensions.UPDATED_EXT_CONDITION, { id : container});
		return rtn;
	},
	addAndCondition:function(container,instanceId){
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);
	},
	removeCondition:function(container){
		var rtn = utui.customizations_template.shared.removeExtensionCondition(this, container);
		utui.util.pubsub.publish(utui.constants.extensions.UPDATED_EXT_CONDITION, { id : this.container});		
		return rtn;
	},
	removeAndCondition:function(container){
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},
	show: function (container) {},
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		return true;
	}
}

//Customization 100037 - Data Layer Enrichment Extension
utui.customizations_template[100037] = {
	id: 100037,
	index: 0,
	container:'',
	template: {
		main: function(extensionObj) {
			var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';
						
						v += '<div class="row-fluid">'; 
							v += '<div class="span4">';
								v += '<span class="inline-label">'+localize.t('tiq.ext.overwrite_on_merge')+'</span>';
							v += '</div>';
							v += '<div class="span8">';
								v += '<input id="overwrite_on_merge" name="overwrite_on_merge" type="checkbox" disabled">' +
										'<label for="overwrite_on_merge">' + localize.t('tiq.ext.overwrite_on_merge') + '</label>';
							v += '</div>';
						v += '</div>';

						v += '<div class="row-fluid">'; 
							v += '<div class="span12">';
					 		v += ' <div class="customization_div">';
							v += '    <div class="customization_labelwide">' + localize.t('tiq.ext.load_check_timeout') + '</div>';
							v += '    <div class="customization_item">';
							v += '        <input type="text" size="5" id="load_check_timeout" name="load_check_timeout">';
							v += '    </div>';
							v += ' </div>';
							v += '</div>';
						v += '</div>';
						v += '<div class="row-fluid">'; 
							v += '<div class="span12">';
								v += '<i class="icon-info-sign"></i>'+localize.t('tiq.ext.lookup_lowercase_info');
							v += '</div>';
						v += '</div>';

					if(dynamic.length > 0)
						v += this.selectedVariables(extensionObj, dynamic);

					v += '</div>';
				v += '</div>';

			return v;
		},
		selectedVariables: function(extensionObj, dynamic) {
			var v = '';
				v += '<div class="row-fluid">';
					v += '<div class="span4">';
						v += '<span class="inline-label">'+localize.t('tiq.ext.lookup_data_sources')+'</span>';
					v += '</div>';
					v += '<div class="span8">';
						for (var i = 0; i < dynamic.length; i++) {
							v += utui.ui.template.form.readonly.inputItemView(null, dynamic[i][0]._parentInstanceId +'_source', '');
						};
					v += '</div>';
				v += '</div>';
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			case 'hash':
				if(value === '1') {
					roValue = 'md5'
				}
				break;
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},
	fillData: function (container, fillFlag, cb) {
		this.container = container;
		var obj = exapi.getObjectByExtensionId(container),
			hashValue = obj.hash || '';


		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);

		var content = '<div id="'+container+'_pane" class="customization_padded" style="min-height:320px;min-width:950px;overflow:hidden">';
			content += '<div class="customization_div" style="padding:5px;width:400px;float:left">';
				content += '<div>';
					content += '<div style="padding-bottom:10px;">'+localize.t('tiq.ext.dle_intro_txt')+'</div>';
					content += '<div style="clear:both;padding-bottom:10px;width:400px;">'+localize.t('tiq.ext.use_extension_dl_lookup')+'</div>';
				content += '</div>';
				content += '<div class="customization_div" style="clear:both;">';
				content += '  <button class="btn btn-mini js-action-newencrypt i-color-add js-action-addbtn"><i class="icon-plus"></i> '+localize.t('tiq.ext.add_datasource')+'</button>';
				content += '</div>';
			content += '</div>';
			
			content += '<div style="padding:5px;width:500px;float:right">';
			content += '<style type="text/css">';
			content += '.tiqdle_code{font-family: \'Courier New\', Courier, monospace;color:#666666;font-weight: bold;padding-left:5px}';
			content += '.tiqdle_line{width: 110px;}';
			content += '.tiqdle_var{color:#0000FF;margin-left:15px}';
			content += '.tiqdle_val{color:#1eaf16;}';
			content += '</style>';
				content += '<div customization_labelwide style="padding-top:4px;padding-left:5px;float:left">' + localize.t('tiq.ext.overwrite_on_merge') + ': '+'</div>';
				content += '<div id="overwrite_on_merge" name="overwrite_on_merge" class="customization_item js-action-enc-on-merge">';
					content += '<input id="overwrite_on_merge_yes" name="overwrite_on_merge"  type="radio" value="yes"/><label for="overwrite_on_merge_yes">' + localize.t('tiq.ext.yes') + '</label>';
					content += '<input id="overwrite_on_merge_no" name="overwrite_on_merge"  type="radio"  value="no"/><label for="overwrite_on_merge_no">' + localize.t('tiq.ext.no') + '</label>';						
				content += '</div>';			
				content += '<div style="clear:both;padding-top:10px;width:400px;">'+localize.t('tiq.ext.dle_overwrite_info')+'</div>';
				content += '<table style="margin-top:15px;width:450px">' ;
					content += '<tr>';
						content += '<td style="border-right:2px solid grey;padding:3px" valign="top">';
							content += '<table style="width:225px;">';
							content += '<tr>';
								content += '<td colspan="2" style="text-align:center;border-bottom:1px solid grey;">' + localize.t('tiq.ext.before_merge') + '</td>';
							content += '</tr><tr>';
								content += '<td>'+ localize.t('tiq.ext.original_data_layer') + '</td>';
								content += '<td>' + localize.t('tiq.ext.incoming_properties') + '</td>';
							content += '</tr><tr>';
								// Cell 1
								content += '<td class="tiqdle_code">';
								content += '<div class="tiqdle_line">{</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">aa</span>&nbsp;:&nbsp;<span class="tiqdle_val">12</span>,</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">bb</span>&nbsp;:&nbsp;<span class="tiqdle_val">45</span></div>';
								content += '<div class="tiqdle_line">}</div>';
								content += '</td>'
								// Cell 2
								content += '<td class="tiqdle_code">';
								content += '<div class="tiqdle_line">{</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">xx</span>&nbsp;:&nbsp;<span class="tiqdle_val">77</span>,</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">bb</span>&nbsp;:&nbsp;<span class="tiqdle_val">22</span></div>';
								content += '<div class="tiqdle_line">}</div>';
								content += '</td>'
							content += '</tr>';
							content += '</table>';
						content += '</td>';
						content += '<td style="padding:3px" valign="top">';
							content += '<table style="width:225px;">';
							content += '<tr>';
								content += '<td colspan="2" style="text-align:center;border-bottom:1px solid grey;">' + localize.t('tiq.ext.after_merge') + '<td>';			
							content += '</tr><tr>';
								content += '<td>' + localize.t('tiq.ext.overwrite_on') + '</td>';
								content += '<td>' + localize.t('tiq.ext.overwrite_off') + '</td>';
							content += '</tr><tr>';
								// Cell 3
								content += '<td class="tiqdle_code">';
								content += '<div class="tiqdle_line">{</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">aa</span>&nbsp;:&nbsp;<span class="tiqdle_val">12</span>,</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">bb</span>&nbsp;:&nbsp;<span class="tiqdle_val">22</span>,</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">xx</span>&nbsp;:&nbsp;<span class="tiqdle_val">77</span></div>';
								content += '<div class="tiqdle_line">}</div>';
								content += '</td>'
								// Cell 4
								content += '<td class="tiqdle_code">';
								content += '<div class="tiqdle_line">{</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">aa</span>&nbsp;:&nbsp;<span class="tiqdle_val">12</span>,</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">bb</span>&nbsp;:&nbsp;<span class="tiqdle_val">45</span>,</div>';
								content += '<div class="tiqdle_line"><span class="tiqdle_var">xx</span>&nbsp;:&nbsp;<span class="tiqdle_val">77</span></div>';
								content += '<div class="tiqdle_line">}</div>';
								content += '</td>'
							content += '</tr>';
							content += '</table>';
						content += '</td>';
					content += '</tr>';
				content += '</table>' ;

				content += '<div style="padding:5px;width:500px;float:right">';
					content += '<div customization_labelwide style="padding-top:4px;padding-left:5px;float:left">' + localize.t('tiq.ext.load_check_timeout') + ': '+'</div>';
					content += '<div class="customization_item">';
					content += utui.ui.template.form.validationWrapper('<input type="text" size="5" id="load_check_timeout" name="load_check_timeout">', "load_check_timeout");
					content += '</div>';
					content += '<div style="clear:both;padding-top:10px;width:400px;">'+localize.t('tiq.ext.dle_load_check_info')+'</div>';
				content += '</div>';

			content += '</div>';
		content += '</div>';
		content += '<div class="customization_padded" style="min-height:30px;"><i class="icon-info-sign"></i>'+localize.t('tiq.ext.lookup_lowercase_info')+'</div>';


		$('#customizations_' + container + '_content').html(content);

		obj.overwrite_on_merge = obj.overwrite_on_merge || "yes"; // default to yes if not found
		obj.load_check_timeout = obj.load_check_timeout || "30"; // default to 30 seconds

		var $overwrite_on_merge = $("#overwrite_on_merge");

		$overwrite_on_merge.buttonset();

		var $radio = $overwrite_on_merge.find('input[type="radio"]');
		$radio[(obj.overwrite_on_merge == 'yes' ? 0 : 1)].checked = true;
		$radio.button('refresh');

		$("#load_check_timeout").val(obj.load_check_timeout);

		$('#hash').val(hashValue);

		for(var i in utui.util.getVars(obj,2)){
			if(i.indexOf('_source')>=0){
				var sourceId = i.substring(0,i.indexOf('_source'));
				var containerId = utui.customizations_template[100037].addItem(container,sourceId);
				$('#'+containerId + '_source').select2('val', obj[sourceId+'_source'] || '');
			}
		}

		$('#customizations_'+container+'_content').on('click', '.js-action-newencrypt', function(e) {
			utui.customizations_template[100037].addItem(container);
		});


		$('#'+container+'_pane').on('click','.js-action-deletebtn',function(){
			utui.customizations_template[100037].deleteItem(this);
		});

	},
	addItem:function(container,instanceId){
		var id = instanceId || utui.util.getContainerId();

		var itemId = id + '_source';

		var content = '<div class="js-item-container customization-row">';
			var field = utui.customizations_template.util.buildSelect({ item: itemId, container: container, id: 100037, stylefloat: 'none', showvars: 'all' });
			content += '<div class="ext-crypt-source" style="display:inline-block">';
				content += localize.t('tiq.ext.lookup_data_source')+' ' + utui.ui.template.form.validationWrapper(field, itemId);
			content += '</div>';

			content += '<div class="ext-crypt-delete" style="display:inline-block">';
				content += '<button class="btn btn-small i-color-delete js-action-deletebtn js-action-removebtn" data-instance-id="'+id+'"><i class="icon-trash"></i> '+localize.t('tiq.ext.remove_txt')+'</button>';
			content += '</div>';
		content += '</div>';

		$('#'+container+'_pane').append(content);

		// Conversion to Select2
		dsapi.convertSelectListToSelect2(id+'_source', true);

		return id;
	},
	show:function(container) {},
	deleteItem:function(deleteElem){
		var id = $(deleteElem).attr('data-instance-id');
		$(deleteElem).closest('div.js-item-container').remove();

		delete utui.data.customizations[this.container][id + '_source'];
		
		utui.customizations.updateExtensionData(this.container);
	},
	buildHashSelect:function(itemId){
		var content = '<select id="'+itemId+'" name="'+itemId+'">';
		var hashes =  utui.config.dlEnrichmentHashOptions;
		for (var id in hashes){
			content += '<option value="'+id+'">'+hashes[id]+'</option>';
		}
		content += '</select>';
		return content
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			value,
			entryCollection,
			entryItem,
			message,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		if(!$.isEmptyObject(staticConfigCollection)) {
			// Set to 30 seconds if not defined - This is for old profiles that don't have this.
			if (typeof staticConfigCollection.load_check_timeout === 'undefined'){
				staticConfigCollection.load_check_timeout = '30';
			}

			for(var key in staticConfigCollection) {
				if (key == 'load_check_timeout'){
					var re = new RegExp(/^\d+$/);
					if (! re.test(staticConfigCollection[key])){
						message = localize.t('tiq.validation.message.numeric_value_req');
						validationObj[key] = message;
						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
				}
			}
			
		}

		if(dynamicConfigCollection.length > 0) {

			for (var i = 0; i < dynamicConfigCollection.length; i++) {
				entryCollection = dynamicConfigCollection[i]

				for(var j = 0; j < entryCollection.length; j++) {
					entryItem = entryCollection[j];

					key = getInstanceKey(entryItem, 'source');

					if(entryItem.source === '') {
						message = localize.t('tiq.validation.message.define_variable');
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
					}
					else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
						message = utui.validation.message.missingVariable( entryItem.source );
						validationObj[key] = message;

						utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
					}

				};
			};
		}

		return validationObj;
	},

	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	}

}

// Adobe Tag Content Modification
utui.customizations_template[100038] = {
    id: 100038,
    index: 0,
    container: '',
    template: {
        main: function(extensionObj) {
            var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

            var v = '';
                v += '<div class="readonly-container-bubble">';
                    v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
                    v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

                    if(dynamic.length > 0)
                        v += this.setConfigurationView(extensionObj, dynamic);

                    v += '</div>';
                v += '</div>';

                v += this.rules(extensionObj);
            return v;
        },
        setConfigurationView: function(extensionObj, dynamic) {
            var v = '';
                for (var i = 0; i < dynamic.length; i++) {
                    var dpiId = dynamic[i][0]._parentInstanceId;

                    v += '<div class="row-fluid">';
                        v += '<div class="span12">';
                            v += '<h3>TnT '+localize.t('tiq.ext.content_modification')+' '+(i+1)+'</h3>';
                        v += '</div>';
                    v += '</div>';

                    v += '<div class="container-fluid">';
                        v += '<div class="row-fluid">';
                            v += '<div class="span4">';
                                v += '<span class="inline-label">'+localize.t('tiq.ext.element_type')+'</span>';
                            v += '</div>';

                            v += '<div class="span8">';
                                v += utui.ui.template.form.readonly.inputItemView(null, dpiId +'_type', '');
                            v += '</div>';
                        v += '</div>';

                        v += '<div class="row-fluid">';
                            v += '<div class="span4">';
                                v += '<span class="inline-label">'+localize.t('tiq.ext.identifier')+'</span>';
                            v += '</div>';

                            v += '<div class="span8">';
                                v += utui.ui.template.form.readonly.inputItemView(null, dpiId +'_domid', '');
                            v += '</div>';
                        v += '</div>';

                        v += '<div class="row-fluid">';
                            v += '<div class="span4">';
                                v += '<span class="inline-label">'+localize.t('tiq.ext.mod_position')+'</span>';
                            v += '</div>';

                            v += '<div class="span8">';
                                v += utui.ui.template.form.readonly.inputItemView(null, dpiId +'_position', '');
                            v += '</div>';
                        v += '</div>';

                        v += '<div class="row-fluid">';
                            v += '<div class="span4">';
                                v += '<span class="inline-label">'+localize.t('tiq.ext.mbox_div_id')+'</span>';
                            v += '</div>';

                            v += '<div class="span8">';
                                v += utui.ui.template.form.readonly.inputItemView(null, dpiId +'_mboxid', '');
                            v += '</div>';
                        v += '</div>';

                        v += '<div class="row-fluid">';
                            v += '<div class="span4">';
                                v += '<span class="inline-label">'+localize.t('tiq.ext.static_params')+'</span>';
                            v += '</div>';

                            v += '<div class="span8">';
                                v += utui.ui.template.form.readonly.inputItemView(null, dpiId +'_mboxparams', '');
                            v += '</div>';
                        v += '</div>';

                    v += '</div>';
                };
            return v;
        },
        rules: function(extensionObj) {
            var v = '';
                v += '<div class="readonly-container-bubble">';
                    v += '<div class="title">'+localize.t('tiq.ext.condition')+'</div>';
                    v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

                        v += '<div class="row-fluid">';
                            v += '<div class="span12">';
                                v += utui.customizations_template.shared.getConditionalView(utui.util.interpret.extension.condition.toFormatted(extensionObj));
                            v += '</div>';
                        v += '</div>';

                    v += '</div>';
                v += '</div>';
            return v;
        }
    },
    setRulesOnView: function(extensionObj, namespace) {
        var obj = extensionObj,
            instanceId,
            target = '';

        function $data(key) {
            if(namespace) {
                return $('#'+namespace).find('span[data-key="'+key+'"]');
            }
            return $('span[data-key="'+key+'"]');
        }

        var dynamic = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

        for (var i = 0; i < dynamic.length; i++) {

            instanceId = dynamic[i][0]._parentInstanceId;

            if(dynamic[i][0].setoption === 'var') {
                $data(instanceId+'_setoption').hide();
                $data(instanceId+'_settovar').show();
                $data(instanceId+'_settotext').hide().after('<span class="inline-label">('+localize.t('tiq.ext.variable')+')</span>');
            }
            if(dynamic[i][0].setoption === 'text') {
                $data(instanceId+'_setoption').hide();
                $data(instanceId+'_settovar').hide();
                $data(instanceId+'_settotext').show();
            }
            if(dynamic[i][0].setoption === 'code') {
                $data(instanceId+'_setoption').hide();
                $data(instanceId+'_settovar').hide();
                $data(instanceId+'_settotext').show().after('<span class="inline-label">('+localize.t('tiq.ext.js_0code')+')</span>');
            }
        };
    },
    getValue: function(extensionObj, key) {
        var value = extensionObj[key],
            roValue = '',
            options = {},
            dsCollection;

        var configDynamicObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);

        for(var i in configDynamicObj) {
            var obj = configDynamicObj[i][0],
                keyType = obj._parentInstanceId + '_type',
                keyPos = obj._parentInstanceId + '_position';

            switch(key) {
                case keyType:
                    if(extensionObj[keyType] === 'domid') return localize.t('tiq.ext.dom_id');
                    if(extensionObj[keyType] === 'xpath') return localize.t('tiq.ext.xpath');
                    break;
                case keyPos:
                    if(extensionObj[keyPos] === 'insertbefore') return localize.t('tiq.ext.before_node');
                    if(extensionObj[keyPos] === 'insertafter') return localize.t('tiq.ext.after_node');
                    if(extensionObj[keyPos] === 'insertfirst') return localize.t('tiq.ext.beginning_of_node');
                    if(extensionObj[keyPos] === 'insertlast') return localize.t('tiq.ext.end_of_node');
                    if(extensionObj[keyPos] === 'replace') return localize.t('tiq.ext.replace_node_content');
                    if(extensionObj[keyPos] === 'replacenode') return localize.t('tiq.ext.replace_node');
                    if(extensionObj[keyPos] === 'replacekeepdefault') return localize.t('tiq.ext.replace_node_content_leave_default');
                    break;
                }
        };

        switch(key) {
            case "settotext":
            case "settovar":
                if(extensionObj.setoption === 'text') {
                    roValue = value;
                }
                if(extensionObj.setoption === 'var') {
                    roValue = dsapi.getDataSourceFormattedName(value);
                }
                break;
            case "position":
                options = {
                    insertbefore: localize.t('tiq.ext.before_node'),
                    insertafter: localize.t('tiq.ext.after_node'),
                    insertfirst: localize.t('tiq.ext.beginning_of_node'),
                    insertlast: localize.t('tiq.ext.end_of_node'),
                    replace: localize.t('tiq.ext.replace_node_content'),
                    replacenode: localize.t('tiq.ext.replace_node'),
                    replacekeepdefault: localize.t('tiq.ext.replace_node_content_leave_default')
                }

                roValue = options[value];
                break;
            case "type":
                options = {
                    domid: localize.t('tiq.ext.dom_id'),
                    xpath: localize.t('tiq.ext.xpath')
                }
                roValue = options[value];
                break;
            case "var":
                roValue = dsapi.getDataSourceFormattedName(value);
                break;
            default:
                // Is filtertype
                if(key.match(utui.util.interpret.extension.conditionRegex) && ~key.indexOf('_filtertype')) {
                    if(ruleapi.condition.isOperatorValue(value)) {
                        roValue = ruleapi.condition.interpretOperatorValue(value);
                    }
                    else {
                        roValue = value;
                    }
                }
                else {
                    roValue = value;
                }
                break;
        }

        return roValue;
    },
    fillData: function (container, fillFlag, cb) {
        this.container = container;

        var obj = exapi.getObjectByExtensionId(container);

        // -----------------------------------------------------------------
        // Append READ ONLY view
        $('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

        // Render READ ONLY view
        utui.customizations_template.shared.populateReadOnlyView(obj);
        // -----------------------------------------------------------------

        // Just make sure that utag.sync.js IS being generated
        if (utui.data.publish.enable_sync_loader !== "yes") {
            utui.data.publish.enable_sync_loader = "yes";
            utui.util.showStatusMessage(localize.t('tiq.ext.weve_turned_on_utag'), true);
        }

        var content = '<div class="customization_padded">';
		content += '  <div><div class="customization_div">'; // Notification of utag.sync requirement
		content += '    <span style="margin-left:2px;float:left" class="ui-icon ui-icon-alert" title="' + localize.t('tiq.ext.ext_requires_utag_sync') + '"></span>';
		content += '    <div class="customization_item" style="float:left">' +localize.t('tiq.ext.ext_requires_utag_sync') + '</div>';
        content += '    <input type="hidden" id="multiScopeLoad" name="multiScopeLoad" value="sync,global" />'
		content += ' </div></div>';
		
        // Set Items
		content += '  <div id="_mboxRevealDiv" style="display:block">'; // mbox definition block (revealed if in use)
		content += '  <div class="customization_div">'; 
		content += '    <div class="config_item" >' +localize.t('tiq.ext.need_mbox') + '</div>';
		content += '    <div class="config_item" style="clear:both;margin-top:10px;">';
		content += '    <button id="addMboxbtn" class="btn btn-mini">' + localize.t('tiq.ext.add_new_mbox') + '</button>'
		content += '    </div>';
		content += '  </div>';
		content += '  </div>';
		
		content += '  <div id="_mboxDefDiv" style="display:none">'; // mbox definition block (revealed if in use)
        content += '  <div class="customization_div">';
        content += '        <div id="' + container + '_setcontainer" class="customization_item" style="float:left"></div>';
        content += '  </div>';

        // Conditions
        content += '  <div><div class="customization_div">';
        content += '    <div class="customization_label" style="float:left">' +localize.t('tiq.ext.condition') + '</div>';
        content += '    <div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini ext-data-action">' + localize.t('tiq.ext.add_condition') + '</button></div>';
        content += '    <div id="' + container + '_conditioncontainer" class="customization_item" style="float:left">';
        content += '    </div>';
        content += '    </div>';
        content += '  </div>';
        content += '</div>'; // end - id="_mboxDefdiv"

        $('#customizations_' + container + '_content').html(content);

		// Add a click handler to reveal the mbox editing panel
        $( "#addMboxbtn" ).safeOn( "click", {c_id : container}, function(event) {utui.customizations_template[100038].revealMboxDiv(event.data.c_id)});

        if (typeof fillFlag != 'undefined' && fillFlag) {
			var isMbox = isMbox || {};
			isMbox[container] =  false;
        
            for (var i in utui.util.getVars(obj, 2)) {
                if (i.indexOf('_domid') >= 0) {
                    var setId = i.substring(0, i.indexOf('_domid'));
					var vitals = obj[setId + '_domid'].trim() + obj[setId + '_mboxid'].trim() + obj[setId + '_mboxparams'].trim();
					if (vitals.length !== 0) {
						isMbox[container] = true;
					}
					
                    var itemId = utui.customizations_template[this.id].addSetItem(container, setId);
                    $('#' + itemId + '_type').val(obj[setId + '_type']);
                    $('#' + itemId + '_domid').val(obj[setId + '_domid']);
                    $('#' + itemId + '_position').val(obj[setId + '_position']);
                    $('#' + itemId + '_mboxid').val(obj[setId + '_mboxid']);
                    $('#' + itemId + '_mboxparams').val(obj[setId + '_mboxparams']);
                    utui.customizations_template[this.id].updateSetOption(itemId);
                }
            }
            // Set up the conditions for ext 100038
			if (isMbox[container]){
				utui.customizations_template[100038].revealMboxDiv(container);
				utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,100038);
			}
            
        } 
        
        $('#button_addcondition').attr('onClick', 'utui.customizations_template[' + this.id + '].addCondition(\'' + container + '\');$(\'#button_addcondition\').hide()');

        if(cb) cb();
    },
    show: function (container) {},
    addSetItem: function (container, instanceId) {
        if (typeof utui.customizations.tmpExtData == 'undefined') {
            utui.customizations.tmpExtData = {};
        }
        if (typeof utui.customizations.tmpExtData[100038] == 'undefined') {
            utui.customizations.tmpExtData[100038] = {};
        }

        var id;
        if (typeof instanceId != "undefined") {
            id = instanceId;
            utui.customizations.tmpExtData[100038][id] = 'defined';
        } else {
            id = utui.util.getContainerId();
            utui.customizations.tmpExtData[100038][id] = 'new';
        }
        
        var content = '';
        content += '<div id="' + id + '" class="widget-container">';

        content += '<div class="pull-right">';
            content += '<button onclick="if($(\'#' + id + '\').siblings().length==0){utui.customizations_template[' + this.id + '].hideMboxDiv()};utui.customizations_template[' + this.id + '].removeSetItem(\'' + id + '\');" class="btn btn-mini js-action-removebtn"><i class="icon-minus clickable"></i></button>';
            content += '<button onclick="utui.customizations_template[' + this.id + '].addSetItem(\'' + container + '\')" class="btn btn-mini"><i class="icon-plus clickable js-action-addbtn"></i></button>';
        content += '</div>';

        var itemId = id + '_type';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.element_type') + '</div><div class="customization_item">';
        content += '<select id="' + itemId + '" name="' + itemId + '">';
        content += '  <option value="domid">' + localize.t('tiq.ext.dom_id') + '</option>';
        content += '  <option value="xpath">' + localize.t('tiq.ext.xpath') + '</option>';
        content += '</select></div></div>';
        itemId = id + '_domid';
        content += '  <div class="config_item" style="clear:both;"><div class="customization_labelwide">' + localize.t('tiq.ext.dom_id_c') + '</div><div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="48" style="margin:5px;"></div></div>';

        var itemId = id + '_position';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.mod_position') + '</div><div class="customization_item">';

        var posSelId = itemId;
        content += '<select id="' + itemId + '" name="' + itemId + '">';
        content += '  <option value="insertbefore">' + localize.t('tiq.ext.before_node') + '</option>';
        content += '  <option value="insertafter">' + localize.t('tiq.ext.after_node') + '</option>';
        content += '  <option value="insertfirst">' + localize.t('tiq.ext.beginning_of_node') + '</option>';
        content += '  <option value="insertlast">' + localize.t('tiq.ext.end_of_node') + '</option>';
        content += '  <option value="replace">' + localize.t('tiq.ext.replace_node_content') + '</option>';
        content += '  <option value="replacenode">' + localize.t('tiq.ext.replace_node') + '</option>';
        content += '  <option value="replacekeepdefault">' + localize.t('tiq.ext.replace_node_content_leave_default') + '</option>';
        content += '</select></div></div>';

        itemId = id + '_mboxid';
        content += '  <div class="config_item" style="clear:both"><div class="customization_labelwide">' + localize.t('tiq.ext.mbox_div_id') + '</div><div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="24" style="margin:5px;"></div></div>';

        itemId = id + '_mboxparams';
        content += '  <div class="config_item" style="clear:both;"><div class="customization_labelwide">' + localize.t('tiq.ext.static_params') + '</div><div class="customization_item"><input type="text" id="' + itemId + '" name="' + itemId + '" value="" size="64"  style="margin-left:5px;"></div>';
        content += '    <span style="margin-top:5px;margin-left:2px;float:right" id="' + itemId + '_tooltip" class="ui-icon ui-icon-info" title="' + utui.tooltip.customizations.customization_100038_params_tooltip + '"></span>';
        content += '  </div>';
		content += '<div style="clear:both"><br><input type="hidden" id="multiScopeLoad" name="multiScopeLoad" value="sync,global" /></div>';

		content += '  </div>';
        $('#' + container + '_setcontainer').append(content);

        utui.customizations_template[this.id].updateSetOption(id);

        return id;
    },
    updateSetOption: function (container) {
        var itemId = container + '_setoption';
        if ($('#' + itemId).val() == 'var') {
            $('#' + container + '_settovar').show();
            $('#' + container + '_settotext').hide();
        } else {
            $('#' + container + '_settotext').show();
            $('#' + container + '_settovar').hide();
        }
    },
    removeSetItem: function (container) {
        $('#' + container).remove();
        var self = this;

        var ext = utui.data.customizations[this.container];
        
        delete ext[container + '_domid'];
        delete ext[container + '_flickerFree'];
        delete ext[container + '_mboxid'];
        delete ext[container + '_mboxparams'];
        delete ext[container + '_position'];
        delete ext[container + '_type'];
        
        var $condCont = $("#"+ext._id+"_conditioncontainer");
        
        if ($("#"+ext.id+"_setcontainer").children().length === 0 && $condCont.children().length > 0) {
          _.forEach($condCont.children(), function(ele){
            var match = ele.id.match(/(.*?)_conditioncontainer/);
            if (match && match[1]) {
              self.removeCondition(match[1]);
            }
          })
        }

        utui.customizations.updateExtensionData(this.container);
    },
    revealMboxDiv: function(container){
        var isEmpty = true;
        _.each(exapi.getObjectByExtensionId(container),function(v,k){
            if (k.indexOf('_domid') > -1){
                isEmpty = false;
            }
        });
        if (isEmpty) {
            utui.customizations_template[this.id].addSetItem(container);
        }
        
		$('#_mboxRevealDiv').css('display','none');
		$('#_mboxDefDiv').css('display','block');
	},
    hideMboxDiv: function(){
		$('#_mboxRevealDiv').css('display','block');
		$('#_mboxDefDiv').css('display','none');
	},
    toggleValue: function (item) {
        if ($('#' + item).is(':checked')) {
            $('#' + item).val('yes');
            return('yes');
        } else {
            $('#' + item).val('no');
            return('no');
        }
    },
    addCondition: function (container, instanceId) {
        return utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
    },
    addAndCondition: function (container, instanceId) {
        return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);       
    },
    removeCondition: function (container) {
        return utui.customizations_template.shared.removeExtensionCondition(this, container);
    },
    removeAndCondition: function (container) {
        return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
    },
	activationCheck: function(extId){
		var okToActivate = true;
		_.each(utui.data.customizations,function(ext){
			if (ext.id === "100023" && ext.status === "active"){
				okToActivate = false;
			}
		});
		
		return okToActivate;
	},
    validateModel: function(extObj) {
        var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
            dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
            conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
            validationObj = {},
            entryCollection,
            entryItem,
            key;

        var getInstanceKey = function(obj, key) {
            if(obj._instanceId === '0')
                return obj._parentInstanceId + '_' + key;
            else
                return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
        }

        utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

        if(conditionCollection.length > 0) {

            for (var i = 0; i < conditionCollection.length; i++) {
                entryCollection = conditionCollection[i]

                for(var j = 0; j < entryCollection.length; j++) {
                    entryItem = entryCollection[j];

                    key = getInstanceKey(entryItem, 'source');

                    if(entryItem.source === '') {
                        message = localize.t('tiq.validation.message.define_variable');
                        validationObj[key] = message;

                        utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
                    }
                    else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
                        message = utui.validation.message.missingVariable( entryItem.source );
                        validationObj[key] = message;

                        utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
                    }

                };
            };
        }
		
		// Check for an active instance of an old style Adobe TnT extension
		if (extObj.status === "active"){
			if (utui.customizations_template[100038].activationCheck() == false){
				exapi.setStatus(extObj._id, 'inactive');
				$('#customizations_'+extObj._id).find('.js-status-toggle').children('span').removeClass('container_status_active').addClass('container_status_inactive');

				var confirmationContent= localize.t('tiq.ext.simultaneous_tnt');

				$("#dialog-confirmation-content").html(confirmationContent);

				$("#dialog-confirmation").dialog({
					autoOpen: true,
					height: 'auto',
					width: 'auto',
					modal: true,
					closeOnEscape: false,
					closeText: "",
					close: function( event, ui ) {
						
					},
					resizable: false,
					draggable: true,
					buttons: [
						{
							text: localize.t('tiq.dialog.button.ok'),
							id: 'confirmDisableSimultaneosTnt',
							click: function() {
								$(this).dialog('close');
							}
						}
					]
				});									
			}			
		}
        return validationObj;
    },

    // -----------------------------------------------
    // Verifies the entry strictly based on what's in the data model
    // @return true if all extension input conditions are valid and error-free
    isValid: function(container) {
        if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
            return false;
        }

        return true;
    }
}
utui.enableAdobeTag = function(){
    utui.config.customizationList[100038].load = 'true';
    utui.config.manageList[20108].load = "true";

}
//Customization 100039 - Tealium Event Setup Extension
utui.customizations_template[100039] = {
	id: 100039,
	template: {
		main: function(extensionObj) {
			var configObj = utui.util.interpret.extension.configuration.dynamic.toFormatted(extensionObj);
			var sharedView = utui.customizations_template.shared.view;

			var v = '';
			// Configuration
			if(!$.isEmptyObject(configObj)) {
				v += utui.customizations_template.shared.view.boxedSection(localize.t('tiq.ext.configuration'), sharedView.getSetConfiguration(configObj));
			}
			return v;
		}
	},
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			instanceId,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}

	},
	getValue: function(extensionObj, key) {
        var value = extensionObj[key];
		
		return dsapi.getDataSourceFormattedName(value);

	},
	index: 0,
	container:'',

	fillData: function (container, fillFlag, cb) {
		var obj = exapi.getObjectByExtensionId(container),
			isInitialized = false;
			
		utui.customizations_template[100039].dataModelMgr.setContainer(container);
		utui.customizations_template[100039].evtBldrDialog.setContainer(container);
		utui.customizations_template[100039].evtDetailBlock.setContainer(container);
		
		// Add in the container for the dialog
		$('#eventrules_dialog_addmore').remove(); // In case there is one from an earlier usage
		$('#tabs-customizations').append('<div id="eventrules_dialog_addmore" style="display: none"></div>');
		
		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);
		// -----------------------------------------------------------------


		this.container = container;
		var content = "";
		content += '<div class="customization_padded">';
			content += '<div class="customization_div" id="'+container+'_topcontainer">';
				content += '<div style="float:left; margin-right:50px;">'+localize.t('tiq.ext.tev_instructions')+'</div>';
				content += '<div id="'+container+'_er_data" style="display:none"></div>';
			content += '</div>';
			content += '<div class="customization_div" style="margin-top:10px;border-top:1px solid grey;">';
			content += '<input type="hidden" name="tealium_event"  id="tealium_event" value="js.tealium_event">';
				content += '<div id="'+container+'_evtcontainer"></div>';
			content += '</div>';
		content += '</div>';

		$('#customizations_'+container+'_content').html(content);

		if(fillFlag){
			var allEventRules = utui.customizations_template[100039].dataModelMgr.getAllEventRules(); 
			utui.customizations_template[100039].evtDetailBlock.renderAllEventRules(allEventRules);			
		}else{
			// utui.customizations_template[100039].addEventDefinition(container);
		}

		if(cb) cb();
	},
	show: function (container) {
		
	},
	validateModel: function(extObj) {
		var staticConfigCollection = utui.util.interpret.extension.configuration.static.toFormatted(extObj),
			dynamicConfigCollection = utui.util.interpret.extension.configuration.dynamic.toFormatted(extObj),
			conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
			validationObj = {},
			entryCollection,
			entryItem,
			key;

		var getInstanceKey = function(obj, key) {
			if(obj._instanceId === '0')
				return obj._parentInstanceId + '_' + key;
			else
				return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
		}

		utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

		var eventRulesMissingVars = [];
		if (dynamicConfigCollection.length > 0){
			_.each(dynamicConfigCollection[0][0],function(v,k){
				if (k.endsWith('_source')){
					if (!v.startsWith('dom.') 
					&&  !v.startsWith('meta.') 
					&& !dsapi.isExistingDataSource(v)) {
						eventRulesMissingVars.push(k.split('_').shift());
					}
				}			
			});			
		}
		
		if (eventRulesMissingVars.length !== 0){
			message = localize.t('tiq.validation.message.define_variable');
			validationObj[key] = message;
			utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');			
		}
		
		utui.customizations_template[100039].dataModelMgr.setEventRulesMissingVars(eventRulesMissingVars);		

		return validationObj;
	},
	dataModelMgr : function(){
		var extContainerId,
			eventRulesWithIssues = {},
			allEventRules;
		// Data model notes:
		// - Each event has one object in the array of the eventTemplate
		// - In the accordion, there is one line for each event
		// - Every event will have condition fields using the standard condtion form (filter, filtertype, source)
		// - To group the items for each event together, the fields will be named with the id as part of the prefix : evt_pageview_filter, 
		// - Need to ensure that the fields are in a form that the extension architecture will detect a change and save it 
		var eventRuleTemplate = [ 
		        { 'id':'categoryview','event_id':'category_view', 'title':'Category Page View', '1_filter':'category', '1_filtertype':'equals', '1_source':'js.page_type' },
		        { 'id':'search','event_id':'search', 'title':'Search Page View', '1_filter':'search', '1_filtertype':'equals', '1_source':'js.page_type' },
		        { 'id':'productview','event_id':'product_view', 'title':'Product Detail Page View', '1_filter':'product', '1_filtertype':'equals', '1_source':'js.page_type' },
		        { 'id':'cartadd','event_id':'cart_add', 'title':'Add to Cart', '1_filter':'cart_add', '1_filtertype':'equals', '1_source':'js.event_name' },
		        { 'id':'cartremove','event_id':'cart_remove', 'title':'Remove from Cart', '1_filter':'cart_remove', '1_filtertype':'equals', '1_source':'js.event_name' },
		        { 'id':'cartempty','event_id':'cart_empty', 'title':'Empty Cart', '1_filter':'cart_empty', '1_filtertype':'equals', '1_source':'js.event_name' },
		        { 'id':'cartview','event_id':'cart_view', 'title':'Shopping Cart View', '1_filter':'cart', '1_filtertype':'equals', '1_source':'js.page_type' },
		        { 'id':'checkout','event_id':'checkout', 'title':'Checkout', '1_filter':'checkout', '1_filtertype':'equals', '1_source':'js.page_type' },
		        { 'id':'purchase','event_id':'purchase', 'title':'Purchase Complete', '1_filter':'confirmation', '1_filtertype':'equals', '1_source':'js.page_type' },
		        { 'id':'pageview','event_id':'page_view', 'title':'Page View', '1_filter':'generic', '1_filtertype':'equals', '1_source':'js.page_type' },
		        { 'id':'emailsignup','event_id':'email_signup', 'title':'Email Sign Up', '1_filter':'email_signup', '1_filtertype':'equals', '1_source':'js.event_name' },
		        { 'id':'socialshare','event_id':'social_share', 'title':'Social Share', '1_filter':'social_share', '1_filtertype':'equals', '1_source':'js.event_name' },
		        { 'id':'userregister','event_id':'user_register', 'title':'User Register', '1_filter':'user_register', '1_filtertype':'equals', '1_source':'js.event_name' },
		        { 'id':'userlogin','event_id':'user_login', 'title':'User Log In', '1_filter':'user_login', '1_filtertype':'equals', '1_source':'js.event_name' },
		        { 'id':'userlogout','event_id':'user_logout', 'title':'User Log Out', '1_filter':'user_logout', '1_filtertype':'equals', '1_source':'js.event_name' },
		      ];
			var requiredVars = [
				{ title: localize.t('tiq.ext.ext_100039_vars.event_name.title'), name: "event_name", type: "js", description: localize.t('tiq.ext.ext_100039_vars.event_name.desc') },
				{ title: localize.t('tiq.ext.ext_100039_vars.tealium_event.title'), name: "tealium_event", type: "js", description: localize.t('tiq.ext.ext_100039_vars.tealium_event.desc') },
				{ title: localize.t('tiq.ext.ext_100039_vars.page_type.title'), name: "page_type", type: "js", description: localize.t('tiq.ext.ext_100039_vars.page_type.desc') }
			]
			  
		var _getAllEventRules = function(){
			var extContainerId = _getContainer();	
			
			allEventRules = {};
			var exDmRgx = new RegExp(/evt_([A-Za-z0-9]+)_(.+)/);

			_.each(utui.data.customizations[extContainerId],function(item,custKey){
				var ckRslt = exDmRgx.exec(custKey);				
				if (ckRslt !== null){
					if (typeof allEventRules[ckRslt[1]] === 'undefined' ){
						allEventRules[ckRslt[1]] = {};
						addERUtils(allEventRules[ckRslt[1]]);
					}
					allEventRules[ckRslt[1]] = allEventRules[ckRslt[1]] || {};
					allEventRules[ckRslt[1]][ckRslt[2]] = item;					
				}				
			});
			if (_.size(allEventRules) == 0){
				// Brand new extension, need to set up default events
				setupDefaultEvents();
				_.each(allEventRules,function(eventRule){
					syncDMtoExtDM(eventRule);
				});
			}
			// Populate the DOM with hidden values that the extension framework can detect 
			syncDMtoDOM();				

			return allEventRules;
		};
		// Convert the internal data model into the format needed by publish.
		var syncDMtoExtDM = function(eventRule){
			_.each(utui.data.customizations[extContainerId],function(v,k){
				if (k.startsWith('evt_'+eventRule.id)){
					delete utui.data.customizations[extContainerId][k];
				}
			});

			var extDmFields = eventRule.getExtDmFields();
			_.each(extDmFields,function(value,key){
				utui.data.customizations[extContainerId][key] = value;
			});
			
		};
		// Required for the extension framework to detect changes to the rules - It watches HTML input fields for changes
		var syncDMtoDOM = function(){
			var $erData = $('#'+extContainerId+'_er_data');
			$erData.empty();
			_.each(allEventRules,function(eventRule){
				var extDmFields = eventRule.getExtDmFields();
				_.each(extDmFields,function(value,key){
					$erData.append('<input type="hidden" name="'+key+'" id="'+key+'" value="'+value+'">');
				});
			});						
		};
		// Used on first creation of the extension - Generates all events from the template
		var setupDefaultEvents = function(){
			allEventRules = {};

			_.each(eventRuleTemplate,function(erTmplt){
				var erObj = _.clone(erTmplt);
				addERUtils(erObj);
				allEventRules[erObj.id] = erObj;
			});
			var missingVars = [];
			for (var i=0; i < requiredVars.length; i++){
				if (!dsapi.isExistingDataSource(requiredVars[i].type + '.' + requiredVars[i].name)){								
					missingVars.push(requiredVars[i]);
				}
			}
			if ( missingVars.length !== 0 ){
				var addItem = function(count, nextId) {
	                var dataObj,
	                    id,
	                    r;

	                for (var i = 0; i < count; i++) {
	                    dataObj = missingVars[i];
	                    id = nextId + i;
	                    r = utui.define.addDataSource(id, '', dataObj.name, dataObj.type, dataObj.description);
	                };
	            }

	            utui.define.getNextId.fromServer(missingVars.length, null,
	                function(providedLastId, count, nextId) {
	                    addItem(count, nextId);
	                },
	                function(nextId) {
	                    addItem(missingVars.length, nextId);
	                });
			}

		};
		var addERUtils = function(erObj) {
			// Convert the data fields of this event rule into a format used to store data in customizations
			erObj.getExtDmFields = function(){
				var extDmFields = {};
				var prefix = 'evt_' + this['id'] + '_';
				_.each(this,function(v,k){
					if (typeof(v) !== 'function'){
						extDmFields[prefix + k] = v;
					}
				});

				return extDmFields;
			};
			erObj.getLRFormatObj = function(){
				var lrObj = {'id':this.id,'title':this.title};
				var rgx = new RegExp(/^(\d+)_/);
				_.each(this,function(v,k){
					var rs = rgx.exec(k);
					if (rs !== null){
						var pts = k.split('_');
						var lrNo = pts[0] - 1;
						var lrKy;
						if (typeof lrObj[lrNo] === 'undefined'){
							lrObj[lrNo] = {};
						}
						if (pts.length === 2){
							lrKy = pts[1] + '_0';
						} else {
							lrKy = pts[2] + '_' + pts[1];
						}
						lrObj[lrNo][lrKy] = v;
					}
				});
				return lrObj;
			};
		};
		
		var _getNewEmptyEventRule = function(erId) {
			var newEvRule;
			_.each(eventRuleTemplate,function(v){
				if (v.id === erId){
					newEvRule = {'id':v.id, 'event_id':v.event_id, 'title':v.title};
					addERUtils(newEvRule);
				}
			});
			return newEvRule;
		}
		var _getEventRuleByContainerId = function(containerId) {
			var erId = containerId.split('_').pop();
			return allEventRules[erId];
		};
		var _getEventInLRformat = function(erId){
			return allEventRules[erId].getLRFormatObj();			
		};
		var _getEventRule = function(erId) {
			return allEventRules[erId];			
		};
		var _setEventRule = function(eventRule) {
			allEventRules[eventRule.id] = eventRule;
			syncDMtoExtDM(eventRule);
			syncDMtoDOM();
			$('#evt_'+eventRule.id+"_id").trigger("change");
		};
		var _setEventRulesMissingVars = function(erMissingVarsList){
			eventRulesWithIssues = {};
			for (var i = 0; i < erMissingVarsList.length; i++){
				eventRulesWithIssues[erMissingVarsList[i]] = 1;
			}
		};
		var _getEventRuleValidationErrors = function(eventRuleId){
			return eventRulesWithIssues[eventRuleId];
		};
		var _setNewRulesFromLRObj = function(evtRule, lrObj){
			var lrClauses = utui.util.sizeOf(lrObj, function(key){return !isNaN(key);}),
				erRgx = new RegExp(/\d+_[filter$|filtertype$|source$]/),
				lrRgx = new RegExp(/(\w+)_(\d+)$/);
				
			// Clear out the old rules
			_.each(evtRule,function(v,k){
				if (erRgx.test(k)){
					delete evtRule[k];
				}
			});
			// Parse and set the new rules 
			for(var i = 0; i < lrClauses; i++){
				_.each(lrObj[i],function(v,k){
						erRgx 
					var rr = lrRgx.exec(k);
					if (rr){
						var ni = i + 1;
						var nk = ni + '_';
						if (rr[2] !== "0"){
							nk += rr[2] + '_';
						}
						if (rr[1] === "operator"){
							nk += "filtertype";
						} else if (rr[1] === "input"){
							nk += "source";
						} else {
							nk += rr[1];
						}
						
						evtRule[nk] = v; 
					}						
				});
			}
			return evtRule;
		};
		
		var _setContainer = function(container){
			extContainerId = container;
		};
		var _getContainer = function(newContainer){
			return extContainerId;
		};
		var _cloneNew = function(){
			utui.data.customizations
		}
		var _public = {
			getAllEventRules : _getAllEventRules,
			getEventRuleByContainerId : _getEventRuleByContainerId,
			getEventInLRformat : _getEventInLRformat,
			getNewEmptyEventRule : _getNewEmptyEventRule,
			getContainer : _getContainer,
			getEventRule : _getEventRule,
			getEventRuleValidationErrors : _getEventRuleValidationErrors,
			setEventRule : _setEventRule,
			setContainer : _setContainer,
			setNewRulesFromLRObj : _setNewRulesFromLRObj,
			setEventRulesMissingVars : _setEventRulesMissingVars,
			cloneNew : _cloneNew,
			
		};

		return _public;


	}(),
	// -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
		if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
			return false;
		}

		return true;
	},
	
	// -----------------------------------------------
	// Event builder dialog - Used to manage event rule conditions. 
	// Triggered by an edit event on the event rule accordion display.
	evtBldrDialog : function(){
		var extContainerId,
			hideFilter = { defined:1, notdefined:1, notpopulated:1, populated:1, is_badge_assigned:1, is_badge_not_assigned:1 },
			addMoreDialogContainer;

		var initDropDownButton = function($buttonEl, containerId) {
			var self = this;

			$buttonEl.click(function() {
				var right = 5,
					top = 5,
					$button = $(this);

				// generate a menu
				var $dropdown = $("<div />", {
					"class" : "dropdown menu_list_container gradient"
				}).append(
					$("<div />", {
						"class" : "row",
						"click" : function() {
							duplicateConditionBlock(containerId);
							$dropdown.remove();
						}
					}).html(localize.t('tiq.rules.duplicate'))
				).append(
					$("<div />", {
						"class" : "row",
						"click" : function() {
							removeConditionBlock(containerId);
							$dropdown.remove();
						}
					}).html(localize.t('tiq.rules.remove'))
				).css("top", top).css("right", right).appendTo($("#" + containerId));

				// Intercept all clicks on the document, if the target didn't originate from the dropdown menu dismiss the
				// dropdown
				setTimeout(function() {
					$("body").on("click", function(event) {
						var $target = $(event.target)

						if($dropdown.has($target).length <= 0) {
							// user has clicked outside the drop down
							$dropdown.remove();
						}
					})
				}, 0);
			});
		};
		
		var duplicateConditionBlock = function(containerId){
			var $el = $("#" + containerId),
				$selects = $el.find("select"),
				$inputs = $el.find("input").not('.select2-input'),
				numOfRowsToAdd = parseInt($selects.length / 2),
				orContainer = "",
				self = this;

			// Add the same number of rows into the new OR container
			for(var i = 0; i < numOfRowsToAdd; i++) {
				if(i == 0) {
					orContainer = addOrItem("eventrules_dialog_addmore");
				} else {
					addAndItem(orContainer);
				}
			}

			// Copy all of the old select control values into the newly created rows
			var $newContainer = $("#" + orContainer + "_pane"),
				$newSelects = $newContainer.find("select"),
				$newInputs = $newContainer.find("input").not('.select2-input');

			for(var i = 0; i < $selects.length; i++) {
				var $select = $($selects[i]),
					selectedValue = $select.find("option:selected").val();

				$($newSelects.get(i)).val(selectedValue);
			};

			// Re-initialize select2 for $newSelects to show new values
			$newSelects.select2();

			// Copy all of the old input control values into the newly created rows
			for(var i = 0; i < $inputs.length; i++) {
				var oldInput = $($inputs[i]),
					newInput = $($newInputs[i]);

				if(oldInput.is(":hidden")) {
					newInput.hide();
				}
				else {
					newInput.val(oldInput.val());
				}
			}
			
		};
		
		var removeConditionBlock = function(containerId){
			$('#'+containerId).remove();
			$('#'+containerId+'_or_clause_div').remove();
			// TODO : Need to handle the scenario where the first condition is removed, leaving an 'OR' clause heading below it 			
		};

		// ------------------------------------------------------------
		var bindToggleViewportTooltip = function (container) {
			$('#' + container + '_inputselect').safeBind('change', function () {
				hideShowViewportTooltip(container, $(this).val());
			});
			$('#' + container + '_operatorselect').safeBind('change', function () {
				hideShowViewportTooltip(container, $('#' + container + '_inputselect').val() );
			});

			// Hide/Show tooltip in-case viewport is first item in list
			hideShowViewportTooltip(container, $('#' + container + '_inputselect').val());
		};

		// ------------------------------------------------------------
		var hideShowViewportTooltip = function (container, value) {
			var operatorSelect = $('#' + container + '_operatorselect').val();
			if (value === 'dom.viewport_height' && typeof hideFilter[operatorSelect] === 'undefined') {
				$('#' + container + '_viewport_height_tooltip').css('display', 'inline-block');
				$('#' + container + '_viewport_width_tooltip').hide();
			} else if (value === 'dom.viewport_width' && typeof hideFilter[operatorSelect] === 'undefined') {
				$('#' + container + '_viewport_width_tooltip').css('display', 'inline-block');
				$('#' + container + '_viewport_height_tooltip').hide();
			} else {
				$('#' + container + '_viewport_height_tooltip').hide();
				$('#' + container + '_viewport_width_tooltip').hide();
			}
		};

		var _editEventRuleDialog = function(erId, callback){
			var container = 'eventrules_dialog_addmore',
				$containerEl = $('#'+container);

			$containerEl.html('');
			$containerEl.append('<div id="eventrules_dialog_error" class="ui-state-error ui-corner-all padded" style="display:none"></div>');
			$containerEl.append('<div id="'+container+'_pane"></div>');
			$containerEl.append('<div style="margin-top:10px"><button class="config_button_nomargin" id="'+container+'_button_addorcondition" type="button">'+localize.t('tiq.rules.add_or_condition')+'</button></div>');

	        $('#dialog').dialog('destroy');
	        $('#dialog').show();
			$('#eventrules_dialog_addmore').dialog({
				autoOpen: true,
				height: 'auto',
				width: 840,
				modal: true,
				closeOnEscape: true,
				closeText: '',
				draggable: true,
				resizable: false,
				position: ['center',110],
				title: localize.t('tiq.ext.tev_title'),
				buttons: [
					{
						text: localize.t('tiq.dialog.button.apply'),
						id: "eventrules_dialog_addmore_applyBtn",
						class: 'nav-btn',
						click: function() {
							if(validation(container)){

								$(this).dialog("close");

								processApply();

								// utui.validation.runValidationOnAllTabs();
							}
						}
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						id: 'eventrules_dialog_addmore_cancelBtn',
						class: 'nav-btn',
						style: 'float:left; margin-left: 12px',
						click: function() {
							$(this).dialog('close');
						}
					}
				],
				close: function() {}
			});
			$('#'+container+'_button_addorcondition').button().click(function(){addOrItem(container)});

			var eventRule = utui.customizations_template[100039].dataModelMgr.getEventInLRformat(erId);
			var sizeOfEventRule = utui.util.sizeOf(eventRule, function(key){return !isNaN(key);});

			$('#eventrules_dialog_addmore').dialog('option', 'title', localize.t('tiq.ext.event') + ' ' + utui.util.safeEscape(eventRule.title));
			$('#eventrules_dialog_addmore').append('<input type="hidden" id="eventrule_id" name="eventrule_id" value="'+eventRule.id+'" />')
			$('#eventrules_dialog_addmore_title').val(eventRule.title);

			for(var i = 0; i < sizeOfEventRule; i++){
			    var c = addOrItem('eventrules_dialog_addmore');

			    $('#'+c+'_inputselect').val(eventRule[i]['source_0']);
			    $('#'+c+'_operatorselect').val(eventRule[i]['filtertype_0']);
			    $('#'+c+'_filter').val(eventRule[i]['filter_0']);

				if(typeof hideFilter[eventRule[i]['filtertype_0']] != 'undefined'){
					$('#' + c +'_filter').hide();					
				}

			    dsapi.convertSelectListToSelect2(c + '_inputselect', true);

			    // rb 01/11/15 - show fix-it message for first row on missing variable
			    if( $('#'+c+'_inputselect').select2('val') === '' ) {
			        showRowErrorMsg(c + '_validation', eventRule[i]['source_0'] );
			    }

			    $('select[id="' + c + '_operatorselect"]').select2();
			    hideShowViewportTooltip(c, eventRule[i]['source_0']);

			    var orObj = utui.util.getVars(eventRule[i]), // Each OR ob ject can contain multiple AND conditions
			        sizeOfOrObj = utui.util.sizeOf(orObj),
			        numOfRows = sizeOfOrObj / 3; // Number of conditions

			    for(var j = 1; j < numOfRows; j++) {
			        var c2 = addAndItem(c);
			        $('#'+c2+'_inputselect').val(eventRule[i]['source_' + j]);
			        $('#'+c2+'_operatorselect').val(eventRule[i]['filtertype_' + j]);
			        $('#'+c2+'_filter').val(eventRule[i]['filter_' + j]);

					if(typeof hideFilter[eventRule[i]['filtertype_' + j]] != 'undefined'){
						$('#' + c2 +'_filter').hide();
					}

			        dsapi.convertSelectListToSelect2(c2 + '_inputselect', true);

			        $('select[id="' + c2 + '_operatorselect"]').select2();
			        hideShowViewportTooltip(c2, eventRule[i]['source_' + j]);
			    }
			}

		};

		var isInputFieldValid = function(id) {
		    var rowId = id.replace('_inputselect', '_validation');

		    if($('#'+id).select2('val') === '') {
		        $('#'+rowId).slideDown();
		        return false;
		    }
		    else {
		        $('#'+rowId).hide();
		        return true;
		    }
		};

		var isAllInputFieldsValid = function() {
		    var $inputCollection = $('#eventrules_dialog_addmore :input[id*="_inputselect"]'),
		        valid = true,
		        rowId,
		        id;

		    for (var i = 0; i < $inputCollection.length; i++) {
		        id = $($inputCollection[i]).attr('id');
		        rowId = id.replace('_inputselect', '_validation');

		        if(!isInputFieldValid(id)) {
		            showRowErrorMsg(rowId);
		            valid = false;
		        };
		    };

		    return valid;
		};

		var validation = function(container){
		    $('#eventrules_dialog_error').hide();

			var $conditions = $('#eventrules_dialog_addmore :input[id*="_filter"]'),
				$visibleInputElements = $conditions.filter(':visible'),
				$hiddenInputElements = $conditions.filter(':hidden')

			if(!isAllInputFieldsValid()) {
				$('#eventrules_dialog_error').html(localize.t('tiq.validation.message.declare_input_fields')).show();
				return false;
			}


			for(var i in utui.util.getVars($visibleInputElements)){
				if(typeof $visibleInputElements[i].id!='undefined'){
					var filter = $('#'+$visibleInputElements[i].id).val().trim(); //trim fields for any trailing spaces
					$('#'+$visibleInputElements[i].id).val(filter);

					if(filter === ''){
						$('#eventrules_dialog_error').html(localize.t('tiq.rules.error.filter_cannot_be_blank')).show();
						$('#'+$visibleInputElements[i].id).focus();
						return false;
					}
					// Verify regular expression syntax
					else if ($($("select.eventrule_operatorselect").get(i)).val() === "regular_expression") {
						var errorMsg = utui.util.validateRegularExpressionSyntax(filter);
						if (errorMsg) {
							$('#eventrules_dialog_error').html(errorMsg).show();
							$('#'+$visibleInputElements[i].id).focus();
							return false;
						}
					}
				}
			}

			var $hiddenInputElements = $conditions.filter(':hidden');
			for(var i in utui.util.getVars($hiddenInputElements)){
				if(typeof $hiddenInputElements[i].id!='undefined'){
					$('#'+$hiddenInputElements[i].id).val('');
				}
			}

		    return true;
		};
		// --------------------------------------------------------

		var getRowErrorMsg = function(missingVarName) {
			if(missingVarName) {
				return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.missing_variable', { datasource: missingVarName });
			}
			return '<i class="icon-warning-sign" style="color:orange;"></i> '+localize.t('tiq.validation.message.select_variable');
		};
		// ------------------------------------------------------------
		var showRowErrorMsg = function(id, missingVarName) {
	        var message = getRowErrorMsg(missingVarName);
			$('#'+id).html( message ).show();
		};
		// ------------------------------------------------------------
		var hideRowErrorMsg = function(id) {
			$('#'+id).hide();
		};

		// ------------------------------------------------------------
		var addOrItem = function (container) {
			var containerOrig = container,
				bShowOrDivider = $("#" + containerOrig + "_pane").children().length > 0,
				v = '',
				self = this;

			container += '_' + utui.util.getContainerId();
			if (bShowOrDivider) {
				v += '<div id="' + container + '_pane_or_clause_div" style="margin-bottom:4px; margin-left:5px; margin-top:4px;width:100%;clear:both;">' + localize.t('tiq.rules.or') + ' </div>';
			}

			v += '<div class="customization_div ui-widget-content eventrule_orItem" id="' + container + '_pane">';
			v += '  <div id="'+container+'_validation" class="js-validation-msg bg-warning eventrule-row-validation-container">'+getRowErrorMsg()+'</div>';
			v += '  <div style="position:relative; clear:both;">';
			v += '    <a class="dropdown_button"><b class="caret"></b></a>';
			v += '    <div class="customization_item" style="float:left">' + getInputSelect(container) + '</div>';
			v += '    <div class="customization_item" style="float:left">' + getOperatorSelect(container) + '</div>';
			v += '    <div class="customization_item"><input id="' + container + '_filter" type="text" size="40" value="" class="imNoQuote"></div>';
			v += '    <div class="customization_item">';
			v += '        <a href="#" title="' + utui.tooltip.customizations.viewport_height + '" id="' + container + '_viewport_height_tooltip" class="icon-question-sign"></a>';
			v += '        <a href="#" title="' + utui.tooltip.customizations.viewport_width + '" id="' + container + '_viewport_width_tooltip" class="icon-question-sign"></a>';
			v += '    </div>';
			v += '    <div class="customization_item">';
			v += '        <a href="#" param="' + container + '" class="action_loadrules_addAndItem ui-state-default ui-corner-all" style="margin-top:3px;margin-right:5px;position:relative; float:left">';
			v += '            <span class="ui-icon ui-icon-plus" title="' + utui.tooltip.customizations.add + '" id="' + container + '_add_tooltip"></span>';
			v += '        </a>';
			v += '    </div>';
			v += '  </div>';
			v += '</div>';

			$('#' + containerOrig + '_pane').append(v);
			$('#' + container + '_filter').focus();

			// the drop down button is added, but it doesn't do anything yet, initialize it
			initDropDownButton($('#' + container + '_pane').find(".dropdown_button"), container + '_pane');

			dsapi.convertSelectListToSelect2(container + '_inputselect');
			$('select[id="' + container + '_operatorselect"]').select2();

			bindToggleViewportTooltip(container);

			var tooltipObj = {};
			tooltipObj[container + '_add_tooltip'] = { gravity: 'n' };
			tooltipObj[container + '_remove_tooltip'] = { gravity: 'n' };
			tooltipObj[container + '_viewport_height_tooltip'] = { gravity: 'n' };
			tooltipObj[container + '_viewport_width_tooltip'] = { gravity: 'n' };
			utui.util.addTooltip(tooltipObj);

			$('#'+container+'_inputselect').on('change', function() {
				$('#'+container+'_validation').slideUp();
			});

			return container;
		};
		
		// ------------------------------------------------------------		
		var addAndItem = function (container) {
			var containerOrig = container,
				v = '';

			container += '_' + utui.util.getContainerId();
			v += '  <div id="'+container+'_validation" class="js-validation-msg bg-warning eventrule-row-validation-container">'+getRowErrorMsg()+'</div>';
			v += '  <div style="position:relative; clear:both;">';
			v += '<div class="customization_div" id="' + container + '_pane" style="clear:both"><span style="float:left;margin-left:5px;width:30px;margin-top:4px;">' + localize.t('tiq.ext.and') + '</span>';
			v += '  <div class="customization_item" style="float:left">' + getInputSelect(container) + '</div>';
			v += '  <div class="customization_item" style="float:left">' + getOperatorSelect(container) + '</div>';
			v += '  <div class="customization_item"><input id="' + container + '_filter" type="text" size="50" value="" class="imNoQuote"></div>';
			v += '  <div class="customization_item">';
			v += '      <a href="#" title="' + utui.tooltip.customizations.viewport_height + '" id="' + container + '_viewport_height_tooltip" class="icon-question-sign"></a>';
			v += '      <a href="#" title="' + utui.tooltip.customizations.viewport_width + '" id="' + container + '_viewport_width_tooltip" class="icon-question-sign"></a>';
			v += '  </div>';

			v += '  <div class="customization_item">';
			v += '      <a href="#" param="' + containerOrig + '" class="action_loadrules_addAndItem ui-state-default ui-corner-all" style="margin-top:3px;margin-right:5px;position:relative; float:left">';
			v += '          <span class="ui-icon ui-icon-plus" title="' + utui.tooltip.customizations.add + '" id="' + container + '_add_tooltip"></span>';
			v += '      </a>';
			v += '      <a href="#" param="' + container + '_pane" class="action_loadrules_removeItem ui-state-default ui-corner-all" style="margin-top:3px;position:relative; float:left">';
			v += '          <span class="ui-icon ui-icon-minus" title="' + utui.tooltip.customizations.remove + '" id="' + container + '_remove_tooltip"></span>';
			v += '      </a>';
			v += '  </div>';
			v += '</div>';
			v += '</div>';

			$('#' + containerOrig + '_pane').append(v);
			$('#' + container + '_filter').focus();

			dsapi.convertSelectListToSelect2(container + '_inputselect');
			$('select[id="' + container + '_operatorselect"]').select2();
			bindToggleViewportTooltip(container);

			var tooltipObj = {};
			tooltipObj[container + '_add_tooltip'] = { gravity: 'n' };
			tooltipObj[container + '_remove_tooltip'] = { gravity: 'n' };
			tooltipObj[container + '_viewport_height_tooltip'] = { gravity: 'n' };
			tooltipObj[container + '_viewport_width_tooltip'] = { gravity: 'n' };
			utui.util.addTooltip(tooltipObj);

			$('#'+container+'_inputselect').on('change', function() {
				$('#'+container+'_validation').slideUp();
			});

			return container;
		};
		// ------------------------------------------------------------

		var getInputSelect = function(container){
			var selectItems = getInputsProd();

			var content = '<select id="'+container+'_inputselect" class="eventrule_inputselect select2 variableSelect" data-placeholder="'+localize.t('tiq.datasources.select_a_datasource')+'" data-list-type="loadrules">';
			content += '<option selected></option>';
			_.each(selectItems, function (selectItems, key) {
				// sort by name
				var sortedVariables = _.sortBy(selectItems, function (option) {
					return option.name.toLowerCase();
				});

				// append group identifier
				content += '<optgroup label="' + dsapi.getDataSourceTypeName(key) + '" data-type="' + key + '">';

				_.each(sortedVariables, function(option) {
					// append the option html
					content += $('<option/>')
						.text(_.unescape(option.name))
						.val(_.unescape(option.value))
						.attr('data-type', option.type)[0].outerHTML;
				});
			});
			content += '</select>';
			return content;
		};

		// ------------------------------------------------------------
		var getInputsProd = function(){
	        var variables = new Array();

	        for(var i in utui.util.getVars(utui.config.defItems,2)){
		        variables.push({
			        name: utui.config.defItems[i],
			        value: i,
			        type: 'dom'
		        });
	        }

		    var sort = utui.util.getVars(utui.data.define,4,'name');
		    for(var i in utui.util.getVars(sort,1)){
			    var ds = sort[i];
			    var val = ds.type + '.' + _.escape(ds.name),
				    name =  (ds.title) ? utui.util.safeEscape(ds.title) : utui.util.safeEscape(ds.name),
				    type = ds.type,
				    hideType = false;

			    // If AudienceStream data source use origin_type instead of type
			    if (ds.imported && ds.imported === utui.profile.import.AUDIENCE_STREAM) {
				    if (ds.context !== 'visitor') {
				        val = ds.type + '.' + ds.context + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				    }
				    else {
					    val = ds.type + '.' + ds.settings.origin_type + '.' + ds.settings.origin_id;
				    }
				    type = ds.settings.origin_type;
				    if (type === 'dates') {
					    hideType = true;
				    }
			    }

			    // Remove audience stream date types
			    if (!hideType) {
				    variables.push({
					    name: name,
					    value: val,
					    type: type
				    });
			    }
		    }

	        var customizationOutputs = {};
	        for(var i in utui.util.getVars(utui.data.customizations)){
	            if(typeof utui.data.customizations[i].output != 'undefined'){
	                var a = utui.data.customizations[i].output.split(',');
	                for(var b=0;b<a.length;b++){
	                	if ( utui.define.isInvalidVariableName(a[b]) ) { continue; }
	                    customizationOutputs[a[b]] = utui.data.customizations[i].title;
	                }
	            }
	        }

		    for(var i in utui.util.getVars(customizationOutputs,2)){
			    if (customizationOutputs[i]) {
				    variables.push({
					    name: i,
					    value: i,
					    type: customizationOutputs[i]
				    });
			    }
			    else {
				    variables.push({
					    name: i,
					    value: i,
					    type: ""
				    });
			    }
		    }

		    // sort and group the options by type then sort
		    // this will sort the groups in alphabetical order with items within groups in order too
		    var groupedOptions = _.groupBy(_.sortBy(variables, function (option) {
			    var optionType = option.type.toLowerCase();
			    return (optionType === 'dom') ? -1 : optionType;
		    }), 'type');

		    return groupedOptions;
		};

		// ------------------------------------------------------------
		var getOperators = function(container){

			var operatorItemsArr = new Array();

			for(var i in utui.util.getVars(utui.config.defOperators,2)){
				operatorItemsArr.push(new SelectItem(utui.config.defOperators[i], i));
			}

			return operatorItemsArr;
		};

		// ------------------------------------------------------------
		var getOperatorSelect = function(container){

			var selectItems = getOperators();

			var content = '<select id="'+container+'_operatorselect" class="eventrule_operatorselect" onchange="utui.customizations_template[100039].evtBldrDialog.operatorSelectHandler(\''+container+'\')">';
			for(var i=0; i < selectItems.length; i++) {
				content += '<option value="' + selectItems[i].value + '">' + _.escape(selectItems[i].name) + '</option>';
			}
			content += '</select>';
			return content;
		};
		// ------------------------------------------------------------
		var _operatorSelectHandler = function(container){

			var sel = $('#'+container+'_operatorselect :selected').val();

			if(typeof hideFilter[sel]!='undefined'){
				$('#'+container+'_filter').hide();
			}else{
				$('#'+container+'_filter').show();
			}
		};

		// ------------------------------------------------------------
		var processApply = function(){
			var eventRuleId =  $('#eventrule_id').val();
			
			var inputElements = $('#eventrules_dialog_addmore :input'),
				orClauses = [],
				andClauses = {};

			for(var i in utui.util.getVars(inputElements)){
				if(typeof inputElements[i].type != 'undefined' && (inputElements[i].type == 'text' || inputElements[i].type.indexOf('select') == 0)){
					if(/^eventrules_dialog_addmore_(\d+)_(\d+)_filter/.test(inputElements[i].id)){
						if(typeof andClauses[RegExp.$1] == 'undefined')andClauses[RegExp.$1] = [];
						andClauses[RegExp.$1].push(RegExp.$2);
					}else if(/^eventrules_dialog_addmore_(\d+)_filter/.test(inputElements[i].id)){
						orClauses.push(RegExp.$1);
					}
				}
			}

			var obj = {};

			var filterId = 0;
			for(var i=0;i<orClauses.length;i++){
				obj[filterId] = {}
				obj[filterId]['input_0'] = $('#eventrules_dialog_addmore_'+orClauses[i]+'_inputselect :selected').val();
				obj[filterId]['operator_0'] = $('#eventrules_dialog_addmore_'+orClauses[i]+'_operatorselect :selected').val();
				obj[filterId]['filter_0'] = $('#eventrules_dialog_addmore_'+orClauses[i]+'_filter').val();

				if(typeof andClauses[orClauses[i]] != 'undefined'){
					var filterIdSub = 1;
					for(var j=0;j<andClauses[orClauses[i]].length;j++){
						obj[filterId]['input_'+filterIdSub] = $('#eventrules_dialog_addmore_'+orClauses[i]+'_'+andClauses[orClauses[i]][j]+'_inputselect :selected').val();
						obj[filterId]['operator_'+filterIdSub] = $('#eventrules_dialog_addmore_'+orClauses[i]+'_'+andClauses[orClauses[i]][j]+'_operatorselect :selected').val();
						obj[filterId]['filter_'+filterIdSub] = $('#eventrules_dialog_addmore_'+orClauses[i]+'_'+andClauses[orClauses[i]][j]+'_filter').val();
						filterIdSub++;
					}
				}
				filterId++;
			}

			var eventRule = utui.customizations_template[100039].dataModelMgr.getEventRule(eventRuleId);
			utui.customizations_template[100039].dataModelMgr.setNewRulesFromLRObj(eventRule,obj);			
			utui.customizations_template[100039].dataModelMgr.setEventRule(eventRule);
			utui.customizations_template[100039].evtDetailBlock.refreshOpenAccordionContents();
		};




		var _setContainer = function(container){
			extContainerId = container;
		};

		var _public = {
			editEventRuleDialog : _editEventRuleDialog,
			operatorSelectHandler : _operatorSelectHandler,
			setContainer : _setContainer
		};

		return _public;

	}(),
	// ------------------------------------------------------------
	// Event Detail Accordion : 
	// Renders all event rules in an accordion. Each event rule 
	// can be edited using the functionality provided by the 
	// evtBldrDialog
	// ------------------------------------------------------------

	evtDetailBlock : function(){
		var extContainerId,
			evtDtlContainer,
			lastOpeneventRuleId;
		
		// ------------------------------------------------------------
		var _renderAllEventRules = function(allEventRules) {
			_.each(_.sortBy(allEventRules,function(er){return er.title}),function(eventRule){
				render(eventRule);
			});
			updateAccordion();
		};

		// ------------------------------------------------------------
		var render = function(eventRule) {
			var domId = 'evt_' + extContainerId + '_' + eventRule.id,
				content = '';
			
	        content += '<div id="'+domId+'" data-id="' + eventRule.id + '" class="eventrules_container">';
			content += '<h5><a href="#" id="'+domId+'_accordion" class="accordion-title">';
			content += '	<div class="eventrule_container_title">'+eventRule.title+'</div>';
			content += '	<div class="eventrule_container_detail">tealium_event="'+eventRule.event_id+'"</div>';
			content += '	<div class="eventrule_container_status">'+getCondState(eventRule)+'</div>';
			content += '</a></h5>';
			content += '  <div class="accordionItemContent"></div>';
			content += '</div>';

			$('#' + evtDtlContainer).append(content);
	    };

		var getCondState = function(eventRule){
			var sizeOfRuleObj = utui.util.sizeOf(eventRule.getLRFormatObj(), function (key) { return !isNaN(key) });
			if (sizeOfRuleObj === 0){
				return localize.t('tiq.ext.not_set');
			} else {
				return localize.t('tiq.ext.set_state');
			}
		};
		// ------------------------------------------------------------
		var canUserModify = function(eventrule) {
			// Place holder for now... probably need some kind of locking			
			return true;
		}
	    // -------------------------------------------------
	    // Constructor
	    // @return
	    var constructAccordionContents = function(container, eventrule, callback) {
	    	var content = ''
	    		canModify = canUserModify(eventrule);	// Resource lock check

	        /*
	         * Event rules
	         */
			content += '    <div class="accordion-container slide">';
			content += '        <div class="main-container">';
			content += '            <div class="main-header"></div>';
			content += '            <div class="main-body" style="padding-bottom:12px">';
			content += '              <div id="'+container+'_eventRuleConditions" class="contentSection"></div>';
			content += '            </div>';
			content += '        </div>';
			content += '    </div>'; //  end accordion-container

			$('#'+container).find('.accordionItemContent').html(content);

			// Probably not needed..
			updateItemHeader(eventrule);

			// Render the actual conditions.. 
			$('#'+container+'_eventRuleConditions').html( eventRuleConditions(eventrule) );


			bindUI(eventrule);

	        if(callback) callback();
	    };

	    // -------------------------------------------------
	    // Deconstructor
	    // @return
	    var deconstructAccordionContents = function(container) {
	        // _saveTemplateData(extId);

	        // Clear DOM
	        $('#'+container).find('.accordionItemContent').empty();
	    };

		// ------------------------------------------------------------
		var _refreshOpenAccordionContents = function(){
			deconstructAccordionContents(lastOpeneventRuleId);
			var eventRuleObject = utui.customizations_template[100039].dataModelMgr.getEventRuleByContainerId(lastOpeneventRuleId);
			constructAccordionContents(lastOpeneventRuleId, eventRuleObject, function () {
				$('#'+lastOpeneventRuleId).find('.accordion-container').slideDown(300);
			});

		};

		// ------------------------------------------------------------
		var updateItemHeader = function(eventRule) {
			var $headerNode = $('#evt_' + extContainerId + '_' + eventRule.id);
			
			$headerNode.find('.eventrule_container_title').html(eventRule.title);
			$headerNode.find('.eventrule_container_detail').html('tealium_event="'+eventRule.event_id+'"');
			$headerNode.find('.eventrule_container_status').html(getCondState(eventRule));
		};

		// ------------------------------------------------------------
	    var bindUI = function(eventrule) {
	        //Enable toggle button if the object is editable
	        if(isEditable(eventrule) ) {
				$('#'+extContainerId+'_editEventRule').on('click',function(event) {
					event.stopImmediatePropagation();
					if (!$(this).hasClass("ui-state-disabled")) {
						utui.customizations_template[100039].evtBldrDialog.editEventRuleDialog(eventrule.id);
					}
				});

			}
		};

		// ------------------------------------------------------------
		var isEditable = function(eventrule){
			// If imported, make editor read only
			if(exapi.isImported(extContainerId)) {
				return false;
			} else {
				return true;
			}
			
		};

		var eventHandler = {
	        // Accordion Outer Shell
	        // -------------------------------------------------
	        onAccordionHeaderClick : function(e) {
	        	var $content = $('#' + evtDtlContainer);
	            var i = $content.find('h5').index(this),
	                erId = $(this).closest('.eventrules_container').attr('data-id');

	            $content.accordion('activate', i); // Triggers onAccordionChange 

	            if(erId === 'all') return;

				// Going to need something here... 
				// validateModel(erId);
				// validateView(erId);

	            return false;
	        },
	        // -------------------------------------------------
	        onAccordionChange : function(e, ui) {
	            e.stopImmediatePropagation();

	            var eventRuleObject,
	                containerId;

	            var accordionCollection = $('#' + evtDtlContainer).children(),
	                openAccordionSortPosition = ui.options.active;

	            /*
	             * Deconstruct old accordion
	             */
	            if(!$.isEmptyObject(lastOpeneventRuleId)) {
	                deconstructAccordionContents(lastOpeneventRuleId);
	            }

	            /*
	             * Construct new accordion
	             */
	            if (typeof openAccordionSortPosition === 'number') {
	                containerId = $(accordionCollection[openAccordionSortPosition]).attr('id');					
					eventRuleObject = utui.customizations_template[100039].dataModelMgr.getEventRuleByContainerId(containerId);

	                if (containerId) {
	                    // Animate accordion to slide down after constructing contents
	                    constructAccordionContents(containerId, eventRuleObject, function () {
	                        $('#'+containerId).find('.accordion-container').slideDown(300);
	                    });
						lastOpeneventRuleId = containerId;
	                }
	            }
	        }
		}

		// ------------------------------------------------------------
		var eventRuleConditions = function(eventrule) {
			var v = '',
				container = utui.customizations_template[100039].dataModelMgr.getContainer(),
				canModify = canUserModify(eventrule) && isEditable(eventrule);

			// Generate the pretty rules display
			var lrFormatObj = eventrule.getLRFormatObj();
			var rules = getEventRuleDisplay(lrFormatObj);

			v += '        <div class="contentSectionTitle">';
			v += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
			v += '            <div class="titleText">' + localize.t('tiq.ext.event_rule_configuration') + '</div>';
			if (canModify) {
				v += '            <div class="titleButton"><span id="' + extContainerId + '_editEventRule" class="' + ( !canModify ? 'ui-state-disabled ' : ' ') + 'btn btn-mini actionEditRules i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.rules.edit') + '</span></div>';
			}
			v += '        </div>';

			// Add some specific styles for this block
			v += '<style type="text/css">';
			v += '.tiq_er_cond_code{font-family: \'Courier New\', Courier, monospace;color:#666666;font-weight: bold;padding-left:5px}';
			v += '</style>';

			var sizeOfRuleObj = utui.util.sizeOf(lrFormatObj, function (key) {return !isNaN(key)});
			var condTxt;
			var evtVarTxt = '<span class="tiq_er_cond_code">tealium_event="' + eventrule.event_id + '"</span>';
			if (sizeOfRuleObj === 0){
				condTxt = localize.t('tiq.ext.add_cond_to_set') + evtVarTxt;
			}else{
				condTxt = localize.t('tiq.ext.cond_sets') + evtVarTxt + localize.t('tiq.ext.when_cond_met');
			}
			// eventrule Rule Conditions Body
			v += '        <div class="contentSectionBody scrollSection">';
			v += '          <div class="contentBlock">';
			v += '            <div class="contentBlockTitle" style="margin-bottom:10px;">' + condTxt + '</div>';
			v += '            <div class="contentBlockTitle">' + localize.t('tiq.rules.conditions') + '</div>';
			v += '            <div class="LRconditionsBlock contentSectionBodyContent LRsConditions">'+rules+'</div>';
			v += '          </div>';
			v += '        </div>'; // end contentSectionBody

			return v;
		};

		// ------------------------------------------------------------
		var updateAccordion = function(lastActiveFlag, setEventRuleToOpen){
			var $eventRulesContent = $('#' + evtDtlContainer),
				isContainerOpen = function() {
			        var accordion = $('#' + evtDtlContainer).accordion('option', 'active');

			        if( typeof accordion === 'number' ) {
			            return true;
			        }
			        return false;
				},
				containerId;

			// ------------------------------
			$eventRulesContent.accordion('destroy').accordion({
				header: 'h5',
				active: false,
				autoHeight: false,
				animated: false,
				clearStyle: true,
				collapsible: true,
	            change: eventHandler.onAccordionChange,
	            event: '' // We're clearing the event in order to allow our extension validation to control the close
			});

			if(lastActiveFlag){
				var a = $('#' + evtDtlContainer + ' > div').length;
				$eventRulesContent.accordion('activate', a - 1);
			}

			if(setEventRuleToOpen) {
				containerId = setEventRuleToOpen;
				$('#'+containerId).trigger('click');
			}

	        $('#' + evtDtlContainer).find('h5').off().on('click', eventHandler.onAccordionHeaderClick);

	    };

		// ------------------------------------------------------------
		var _setContainer = function(container){
			extContainerId = container;
			evtDtlContainer = container + '_evtcontainer'
		};


		// ------------------------------------------------------------
		var getEventRuleDisplay = function(ruleObj) {
			var getVars = utui.util.getVars,
				triggerKey = 'source_';

	        function constructEventRuleConditions(obj) {
				var eventRuleItem = '';
				var eventRuleConditions = '';

				// Get the number OR clauses in the rule
				var sizeOfRuleObj = utui.util.sizeOf(ruleObj, function (key) {
						return !isNaN(key)
					});

				for (var i = 0; i < sizeOfRuleObj; i++) {
					eventRuleItem = constructEventRuleItem(i); // Strings the AND conditions together
					eventRuleConditions += constructEventRuleORcondition(eventRuleItem);
				} //end forloop

				return eventRuleConditions;
			}

			function constructEventRuleORcondition(content, noRules) {
				var v = '';
				if(!noRules) {
					v += '    <div class="LRsORcondition">' + content + '</div>';
				} else {
					v += '    <div>' + content + '</div>';
				}
				return v;
			}

			function constructEventRuleItem(rule) {
				var ruleContent = '';
				var ruleFilterObj = {};
				var sourceName;

				for (var j in getVars(ruleObj[rule])) {

					if (j.indexOf(triggerKey) > -1) {
						var k = j.substring(triggerKey.length);

						ruleFilterObj[k] = {
							source: ruleObj[rule][j],
							filter: ruleObj[rule]['filter_' + k],
							operator: ruleObj[rule]['filtertype_' + k]
						};

						sourceName = dsapi.getVADataSourceDisplayName(ruleFilterObj[k].source);

						if (sourceName) {
							ruleContent += templateEventRuleItem(sourceName, ruleFilterObj[k].operator, ruleFilterObj[k].filter);
						} else {
							ruleContent += templateEventRuleItem(ruleFilterObj[k].source, ruleFilterObj[k].operator, ruleFilterObj[k].filter);
						}
					}
				}

				return ruleContent;
			}

	        function templateEventRuleItem(source, operator, filter, hasWarning) {
	            var v = '';
	            v += '<div class="LRsANDcondition">';
		        if (source) {
			        v += '  <div class="LRsSource">'+(hasWarning ? '<i class="icon-warning-sign"></i> ' : '')+utui.util.safeEscape(source)+'</div>';
		        }
	            else {
			        v += '  <div class="LRsSource"><span class="emptyValue"><i class="icon-warning-sign"></i> ' + localize.t('tiq.rules.audiencestream_attribute_no_assigned') + '</span></div>';
		        }
	            v += '  <div class="LRsCase">'+operator+'</div>';
	            v += '  <div class="LRsFilter">'+utui.util.safeEscape(filter)+'</div>';
	            v += '</div>';
	            return v;
	        }

			return constructEventRuleConditions(ruleObj);

		};



		var _public = {
			setContainer : _setContainer,
			renderAllEventRules : _renderAllEventRules,
			refreshOpenAccordionContents : _refreshOpenAccordionContents
		};

		return _public;
		

	}()
}

//Customization 100040 - JS Extension 3.0 - 2018
// -Support multiple target editing
// -Diff tool between targets
// -Ace editor support & CodeMirror deprecation
utui.customizations_template[100040] = {
	id: 100040,
	panelAceEditor: null,
	modalAceEditor: null,
    q4pColors : ["regal-rose-base","melon-mambo-base","rich-razzelberry-base","tempting-turquoise-base","old-olive-base","daffodil-delight-base","pumpkin-pie-base","tangerine-tango-base","real-red-base"],

    //------------------------------------------------------------------------------------------------------------------
    // Destructor function needed to destroy the worker threads created by the Ace editor
    //------------------------------------------------------------------------------------------------------------------
	destructor: function(){
		if (utui.customizations_template[100040].panelAceEditor){
			utui.customizations_template[100040].panelAceEditor.destroy();
		}
		if (utui.customizations_template[100040].modalAceEditor){
			utui.customizations_template[100040].modalAceEditor.destroy();
		}
		utui.customizations_template[100040].transientDataReset();
	},
    //------------------------------------------------------------------------------------------------------------------
    // Selective reset of the transient data that preserves secured code between extension editing sessions.
    //------------------------------------------------------------------------------------------------------------------
    transientDataReset: function(){
        if (utui.customizations_template[100040].transientData){
            _.each(utui.customizations_template[100040].transientData,function(td,ky){
                if (ky !== 'securedCode'){ // Preserve the secured code throughout the session.
                    delete utui.customizations_template[100040].transientData[ky];
                }
            });
        }
    },
	setExtId : function(id){
        utui.customizations_template[100040].transientData = utui.customizations_template[100040].transientData ? utui.customizations_template[100040].transientData : {};
        utui.customizations_template[100040].transientData.extId = id;
	},
	isReadOnly : function(){
		if (utui.permissions.canEditJavascriptExtensions()){
			if ( ! exapi.isImported(utui.customizations_template[100040].transientData.extId)){
				return false;
			}
		}
		return true;
	},

    //------------------------------------------------------------------------------------------------------------------
    // Selectively disable parts of the UI while allowing non mutational actions such as Diff tool
    //------------------------------------------------------------------------------------------------------------------
    delegateDisableAccordionInterface : function(extId){
		var $lockedContainers = $('#dmConditionContainer, .extension-scope-container, #customizations_'+extId+'_advExcDiv');
        // Add disabled events
        $lockedContainers.find('select, input, button, a').attr({
            'tabIndex':'-1',
            'disabled':''
        });

        // Set color of fields to appear disabled
        $lockedContainers.find('input').css('background','#f1f1f1');

        // Prevent all anchors from being clicked on if disabled attribute is bound to them
        $lockedContainers.find('a[onclick]').each(function(e) {
            $(this).data('onclick', this.onclick);

            this.onclick = function(event) {
                if($(this).attr('disabled')) {
                    return false;
                };

                $(this).data('onclick').call(this, event || window.event);
            };
        });

        // Lock the title field
		var titleInput = $('#customizations_'+extId+'_title');
        titleInput.attr({
            'tabIndex':'-1',
            'disabled':''
        }).css('background','#f1f1f1');

	},
    //------------------------------------------------------------------------------------------------------------------
    // Universal getter to provide access to the current extension object being edited
    //------------------------------------------------------------------------------------------------------------------
	getExtDataObj: function(){
        utui.customizations_template[100040].transientData = utui.customizations_template[100040].transientData ? utui.customizations_template[100040].transientData : {};

		if ( ! utui.customizations_template[100040].transientData.extId){
            var $el = $('#js-editpanel-container');
            var $container = $el.closest(".customize_container");
            utui.customizations_template[100040].transientData.extId = $container.attr("data-id");
		}

		return utui.data.customizations[utui.customizations_template[100040].transientData.extId];

	},
	//------------------------------------------------------------------------------------------------------------------
    // Utility method to transform the name of the snippet into a sha256 hash for use as a unique key.
	// 	-Uses a cache of generated names to reduce redundant calls to SHA256 code for keys we already know.
    //------------------------------------------------------------------------------------------------------------------
	getSnptHashKey: function(name){
        utui.customizations_template[100040].transientData = utui.customizations_template[100040].transientData ? utui.customizations_template[100040].transientData : {};
        utui.customizations_template[100040].transientData.hashCache = utui.customizations_template[100040].transientData.hashCache ? utui.customizations_template[100040].transientData.hashCache : {};

        name = name.trim();
        if ( ! utui.customizations_template[100040].transientData.hashCache[name]){
            utui.customizations_template[100040].transientData.hashCache[name] = CryptoJS.SHA256(name).toString();
		}
        return utui.customizations_template[100040].transientData.hashCache[name];
	},
	//------------------------------------------------------------------------------------------------------------------
    // Utility method to pretty up standard publish target names for display.
    //------------------------------------------------------------------------------------------------------------------
	capPubTarget: function(pt){
		if (pt === 'prod'){
			return 'Prod';
		} else if (pt === 'qa'){
			return 'QA';
		} else if (pt === 'dev'){
			return 'Dev'
		} else {
			return pt;
		}
	},
    //------------------------------------------------------------------------------------------------------------------
    // Sanitize & trim the draft name
    //------------------------------------------------------------------------------------------------------------------

    //------------------------------------------------------------------------------------------------------------------
    // Invoked during the save publish process to promote all snippets for a list of publish targets.
    //------------------------------------------------------------------------------------------------------------------
    promoteAllSnippetsForTargetList : function(extId, targetList){
        var utuiDate = utui.util.date.getUtuiStringFromDate(new Date());
        var promotedSnippetChanges = 0;
        var revertObject = {};
		utui.data.customizations[extId].codeDevData.promotedSnippets = utui.data.customizations[extId].codeDevData.promotedSnippets || {}; // Revive objects lost in the save.

		function secureExtForRevert (extId){
            if (typeof revertObject[extId] === 'undefined'){
                revertObject[extId] = {
                    promotedSnippets : JSON.stringify(utui.data.customizations[extId].codeDevData.promotedSnippets),
                    queue4Publish : JSON.stringify(utui.data.customizations[extId].codeDevData.queue4Publish)
                };
            }
		}

		if (utui.data.customizations[extId].status === "active"){
            _.each(utui.data.customizations[extId].codeDevData.queue4Publish,function(q4pObj, snId){
                utui.data.customizations[extId].blockPubTargetsLogic = utui.config.customizationList[100040].blockPubTargetsLogic;
                q4pObj.targets.split(",").forEach(function(qtgt){
                    if (_.indexOf(targetList,qtgt) !== -1){
                    	secureExtForRevert(extId);
                        var snippet = utui.data.customizations[extId].codeDevData.draftSnippets[snId];
                        var ptId = utui.customizations_template[100040].getSnptHashKey(qtgt);
                        utui.data.customizations[extId].codeDevData.promotedSnippets[ptId] = {
                            name : qtgt,
                            code : snippet.code,
                            promotedBy : utui.login.email,
                            promotedDraftName : snippet.name,
                            promotedTimestamp : utuiDate
                        };
                        promotedSnippetChanges++;
                        // remove the promoted item from the queue object if this is not a libray
                        if ( ! utui.profile.import.isLibrary()) {
                            if (utui.data.customizations[extId].codeDevData.queue4Publish[snId]){
                                var newTargets = _.without(utui.data.customizations[extId].codeDevData.queue4Publish[snId].targets.split(','), qtgt);
                                if (newTargets.length > 0){
                                    utui.data.customizations[extId].codeDevData.queue4Publish[snId].targets = newTargets.join(',');
                                }else{
                                    delete utui.data.customizations[extId].codeDevData.queue4Publish[snId];
                                }
                            }
                        }

                    }
                });
            });
		} else {
			_.each(targetList,function(pTgt){
                var ptId = utui.customizations_template[100040].getSnptHashKey(pTgt);
                if (utui.data.customizations[extId].codeDevData.promotedSnippets[ptId]){
                    secureExtForRevert(extId);
                    delete utui.data.customizations[extId].codeDevData.promotedSnippets[ptId];
                    promotedSnippetChanges++;
				}
			});
		}

        // Publish the queue change event on if the extension is currently open with a snippet loaded.
        if (promotedSnippetChanges > 0 && utui.customizations_template[100040].transientData && utui.customizations_template[100040].transientData.currentSnippetID){
            utui.util.pubsub.publish(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE );
        }

        return revertObject;
    },
    //------------------------------------------------------------------------------------------------------------------
    // Logic to roll back snippet promotions from a failed publish.
    //------------------------------------------------------------------------------------------------------------------
	revertPromotedSnippetsOnFailure: function(revertObject){
		_.each(revertObject,function(extObjData,extId){
            utui.data.customizations[extId].codeDevData.promotedSnippets = JSON.parse(extObjData.promotedSnippets);
            utui.data.customizations[extId].codeDevData.queue4Publish = JSON.parse(extObjData.queue4Publish);
		});
        if (utui.customizations_template[100040].transientData && utui.customizations_template[100040].transientData.currentSnippetID){
            utui.util.pubsub.publish(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE );
        }
        utui.customizations.updateExtensionData(utui.customizations_template[100040].transientData.extId);
	},
    //------------------------------------------------------------------------------------------------------------------
    // Utility method return a list of all publish targets in an array.
    //------------------------------------------------------------------------------------------------------------------
    getPublishTargetsList : function(){
        var pubTargets = "prod,qa,dev";
        if (utui.data.settings.customTargets){
            pubTargets += "," + utui.data.settings.customTargets;
        }
        return pubTargets.split(',');
    },

    //------------------------------------------------------------------------------------------------------------------
    // API collection for maintaining the data layer of the extension.
    //------------------------------------------------------------------------------------------------------------------
	snippetDataAPI : {
		init : function(extObj){
			// Create the transient data cache for this instance of the extension.
			if (utui.customizations_template[100040].transientData){
				utui.customizations_template[100040].transientDataReset();
			} else {
				utui.customizations_template[100040].transientData = { };
			}
			utui.customizations_template[100040].transientData.extId = extObj._id;

			extObj.blockPubTargetsLogic = utui.config.customizationList[100040].blockPubTargetsLogic;

			if ( ! extObj.codeDevData){
				extObj.codeDevData = {
					draftSeq : 0,
					queueSeq : 0,
                    draftSnippets : {},
                    promotedSnippets : {},
					queue4Publish : {}
				};
				utui.customizations_template[100040].snippetDataAPI.updatePublishTargets(extObj);
			}
			// Restore mandatory objects dropped by profile save when empty
			_.each(['draftSnippets','promotedSnippets','queue4Publish'],function(mandatoryObj){
				if (typeof extObj.codeDevData[mandatoryObj] == 'undefined'){
                    extObj.codeDevData[mandatoryObj]= {};
				}
			});

			// Secure the draft snippets at load so that the user can restore back
			utui.customizations_template[100040].transientData.securedCode = utui.customizations_template[100040].transientData.securedCode ? utui.customizations_template[100040].transientData.securedCode : {};
			utui.customizations_template[100040].transientData.securedCode[extObj._id] = utui.customizations_template[100040].transientData.securedCode[extObj._id] ? utui.customizations_template[100040].transientData.securedCode[extObj._id] : {};

            _.each(extObj.codeDevData.draftSnippets,function(snippet,snId){
                utui.customizations_template[100040].transientData.securedCode[extObj._id][snId] = snippet.code;
            });

		},
		getCurrentSnippetName : function() {
			var csName = '';
			_.each(utui.customizations_template[100040].transientData.hashCache,function(sha256,name){
				if (utui.customizations_template[100040].transientData.currentSnippetID === sha256){
                    csName = name;
				}
			});
			return csName;
		},
		resetSecuredCode : function(snId) {
            var extObj = utui.customizations_template[100040].getExtDataObj();

			if (utui.customizations_template[100040].transientData.securedCode[extObj._id]){
				if (utui.customizations_template[100040].transientData.securedCode[extObj._id][snId] && extObj.codeDevData.draftSnippets[snId]){
	                extObj.codeDevData.draftSnippets[snId].code = utui.customizations_template[100040].transientData.securedCode[extObj._id][snId];
				}
			}
		},
        //------------------------------------------------------------------------------------------------------------------
        // Synchronize the the snippet data model with the actual publish targets in the profile. Creates and removes
		// publish target snippets in sync with the profile.
        //------------------------------------------------------------------------------------------------------------------
        updatePublishTargets : function(extObj){
            utui.customizations_template[100040].transientData.publishTargetKeys = [];
			var pubTargetChecklist = {};
			_.each(utui.customizations_template[100040].getPublishTargetsList(),function(target){
				var idHash = utui.customizations_template[100040].getSnptHashKey(target);
				if (extObj.codeDevData.promotedSnippets[idHash]){
                    utui.customizations_template[100040].transientData.publishTargetKeys.push({promoted:true,name:target,key:idHash});
				} else {
                    utui.customizations_template[100040].transientData.publishTargetKeys.push({promoted:false,name:target,key:idHash});
				}

				pubTargetChecklist[idHash] = target;
			});

		},
        //------------------------------------------------------------------------------------------------------------------
        // Validate a new snippet name to ensure that is not a publish target name.
        //------------------------------------------------------------------------------------------------------------------
		isIllegalSnippetName : function(snippetName) {
			var targetList = '^prod|^qa$|^dev$';
			if (utui.data.settings.customTargets){
				_.each(utui.data.settings.customTargets.split(','),function(target){
					targetList += '|^' + target.trim() + '$';
				});
			}
			var targetRgx = new RegExp(targetList,'i');

			if (targetRgx.test(snippetName)){
				return localize.t('tiq.ext.code_dev.illegal_snippet_name');
			} else {
				return null;
			}
		},
        //------------------------------------------------------------------------------------------------------------------
        // Draft snippet promotion
        //------------------------------------------------------------------------------------------------------------------
		promoteSnippet : function(sId,targets){
            var extObj = utui.customizations_template[100040].getExtDataObj();
            var utuiDate = utui.util.date.getUtuiStringFromDate(new Date());
            var snippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(sId);

            _.each(targets,function(pTarget){
            	var ptId = utui.customizations_template[100040].getSnptHashKey(pTarget);
                extObj.codeDevData.promotedSnippets[ptId] = {
                    name : pTarget,
                    code : snippet.code,
                    promotedBy : utui.login.email,
                    promotedDraftName : snippet.name,
                    promotedTimestamp : utuiDate
                }
                // remove the promoted item from the queue object if needed
				if (extObj.codeDevData.queue4Publish[sId]){
                    var newTargets = _.without(extObj.codeDevData.queue4Publish[sId].targets.split(','), pTarget);
					if (newTargets.length > 0){
                        extObj.codeDevData.queue4Publish[sId].targets = newTargets.join(',');
					}else{
                        delete extObj.codeDevData.queue4Publish[sId];
					}
				}
            });
            utui.profile.dirty = 1;
		},
        //------------------------------------------------------------------------------------------------------------------
        // New draft snippet factory.
        //------------------------------------------------------------------------------------------------------------------
		createDraftSnippet : function(snippetName){
			var extObj = utui.customizations_template[100040].getExtDataObj();

			if (! _.isString(snippetName)){
				extObj.codeDevData.draftSeq++;
				snippetName = localize.t('tiq.ext.code_dev.draft_prefix') + extObj.codeDevData.draftSeq;
			}

            var idHash = utui.customizations_template[100040].getSnptHashKey(snippetName);

			if ( _.isUndefined(extObj.codeDevData.draftSnippets[idHash])){
				var utuiDate = utui.util.date.getUtuiStringFromDate(new Date());

				extObj.codeDevData.draftSnippets[idHash] = {
					name : snippetName,
					code : utui.util.safeEscape(localize.t("tiq.ext.code_dev.dummy_js")), // Insert some dummy code to guide the user.
					updatedBy : utui.login.email,
					creationDate : utuiDate,
					updateDate : utuiDate
				}
				return idHash;
			}
		},

        //------------------------------------------------------------------------------------------------------------------
        // Delete a snippet from the data model and remove it from the publish queue if needed.
        //------------------------------------------------------------------------------------------------------------------
		deleteSnippet : function (sId){
			var extObj = utui.customizations_template[100040].getExtDataObj();


            utui.customizations_template[100040].snippetDataAPI.dequeSnippetFromPublish(sId);

			delete utui.customizations_template[100040].transientData.hashCache[ extObj.codeDevData.draftSnippets[sId].name ];
            delete extObj.codeDevData.draftSnippets[sId];

            var newDefaultSnippetId = utui.customizations_template[100040].snippetDataAPI.getDefaultDraftSnippetId();
            if (typeof newDefaultSnippetId == 'undefined'){
            	newDefaultSnippetId = utui.customizations_template[100040].snippetDataAPI.createDraftSnippet();
			}
            utui.customizations_template[100040].transientData.currentSnippetID = newDefaultSnippetId;
            utui.customizations_template[100040].editorPanel.navigationBlock.selectSnippetById(newDefaultSnippetId);
            utui.profile.dirty = 1;

            utui.util.pubsub.publish(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE );
            utui.util.pubsub.publish(utui.constants.code_dev_ext.SNIPPET_LIST_CHANGE);
		},

        getDefaultDraftSnippetId : function(){
            var draftSnippets = utui.customizations_template[100040].snippetDataAPI.getDraftSnippets();
            if (draftSnippets.length > 0) {
            	return utui.customizations_template[100040].getSnptHashKey(draftSnippets[0].name);
			}
		},

        //------------------------------------------------------------------------------------------------------------------
        // Create a new snippet from a copy
        //------------------------------------------------------------------------------------------------------------------
		cloneSnippet : function (oldName,newName){
            var oldId = utui.customizations_template[100040].getSnptHashKey(oldName);
            var newId = utui.customizations_template[100040].getSnptHashKey(newName);
			var extObj = utui.customizations_template[100040].getExtDataObj();
			var oldSnippet;

            if (extObj.codeDevData.draftSnippets[oldId]) {
                oldSnippet = extObj.codeDevData.draftSnippets[oldId];
            } else if (extObj.codeDevData.promotedSnippets[oldId]) {
                oldSnippet = extObj.codeDevData.promotedSnippets[oldId];
            }

            if(oldSnippet){
                var newSnippet = _.clone(oldSnippet);
                var utuiDate = utui.util.date.getUtuiStringFromDate(new Date());
                newSnippet.name = newName;
                newSnippet.updatedBy = utui.login.email;
                newSnippet.creationDate = utuiDate;
                newSnippet.updateDate = utuiDate;

                extObj.codeDevData.draftSnippets[newId] = newSnippet;

                return newId;

            }

		},

        //------------------------------------------------------------------------------------------------------------------
        // Locate a snippet when the hash id is known
        //------------------------------------------------------------------------------------------------------------------
		getSnippetById : function(sId){
			var extObj = utui.customizations_template[100040].getExtDataObj();

			return extObj.codeDevData.draftSnippets[sId] ? extObj.codeDevData.draftSnippets[sId] : extObj.codeDevData.promotedSnippets[sId];
		},

        //------------------------------------------------------------------------------------------------------------------
        // Convenience method to get the snippet data object that is currently loaded.
        //------------------------------------------------------------------------------------------------------------------
		getCurrentSnippet : function(){
            return utui.customizations_template[100040].snippetDataAPI.getSnippetById(utui.customizations_template[100040].transientData.currentSnippetID);
		},

        //------------------------------------------------------------------------------------------------------------------
        // Get a list of snippets that have been published in the correct prod,qa,dev sequence
        //------------------------------------------------------------------------------------------------------------------
		getPublishedSnippets : function(){
            var extObj = utui.customizations_template[100040].getExtDataObj(),
            	allPubTargetNames = utui.customizations_template[100040].getPublishTargetsList(),
				sortedPublishedSnippets = [];

            // Load the list with published snippets in the correct prod,qa,dev sequence
            _.each(allPubTargetNames ,function(name){
            	var snId = utui.customizations_template[100040].getSnptHashKey(name);
            	if (extObj.codeDevData.promotedSnippets[snId]) { // is it published?
                    sortedPublishedSnippets.push(extObj.codeDevData.promotedSnippets[snId]);
				}
			});

            return sortedPublishedSnippets;

		},

        //------------------------------------------------------------------------------------------------------------------
        // Convenience method to assert if a snippet id has been published
        //------------------------------------------------------------------------------------------------------------------
		isPublishedSnippet : function(sId){
            var extObj = utui.customizations_template[100040].getExtDataObj();
            for (var k in extObj.codeDevData.promotedSnippets) {
            	if (sId == k) {
            		return true;
				}
			}
			return false;
		},

        //------------------------------------------------------------------------------------------------------------------
        // Get all snippets that are not publish target snippets
        //------------------------------------------------------------------------------------------------------------------
		getDraftSnippets : function() {
            var extObj = utui.customizations_template[100040].getExtDataObj();
			var snippetList = _.toArray(extObj.codeDevData.draftSnippets);

			return (_.sortBy(snippetList, 'name'));
		},

        //------------------------------------------------------------------------------------------------------------------
        // Queue a snippet for publish to an array of targets
        //------------------------------------------------------------------------------------------------------------------
		queueSnippetForPublish : function(sId, targetListArray){
            var extObj = utui.customizations_template[100040].getExtDataObj();

            // Make sure the new targets aren't duplicated in multiple queue objects
            _.each(targetListArray,function(tgt){
                utui.customizations_template[100040].snippetDataAPI.removeTargetFromQueues(tgt,true);
			});

			if (extObj.codeDevData.queue4Publish[sId]){
				var newList = _.union(extObj.codeDevData.queue4Publish[sId].targets.split(','),targetListArray);
                extObj.codeDevData.queue4Publish[sId].targets = newList.join(',');
			} else {
				// Create a register of colors that are already in use so we don't get a duplicate.
				var qColors = {};
				_.each(extObj.codeDevData.queue4Publish,function(qObj,ky){
					qColors[qObj.color] = true;
				});
                extObj.codeDevData.queue4Publish[sId] = {};
                extObj.codeDevData.queue4Publish[sId].targets = targetListArray.join(',');
                extObj.codeDevData.queue4Publish[sId].queuedBy = utui.login.email;
                extObj.codeDevData.queue4Publish[sId].queuedTimestamp = utui.util.date.getUtuiStringFromDate(new Date());

				// Select a unique color that isn't in use yet , but give up after 10 tries (unlikely!)
				var maxTries = 0;
				do {
					extObj.codeDevData.queueSeq++;
					extObj.codeDevData.queue4Publish[sId].color = extObj.codeDevData.queueSeq % utui.customizations_template[100040].q4pColors.length;
					maxTries++; // safeguard against an infinite loop
				} while (qColors[extObj.codeDevData.queue4Publish[sId].color] && maxTries < 10);
			}

            // Update any tags scoped to this extension.
            exapi.resetScopedTagTimestamps(utui.customizations_template[100040].transientData.extId);

            utui.util.pubsub.publish(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE );
            utui.customizations.updateExtensionData(utui.customizations_template[100040].transientData.extId);

		},
		dequeSnippetFromPublish : function(sId){
            var extObj = utui.customizations_template[100040].getExtDataObj();
			delete extObj.codeDevData.queue4Publish[sId];
            utui.util.pubsub.publish(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE );
        },

        //------------------------------------------------------------------------------------------------------------------
        // Remove a publish target from all queue objects and clean up any empty queue objects.
        // suppressNotifications used if caller manages publish of queue change events
        //------------------------------------------------------------------------------------------------------------------
		removeTargetFromQueues : function(target,suppressNotifications){
            var extObj = utui.customizations_template[100040].getExtDataObj();
            var trashList = [];
            var isChanged = false;
			_.each(extObj.codeDevData.queue4Publish,function(qObj,sId){
				if (qObj.targets.indexOf(target) != -1) {
                    isChanged = true;
                    var nlst = _.without(qObj.targets.split(','), target);
                    if (nlst.length > 0){
                        extObj.codeDevData.queue4Publish[sId].targets = nlst.join(',');
					} else {
                        trashList.push(sId);
					}
				}
			})
			_.each(trashList,function(sId){
				delete extObj.codeDevData.queue4Publish[sId];
			});

            if (isChanged){
                if ( true !== suppressNotifications) {
                    utui.util.pubsub.publish(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE );
                }
            }
        }
		,
        //------------------------------------------------------------------------------------------------------------------
        // Get the queued 4 publish object for a given snippet id
        //------------------------------------------------------------------------------------------------------------------
		getQueue4PublishInfo : function(sId) {
			var extObj = utui.customizations_template[100040].getExtDataObj();

            return extObj.codeDevData.queue4Publish[sId];
		},

        //------------------------------------------------------------------------------------------------------------------
        // Update the JS code held by a snippet with new code from the editor.
        //------------------------------------------------------------------------------------------------------------------
		updateSnippetCode : function (sId,newCode){
			var extObj = utui.customizations_template[100040].getExtDataObj();
			extObj.codeDevData.draftSnippets[sId].code = utui.util.safeEscape(newCode);
		},

        //------------------------------------------------------------------------------------------------------------------
        // Convenience method to classify a snippet as a draft snippet (not publish target)
        //------------------------------------------------------------------------------------------------------------------
		isDraftSnippet : function  (sId) {
			var extObj = utui.customizations_template[100040].getExtDataObj();
			if (sId){
				return (_.isObject(extObj.codeDevData.draftSnippets[sId]));
			}

		},

        //------------------------------------------------------------------------------------------------------------------
        // Convenience method to look through the queued items and return the id of a snippet queued for publish to a
		// given target.
        //------------------------------------------------------------------------------------------------------------------
		isPubTargetQueued : function (pt){
			var extObj = utui.customizations_template[100040].getExtDataObj();
			var queueInfo = null;
			_.each(extObj.codeDevData.queue4Publish,function(q4pObj,sId){
				if (q4pObj.targets.indexOf(pt) != -1){
                    queueInfo = { id : sId, color : q4pObj.color, queuedBy: q4pObj.queuedBy, queuedTimestamp : q4pObj.queuedTimestamp};
				}
			});

			return queueInfo;
		},

        //------------------------------------------------------------------------------------------------------------------
        // Handler for any change to the code in the editor that updates the data model and needs to be recorded.
        //------------------------------------------------------------------------------------------------------------------
		onSnippetDataDirty : function(){
            var sId = utui.customizations_template[100040].transientData.currentSnippetID;
			var extObj = utui.customizations_template[100040].getExtDataObj();


            if (utui.customizations_template[100040].snippetDataAPI.isDraftSnippet(sId)){
				try {
					if (extObj.codeDevData.draftSnippets[sId].code === utui.customizations_template[100040].transientData.securedCode[extObj._id][sId]){
						return;
					}
				} catch (e){} // Handles scenario where there is no secured code for this extension yet
                extObj.codeDevData.draftSnippets[sId].updatedBy = utui.login.email;
                extObj.codeDevData.draftSnippets[sId].updateDate = utui.util.date.getUtuiStringFromDate(new Date());
                utui.customizations.updateExtensionData(utui.customizations_template[100040].transientData.extId);
            }
		}

	},

    //------------------------------------------------------------------------------------------------------------------
    // Standard UTUI customization template component.
    //------------------------------------------------------------------------------------------------------------------
	template: {
		main: function(extensionObj) {
			var v = '';
				v += '<div class="readonly-container-bubble">';
					v += '<div class="title">'+localize.t('tiq.ext.configuration')+'</div>';
					v += '<div class="container-fluid js-readonly-container section-padded-top-bottom">';

							v += '<div class="row-fluid">';
								v += '<div class="span12">';
									v += '<span class="inline-label">'+localize.t('tiq.ext.scope_vars')+'</span>';
									v += utui.ui.template.form.readonly.inputItemView(null, 'scopevars', '');
								v += '</div>';
							v += '</div>';

						v += '<div class="section-padded-top-bottom">';
							v += '<div class="row-fluid">';
								v += '<div class="span12">';
									v += '<span class="inline-label">'+localize.t('tiq.ext.code')+'</span>';
									v += utui.ui.template.form.readonly.codeItemView(null, 'code', '');
								v += '</div>';
							v += '</div>';
						v += '</div>';

					v += '</div>';
				v += '</div>';

			return v;
		}
	},

    //------------------------------------------------------------------------------------------------------------------
    // Extension conditions method to display the any conditions for this extension.
    //------------------------------------------------------------------------------------------------------------------
	setRulesOnView: function(extensionObj, namespace) {
		var obj = extensionObj,
			target = '';

		function $data(key) {
			if(namespace) {
				return $('#'+namespace).find('span[data-key="'+key+'"]');
			}
			return $('span[data-key="'+key+'"]');
		}
	},

    //------------------------------------------------------------------------------------------------------------------
    // Standard UTUI getValue call for extensions.
    //------------------------------------------------------------------------------------------------------------------
	getValue: function(extensionObj, key) {
		var value = extensionObj[key],
			roValue = '',
			options = {},
			dsCollection;

		switch(key) {
			default:
				roValue = dsapi.getDataSourceFormattedName(value)
				break;
		}

		return roValue;
	},

    //------------------------------------------------------------------------------------------------------------------
    // Main Editor Panel object:
	// -------------------------
	// Manages the master ui component of this extension. Controls the navigation block, the code editor clock and the
	// function bar. Also controls the full screen modal editor.
	//
    //------------------------------------------------------------------------------------------------------------------

	editorPanel : {
		init : function(extId){

			// Save the current extension id for the data layer to use.
            utui.customizations_template[100040].transientData = utui.customizations_template[100040].transientData ? utui.customizations_template[100040].transientData : {};
            utui.customizations_template[100040].transientData.extId = extId;

            // Set up event listeners
            utui.util.pubsub.subscribe(utui.constants.code_dev_ext.SNIPPET_CHANGE,utui.customizations_template[100040].editorPanel.functionBar.render,this);
            utui.util.pubsub.subscribe(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE,utui.customizations_template[100040].editorPanel.functionBar.render,this);
			utui.util.pubsub.subscribe(utui.constants.code_dev_ext.SNIPPET_LIST_CHANGE,utui.customizations_template[100040].editorPanel.navigationBlock.render,this);
            utui.util.pubsub.subscribe(utui.constants.code_dev_ext.EDITOR_CODE_CHANGE,utui.customizations_template[100040].editorPanel.updateCurrentCode,this);
            utui.util.pubsub.subscribe(utui.constants.code_dev_ext.SNIPPET_DATA_DIRTY,utui.customizations_template[100040].snippetDataAPI.onSnippetDataDirty,this);
			utui.util.pubsub.subscribe(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE,utui.customizations_template[100040].editorPanel.navigationBlock.render,this);
			utui.util.pubsub.subscribe(utui.constants.code_dev_ext.PUBLISH_QUEUE_CHANGE,utui.customizations_template[100040].editorPanel.editorWindow.onPublishQueueChange,this);

		},
        //------------------------------------------------------------------------------------------------------------------
        // Navigation block on the left. A composite of published items at the top and a list of draft items below it.
        //------------------------------------------------------------------------------------------------------------------
        navigationBlock : {
            //------------------------------------------------------------------------------------------------------------------
            // Master render method for the navigation block
            //------------------------------------------------------------------------------------------------------------------
            render : function(){
                var $divNode = $('#js-editpanel-navblock'),
                    nb = utui.customizations_template[100040].editorPanel.navigationBlock;

                $divNode.empty();
                nb.renderPublishedItemsBlock($divNode);
                nb.renderDraftItemsBlock($divNode);
            },

            //------------------------------------------------------------------------------------------------------------------
            // Renders the top published items block
            //------------------------------------------------------------------------------------------------------------------
			renderPublishedItemsBlock : function($divNode){
                var targetSnIdList = [];

                _.each(utui.customizations_template[100040].getPublishTargetsList(),function(tName){
                    targetSnIdList.push(utui.customizations_template[100040].getSnptHashKey(tName));
				});

                var html = '<div>';
				html += '<div class="js-codedev-navblock-section-header">';
					html += '<div class="js-codedev-navblock-section-label">Published</div>';
					html += '<div>&nbsp;</div>';
				html += '</div>';

				html += '<div class="js-codedev-navblock-section" style="height:100px;">';

				var pTgtCnt = 0;
				_.each(targetSnIdList ,function(snId){
                    var pSnipt = utui.customizations_template[100040].snippetDataAPI.getSnippetById(snId);
                    if (pSnipt){
                        pTgtCnt++;
                        html += '<div id="code_item_'+snId+'" class="js-codedev-navblock-itemline">';
                        html += '<div><i class="icon-bullseye"></i></div>';
                        html += '<div>' +  utui.customizations_template[100040].capPubTarget(pSnipt.name)  + '</div>';
                        var queueInfo = utui.customizations_template[100040].snippetDataAPI.isPubTargetQueued(pSnipt.name);
                        if (queueInfo){
                            html += '<div><i class="icon-cloud-upload '+utui.customizations_template[100040].q4pColors[queueInfo.color]+'"></i></div>';
                        } else {
                            html += '<div>&nbsp;</div>';
                        }

                        html += '</div>';
					}
				});
				if (pTgtCnt === 0){
					html += '<div class="js-codedev-gray-lbl">' + localize.t("tiq.ext.code_dev.nothing_published_yet") + '</div>';
				}
				html += '</div>';
				html += '</div>';

				$divNode.append(html);

				_.each(targetSnIdList,function(snId){
					$('#code_item_'+snId).safeOn('click',{id:snId},utui.customizations_template[100040].editorPanel.navigationBlock.onSelectCodeSnippet);
				});
			},

            //------------------------------------------------------------------------------------------------------------------
            // Renders a list of all draft snippets for selection.
            //------------------------------------------------------------------------------------------------------------------
			renderDraftItemsBlock : function($divNode){
				var html = '<div>';
				html += '<div class="js-codedev-navblock-section-header">';
					html += '<div class="js-codedev-navblock-section-label">Drafts</div>';
					html += '<div class="js-codedev-btn-sm">';
						if ( ! utui.customizations_template[100040].isReadOnly()){
                            html += '<a id="addNewDraftBtn" href="#" class="js-add-btn btn btn-block i-color-copy"><i class="icon-plus"></i>&nbsp;'+localize.t("tiq.ext.add.add")+'</a>';
						}
					html += '</div>';
				html += '</div>';

				html += '<div class="js-codedev-navblock-section"  style="height:480px;">';

				var draftSnippets = utui.customizations_template[100040].snippetDataAPI.getDraftSnippets();
				_.each(draftSnippets,function(snpt){
                    var snId = utui.customizations_template[100040].getSnptHashKey(snpt.name);
					html += '<div id="code_item_'+snId+'" class="js-codedev-navblock-itemline">';
					html += '<div><i class="icon-file-alt"></i></div>';
					html += '<div>' + snpt.name + '</div>';
					var queuedItemInfo = utui.customizations_template[100040].snippetDataAPI.getQueue4PublishInfo(snId);
					if (queuedItemInfo){
                        html += '<div><i class="icon-lock '+ utui.customizations_template[100040].q4pColors[queuedItemInfo.color]+'"></i></div>';
					} else {
						html += '<div>&nbsp;</div>';
					}

					html += '</div>';

				});
				html += '</div>';
				html += '</div>';

				$divNode.append(html);

                if ( ! utui.customizations_template[100040].isReadOnly()){
                    $('#addNewDraftBtn').safeOn('click',utui.customizations_template[100040].editorPanel.navigationBlock.onAddNewDraft);
				}

                _.each(draftSnippets,function(snpt){
                    var snId = utui.customizations_template[100040].getSnptHashKey(snpt.name);
					$('#code_item_'+snId).safeOn('click',{id:snId},utui.customizations_template[100040].editorPanel.navigationBlock.onSelectCodeSnippet);
				});
			},

            //------------------------------------------------------------------------------------------------------------------
            // Handles the creation of a new draft snippet
            //------------------------------------------------------------------------------------------------------------------
            onAddNewDraft : function(e){
                e.preventDefault();
                var draftSnippets = utui.customizations_template[100040].snippetDataAPI.getDraftSnippets();
                if (draftSnippets.length >= utui.constants.code_dev_ext.MAXIMUM_SNIPPETS_ALLOWED) {
                    utui.customizations_template[100040].editorPanel.functionBar.draftErrorDialog(localize.t('tiq.ext.code_dev.max_snippets_exceeded', {maxsn:utui.constants.code_dev_ext.MAXIMUM_SNIPPETS_ALLOWED}),function(){});
                } else {
                    var snId = utui.customizations_template[100040].snippetDataAPI.createDraftSnippet();
                    utui.customizations_template[100040].transientData.currentSnippetID = snId;
                    utui.customizations_template[100040].editorPanel.navigationBlock.render();
                    var snippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(snId);
                    utui.customizations_template[100040].editorPanel.editorWindow.setSnippetCode(snippet);
                    $('.js-codedev-navblock-itemline').removeClass('js-codedev-navblock-itemline-selected');
                    $('#code_item_'+snId).addClass('js-codedev-navblock-itemline-selected');
				}


            },

            //------------------------------------------------------------------------------------------------------------------
            // Handles the selection of a code snippet from the navigation bar.
            //------------------------------------------------------------------------------------------------------------------
            onSelectCodeSnippet : function(e){
                e.preventDefault();
                var snippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(e.data.id);
                utui.customizations_template[100040].editorPanel.editorWindow.setSnippetCode(snippet);
                $('.js-codedev-navblock-itemline').removeClass('js-codedev-navblock-itemline-selected');
                $('#code_item_'+e.data.id).addClass('js-codedev-navblock-itemline-selected')

            },

            //------------------------------------------------------------------------------------------------------------------
            // Select the first draft and updates the editor.
            //------------------------------------------------------------------------------------------------------------------
			selectDefaultDraft : function(){
                var snId = utui.customizations_template[100040].snippetDataAPI.getDefaultDraftSnippetId();
                if (typeof snId == 'undefined'){
                    snId = utui.customizations_template[100040].snippetDataAPI.createDraftSnippet();
                    utui.util.pubsub.publish(utui.constants.code_dev_ext.SNIPPET_LIST_CHANGE);
                }

                utui.customizations_template[100040].editorPanel.navigationBlock.selectSnippetById(snId);
			},
            //------------------------------------------------------------------------------------------------------------------
            // Select a draft and update the editor.
            //------------------------------------------------------------------------------------------------------------------
            selectSnippetById : function(snId){
                utui.customizations_template[100040].transientData.currentSnippetID = snId;

                var snippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(snId);
                utui.customizations_template[100040].editorPanel.editorWindow.setSnippetCode(snippet);

                $('#code_item_'+snId).addClass('js-codedev-navblock-itemline-selected')
            }
        },

        //------------------------------------------------------------------------------------------------------------------
        // Function bar component above the editor window. Can exist in three states dependent on the code contained in the
		// editor. (Blank/Publish Target/Draft)
        //------------------------------------------------------------------------------------------------------------------
        functionBar : {
            //------------------------------------------------------------------------------------------------------------------
            // Master render method of the function bar. Determines the state and renders the correct type of function bar
			// required.
            //------------------------------------------------------------------------------------------------------------------
            render : function(){
				var $divNode = $('#js-editpanel-functionbar');

				if (utui.customizations_template[100040].transientData.currentSnippetID){
					var snippet =  utui.customizations_template[100040].snippetDataAPI.getSnippetById(utui.customizations_template[100040].transientData.currentSnippetID);
                    if (utui.customizations_template[100040].snippetDataAPI.isDraftSnippet(utui.customizations_template[100040].transientData.currentSnippetID)){
                        utui.customizations_template[100040].editorPanel.functionBar._renderDraftItemFunctionBar(snippet, $divNode);
					} else {
                        utui.customizations_template[100040].editorPanel.functionBar._renderPubTargetFunctionBar(snippet, $divNode);
					}
				} else {
					utui.customizations_template[100040].editorPanel.functionBar._renderEmptyInterimFunctionBar($divNode);
				}
            },

            //------------------------------------------------------------------------------------------------------------------
            // Create an empty placehoder function bar when there is no snippet set
            //------------------------------------------------------------------------------------------------------------------
			_renderEmptyInterimFunctionBar : function($divNode){ // Fill the space until a snippet is selected
				var html = '<div id="js-editpanel-functionbar-upper" class="js-codedev-functionbar-upper">';
					html += '<div>&nbsp;</div>';
					html += '<div>&nbsp;</div>';
					html += '<div>&nbsp;</div>';
					html += '<div>&nbsp;</div>';
				html += '</div>'
				html += '<div id="js-editpanel-functionbar-lower" class="js-codedev-functionbar-lower">'
				html += '<div>&nbsp;</div>';
				html += '<div>&nbsp;</div>';
				html += '</div>'

				$divNode.empty();
                $divNode.append(html);

			},
            //------------------------------------------------------------------------------------------------------------------
            // Render function bar to manage a draft type snippet. Provides a name input field & promotion buttons.
            //------------------------------------------------------------------------------------------------------------------
			_renderDraftItemFunctionBar : function(snippet,$divNode){
                var luDate = utui.util.date.getJSDateFromUtuiString(snippet.updateDate);
                var snId = utui.customizations_template[100040].getSnptHashKey(snippet.name);
                var q4pInfo = utui.customizations_template[100040].snippetDataAPI.getQueue4PublishInfo(snId);

                // Lock the name of the draft if it has been queued for publish.
                var isReadOnly = utui.customizations_template[100040].isReadOnly();

                var html = '<div id="js-editpanel-functionbar-upper" class="js-codedev-functionbar-upper">';
					html += '<div>';
					html += 	'<div style="float: left;font-weight: bold;margin-top: 5px;padding-right:5px;">'+localize.t('tiq.ext.draft')+'</div>';
					html += 	'<input type="text" id="draftNameTxt" style="width:240px;">';
					html += '</div>';
					html += '<div class="js-codedev-functionbar-upper-btns">';
					if ( ! isReadOnly){
						html += 	'<div class="js-codedev-btn" title="'+localize.t("tiq.ext.code_dev.undo_edits_since_save")+'"><a id="draftResetBtn" href="#" class="btn btn-block i-color-copy"><i class="icon-rotate-left"></i>&nbsp;'+localize.t("tiq.ext.revert")+'</a></div>';
						html += 	'<div class="js-codedev-btn"><a id="draftDeleteBtn" href="#" class="btn btn-block i-color-delete"><i class="icon-trash"></i>&nbsp;'+localize.t("tiq.ext.delete")+'</a></div>';
					}
					html += 	'<div class="js-codedev-btn" id="draftDiffBlock" title="'+localize.t("tiq.ext.code_dev.compare_to_another")+'" style="position:relative;"><a id="draftDiffBtn" href="#" class="btn btn-block i-color-copy"><i class="icon-code-fork"></i>&nbsp;'+localize.t("tiq.ext.compare_to")+'</a></div>';
					html += '</div>';
				html += '</div>';

				html += '<div id="js-editpanel-functionbar-lower" class="js-codedev-functionbar-lower">';

				if (q4pInfo){
					// Build the list of selected publish target spans
					var targetBlockList = '';
					_.each(q4pInfo.targets.split(','),function(pt){
						if (pt === 'prod'){
							targetBlockList += '<span class="js-codedev-prod-pt">Prod</span>';
                        } else if (pt === 'qa') {
                            targetBlockList += '<span class="js-codedev-qa-pt">QA</span>';
                        } else if (pt === 'dev') {
                            targetBlockList += '<span class="js-codedev-dev-pt">Dev</span>';
						} else {
                            targetBlockList += '<span class="js-codedev-dev-pt">'+pt+'</span>';
						}
					});
					// Build the composite line
                    html += '<div style="float:left;padding-left:10px;">';
                    if ( ! isReadOnly){
                        html += '<a id="removeFromQInDrftBtn" href="#" class="btn btn-block i-color-delete"><i class="icon-remove"></i>&nbsp;'+localize.t("tiq.ext.code_dev.cancel_publish")+'</a>';
					}

                    html += '</div>';
                    html += '<div style="margin-left:10px;margin-top: 5px;">';
                    	html += localize.t("tiq.ext.code_dev.committed_to_publish_to");
                    	html += targetBlockList;
	                    html += localize.t("tiq.ext.code_dev.on");
    	                html += utui.util.date.getFullStringFromDate(utui.util.date.getJSDateFromUtuiString(q4pInfo.queuedTimestamp),true);
                    	html += localize.t("tiq.ext.code_dev.by");
                    	html += q4pInfo.queuedBy;
                    html += '</div>';
                } else {
                    html += '<div>';
                    	if ( ! isReadOnly){
                            html += '<a id="queue4PublishBtn" href="#" class="btn btn-block i-color-info" title="'+localize.t("tiq.ext.code_dev.select_where_to_publish")+'"><i class="icon-cloud-upload" style="color:#076FB5"></i>&nbsp;'+localize.t("tiq.ext.code_dev.queue4publish")+' </a>';
						}
                    html += '</div>';
                    html += '<div style="margin-left:10px;margin-top: 5px;">';
                    	html += localize.t("tiq.ext.code_dev.last_edited_by");
                    	html += snippet.updatedBy;
                    	html += localize.t("tiq.ext.code_dev.on");
                    	html += utui.util.date.getFullStringFromDate(luDate,true);
                    html += '</div>';
            	}

				html += '</div>';

				$divNode.empty();
                $divNode.append(html);
                if (! isReadOnly ) {
                    $('#draftNameTxt').safeOn('blur',utui.customizations_template[100040].editorPanel.functionBar.onBlurDraftName);
                    if (q4pInfo){
                        $('#removeFromQInDrftBtn').safeOn('click',{id:snId},utui.customizations_template[100040].editorPanel.functionBar.onRemoveFromQInDrftItems);
                    } else {
                        $('#queue4PublishBtn').safeOn('click',{id:snId},utui.customizations_template[100040].editorPanel.functionBar.onQueue4PublishClick);
                    }

                    $('#draftResetBtn').safeOn('click',utui.customizations_template[100040].editorPanel.functionBar.onDraftResetBtnClick);
                    $('#draftDeleteBtn').safeOn('click',utui.customizations_template[100040].editorPanel.functionBar.onDraftDeleteBtnClick);
				}
				$('#draftDiffBtn').safeOn('click',utui.customizations_template[100040].editorPanel.functionBar.onDiffBtnClick);

                if ( q4pInfo || isReadOnly){
                    $('#draftNameTxt').prop("disabled", true);
                }
				// Update the function bar draft name
				utui.customizations_template[100040].editorPanel.functionBar.setDraftNameInputText(snippet.name);


			},
            //------------------------------------------------------------------------------------------------------------------
            // Render a publish target function bar that only shows promotion information & allows demotion functionality.
            //------------------------------------------------------------------------------------------------------------------
			_renderPubTargetFunctionBar : function(snippet,$divNode) {
				var html = '<div id="js-editpanel-functionbar-pubtarget-upper" class="js-codedev-functionbar-pubtarget-upper">';
				if(snippet.promotedTimestamp){
					var pDate = utui.util.date.getJSDateFromUtuiString(snippet.promotedTimestamp);
					html += '<div style="padding-top:3px;">';
						html += localize.t('tiq.ext.code_dev.last_published_from');
						html += '<b>' + snippet.promotedDraftName + '</b>';
						html += localize.t('tiq.ext.code_dev.on');
						html += utui.util.date.getFullStringFromDate(pDate,true);
						html += localize.t('tiq.ext.code_dev.by');
						html += snippet.promotedBy;
					html += '</div>';

					html += '<div>';
	                    html += '<div class="js-codedev-btn" title="'+localize.t("tiq.ext.code_dev.compare_to_another")+'" id="draftDiffBlock" style="position:relative;"><a id="draftDiffBtn" href="#" class="btn btn-block i-color-copy"><i class="icon-code-fork"></i>&nbsp;'+localize.t("tiq.ext.compare_to")+'</a></div>';
					html += '</div>';
				} else {
					html += '<div style="padding-top:3px;">';
					html += localize.t('tiq.ext.code_dev.never_published')
					html += '</div>';
				}
				html += '</div>';

				var queuedSnippetInfo = utui.customizations_template[100040].snippetDataAPI.isPubTargetQueued(snippet.name);
				html += '<div id="js-editpanel-functionbar-pubtarget-lower" class="js-codedev-functionbar-pubtarget-lower">';
					if (queuedSnippetInfo){
						var queuedSnippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(queuedSnippetInfo.id);
						html += '<div style="float:left;padding-top:3px;">';
							html += '<span style="color:#076FB5;font-weight:bold;">' + queuedSnippet.name + '</span>';
						   html += '<span>' + localize.t('tiq.ext.code_dev.is_committed_to_publish') + '</span>';
						html += '</div>';
						html += '<div style="float:left;padding-left:10px;">';
                        if ( ! utui.customizations_template[100040].isReadOnly()){
                            html += '<a id="removeFromQInPubBtn" href="#" class="btn btn-block i-color-delete"><i class="icon-remove"></i>&nbsp;'+localize.t("tiq.ext.code_dev.cancel_publish")+'</a>';
						}
						html += '</div>';
					}

				html += '</div>'

				$divNode.empty();
                $divNode.append(html);

                if ( ! utui.customizations_template[100040].isReadOnly()){
                    $('#removeFromQInPubBtn').safeOn('click',{target:snippet.name},utui.customizations_template[100040].editorPanel.functionBar.onRemoveFromQInPubItems);
				}

                $('#draftDiffBtn').safeOn('click',utui.customizations_template[100040].editorPanel.functionBar.onDiffBtnClick);

			},

            //------------------------------------------------------------------------------------------------------------------
            // Code diff button
            //------------------------------------------------------------------------------------------------------------------
			onDiffBtnClick : function(e){
				e.preventDefault();
                utui.customizations_template[100040].editorPanel.showDiffTargetMenu();
			},

            //------------------------------------------------------------------------------------------------------------------
            // Delete a snippet
            //------------------------------------------------------------------------------------------------------------------
			onDraftDeleteBtnClick : function(e){
				e.preventDefault();
                utui.customizations_template[100040].snippetDataAPI.deleteSnippet(utui.customizations_template[100040].transientData.currentSnippetID);
                // Populate the editor with the first draft available
                utui.customizations_template[100040].editorPanel.navigationBlock.selectDefaultDraft();

			},

            //------------------------------------------------------------------------------------------------------------------
            // Handle the reset request - sets the code back to what was originally loaded
            //------------------------------------------------------------------------------------------------------------------
			onDraftResetBtnClick : function(e){
				e.preventDefault();
				var csn = utui.customizations_template[100040].transientData.currentSnippetID;
				var q4pInfo =  utui.customizations_template[100040].snippetDataAPI.getQueue4PublishInfo(csn);

				if (q4pInfo){
					var errorText = localize.t('tiq.ext.code_dev.queued_item_locked');
					$("#dialog-confirmation-content").html(errorText);
					$("#dialog-confirmation").dialog({
		                autoOpen: true,
		                height: 'auto',
		                width: 'auto',
		                modal: true,
		                closeOnEscape: true,
		                closeText: "",
		                resizable: false,
		                draggable: false,
		                buttons: [
		                    {
		                        text: localize.t('tiq.dialog.button.ok'),
		                        id: 'confirmResetErrorBtn',
		                        click: function() {
		                            $(this).dialog('close');
		                        }
		                    }
		                ]
		            });
				}else {
					utui.customizations_template[100040].snippetDataAPI.resetSecuredCode(utui.customizations_template[100040].transientData.currentSnippetID);
	                utui.util.pubsub.publish(utui.constants.code_dev_ext.EDITOR_CODE_CHANGE);
				}

			},

            //------------------------------------------------------------------------------------------------------------------
            // Render the queue for publish dialog for the user to queue the current snippet for publish
            //------------------------------------------------------------------------------------------------------------------
			onQueue4PublishClick : function(e){
				e.preventDefault();
                utui.customizations_template[100040].editorPanel.queue4PublishDialog.render(e.data.id);
			},

            //------------------------------------------------------------------------------------------------------------------
            // Update the current snippets name in the function bar
            //------------------------------------------------------------------------------------------------------------------
			setDraftNameInputText : function(draftName) {
				$('#draftNameTxt').val(draftName);
			},

            //------------------------------------------------------------------------------------------------------------------
            // Handles a change of draft name
            //------------------------------------------------------------------------------------------------------------------
			onBlurDraftName : function(e){
				e.preventDefault();

				var draftNameTxt = $('#draftNameTxt').val().trim().substr(0,50);
				var currentSnippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(utui.customizations_template[100040].transientData.currentSnippetID);
				var newNameOk = false;

				if (draftNameTxt.length){
                    if (utui.customizations_template[100040].snippetDataAPI.isIllegalSnippetName(draftNameTxt)){
                        utui.customizations_template[100040].editorPanel.functionBar.draftErrorDialog(localize.t('tiq.ext.code_dev.illegal_snippet_name'),function(){});
                    } else {
						if (draftNameTxt !== currentSnippet.name){
                            if (draftNameTxt.match(/[^a-zA-Z0-9 _\-\.,]/) || draftNameTxt !== utui.util.safeEscape(draftNameTxt)){
                                utui.customizations_template[100040].editorPanel.functionBar.draftErrorDialog(localize.t('tiq.ext.code_dev.illegal_char_snippet_name'),function(){
                                    $('#draftNameTxt').val(currentSnippet.name);
                                });
                            } else {
                                var newHashId = utui.customizations_template[100040].getSnptHashKey(draftNameTxt);
                                if (utui.customizations_template[100040].snippetDataAPI.isDraftSnippet(newHashId)){
                                    utui.customizations_template[100040].editorPanel.functionBar.draftErrorDialog(localize.t('tiq.ext.code_dev.duplicate_snippet'),function(){
                                        $('#draftNameTxt').val(currentSnippet.name);
                                    });
                                } else {
                                    var oldSnippetId = utui.customizations_template[100040].transientData.currentSnippetID;
                                    var newSnippetId = utui.customizations_template[100040].snippetDataAPI.cloneSnippet(currentSnippet.name,draftNameTxt);
                                    utui.customizations_template[100040].snippetDataAPI.deleteSnippet(oldSnippetId);
                                    utui.util.pubsub.publish(utui.constants.code_dev_ext.SNIPPET_LIST_CHANGE);
                                    utui.customizations_template[100040].editorPanel.navigationBlock.selectSnippetById(newSnippetId);
                                    newNameOk = true;
                                }
							}
						}
					}
				} else {
					utui.customizations_template[100040].editorPanel.functionBar.draftErrorDialog(localize.t('tiq.ext.code_dev.draft_name_not_blank'),function(){});
				}

				if( ! newNameOk){
					$('#draftNameTxt').val(currentSnippet.name);
				}

			},

            //------------------------------------------------------------------------------------------------------------------
            // User clicks remove target from queue in the published snippet view
            //------------------------------------------------------------------------------------------------------------------
            onRemoveFromQInPubItems : function(e){
                e.preventDefault();
                utui.customizations_template[100040].snippetDataAPI.removeTargetFromQueues(e.data.target,false);
            },

            //------------------------------------------------------------------------------------------------------------------
            // User clicks remove from queue in the published snippet view
            //------------------------------------------------------------------------------------------------------------------
            onRemoveFromQInDrftItems : function(e){
                e.preventDefault();
                utui.customizations_template[100040].snippetDataAPI.dequeSnippetFromPublish(e.data.id);
            },

            //------------------------------------------------------------------------------------------------------------------
            // Display an error dialog for an invalid draft name
            //------------------------------------------------------------------------------------------------------------------
			draftErrorDialog : function (errorText, callBack){
				$("#dialog-confirmation-content").html(errorText);
				$("#dialog-confirmation").dialog({
	                autoOpen: true,
                    title : localize.t('tiq.ext.code_dev.draft_error_title'),
	                height: 'auto',
	                width: 'auto',
	                modal: true,
	                closeOnEscape: false,
	                closeText: "",
	                close: callBack,
	                resizable: false,
	                draggable: true,
	                buttons: [
	                    {
	                        text: localize.t('tiq.dialog.button.ok'),
	                        id: 'confirmDraftNameErrorBtn',
	                        click: function() {
	                            $(this).dialog('close');
	                            callBack();
	                        }
	                    }
	                ]
	            });

			}
        },

        //------------------------------------------------------------------------------------------------------------------
        // Main editor panel
        //------------------------------------------------------------------------------------------------------------------
        editorWindow : {

            //------------------------------------------------------------------------------------------------------------------
            // Render of the code editor using the Ace Editor plugin
            //------------------------------------------------------------------------------------------------------------------
            render : function(){
                var $divNode = $('#js-editpanel-editor'),
                    html = '';

                html += '<div class="js-codedev-ace-code-block"><pre id="js-codedev-ace-editor"></pre></div>';
				html += '<div id="js-editpanel-footer" class="js-codedev-footer">';
					html += '<div>&nbsp;</div>';
					html += '<div style="padding-top:5px;">';
					   html += '<a href="#" class="btn btn-block i-color-info" id="js-codedev-modal-launcher"><i class="icon-resize-full" style="color:#076FB5"></i></a>';
					html += '</div>';
				html += '</div>';

                $divNode.empty();
                $divNode.append(html);

                utui.customizations_template[100040].transientData.handleEditorChangeEvents = false;
				if (utui.customizations_template[100040].panelAceEditor){
					utui.customizations_template[100040].panelAceEditor.destroy();
				}
				utui.customizations_template[100040].panelAceEditor = ace.edit("js-codedev-ace-editor");
				var pnlEd = utui.customizations_template[100040].panelAceEditor;
				pnlEd.$blockScrolling = Infinity;
				pnlEd.setValue("");
				pnlEd.setTheme("ace/theme/chrome");
				pnlEd.session.setMode("ace/mode/javascript");
				pnlEd.setShowPrintMargin(false);
				pnlEd.clearSelection();

				// Create a handler function for change events in the panel editor.
				function panelEditorChangeHandler (e){
                    var snId = utui.customizations_template[100040].transientData.currentSnippetID;
                    if (utui.customizations_template[100040].snippetDataAPI.isDraftSnippet(snId)) {
                        try {
                            utui.customizations_template[100040].editorPanel.recordLastKnownCursorPostion(utui.customizations_template[100040].panelAceEditor.selection.getCursor());
                        } catch (e){}
                        if (utui.customizations_template[100040].transientData.handleEditorChangeEvents){
                            utui.customizations_template[100040].snippetDataAPI.updateSnippetCode(snId,pnlEd.getValue());
                            utui.util.pubsub.publish(utui.constants.code_dev_ext.SNIPPET_DATA_DIRTY);
                        }
                    }
				}

				pnlEd.on("blur", panelEditorChangeHandler);

				pnlEd.on("change", panelEditorChangeHandler);

                utui.customizations_template[100040].transientData.handleEditorChangeEvents = true;

				// Launch the modal editor if needed.
				$('#js-codedev-modal-launcher').safeOn('click', utui.customizations_template[100040].modalIde.render)
            },
            //------------------------------------------------------------------------------------------------------------------
            // Takes the given snippet and sets the ace editor content with the code from the snippet. Also checks to see if the
            // snippet is either published or queued and locks it accordingly.
            //------------------------------------------------------------------------------------------------------------------

			setSnippetCode : function(snippet){
				var pnlEd = utui.customizations_template[100040].panelAceEditor;
                var extObj = utui.customizations_template[100040].getExtDataObj();
                utui.customizations_template[100040].transientData.handleEditorChangeEvents = false;

				// Save the current code if it's a draft
                var snId = utui.customizations_template[100040].getSnptHashKey(snippet.name);
				if (utui.customizations_template[100040].transientData.currentSnippetID !== snId){
					if (utui.customizations_template[100040].snippetDataAPI.isDraftSnippet(utui.customizations_template[100040].transientData.currentSnippetID)){
						utui.customizations_template[100040].snippetDataAPI.updateSnippetCode(utui.customizations_template[100040].transientData.currentSnippetID,pnlEd.getValue());
					}
				}
				// Update the editor with the new code
				utui.customizations_template[100040].transientData.currentSnippetID = snId;
				pnlEd.setValue(utui.util.safeUnescape(snippet.code));

				// Get the queue data to check if this snippet is queued
				var qInfo = utui.customizations_template[100040].snippetDataAPI.getQueue4PublishInfo(snId);

				// Lock the code if it's a published version or if there is a queue entry for this snippet

				if (utui.customizations_template[100040].isReadOnly() || qInfo || utui.customizations_template[100040].snippetDataAPI.isPublishedSnippet(snId)){
					pnlEd.setReadOnly(true);
				} else {
					pnlEd.setReadOnly(false);
				}
				utui.customizations_template[100040].panelAceEditor.clearSelection();
				try {
					var cursor = utui.customizations_template[100040].transientData.lastKnownCursorPostions[extObj._id][utui.customizations_template[100040].transientData.currentSnippetID];
                    if (cursor){
                        utui.customizations_template[100040].panelAceEditor.gotoLine(cursor.row + 1, cursor.column);
					} else {
                        utui.customizations_template[100040].panelAceEditor.gotoLine(1, 0);
					}
				} catch (e){
                    utui.customizations_template[100040].panelAceEditor.gotoLine(1, 0);
				}

                utui.customizations_template[100040].transientData.handleEditorChangeEvents = true;

				utui.util.pubsub.publish(utui.constants.code_dev_ext.SNIPPET_CHANGE);

			},
			//------------------------------------------------------------------------------------------------------------------
            // Handle a change in the queued snippets - the current snippet may need to be locked/unlocked
            //------------------------------------------------------------------------------------------------------------------
			onPublishQueueChange : function(){
				var pnlEd = utui.customizations_template[100040].panelAceEditor;
				if (pnlEd) {
					var snId = utui.customizations_template[100040].transientData.currentSnippetID;
					var q4pInfo =  utui.customizations_template[100040].snippetDataAPI.getQueue4PublishInfo(snId);
					if (utui.customizations_template[100040].isReadOnly() || q4pInfo || utui.customizations_template[100040].snippetDataAPI.isPublishedSnippet(snId)){
						pnlEd.setReadOnly(true);
					}else {
						pnlEd.setReadOnly(false);
					}
				}
			}

        },

        //------------------------------------------------------------------------------------------------------------------
        // Launch a dialog where the user can select publish targets to queue a draft for publish to. These targets are
		// available according to the permissions that the user has permission to queue to.
        //------------------------------------------------------------------------------------------------------------------
		queue4PublishDialog : {
			render : function(snippetId) {
				var pTargets = utui.customizations_template[100040].editorPanel.queue4PublishDialog.getPublishTargetPermissions();
				var snippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(snippetId);

				var dTitle = localize.t("tiq.ext.code_dev.commit") + snippet.name + localize.t("tiq.ext.code_dev.to_publish") ;

                var html = '<div style="width:550px;padding:10px;">';
						html += '<div>';
							html += localize.t("tiq.ext.code_dev.select_locations_for_publish");
							html += '<br><br>';
							html += localize.t("tiq.ext.code_dev.draft_will_be_queued");
						html += '</div>';
						html += '<div style="font-weight:bold;margin-top:20px;">';
							html += '<div style="float:left;padding-left:5px;width:220px;">' + localize.t("tiq.ext.code_dev.publish_location") + '</div>';
							html += '<div style="float:right;width:300px;">' + localize.t("tiq.ext.code_dev.committed_draft") + '</div>';
						html += '</div>';
						html += '<div style="height:150px;border:1px solid lightgray;margin-top:40px;padding:5px;">';
						_.each(pTargets,function(ptp,tgt){
							var iid = snippetId+'_'+tgt;
                            var queuedItemInfo = utui.customizations_template[100040].snippetDataAPI.isPubTargetQueued(tgt);
                            html += '<div style="clear:both">';
								html += '<div style="float:left;padding-left:5px;width:220px;">';
		                            html += '<input type="checkbox" name="'+iid+'" id="'+iid+'" value="'+tgt+'"';
									if (!ptp){
										html += ' disabled';
									}
                            		html += '>';
									html += '<label for="'+iid+'">' + utui.customizations_template[100040].capPubTarget(tgt) + '</label>';
								html += '</div>';
								if (queuedItemInfo) {
									var qSnippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(queuedItemInfo.id);
                                    html += '<div style="float:right;width:300px;">';
                                    	html += '<i class="icon-cloud-upload '+ utui.customizations_template[100040].q4pColors[queuedItemInfo.color]+'"></i>&nbsp;&nbsp;';
                                    	html += qSnippet.name;
                                    html += '</div>';
                                } else {
                                    html += '<div style="float:right;width:300px;">&nbsp;</div>';
								}

                            html += '</div>';
						});
						html += '</div>';
					html += '</div>';
                $("#dialog-confirmation-content").html(html);

                $("#dialog-confirmation").dialog({
                    autoOpen: true,
					title : dTitle,
                    height: 'auto',
                    width: 'auto',
                    modal: true,
                    closeOnEscape: false,
                    closeText: "",
                    close: function( event, ui ) {
                        // Do nothing for now..
                    },
                    resizable: false,
                    draggable: false,
                    buttons: [
                        {
                            text: localize.t('tiq.dialog.button.apply'),
                            id: 'queue4PublishDialog_continue_btn',
                            click: function() {
                                $(this).dialog('close');
                                utui.customizations_template[100040].editorPanel.queue4PublishDialog.applyQueueSelections()
                            }
                        },
                        {
                            text: localize.t('tiq.dialog.button.cancel'),
                            id: 'queue4PublishDialog_cancel_btn',
                            click: function() {
                                $(this).dialog('close');
                            },
                            style: 'float:left; margin-left: 12px'
                        }
                    ]
                });

			},
			getPublishTargetPermissions : function() {
                var ptps = {};
                _.each(utui.customizations_template[100040].getPublishTargetsList(),function(target){
                    ptps[target] = utui.permissions.canPromoteToEnvironment(target);
				});

				return ptps;
			},
			applyQueueSelections : function(){
                var pTargets = utui.customizations_template[100040].editorPanel.queue4PublishDialog.getPublishTargetPermissions();
                var sId = utui.customizations_template[100040].transientData.currentSnippetID;
                var targetListArray = [];

                _.each(pTargets,function(ptp,tgt){
                	if ($('#'+sId+'_'+tgt).is( ":checked" )){
                        targetListArray.push(tgt);
					}
                });

                if (targetListArray.length > 0){
                    utui.customizations_template[100040].snippetDataAPI.queueSnippetForPublish(sId,targetListArray);
				}
			}

		},
        //------------------------------------------------------------------------------------------------------------------
        // Shows a selection window under the diff targets button to select the snippet to compare against
        //------------------------------------------------------------------------------------------------------------------
		showDiffTargetMenu : function(){
			var $diffTargetMenu = $('#diffTargetMenu');
			if ($diffTargetMenu.length){ // Provide toggling functionality on second click to the button.
				$diffTargetMenu.remove();
			} else {
                var html = '',
					diffSnippetList = [],
					currentSnippetName = utui.customizations_template[100040].snippetDataAPI.getCurrentSnippetName();

                // Add the array of correctly sequenced published target snippets to the list snippets we can compare
                _.each(utui.customizations_template[100040].snippetDataAPI.getPublishedSnippets(), function(snippet){
                	if (currentSnippetName !== snippet.name) {
                        diffSnippetList.push(snippet.name)
					}
                });

                // After the published snippets, add the draft snippets to the list of snippets we can compare
                _.each(utui.customizations_template[100040].snippetDataAPI.getDraftSnippets(), function(snippet){
                    if (currentSnippetName !== snippet.name) {
                        diffSnippetList.push(snippet.name)
                    }
                });

                if (diffSnippetList.length){
                    html += '<div id="diffTargetMenu" class="js-codedev-diffmenu">';
                    _.each(diffSnippetList,function(name){
                        html += '<div id="dtm_' + utui.customizations_template[100040].getSnptHashKey(name) +  '" class="js-codedev-diffmenuitem">';
                        html += utui.customizations_template[100040].capPubTarget(name).substring(0,25) + '...';
                        html += '</div>';
                    });

                    html += '</div>';

                    // $('#js-editpanel-functionbar').append(html);
                    $('#draftDiffBlock').append(html);


                    _.each(diffSnippetList,function(target){
                        var snId = utui.customizations_template[100040].getSnptHashKey(target);
                        $('#dtm_'+snId).safeOn('click',{sid:snId},utui.customizations_template[100040].editorPanel.onDiffTargetSelect);
                    });
				}
			}

		},
		onDiffTargetSelect : function(e){
            e.preventDefault();
            $('#diffTargetMenu').remove();

            utui.customizations_template[100040].codeDiff.launchDiffWindow(e.data.sid, utui.customizations_template[100040].transientData.currentSnippetID);
		},
        //------------------------------------------------------------------------------------------------------------------
        // Master render function of the extension
        //------------------------------------------------------------------------------------------------------------------
        render : function(divId){
			var $divNode = $('#'+divId),
				html;

				html = '<div id="js-editpanel-container" class="js-codedev-container">';
	            html += '<div id="js-editpanel-navblock" class="js-codedev-navblock"></div>';
	            html += '<div id="js-editpanel-codeblock" class="js-codedev-codeblock">';
					html += '<div id="js-editpanel-functionbar" class="js-codedev-functionbar"></div>';
					html += '<div id="js-editpanel-editor" class="js-codedev-editor"></div>';
	            html += '</div>';
	            html += '</div>';

            $divNode.append(html);

            // Render the navigation
            utui.customizations_template[100040].editorPanel.navigationBlock.render();

            // Render the navigation
            utui.customizations_template[100040].editorPanel.functionBar.render();

            // Render the navigation
            utui.customizations_template[100040].editorPanel.editorWindow.render();

			// Populate the editor with the first draft available
			utui.customizations_template[100040].editorPanel.navigationBlock.selectDefaultDraft();


		},

        //------------------------------------------------------------------------------------------------------------------
        // Trigger a refresh of the code shown in the editor without dirtying the data model.
        //------------------------------------------------------------------------------------------------------------------
		updateCurrentCode : function(){
			var snippet = utui.customizations_template[100040].snippetDataAPI.getSnippetById(utui.customizations_template[100040].transientData.currentSnippetID);
            utui.customizations_template[100040].editorPanel.editorWindow.setSnippetCode(snippet);

		},
		recordLastKnownCursorPostion : function(cursor){
			try {
				if (cursor.row !== 0 && cursor.column !== 0){
                    var extObj = utui.customizations_template[100040].getExtDataObj();
                    utui.customizations_template[100040].transientData.lastKnownCursorPostions = utui.customizations_template[100040].transientData.lastKnownCursorPostions ? utui.customizations_template[100040].transientData.lastKnownCursorPostions : {};
                    utui.customizations_template[100040].transientData.lastKnownCursorPostions[extObj._id] = utui.customizations_template[100040].transientData.lastKnownCursorPostions[extObj._id] ? utui.customizations_template[100040].transientData.lastKnownCursorPostions[extObj._id] : {};
                    utui.customizations_template[100040].transientData.lastKnownCursorPostions[extObj._id][utui.customizations_template[100040].transientData.currentSnippetID] = cursor;
				}
			} catch (e){}
		}

	},

    //------------------------------------------------------------------------------------------------------------------
    // Full screen modal editor : Launched from the main editor panel to allow the user to have larger view of the
	// current snippet. Always syncs with the current snippet in the main panel editor
    //------------------------------------------------------------------------------------------------------------------
	modalIde : {

        //------------------------------------------------------------------------------------------------------------------
        // The main editor window component
        //------------------------------------------------------------------------------------------------------------------
        editorWindow : {

            //------------------------------------------------------------------------------------------------------------------
            // The editor window render function - renders the Ace editor and populates it with the code from the current snippet
            //------------------------------------------------------------------------------------------------------------------
            render : function(){
                var $divNode = $('#js-modal-editor'),
                    html = '';

                html += '<div class="js-codedev-modal-ace-wrapper"><pre id="js-modal-ace-editor"></pre></div>';
				html += '<div class="js-codedev-footer-modal">'
					html += '<div></div>'
					html += '<div style="padding:5px">';
					   html += '<a href="#" class="btn btn-block i-color-info js-modal-dismiss" ><i class="icon-resize-small" style="color:#076FB5"></i></a>';
					html += '</div>';
				html += '</div>';

                $divNode.empty();
                $divNode.append(html);

                utui.customizations_template[100040].transientData.handleEditorChangeEvents = false;
				utui.customizations_template[100040].modalAceEditor = ace.edit("js-modal-ace-editor");
				var mdlEd = utui.customizations_template[100040].modalAceEditor;
				mdlEd.$blockScrolling = Infinity;

				var cursor = utui.customizations_template[100040].panelAceEditor.selection.getCursor();
				mdlEd.setValue(utui.customizations_template[100040].panelAceEditor.getValue());
				mdlEd.clearSelection();
				mdlEd.gotoLine(cursor.row + 1, cursor.column);
				mdlEd.setTheme("ace/theme/chrome");
				mdlEd.session.setMode("ace/mode/javascript");
				mdlEd.setShowPrintMargin(false);

                // Get the queue data to check if this snippet is queued
				var snId = utui.customizations_template[100040].transientData.currentSnippetID;
                var qInfo = utui.customizations_template[100040].snippetDataAPI.getQueue4PublishInfo(snId);

                // Lock the code if it's a published version or if there is a queue entry for this snippet
                if (utui.customizations_template[100040].isReadOnly() || qInfo || utui.customizations_template[100040].snippetDataAPI.isPublishedSnippet(snId)){
                    mdlEd.setReadOnly(true);
                } else {
                    mdlEd.setReadOnly(false);

                    // Create a handler for any changes to the code in the editor:
                    function modalEditorChangeHandler(e) {
                        var snId = utui.customizations_template[100040].transientData.currentSnippetID;
                        if (utui.customizations_template[100040].snippetDataAPI.isDraftSnippet(snId)) {
                            try {
                                utui.customizations_template[100040].editorPanel.recordLastKnownCursorPostion(utui.customizations_template[100040].modalAceEditor.selection.getCursor());
                            } catch (e){}
                            if (utui.customizations_template[100040].transientData.handleEditorChangeEvents){
                                utui.customizations_template[100040].snippetDataAPI.updateSnippetCode(snId,mdlEd.getValue());
                                utui.util.pubsub.publish(utui.constants.code_dev_ext.SNIPPET_DATA_DIRTY);
                            }
                        }
                    }

                    mdlEd.on("change", modalEditorChangeHandler);

                    mdlEd.on("blur", modalEditorChangeHandler);
                }


                utui.customizations_template[100040].transientData.handleEditorChangeEvents = true;
                $('.js-modal-dismiss').safeOn('click', utui.customizations_template[100040].modalIde.dismiss);

            }
        },

        //------------------------------------------------------------------------------------------------------------------
        // The master render function for the modal window
        //------------------------------------------------------------------------------------------------------------------
		render : function(){
			var $body = $('body'),
				darkOverlay = '<div id="js-codedev-dark-overlay"></div>',
				mHtml = '';

			var currentSnippet = utui.customizations_template[100040].snippetDataAPI.getCurrentSnippet();

			$body.append(darkOverlay);

			mHtml += '<div id="js-codedev-modal-base">';
				mHtml += '<div id="js-codedev-modal-wrapper">';
					mHtml += '<div class="js-codedev-modal-content  ui-corner-all">';
						// Faux dialog title bar
						mHtml += '<div class="js-codedev-modal-titlebar ui-widget-header ui-corner-all">';
							mHtml += '<div style="padding : 5px;">';
								mHtml += '<span class="ui-dialog-title">'+currentSnippet.name+'</span>';
							mHtml += '</div>';
							mHtml += '<div >';
						    	mHtml += '<a href="#" class="js-modal-dismiss ui-dialog-titlebar-close ui-corner-all" role="button">';
						    		mHtml += '<span class="ui-icon ui-icon-closethick"></span>';
						    	mHtml += '</a>'
							mHtml += '</div>';
						mHtml += '</div>'
						// Full editor
						mHtml += '<div id="js-modal-editor" class="js-codedev-editor-modal">';
						mHtml += '</div>';
					mHtml += '</div>';
				mHtml += '</div>';
			mHtml += '</div>';

			$body.append(mHtml);

			utui.customizations_template[100040].modalIde.editorWindow.render();

			utui.customizations_template[100040].modalIde.adjustComponentSizes();
			utui.customizations_template[100040].panelAceEditor.focus();

			$(window).safeOn('resize', utui.customizations_template[100040].modalIde.adjustComponentSizes);
		},

        //------------------------------------------------------------------------------------------------------------------
        // Helper function to dynamically adjust the height of the window so that it fills the available space
        //------------------------------------------------------------------------------------------------------------------
		adjustComponentSizes : function(){
			var wrapperHeight = Math.floor($(window).height() - 50);
			var modalHeight = wrapperHeight - 65;
			var aceEdHeight = modalHeight - 30;

			$('#js-codedev-modal-wrapper').css('height',wrapperHeight);
			$('#js-modal-editor').css('height',modalHeight);
			$('#js-modal-ace-editor').css('height',aceEdHeight);
		},

        //------------------------------------------------------------------------------------------------------------------
        // Dismiss function to clear the modal away and sync the code with that in the main panel editor
        //------------------------------------------------------------------------------------------------------------------
		dismiss : function(){
			$(window).off('resize');
			$('#js-codedev-dark-overlay').remove();
			$('#js-codedev-modal-base').remove();
			var cursor = utui.customizations_template[100040].modalAceEditor.selection.getCursor();
            utui.customizations_template[100040].transientData.handleEditorChangeEvents = false;
            utui.customizations_template[100040].panelAceEditor.setValue(utui.customizations_template[100040].modalAceEditor.getValue());
            utui.customizations_template[100040].transientData.handleEditorChangeEvents = true;
            utui.customizations_template[100040].panelAceEditor.clearSelection();
			utui.customizations_template[100040].panelAceEditor.gotoLine(cursor.row + 1, cursor.column);
			utui.customizations_template[100040].modalAceEditor.destroy();
		}

	},
	codeDiff : {
		launchDiffWindow : function(originalSnippetId, deltaSnippetId) {
			var snippets = {
				original : utui.customizations_template[100040].snippetDataAPI.getSnippetById(originalSnippetId),
				delta : utui.customizations_template[100040].snippetDataAPI.getSnippetById(deltaSnippetId)
			};

            utui.customizations_template[100040].codeDiff.render(snippets);
		},
        //------------------------------------------------------------------------------------------------------------------
        // Render the diff window as a full screen modal
		//
        // var snippets = {
        //     original : { ...originalSnippet object... },
        //     delta : { ...deltaSnippet object ... }
        // };
        //------------------------------------------------------------------------------------------------------------------
        render : function(snippets){
            var $body = $('body'),
                darkOverlay = '<div id="js-codedev-dark-overlay"></div>',
            	mHtml = '';

            $body.append(darkOverlay);

            mHtml += '<div id="js-codedev-modal-base">';
            	mHtml += '<div id="js-codedev-modal-wrapper">';
            		mHtml += '<div class="js-codedev-modal-content  ui-corner-all">';
            			mHtml += '<div class="js-codedev-modal-titlebar ui-widget-header ui-corner-all">';
							mHtml += '<div style="padding:5px;">';
								mHtml += '<span class="ui-dialog-title">'
											+ localize.t("tiq.ext.code_dev.compare") + snippets.original.name
											+ localize.t("tiq.ext.code_dev.with") + snippets.delta.name
											+ '</span>';
							mHtml += '</div>';
							mHtml += '<div style="padding:3px;">';
								mHtml += '<a href="#" class="js-modal-dismiss ui-dialog-titlebar-close ui-corner-all" role="button">';
									mHtml += '<span class="ui-icon ui-icon-closethick"></span>';
								mHtml += '</a>';
							mHtml += '</div>';
            			mHtml += '</div>';
            			// Code diff window
            			mHtml += '<div id="js-codedev-diff-content" class="js-codedev-diff-content">';
            			mHtml += '</div>';
            		mHtml += '</div>';
            	mHtml += '</div>';
            mHtml += '</div>';

            $body.append(mHtml);

            utui.customizations_template[100040].codeDiff.diffContent.render(snippets);

            utui.customizations_template[100040].codeDiff.adjustComponentSizes();

            $(window).safeOn('resize', utui.customizations_template[100040].codeDiff.adjustComponentSizes);

            $('.js-modal-dismiss,#js-codedev-diff-closeBtn').safeOn('click', utui.customizations_template[100040].codeDiff.dismiss);
        },

        //------------------------------------------------------------------------------------------------------------------
        // Helper function to dynamically adjust the height of the window so that it fills the available space
        //------------------------------------------------------------------------------------------------------------------
        adjustComponentSizes : function(){
            var wrapperHeight = Math.floor($(window).height() - 50);
            var bodyContentHeight = wrapperHeight - 110;
            var scrollBarHeight = bodyContentHeight;

            $('#js-codedev-modal-wrapper').css('height',wrapperHeight);
            $('#js-codedev-diff-content-body-compare').css('height',bodyContentHeight);
            $('#js-codedev-diff-content-body-scrollbar').css('height',scrollBarHeight);

            utui.customizations_template[100040].codeDiff.diffContent.renderDiffNavBar();

            // Align the code cells with the headings and fill the space in the modal
            var baseCodeWidth = parseInt( $('#js-codedev-diff-heading-base').css('width')) - 30,
                deltaCodeWidth = parseInt( $('#js-codedev-diff-heading-delta').css('width')) -  50;

            $('.js-codedev-diff-cell-base').css('width',baseCodeWidth);
            $('.js-codedev-diff-cell-delta').css('width',deltaCodeWidth);

        },

        //------------------------------------------------------------------------------------------------------------------
        // Dismiss function to clear the modal away
        //------------------------------------------------------------------------------------------------------------------
        dismiss : function(){
            $(window).off('resize');
            $('#js-codedev-dark-overlay').remove();
            $('#js-codedev-modal-base').remove();
        },

        //------------------------------------------------------------------------------------------------------------------
        // Diff content window showing the two versions of the code.
        //------------------------------------------------------------------------------------------------------------------
		diffContent : {
            //------------------------------------------------------------------------------------------------------------------
            // Main render function:
			//
            // var snippets = {
            //     original : { ...originalSnippet object... },
            //     delta : { ...deltaSnippet object ... }
            // };
            //------------------------------------------------------------------------------------------------------------------
            render : function(snippets){
                var html = '';
                html += utui.customizations_template[100040].codeDiff.diffContent._buildHead(snippets);
                html += utui.customizations_template[100040].codeDiff.diffContent._buildBody(snippets);
                html += utui.customizations_template[100040].codeDiff.diffContent._buildFooter();


                var $diffContent = $("#js-codedev-diff-content");


                $diffContent.append(html);


            },
            //------------------------------------------------------------------------------------------------------------------
            // Renders the global nav column on the left of the code display - Allows the user to click and navigate to any
			// part of the output.
            //------------------------------------------------------------------------------------------------------------------
            renderDiffNavBar : function (){
                var a = '<span id="sbm_##num##" class="scrollbarmarker"></span>';
                var pixels = $('#js-codedev-diff-content').outerHeight();
                var v = '';
                var $diffTable = $('#diff-table-body');
                var $diffScrollBar = $('#js-codedev-diff-content-body-scrollbar');
				// Convenience function to get the height of a jQuery node
                function getCssHeight(jqObj){
                    return parseInt(jqObj.css('height').replace('px', ''));
                }


                for (var i = 0 ; i < pixels; i++) {
                    v += a.replace('##num##',i);
                }

               	$diffScrollBar.html(v);

                var ratio =$diffScrollBar.outerHeight() / $diffTable.outerHeight();
                $('.js-codedev-diff-added, .js-codedev-diff-removed').each(function(e, a) {
                    var relTopPos = Math.max(0,Math.round(ratio * a.offsetTop)-1), relBottomPos = Math.round(ratio * (a.offsetTop + a.offsetHeight))+1;
                    $('span#sbm_' + relTopPos , '#scrollbarmarker').addClass('scrollbarmark');
                    for ( var b = 0; b < (relBottomPos-relTopPos); b++) {
                        $('span#sbm_' + (relTopPos+b)).addClass('scrollbarmark');
                    }
                });

                var $diffContentBody = $('#js-codedev-diff-content-body-compare'),
					$allSBMarkerSpans = $('span.scrollbarmarker'),
					totRows = $allSBMarkerSpans.length,
					half = getCssHeight($diffContentBody)/2,
					diffTableHeight = getCssHeight($diffTable);

                // Add a click handler for the scrollbar markers
                $allSBMarkerSpans.safeOn('click',function (){
                    var clickPoint = parseInt(this.id.replace('sbm_',''));
					var locationRatio = clickPoint / totRows;
					var scrTop = parseInt(diffTableHeight * locationRatio);

					$diffContentBody.animate(
						{scrollTop : scrTop - half},400
					);

				})
            },

            //------------------------------------------------------------------------------------------------------------------
            // Renders the header block of the diff window with enlarged headings
            //
            // var snippets = {
            //     original : { ...originalSnippet object... },
            //     delta : { ...deltaSnippet object ... }
            // };
            //------------------------------------------------------------------------------------------------------------------
            _buildHead : function(snippets){
                var html = '';
                function mkDiffSnippetHeading(snippet){
                	if (typeof snippet.promotedBy === 'undefined') {
                		return localize.t("tiq.ext.code_dev.draft_prefix") + ": " + snippet.name;
					} else {
                		return localize.t("tiq.ext.code_dev.published_prefix") + ": " + utui.customizations_template[100040].capPubTarget(snippet.name);
                    }
				};

                html += '<div id="js-codedev-diff-content-head" class="js-codedev-diff-content-head">';
					html += '<div class="dialog-content-headline-title" id="js-codedev-diff-heading-base">' + mkDiffSnippetHeading(snippets.original) + '</div>';
					html += '<div class="dialog-content-headline-title" id="js-codedev-diff-heading-delta">' + mkDiffSnippetHeading(snippets.delta) + '</div>';
                html += '</div>';

                return html;
            },

            //------------------------------------------------------------------------------------------------------------------
            // Compares 2 snippets and builds the html to display the side-by-side comparison.
            //
            // var snippets = {
            //     original : { ...originalSnippet object... },
            //     delta : { ...deltaSnippet object ... }
            // };
            //------------------------------------------------------------------------------------------------------------------
            _buildBody : function(snippets){

                var html = '';
                html += '<div id="js-codedev-diff-content-body" class="js-codedev-diff-content-body">';
                html += '<div id="js-codedev-diff-content-body-scrollbar">';
                html += '</div>';
                html += '<div id="js-codedev-diff-content-body-compare" class="js-codedev-diff-content-body-compare">';
                html += '<table class="js-codedev-diff-table"><thead></thead>';
                html += '<tbody id="diff-table-body">';
                html += compareSnippets(snippets);
                html += '</tbody>';
                html += '</table>';
                html += '</div>';
                html += '</div>';

                return html;


                //------------------------------------------------------------------------------------------------------------------
                // The compares 2 snippets and renders the html to draw the diff window.
                //
                // var snippets = {
                //     original : { ...originalSnippet object... },
                //     delta : { ...deltaSnippet object ... }
                // };
                //------------------------------------------------------------------------------------------------------------------
                function compareSnippets(snippets){
                    var originalCode = utui.util.safeUnescape(snippets.original.code),
                        deltaCode = utui.util.safeUnescape(snippets.delta.code),
                        originalLinecount = originalCode.split("\n").length,
                        deltaLinecount = deltaCode.split("\n").length;


                    var twoFilesPatch =
                        JsDiff.createTwoFilesPatch(
                            snippets.original.name,
                            snippets.delta.name,
                            utui.util.safeUnescape(snippets.original.code),
                            utui.util.safeUnescape(snippets.delta.code),
                            '', '',
                            {context:originalLinecount > deltaLinecount ? originalLinecount : deltaLinecount}); // Use the maximum linecount as context to give a full output.

                    if (typeof utui_debug_codedev_diff !== 'undefined') {
                        // console.log("\nORIGINAL CODE:");
                        // console.log(utui.util.safeUnescape(snippets.original.code));
                        var oc = utui.util.safeUnescape(snippets.original.code).split("\n");
                        // console.dir(oc);
                        // console.log("\nDELTA CODE:");
                        // console.log(utui.util.safeUnescape(snippets.delta.code));
                        var dc = utui.util.safeUnescape(snippets.delta.code).split("\n");
                        // console.dir(dc);
                        // console.log(twoFilesPatch.toString());
                    }

                    var originalSrcLines = utui.util.safeUnescape(snippets.original.code).split('\n'),
                        diffOutputLines = twoFilesPatch.split('\n'),
                        isIdentical = false;

                    // Strip off extraneous junk in the output.
                    diffOutputLines.splice(0,1);
                    diffOutputLines.splice(-1,1);

                    if (diffOutputLines.length === 2) {
                        //file is identical
                        diffOutputLines = [];
                        isIdentical = true;
                    }

                    // Strip off the extraneous error message that sometimes appears in the output
                    var junkIdx = 0;
                    do {
                        junkIdx = _.indexOf(diffOutputLines, "\\ No newline at end of file");
                        if (junkIdx !== -1){
                            diffOutputLines.splice(junkIdx,1);
                        }
                    } while(junkIdx !== -1);

					// Pass the JSDiff output to be rendered into HTML and return it.
                    return generateDiffContentHtml({'file' : originalSrcLines, 'diff' : diffOutputLines, "identical": isIdentical});

                }

                //------------------------------------------------------------------------------------------------------------------
                // Parses the output produced by JSDiff and generates html to display the side-by-side colored comparison.
                //------------------------------------------------------------------------------------------------------------------
                function generateDiffContentHtml(data) {
                    var base = data.file,
                        objs = data.diff,
                        baseLC = 1,
                        newLC = 1,
                        html = '';

                    if ( ! data.identical) {
                        var deletedLines = [],
                            addedLines = [];

                        for (var i = 3; i < objs.length; i++ ){ // Skip the heading lines and start on the 4th line
                            // Split off the diff action operand from the content text
                            var lineContent = objs[i].substr(1),
                                operand = objs[i].substr(0,1);

                            // Validate the operand
                            if (operand === '+'){
                                addedLines.push(lineContent); 	// Accumulate lines that have been added
                            } else if (operand === '-'){
                                deletedLines.push(lineContent); // Accumulate deleted lines
                            } else {
                                var dLine;
                                while ((dLine = deletedLines.shift()) !== undefined){ // Display the deleted lines against their replacements or empty slots
                                    if (addedLines.length) { 	// Either a replacement or deletion
                                        html += createDiffRow(baseLC++, newLC++, dLine, addedLines.shift(), 'diff-removed', 'diff-added'); // Replacement
                                    } else {
                                        html += createDiffRow(baseLC++, '', dLine, '', 'diff-removed', 'diff-padding'); // Deletion
                                    }
                                }
                                var aLine;
                                while ((aLine = addedLines.shift()) !== undefined){ // Display any remaining new lines not paired with a deletion.
                                    html += createDiffRow('', newLC++, '', aLine, 'diff-padding', 'diff-added');
                                }
                                html += createDiffRow(baseLC++, newLC++, lineContent, lineContent);
                            }
                        }
                        // Display any left over lines remaining at the end of the output
                        var remainingDLines;
                        while ((remainingDLines = deletedLines.shift()) !== undefined){
                            if (addedLines.length){
                                html += createDiffRow(baseLC++, newLC++, remainingDLines, addedLines.shift(), 'diff-removed', 'diff-added');
                            } else {
                                html += createDiffRow(baseLC++, '', remainingDLines, '', 'diff-removed', 'diff-padding');
                            }
                        }
                        var remainingAddedlines;
                        while ((remainingAddedlines = addedLines.shift()) !== undefined){
                            html += createDiffRow('', newLC++, '', remainingAddedlines, 'diff-padding', 'diff-added');
                        }

                    } else { // For identical files, just display the output uncolored , side-by-side
                        base.forEach(function(lineContent){
                            html += createDiffRow(baseLC++, newLC++, lineContent, lineContent);
                        });
                    }

                    return html;
                }

                //------------------------------------------------------------------------------------------------------------------
                // Generates one table row containing the both source lines and line numbers. Adds coloring styles depending on state.
                //------------------------------------------------------------------------------------------------------------------
                function createDiffRow(baseLC, newLC, basetxt, newtxt, c1, c2) {
                    var html ='', style1 = 'class="js-codedev-diff-cell ', style2 = 'class="js-codedev-diff-cell ';

                    if (c1 === "diff-removed") {
                        style1+='js-codedev-diff-removed';
                    } else if (c1 === "diff-padding") {
                        style1+='js-codedev-diff-padding';
                    }

                    if (c2 === "diff-added") {
                        style2+='js-codedev-diff-added';
                    } else if (c2 === "diff-padding") {
                        style2+='js-codedev-diff-padding';
                    }
                    style1+='"';
                    style2+='"';

                    html += '<tr><th>' + baseLC + '</th>';
                    html += '<td '+style1+'><div class="js-codedev-diff-cell-base">' + utui.util.safeEscape(basetxt) + '</div></td>';
                    html += '<th>' + newLC + '</th>';
                    html += '<td '+style2+'><div  class="js-codedev-diff-cell-delta">' + utui.util.safeEscape(newtxt) + '</div></td>';
                    return html;
                }

            },
            _buildFooter : function(){
                var html = '';
                html += '<div id="js-codedev-diff-content-footer" class="js-codedev-diff-content-footer">';

                html += '<a id="js-codedev-diff-closeBtn" href="#" class="btn btn-block i-color-copy">'+localize.t('tiq.dialog.button.close')+'</a>';
                html += '</div>';

                return html;
            }
		}


	},
    //------------------------------------------------------------------------------------------------------------------
    // Standard Extension fillData method
    //------------------------------------------------------------------------------------------------------------------
	fillData: function (container) {
		var obj = exapi.getObjectByExtensionId(container),
			extId = container,
			tooltipObj = {},
			self = this,
			content = '',
            editorPanel =  utui.customizations_template[100040].editorPanel,
			snippetDataAPI = utui.customizations_template[100040].snippetDataAPI,
			targets = ['prod','qa','dev'];

		utui.customizations_template[100040].setExtId(extId);
        editorPanel.init(extId,obj);
		snippetDataAPI.init(obj);

		this.container = container;

		// -----------------------------------------------------------------
		// Append READ ONLY view
		$('#customizations_'+container+'_contentReadOnly').html( utui.customizations_template.shared.getReadOnlyView(obj) );

        // -----------------------------------------------------------------
		// Render READ ONLY view
		utui.customizations_template.shared.populateReadOnlyView(obj);

        content += '<div class="container-fluid" >';
			//---------------
			// Draft Mode Editor Panel
			//---------------
        	content += '<div class="row-fluid" id="dmEditPanel"></div>';
        	//---------------
        	// Conditions
	        //---------------
        	content += '<div class="row-fluid" style="margin-top:10px;" id="dmConditionContainer">';
				content += '<div class="customization_div" id="inactive_ext_conds" style="margin-top:20px;display:none">';
					content += '<div style="float:left"><i class="icon-info-sign"></i>&nbsp;' + localize.t('tiq.ext.cond_exec_inactive') + '</div>';
				content += '</div>';
				content += '<div class="customization_div" id="' + container + '_ext_cond_block">';
					content += '<div class="customization_label" style="float:left">' + localize.t('tiq.ext.condition') + '</div>';
					content += '<div class="customization_item" style="margin-left:2px;float:left"><button id="button_addcondition" class="btn btn-mini">' + localize.t('tiq.ext.add_condition') + '</button></div>';
					content += '<div id="' + container + '_conditioncontainer" class="customization_item" style="float:left"></div>';
				content += '</div>';
			content += '</div>';
		content += '</div>';

		$('#customizations_' + extId + '_content').html(content);
		$('#customizations_' + extId + '_content').css('min-width','1030px');

		$('#title').val(obj.title);

		editorPanel.init(container);
		editorPanel.render("dmEditPanel");

		// Set up the conditions for ext 100040
		utui.customizations_template.shared.populateExtensionConditionsOnFillData(container, obj,this.id);

		// Add click handler for add condition button
        $('#button_addcondition').safeOn('click',function(e){
            $('#button_addcondition').hide();
            utui.customizations_template[100040].addCondition(container);
            utui.customizations.updateExtensionData(utui.customizations_template[100040].transientData.extId);
		});

		if (utui.customizations_template.shared.isDisableExtConds(extId)) {
			utui.customizations_template.shared.disableExtensionConditions(extId);
		} else {
			utui.customizations_template.shared.enableExtensionConditions(extId);
		}

	},

    //------------------------------------------------------------------------------------------------------------------
    //
    //------------------------------------------------------------------------------------------------------------------
	addCondition:function(container,instanceId){
		var rtn = utui.customizations_template.shared.addExtensionCondition(this, container, instanceId);
		return rtn;
	},

    //------------------------------------------------------------------------------------------------------------------
    //
    //------------------------------------------------------------------------------------------------------------------
	addAndCondition:function(container,instanceId){
		return utui.customizations_template.shared.addExtensionAndCondition(this, container, instanceId);
	},

    //------------------------------------------------------------------------------------------------------------------
    //
    //------------------------------------------------------------------------------------------------------------------
	removeCondition:function(container){
		var rtn = utui.customizations_template.shared.removeExtensionCondition(this, container);
		return rtn;
	},

    //------------------------------------------------------------------------------------------------------------------
    //
    //------------------------------------------------------------------------------------------------------------------
	removeAndCondition:function(container){
		return utui.customizations_template.shared.removeExtensionAndCondition(this, container);
	},

    //------------------------------------------------------------------------------------------------------------------
    //
    //------------------------------------------------------------------------------------------------------------------
	show: function (container) {},

    validateModel: function(extObj) {
        var conditionCollection = utui.util.interpret.extension.condition.toFormatted(extObj),
            validationObj = {},
            message,
            entryCollection,
            entryItem,
            key;

        var getInstanceKey = function(obj, key) {
            if(obj._instanceId === '0')
                return obj._parentInstanceId + '_' + key;
            else
                return obj._parentInstanceId + '_' + obj._instanceId + '_' + key;
        };

        utui.validation.removeInstanceByTypeAndId('customizations',extObj._id);

        if(conditionCollection.length > 0) {

            for (var i = 0; i < conditionCollection.length; i++) {
                entryCollection = conditionCollection[i];

                for(var j = 0; j < entryCollection.length; j++) {
                    entryItem = entryCollection[j];

                    key = getInstanceKey(entryItem, 'source');

                    if(entryItem.source === '') {
                        message = localize.t('tiq.validation.message.define_variable');
                        validationObj[key] = message;

                        utui.validation.setValidation('customizations',extObj._id, key, message, 'blank');
                    }
                    else if(entryItem.source === 'textvalue') {
                        // do nothing
                        continue;
                    }
                    else if(!dsapi.isExistingGlobalVariable(entryItem.source)) {
                        message = utui.validation.message.missingVariable( entryItem.source );
                        validationObj[key] = message;

                        utui.validation.setValidation('customizations',extObj._id, key, message, 'missing', entryItem.source);
                    }

                }
            }

        }


        return validationObj;
    },


    // -----------------------------------------------
	// Verifies the entry strictly based on what's in the data model
	// @return true if all extension input conditions are valid and error-free
	isValid: function(container) {
        if(!$.isEmptyObject(this.validateModel(utui.data.customizations[container]))) {
            return false;
        }

        return true;
	}
};

// Fix IE8+ crossdomain ajax requests
if (window.XDomainRequest) {
  jQuery.ajaxTransport(function (s) {
    if (s.crossDomain && s.async) {
      if (s.timeout) {
        s.xdrTimeout = s.timeout;
        delete s.timeout;
      }
      var xdr;
      return {
        send : function (_, complete) {
          function callback(status, statusText, responses, responseHeaders) {
            xdr.onload = xdr.onerror = xdr.ontimeout = jQuery.noop;
            xdr = undefined;
            complete(status, statusText, responses, responseHeaders);
          }
          
          xdr = new XDomainRequest();
          xdr.onload = function () {
            callback(200, "OK", {text: xdr.responseText}, "Content-Type: " + xdr.contentType);
          };
          xdr.onerror = function () {
            callback(404, "Not Found");
          };
          xdr.onprogress = jQuery.noop;
          xdr.ontimeout = function () {
            callback(0, "timeout");
          };
          xdr.timeout = s.xdrTimeout || Number.MAX_VALUE;
          xdr.open(s.type, s.url);
          xdr.send(( s.hasContent && s.data ) || null);
        },
        abort: function () {
          if (xdr) {
            xdr.onerror = jQuery.noop;
            xdr.abort();
          }
        }
      };
    }
  });
}

utui.service = function () {
  var _urest        = {
        context: 'urest'
      },
      _errorCodeMap = {};
  
  function _resolveCmd(cmd, dataObj) {
    var dataObj = dataObj || {},
        account = dataObj.account || '',
        profile = dataObj.profile || '';
    
    if (!account) {
      if (utui.data && utui.data.settings) {
        account = utui.data.settings.account || '';
      }
      else {
        account = utui.login.account || '';
      }
    }
    
    if (!profile) {
      if (utui.data && utui.data.settings) {
        profile = utui.data.settings.profileid || '';
      }
      else {
        profile = utui.login.profile || '';
      }
    }
    
    return cmd.replace(/\$\$account\$\$/g, account).replace(/\$\$profile\$\$/g, profile);
  }
  
  // Filters the response by unescaping specific fields such as regular expressions and javascript code
  function _filterResponse(cmd, response) {
    // List of commands to filter
    var cmdList       = [_restapis.GET_PROFILE, _restapis.GET_TEMPLATE],
        // Recursive function used to unescape value if match is found
        parseResponse = function (obj, filterarray) {
          for (var key in obj) {
            if (filterarray[0].test(key)) {
              if (filterarray.length > 1) {
                // Remove the first index from the copied array
                var filterarrayCopy = filterarray.slice();
                filterarrayCopy.shift();
                parseResponse(obj[key], filterarrayCopy);
              } else {
                // Update the value
                obj[key] = _.unescape(obj[key]);
              }
            }
          }
        };
    
    // If this command is within our filter list, process it!
    if (response && $.inArray(cmd, cmdList) > -1) {
//			parseResponse(response, [/^loadrules$/,/^[0-9]*$/,/^[0-9]*$/,/^filter_[0-9]*$/]);
      parseResponse(response, [/^customizations$/, /^[0-9]*$/, /^code$/]);
      parseResponse(response, [/^customizations$/, /^[0-9]*$/, /^[0-9]+_domcontent$/]);
      parseResponse(response, [/^content$/]);
		parseResponse(response, [/^privacy_management$/, /^preferences$/, /^content$/, /^css$/]);
		parseResponse(response, [/^privacy_management$/, /^preferences$/, /^content$/, /^html$/]);
		parseResponse(response, [/^privacy_management$/, /^preferences$/, /^content$/, /^javascript$/]);
    }
    return response;
  }
  
  var _apis = {
    ADMIN  : utui.server.admin,
    CONTENT: utui.server.content,
    LOGIN  : utui.server.login,
    PING   : utui.server.ping,
    PROFILE: utui.server.profile,
    PUBLISH: utui.server.publish,
    TEST   : utui.server.test,
    USER   : utui.server.user
  };
  
  var _restapis = {
    WORKFLOW_ASK             : '/' + _urest.context + "/approval/request",
    WORKFLOW_PENDING         : '/' + _urest.context + "/approval/pending",
    WORKFLOW_APPROVE_COMPLETE: '/' + _urest.context + "/approval/approve",
    WORKFLOW_DECLINE         : '/' + _urest.context + "/approval/decline",
    TAG_RATINGS              : '/' + _urest.context + '/marketplace',
    USER_TAG_RATINGS         : '/' + _urest.context + '/marketplace/user',
    LITHIUM_COMMUNITY        : '/' + _urest.context + '/community/lithium/token',
    PING                     : '/' + _urest.context + '/ping',
    COPY_REVISION            : '/' + _urest.context + '/legacy/$$account$$/$$profile$$/copyRevision',
    CREATE_ACCOUNT           : '/' + _urest.context + '/legacy/createAccount',
    CREATE_PROFILE           : '/' + _urest.context + '/legacy/createProfile',
    DATACLOUD                : '/' + _urest.context + '/accounts/$$account$$/$$profile$$/datacloud',
    DATACLOUD_PROFILES       : '/' + _urest.context + '/datacloud/$$account$$/profiles/enabled',
    DROP_TEMPLATE            : '/' + _urest.context + '/legacy/dropTemplate',
    
    FREE_TRIAL        : '/' + _urest.context + '/freetrial_admin/$$account$$',
    FREE_TRIAL_EXTEND : '/' + _urest.context + '/freetrial_admin/$$account$$/extend/$$duration_days$$',
    FREE_TRIAL_UPGRADE: '/' + _urest.context + '/freetrial_admin/$$account$$/upgrade',
    FREE_TRIAL_EXPIRE : '/' + _urest.context + '/freetrial_admin/$$account$$/expire',
    
    SELF_SERVICE_PLANS                  : '/' + _urest.context + '/self_service/plans',
    SELF_SERVICE_SUBSCRIPTION           : '/' + _urest.context + '/self_service/subscriptions/accounts/$$account$$',
    SELF_SERVICE_SUBSCRIPTION_REACTIVATE: '/' + _urest.context + '/self_service/subscriptions/accounts/$$account$$/reactivate',
    SELF_SERVICE_BILLING                : '/' + _urest.context + '/self_service/accounts/$$account$$',
    SELF_SERVICE_INVOICES               : '/' + _urest.context + '/self_service/invoices/accounts/$$account$$',
    SELF_SERVICE_SIGNATURE              : '/' + _urest.context + '/self_service/signatures/accounts/$$account$$',
    SELF_SERVICE_USAGE                  : '/' + _urest.context + '/self_service/usages/accounts/$$account$$/start/$$start$$/end/$$end$$',
    SELF_SERVICE_RECURLY_SUBSCRIBE      : 'https://$$subdomain$$.recurly.com/jsonp/$$subdomain$$/subscribe',
    SELF_SERVICE_RECURLY_UPDATE         : 'https://$$subdomain$$.recurly.com/jsonp/$$subdomain$$/accounts/$$account$$/billing_info/update',

    //FRESH DESK
    FRESHDESK_SSO : '/' + _urest.context + 'freshdesk/token',

    ACCOUNT          : '/' + _urest.context + '/accounts/$$account$$',
    ACCOUNTS         : '/' + _urest.context + '/accounts',
    USERS            : '/' + _urest.context + '/users',
    USERS_ACCOUNT    : '/' + _urest.context + '/users/$$username$$/accounts/$$account$$',
    USERS_ALL_ACCOUNT: '/' + _urest.context + '/users/accounts/$$account$$',
    USERS_PROFILE    : '/' + _urest.context + '/users/accounts/$$account$$/profiles/$$profile$$',
    USERS_PERMISSIONS: '/' + _urest.context + '/users/permissions',
    
    USERS_ADD_ACCOUNT_PERMISSIONS       : '/' + _urest.context + '/users/accounts/$$account$$/permissions/add',
    USERS_REMOVE_ACCOUNT_PERMISSIONS    : '/' + _urest.context + '/users/accounts/$$account$$/permissions/remove',
    USERS_ADD_PROFILE_PERMISSIONS       : '/' + _urest.context + '/users/accounts/$$account$$/profiles/permissions/add',
    USERS_REMOVE_PROFILE_PERMISSIONS    : '/' + _urest.context + '/users/accounts/$$account$$/profiles/permissions/remove',
    USERS_ADD_ALL_PROFILE_PERMISSIONS   : '/' + _urest.context + '/users/accounts/$$account$$/profiles/permissions/addeall',
    USERS_REMOVE_ALL_PROFILE_PERMISSIONS: '/' + _urest.context + '/users/accounts/$$account$$/profiles/permissions/removeall',
    
    EDIT_USER      : '/' + _urest.context + '/users/$$username$$',
    EDIT_PASSWORD  : '/' + _urest.context + '/users/$$username$$/password',
    RESET_MFA_TOKEN: '/' + _urest.context + '/users/$$username$$/accounts/$$account$$/profiles/$$profile$$/mfa',
    GET_ACCOUNTS   : '/' + _urest.context + '/users/accounts',
    
    /* deprecated */
    GET_NEXT_TAG_ID: '/' + _urest.context + '/nexttagid/$$account$$/$$profile$$',
    GET_NEXT_ID    : '/' + _urest.context + '/next_unique_id/$$account$$/$$profile$$/next_$$type$$_id',
    
    GET_PROFILES               : '/' + _urest.context + '/users/$$account$$/profiles',
    GET_PROFILE_FOR_ENV        : '/' + _urest.context + '/legacy/$$account$$/$$profile$$/envProfile',
    GET_PROFILE                : '/' + _urest.context + '/legacy/getProfile',
    GET_REVISIONS              : '/' + _urest.context + '/legacy/getRevisions',
    GET_TEMPLATE               : '/' + _urest.context + '/legacy/getTemplate',
    GET_TEMPLATE_LIST          : '/' + _urest.context + '/legacy/getTemplateList',
    GET_UCONNECT_FOR_ACCOUNT   : '/' + _urest.context + '/legacy/getUConnectForAccount',
    INITIATE_PURGE             : '/' + _urest.context + '/legacy/$$account$$/$$profile$$/initiatePurge',
    LOG_OUT                    : '/' + _urest.context + '/users/logout',
    PASSWORD_POLICY            : '/' + _urest.context + '/accounts/$$account$$/password_policy',
    MARKETPLACE_POLICY         : '/' + _urest.context + '/accounts/$$account$$/marketplace',
    PUBLISH                    : '/' + _urest.context + '/legacy/publish/publishData',
    REMOVE_ACCOUNT             : '/' + _urest.context + '/legacy/removeAccount',
    REMOVE_PROFILE             : '/' + _urest.context + '/legacy/removeProfile',
    SAVE_PROFILE               : '/' + _urest.context + '/legacy/saveProfile',
    SAVE_PUBLISH_CONFIG        : '/' + _urest.context + '/legacy/$$account$$/$$profile$$/savePublishConfig',
    SAVE_TEMPLATE              : '/' + _urest.context + '/legacy/saveTemplate',
    SHOW_SCHEDULE              : '/' + _urest.context + '/legacy/showSchedule',
    TOOLBOX                    : '/' + _urest.context + '/legacy/$$account$$/$$profile$$/content/toolbox',
    UPDATE_UCONNECT_FOR_ACCOUNT: '/' + _urest.context + '/legacy/updateUConnectForAccount',
    
    GET_IMPORTABLE_LIBRARIES: '/' + _urest.context + '/accounts/<account_name>/all_profiles',
    
    AUDITS                   : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/audit/$$auditId$$',
    AUDITS_ACCOUNT           : '/' + _urest.context + '/audit/account/$$account$$',
    AUDITS_LIST              : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/audit',
    AUDITS_SITEMAPS          : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/sitemap',
    AUDITS_SITEMAP_VERIFY    : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/sitemap/verify',
    AUDITS_REPORTS           : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/audit/$$auditId$$/report',
    AUDITS_REPORT            : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/report/$$reportId$$',
    AUDITS_REPORT_MISSING    : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/report/$$reportId$$/missing',
    AUDITS_REPORT_ERRORS     : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/report/$$reportId$$/error',
    AUDITS_REPORT_UNMANAGED  : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/report/$$reportId$$/unmanaged',
    AUDITS_REPORT_ENVIRONMENT: '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/report/$$reportId$$/environment/$$reportaccount$$/$$reportprofile$$/$$environment$$',
    SCAN_COMPANION_REPORTS   : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/scan_companion_reports',
    SCAN_COMPANION_REPORT    : '/' + _urest.context + '/audit/account/$$acount$$/profile/$$profile$$/scan_companion/$$reportId$$',
    
    PROFILE_IMAGE: '/' + _urest.context + '/accounts/$$account$$/profile/$$profile$$/image',
    VERIFY_URL   : '/' + _urest.context + '/accounts/$$account$$/profile/$$profile$$/url/verify',
    
    GO_LIVE: '/' + _urest.context + '/accounts/$$account$$/go_live',
    
    SVRSTREAM_ACCOUNT: '/' + _urest.context + '/accounts/$$account$$/svrstream',
    
    HISTORY_LABELS        : '/' + _urest.context + '/accounts/$$account$$/labels',
    HISTORY_LABELS_MAPPING: '/' + _urest.context + '/accounts/$$account$$/profile/$$profile$$/revision_mapping',
    
    TAG_USAGE_ACCOUNT: '/' + _urest.context + '/tag_usage/$$account$$/$$start$$/$$end$$',
    TAG_USAGE_PROFILE: '/' + _urest.context + '/tag_usage/$$account$$/$$profile$$/$$start$$/$$end$$',
    
    TAG_CONFIG               : '/' + _urest.context + '/tags/$$account$$/tag_configuration',
    TAG_CONFIG_WITH_TAGID    : '/' + _urest.context + '/tags/$$account$$/$$tagId$$/tag_configuration',
    TAG_CONFIG_SUPPORTED_TAGS: '/' + _urest.context + '/tags/$$account$$/fingerprints',
    
    LABELS: '/' + _urest.context + '/accounts/$$account$$/profile/$$profile$$/version/$$version$$/labels',
    
    GET_VERSION_REVISIONS         : '/' + _urest.context + '/profiledistro/$$account$$/$$profile$$/$$version$$/revisions',
    GET_PROFILEDISTRO_MANIFEST    : '/' + _urest.context + '/profiledistro/$$account$$/$$profile$$/$$version$$/$$revision$$/$$env$$/distromanifest',
    GET_PROFILEDISTRO_COMPARE     : '/' + _urest.context + '/profiledistro/$$account$$/$$profile$$/$$version$$/$$revision$$/$$env$$/comparison',
    GET_PROFILEDISTRO_COMPARE_FILE: '/' + _urest.context + '/profiledistro/$$account$$/$$profile$$/$$version$$/$$revision$$/$$env$$/comparison/$$file$$',
    
    GET_DATA_LAYER_SPECS       : '/' + _urest.context + '/tiqverifier/$$account$$/$$profile$$/version/$$version$$/dataspec',
    GET_NEXT_DATA_LAYER_SPEC_ID: '/' + _urest.context + '/tiqverifier/$$account$$/$$profile$$/dataspec/id',
    GET_TEST_CONFIGS           : '/' + _urest.context + '/tiqverifier/$$account$$/$$profile$$/version/$$version$$/testconfig',
    GET_NEXT_TEST_CONFIG_ID    : '/' + _urest.context + '/tiqverifier/$$account$$/$$profile$$/testconfig/id',
    RUN_TEST_CONFIG_NOW        : '/' + _urest.context + '/tiqverifier/$$account$$/$$profile$$/testconfig/runjob/$$id$$/$$env$$',
    GET_TEST_RESULT_BY_ID      : '/' + _urest.context + '/tiqverifier/$$account$$/$$profile$$/result/$$id$$',
    DELETE_TEST_RESULT         : '/' + _urest.context + '/tiqverifier/$$account$$/$$profile$$/result/$$id$$',
    
    SSO_SAML_LOGIN: _apis.LOGIN + '/sso',
  
    API_KEY_AUTHORIZE : '/' + _urest.context + '/api-key/authorize',
    API_KEY_AUTH_CHECK: '/' + _urest.context + '/api-key/is_authorized',
    API_KEY_GENERATE  : '/' + _urest.context + '/api-key/generate',
    API_KEY_RETRIEVE  : '/' + _urest.context + '/api-key/$$username$$/info',
    API_KEY_REVOKE    : '/' + _urest.context + '/api-key/revoke',
	  ACCOUNT_PRIVACY_SETTINGS  : '/' + _urest.context + '/accounts/$$account$$/privacy_manager',
  };
  
  var _options = {
    JSON: {contentType: 'application/json; charset=UTF-8'},
    FORM: {contentType: 'application/x-www-form-urlencoded; charset=UTF-8'},
    TEXT: {contentType: 'text/plain; charset=UTF-8'}
  };
  //-------------------------------------------------------------------------------------------------
  // Handler for empty responses from uRest - jQuery throws and exception when parsing empty strings
  // as JSON
  function urestEmptyDataFilter(data, type) {
    if (type == "json" && _.isEmpty(data)) {
      data = "{}";
    }
    return data;
  }
  
  function convertsOverride() {
    var converters = _.clone($.ajaxSettings.converters);
    converters["text json"] = function (data) {
      return utui.util.safeParseJSON(data);
    };
    return converters;
  }
  
  function _ajax(method, serverCmd, dataObj, options, successCB, errorCB) {
    var originalCmd = serverCmd;
    
    // Do timediff to see if user is timedout
    if (serverCmd !== _restapis.LOG_OUT && !utui.util.isSessionAlive()) {
      // session timeout; logout the user
      utui.users.logout();
      return;
    }
    
    if (utui.isLoggedIn === false) {
      return;
    }
    
    if (serverCmd === _restapis.LOG_OUT) {
      utui.isLoggedIn = false;
    }
    
    // append unique token to URL
    if (utui.util.getUTK()) {
      serverCmd += (serverCmd.indexOf('?') > -1) ? '&' : '?';
      serverCmd += 'utk=' + utui.util.getUTK();
    }
    
    var options = $.extend({
      url       : serverCmd,
      data      : dataObj,
      dataType  : 'json',
      converters: convertsOverride(),
      dataFilter: urestEmptyDataFilter,
      cache     : false
    }, {type: method}, options);
    
    var $req = $.ajax(options);
    
    $req.done(
      function (data) {
        data = _filterResponse(originalCmd, data);
        if (successCB) {
          successCB(data);
        }
      }
    ).fail(
      function (jqXHR, textStatus, errorThrown) {
        TRACE("request failed, status = " + textStatus);
        TRACE("errorThrown = " + errorThrown);
        
        if (errorCB) {
          errorCB(textStatus, jqXHR);
          
        } else {
          utui.util.loadingModalStop();
          
          // No error callback is specified
          if (jqXHR && jqXHR.status === 401) {
            utui.util.showPermissionErrorDialog();
          }
        }
      }
    );
    
    return $req;
  }
  
  return {
    // ----------------------------------------------------------------
    apis: _apis,
    
    // ----------------------------------------------------------------
    restapis: _restapis,
    
    // ----------------------------------------------------------------
    options: _options,
    
    // ----------------------------------------------------------------
    get: function (serverCmd, dataObj, options, successCB, errorCB) {
      serverCmd = _resolveCmd(serverCmd, dataObj);
      return _ajax('GET', serverCmd, dataObj, options, successCB, errorCB);
    },
    
    // ----------------------------------------------------------------
    post: function (serverCmd, dataObj, options, successCB, errorCB) {
      serverCmd = _resolveCmd(serverCmd, dataObj);
      
      return _ajax('POST', serverCmd, dataObj, options, successCB, errorCB);
    },
    
    // ----------------------------------------------------------------
    put: function (serverCmd, dataObj, options, successCB, errorCB) {
      serverCmd = _resolveCmd(serverCmd, dataObj);
      
      return _ajax('PUT', serverCmd, dataObj, options, successCB, errorCB);
    },
    
    // ----------------------------------------------------------------
    'delete': function (serverCmd, dataObj, options, successCB, errorCB) {
      serverCmd = _resolveCmd(serverCmd, dataObj);
      
      return _ajax('DELETE', serverCmd, dataObj, options, successCB, errorCB);
    },
    
    // ----------------------------------------------------------------
    'head': function (serverCmd, dataObj, options, successCB, errorCB) {
      serverCmd = _resolveCmd(serverCmd, dataObj);
      
      return _ajax('HEAD', serverCmd, dataObj, options, successCB, errorCB);
    },
    
    // ----------------------------------------------------------------
    // Returns the error message if the response code is in the error code map
    getErrorFromResponse: function (response, map, defaultMessage) {
      if (!response) return defaultMessage;
      
      // Unauthorized
      if (response.status === 403 || response.status === 401) {
        utui.util.showPermissionErrorDialog();
        return '';
      }
      
      try {
        var errorCodeMap = $.extend({}, _errorCodeMap, map);
        
        var error = utui.util.safeParseJSON(response.responseText),
            msg   = errorCodeMap[error.returnCode] || defaultMessage;
        return msg;
        
      } catch (e) {
        return defaultMessage;
      }
    },
    
    // ----------------------------------------------------------------
    // Convenience method so we don't have to add the account and profile in every method
    addParamsToURL: function (url, list) {
      if (list && !$.isEmptyObject(list)) {
        for (var key in list) {
          var reg = new RegExp('\\$\\$' + key + '\\$\\$', 'g');
          url = url.replace(reg, list[key]);
        }
      }
      return url;
    }
  }
}();


utui.labels = {
    MAX_COLORS: 40,
    MAX_CHARS_PER_LABEL: 80,
	ERROR_MSG_LABEL_TOO_LONG : localize.t('tiq.labels.error.msg_label_too_long'),
	ERROR_MSG_LABEL_NAME_REQUIRED : localize.t('tiq.labels.error.msg_label_name_required'),
	ERROR_MSG_INVALID_LABEL_NAME : localize.t('tiq.labels.error.msg_invalid_label_name'),
	ERROR_MSG_INVALID_LABEL_CHARS : localize.t('tiq.labels.error.msg_invalid_label_chars'),
	ERROR_MSG_SERVER_ERROR_UPDATE : localize.t('tiq.labels.error.msg_server_error_update'),
	ERROR_MSG_SERVER_ERROR_DELETE : localize.t('tiq.labels.error.msg_server_error_delete'),
	ERROR_MSG_SECURE_LABEL_INVALID_PERMISSIONS : localize.t('tiq.labels.error.msg_secure_label_invalid_permissions'),
	ALL_LABELS : localize.t('tiq.labels.all_labels'),

	// --------------------------------------------------------
	init: function (data) {
		utui.data.labels = {};
		for (var key in data) {
			var label = data[key];

			if ($.type(label) !== 'object') {
				utui.data.labels[key] = {name: _.unescape(label), color: utui.labels.getLabelColorById(key)};
			} else {
				utui.data.labels[key] = {name: _.unescape(label.name), color: label.color};
				if (label.security_list) {
					// If the security_list is a string than we must convert it to an array
					if ($.type(label.security_list) === 'string') {
						label.security_list = label.security_list.split(',');
					}
					utui.data.labels[key].security_list = label.security_list;
				}
			}
		}
	},

	// --------------------------------------------------------
	addLabel: function (labelName, color, security_list, callback) {
		callback = callback || function(){};

		if (!labelName) {
			callback(null, utui.labels.ERROR_MSG_LABEL_NAME_REQUIRED);
			return;
		}

		// If the label already exists, don't add it
		if (this.hasLabel(labelName)) {
			callback(null, utui.labels.ERROR_MSG_INVALID_LABEL_NAME);
			return
		}

		// Validate that labels only contain alphanumeric chars
		var validChars = /^\w+$/;
		if(!validChars.test(labelName)) {
			callback(null, utui.labels.ERROR_MSG_INVALID_LABEL_CHARS);
			return;
		}

		var nextIndex = this._getMaxLabelIndex() + 1;

		// First we make a request to save the labels before we actually add them
		var saveObj = $.extend(true, {}, utui.data.labels),
			label = {action: 'CREATE', name: labelName, color: color};

		if (security_list) {
			label.security_list = security_list;
		}
		saveObj[nextIndex] = label;

		utui.labels.request.updateLabels(saveObj, function(){
			var error;
			if (arguments.length <= 1) {
				// Remove action
				delete label.action;

				utui.data.labels[nextIndex] = label;

				utui.util.pubsub.publish(utui.constants.labels.ADDED, {action: utui.constants.labels.ADDED, name: labelName});
			} else {
				nextIndex = null;
				error = utui.labels.ERROR_MSG_SERVER_ERROR_UPDATE;
			}

			callback(nextIndex, error);
		});
	},

	// --------------------------------------------------------
	updateLabel: function (id, labelName, color, security_list, callback) {
		callback = callback || function(){};

		// Validate that labels only contain alphanumeric chars
		var validChars = /^\w+$/;
		if(!validChars.test(labelName)) {
			callback(utui.labels.ERROR_MSG_INVALID_LABEL_CHARS);
			return;
		}

		// First we make a request to save the labels before we actually update them
		var saveObj = $.extend(true, {}, utui.data.labels),
			label = {action: 'MODIFY', name: labelName, color: color};

		if (security_list) {
			label.security_list = security_list;
		}
		saveObj[id] = label;

		utui.labels.request.updateLabels(saveObj, function(){
			var hasSecurityChanged = !_.isEqual(utui.data.labels[id].security_list, saveObj[id].security_list),
				error;

			if (arguments.length <= 1) {
				// Remove action
				delete label.action;

				utui.data.labels[id] = label;

				// Notify the event that the security settings has changed so we know that we need to redraw the content
				utui.util.pubsub.publish(utui.constants.labels.CHANGED, {labelId:id, security_list:security_list, hasSecurityChanged:hasSecurityChanged});
			} else {
				error = utui.labels.ERROR_MSG_SERVER_ERROR_UPDATE;
			}

			callback(error);
		});
	},

	// --------------------------------------------------------
	removeLabel: function (id, callback) {
		callback = callback || function(){};
		// First we make a request to save the labels before we actually delete them
		var saveObj = $.extend(true, {}, utui.data.labels),
			labelName = utui.labels.getLabelNameById(id);

		saveObj[id] = utui.data.labels[id];
		saveObj[id].action = "DELETE";

		utui.labels.request.updateLabels(saveObj, function(){
			var error;
			if (arguments.length <= 1) {
				// delete the key from the data model
				delete utui.data.labels[id];

				// Delete the key from the secure relationships
				utui.labels.removeSecureLabelRelationship(id);

				// publish remove-label event so that label is removed from all data items
				utui.util.pubsub.publish(utui.constants.labels.REMOVED, {labelId:id, security_list:saveObj[id].security_list});
			} else {
				error = utui.labels.ERROR_MSG_SERVER_ERROR_DELETE;
			}

			callback(labelName, error);
		});
	},

	// --------------------------------------------------------
	hasLabel: function (labelName, labelId) {
		var labels = utui.data.labels;

		labelName = labelName || '';

		for (var k in labels) {
			var label = labels[k];
			if ($.type(label) !== 'object') {
				label = label || '';
				if (label.toLowerCase() === labelName.toLowerCase() && k !== labelId) {
					return true;
				}
			} else {
				label.name = label.name || '';
				if (label.name.toLowerCase() === labelName.toLowerCase() && k !== labelId) {
					return true;
				}
			}
		}

		return false;
	},

	// --------------------------------------------------------
	hasLabelInArray: function(labels, labelId) {
		if (typeof labels === "string") {
			labels = labels.split(',');
		}
		labels = labels || [];
		for (var i=0; i<labels.length; i++) {
			if ($.inArray(String(labelId), labels) > -1) {
				return true;
			}
		}
		return false;
	},

	// --------------------------------------------------------
	hasSecureLabel: function(labels) {
		if (typeof labels === "string") {
			labels = labels.split(',');
		}
		labels = labels || [];
		for (var i=0; i<labels.length; i++) {
			if (utui.labels.getLabelSecurityById(labels[i])) {
				return true;
			}
		}
		return false;
	},

	// --------------------------------------------------------
	getLabels: function () {
		return utui.data.labels;
	},

	// --------------------------------------------------------
	getLabelNameById: function (id) {
		if (!utui.data.labels) return "";

		var label = utui.data.labels[id];
		if ($.type(label) !== 'object') {
			return label;
		} else {
			return label.name;
		}
	},

	// --------------------------------------------------------
	getLabelIdByName: function (name) {
		var labels = utui.data.labels;

		for (var k in labels) {
			var label = labels[k];
			if ($.type(label) !== 'object') {
				if (label === name) {
					return k;
				}
			} else {
				if (label.name === name) {
					return k;
				}
			}
		}
		return -1;
	},

	// --------------------------------------------------------
	getLabelColorById: function (id) {
		if (!utui.data.labels) return "";

		var label = utui.data.labels[id];

		if ($.type(label) !== 'object') {
			return 'color' + parseInt(id, 10) % utui.labels.MAX_COLORS;
		} else {
			return label.color;
		}
	},

	// --------------------------------------------------------
	getLabelSecurityById: function (id) {
		var labels = utui.data.labels;
		if (labels && labels[id] && labels[id].security_list) {
			return labels[id].security_list;
		}
		return '';
	},

	// --------------------------------------------------------
	// Get the label type for tagging purposes
	getLabelTypeForTagging: function (id) {
		var security = utui.labels.getLabelSecurityById(id);
		return security ? 'secure' : 'non-secure';
	},

	// --------------------------------------------------------
	// This will remove any label that doesn't exist
	removeDeletedLabelIds: function (tabArray) {
		for (var index in tabArray) {
			var tabName = tabArray[index],
				container = utui.data[tabName];

			for (var key in container) {
				var obj = container[key],
					labels = obj.labels || [],
					foundLabels = [];

				labels = ($.type(labels) === 'string') ? labels.split(',') : labels;

				for (var i=0; i<labels.length; i++) {
					var lableId = labels[i];
					if (utui.labels.getLabelNameById(lableId)) {
						foundLabels.push(lableId);
					}
				}
				obj.labels = foundLabels.toString();
			}
		}
	},

	// --------------------------------------------------------
	// Returns true if security is not applied or user is assigned to resource lock
	canUserModify: function(labels) {
		if ($.type(labels) === 'string') {
			labels = labels.split(',');
		}
		labels = labels || [];
		var canModify = true;
		for (var i=0; i<labels.length; i++) {
			var security = utui.labels.getLabelSecurityById(labels[i]);
			if (security) {
				canModify = false;
				if ($.inArray(utui.login.email, security) > -1) {
					return true;
				}
			}
		}
		return canModify;
	},

	// --------------------------------------------------------
	enableLabelSelect: function($select, enable) {
		if (enable) {
			$select.select2('enable', true).removeClass('ui-state-disabled');
		} else {
			$select.select2('enable', false).addClass('ui-state-disabled');
		}
	},

	// --------------------------------------------------------
	getNextLabelColor: function (numLabels) {
		var colorsLength = utui.config.labels.colors.length;

		numLabels = numLabels || _.size(utui.data.labels);

		return utui.config.labels.colors[parseInt(numLabels, 10) % colorsLength];
	},

	// --------------------------------------------------------
	getLabelInfoById: function (labelId) {
		var name = utui.labels.getLabelNameById(labelId),
			color = utui.labels.getLabelColorById(labelId),
			security_list = utui.labels.getLabelSecurityById(labelId);

		return {name: name, color: color, security_list: security_list};
	},

	// --------------------------------------------------------
	addHistoryEvent : function(labelName, operation, container, tabName) {
		var containerObj = {},
			id,
			action = utui.constants.labels.UPDATED;	// Default to updated

		if (tabName) {
			if(tabName === 'customizations') {
				containerObj = utui.data.customizations[container] || {};
				id = containerObj._id;
			} else {
				containerObj = utui[tabName].containerMap[container] || {};
				id = containerObj.id;
			}
			// Default to labels as the tabName because most likely the action performed was within Manage Labels
		} else {
			tabName = 'labels';
		}

		if (operation === utui.constants.operation.ADDED) {
			action = tabName === 'labels' ? utui.constants.labels.ADDED : utui.constants.labels.ASSIGNED;
		} else if (operation === utui.constants.operation.REMOVED) {
			action = utui.constants.labels.REMOVED;
		} else if (operation === utui.constants.operation.UPDATED) {
			action = utui.constants.labels.CHANGED;
		}

		// Add History event
		utui.profile.setActionPerformed({
			action : action,
			data:{
				id : id || '',
				name : containerObj.title || labelName,
				kind : utui.util.getKindFromTabName(tabName),
				operation : operation
			}
		}, true);
	},
	getSecureLabelRelationship:function() {
		var obj = utui.data.label_relationships || {};
		// Return a copy of it so we don't modify the original except in setSecurelabelRelationship method
		return $.extend(true, {}, obj);
	},
	setSecureLabelRelationship:function(obj) {
		// Only update if the user can modify resource locks
		if (utui.permissions.canManageSecureLabels()){
			utui.profile.setDirty();
			utui.data.label_relationships = obj;
		}
	},
	assignSecureLabelRelationship:function(labelId, namespace, id) {
		labelId = Number(labelId);
		id = String(id);

		var relationships = utui.labels.getSecureLabelRelationship(),
			label = utui.data.labels[labelId] || {};

		// Don't add if not a resource lock
		if (!label.security_list) return;

		if (!relationships[labelId]) {
			relationships[labelId] = {};
		}
		if (!relationships[labelId][namespace]) {
			relationships[labelId][namespace] = id;
		} else {
			var ids = relationships[labelId][namespace].split(',');
			if ($.inArray(id, ids) < 0) {
				ids.push(id);
				relationships[labelId][namespace] = ids.toString();
			}
		}

		utui.labels.setSecureLabelRelationship(relationships);
	},
	unassignSecureLabelRelationship:function(labelId, namespace, id) {
		labelId = Number(labelId);
		id = String(id);

		var relationships = utui.labels.getSecureLabelRelationship();
		// Not found
		if (!relationships[labelId] || !relationships[labelId][namespace]) {
			return
		}
		var ids = relationships[labelId][namespace].split(','),
			idIndex = $.inArray(id, ids);
		if (idIndex > -1) {
			if (ids.length <= 1) {
				delete relationships[labelId][namespace];
			} else {
				ids.splice(idIndex,1);
				relationships[labelId][namespace] = ids.toString();
			}
		}

		// Delete the key if nothing is assigned
		if ($.isEmptyObject(relationships[labelId])) {
			delete relationships[labelId];
		}
		utui.labels.setSecureLabelRelationship(relationships);
	},
	removeSecureLabelRelationship:function(labelId) {
		labelId = Number(labelId);

		var relationships = utui.labels.getSecureLabelRelationship();
		delete relationships[labelId];
		utui.labels.setSecureLabelRelationship(relationships);
	},
	request : {
		getLabels: function(replaceKeys, callback) {
			var url = utui.service.addParamsToURL(utui.service.restapis.LABELS, replaceKeys);
			utui.service.get(url, null, utui.service.options.JSON, callback, callback);
		},
		updateLabels: function(labels, callback) {
			var url = utui.service.addParamsToURL(utui.service.restapis.LABELS, {version:utui.profile.lastRevision});
			utui.service.post(url, JSON.stringify(labels), utui.service.options.JSON, callback, callback);
		}
	},

	// ------------------------------------------------------------------
	helper: {
		// This will hide/show the bulk select labels select2 box
		// --------------------------------------------------------------
		onBulkSelectCheckboxClicked: function (tabName) {
			if ($('#' + tabName + '_content').find('.label_select_checkbox:checked').length > 0) {
				$('#' + tabName + 'Container_headerControls').find('.labels_menu_list').css('display', 'inline-block');
			} else {
				$('#' + tabName + 'Container_headerControls').find('.labels_menu_list').hide();
			}
		},

		// --------------------------------------------------------------
		onLabelRemoved: function (tabName, data) {
			// If the user deleted a resource lock then we need to make the fields editable
			if (data && data.security_list) {
				for (var id in utui.data[tabName]) {
					// Only re-render if the label is assigned
					if (utui.labels.hasLabelInArray(utui.data[tabName][id].labels, data.labelId)) {
						utui[tabName].labels.setEditable(id);
					}
				}
			}
			utui[tabName].labels.assignOrRemoveLabels(false, true, data.labelId, true);
		},

		// --------------------------------------------------------------
		onLabelChanged: function (tabName, data) {
			var labelId = data.labelId,
				tab = tabName === 'customizations' ? 'customize' : tabName,
				labelsExpanded = utui.labels.helper.getLabelsExpandedForTab();

			// Re-render the ui to reflect the changes
			for (var id in utui.data[tabName]) {
				var labels = utui.data[tabName][id].labels;

				// Only re-render if the label is assigned
				if (utui.labels.hasLabelInArray(labels, labelId)) {
					var container = $('#' + tab + '_content').find('[data-id="' + id + '"]').attr('id');
					utui[tabName].labels.redrawLabels(labels, container);

					// Re-render the title just incase security was added to a label
					if (tabName === 'customizations') {
						utui[tabName].setTitle(id);
					} else {
						utui[tabName].setTitle(container, labelsExpanded);
					}

					// If the security settings has changed then we need to enable/disable the buttons
					if (data.hasSecurityChanged) {
						utui[tabName].labels.setEditable(id);
					}

					// If the label is secure then we need to add it to the relationships otherwise remove the relationship
					if (utui.labels.getLabelSecurityById(labelId)) {
						utui.labels.assignSecureLabelRelationship(labelId, utui[tabName].id, id);
					} else {
						utui.labels.unassignSecureLabelRelationship(labelId, utui[tabName].id, id);
					}
				}
			}
		},

		// --------------------------------------------------------------
		assignOrRemoveLabels: function (tabName, isAssignAction, isBulkAction, labelId, forceApplyToAll) {
			if (labelId) {
				var containerName = tabName === 'customizations' ? 'customize' : tabName,
					$container = $('#' + containerName + '_content'),
					$checked = $container.find('.label_select_checkbox:checked'),
					$activeContainer = utui[tabName].labels.getActiveContainer(),
					key = $activeContainer.attr('data-id'),
					labelsExpanded = utui.labels.helper.getLabelsExpandedForTab();

				// If Label was removed we must get all checkboxes to remove from all instances
				if (forceApplyToAll) {
					$checked = $container.find('.label_select_checkbox');

					// If not bulk action then select the expanded checkbox
				} else if (!isBulkAction) {
					$checked = $activeContainer.find('.label_select_checkbox');
				}

				$.each($checked, function () {
					var id = $(this).val(),
						$dataObj = $(this).closest('.' + containerName + '_container'),
						container = $dataObj.attr('id'),
						obj = utui.data[tabName][id],
						labelIds = obj.labels ? obj.labels.split(',') : [],
						labelIdIndex = $.inArray(String(labelId), labelIds);

					if (isAssignAction) {
						if (labelIdIndex < 0) {
							labelIds.push(labelId);
						}
						utui.labels.assignSecureLabelRelationship(labelId, utui[tabName].id, id);

					} else {
						// If label is not assigned to object STOP.
						if (labelIdIndex < 0) {
							return; // equivalent to continue;
						}

						labelIds.splice(labelIdIndex, 1);
						utui.labels.unassignSecureLabelRelationship(labelId, utui[tabName].id, id);
					}

					obj.labels = labelIds.join(",");

					if (tabName === 'customizations') {
						utui[tabName].setTitle(id);	// We can modify the setTitle to accept container for consistency
					} else {
						utui[tabName].setTitle(container, labelsExpanded);
					}

					if (id === key) {
						utui[tabName].labels.redrawLabels(obj.labels, container);
					} else {
						// Loadrules doesn't redraw the accordion contents when expanded so we must force them to redraw
						if (tabName === 'loadrules') {
							utui[tabName].labels.redrawLabels(obj.labels, container);
						}
					}

					utui.profile.setActionPerformed({
						action: (isAssignAction) ? utui.constants.labels.ASSIGNED : utui.constants.labels.UNASSIGNED,
						data: {
							id: id,
							name: obj.name,
							type: obj.type,
							kind: utui.util.getKindFromTabName(tabName),
							operation: (isAssignAction) ? utui.constants.operation.ADDED : utui.constants.operation.REMOVED,
							container: container
						}
					}, true);
				});
			}
		},

		// --------------------------------------------------------------
		redrawLabels: function (labels, container, tabName) {
			var $contextContainer = $('#' + container + '_labels'),
				tab = tabName === 'customizations' ? 'customize' : tabName,
				$select2 = $contextContainer.find('select');

			// Disable the select2 if user cannot modify
			utui.labels.enableLabelSelect($select2, utui.labels.canUserModify(labels));

			if ($contextContainer) {
				// redraw labels on context menu
				$contextContainer.find('.context_label_wrapper').remove();
				$contextContainer.append(utui.labels.labelsView.getAccordionLabelContent(labels));

				// rebind remove buttons
				$contextContainer.find('.label-delete').safeOn('click', function () {
					var $el = $(this),
						labelId = $el.attr('data-label-id'),
						labelName = utui.labels.getLabelNameById(labelId),
						$container = $el.closest('.' + tab + '_container');

					if ($container[0]) {
						utui[tabName].labels.onLabelUnAssigned({listType: 'single', labelId: labelId, name: labelName});
					}
				});
			}
		},

		/* regenerates the labels inside labels container */
		// --------------------------------------------------------------
		renderLabels: function (container, tabName) {
			var $labelsContainer, item, isImported, v = '';

			// rb - added support for extension labeling
			if (tabName === utui.customizations.id) {
				$labelsContainer = $("#customizations_" + container).find(".container_label");
				item = utui.data.customizations[container];
				isImported = item.imported;

			} else if (tabName === utui.define.id) {
				$labelsContainer = container.find(".container_label");
				item = utui.data.define[container.attr('data-tile-key')];
				isImported = item.imported;
			} else {
				$labelsContainer = $("#" + container).find(".container_label");
				item = utui[tabName].containerMap[container];
				isImported = item.imported;
			}

			if ($labelsContainer.length == 0) return;

			// Empty the labels container
			$labelsContainer.empty();

			// Append imported label to show which profile the item(s) were imported from
			if (isImported) {
				var isRequiredLibrary = typeof utui.profile.import._requiredLibraries[item.settings.profileid] !== 'undefined',
					importType = 'profileTypeLibraryOptional';

				if (isRequiredLibrary) {
					importType = 'profileTypeLibraryRequired';
				}

				v = '';
				v += '<div class="label libraryLabel ' + importType + '">';
				v += '  <span class="labelIcon"></span>';
				v += '  <span>' + item.settings.profileid;
				v += '      (<span class="env_alias_' + isImported + '">' + utui.targets.aliasDisplayName(isImported) + '</span>)';
				v += '  </span>';
				v += '</div>';

				return $labelsContainer.append(v);
			}

			// Render labels
			if (!isImported) {
				v = '';
				v += utui.labels.labelsView.getLabelContent(item.labels, tabName);
				$labelsContainer.append(v);

				// label hover menu
				utui.labels.helper.bindLabelHoverList($labelsContainer);
			}
		},

		// --------------------------------------------------------------
		toggleExpandLabel: function (event) {
			var $columnToggle = event.srcElement ? $(event.srcElement).closest('.columnToggle') : $(event.target).closest('.columnToggle'),
				container = utui.config.currentTab,
				taggingInfo = {
					page: utui.tagging.getPageFromTabId('tabs_' + utui.config.currentTab)
				};

			if (container === utui.config.tabList.customizations.tab) {
				container = 'customize_content';
			} else if (container === utui.config.tabList.define.tab) {
				container = 'defineContainer';
			} else {
				container += '_content';
			}

			$columnToggle.toggleClass('selected');

			if ($columnToggle.hasClass('selected')) {
				$columnToggle.find('i').removeClass('icon-plus-sign-alt').addClass('icon-minus-sign-alt');
				$('#' + container).find('.container_label').removeClass('collapsed').addClass('expanded');
				taggingInfo.action = utui.constants.labels.EXPANDED;

			} else {
				$columnToggle.find('i').removeClass('icon-minus-sign-alt').addClass('icon-plus-sign-alt');
				$('#' + container).find('.container_label').removeClass('expanded').addClass('collapsed');
				taggingInfo.action = utui.constants.labels.COLLAPSED;

			}

			utui.util.pubsub.publish(utui.constants.tagging.EVENT, taggingInfo);

			return false;
		},

		// --------------------------------------------------------------
		getLabelsExpandedForTab: function (container) {
			container = container || utui.config.currentTab;

			if (container === utui.define.id) {
				container = 'defineContainer_header';
			} else if (container === utui.loadrules.id) {
				container = 'loadrules_content_header';
			} else if (container === utui.manage.id) {
				container = 'manage_content_header';
			} else if (container === utui.customizations.id) {
				container = 'customize_content_header';
			}

			return $('#' + container).find('.columnToggle').hasClass('selected');
		},

		// --------------------------------------------------------------
		getLabelExpandedClass: function (labelsExpanded) {
			return (labelsExpanded) ? 'expanded' : 'collapsed';
		},

		// --------------------------------------------------------------
		bindLabelHoverList: function ($container) {
			// Show/Hide labels hover menu
            $container.on("mouseenter", function () {
				var $el = $(this),
					uid = $el.attr('data-uid'),
					type = $el.attr('data-type'),
					labels = utui.data[type][uid].labels;

				if (labels) {
					$el.append(utui.labels.labelsView.getLabelHoverContent(labels.split(',')));
				}
			}).on("mouseleave", function () {
				$(this).find('.labelsListMenu').remove();
			});
		}
	},

	// --------------------------------------------------------
	labelsSelectBtn: function () {
		// Private API
		var _namespace,
			_labelsChecked;

		var _eventHandlers = {
			// ------------------------------------------------
			onManageLabelsClick: function () {
				$('#select2-drop').select2('close');
				utui.labels.labelsManagerDialog.show();

				return false;
			},

			// --------------------------------------------------------
			onColorPickerClick: function () {
				utui.publish.historyLabels.showColorPicker($(this).closest('.color-picker'));
			},

			// --------------------------------------------------------
			onAddLabelButtonClick: function (selectList) {
				var $footer =$('#select2-drop').find('.label_dropdown_footer'),
					$labelName = $footer.find(':input').val(),
					$color = $footer.find('.color').attr('data-color');

				if (!$labelName) {
					return;
				}

				utui.labels.addLabel($labelName, $color, null, function(labelId) {
					if (labelId) {
						// Auto-assign to selected data objects
						utui.util.pubsub.publish(utui.constants.labels.ASSIGNED, {action: utui.constants.labels.ASSIGNED, listType: selectList.attr('data-list-type'), labelId: labelId, name: $labelName, 'label-type':utui.labels.getLabelTypeForTagging(labelId)});

						// re-open drop-down list
						selectList.select2('open');

						// Add History Event
						utui.labels.addHistoryEvent($labelName, utui.constants.operation.ADDED);

					} else {
						utui.ui.dialog.message.showError('select2-drop', utui.labels.ERROR_MSG_INVALID_LABEL_NAME);
					}
				});
			}
		};


		// ------------------------------------------------
		function _populateLabels(selectList) {
			var allLabels = utui.labels.getLabels();

			// First empty the container
			selectList.empty();

			// First append the default labels row (All Labels)
			var $labelRow = $("<option />", {
				"class": "placeholder-option"
			}).data("labelId", "-1").appendTo(selectList);

			// Second, iterate through all of the available labels and append them to the list
			for (var key in allLabels) {
				var labelName = utui.labels.getLabelNameById(key),
					color = utui.labels.getLabelColorById(key);

				$labelRow = $("<option />", {
					"class": "color"
				}).data("labelId", key);

				$labelRow.text(labelName).addClass(color).appendTo(selectList);
			}
		}

		// ------------------------------------------------
		// labels select list footer
		function _appendLabelsFooterContent(selectList) {
			var $select2list = $('#select2-drop'),
				nextColor = utui.labels.getNextLabelColor(),
				v = '';

			$select2list.find('.label_dropdown_footer').remove();

			v += '<div class="label_dropdown_footer" data-list-id="' + selectList.attr('id') + '">';
			v += '  <div class="add-label-container">';
			v += '      <div class="color-picker">';
			v += '          <i class="icon-caret-down label-color-select"></i>';
			v += '          <span class="color ' + nextColor + '" data-color="' + nextColor + '">';
			v += '              <i class="icon-folder-close label-color-select"></i>';
			v += '          </span>';
			v += '      </div>';
			v += '      <div class="form-field">';
			v += '          <input type="text" placeholder="' + localize.t('tiq.labels.add_new_label') + '" maxlength="40">';
			v += '          <div class="addLabelButton">↩</div>';
			v += '      </div>';
			v += '  </div>';

			v += '  <div class="manage-label-container">';
			v += '      <a href="#" class="admin_manage_label" id="' + _namespace + '_manage_labels">' + localize.t('tiq.labels.manage_labels')  + '</a>';
			v += '  </div>';
			v += '  <div class="dialog-message"></div>';
			v += '</div>';

			$select2list.append(v);

			// attach event handlers to inputs
			_manageLabelsContent(selectList);
		}

		// --------------------------------------------------
		function _labelIsAssignedToSelectedItem(container, isBulkAction) {
			var $checked = container.find('.label_select_checkbox:checked'),
				labelsChecked = -1,
				tmp = [];

			if (!isBulkAction) {
				if (_namespace === utui.config.tabList.define.tab) {
					$checked = dsapi.getExpandedDataSourceCheckbox();
				} else {
					var containerName = _namespace === 'customizations' ? 'customize_container' : _namespace + '_container';
					$checked = container.find('.ui-accordion-content-active').closest('.' + containerName).find('.label_select_checkbox');
				}
			}
			$.each($checked, function (index) {
				var ds = utui.data[_namespace][this.value];
				if (ds) {
					var labelIds = ds.labels
					if (labelIds) {
						tmp[index] = labelIds.split(',');
					} else {
						labelsChecked = 0;
						return false;
					}
				}
			});

			if (labelsChecked === -1) {
				return _.intersection.apply(_, tmp);
			} else {
				return false;
			}
		}

		// --------------------------------------------------------
		function _manageLabelsContent(selectList) {
			var $select2List = $('#select2-drop'),
				_$template = $select2List.find('.label_dropdown_footer'),
				$addNewLabel = _$template.find(':input');

			_$template.find('.admin_manage_label').safeOn('click', _eventHandlers.onManageLabelsClick);
			_$template.find('.color-picker > .icon-caret-down').safeBind('click', _eventHandlers.onColorPickerClick);
			_$template.find('.color-picker > .color').safeBind('click', _eventHandlers.onColorPickerClick);
			_$template.find('.addLabelButton').safeBind('click', function(event) {
				_eventHandlers.onAddLabelButtonClick(selectList);
			});
			$addNewLabel.safeBind('keydown', function(event) {
				var keycode = (event.keyCode ? event.keyCode : event.which);

				if (Number(keycode) === 13) {
					_eventHandlers.onAddLabelButtonClick(selectList);
				}
			});

			$addNewLabel.safeBind('mousedown', function (event) {
				// Add class 'focused' since user intended to focus on this field
				// Allows us to halt select2 search field blur event
				$(this).addClass('focused');
			});

			$select2List.find('.select2-input').safeBind('blur', function (event) {
				if ($addNewLabel.hasClass('focused')) {
					// halt Search field blur event to allow focus on Add New Label field
					event.stopImmediatePropagation();
					$addNewLabel.removeClass('focused');
				}
			});

			// Close color select dialog if click outside dialog
			$select2List.safeBind('click', function(e) {
				var $target = e.srcElement ? $(e.srcElement) : $(e.target);
				if (!$target.hasClass('label-color-select')) {
					$('.color-select').hide();
				}
			});
		}

		var _view = {
			//----------------------------------------------------
			formattedLabelIcon: function (labelName, color, labelsChecked) {
				var labelId = utui.labels.getLabelIdByName(labelName),
					v = '';

				labelName = utui.util.safeEscape(labelName);

				v += '<span class="color colorDefault">';
				if (labelsChecked && labelsChecked.indexOf(labelId) > -1) {
					v += '  <i class="icon-check badge checkbox"></i>';
				} else {
					v += '  <i class="icon-check-empty badge checkbox"></i>';
				}
				v += '</span>';
				v += '<span class="' + color + '">';
				v += '  <i class="icon-folder-close"></i>';
				if (utui.labels.hasSecureLabel(labelId)) {
					v += '	<i class="icon-lock"></i>';
				}
				v += '</span>';
				v += '<span class="label-name">' + labelName + '</span>';

				return v;
			}
		};


		//----------------------------------------------------
		var _render = {
			//----------------------------------------------------
			ui: function(container, selectList, header) {
				selectList.select2({
					placeholder: localize.t('tiq.labels.label_as'),
					dropdownCssClass: "label_dropdown",
					minimumResultsForSearch: -1,
					formatNoMatches: function() {
						return '';
					},
					formatResult: function (option) {
						return _view.formattedLabelIcon(option.text, option.css, _labelsChecked);
					},
					matcher: function (term, text) {
						return text.toUpperCase().indexOf(term.toUpperCase()) >= 0;
					}
				}).off("select2-close").on("select2-close", function (e) {
						// closing select2 menu
						// reset the select list
						selectList.select2('val', '');
						header.find('.js-labels-container').find('.select2-chosen').html('<i class="icon-folder-close"></i> ' + localize.t('tiq.labels.apply_labels'));
						header.find('.labels_select_wrapper').find('.select2-chosen').html('<i class="icon-folder-close"></i> ' + localize.t('tiq.labels.apply_labels'));
						$('#select2-drop').find('.select2-input').off('blur');

						utui.util.pubsub.publish(utui.constants.labels.MENU_CLOSING);
					})
					.off("select2-opening").on("select2-opening", function () {
						// populate select list
						_populateLabels(selectList);
						var isBulkAction = selectList.attr('data-list-type') === 'bulk';
						_labelsChecked = _labelIsAssignedToSelectedItem(container, isBulkAction);

						// close accordion
						if (isBulkAction) {
							utui.util.pubsub.publish(utui.constants.labels.MENU_OPENING);
						}
					})
					.off("select2-open").on("select2-open", function (e) {
						// open select2 menu
						header.find('.js-labels-container').find('.select2-chosen').html(localize.t('tiq.labels.label_as'));
						_appendLabelsFooterContent(selectList);
					})
					.off("select2-selecting").on("select2-selecting", function (e) {
						e.preventDefault();
						// Hide any messages that may be showing
						utui.ui.dialog.message.hide('select2-drop');

						var $selection = $('.label_dropdown').find('.select2-results .select2-highlighted .checkbox'),
							labelName = e.val,
							labelId = utui.labels.getLabelIdByName(labelName),
							security = utui.labels.getLabelSecurityById(labelId);

						// Check permission first
						if ($.type(security) === 'array' && $.inArray(utui.login.email, security) === -1) {
							utui.ui.dialog.message.showError('select2-drop', utui.labels.ERROR_MSG_SECURE_LABEL_INVALID_PERMISSIONS);
							return;
						}

						// Assign label to selected data sources
						if ($selection.hasClass('icon-check-empty')) {
							$selection.removeClass('icon-check-empty').addClass('icon-check');
							utui.util.pubsub.publish(utui.constants.labels.ASSIGNED, {action: utui.constants.labels.ASSIGNED, listType: selectList.attr('data-list-type'), labelId: labelId, name: labelName, 'label-type':utui.labels.getLabelTypeForTagging(labelId)});
						}
						else { // Remove label from selected data sources
							$selection.removeClass('icon-check').addClass('icon-check-empty');
							utui.util.pubsub.publish(utui.constants.labels.UNASSIGNED, {action: utui.constants.labels.UNASSIGNED, listType: selectList.attr('data-list-type'), labelId: labelId, name: labelName});
						}
					});

				// Default
				header.find('.js-labels-container').find('.select2-chosen').html('<i class="icon-folder-close"></i> ' + localize.t('tiq.labels.apply_labels'));
				header.find('.labels_select_wrapper').find('.select2-chosen').html('<i class="icon-folder-close"></i> ' + localize.t('tiq.labels.apply_labels'));

				// Enable / Disble the select2 list if user can modify
				var $accordion,id;
				if (_namespace === 'define') {
					$accordion = selectList.closest('.accordion-context-container');
					id = $accordion.attr('data-key');
				} else {
					var tab = _namespace === 'customizations' ? 'customize' : _namespace;
					$accordion = selectList.closest('.' + tab + '_container');
					id = $accordion.attr('data-id');
				}

				if (id) {
					var obj = utui.data[_namespace][id] || {};
					utui.labels.enableLabelSelect(selectList, utui.labels.canUserModify(obj.labels));
				}
			}
		};

		// Public API
		// ------------------------------------------------------------
		var _public = {
			// --------------------------------------------------------
			render: function(tab, container, selectList, header) {
				_namespace = tab;
				_render.ui(container, selectList, header);
			}
		};

		return _public;
	},

	// --------------------------------------------------------
	labelsView: function () {
		var MAX_EXPANDED = 3,
			MAX_COLLAPSED = 6,
			MAX_EXPANDED_OVERRIDE = {
				loadrules: 7
			},
			MAX_COLLAPSED_OVERRIDE = {
				loadrules: 14
			};

		var _view = {
			// ------------------------------------------------
			labelContent: function (labels, itemType) {
				var v = '';

				// 1 or more labels
				if (labels) {
					labels = labels.split(',');

					// Collapsed label list
					var MAX = MAX_COLLAPSED_OVERRIDE[itemType] || MAX_COLLAPSED,
						len = labels.length,
						numLabels = (len > MAX) ? MAX : len;
					v += '<div class="labels-list-collapsed">';
					for (var i = 0; i < numLabels; i++) {
						var labelId = labels[i],
							labelName = utui.util.safeEscape(utui.labels.getLabelNameById(labelId)),
							iconClass = utui.util.safeEscape(utui.labels.getLabelColorById(labelId)),
							labelInfo = utui.labels.getLabelInfoById(labelId);

						v += '  <div class="labelListItem">';
						v += '      <span class="color ' + iconClass + '"><i class="icon-folder-close"></i>' + (labelInfo.security_list ? '<i class="icon-lock"></i>' : '') + '</span>';
						v += '      <div class="filter-title-container ellipsis">' + labelName + '</div>';
						v += '  </div>';
					}
					if (len > MAX) {
						v += '  <div class="labelListItemMore">...</div>';
					}
					v += '</div>';

					// Expanded label list
					MAX = MAX_EXPANDED_OVERRIDE[itemType] || MAX_EXPANDED;
					len = labels.length;
					numLabels = (len > MAX) ? MAX : len;
					v += '<div class="labels-list-expanded">';
					for (var i = 0; i < numLabels; i++) {
						var labelId = labels[i],
							labelName = utui.util.safeEscape(utui.labels.getLabelNameById(labelId)),
							iconClass = utui.util.safeEscape(utui.labels.getLabelColorById(labelId)),
							labelInfo = utui.labels.getLabelInfoById(labelId);

						v += '  <div class="labelListItem">';
						v += '      <span class="color ' + iconClass + '"><i class="icon-folder-close"></i>' + (labelInfo.security_list ? '<i class="icon-lock"></i>' : '') + '</span>';
						v += '      <div class="filter-title-container ellipsis">' + labelName + '</div>';
						v += '  </div>';
					}
					if (len > MAX) {
						v += '  <div class="labelListItemMore">...</div>';
					}
					v += '</div>';
				}

				return v;
			},

			// --------------------------------------------------
			accordionLabelContent: function (labels) {
				var v = '<div class="context_label_wrapper">',
					canModify = utui.labels.canUserModify(labels);

				if (labels) {
					labels = labels.split(',');

					for (var i = 0; i < labels.length; i++) {
						var labelId = labels[i],
							color = utui.util.safeEscape(utui.labels.getLabelColorById(labelId)),
							labelName = utui.util.safeEscape(utui.labels.getLabelNameById(labelId)),
							security = utui.labels.getLabelSecurityById(labelId) || [];

						v += '	<div class="contextSectionInfo contextLabel" title="' + labelName + '">';
						// Only show the delete icon if the user is able to remove this label
						if (canModify && (security.length === 0 || $.inArray(utui.login.email, security) > -1)) {
							v += '		<span class="label-delete" data-label-id="' + labelId + '">x</span>';
						}
						v += '		<div class="ellipsis">';
						v += '			<span class="color ' + color + '">';
						v += '				<i class="icon-folder-close"></i>'
						if (security.length !== 0) {
							v += '				<i class="icon-lock"></i>';
						}
						v += '			</span>';
						v += labelName;
						v += '		</div>';
						v += '	</div>';
					}
				} else {
					v += '<div class="no_labels">' + localize.t('tiq.labels.no_labels_assigned') + '</div>';
				}

				v += '</div>';

				return v;
			},

			// --------------------------------------------------------
			labelListView: function (labels) {
				var numLabels = labels.length,
					v = '';

				v += '<div class="labelsListMenu">';
				v += '  <ul class="labelsList">';

				for (var i = 0; i < numLabels; i++) {
					var labelId = labels[i],
						iconClass = utui.util.safeEscape(utui.labels.getLabelColorById(labelId)),
						labelName = utui.util.safeEscape(utui.labels.getLabelNameById(labelId)),
						labelInfo = utui.labels.getLabelInfoById(labelId);

					v += '      <li>';
					v += '          <span class="color ' + iconClass + '"><i class="icon-folder-close"></i>' + (labelInfo.security_list ? '<i class="icon-lock"></i>' : '') + '</span>';
					v += '          <div class="filter-title-container ellipsis" title="' + labelName + '">' + labelName + '</div>';
					v += '      </li>';
				}

				v += '  </ul>';
				v += '</div>';

				return v;
			}
		};

		// Public API
		// ------------------------------------------------------------
		var _public = {
			// --------------------------------------------------------
			getLabelContent: function(labels, itemType) {
				return _view.labelContent(labels, itemType);
			},

			// --------------------------------------------------------
			getAccordionLabelContent: function(labels) {
				return _view.accordionLabelContent(labels);
			},

			// --------------------------------------------------------
			getLabelHoverContent: function(labels) {
				return _view.labelListView(labels);
			}
		};

		return _public;
	}(),

	// ----------------------------------------------------------------
	// Dialog to add/update/remove labels for data sources
	labelsManagerDialog: function() {
		// Private API
		var _namespace = 'manage_labels_dialog',
			_$template = utui.ui.dialog.body(false, true),
			_users,		// List of users for this profile
			_labelId;	// If no label ID then we are adding otherwise editing

		// ------------------------------------------------------------
		function _clear() {
			// We don't cache the users because they might have added more since the last request
			_users = null;
			_labelId = null;
		}

		// ------------------------------------------------------------
		function _canEditSecuritySettings() {
			return utui.permissions.canManageSecureLabels();
		}

		// ------------------------------------------------------------
		function _getUsers(callback) {
			if (_users || !utui.permissions.canManageUsers()) {
				callback();
			} else {
				utui.util.showSpinner();
				utui.users.getUsers(function(data) {
					utui.util.hideSpinner();
					if (data && $.type(data) === 'object') {
						_users = data;
					}
					callback();
				});
			}
		}

		// ------------------------------------------------------------
		function _getLabelInfo() {
			var $content = _$template.find('.dialog-content-body'),
				color = $content.find('.color').attr('data-color'),
				name = $content.find('.label-name').val().trim(),
				isSecure = $content.find('#isSecure').find(':checked').val(),
				labelInfo = {name:name, color:color};

			if (isSecure === 'true') {
				var users = $('#' + _namespace + '_user_list').val() || [];
				labelInfo.security_list = users;
			}

			return labelInfo;
		}

		// ------------------------------------------------------------
		function _highlightMenu($el) {
			// Remove the selected class
			_$template.find('.dialog-context-body').find('label').removeClass('selected');
			if ($el) {
				$el.find('label').addClass('selected');
			}
		}

		// ------------------------------------------------------------
		function _setLabelSecurityToggle(value) {
			var $secureToggle = _$template.find('.js-toggle-switch'),
				$radio = $secureToggle.find('input[type="radio"]');

			$radio[(value ? 0 : 1)].checked = true;
			$radio.button('refresh');

			$secureToggle.buttonset();
		}

		// ------------------------------------------------------------
		function _getLabelInfoFromView() {
			var name = $.trim(_$template.find('.label-name').val()),
				color = _$template.find('.dialog-content-body .color').attr('data-color'),
				toggle = $('.js-toggle-switch').find(':checked'),
				security_list = '';

			if (toggle.val() === 'true') {
				security_list = _$template.find('#'+_namespace + '_user_list').val();
			}

			if (!_labelId && name === '') {
				name = localize.t('tiq.labels.new_label');
			}
			return {name:name, color:color, security_list:security_list};
		}

		// ------------------------------------------------------------
		var _render = {
			// --------------------------------------------------------
			ui: function() {
				_render.context();
				_render.content();
			},

			// --------------------------------------------------------
			context: function() {
				_render.contextHeader();
				_render.contextBody();
			},

			// --------------------------------------------------------
			content: function() {
				utui.ui.dialog.message.hide(_namespace);
				_render.contentHeader();
				_render.contentBody();
			},

			// --------------------------------------------------------
			contextHeader: function() {
				_$template.find('.dialog-context-header').html(_view.contextHeader());
				_bindUI.contextHeader();
			},

			// --------------------------------------------------------
			contextBody: function() {
				_$template.find('.dialog-context-body').html(_view.contextBody());
				_bindUI.contextBody();
			},

			// --------------------------------------------------------
			contentHeader: function(info) {
				_$template.find('.dialog-content-header').html(_view.contentHeader(info));
				_bindUI.contentHeader();
			},

			// --------------------------------------------------------
			contentBody: function() {
				_$template.find('.dialog-content-body').html(_view.contentBody());
				_bindUI.contentBody();
			}
		};

		// ------------------------------------------------------------
		var _view = {
			// --------------------------------------------------------
			contextHeader: function() {
				return '<strong>Labels</strong><span id="'+_namespace+'_add_label" class="btn btn-small add"><i class="icon-plus"></i> ' + localize.t('tiq.labels.add_label') + '</span>';
			},

			// --------------------------------------------------------
			contextBody: function() {
				var v = '',
					labels = utui.labels.getLabels();

				if (!$.isEmptyObject(labels)) {
					v += '<ul id="manage_label_filter_checklist">';

					for (var labelId in labels) {
						v += _view.labelViewItem(labelId, utui.labels.getLabelNameById(labelId), utui.labels.getLabelColorById(labelId));
					}

					v += '</ul>';
				} else {
					v += '<div class="no-labels">' + localize.t('tiq.labels.no_labels_to_display') + '</div>';
				}

				return v;
			},

			// --------------------------------------------------------
			labelViewItem: function (labelId, labelName, iconClass) {
				var v = '',
					labelInfo = utui.labels.getLabelInfoById(labelId);

				labelName = utui.util.safeEscape(labelName);

				// Styles are for hover state. - make borders transparent for normal state
				v += '<li data-id="' + labelId + '">';
				v += '	<label>';
				v += '		<span class="color ' + iconClass + '"><i class="icon-folder-close"></i>' + (labelInfo.security_list ? '<i class="icon-lock"></i>' : '') + '</span>';
				v += '		<div class="filter-title-container ellipsis" title="' + labelName + '">' + labelName + '</div>';
				v += '	</label>';
				v += '</li>';

				return v;
			},

			// --------------------------------------------------------
			contentHeader: function(info) {
				var v = '',
					disabledClass = '',
					labelInfo = utui.labels.getLabelInfoById(_labelId),
					labelName = '';

				// Only show in edit mode
				if (!_labelId) {
					labelInfo.color = utui.labels.getNextLabelColor();
					labelInfo.name = localize.t('tiq.labels.new_label');
				}

				if (info) {
					$.extend(true, labelInfo, info);
				}

				labelName = utui.util.safeEscape(labelInfo.name);

				// If this is a resource lock and the user does not have manage secure label permission then they cannot delete
				if ((labelInfo.security_list && !utui.permissions.canManageSecureLabels()) || !_labelId) {
					disabledClass = ' ui-state-disabled'
				}

				v += '<span class="label-info">';
				v += '	<span class="color '+labelInfo.color+'"><i class="icon-folder-close"></i>' + (labelInfo.security_list ? '<i class="icon-lock"></i>' : '') + '</span>';
				v += '	<div title="'+labelName+'" class="filter-title-container ellipsis">'+labelName+'</div>';
				v += '</span>';
				v += '<span id="'+_namespace+'_delete_label" class="btn btn-small delete'+disabledClass+'"><i class="icon-trash"></i> ' + localize.t('tiq.labels.delete') + '</span>';

				return v;
			},

			// --------------------------------------------------------
			contentBody: function() {
				var v = '',
					disabledClass = '',
					nextColor = utui.labels.getNextLabelColor();

				// If this is a resource lock and the user does not have manage secure label permission then they cannot delete
				if (_labelId) {
					var security_list = utui.labels.getLabelSecurityById(_labelId);
					if (security_list && !utui.permissions.canManageSecureLabels()) {
						disabledClass = ' ui-state-disabled'
					}
				}

				v += '<strong>'+localize.t('tiq.ext.properties')+'</strong>';
				v += '<div class="container-fliud">';
				v += '	<div class="row-fluid">';
				v += '		<div class="span3">' + localize.t('tiq.labels.color') + '</div>';
				v += '		<div class="span8">';
				v += '			<div class="add-label-container">';
				v += '				<div class="color-picker">';
				v += '					<i class="icon-caret-down"></i>';
				v += '					<span id="'+_namespace+'_color_picker" data-color="' + nextColor + '" class="color ' + nextColor + '">';
				v += '						<i class="icon-folder-close"></i>';
				v += '					</span>';
				v += '				</div>';
				v += '			</div>';
				v += '		</div>';
				v += '	</div>';
				v += '	<div class="row-fluid">';
				v += '		<div class="span3">' + localize.t('tiq.labels.label') + '</div>';
				v += '		<div class="span8"><input id="'+_namespace+'_label_name" class="label-name" type="text" maxlength="80" />';
				v += '			<div class="desc">' + localize.t('tiq.labels.assign_name') + '</div>';
				v += '		</div>';
				v += '	</div>';
				v += '	<div class="row-fluid">';
				v += '		<div class="span3">' + localize.t('tiq.labels.enable_as_resource_lock') + '</div>';
				v += '		<div class="span8">';
				v += 			utui.ui.template.form.toggleOnOffSwitch('isSecure', 'Yes', 'No');

				if (utui.permissions.canManageSecureLabels()) {
					v += '			<div class="desc">' + localize.t('tiq.labels.when_enabled_only_selected_users') + '</div>';
					v += '			<select id="'+_namespace+'_user_list" multiple></select>';
				} else {
					if (_labelId && utui.labels.getLabelSecurityById(_labelId)) {
						v += '<div class="desc">' + localize.t('tiq.labels.only_the_following_users') + '</div>';
						v += '			<select id="'+_namespace+'_user_list" multiple></select>';
					} else {
						v += '<div class="desc">' + localize.t('tiq.labels.you_must_have') + '</div>';
					}
				}

				v += '		</div>';
				v += '	</div>';
				v += '	<div class="row-fluid">';
				v += '		<div class="span12 alignright">';
				v += '			<span class="btn btnSaveAction'+disabledClass+'">' + localize.t('tiq.labels.' + (_labelId ? 'apply_changes' : 'create_label')) + '</span>';
				v += '		</div>';
				v += '	</div>';
				v += '</div>';

				return v;
			},

			// --------------------------------------------------------
			secureListOptions: function() {
				var security_list = utui.labels.getLabelSecurityById(_labelId),
					options = '<option value="' + utui.login.email + '">' + utui.login.email + '</option>',
					users = {};

				// Since the get users request may not return the users that are assigned to the resource lock
				// -> we must merge the two users lists together so that they show up when viewing the label
				if (security_list) {
					for (var i=0; i<security_list.length; i++) {
						// utui.login.email is already added so prevent duplicates!
						if (security_list[i] !== utui.login.email) {
							users[security_list[i]] = {};
						}
					}
				}

				$.extend(true, users, _users);

				if (users) {
					for (var key in users) {
						options += '<option value="' + key + '">' + key + '</option>';
					}
				}

				return options;
			}
		};

		// ------------------------------------------------------------
		var _bindUI = {
			// --------------------------------------------------------
			contextHeader: function() {
				_$template.find('span.add').safeBind('click', _eventHandlers.onBtnAddClick);
			},

			// --------------------------------------------------------
			contextBody: function() {
				_$template.find('li').safeBind('click', _eventHandlers.onMenuItemClick);
			},

			// --------------------------------------------------------
			contentHeader: function() {
				_$template.find('span.delete').safeBind('click', _eventHandlers.onBtnDeleteClick);
			},

			// --------------------------------------------------------
			contentBody: function() {
				// Set the cursor to the label name field if new label
				if (!_labelId) {
					_$template.find('.label-name').focus();
				}

				// Check NO to the resource lock option
				var $secureToggle = _$template.find('.js-toggle-switch');

				_setLabelSecurityToggle(false);

				// Disable the resource lock option if user doesn't have manage users permission
				if (!_canEditSecuritySettings()) {
					$secureToggle.find('input:radio').attr('disabled',true);
				} else {
					$secureToggle.find('input[type=radio]').safeBind('change', _eventHandlers.onSecureToggleChange);
				}

				// Populate the select2 box with all the users
				_getUsers(function() {
					// Always add yourself to the list
					var $userList = _$template.find('#'+_namespace + '_user_list');

					// Append the users
					$userList.append(_view.secureListOptions());

					$userList.select2({
						placeholder: localize.t('tiq.labels.select_users'),
						closeOnSelect: false,
						minimumResultsForSearch: -1
					});

					// Disable select list by default
					utui.labels.enableLabelSelect($userList, false);

					$userList.safeBind('select2-removed select2-highlight', _eventHandlers.onSecurityListChange);
				});

				// Label text field
				_$template.find('.label-name').safeBind('keyup', _eventHandlers.onLabelNameKeyUp);

				// Color picker
				_$template.find('.color-picker > .icon-caret-down').safeBind('click', _eventHandlers.onColorPickerClick);
				_$template.find('.color-picker > .color').safeBind('click', _eventHandlers.onColorPickerClick);

				// Save button
				_$template.find('.btnSaveAction').safeBind('click', _eventHandlers.onBtnApplyClick);
			}
		};

		// ------------------------------------------------------------
		var _eventHandlers = {
			// --------------------------------------------------------
			onMenuItemClick: function(event) {
				// Highlight the selected menu
				var $li = $(this);
				_highlightMenu($li);

				// Set the _labelId prop
				_labelId = $li.attr('data-id');

				// Render the content
				_render.content();

				// Set the color
				var labelInfo = utui.labels.getLabelInfoById(_labelId),
					$color = _$template.find('.color-picker .color');

				// Set the label name
				_$template.find('.dialog-content-body').find('.label-name').val(labelInfo.name);

				// Set the label color
				$color.removeClass();
				$color.addClass('color ' + labelInfo.color);
				$color.attr('data-color', labelInfo.color);

				if (labelInfo.security_list) {
					_setLabelSecurityToggle(true);

					var $userList = _$template.find('#'+_namespace + '_user_list');
					// Populate the select list
					$userList.select2('val', labelInfo.security_list);

					if (utui.permissions.canManageSecureLabels()) {
						// Enable the select list
						utui.labels.enableLabelSelect($userList, true);
					}
				}
			},

			// --------------------------------------------------------
			onLabelNameKeyUp: function() {
				_render.contentHeader(_getLabelInfoFromView());
			},

			// --------------------------------------------------------
			// Enable/Disable the user list select2 box depending on resource lock setting
			onSecureToggleChange: function() {
				var $userList = _$template.find('#'+_namespace + '_user_list');
				// Only users with manage users permission can edit
				if (this.value === 'true' && _canEditSecuritySettings()) {
					utui.labels.enableLabelSelect($userList, true);
				} else {
					utui.labels.enableLabelSelect($userList, false);
				}
				_render.contentHeader(_getLabelInfoFromView());
			},

			// --------------------------------------------------------
			onSecurityListChange: function() {
				_render.contentHeader(_getLabelInfoFromView());
			},

			// --------------------------------------------------------
			onColorPickerClick: function() {
				var $el = $(this);
				if ($el.parents('.dialog-content-footer').length === 0) {
					// mark element as updated
					$el.closest('.add-label-container').addClass('updated');
				}
				utui.publish.historyLabels.showColorPicker($(this).closest('.color-picker'), _eventHandlers.onColorPickerChange);
			},

			// --------------------------------------------------------
			onColorPickerChange: function(color) {
				_render.contentHeader(_getLabelInfoFromView());
			},

			// --------------------------------------------------------
			onBtnAddClick: function () {
				_labelId = null;
				_highlightMenu();
				_render.content();

				return false;
			},

			// --------------------------------------------------------
			onBtnDeleteClick: function(e) {
				e.preventDefault();

				if ($(this).hasClass('ui-state-disabled')) return;

				// Delete the label from the data model
				utui.adminlib.manageLabels.showRemoveLabelConfirm(_labelId, function () {

					// redraw labels in dialog since one label was just deleted
					utui.labels.removeLabel(_labelId, function(labelName, error){
						if (!error) {
							// Add History Event
							utui.labels.addHistoryEvent(labelName, utui.constants.operation.REMOVED);

							_labelId = null;
							_render.ui();

							// Select the first label
							_$template.find('li:first-child').trigger('click');

							utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.labels.label_successfully_deleted'));
						} else {
							utui.ui.dialog.message.showError(_namespace, error);
						}
					});
				});

				return false;
			},

			// --------------------------------------------------------
			onBtnApplyClick: function(e) {
				e.preventDefault();

				if ($(this).hasClass('ui-state-disabled')) return;

				var labelInfo = _getLabelInfo();

				// Name cannot be empty, must not exceed 80 characters, and cannot have duplicates
				if (labelInfo.name === '') {
					utui.ui.dialog.message.showError(_namespace, utui.labels.ERROR_MSG_LABEL_NAME_REQUIRED);
					return;

				} else if (labelInfo.name.length > utui.labels.MAX_CHARS_PER_LABEL) {
					utui.ui.dialog.message.showError(_namespace, utui.labels.ERROR_MSG_LABEL_TOO_LONG);
					return;

				} else if (utui.labels.hasLabel(labelInfo.name, _labelId)) {
					utui.ui.dialog.message.showError(_namespace, utui.labels.ERROR_MSG_INVALID_LABEL_NAME);
					return;
				}

				var isSecure = _$template.find('#isSecure').find(':checked').val(),
					$userList = $('#' + _namespace + '_user_list'),
					users = $userList.val() || [];

				if (isSecure === 'true' && users.length === 0) {
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.labels.you_must_assign'));
					return;
				}

				if (_labelId) {	// Update
					utui.labels.updateLabel(_labelId, labelInfo.name, labelInfo.color, labelInfo.security_list, function(error){
						if (!error) {
							// Add History Event
							utui.labels.addHistoryEvent(labelInfo.name, utui.constants.operation.UPDATED);

							// Update the list of labels
							_render.context();

							// Reselect the label
							_$template.find('li[data-id="'+_labelId+'"]').trigger('click');

							utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.labels.label_successfully_updated'));
						} else {
							utui.ui.dialog.message.showError(_namespace, error);
						}
					});

				} else {		// Add
					utui.labels.addLabel(labelInfo.name, labelInfo.color, labelInfo.security_list, function(labelId, error){
						if (labelId) {
							// Add History Event
							utui.labels.addHistoryEvent(labelInfo.name, utui.constants.operation.ADDED);

							// Update the list of labels
							_render.context();

							// Reselect the label
							_$template.find('li[data-id="'+labelId+'"]').trigger('click');

							_$template.find('.dialog-context-body ul').scrollTop(1E5); //100000

							utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.labels.label_successfully_added'));
						} else {
							utui.ui.dialog.message.showError(_namespace, error);
						}
					});
				}
			},

			// --------------------------------------------------------
			onBtnCloseClick: function() {
				utui.ui.dialog.dispose(_namespace);
			}
		}

		// Public API
		// ------------------------------------------------------------
		var _public = {
			// --------------------------------------------------------
			show: function() {
				_clear();

				_render.ui();

				_$template.find('.dialog-content-container').css({'height':'auto'});	// Remove default height

				var buttons = [
					{
						text: localize.t('tiq.dialog.button.close'),
						click: _eventHandlers.onBtnCloseClick,
						style: 'float:left; margin-left: 12px',
						id: _namespace + '_CloseBtn'
					}
				];

				// Show the dialog
				utui.ui.dialog.show(_namespace, localize.t('tiq.labels.manage_labels'), buttons, _$template, {width:690, dialogClass:'lbls-mgr'});

				// Hide dialog message on load
				utui.ui.dialog.message.hide(_namespace);

				// Scroll to top when first loaded into DOM
				_$template.find('.dialog-context-body ul').scrollTop(0);

				// UI display issue so must reinitialize buttonset
				_$template.find('.js-toggle-switch').buttonset();
			}
		};

		return _public;
	}(),

    _getMaxLabelIndex : function() {
        var max = 0;
        for(var k in utui.data.labels) {
            var currentId = parseInt(k, 10);

            if(currentId > max)
                max = currentId;
        }
        return max;
    }
};

utui.filters = {
    FILTER_STATUS : "status",
    FILTER_SCOPE : "scope",
    FILTER_LABEL : "label",
    FILTER_TARGET : "targets",
    FILTER_DIVIDER : "divider", /* not really a filter, this is here for rendering purposes only */
    run : function(conditions, obj, filtersToInclude) {
        var passFilter, strategy;

        for(var strategyName in this._filterStrategies) {
            strategy = this._filterStrategies[strategyName];
            if(filtersToInclude && filtersToInclude.indexOf(strategyName) > -1) {
                passFilter = strategy.execute(conditions, obj);

                if(!passFilter) return false;
            }
        }


        return true;
    },
    isResetAction : function(conditions, filtersToInclude) {
        var passFilter, strategy;
        var isResetToDefault = true;

        for(var strategyName in this._filterStrategies) {
            strategy = this._filterStrategies[strategyName];
            if(filtersToInclude && filtersToInclude.indexOf(strategyName) > -1) {
                if(!strategy.isDefaultCondition(conditions)) {
                    // the condition that was passed in is different from default condition
                    isResetToDefault = false;
                    break;
                }
            }
        }

        return isResetToDefault;
    },
    helper : {
        updateFilterButton:function(buttonContainerId, isResetAction) {
            var $filterButton = $('#' + buttonContainerId);

            if(isResetAction) {
                if($filterButton.hasClass('filter_on')) {
                    $filterButton.removeClass('filter_on');

                    $filterButton.find('.menufont').text('Filter');
                }
            }
            else {
                if(!$filterButton.hasClass('filter_on')) {
                    $filterButton.addClass('filter_on');

                    $filterButton.find('.menufont').text(localize.t('tiq.filters.filter_on'));
                }
            }
        },
        showFilterMenu:function($container, filterConditions, tabName, filtersToInclude, filterCallbackFunc) {
            for(var i = 0; i < filtersToInclude.length; i++) {
                var filterFunc = this.filters["append_filter_" + filtersToInclude[i]];
                if(filterFunc) {
                    filterFunc($container, filterConditions, tabName, filterCallbackFunc);
                }
            }
        },
        resetLoadRulesFilter: function() {
            utui.loadrules.filterConditions.label.id = '-1';
            utui.loadrules.filter(utui.loadrules.filterConditions);
        },
        resetTagsFilter: function() {
            utui.manage.filterConditions.label.id = '-1';
            utui.manage.filter(utui.manage.filterConditions);
        },
        resetExtensionsFilter: function() {
            utui.customizations.filterConditions.label.id = '-1';
            utui.customizations.filter(utui.customizations.filterConditions);
        },
        filters : {
            append_filter_status : function($container, filterConditions, tabName, filterCallback) {
                // Define the 'Display Inactive Items' menu choice
                var $displayInactiveItemsRow = $("<div />", {
                    "class" : "formItem"
                });

                var $displayInactiveItemCheckBox = $("<input />", {
                    "id" : "displayInactiveCustomization_" + tabName,
                    "type" : "checkbox",
                    "change" : function() {
                        var $el = $(this);
                        var conditions = filterConditions;
                        conditions.inactive.show = $el.prop("checked");

                        filterCallback(conditions);
                    }
                }).prop("checked" , filterConditions.inactive.show).appendTo($displayInactiveItemsRow);

                var $displayInactiveItemLabel = $("<label />", {
                    "for" : "displayInactiveCustomization_" + tabName
                }).text("Display Inactive Items").appendTo($displayInactiveItemsRow);

                $container.append($displayInactiveItemsRow);
            },
            append_filter_targets : function($container, filterConditions, tabName, filterCallback) {

                var extension = utui.manage.containerMap,
                    filterLogic = [];

                // Detect and iterate through current items
                for(var x in extension) {
                    for(var y in extension[x]['publishedTargets']){
                        if (extension[x]['publishedTargets'] instanceof Array) {
                            filterLogic.push(extension[x]['publishedTargets'][y]);
                        }
                        else {
                            filterLogic.push(extension[x]['publishedTargets']);
                        }
                    }
                }

                // Make them unique
                var uniqueArray = filterLogic.filter(function(elem, pos) {
                    return filterLogic.indexOf(elem) == pos;
                });

                // Sort unique in order 'dev','qa','prod'
                uniqueArray = uniqueArray.sort();
                if((uniqueArray.indexOf('qa') > -1 && uniqueArray.indexOf('prod') > -1) && (uniqueArray.indexOf('qa') > uniqueArray.indexOf('prod'))) {
                    var posQA = uniqueArray.indexOf('qa');
                    var posProd = uniqueArray.indexOf('prod');

                    var temp = uniqueArray[posQA];
                    uniqueArray[posQA] = uniqueArray[posProd];
                    uniqueArray[posProd] = temp;
                }

                var setRadioChecking = function(item, elem) {
                    var map = ['allTags','unpublished'];
                    map = utui.targets.addTargetsToObject(map);

                    for(var i in map) {
                        if(map[i] !== item)
                            filterConditions.target[map[i]].show = false;
                        
                        filterConditions.target[item].show = elem.prop("checked");
                    }
                }

                var templateRadio = function(targetScope, labelText) {
                    $('<input />', {
                        "id" : "showTarget"+targetScope+"Customization",
                        "type" : "radio",
                        "name" : "target",
                        "checked" : filterConditions.target[targetScope].show,    //filterConditions.target.dev.show
                        "change" : function() {
                            var $el = $(this);
                            setRadioChecking(targetScope, $el);

                            filterCallback(filterConditions);
                        }
                    }).appendTo($showTargetItemsRow);

                    $('<label />', {
                        "for" : "showTarget"+targetScope+"Customization"
                    }).text(labelText).appendTo($showTargetItemsRow);
                }

                // Newer profiles have more accurate info... so we must extract when the current profile was created
                var currentVersion = utui.data.settings.revision;

                /*
                 * Generate radios through uniqueArray
                 */
                if(uniqueArray !== undefined && uniqueArray.length !== 0) {
                    
                    $container.append($("<div />", {"class" : "divider"}));

                    // Define the 'Published Tags' menu choice
                    var $showTargetItemsRow = $('<div />', {
                        "class" : "formItem",
                        "id" : "target_buttonset"
                    });

                    // Add 'Target Environment' title
                    var $showTargetTitle = $('<p />', {
                        "class" : "head"
                    }).text(localize.t('tiq.filters.target_environments')).appendTo($showTargetItemsRow);

                    // Display all tags button
                    templateRadio("allTags", localize.t('tiq.filters.all_items'));

                    for(var i in uniqueArray){
                        (function func(ind) {
                            templateRadio(uniqueArray[ind], localize.t('tiq.filters.published_to') + ' ' + uniqueArray[ind].toUpperCase());
                        })(i);
                    }

                    if(uniqueArray.length >= 3 || currentVersion > utui.constants.dates.TAG_PUBLISH_STATUS) {
                        templateRadio("unpublished", localize.t('tiq.filters.unpublished_items'));
                    }
                } else if (currentVersion > utui.constants.dates.TAG_PUBLISH_STATUS) {
                    $container.append($("<div />", {"class" : "divider"}));

                    // Define the 'Published Tags' menu choice
                    var $showTargetItemsRow = $('<div />', {
                        "class" : "formItem",
                        "id" : "target_buttonset"
                    });

                    // Add 'Target Environment' title
                    var $showTargetTitle = $('<p />', {
                        "class" : "head"
                    }).text(localize.t('tiq.filters.target_environments')).appendTo($showTargetItemsRow);

                    // Display all tags button
                    templateRadio("allTags", localize.t('tiq.filters.all_items'));
                    templateRadio("unpublished", localize.t('tiq.filters.unpublished_items'));
                }

                $container.append($showTargetItemsRow);
                $('#target_buttonset').buttonset();


            },
            append_filter_scope : function($container, filterConditions, tabName, filterCallback) {
                var $scopeRow = $("<div />", {
                    "class" : "formItem"
                });

                var $scopeSelectLabel = $("<label />", {
                    "class" : "label",
                    "for" : "filterScopeCustomization"
                }).text("Scope:").appendTo($scopeRow);

                var $scopeSelect = $("<select />", {
                    "id" : "filterScopeCustomization",
                    "change" : function() {
                        var $el = $(this);
                        var conditions = filterConditions;
                        conditions.scope.show = $el.find("option:selected").val();

                        filterCallback(conditions);
                    }
                });

                // Create all of the available options
                var options = '<option value="-1">' + localize.t('tiq.filters.all_extensions') + '</option>';

                var tags = utui.manage.containerMap;

                // Construct the mappings that we will use to find the title of specific scope ids
                var tagMappings = {
                    "global" : localize.t('tiq.filters.tag_all'),
                    "footer" : localize.t('tiq.filters.footer'),
                    "preload" : localize.t('tiq.filters.preloader'),
                    "domready" : localize.t('tiq.filters.dom_ready')
                };

                // Iterate through all of the existing tags and add the id and tagnames into the mapping
                for(var key in tags) {
                    var tagName = tags[key]['tag_name'];
                    var id = tags[key]['id'];

                    tagMappings[id] = localize.t('tiq.filters.tag') + ' ' + tagName + ' (' + id + ')';
                }

                var customTags = [],
                    allTags = [],
                    userTags = [],
                    extensions = utui.data.customizations;

                for(var key in extensions) {
                    var extension = extensions[key];
                    var scopeList = extension["scope"] || '';

                    // Turn the scopeList into an array since scope can contain multiple values or a single value
                    scopeList = scopeList.split(',');
                    for (var i=0; i<scopeList.length; i++) {
                        var scope = scopeList[i];
                        if(isNaN(scope) && scope !== 'global') {
                            if(customTags.indexOf(scope) < 0)
                                customTags.push(scope);
                        }
                        else if(scope === 'global') {
                            allTags = [scope];
                        }
                        else {
                            if(userTags.indexOf(scope) < 0)
                                userTags.push(scope);
                        }
                    }
                }

                // Sort the user tags
                userTags = userTags.sort(function(scope1, scope2) {
                    return (tagMappings[scope1] < tagMappings[scope2]) ? -1 : 1;
                })

                // Join the all three arrays into one
                var joinedTags = customTags.concat(allTags, userTags);

                // Iterate over the joined array and construct the <option /> elements
                for(var i = 0; i < joinedTags.length; i++) {
                    options += "<option value='" + joinedTags[i] + "'>" + tagMappings[joinedTags[i]] + "</option>";
                }

                $scopeSelect.html(options).appendTo($scopeRow);

                // See which scope should be selected
                var scopeValue = filterConditions.scope.show;
                $scopeSelect.val(scopeValue);

                $container.append($scopeRow);
            },
            append_filter_label : function($container, filterConditions, tabName, filterCallback) {
                /******************************************
                 * Private inner functions
                 *****************************************/
                function _showSelectedLabelFilter(labelId) {
                    var $labelSelect = $("#filterLabel" + tabName),
                        allLabels = utui.labels.getLabels(),
                        labelName = utui.labels.ALL_LABELS,
						color = 'default',
						security;

                    // First empty the container
                    $labelSelect.empty();

                    if (allLabels[labelId]) {
	                    labelName = utui.util.safeEscape(utui.labels.getLabelNameById(labelId));
						color = utui.util.safeEscape(utui.labels.getLabelColorById(labelId));
						security = utui.labels.getLabelSecurityById(labelId);
                    }

                    $(getLabelView(labelId, labelName, color, security)).appendTo($labelSelect);

                    $labelSelect.off().on("click", ".labelRow", function() {
                        _showLabelFilterSubMenu(labelId);
                    })
                }

                function _showLabelFilterSubMenu(labelId) {
                    var $labelSelect = $("#filterLabel" + tabName),
                        allLabels = utui.labels.getLabels();

                    // First empty the container
                    $labelSelect.empty();

                    var $labelsContainer = $("<div />", {
                        "class" : "labelsContainer"
                    });

					// Add the All Labels filter to remove the applied label filter
					var v = getLabelView(-1, utui.labels.ALL_LABELS, 'default');

					// Loop over all the filters to append them to the labelsContainer
					for (var key in allLabels) {
						var labelId = key,
							labelName = utui.util.safeEscape(utui.labels.getLabelNameById(labelId)),
							color = utui.util.safeEscape(utui.labels.getLabelColorById(labelId)),
							security = utui.labels.getLabelSecurityById(labelId);

						v += getLabelView(labelId, labelName, color, security);
					}

					$(v).appendTo($labelsContainer);

                    $labelSelect.append($labelsContainer);

                    $labelSelect.off().on("click", ".labelRow", function() {
                        var $el = $(this),
                            labelId = $el.attr('data-id');

                        // Run the filter
                        var conditions = filterConditions;
                        conditions.label.id = labelId;

                        filterCallback(conditions);

                        _showSelectedLabelFilter(labelId);
                    })
                }

				function getLabelView(labelId, labelName, color, security) {
					var v = '';
					v += '<div class="labelRow" title="' + labelName + '" data-id="'+labelId+'">';
					v += '	<div class="ellipsis">';
					v += '		<span class="color ' + color + '">';
					v += '			<i class="icon-folder-close"></i>'
					if (security) {
						v += '			<i class="icon-lock"></i>';
					}
					v += '		</span>';
					v += labelName;
					v += '	</div>';
					v += '</div>';
					return v;
				}

                // Create the label filter row
                var $labelRow = $("<div />", {
                    "class" : "formItem"
                });

                var $labelSelectLabel = $("<label />", {
                    "class" : "label",
                    "for" : "filterLabel" + tabName
                }).text(localize.t('tiq.filters.label')).appendTo($labelRow);

                var $labelSelect = $("<div />", {
                    id : "filterLabel" + tabName,
                    "class" : "filterLabelWrapper"
                })

                $labelSelect.appendTo($labelRow);

                $container.append($labelRow);

                var selectedLabelId = filterConditions.label.id;
                _showSelectedLabelFilter(selectedLabelId);
            },
            append_filter_divider : function($container) {
                $container.append($("<div />", {"class" : "divider"}));
            }
        }
    },
    _filterStrategies : {
        status : {
            isDefaultCondition : function(conditions) {
                return conditions.inactive.show;
            },
            execute : function(conditions, extension) {
                if(!conditions.inactive.show) {
                    // if we want to show inactive extensions
                    return extension.status !== "inactive";
                }

                return true;
            }
        },
        scope : {
            isDefaultCondition : function(conditions) {
                return conditions.scope.show === '-1';
            },
            execute : function(conditions, extension) {
                var selectedScope = conditions.scope.show,
                    scope = extension.scope || '',
                    scopeList = scope.split(',');   // scope can contain multiple values
                if(selectedScope !== "-1") {
                    return $.inArray(selectedScope, scopeList) != -1;
                }

                return true;
            }
        },
        label : {
            isDefaultCondition : function(conditions) {
                return conditions.label.id === "-1";
            },
            execute : function(conditions, extension) {
                var selectedLabel = conditions.label.id;
                var extensionLabels = extension.labels;
                extensionLabels = extensionLabels ? extensionLabels.split(",") : [];

                if(selectedLabel !== "-1") {
                    return extensionLabels.indexOf(selectedLabel) > -1;
                }

                return true;
            }
        },
        targets : {
            isDefaultCondition : function(conditions) {
                return conditions.target.allTags.show;
            },
            execute : function(conditions, extension) {
                var extensionTargets = extension.publishedTargets;

                // If 'All Tags' selected
                if(conditions.target.allTags.show)
                    return true
                else {
                    // Filter through all published targets
                    if(extensionTargets.length !== 0) {
                        var targets = utui.targets.getList();
                        for(var i=0; i < targets.length; i++) {
                            if(extensionTargets.indexOf(targets[i]) > -1  && conditions.target[targets[i]].show){
                                return true;
                            }
                        }
                    }

                    // Filter all unpublished targets
                    if(extensionTargets.length === 0 && conditions.target.unpublished.show) {
                        return true;
                    }
                }
                return false;
            }
        }
    }
};

utui.publish = {
	history: {dev: '', qa: '', prod: '', latest: ''},
	targetFlag: 0,
	save: 0,
	revisionId: 0,
	lastHighlightedVersion: 0,
	timelineDateCount: 0,
	lastTimelineEventID: 0,
	lastTimelineEventLast: 0,
	footerUsageExpiration: '201309080000',
	diffToolActivation: '201412232100',
	publishChoiceLabel: "",
	alwayCacheBustTags: ["20045","20060"],
	constants: {
		SAVE_AS: 'saveas'
	},
	clear: function () {
		$("#hist_eventTable .hist_eventRow").html("");
		$("#filterVersions .filterContent").html("");
		$("#filterOperators .filterContent").html("");
		$("#filterLabels .filterContent").html("");
		$("#filterEnvironments .filterContent").html("");

		$('#filter_displayTime_30d').prop('checked', false);
		$('#filter_displayTime_90d').prop('checked', false);
		$('#filter_displayTime_365d').prop('checked', false);
		$('#filter_displayTime_allTime').prop('checked', false);
		for (var i in utui.util.getVars(utui.data.publish_history)) {
			$('#publish_' + i).remove();
		}
		utui.data.publish_history = {};
		this.save = 0;
		this.revisionId = 0;
	},
	show: function () {
		this.showHelpTab();
	},
	load: function () {
		$('#tabs-publish').off().on('change', '.publish_div_pane #publish_div_title_input', function (e) { //trigger title update onchange of the input field
			$('.publish_div_pane .ui-icon-pencil').parent().click();
		});

		// Need to update the history if the custom targets enabled flag has changed
		utui.util.pubsub.subscribe(utui.constants.publish.CUSTOM_TARGETS_STATUS_CHANGED, this.onCustomtargetsStatusChange, true);

		// Event to get the pending approval requests
		utui.util.pubsub.subscribe(utui.constants.publish.WORKFLOW_PENDING, this.workflow.pending, this);

		// Events for the ask workflow
		utui.util.pubsub.subscribe(utui.constants.profile.SAVED, this.workflow.onAsk, this);
		utui.util.pubsub.subscribe(utui.constants.profile.SAVED_AS, this.workflow.onAsk, this);
		utui.util.pubsub.subscribe(utui.constants.profile.SET_PUBLISH_DATA, this.workflow.doAsk, this);

		// Events for the approve workflow
		utui.util.pubsub.subscribe(utui.constants.publish.WORKFLOW_APPROVE_START, this.workflow.onApprove, this);
		// The published event will let us know to check to see if the version published was in the approval process
		utui.util.pubsub.subscribe(utui.constants.profile.PUBLISHED, this.workflow.onPublished, this);
		utui.util.pubsub.subscribe(utui.constants.publish.WORKFLOW_APPROVE_COMPLETE, this.workflow.doApprove, this);

		// Event to cancel the approval request
		utui.util.pubsub.subscribe(utui.constants.publish.WORKFLOW_CANCELLED, this.workflow.approveCancelled, this);
		utui.util.pubsub.subscribe(utui.constants.profile.CANCELLED_SAVE, this.workflow.approveCancelled, this);

		// Event to ignore (hide) the request (for this user)
		utui.util.pubsub.subscribe(utui.constants.publish.WORKFLOW_DECLINE, this.workflow.decline, this);

		// When the profile has been loaded we will then load all the pending requests
		utui.util.pubsub.subscribe(utui.constants.users.LOADED, this.workflow.pending, this);

		// Fired when a new account has loaded - needed to get the labels for the new
		utui.util.pubsub.subscribe(utui.constants.account.CHANGED, this.onAccountChangedEvent);
	},
	onAccountChangedEvent: function() {
		// This will refresh the version history if any account labels are detected
		var labels = utui.publish.historyLabels.get().labels;
		if (labels) {
			utui.publish.historyLabels.redrawHistory();
		}
	},

	showHelpTab: function() {
		// ----------------------------------------------------
		var _namespace = 'publish';

		// ----------------------------------------------------
		var _articles = [
			{
				id: 0,
				title: localize.t('tiq.publish.help.0.title'),
				type: 'document',
				linkHref: common.community.versions_tab,
				isExternalLink: true
			},
			{
				id: 1,
				title: localize.t('tiq.publish.help.1.title'),
				type: 'document',
				linkHref: common.community.save_publish_a_version,
				isExternalLink: true
			}
		];

		var _context = {
			header: localize.t('tiq.publish.help.header'),
			body: localize.t('tiq.publish.help.body')
		}

		utui.help.initHelpTab(_namespace, _articles, _context);
	},

	onCustomtargetsStatusChange: function () {
		// Update the versions tab
		utui.publish.drawHistory(0, 10);

		// Update the summary tab
		if (utui.config.currentTab == 'dashboard') {
			utui.dashboard.show();
		}

		// Refresh the save/publish dialog
		if ($('#savePublish_dialog').is(':visible')) {
			utui.publish.showSaveDialog().refresh();
		}
	},

	workflow: {
		// Holds the pending approvals in memory
		data: null,

		// Holds the revision that was marked as approved (need to retain until the publish has succeeded)
		pendingVersion: null,

		// Set to true once user has saved/published
		// This is needed since we need to listen for the profile.LOADED event so we know if we should call doAsk method
		hasAskedForApproval: false,

		warningMessage: localize.t('tiq.publish.workflow.warning_message'),

		// ----------------------------------------------------------------
		// Show the notification badge
		showBadge: function (num) {
			var $badge = $('#global_save .flag');
			if (!$badge.get(0)) {
				$badge = $('<a href="#" class="flag">' + num + '</a>');
				$('#global_save').prepend($badge);
			}

			$badge.html(num)
				.animate({opacity: 1}, 500)
				.safeBind('click', function () {
					utui.publish.workflow.showPendingDialog();
					return false;
				});
		},

		// ----------------------------------------------------------------
		// Hide the notification badge
		hideBadge: function () {
			$("#global_save .flag").animate({opacity: 0}, 500, function () {
				$(this).remove();
			});
		},

		// ----------------------------------------------------------------
		reset: function () {
			var workflow = utui.publish.workflow;
			workflow.data = null;
			workflow.pendingVersion = null;
			workflow.hasAskedForApproval = false;
			workflow.hideBadge();
			workflow.hideWarning();
		},

		// ----------------------------------------------------------------
		// Get all pending
		// EVENT: profile.LOADED
		pending: function () {
			if (!utui.publish.workflow.isEnabled() || utui.publish.workflow.hasAskedForApproval) return;

			var dataObj = {userid: utui.login.email, account: utui.login.account, profile: utui.login.profile};
			utui.service.post(utui.service.restapis.WORKFLOW_PENDING, dataObj, null, utui.publish.workflow.onSuccess, utui.publish.workflow.onError);
		},

		// ----------------------------------------------------------------
		// Set hasAskedForApproval so when the profile has been loaded we know if we should send the request to URest
		// EVENT: profile.SAVED
		onAsk: function (saveObj) {
			if (!utui.publish.workflow.isEnabled() || (!saveObj || !saveObj.prodApproval)) return;

			utui.publish.workflow.hasAskedForApproval = true;
		},

		// ----------------------------------------------------------------
		// Ask for approval
		// EVENT: profile.utui.constants.profile.SET_PUBLISH_DATA
		doAsk: function () {
			if (!utui.publish.workflow.hasAskedForApproval) {
				return;
			}
			utui.publish.workflow.hasAskedForApproval = false;

			try {
				// Get the changes made since last publish
				var version = utui.data.settings.revision,
					revision = utui.data.publish_history[version].publishState.saved,
					changesObj = utui.publish.getChangeHistoryFromLastPublish('prod', version, revision),
					changesHTML = utui.historyManager.getStringFromEvents(changesObj),
					title = utui.profile.getRevisionTitle(version),
					notes = utui.data.publish_history[version][revision].notes,
					data = {userid: utui.login.email, account: utui.login.account, profile: utui.login.profile, version: version, revision: revision, title: title, notes: notes, changes: changesObj, changesFormatted: changesHTML};

				if(!data.changes) {
					data.changes = '';
				} else {
					data.changes = JSON.stringify(data.changes);
				}

				utui.util.pubsub.publish(utui.constants.publish.WORKFLOW_ASK, {action:utui.constants.publish.WORKFLOW_ASK});
				utui.service.post(utui.service.restapis.WORKFLOW_ASK, data, null, utui.publish.workflow.onSuccess, utui.publish.workflow.onError);

			} catch (e) {
				TRACE("Workflow Exception: " + e);
				utui.publish.workflow.showErrorDialog();
			}
		},

		// ----------------------------------------------------------------
		// Show publish dialog
		// This will need to load the account and then display the publish dialog
		// EVENT: publish.WORKFLOW_APPROVE_START
		onApprove: function (recordID) {
			if (recordID && !$.isEmptyObject(utui.publish.workflow.data)) {
				var obj = utui.publish.workflow.data[recordID],
					version = obj.version,
					revision = obj.revision;

				// So we know to show the save dialog
				utui.publish.workflow.pendingVersion = version;

				// Only load the revision if is different from the current
				if (version != utui.data.settings.revision) {
					utui.publish.workflow.setEvents();
					utui.profile.getRevision({account: obj.account, profile: obj.profile, revision: version});
				} else {
					utui.publish.workflow.showSaveDialog();
				}
			}
		},

		// ----------------------------------------------------------------
		// If prod was published...
		// EVENT: profile.PUBLISHED
		onPublished: function (data) {
			var workflow = utui.publish.workflow;

			// Only approve if the version being published to production is the same as the version that was approved
			if (!data || $.inArray("prod", data.targets) == -1 || !workflow.getRecordID(data.versionBeingPublished)) {
				utui.publish.workflow.pendingVersion = null;
				return;
			}

			workflow.pendingVersion = data.versionBeingPublished;

			utui.util.pubsub.publish(utui.constants.publish.WORKFLOW_APPROVE_COMPLETE);
		},

		// ----------------------------------------------------------------
		// Approve the publish request
		// EVENT: publish.WORKFLOW_APPROVE_COMPLETE
		doApprove: function () {
			var workflow = utui.publish.workflow,
				recordID = workflow.getRecordID(workflow.pendingVersion),
				dataObj = {id: recordID, userid: utui.login.email, account: utui.login.account, profile: utui.login.profile};

			utui.service.post(utui.service.restapis.WORKFLOW_APPROVE_COMPLETE, dataObj, null, workflow.onSuccess, workflow.onError);
			workflow.pendingVersion = null;
		},

		// ----------------------------------------------------------------
		// Removes the request
		// EVENT: publish.WORKFLOW_DECLINE
		decline: function (data) {
			var dataObj = {id: data.recordID, userid: utui.login.email, account: utui.login.account, profile: utui.login.profile};

			utui.service.post(utui.service.restapis.WORKFLOW_DECLINE, dataObj, null,
				function (responseData) {
					if (data.callback) data.callback();
					utui.publish.workflow.onSuccess(responseData);

				}, utui.publish.workflow.onError);
		},

		// ----------------------------------------------------------------
		// Success callback for all urest calls
		onSuccess: function (data) {
			utui.publish.workflow.data = data;
			var numPendingRequests = 0;
			if (!$.isEmptyObject(data)) {
				for (var obj in data) {
					numPendingRequests++;
				}
			}

			if (numPendingRequests) {
				utui.publish.workflow.showBadge(numPendingRequests);
			} else {
				utui.publish.workflow.hideBadge();
			}

			// Check if we need to display the version warning
			utui.publish.workflow.onShowWarning();
		},

		// ----------------------------------------------------------------
		// Error callback for all urest calls
		onError: function (status) {
			TRACE("Workflow Error Status: " + status);
			utui.publish.workflow.showErrorDialog();
		},

		// ----------------------------------------------------------------
		// This will show/hide the warning message that this version is under review
		onShowWarning: function () {
			if (!utui.publish.workflow.canSave()) {
				utui.publish.workflow.showWarning();
			} else {
				utui.publish.workflow.hideWarning();
			}
		},

		// ----------------------------------------------------------------
		showWarning: function () {
			utui.profile.warningMessage.show($('<div id="workflow_warning">' + utui.publish.workflow.warningMessage + '</div>'));
		},

		// ----------------------------------------------------------------
		hideWarning: function () {
			utui.profile.warningMessage.hide('workflow_warning');
		},

		// ----------------------------------------------------------------
		// Shows the save dialog once the profile has been loaded
		showSaveDialog: function () {
			utui.publish.workflow.clearEvents();

			// Only show the save dialog if there is a pendingVersion
			if (utui.publish.workflow.pendingVersion) {
				setTimeout(function () {
					utui.publish.showSaveDialog().initialize();
				}, 750);
			}
		},

		// ----------------------------------------------------------------
		// Displays an error message to the user
		showErrorDialog: function (title, message) {
			title = title || localize.t('tiq.publish.workflow.error.workflow_error');
			message = message || localize.t('tiq.publish.workflow.error.unable_to_process_request');

			$("<div><p>" + message + "</p></div>").dialog({
				modal: true,
				closeOnEscape: false,
				closeText: '',
				resizable: false,
				draggable: true,
				title: title,
				buttons: [
					{
						text: localize.t('tiq.dialog.button.close'),
						id: 'publishError_dialog_closeBtn',
						click: function() {
							$(this).dialog('close');
						}
					}
				]
			});
		},

		// ----------------------------------------------------------------
		// Cancels the approval request by clearing the events
		// EVENT: publish.WORKFLOW_CANCELLED and profile.CANCELLED_SAVE
		approveCancelled: function () {
			utui.publish.workflow.pendingVersion = null;
			utui.publish.workflow.clearEvents();
		},

		// ----------------------------------------------------------------
		// Displays a dialog will all the request for the user to take action on
		showPendingDialog: function () {
			var $content = $('<div id="concurrentUsersTableContainer" class="workflowDialog"></div>'),
				$row,                               // The row container
				$activity,                          // The activities container
				$activityButtons,                   // The ignore and approve buttons
				data = utui.publish.workflow.data,  // The data object that contains all the pending requests
				rowID,                              // ID of the row needed to display the tooltip
				activityID,                         // ID of the row details that is displayed on row click event
				count = 0,                          // Used to generate the activityID (row_{count}_{version})
				toolTipObj = {},                    // Contains all the tooltips
				notes;                              // Contains the notes for the version published

			// Append the row header
			$content.append('<div class="row header"><div class="user">' + localize.t('tiq.publish.workflow.user') + '</div><div class="version">' + localize.t('tiq.publish.workflow.version') + '</div><div class="date">' + localize.t('tiq.publish.workflow.date') + '</div></div>');

			// Iterate over the data
			for (var obj in data) {
				// ignore if obj is empty
				rowID = 'row_' + count;
				activityID = rowID + '_' + data[obj].version;
				notes = data[obj].notes;

				$row = $('<div id="' + rowID + '" class="row"></div>');
				if (notes) {
					$row.attr("title", notes.replace(/"/g, '&quot;'));
					toolTipObj[rowID] = {gravity: 's'};
				}
				$row.append('<div class="user">' + data[obj].userid.replace(/(.*)@.*/, '$1') + '</div>');
				$row.append('<div class="version">' + data[obj].title + '</div>');
				$row.append('<div class="date">' + utui.util.date.getFormattedDateFromTimestamp(data[obj].timestamp) + '</div></div>');

				$activity = $('<div id="' + activityID + '" class="activities"></div>');
				$activity.append('<div class="activities_inner">' + utui.historyManager.getStringFromEvents(data[obj].changes, 'row', true) + '</div>');
				$activityButtons = $('<div class="buttons"></div>');
				$activityButtons.append('<a href="#" class="btnDecline">' + localize.t('tiq.publish.workflow.decline') + '</a>');
				$activityButtons.append('<a href="#" class="btnApprove">' + localize.t('tiq.publish.workflow.approve') + '</a><br clear="both"/>');
				$activityButtons.find('a').button();

				// Only append buttons if the user has publish permissions
				if (utui.publish.workflow.canPublishProd()) {
					$activity.append($activityButtons);
				}

				// Set the id of the div to display in the data attribute so we know which div to toggle
				$row.data({recordID: obj, activityID: activityID})
					.append($activity)
					.safeBind('click', function () {
						var $row = $(this);
						// Hide all divs except the one we selected
						$('.workflowDialog .activities').each(function () {
							if ($row.data('activityID') != this.id) {
								$(this).slideUp(300);
							}
						});
						$('#' + $row.data('activityID')).slideDown(300);
					});
				$content.append($row);
				count++;
			}

			// Set the actions for the ignore/approve buttons
			$('.btnDecline', $content).safeBind('click', function () {
				var $row = $(this).parents('.row'),
					recordID = $row.data('recordID'),
					dataObj = {};

				dataObj.recordID = recordID;
				dataObj.callback = function () {
					// Remove the row
					$row.remove();

					// If there aren't any more rows to display then hide the dialog
					if ($('.workflowDialog').children().length == 1) {
						$('#dialog-confirmation').dialog('close');
					}
				}

				// Removes the record from the server
				utui.util.pubsub.publish(utui.constants.publish.WORKFLOW_DECLINE, dataObj);
			});

			$('.btnApprove', $content).safeBind('click', function () {
				// Get the recordID so we know if the version being published is this version
				var recordID = $(this).parents('.row').data('recordID');

				// Starts the approval process (displays the save dialog)
				utui.util.pubsub.publish(utui.constants.publish.WORKFLOW_APPROVE_START, recordID);

				$('#dialog-confirmation').dialog('close');
			});

			$('#dialog-confirmation-content').html($content);
			$('#dialog').dialog('destroy');
			$('#dialog').show();

			if (!$.isEmptyObject(toolTipObj)) {
				utui.util.addTooltip(toolTipObj);
			}

			$("#dialog-confirmation").dialog({
				autoOpen: true,
				height: 'auto',
				width: 'auto',
				modal: true,
				closeOnEscape: false,
				closeText: "",
				resizable: false,
				draggable: true,
				title: localize.t('tiq.publish.workflow.requests_to_publish'),
				buttons: [
					{
						text: localize.t('tiq.dialog.button.close'),
						id: 'requestPublish_dialog_closeBtn',
						click: function () {
							$(this).dialog("close");
						}
					}
				]
			});
		},

		// ----------------------------------------------------------------
		// Set the events to listen to to display the publish dialog and cancel
		setEvents: function () {
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, utui.publish.workflow.showSaveDialog, this);
			utui.util.pubsub.subscribe(utui.constants.profile.CANCELLED_UNSAVED_CHANGES, utui.publish.workflow.approveCancelled, this);
		},

		// ----------------------------------------------------------------
		// Clear the events (stop listening)
		clearEvents: function () {
			utui.util.pubsub.unsubscribe(utui.constants.profile.LOADED, utui.publish.workflow.showSaveDialog);
			utui.util.pubsub.unsubscribe(utui.constants.profile.CANCELLED_UNSAVED_CHANGES, utui.publish.workflow.approveCancelled);
		},

		// ----------------------------------------------------------------
		// Returns the recordID for the specified version if exists
		getRecordID: function (version) {
			for (var obj in utui.publish.workflow.data) {
				if (utui.publish.workflow.data[obj].version == version) {
					return obj;
				}
			}
			return null;
		},

		// ----------------------------------------------------------------
		canSave: function () {
			if (utui.publish.workflow.canPublishProd()) return true;

			// If this version is waiting for approval...
			var version = utui.data.settings.revision,
				workflow = utui.publish.workflow;

			for (var obj in workflow.data) {
				if (workflow.data[obj].version == version) {
					return false;
				}
			}

			return true;
		},

		// ----------------------------------------------------------------
		canPublishProd: function () {
			if (!utui.permissions.isWorkflowEnabled()) return true;
			return utui.permissions.canPublishProd();
		},

		// ----------------------------------------------------------------
		isEnabled: function () {
			// If workflow is not enabled return true
			if (!utui.permissions.isWorkflowEnabled()) {
				utui.publish.workflow.reset();
				return false;
			}
			return true;
		}
	},

	drawHistory: function (startVersion, numOfVersionsToShow) {

		// ---------------------------------------------
		var _helper = {
			getLowestRevisionNumberFromArray: function(array) {
				return Math.min.apply( Math, array );
			},
			getHighestRevisionNumberFromArray: function(array) {
				return Math.max.apply( Math, array );
			}
		};

		// ---------------------------------------------
		var _viewModel = {
			constructTargetOriginTrailView: function() {
				var id = utui.data.settings.revision;
				var targetOriginTrack = utui.publish.revision.getOriginTrack(id);
				var currentVersion = $('#hist_versionCurrent').closest('.hist_versionTitleBox').attr('data-version');

				// Apply target version into origin track
				targetOriginTrack.push(id);

				var minimum = _helper.getLowestRevisionNumberFromArray(targetOriginTrack);
				var maximum = _helper.getHighestRevisionNumberFromArray(targetOriginTrack);

				var _addCircleToId = function(id) {
					$('.hist_versionTitleBox[data-version='+id+']').find('.hist_versionTrail').addClass('trail-active');
				};

				// Remove all existing references
				$('.hist_sourceVersionTrail').removeClass('trail-active trail-discontinued trail-hidden').addClass('trail-hidden');

				// clear active trails first
				$('.hist_versionTrail').removeClass('trail-active');

				// Iterate through origin track
				for (var i = 0; i < targetOriginTrack.length; i++) {
				    _addCircleToId(targetOriginTrack[i]);
				};

				// Hide trail on current version
				$('.hist_versionTitleBox[data-version='+currentVersion+']').find('.hist_versionTrail').addClass('trail-hidden');

				// Apply hidden or discontinued styles to other trails
				for(var key in utui.data.publish_history) {
					var $trail = $('.hist_versionTitleBox[data-version='+key+']').find('.hist_versionTrail');

					if(key < minimum) {
						$trail.addClass('trail-discontinued');

					} else if(key > maximum) {
						$trail.addClass('trail-hidden');

					}
				}
			},
			constructSourceOriginTrailView: function(id) {
				var _id = +id;
				var _dataRevision = +utui.data.settings.revision;
				var sourceOriginTrack = utui.publish.revision.getOriginTrack(_id);
				var targetOriginTrack = utui.publish.revision.getOriginTrack(_dataRevision);
				var ancestorRevision = utui.publish.revision.getCommonAncestor(_dataRevision, _id);

				if(ancestorRevision) {
					ancestorRevision = +ancestorRevision;
				}

				$('.hist_sourceVersionTrail').removeClass('trail-active trail-discontinued trail-hidden trail-ancestor trail-match');

				sourceOriginTrack.push(_id);
				targetOriginTrack.push(_dataRevision);

				// Adjust boundaries for source version trail
				var minimum = _helper.getLowestRevisionNumberFromArray(sourceOriginTrack);
				var maximum = _helper.getHighestRevisionNumberFromArray(sourceOriginTrack);

				for (var i = 0; i < sourceOriginTrack.length; i++) {
				    $('.hist_versionTitleBox[data-version='+sourceOriginTrack[i]+']').find('.hist_sourceVersionTrail').addClass('trail-active');
				};

				// Add Ancestor Dot
				$('.hist_versionTitleBox[data-version='+ancestorRevision+']').find('.hist_sourceVersionTrail').addClass('trail-ancestor');

				for(var key in utui.data.publish_history) {
					var _k = +key;
					var $trail = $('.hist_versionTitleBox[data-version='+_k+']').find('.hist_sourceVersionTrail');

					if(ancestorRevision > _k) {
						$trail.addClass('trail-hidden');
					}

					// Set min and max value
					if(_k < minimum) {
						$trail.addClass('trail-discontinued');
					} else if(_k > maximum) {
						$trail.addClass('trail-hidden');
					}
				}

				// If trails share the same revisions, shift trail over
				for (var i = 0; i < sourceOriginTrack.length; i++) {
					if(~targetOriginTrack.indexOf(sourceOriginTrack[i])) {
						$('.hist_versionTitleBox[data-version='+sourceOriginTrack[i]+']').find('.hist_sourceVersionTrail').addClass('trail-match');
					}
				};

				// if hover over ancestor
				if(~targetOriginTrack.indexOf(_id)) {
					$('.hist_versionTitleBox').find('.hist_sourceVersionTrail').addClass('trail-match');
				}
			}
		};

		// ---------------------------------------------
		var _render = {
			versionOriginRelationshipView: function() {

				_viewModel.constructTargetOriginTrailView();

				$('.hist_versionTitleBox').off('mouseleave').on('mouseleave', function(a) {
					$('.hist_sourceVersionTrail').removeClass('trail-active trail-discontinued trail-hidden trail-ancestor trail-match').addClass('trail-hidden');
				});

				$('.hist_versionTitleBox').off('mouseenter').on('mouseenter', function(a) {
				    var $el = $(this);
				    var id = $el.attr('id').split('_')[2];

					_viewModel.constructSourceOriginTrailView(id);
				});
			}
		};

		$("#hist_versionList").html('');
		$("#hist_eventTable tr.hist_eventRow").html('');

		var publish_history_versionList = [];
		var publish_history_reverse = [];
		var publish_history_full = [];
		var publish_operatorsList = [];
		var varCounter = 0;
		var versionCount = startVersion;
		var includesCurrentVersion_b = false;
		var versionMax = startVersion + numOfVersionsToShow;


		// Get Published Environments
		var publish = utui.targets.addTargetsToObject({latest: {}, current: {}}, {});

		if (utui.publish.history.latest != '') {
			for (var key in publish) {
				if (key != 'latest' && key != 'current') {
					publish[key] = utui.dashboard.getLatestTarget(key);
				}
			}
		}

		// Set Default Time Filter
		var jsDate = new Date();
		var now = utui.util.date.getUtuiStringFromDate(jsDate);
		var last30d = new Date(jsDate - (30 * 24 * 60 * 60 * 1000));
		last30d = utui.util.date.getUtuiStringFromDate(last30d);
		var last90d = new Date(jsDate - (90 * 24 * 60 * 60 * 1000));
		last90d = utui.util.date.getUtuiStringFromDate(last90d);
		var last365d = new Date(jsDate - (365 * 24 * 60 * 60 * 1000));
		last365d = utui.util.date.getUtuiStringFromDate(last365d);

		if (!$('#filter_displayTime_30d').is(':checked') && !$('#filter_displayTime_90d').is(':checked') && !$('#filter_displayTime_365d').is(':checked') && !$('#filter_displayTime_allTime').is(':checked')) {

			var filterDisplayTime = function (time) {
				var targets = utui.targets.getList(),
					len = targets.length;
				for (var i = 0; i < len; i++) {
					var key = targets[i];
					if (publish[key].last >= time) {
						// do nothing
					} else {
						return false;
					}
				}
				return true;
			}
			if (filterDisplayTime(last30d)) {
				// All published within 30 days, filter by 30 days
				$('#filter_displayTime_30d').prop('checked', true);
			} else if (filterDisplayTime(last90d)) {
				// Some within 90 days, filter by 90 days
				$('#filter_displayTime_90d').prop('checked', true);
			} else if (filterDisplayTime(last365d)) {
				// Some within 365 days, filter by 365 days
				$('#filter_displayTime_365d').prop('checked', true);
			} else {
				// Do not filter by time
				$('#filter_displayTime_allTime').prop('checked', true);
			}
		}

		// If the versions filter list is empty, generate the list
		if ($("#filterVersions .filterContent").html().replace(/\s+/g, ' ') == '') {
			for (var m in utui.data.publish_history) {
				if (m != 'publishState') {
					var pm = utui.data.publish_history[m][utui.data.publish_history[m].publishState.saved];
					if (pm) {
						var pmTitle = pm.title;
						if (!pmTitle)pmTitle = localize.t('tiq.publish.no_title');
						$("#filterVersions .filterContent").prepend('<div class="filterInput"><input id="filter_version_' + pm.id + '" type="checkbox"><label id="filter_version_label_' + pm.id + '" for="filter_version_' + pm.id + '">' + pmTitle + '</label></div>');
					}
				}
			}
		}
		$("#filterVersions input").off().on('change', function () {
			utui.publish.drawHistory(0, numOfVersionsToShow);
		});
		var filterVersionsEnabled = false;
		if ($('#filterVersions input').is(':checked')) {
			filterVersionsEnabled = true;
		}

		// If the operators filter list is empty, generate the list
		if ($("#filterOperators .filterContent").html().replace(/\s+/g, ' ') == '') {


			for (var m in utui.data.publish_history) {
				if (m != 'publishState') {
					var pm = utui.data.publish_history[m][utui.data.publish_history[m].publishState.saved];
					if (pm) {
						for (var n in utui.util.getVars(utui.data.publish_history[m])) {
							if (n != 'publishState') {
								var rev = utui.data.publish_history[m][n];
								publish_operatorsList.push(rev.operator);
							}
						}
					}
				}
			}

			var unique = function (origArr) {
				var newArr = [],
					origLen = origArr.length,
					found,
					x, y;
				for (x = 0; x < origLen; x++) {
					found = undefined;
					for (y = 0; y < newArr.length; y++) {
						if (origArr[x] === newArr[y]) {
							found = true;
							break;
						}
					}
					if (!found) newArr.push(origArr[x]);
				}
				return newArr;
			};
			publish_operatorsList = unique(publish_operatorsList).sort();

			for (var op = 0; op < publish_operatorsList.length; op++) {
				var shortOpName = publish_operatorsList[op].replace(/[^\w\s]/gi, '_');
				$("#filterOperators .filterContent").append('<div class="filterInput"><input id="filter_operator_' + shortOpName + '" type="checkbox"><label for="filter_operator_' + shortOpName + '">' + publish_operatorsList[op] + '</label></div>');
			}
		}
		$("#filterOperators input").off().on('change', function () {
			utui.publish.drawHistory(0, numOfVersionsToShow);
		});
		var filterOperatorsEnabled = false;
		if ($('#filterOperators input').is(':checked')) {
			filterOperatorsEnabled = true;
		}

		// always generate the labels filter list
		var labels = utui.publish.historyLabels.get().labels,
			filterLabelContent = '',
			$filterLabels = $('#filterLabels');

		for (var id in labels) {
			var label = labels[id],
				inputID = 'filter_label_' + id;
			filterLabelContent += '<div class="filterInput" title="' + utui.util.safeEscape(label.name) + '"><input id="' + inputID + '" type="checkbox" ' + ($('#' + inputID).is(':checked') ? 'checked="checked"' : '') + '><label for="' + inputID + '"><span class="label-color-sm ' + utui.util.safeEscape(label.color) + '"></span>' + utui.util.safeEscape(label.name) + '</label></div>';
		}

		$filterLabels.find('.filterHeader span').safeBind('click', function() {
			utui.publish.historyLabels.labelsManagerDialog.show();
		});
		$filterLabels.find('.filterContent').empty().html(filterLabelContent);
		$filterLabels.find('input').safeBind('change', function () {
			utui.publish.drawHistory(0, numOfVersionsToShow);
		});
		var filterLabelsEnabled = false;
		if ($filterLabels.find('input').is(':checked')) {
			filterLabelsEnabled = true;
		}

		// Generate the environments list
		var targets = utui.targets.getList(),
			len = targets.length,
			environmentList = ''
		for (var i = 0; i < len; i++) {
			var key = targets[i],
				displayName = utui.targets.aliasDisplayName(key),
				checked = ($('#filter_environment_' + key).is(':checked')) ? 'checked="checked"' : '';

			environmentList += '<div class="filterInput ellipsis"><input id="filter_environment_' + key + '" type="checkbox" ' + checked + '><label for="filter_environment_' + key + '" class="env_alias_' + key + '" title="' + displayName + '">' + displayName + '</label></div>';
		}
		$("#filterEnvironments .filterContent").empty().append(environmentList);

		$('#publish_envContainer').html(utui.publish.viewPublishEnvContainer());


		$('#filterEnvironments input').safeBind('change', function () {
			utui.publish.drawHistory(0, numOfVersionsToShow);
		});

		// Apply Filters
		var resultsAreFiltered = false;
		for (var s in utui.data.publish_history) {
			if (s != 'publishState') {
				// Reverse the order of the history and store in temp variable
				publish_history_reverse.unshift(s);

				var ps = utui.data.publish_history[s][utui.data.publish_history[s].publishState.saved];
				if (ps) {

					// Check each filter and only put relevant events and versions into the lists to be printed
					var foundFilters = false;


					var filterVersionID = '#filter_version_' + ps.id;
					var filterVersionIDChecked = $(filterVersionID).is(':checked');
					if (filterVersionsEnabled && !filterVersionIDChecked) {
						foundFilters = false;
					} else {
						for (var t in utui.util.getVars(utui.data.publish_history[s])) {
							var hideRev = false;
							if (t != 'publishState') {

								// Check filter criteria here
								var myRev = utui.data.publish_history[s][t];

								// Check if Saved Events should be displayed
								if (!$('#filter_displaySaveEvents').is(':checked')) {
									if (!myRev.status) {

										//if (!(myRev.action.indexOf('Published') != -1)) {
										hideRev = true;
									}
								}

								// Check if Published Events should be displayed
								if (myRev.status) {
									// If this revision was published and the environment it was published to isn't selected then hide this revision
									var revTargets = myRev.status.toString().split(','),
										targets = utui.targets.getList(),
										len = revTargets.length,
										revEnvironmentSelected = false,
										isEnvironmentSelected = $('#filterEnvironments').find('input').is(':checked');

									// Loop over all the published environments for this revision
									// and check if we are filtering on one of those environments
									for (var i = 0; i < len; i++) {
										var key = $.trim(revTargets[i]);
										if ($.inArray(key, targets) > -1) {
											if ($('#filter_environment_' + key).is(':checked')) {
												revEnvironmentSelected = true;
											}
										}
									}
									// If we are not filtering on any of the environments for this revision but we ARE filtering then hide this revision
									if (!revEnvironmentSelected && isEnvironmentSelected) {
										hideRev = true;
									} else {
										hideRev = false;
									}
								}

								if (myRev.last < last30d && $('#filter_displayTime_30d').is(':checked')) {
									hideRev = true;
								} else if (myRev.last < last90d && $('#filter_displayTime_90d').is(':checked')) {
									hideRev = true;
								} else if (myRev.last < last365d && $('#filter_displayTime_365d').is(':checked')) {
									hideRev = true;
								}

								// Check if Operator should be displayed
								var operatorName = myRev.operator.replace(/[^\w\s]/gi, '_');
								var operatorFilterID = '#filter_operator_' + operatorName;
								if (filterOperatorsEnabled) {
									if (!$(operatorFilterID).is(':checked')) {
										hideRev = true;
									}
								}

								// Check if we are filtering off labels
								if (filterLabelsEnabled) {
									var ids = utui.publish.historyLabels.get().mapping[t],
										hasFilteredLabel = false;

									if (ids) {
										var hasFilteredLabel = false;
										for (var i=0; i<ids.length; i++) {
											if ($('#filter_label_' + ids[i]).is(':checked')) {
												hasFilteredLabel = true;
											}
										}
									}
									if (!hasFilteredLabel) hideRev = true;
								}

								if (!hideRev) {
									foundFilters = true;
									publish_history_full.push(myRev);
								} else {
									resultsAreFiltered = true;
								}

							}
						}
					}
					if (foundFilters) {
						publish_history_versionList.push(ps);
						varCounter++;
					}
				}
			}
		}

		// Reorder the versions and display them (most recent at top)
		publish_history_versionList.reverse();


		// --- Print out Version List ------

		var elementDisplayList = [];
		var versionDisplayList = [];
		var verCounter = startVersion;
		var displayCounter = 0;

		while (verCounter < publish_history_versionList.length && displayCounter < numOfVersionsToShow) {

			var s = publish_history_versionList[verCounter].id;
			versionDisplayList.push(s);

			for (var b = 0; b < publish_history_full.length; b++) {
				if (publish_history_full[b].id == s) {
					elementDisplayList.push(publish_history_full[b]);
				}
			}

			utui.publish.addVersionRecord(publish_history_versionList[verCounter]);
			verCounter++;
			displayCounter++;
		}

		// Apply origin trails to version box
		_render.versionOriginRelationshipView();

		// bind
		$('#publish_container').on('click','.js-btn-merge', function(e) {
			e.stopImmediatePropagation();
			
			var $el = $(this),
				revision = $el.attr('data-rev');

			utui.publish.showMergeDialog(revision);
		});

		// --- Print out Event List ---

		publish_history_versionList.reverse();
		// Display the Event History for the X versions
		elementDisplayList.sort(function (a, b) {
			return b.last - a.last
		});
		for (var i = elementDisplayList.length - 1; i >= 0; i--) {
			utui.publish.addEventRecord(elementDisplayList[i], i, publish);
		}

		// --- Adjust vertical position of the events ---
		var labelHeight = 41;
		var heightOffset = 2;
		var scrollUpHeight = 18;
		for (var i = 0; i < versionDisplayList.length; i++) {
			myOffset = heightOffset;
			myOffset = heightOffset + scrollUpHeight; //Account for the height of the up arrow
			var height = ((labelHeight * i) + myOffset) + 'px';
			$('.hist_eventVer_' + versionDisplayList[i] + ' .hist_timelineSpacer').css({"height": height});
		}

		// --- Tweak the positioning of other elements ---
		var $hist_eventRow = $("#hist_eventTable tr.hist_eventRow");
		$hist_eventRow.prepend('<td><div class="hist_timelineEmpty"></div></td>');
		$hist_eventRow.attr('data-row', startVersion);
		$("#hist_eventTableHeader").attr('colspan', publish_history_full.length + 2);
		$("#hist_timeStamps").attr('colspan', publish_history_full.length + 2);


		// --- Dim inactive environment timelines ---
		var isEnvironmentSelected = $('#filterEnvironments').find('input').is(':checked'),
			targets = utui.targets.getList(),
			len = targets.length,
			isCustomSelected = false;

		// Loop over all the targets to toggle the timeline connectors
		for (var i = 0; i < len; i++) {
			var key = targets[i],
				displayName = utui.targets.toDisplayName(key);
			// If this is a default environment (dev,qa,prod) then toggle the connector
			if (utui.targets.isDefault(key)) {
				if ($('#filter_environment_' + key).is(':checked') || !isEnvironmentSelected) {
					$('#hist_' + key + 'Events').removeClass('dimTimeline');
					$('.env_' + key + 'Box .env_connector').removeClass('dimTimeline');
					$('.hist_timelineConnector.hist_' + displayName).removeClass('dimTimeline');
				} else {
					$('#hist_' + key + 'Events').addClass('dimTimeline');
					$('.env_' + key + 'Box .env_connector').addClass('dimTimeline');
					$('.hist_timelineConnector.hist_' + displayName).addClass('dimTimeline');
				}
				// if is custom environment check to see if at least 1 custom was selected
			} else {
				if ($('#filter_environment_' + key).is(':checked')) {
					isCustomSelected = true;
				}
			}
		}

		// If at least 1 custom environment was selected or nothing is selected...
		if (isCustomSelected || !isEnvironmentSelected) {
			$('.hist_timelineConnector.hist_Custom').removeClass('dimTimeline');
		} else {
			$('.hist_timelineConnector.hist_Custom').addClass('dimTimeline');
		}

		// --- Add controls to navigate Versions ---
		if (startVersion > 0 && publish_history_versionList.length > 0) {
			$("#hist_versionBox .scrollUp").addClass('clickable');
			$("#hist_versionBox .scrollUp").off().on('click', function () {
				var begin = startVersion - numOfVersionsToShow;
				if (begin < 0) {
					begin = 0;
				}
				utui.publish.drawHistory(begin, numOfVersionsToShow);
			});
		} else {
			$("#hist_versionBox .scrollUp").removeClass('clickable');
		}

		if ((startVersion + numOfVersionsToShow) < publish_history_versionList.length) {
			$("#hist_versionBox .scrollDown").addClass('clickable');
			$("#hist_versionBox .scrollDown").off().on('click', function () {
				var begin = startVersion + numOfVersionsToShow;
				if (begin > publish_history_versionList.length) {
					begin = begin - publish_history_versionList.length;
				}
				utui.publish.drawHistory(begin, numOfVersionsToShow);
			});
		} else {
			$("#hist_versionBox .scrollDown").removeClass('clickable');
		}

		// --- Add Row Highlights ---
		$("#hist_eventTable tr.hist_eventRow").append('<td width="100%" id="hist_timelineSpacerCell"><div class="spacerContainer"></div></td>');
		//var highlightWidth = $("#hist_eventTable").width();
		for (var s = 0; s < versionDisplayList.length; s++) {
			var highlightTop = $('.hist_eventVer_' + versionDisplayList[s] + ' .hist_timelineSpacer').height();
			$("#hist_timelineSpacerCell .spacerContainer").append('<div id="hist_highlight_' + versionDisplayList[s] + '" class="hist_highlight" style="top:' + highlightTop + 'px;"></div>');
		}
		if (displayCounter < 1) {
			utui.publish.displayNoEventsMessage(resultsAreFiltered);
		}

		// --- Add Publish URLs ---
		var publishRoot = '//' + gAppConfig.utag_host + '/' + gAppConfig.utag_path + '/' + utui.data.settings.account + '/' + utui.data.settings.profileid;

		var publishURL = {},
			targets = utui.targets.getList(),
			len = targets.length;
		for (var i = 0; i < len; i++) {
			var key = targets[i],
				displayName = utui.targets.aliasDisplayName(key);

			publishURL[key] = publishRoot + '/' + key + '/utag.js';
			publishURL[key + '_footer'] = publishRoot + '/' + key + '/utag.footer.js';
			publishURL[key + '_sync'] = publishRoot + '/' + key + '/utag.sync.js';
			publishURL[key + '_distro'] = publishRoot + '/' + key + '/distro.zip' + '?utk=' + new Date().getTime();

			//For accounts that do not publish to the cdn. Allow to download from filesystem.
			if (utui.account.use_cdn === false) {
					publishURL[key + '_distro'] = '/urest/legacy/' + utui.data.settings.account + '/' + utui.data.settings.profileid + '/' + key + '/distro?utk=' + utui.util.getUTK();
			}

			if (utui.data.publish) {
				if (!$.isEmptyObject(utui.data.publish['publish_' + key])) {
					publishURL[key] = utui.data.publish['publish_' + key] + 'utag.js';
					publishURL[key + '_footer'] = utui.data.publish['publish_' + key] + 'utag.footer.js';
				}
			}
			$('.hist_eventRev_' + publish[key].id + publish[key].last + ' .hist_verEventDetails .histEventUTagLinks').append(utui.publish.listPublishDetails(publish[key].id,publish[key].last , displayName , publishURL[key] , publishURL[key + '_footer'] , publishURL[key + '_sync'] , publishURL[key + '_distro'] , key, true));
		}

		$('li.ditroDiff').on('click', function(e) {
			if ($(this).hasClass('diff-unselectable')) {
				return;
			}
			window.RevisionCompare_data = window.RevisionCompare_data || {md5 : {}, diff : {}};
			var $comp=$(this);

			if(!RevisionCompare_data.diff.base) {
				RevisionCompare_data.diff.base = {'account' : utui.login.account, 'profile':utui.login.profile, 'version' : $comp.attr('data-ver'), 'revision' : $comp.attr('data-rev'), 'env' : $comp.attr('data-env')};

				var content = '';
				content += '<div class="diffWarningBar">';
				content += '	<i class="icon-warning-sign"></i>';
				content += 		localize.t('tiq.publish.diff_selection_mode') + ' <div onclick="utui.publish.distroCompareCancel();" class="btn btn-small" style="margin-bottom: 3px;">' + localize.t('tiq.publish.cancel') + '</div>';
				content += '<div>';
				$('div#publish_container').before(content);
				$('div.diffWarningBar').slideDown();
				$(this).addClass('diff-unselectable').css({"color": "grey","cursor": "default"});
			} else {
				$('div.diffWarningBar').remove();
				RevisionCompare_data.diff.compare = {'account' : utui.login.account, 'profile':utui.login.profile, 'version' : $comp.attr('data-ver'), 'revision' : $comp.attr('data-rev'), 'env' : $comp.attr('data-env')};
				utui.publish.distroCompare();
				$('.diff-unselectable').removeClass('diff-unselectable').css({"color": "","cursor": ""});
			}
		});
		if (!utui.publish.diffToolSubscribed) {
			utui.publish.diffToolSubscribed=true;
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED,function() {utui.publish.distroCompareCancel();},null);
		}

		$('li.ditroVer').on('click', function(e) {
			window.RevisionCompare_data = window.RevisionCompare_data || {md5 : {}, diff : {}};
			var $comp=$(this);
			RevisionCompare_data.md5 = {'account' : utui.login.account, 'profile':utui.login.profile, 'version' : $comp.attr('data-ver'), 'revision' : $comp.attr('data-rev'), 'env' : $comp.attr('data-env')};
			utui.publish.digestVerification();
		});


		$('div.histEventUTagLinks > a').on('click', function(){
			var $ul = $( this).next(),
					$sel=$("i",this);
			if($sel.hasClass('icon-caret-right')) {
				$sel.removeClass('icon-caret-right').addClass('icon-caret-down');
				$(this).addClass('expanded');
				$ul.slideDown();
			} else {
				$sel.removeClass('icon-caret-down').addClass('icon-caret-right');
				$ul.hide();
				$(this).removeClass('expanded');
			}
		});
		// --- Assign FILTER functions to filter elements ---
		// Expand/Collapse Event Details
		$('#filter_displayAllDetails').off().on('click', function () {
			utui.publish.filterAllDetails(true);
			utui.publish.highlightHide();
		});
		utui.publish.filterAllDetails();

		// Show/Hide Save Events
		$('#filter_displaySaveEvents').off().on('click', function () {
			utui.publish.drawHistory(0, numOfVersionsToShow);
		});

		// Show/Hide Save Events
		$('#filter_displayVersionRelationship').off().on('click', function () {
			utui.publish.showVersionRelatonship();
		});

		// Show/Hide Publish Events
		$('#filter_displayPublishEvents').off().on('click', function () {
			utui.publish.drawHistory(0, numOfVersionsToShow);
		});

		// Filter by Time
		$('[name$="filter_displayTime"]').off().on('click', function () {
			utui.publish.drawHistory(0, numOfVersionsToShow);
		});

		// Close Version Menu after an item was clicked
		$('.hist_versionTitleBox .menu_list_container').off().on('click', function () {
			$('.menu_list_container').hide('fast');
			utui.profile.disposeClickCapture();
		});

		// Play Demo Video
		$('.filterBox .legendVideo').off().on('click', function () {
			utui.util.video.show('//tags.tiqcdn.com/screencasts/versionsTab');
		});

		// --- Mark current published environments ---
		var targets = utui.targets.getList(),
			len = targets.length,
			isEnvironmentSelected = $('#filterEnvironments').find('input').is(':checked');
		for (var i = 0; i < len; i++) {
			var key = targets[i];
			if ($('#filter_environment_' + key).is(':checked') || !isEnvironmentSelected) {
				utui.publish.markPublishedEnvironments(publish[key], (utui.targets.isCustom(key)) ? 'custom' : key);
			}
		}
	},
	viewPublishEnvContainer: function () {
		var devAliasName = utui.targets.aliasDisplayName('dev'),
			qaAliasName = utui.targets.aliasDisplayName('qa'),
			prodAliasName = utui.targets.aliasDisplayName('prod'),
			v = '';

		v += '  <div class="env_devBox">';
		v += '      <div class="env_connector">';
		v += '          <span id="env_label_dev" class="env_label ellipsis env_alias_dev" title="' + devAliasName + '">' + devAliasName + '</span>';
		v += '      </div>';
		v += '  </div>';
		v += '  <div class="env_qaBox">';
		v += '      <div class="env_connector">';
		v += '          <span id="env_label_qa" class="env_label ellipsis env_alias_qa" title="' + qaAliasName + '">' + qaAliasName + '</span>';
		v += '      </div>';
		v += '  </div>';
		v += '  <div class="env_prodBox">';
		v += '      <div class="env_connector">';
		v += '          <span id="env_label_prod" class="env_label ellipsis env_alias_prod" title="' + prodAliasName + '">' + prodAliasName + '</span>';
		v += '      </div>';
		v += '  </div>';

		return v;
	},
	displayNoEventsMessage: function (resultsAreFiltered) {
		var content = '';
		content += '<div class="hist_noVersions"></div>';
		$("#hist_versionList").append(content);

		content = '';
		if (resultsAreFiltered) {
			content += '<div class="hist_noVersionsFiltered">' + localize.t('tiq.publish.results_are_filtered') + '</div>';
		}
		content += '<div class="hist_noVersionsText">' + localize.t('tiq.publish.there_are_no_events') + '</div>';
		$("#hist_timelineSpacerCell .spacerContainer").append(content);
		$("#hist_timelineSpacerCell .spacerContainer").addClass('hist_noEvents');
	},
	showMakeCopyOption: function (bShow) {
		var $option = $('#hist_verTitleMenu_' + utui.data.settings.revision).find('.makeCopyLnk');
		if (bShow) {
			$option.show();
		}
		else {
			$option.hide();
		}
	},

	showMergeDialog: function(revision) {
		var targetRevision = utui.data.settings.revision;
		var sourceRevision = revision;
		var ancestorRevision = utui.publish.revision.getCommonAncestor(+targetRevision, +sourceRevision);

		$('#publish_edit_' + sourceRevision).hide();

		if(!ancestorRevision) {
			utui.publish.revision.dialog.alertNotMergeable.show();
			return false;
		}

		utui.util.loadingModalStart(localize.t('tiq.publish.fetching_version_to_merge'));

		$.when(

			utui.service.get(utui.service.restapis.GET_PROFILE, { revision: ancestorRevision }, null, function(data) {
				utui['ancestor_data'] = $.extend(true, {}, data);
			}),
			utui.service.get(utui.service.restapis.GET_PROFILE, { revision: sourceRevision }, null, function(data) {
				utui['incoming_data'] = $.extend(true, {}, data);
			})

		).then(function() {

			utui.labels.request.getLabels({account:utui.data.settings.account, profile:utui.data.settings.profileid, version:revision}, function(labelData) {

				// Set label collection before merge begins
				utui.diff.merge.setLabelsData(utui.data.settings.revision, utui.data.labels);

				if(labelData) {
					utui.diff.merge.setLabelsData(revision, labelData.labels);
				} else {
					utui.diff.merge.setLabelsData(revision, {});
				}

				var errorStack = utui.diff.isValidIncomingVersion(utui.incoming_data, labelData);

				if(errorStack.length) {
					return utui.diff.showCannotMergeNotQualified(errorStack, false);
				}

				var profileKey = utui.data.settings.account + '_' + utui.data.settings.profileid;
				diffapi.setStash(profileKey, 'current', diffapi.runUtuiAnalysis('ancestor_data','data')); // my changes
				diffapi.setStash(profileKey, 'source', diffapi.runUtuiAnalysis('ancestor_data','incoming_data')); // their changes

				utui.diff.merge.onVersions();

				utui.util.loadingModalStop();
			});
		});
	},

	// This will make any necessary changes to the details menu when each version title is clicked
	updateVersionTitleMenu: function () {
		// Need to hide/show the "Rename" div depending on the disable_custom_version_name value
		$(".menuRenameVersion").css("display", utui.data.publish.disable_custom_version_name ? "none" : "block");
	},

	isRevisionMergeable: function(revId){

		var getLowestRevisionNumberFromArray = function(array){
			return Math.min.apply( Math, array );
		};

		var mergeErrors = [];

		var _revId = +revId;
		var originTrack = utui.publish.revision.getOriginTrack(utui.data.settings.revision);
		var minimum = getLowestRevisionNumberFromArray(originTrack);
		var ancestor = utui.publish.revision.getCommonAncestor(utui.data.settings.revision, _revId);

		if(~originTrack.indexOf(_revId)) {
			mergeErrors.push(utui.constants.merge_block.COMMON_ORIGIN); // Incoming version is already in the origin track
		} else if(minimum > _revId) {
			mergeErrors.push(utui.constants.merge_block.FOREIGN_BRANCH); // Incoming version existed before the origin track - it must be foreign
		} else if(!ancestor) {
			mergeErrors.push(utui.constants.merge_block.NO_ANCESTOR); // Cannot find a common ancestor
		}

		return mergeErrors;

	},
	addVersionRecord: function (obj) {
		var tempTitle = localize.t('tiq.publish.no_title');

		if (obj.title) tempTitle = utui.util.safeEscape(obj.title);

		var content = '';
		content += '<div id="hist_verTitle_' + obj.id + '" data-version="'+obj.id+'" class="hist_versionTitleBox" onMouseOver="utui.publish.highlightEvent(' + obj.id + ');">';
		if (obj.id == utui.data.settings.revision) {
			content += '<div id="hist_versionCurrent" title="' + localize.t('tiq.publish.this_is_current_version') + '"></div>';
		}
		content += '<div class="hist_versionTitle">';
			content += '<div class="hist_versionMenuIcon"></div>';
			content += '<div class="hist_versionTitleLabel">' + tempTitle + '</div>';
			content += '<div class="hist_versionTrail"></div>';
			content += '<div class="hist_sourceVersionTrail"></div>';
		content += '</div>';
		content += '<div id="hist_verTitleMenu_' + obj.id + '" class="menu_list_container gradient">';
		content += '<div class="menulistitem"><a class="menulistfont hist_version_expandDetails showDetailExpander" href="#">' + localize.t('tiq.publish.expand_details') + '</a></div>';
		content += '<div class="menulistitem"><a class="menulistfont hist_version_expandDetails hideDetailExpander" href="#" style="display:none;">' + localize.t('tiq.publish.hide_details') + '</a></div>';
		if (obj.id == utui.data.settings.revision) {
			content += '<div class="menudivider"></div>';
			if (utui.profile.import.isProfile()) {
				content += '<div class="menulistitem menuRenameVersion"><a class="menulistfont" href="#" onclick="utui.publish.renameVersionConfirm(\'' + obj.id + '\',\'' + obj.last + '\')">' + localize.t('tiq.publish.rename') + '</a></div>';
			}
			content += '<div class="menulistitem makeCopyLnk"><a class="menulistfont" href="#" onclick="utui.publish.copyRevisionConfirm(\'' + obj.id + '\',\'' + obj.last + '\')">' + localize.t('tiq.publish.make_copy') + '...</a></div>';
		} else {
			content += '<div class="menudivider"></div>';
			content += '<div class="menulistitem"><a class="menulistfont" href="#" onclick="utui.publish.editDeploy(\'' + obj.id + '\')">' + localize.t('tiq.publish.switch_to_this_version') + '</a></div>';
			if(utui.publish.isRevisionMergeable(obj.id).length == 0) {
				content += '<div class="menulistitem"><a class="menulistfont js-btn-merge" href="#" data-rev="'+obj.id+'">'+localize.t('tiq.publish.merge_into_session')+'</a></div>';
			} else {
				// content += '<div class="menulistitem"><a class="menulistfont js-btn-merge" href="#" data-rev="'+obj.id+'">'+localize.t('tiq.publish.merge_into_session')+'</a></div>';
				content += '<div class="menulistitem"><span style="padding: 4px 4px 4px 16px; display: block; color: #999;">'+localize.t('tiq.publish.cannot_merge_version')+' (<a href="#" onclick=\"utui.help.openCommunityLink(\'' + common.community.merge_into_current_session_versions_tab + '\'); return false;\">'+localize.t('tiq.publish.why')+'</a>)</span></div>';
			}

		}
		content += '<div class="menudivider"></div>';
		content += '<div class="menulistitem"><a class="menulistfont" href="#" onclick="utui.publish.showNotesSinceVersion(\'' + obj.id + '\')">'+localize.t('tiq.publish.show_notes_since_this_version')+'</a></div>';
		content += '</div>';
		content += '</div>';

		$("#hist_versionList").append(content);

		// Show Menu
		$('#hist_verTitle_' + obj.id + ' .hist_versionTitle').off("click").on('click', function (e) {
			// if( $(e.target).hasClass('hist_versionMenuIcon')) return false;

			// Make and necessary changes to the menu before it is displayed
			utui.publish.updateVersionTitleMenu();

			utui.profile.menuToggle('hist_verTitleMenu_' + obj.id);
		});

		// Show Details
		$('#hist_verTitle_' + obj.id + ' .hist_version_expandDetails').off("click").on('click', function () {
			var myVersionTitle = $('#hist_verTitle_' + obj.id + ' .showDetails');
			if (myVersionTitle.length > 0) {
				utui.publish.hideVersionEventDetails(obj.id);
				myVersionTitle.removeClass('showDetails');
				$('#hist_verTitle_' + obj.id + ' .showDetailExpander').show();
				$('#hist_verTitle_' + obj.id + ' .hideDetailExpander').hide();
			} else {
				utui.publish.showVersionEventDetails(obj.id);
				$('#hist_verTitle_' + obj.id + ' .hist_versionTitle').addClass('showDetails');
				$('#hist_verTitle_' + obj.id + ' .showDetailExpander').hide();
				$('#hist_verTitle_' + obj.id + ' .hideDetailExpander').show();
			}
			utui.publish.highlightEvent(obj.id);
		});
	},

	getChangeHistoryFromLastPublish: function (publishTarget, version, revision) {
		var allRevisions = utui.profile.getAllRevisions(version),
			curRevision,
			indexOfCurPublish = -1,
			indexOfLastPublish = -1,
			publishHistory = [];

		// Sort all of the revisions into an array (DON'T use an object to store sorted values)
		var allRevisionsArray = _.sortBy(allRevisions, function (revision) {
			return +revision.last;
		});

		// Find the index of the current publish revision
		for (var i = 0; i < allRevisionsArray.length; i++) {
			curRevision = allRevisionsArray[i];

			if (+curRevision.last == +revision) {
				indexOfCurPublish = i;
				break;
			}
		}

		// Find the index of the last publish to the same environment
		for (var j = indexOfCurPublish - 1; j >= 0; j--) {
			curRevision = allRevisionsArray[j];

			if (curRevision.status && curRevision.status.indexOf(publishTarget) !== -1) {
				// Found the last revision that was published to the same environment
				indexOfLastPublish = j;
				break;
			}
		}

		// Get all of the changes made between the 2 publishes if any
		for (var k = (indexOfLastPublish === -1 ? 0 : (indexOfLastPublish + 1)); k <= indexOfCurPublish; k++) {
			curRevision = allRevisionsArray[k];

			var currHistory = JSON.parse(curRevision.history || '[]');
			publishHistory = publishHistory.concat(currHistory);
		}

		return publishHistory;
	},

	addEventRecord: function (obj, eventCount, publish) {
		if (!obj.title || obj.title == '') obj.title = 'No Title';
		var content = '',
			linkedProfileID,
			linkedAudienceStreamID,
			published=false;
		content += '<td>';
		content += '<div class="hist_verEvent';

		var customTargets = utui.targets.getList('custom'),
			hasCustom = false;

		if (obj.status && $.isArray(customTargets)) {
			var len = customTargets.length;
			for (var i = 0; i < len; i++) {
				if (obj.status.indexOf(customTargets[i]) != -1) {
					hasCustom = true;
					break;
				}
			}
		}

		if (obj.status && (obj.status.indexOf('dev') != -1 || obj.status.indexOf('qa') != -1 || obj.status.indexOf('prod') != -1) || hasCustom) {
			//If Published Event
			content += ' hist_publishEvent';
		} else {
			// If Saved Event
			content += ' hist_saveEvent';
		}
		content += ' hist_eventVer_' + obj.id + ' hist_eventRev_' + obj.id + obj.last + '">';

		var now = new Date();
		var utcNow = Date.UTC(now.getUTCFullYear(),now.getUTCMonth(), now.getUTCDate() ,
	  	now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds(), now.getUTCMilliseconds());
		var revJSDate = utui.util.date.getJSDateFromUtuiString(obj.last);
		var daysAgo = (-1 * Math.ceil((revJSDate - utcNow) / (1000 * 60 * 60 * 24))) + 1;
		var daysString = localize.t('tiq.publish.num_days_ago', {num:daysAgo});
		if (daysAgo < 1) {
			daysString = localize.t('tiq.publish.today');
		} else if (daysAgo == 1) {
			daysString = localize.t('tiq.publish.yesterday');
		}
		var dateString = utui.util.formatDate(obj.last).substring(0, 10);

		if ($('.timeCount' + daysAgo).length < 1) {
			content += '<div class="hist_timelineDate showDays timeCount' + daysAgo + '">';
			content += '	<div class="ellipsis" onMouseOver="this.innerHTML=\'' + dateString + '\';" onMouseOut="this.innerHTML=\'' + daysString + '\';">' + daysString + '</div>';
			content += '</div>';
			if (utui.publish.timelineDateCount < 1 && utui.publish.lastTimelineEventID != 0) {
				$('.hist_eventRev_' + utui.publish.lastTimelineEventID + utui.publish.lastTimelineEventLast).addClass('hist_timelineBigWidth');
			}
			utui.publish.timelineDateCount = 0;
			utui.publish.lastTimelineEventID = obj.id;
			utui.publish.lastTimelineEventLast = obj.last;
		} else {
			utui.publish.timelineDateCount++;
		}
		content += '<div class="hist_timelineSpacer">';

		if (obj.status && (obj.status.indexOf('dev') != -1 || obj.status.indexOf('qa') != -1 || obj.status.indexOf('prod') != -1) || hasCustom) {
			if (obj.status.indexOf('dev') != -1) {
				content += '<div class="hist_timelineConnector hist_Dev"></div>';
			}
			if (obj.status.indexOf('qa') != -1) {
				content += '<div class="hist_timelineConnector hist_QA"></div>';
			}
			if (obj.status.indexOf('prod') != -1) {
				content += '<div class="hist_timelineConnector hist_Prod"></div>';
			}
			if (hasCustom) {
				content += '<div class="hist_timelineConnector hist_Custom"></div>';
			}
			published=true;
		}

		content += '</div>';
		content += '<div class="hist_timelineData" onMouseOver="utui.publish.highlightEvent(' + obj.id + ');">';

		// Show Icon
		content += '<div class="hist_verEventIcon" onclick="utui.publish.toggleEventDetails(' + obj.id + ',' + obj.last + ');"></div>';

		// Show Details
		content += '<div class="hist_verEventDetails" id="hist_verEventDetails_' + obj.id + '-' + obj.last + '">';
		content += '<div class="hist_verEventDetailsContent">';
		content += '<div class="histEventHeader"></div>';
		content += '<div class="histEventDate">' + utui.util.formatDate(obj.last) + ' GMT</div>';
		if (obj.status) {
			var pubStatus = obj.status.replace(/\,/g, ', ');
			pubStatus = pubStatus.replace(/(dev|qa|prod)/g, function(match){var result = '<span class="env_alias_' + match + '">' + utui.targets.aliasDisplayName(match) + '</span>'; return result;});
			content += '<div class="histEventStatus">Published to: ' + pubStatus + '</div>';
		} else {
			if (obj.action.indexOf('scheduled') != -1) {
				content += '<div class="histEventStatus">' + obj.action + '</div>';
			} else {
				content += '<div class="histEventStatus">' + localize.t('tiq.publish.saved_not_published') + '</div>';
			}
		}

		content += '<div class="histEventOperator">' + localize.t('tiq.publish.by_name', {name:obj.operator}) + '</div>';

		// Draw labels here
		content += '<div class="histEventLabels">' + localize.t('tiq.publish.version_labels') + ' <div id="hist_labelMenu_' + obj.last + '" class="btnLabelMenu" style="position:relative; float:right;"><span class="btn btn-micro btnEditLabels js-dropdown-button"><i class="icon-plus"></i> ' + localize.t('tiq.publish.add_label') + '</span><div class="menu_list_container gradient js-dropdown-listing"></div></div>';

		var history_labels = utui.publish.historyLabels.get(),
			labels = history_labels.mapping[obj.last];
		content += '    <div class="labels" data-revision="'+obj.last+'">';
		if (labels) {
			for (var i=0; i<labels.length; i++) {
				var label = history_labels.labels[labels[i]];
				if (label) {
					content += utui.publish.historyLabels.getRevisionLabelView(labels[i], label, obj.last);
				}
			}
		}
		content += '    </div>';
		content += '</div>';

		content += '<div class="histEventUTagLinks">';
		var utagLinks='';
		if (published) {
			var pubTar = obj.status.split(','),
					targets = utui.targets.getList();
			for (var i = 0; i < targets.length; i++) {
				var key = targets[i], idx = $.inArray(key, pubTar);
				if (idx === -1 ) {
					continue;
				}
				if (publish[key].id === obj.id && publish[key].last == obj.last) {
					continue;
				}
				if (parseInt(obj.last) < parseInt(utui.publish.diffToolActivation)) {
					continue;
				}
				var displayName = utui.targets.aliasDisplayName(key);
				utagLinks += utui.publish.listPublishDetails(obj.id,obj.last , displayName , '' , '' , '' , '' , key, false);

			}
		}
		content += utagLinks;
		content += '</div>';
		// Safely turn the linkedProfiles into a JSON object.
		var linkedProfiles = obj.linkedProfiles;    // = '{ }' if empty
		if ($.type(linkedProfiles) === 'string' && linkedProfiles.replace(/\s/g, '') !== '{}') {
			try {
				linkedProfiles = JSON.parse(_.unescape(linkedProfiles));
			} catch(e) {
				linkedProfiles = {};
			};
		} else {
			linkedProfiles = {};
		}

		// If this revision contains linked profiles then display them here
		if (!$.isEmptyObject(linkedProfiles)) {
			linkedProfileID = 'histEventLinkedProfileList_' + (obj.id + obj.last);
			content += '<div class="histEventLinkedProfiles">';
			content += '    <div class="linkedProfilesHeader"><i class="icon-caret-right"></i>' + localize.t('tiq.publish.linked_' + (utui.profile.import.isLibrary() ? "profiles" : "libraries")) + '</div>';
			content += '    <div id="'+linkedProfileID+'" class="linkedProfilesList">';

			// Get the length of the JSON so we know if we are on the last key when iterating
			var linkedProfilesCount = _.size(linkedProfiles);
			// Loop over all the linked profiles
			for (var profileName in linkedProfiles) {
				var revision =  linkedProfiles[profileName].rev || '',
					environment =  (linkedProfiles[profileName].env || '').toLowerCase(),
					aliasName = utui.targets.aliasDisplayName(environment);

				content += '<div class="listProfile ellipsis">' + profileName + ': <span class="env_alias_' + environment + '" title="' + aliasName + '">' + aliasName + '</span>';
				if (revision) {
					content += '    <div>' + revision + '</div>';
				}
				content += '</div>';

				// Add a divider if not last element
				if (--linkedProfilesCount > 0) {
					content += '<div class="listDivider"></div>';
				}
			}

			content += '    </div>';
			content += '</div>';
		}

		// If this revision contains linked profiles then display them here
		if (!$.isEmptyObject(obj.datacloudLinkedProfiles)) {
			var profileObj = JSON.parse(_.unescape(obj.datacloudLinkedProfiles));
			linkedAudienceStreamID = 'histEventLinkedProfileList_'+ (obj.id + obj.last);
			content += '<div class="histEventLinkedAudienceStream">';
			content += '    <div class="linkedProfilesHeader"><i class="icon-caret-right"></i>' + localize.t('tiq.publish.linked_as_profile') + '</div>';
			content += '    <div id="'+linkedAudienceStreamID+'"  class="linkedProfilesList">';

			// Get the length of the JSON so we know if we are on the last key when iterating
			var profileObjCount = _.size(profileObj);
			// Loop over all the linked profiles
			for (var profileName in profileObj) {
				var revision =  profileObj[profileName].rev || '',
					environment =  profileObj[profileName].env || '';

				content += '<div class="listProfile">' + profileName + ': ' + environment;
				if (revision) {
					content += '    <div>' + revision + '</div>';
				}
				content += '</div>';

				// Add a divider if not last element
				if (--profileObjCount > 0) {
					content += '<div class="listDivider"></div>';
				}
			}

			content += '    </div>';
			content += '</div>';
		}

		var notesWithBreaks = obj.notes.replace(/\n/g, '<br>');
		content += '<div class="histEventNotes">' + notesWithBreaks + '</div>';

		// this version contains audit info
		var auditHistory = [];

		if (obj.history) {
			try {
				auditHistory = JSON.parse(obj.history);

				if (auditHistory.length > 0) {
					content += '<div class="histEventAuditHeader"><span class="historyChangeCount">' + auditHistory.length + '</span>' + localize.t('tiq.publish.changes_made') + '</div>';
					content += '<div class="histEventAudit">' + utui.historyManager.getStringFromEvents(auditHistory, 'row', true) + '</div>';
				}
			}
			catch (e) {
			}
		}
		// Get all of the changes since the last publish to the same environment
		var changesSinceLastPublish = '',
			changesSinceLastPublishHTML = '';
		if (obj.status) {
			var lastPublishEnv = '';
			if (obj.status.indexOf('prod') !== -1) {
				lastPublishEnv = 'prod';

			} else if (obj.status.indexOf('qa') !== -1) {
				lastPublishEnv = 'qa';

			} else if (obj.status.indexOf('dev') !== -1) {
				lastPublishEnv = 'dev';

			} else if (hasCustom) {
				var customTargets = utui.targets.getList('custom'),
					len = customTargets.length;
				for (var i = 0; i < len; i++) {
					var key = customTargets[i];
					if (obj.status.indexOf(key) !== -1) {
						lastPublishEnv = key;
					}
				}

			} else {
				lastPublishEnv = 'dev';
			}
			changesSinceLastPublish = utui.publish.getChangeHistoryFromLastPublish(lastPublishEnv, obj.id, obj.last);

			//remove duplicate entries from changesSinceLastPublish
			if (auditHistory.length > 0) {
				for (var aH = 0; aH < auditHistory.length; aH++) {
					for (var cH = changesSinceLastPublish.length; cH--;) {
						if (JSON.stringify(auditHistory[aH]) === JSON.stringify(changesSinceLastPublish[cH])) {
							changesSinceLastPublish.splice(cH, 1);
						}
					}
				}
			}
			changesSinceLastPublishHTML = changesSinceLastPublish.length > 0 ? utui.historyManager.getStringFromEvents(changesSinceLastPublish, 'row', true) : '';
		}

		if (changesSinceLastPublishHTML) {
			content += '<div class="histEventAuditHeader">' + localize.t('tiq.publish.changes_since_last', {num:changesSinceLastPublish.length}) + '</div>';
			content += '<div class="histEventAudit">' + changesSinceLastPublishHTML + '</div>';
		}
		content += '</div>';
		content += '</div>';// end hist_verEventDetails
		content += '</div>';// end hist_timelineData
		content += '</div>';// end hist_verEvent
		content += '</td>';
		$("#hist_eventTable tr.hist_eventRow").prepend(content);

		// Bind the editLabels button
		$('.btnEditLabels').safeBind('click', function() {
			var revision = $(this).closest('.histEventLabels').find('.labels[data-revision]').attr('data-revision');
			utui.publish.historyLabels.editLabelsDialog.show(revision);
		});

		if (linkedProfileID) {
			// Add the click event to the linked profiles to display all the linked profiles associated with this version
			$('.histEventLinkedProfiles').safeBind('click', function() {
				$(this).find('.linkedProfilesList').slideToggle({duration:200});
			});
		}
		if (linkedAudienceStreamID) {
			$('.histEventLinkedAudienceStream').safeBind('click', function() {
				$(this).find('.linkedProfilesList').slideToggle({duration:200});
			});
		}
	},
	markPublishedEnvironments: function (obj, env) {
		var $hist = $('.hist_eventRev_' + obj.id + obj.last);
		$hist.addClass('hist_deployedRevision');
		$hist.addClass('hist_deployed_' + env);
		$('.hist_eventRev_' + obj.id + obj.last + ' .hist_verEventDetails').show();
	},
	toggleEventDetails: function (objID, revID) {
		var isVisible = $('.hist_eventRev_' + objID + revID + ' .hist_verEventDetails').css("display");
		if (isVisible == "none") {
			this.showEventDetails(objID, revID);
		} else {
			this.hideEventDetails(objID, revID);
		}
	},
	hideEventDetails: function (objID, revID) {
		$('.hist_eventRev_' + objID + revID + ' .hist_verEventDetails').hide('fast');
	},
	showEventDetails: function (objID, revID) {
		$('.hist_eventRev_' + objID + revID + ' .hist_verEventDetails').show('fast');
	},
	toggleVersionEventDetails: function (objID) {
		var isVisible = $('#hist_verTitle_' + objID + ' .showDetails').css("display");
		if (isVisible != "none") {
			utui.publish.showVersionEventDetails(objID);
		} else {
			utui.publish.hideVersionEventDetails(objID);
		}
	},
	showVersionEventDetails: function (objID) {
		$('.hist_eventVer_' + objID + '  .hist_verEventDetails').show('fast');
	},
	hideVersionEventDetails: function (objID) {
		$('.hist_eventVer_' + objID + ' .hist_verEventDetails').hide('fast');
	},
	filterAllDetails: function (animate_b) {
		if ($('#filter_displayAllDetails').is(':checked')) {
			if (animate_b) {
				$('.hist_verEventDetails').show('slow');
			} else {
				$('.hist_verEventDetails').show();
			}

			$('.hist_versionTitle').addClass('showDetails');
			$('.hist_versionTitleBox .hideDetailExpander').show();
			$('.hist_versionTitleBox .showDetailExpander').hide();
		} else {
			if (animate_b) {
				$('.hist_verEventDetails').hide('slow');
			} else {
				$('.hist_verEventDetails').hide();
			}
			$('.hist_versionTitle').removeClass('showDetails');
			$('.hist_versionTitleBox .hideDetailExpander').hide();
			$('.hist_versionTitleBox .showDetailExpander').show();
		}
	},
	filterSaveEvents: function () {
		if ($('#filter_displaySaveEvents').is(':checked')) {
			$('.hist_saveEvent').show();
		} else {
			$('.hist_saveEvent').hide();
		}
	},
	showVersionRelatonship: function () {
		if ($('#filter_displayVersionRelationship').is(':checked')) {
			$('#hist_versionBox').addClass('version-trail-enabled');
		} else {
			$('#hist_versionBox').removeClass('version-trail-enabled');
		}
	},
	filterPublishEvents: function () {
		if ($('#filter_displayPublishEvents').is(':checked')) {
			$('.hist_publishEvent').show();
		} else {
			$('.hist_publishEvent').hide();
		}
	},
	highlightEvent: function (objID) {
		if (utui.publish.lastHighlightedVersion != 0) {
			$('#hist_highlight_' + utui.publish.lastHighlightedVersion).removeClass('hist_highlightMe');
			$('#hist_verTitle_' + utui.publish.lastHighlightedVersion + ' .hist_versionTitle').removeClass('hist_ver_highlightMe');
		}
		$('#hist_highlight_' + objID).addClass('hist_highlightMe');
		$('#hist_verTitle_' + objID + ' .hist_versionTitle').addClass('hist_ver_highlightMe');
		utui.publish.lastHighlightedVersion = objID;
	},
	highlightHide: function () {
	},

	hideTarget: function (id, target) {
		if (id != utui.publish.history[target].split('_')[1]) {
			$('#publish_' + id + '_target_' + target).hide();
			utui.publish.targetFlag--;
		}
	},
	listPublishDetails : function(id, lastMod, target, loaderLink, footerLink, syncLink, distroLink, key, current) {
		var content = '';
		var showFooterLink = true;


		if (utui.data.settings.creation !== 'undefined' && parseInt(utui.data.settings.creation) > parseInt(utui.publish.footerUsageExpiration)) {
			showFooterLink = false;
		}

		content += '<a href="#" class="distroLink ellipsis sp_env_alias_' + key + '" title="' + id + '"><i class="icon icon-caret-right"></i><span class="environment env_alias_' + key + '">' + target + '</span> ' + localize.t('tiq.publish.publish_details') + '</a>';
		content += '<ul class="options" style="display: none;">';
		if (current) {
			content += '<li><a href="' + loaderLink + '" target="_new" style="text-decoration: none;color: #057ABD;" class="histutaglinks"><i class="icon icon-external-link"></i> ' + localize.t('tiq.publish.view_file', {file:'utag.js'}) + '</a></li>';
			content += '<li><a href="' + syncLink + '" target="_new" style="text-decoration: none;color: #057ABD;" class="histutaglinks"><i class="icon icon-external-link"></i> ' + localize.t('tiq.publish.view_file', {file:'utag.sync.js'}) + '</a></li>';
			if (showFooterLink) {
				content += '<li><a href="' + footerLink + '" target="_new" style="text-decoration: none;color: #057ABD;" class="histutaglinks"><i class="icon icon-external-link"></i> ' + localize.t('tiq.publish.view_file', {file:'utag.footer.js'}) + '</a></li>';
			}
			content += '<li><a href="' + distroLink + '" target="_new" style="text-decoration: none;color: #057ABD;" class="histutaglinks"><i class="icon icon-download-alt"></i> ' + localize.t('tiq.publish.download_distro_zip') + '</a></li>';
		}
		if (parseInt(lastMod) > parseInt(utui.publish.diffToolActivation)) {
			content += '<li class="ditroVer" data-ver="'+id+'" data-rev="'+lastMod+'" data-env="'+key+'" ><i class="icon icon-columns"></i> ' + localize.t('tiq.publish.distro_verification') + '</li>';
			content += '<li class="ditroDiff" data-ver="'+id+'" data-rev="'+lastMod+'" data-env="'+key+'" ><i class="icon icon-code-fork"></i> ' + localize.t('tiq.publish.compare_using_diff') + '</li>';
		}
		content += '</ul>';
		content += '</a>\n';

		return content;
	},
	distroCompare: function() {
		if (!window.RevisionCompare) {
			utui.util.loadingModalStart(localize.t('tiq.publish.loading_distro_compare'));
			utui.service.get('js/utui.revision_compare.js',{}, {async: false,dataType: 'script'},function(){
				utui.util.loadingModalStop();
				RevisionCompare.distroDiff()
			},function() {
					utui.util.loadingModalStop();
					utui.util.showMsgDialog(localize.t('tiq.publish.error.unable_to_load_compare'), localize.t('tiq.publish.loading_error'));
				});
		} else {
			RevisionCompare.distroDiff();
		}
	},
	distroCompareCancel: function() {
		$('div.diffWarningBar').remove();
		$('.diff-unselectable').removeClass('diff-unselectable').css({"color": "","cursor": ""});
		window.RevisionCompare_data = window.RevisionCompare_data || {};
		window.RevisionCompare_data.diff =  {};
	},
	digestVerification: function() {
			if (!window.RevisionCompare) {
				utui.util.loadingModalStart(localize.t('tiq.publish.loading_distro_verification'));
				utui.service.get('js/utui.revision_compare.js',{}, {async: false,dataType: 'script'},function(){
					utui.util.loadingModalStop();
					RevisionCompare.digestVerification();
				},function() {
					utui.util.loadingModalStop();
					utui.util.showMsgDialog(localize.t('tiq.publish.error.unable_to_load_compare'), localize.t('tiq.publish.loading_error'));
				});
			} else {
				RevisionCompare.digestVerification();
			}
	},
	updateDeployRecord: function (obj) {
		$('#publish_' + obj.id).remove();
		this.addDeployRecord(obj);
	},

	// Returns true if any of the conditions are false
	isSavedAllowed: function (bShowError) {
		if ($('#global_save').attr('disabled') === 'disabled') {
			return false;
		}

		var canSave = true,
			$content = $('<div />');

		// Browser not supported
		if (utui.unsupportedBrowserNoSave == 1) {
			$content.html('<b>' + localize.t('tiq.publish.error.browser_not_supported') + '</b>');
			canSave = false;

		} else if (!utui.publish.workflow.canSave()) {
			$content.html('<b>' + utui.publish.workflow.warningMessage + '</b>');
			canSave = false;

		} else if (utui.util.isMaintenance()) {
			$content.html('<strong>' + localize.t('tiq.publish.error.limelight_cdn_down') + '</strong>');
			canSave = false;

		} else if (utui.permissions.isReadOnly()) {
			$content.html('<strong>' + localize.t('tiq.publish.error.readonly_users_unable') + '</strong>');
			canSave = false;
		}

		if (!canSave && bShowError) {
			$('#dialog-confirmation-content').html($content);
			$('#dialog').dialog('destroy');
			$('#dialog').show();
			$("#dialog-confirmation").dialog({
				autoOpen: true,
				height: 'auto',
				width: 'auto',
				modal: true,
				closeOnEscape: false,
				closeText: "",
				resizable: false,
				draggable: true,
				buttons: [
					{
						text: localize.t('tiq.dialog.button.ok'),
						id: 'savePublishError_dialog_okBtn',
						click: function () {
							$(this).dialog('close');
						},
						style: 'float:left; margin-left: 12px'
					}
				]
			});
		}

		return canSave;
	},

	showConfirmRemoveEnvironmentDialog: function (env, aliasList) {
		// ----------------------------------------------------------------
		var _namespace = 'confirmRemoveEnv';

		var _env = env,
			_aliasList = aliasList;

		// ----------------------------------------------------------------
		var _view = {
			panel: function () {
				var v = '';
				v += '<div id="' + _namespace + '_description">';
				v += '    <div class="dialog-icon-container">';
				v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
				v += '    </div>';
				v += '    <div class="dialog-description">';
				v += '        <p><strong>' + localize.t('tiq.publish.code_dialog.are_you_sure_delete_env', {environment:_env}) + '</strong></p>';
				v += '        <p>' + localize.t('tiq.publish.code_dialog.all_changes_lost') + '</p>';
				v += '    </div>';
				v += '</div>';
				return v;
			}
		}

		// ----------------------------------------------------------------
		function _initView() {
			var content = _view.panel();

			if ($('#' + _namespace + '_dialog').length == 0) {
				$('<div />', { id: _namespace + '_dialog' }).prependTo('body');
				$('<div />', { id: _namespace + '_dialogContent' }).appendTo('#' + _namespace + '_dialog');
			}

			$('#' + _namespace + '_dialogContent').html(content);
		}

		// ----------------------------------------------------------------
		// Show dialog
		function _showDialog() {
			$("#" + _namespace + '_dialog').dialog({
				title: localize.t('tiq.publish.code_dialog.delete_env'),
				height: 'auto',
				width: 'auto',
				modal: true,
				closeOnEscape: false,
				resizable: false,
				autoOpen: true,
				draggable: true,
				position: ['center', 'center'],
				buttons: [
					{
						text: localize.t('tiq.publish.code_dialog.delete_env'),
						id: _namespace + '_dialog_deleteBtn',
						click: function () {
							// Remove environment
							utui.targets.removeTarget(_env);

							utui.profile.setDirty();

							utui.util.pubsub.publish(utui.constants.environments.REMOVED);
							// initialize environment dialog screen
							// TODO: have this called differently in case adding/deleting takes place outside environment dialog
							delete _aliasList[_env];
							utui.publish.showEnvironmentDialog(_aliasList).initialize();

							_disposeDialog();
						}
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						id: _namespace + '_dialog_cancelBtn',
						click: function () {
							_disposeDialog()
						},
						style: 'float:left; margin-left: 12px'
					}
				]
			}).on('dialogclose', function () {
					$(this).remove(); //for using 'x' btn
				});
		};

		// ----------------------------------------------------------------
		// Dispose dialog
		function _disposeDialog() {
			$('#' + _namespace + '_dialog').dialog('close');
		}

		// PUBLIC
		var _public = {
			// ----------------------------------------------------------------
			initialize: function () {
				_initView();
				_showDialog();
			}
		};

		return _public;
	},

	showNewEnvironmentDialog: function (aliasList) {
		// PRIVATE
		// ----------------------------------------------------------------

		// Specifies the namespace of the dialog for proper DOM injection
		var _namespace = 'addNewEnv',
			_aliasList = aliasList;

		var _view = {
			content: function () {
				var v = '<div id="' + _namespace + '_content">';
				v += '    <div id="' + _namespace + '_error"></div>';
				v += '    <div id="' + _namespace + '_description">';
				v += '        <p>' + localize.t('tiq.publish.code_dialog.new_env_names') + '</p>';
				v += '    </div>';
				v += '    <div id="' + _namespace + '_nameContainer">';
				v += '        <label for="' + _namespace + '_nameFieldLabel">' + localize.t('tiq.publish.code_dialog.env_name') + '</label>';
				v += '        <input type="text" id="' + _namespace + '_nameField" maxlength="32" />';
				v += '    </div>';
				v += '    <div id="' + _namespace + '_notes">';
				v += '        <p>' + localize.t('tiq.publish.code_dialog.publish_dev_permission') + '</p>';
				v += '    </div>';
				v += '</div>';
				return v;
			}
		};

		var _bindUI = {
			validation: function () {
				var $field = $('#' + _namespace + '_nameField');

				$field.on('blur', function (e) {
					_isNameValid();
				});
			}
		};

		// ----------------------------------------------------------------
		function _initView() {
			var content = _view.content();

			if ($('#' + _namespace + '_dialog').length == 0) {
				$('<div />', { id: _namespace + '_dialog' }).prependTo('body');
				$('<div />', { id: _namespace + '_dialogContent' }).appendTo('#' + _namespace + '_dialog');
			}

			$('#' + _namespace + '_dialogContent').html(_view.content());
		}

		// @param (input) string - name input
		function _isNameValid() {
			var $field = $('#' + _namespace + '_nameField'),
				$error = $('#' + _namespace + '_error'),
				$notes = $('#' + _namespace + '_notes'),
				errorMsg = '',
				stageName = $field.val().trim(),
				regexLettersNumbers = XRegExp('^[\\p{L}0-9-]+$'),///^[0-9a-zA-Z-]+$/,
				regexLetters = XRegExp('^[\\p{L}]+$'),///^[a-zA-Z]+$/,
				firstChar = stageName.charAt(0);

			if (stageName === '') {
				errorMsg = localize.t('tiq.publish.code_dialog.env_name_cannot_be_blank');

			} else if (!firstChar.match(regexLetters)) {
				errorMsg = localize.t('tiq.publish.code_dialog.env_must_begin_with_letter', {environment:stageName});

			} else if (!stageName.match(regexLettersNumbers)) {
				errorMsg = localize.t('tiq.publish.code_dialog.env_name_only_contain', {environment:stageName});

			} else if (utui.targets.hasTarget(stageName) || utui.targets.hasAliasName(stageName, stageName)) {
				errorMsg = localize.t('tiq.publish.code_dialog.env_already_exists', {environment:stageName});
			}

			if (errorMsg != '') {
				$error.text(errorMsg).slideDown();
				$notes.hide();
				$field.addClass('validation-field-outline');
				return false;
			} else {
				$error.slideUp();
				$notes.show();
				$field.removeClass('validation-field-outline');
				return true;
			}
		}

		// ----------------------------------------------------------------
		// Displays dialog
		function _showDialog() {
			$("#" + _namespace + '_dialog').dialog({
				title: localize.t('tiq.publish.code_dialog.create_new_env'),
				height: 'auto',
				width: 'auto',
				modal: true,
				autoOpen: true,
				closeOnEscape: false,
				resizable: false,
				draggable: true,
				position: ['center', 'center'],
				buttons: [
					{
						text: localize.t('tiq.publish.code_dialog.add_env'),
						id: _namespace + '_dialog_addBtn',
						click: function () {
							var $field = $('#' + _namespace + '_nameField');

							if (_isNameValid()) {
								var newEnvironment = $field.val();
								utui.profile.setDirty();
								utui.targets.addTarget(newEnvironment);

								$(this).dialog("close");

								utui.util.pubsub.publish(utui.constants.environments.ADDED);
								_aliasList[newEnvironment] = {alias_name: newEnvironment, display_name: newEnvironment, type: 'custom'};
								utui.publish.showEnvironmentDialog(_aliasList).initialize();
							} else {
								$field.focus(function () {
									this.select();
								});
							}
							
						}
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						id: _namespace + '_dialog_cancelBtn',
						click: function () {
							$(this).dialog('close');
						},
						style: 'float:left; margin-left: 12px'
					}
				]
			}).on('dialogclose', function () {
				$(this).remove(); //for using 'x' btn
			});
		};

		// ----------------------------------------------------------------
		// Dispose dialog
		function _disposeDialog() {
			$('#' + _namespace + '_dialog').dialog('close');
		}

		// PUBLIC
		var _public = {
			initialize: function () {
				_initView();
				// _bindUI.validation();
				_showDialog();
			}
		};

		return _public;
	},

	showEnvironmentDialog: function (aliasList) {
		// PRIVATE
		// ----------------------------------------------------------------

		// References the wizard template
		var _templateWizard = utui.ui.templateWizard;

		// Specifies the namespace of the dialog for proper DOM injection
		var _namespace = 'configureEnv';

		var _aliasList = (aliasList ? aliasList : $.extend(true, {}, utui.targets.getAliasList()));

		// Renders the initial wireframe of the wizard dialog
		var _render = {
			context: function () {
				var $context = $('#' + _namespace + '_context');

				$context.find('.wizard-context-header').html('');
				$context.find('.wizard-context-body').html(_view.navigation());
				$context.find('.wizard-context-footer').html(_view.addEnvironmentContainer());

				// Binding
				_bindUI.addEnvironment();
			},
			content: function () {
				var $content = $('#' + _namespace + '_content');

				$content.find('.wizard-content-header').html(_view.contentHeader());
				$content.find('.wizard-content-body').html(_view.contentBody());

				// jQuery UI rendering
				$('#' + _namespace + '_javascriptType').buttonset();
				$('#' + _namespace + '_codeSnippet').tabs();

				// Binding
				_bindUI.tab();
				_bindUI.deleteBtn();
				_bindUI.javascriptTypeBtn();
				_bindUI.disableCommentsBtn();
				_bindUI.selectAllBtn();
			}
		};

		// View modules to be used within the wireframe
		var _view = {
			navigation: function () {
				var v = '       <a href="#"></a><div class="wizard-context-title">' + localize.t('tiq.publish.code_dialog.environments') + '</div>';
				v += '       <ul class="wizard-context-ul" id="' + _namespace + '_listing">';
				v += _viewModel.getEnvironmentListItems();
				v += '       </ul>';
				return v;
			},
			addEnvironmentContainer: function () {
				var v = '       <div class="wizard-context-button-container">';
				v += '           <a href="#" id="' + _namespace + '_addEnvironmentBtn" class="btn i-color-add"><i class="icon-plus"></i> ' + localize.t('tiq.publish.code_dialog.add_env') + '</a>';
				v += '       </div>';
				return v;
			},
			contentHeader: function () {
				var v = '';
				v += '        <a href="#" id="' + _namespace + '_deleteBtn" class="btn btn-small alignright i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.publish.code_dialog.delete') + '</a>';
				v += '        <div class="wizard-content-title ellipsis">';
				v += 			localize.t('tiq.publish.code_dialog.environment') + ' <span id="' + _namespace + '_header_selectedEnv"></span>';
				v += '        </div>';
				return v;
			},
			contentBody: function () {
				var hasProfilePermission = utui.permissions.canSaveProfile(),
					v = '';

				if (hasProfilePermission) {
					v += '<div id="' + _namespace + '_env_error"></div>';
					v += '<div class="wizard-container">';
					v += '  <div class="wizard-content-title">' + localize.t('tiq.publish.code_dialog.env_title') + ' ';
					v += '      <input maxlength="32" type="text" id="' + _namespace + '_env_targetname" />';
					v += '  </div>';
					v += '</div>';
				}

				v += '<div class="wizard-container">';
				v += '  <div class="wizard-content-title">' + localize.t('tiq.publish.code_dialog.javascript_type') + '</div>';
				v += '  <div class="wizard-row">';

				v += '      <div id="' + _namespace + '_javascriptType" class="codecenter_javascriptType">';
				v += '          <input id="' + _namespace + '_javascriptType_sync" name="' + _namespace + '_javascriptType" type="radio" /><label for="' + _namespace + '_javascriptType_sync">' + localize.t('tiq.publish.code_dialog.synchronous') + '</label>';
				v += '          <input id="' + _namespace + '_javascriptType_async" name="' + _namespace + '_javascriptType" type="radio" /><label for="' + _namespace + '_javascriptType_async" class="ui-state-active">' + localize.t('tiq.publish.code_dialog.asynchronous') + '</label>';
				v += '      </div>';
				v += '      <div id="' + _namespace + '_javascriptType" class="codecenter_disableCommentsCkbx">';
				v += '          <input id="' + _namespace + '_disableCommentsCkbx" type="checkbox" /> <label for="' + _namespace + '_disableCommentsCkbx">' + localize.t('tiq.publish.code_dialog.disable_comments') + '</label>';
				v += '      </div>';
				v += '  </div>';
				v += '</div>';

				// Only show this warning message if the following publish setting is checked
				if (utui.permissions.find('enable_sync_loader')) {
					v += '<div class="wizard-container type-warning">';
					v += '  <div class="wizard-row">';
					v += '      <div class="warning-msg">' + localize.t('tiq.publish.code_dialog.publish_required_after') + '</div>';
					v += '  </div>';
					v += '</div>';
				}

				v += '<div class="wizard-container">';
				v += '  <div class="wizard-content-title">' + localize.t('tiq.publish.code_dialog.code_snippet') + '</div>';
				v += '  <div class="wizard-row">';
				v += '      <div id="' + _namespace + '_codeSnippet">';
				v += '          <ul>';
				v += '              <li><a href="#codecenter_1">' + localize.t('tiq.publish.code_dialog.tealium_script') + '</a></li>';
				v += '              <li><a href="#codecenter_2">' + localize.t('tiq.publish.code_dialog.sample_html') + '</a></li>';
				v += '          </ul>';
				v += '          <div id="codecenter_1">' + this.snippetScript() + '</div>';
				v += '          <div id="codecenter_2">' + this.snippetSampleHtml() + '</div>';
				v += '      </div>';
				v += '  </div>';
				v += '</div>';

				return v;
			},
			snippetScript: function () {

				var hasMeta = false,
					dataLibrary = dsapi.getData(),
					v = '';

				for(var key in dataLibrary) {
					if(!dataLibrary.hasOwnProperty(key)) continue;

					var data = dataLibrary[key];

					if(data.type === 'meta') {
						hasMeta = true;
						break;
					}
				}

				v += '<div class="codecenter_container">';
				if (hasMeta) {
					v += '  <p>' + localize.t('tiq.publish.code_dialog.paste_this_meta') + '</p>';
					v += '  <div class="codesnippet_container">';
					v += '    <a href="#" class="selecttextbtn">' + localize.t('tiq.publish.code_dialog.select_all') + '</a>';
					v += '    <pre id="codecenter_pre_A" class="codecenter_code_A codesnippit">';
					v += _viewModel.snippet.utag_meta();
					v += '    </pre>';
					v += '  </div>';
				}

				v += '  <p>' + localize.t('tiq.publish.code_dialog.paste_this_script') + '</p>';
				v += '  <div class="codesnippet_container">';
				v += '    <a href="#" class="selecttextbtn">' + localize.t('tiq.publish.code_dialog.select_all') + '</a>';
				v += '    <pre id="codecenter_pre_B" class="codecenter_code_A codesnippit">';
				v += _viewModel.snippet.sync_js();
				v += _viewModel.snippet.utag_data();
				v += _viewModel.snippet.utag_js();
				v += _viewModel.snippet.utag_js_async();
				v += '    </pre>';
				v += '  </div>';
				v += '  <div class="codecenter_code_B" style="display:none; color:#808080">' + localize.t('tiq.publish.code_dialog.note_by_default') + '</div>';
				v += '</div>';
				return v;
			},
			snippetSampleHtml: function () {
				var v = '<div class="codecenter_container">';
				v += '  <div class="codesnippet_container">';
				v += '    <a href="#" class="selecttextbtn">' + localize.t('tiq.publish.code_dialog.select_all') + '</a>';
				v += '    <pre id="codecenter_pre_C" class="codecenter_code_A codesnippit">';
				v += _viewModel.snippet.full_html();
				v += '    </pre>';
				v += '  </div>';
				v += '</div>';
				return v;
			}
		};

		var _viewModel = {
			getEnvironmentListItems: function () {
				var envArray = utui.targets.getList();

				var v = '';
				for (var key in envArray) {
					var env = envArray[key],
						aliasName = _aliasList[env].alias_name;

					if (!aliasName || utui.targets.isCustom(env)) {
						aliasName = utui.targets.toDisplayName(env);
					} else {
						aliasName += ' (' + utui.targets.toDisplayName(env) + ')';
					}

					v += '<li><a href="#" id="' + _namespace + '_listselection_' + env + '" class="ellipsis" title="' + aliasName + '">' + aliasName + '</a></li>';
				}
				return v;
			},
			updateEnvironmentPanel: function (env) {
				var aliasName = $('#' + _namespace + '_listselection_' + env).text();

				// Update Environment Selection Title
				$('#' + _namespace + '_header_selectedEnv').html(aliasName);

				_setPublishPath(env);

				// Update Code Center environment in js code
				$('#' + _namespace + '_codeSnippet').find('.codecenter_target').html(env);

				// Show Delete Button
				var showTitle;
				if (utui.targets.isCustom(env) && utui.permissions.canPublishCustom()) {
					$('#' + _namespace + '_deleteBtn').show();
					showTitle = false;
				} else {
					$('#' + _namespace + '_deleteBtn').hide();
					showTitle = true;
				}

				// update the environment alias
				_viewModel.updateEnvironmentTitleInput(env, showTitle);
			},
			updateEnvironmentTitleInput: function (env, showTitle) {
				var $envTitle = $('#' + _namespace + '_env_targetname'),
					aliasName = _aliasList[env].alias_name,
					displayEnv = utui.targets.toDisplayName(env),
					$header = $('#' + _namespace + '_header_selectedEnv'),
					$context = $('#' + _namespace + '_listselection_' + env),
					hasProfilePermission = utui.permissions.canSaveProfile();


				// set environment title
				$envTitle.val(aliasName);

				if (showTitle && hasProfilePermission) {
					$envTitle.parent().slideDown();
				} else {
					$envTitle.parent().slideUp('fast');
				}

				// Store aliasName and update labels
				$envTitle.safeOn('keyup', function () {
					// persist aliasName
					var aliasValue = $(this).val(),
						displayValue = aliasValue;

					if (!displayValue) {
						displayValue = displayEnv;
					} else {
						displayValue += ' (' + displayEnv + ')';
					}

					$header.text(displayValue);
					$context.text(displayValue).attr('title', displayValue);

					if (_isEnvLabelValid(env)) {
						_aliasList[env].alias_name = aliasValue;
					}
				});


			},
			snippet: {
				utag_meta: function () {
					var dataLibrary = dsapi.getData(),
						v = '';

					for(var key in dataLibrary) {
						if(!dataLibrary.hasOwnProperty(key)) continue;

						var data = dataLibrary[key];

						if(data.type === 'meta') {
							v += '<span class="codecolor_meta">';
							v += '&lt;meta name="<span style="color:#7474FF">' + utui.util.safeEscape(data.name) + '</span>" content="<span style="color:#E46363">' + utui.util.safeEscape(data.name) + ' sample value</span>" />';
							v += '<br>';
							v += '</span>';
						}
					}

					return v;
				},
				utag_data: function () {
					var dataLibrary = dsapi.getData(),
						index = [],
						v = '',
						dataLayer = (utui.data.publish.data_object) ? utui.data.publish.data_object : 'utag_data';

					// Push all data layer into an index array
					for(var key in dataLibrary) {
						if(!dataLibrary.hasOwnProperty(key)) continue;

						var data = dataLibrary[key];
						if (dsapi.isUtagInternalDS(data.name,data.type)) continue;

						if(data.type === 'js') {
							index.push(data);
						}
					}

					v += '<span class="codelabel_js">';
					v += '&lt;script type="text/javascript"><br>';
					v += 'var ' + dataLayer + ' = {<br>';

					for (var i = 0; i < index.length; i++) {
						var data = index[i];

						v += '&nbsp;&nbsp;<span style="color:#7474FF">' + _.escape(data.name) + '</span> : <span style="color:#E46363">""</span>';
						if ( i !== index.length-1 ) {
							v += ',';
						}
						v += '<span class="codecenter_code_comment"> // ' + _.escape(data.description) + '</span>';
						v += '<br>';
					};

					v += '}<br>';
					v += '&lt;/script><br><br>';
					v += '</span>';

					return v;
				},
				utag_js: function () {
					var v = '';
					v += '<div class="codecenter_code_B" style="display:none"><span class="codecenter_code_comment">&lt!-- ' + localize.t('tiq.publish.code_dialog.loading_script_synchronously') + ' --></span><br>';
					v += '<span class="codelabel_js">';
					v += '&lt;script type="text/javascript" src="<span class="codecenter_url"><span class="codecenter_cdn">//' + gAppConfig.utag_host + '/' + gAppConfig.utag_path + '</span>/<span class="codelabel_account">' + utui.data.settings.account + '</span>/<span class="codelabel_profileid">' + utui.data.settings.profileid + '</span>/<span class="codecenter_target codelabel_target"></span>/</span>utag.js">&lt;/script><br><br>';
					v += '</span>';
					v += '</div>';

					return v;
				},
				sync_js: function () {
					var v = '';
					var slDsp;
					if (utui.data.publish.enable_sync_loader == "yes"){
						slDsp = "block";
					}else{
						slDsp = "none";
					}

					v += '<div class="codecenter_code_S" style="display:'+slDsp+'"><span class="codecenter_code_comment">&lt!-- ' + localize.t('tiq.publish.code_dialog.the_utag_script_should_run') + ' --></span><br>';
					v += '<span class="codelabel_js">';
					v += '&lt;script src="<span class="codecenter_cdn">//' + gAppConfig.utag_host + '/' + gAppConfig.utag_path + '</span>/<span class="codelabel_account">' + utui.data.settings.account + '</span>/<span class="codelabel_profileid">' + utui.data.settings.profileid + '</span>/<span class="codecenter_target codelabel_target">prod</span>/utag.sync.js">&lt;/script><br><br>';
					v += '</span>';
					v += '</div>';

					return v;
				},
				utag_js_async: function () {
					var v = '';
					v += '<div class="codecenter_code_C"><span class="codecenter_code_comment">&lt!-- ' + localize.t('tiq.publish.code_dialog.loading_script_asynchronously') + ' --></span><br>';
					v += '<span class="codelabel_js">';
					v += '&lt;script type="text/javascript"><br>&nbsp;&nbsp;&nbsp;&nbsp;(function(a,b,c,d){<br>&nbsp;&nbsp;&nbsp;&nbsp;a=\'<span class="codecenter_url"><span class="codecenter_cdn">//' + gAppConfig.utag_host + '/' + gAppConfig.utag_path + '</span>/<span class="codelabel_account">' + utui.data.settings.account + '</span>/<span class="codelabel_profileid">' + utui.data.settings.profileid + '</span>/<span class="codecenter_target codelabel_target"></span>/</span>utag.js\';<br>&nbsp;&nbsp;&nbsp;&nbsp;b=document;c=\'script\';d=b.createElement(c);d.src=a;d.type=\'text/java\'+c;d.async=true;<br>&nbsp;&nbsp;&nbsp;&nbsp;a=b.getElementsByTagName(c)[0];a.parentNode.insertBefore(d,a);<br>&nbsp;&nbsp;&nbsp;&nbsp;})();<br>&lt;/script><br><br>';
					v += '</span>';
					v += '</div>';
					return v;
				},
				full_html: function () {
					var slDsp = '';
					if (utui.data.publish.enable_sync_loader == "yes"){
						slDsp = '<span class="codelabel_js">&nbsp;&nbsp;&lt;script src="<span class="codecenter_cdn">//' + gAppConfig.utag_host + '/' + gAppConfig.utag_path + '</span>/<span class="codelabel_account">' + utui.data.settings.account + '</span>/<span class="codelabel_profileid">' + utui.data.settings.profileid + '</span>/<span class="codecenter_target codelabel_target">prod</span>/utag.sync.js">&lt;/script></span><br>';
					}

					var fullhtml = '';
					fullhtml += '&lt;html><br>&lt;head><br>##METATAGS##  \&lt;title>' + localize.t('tiq.publish.code_dialog.html.title') + '&lt;/title><br>'+slDsp+'&lt;/head><br>&lt;body><br><br>##UTAG_DATA##';
					fullhtml += this.utag_js();
					fullhtml += this.utag_js_async();
					fullhtml += '';
					fullhtml += '&lt;h1>' + localize.t('tiq.publish.code_dialog.html.implementing_tealium_universal') + '&lt;/h1><br><br>';
					fullhtml += '&lt;p>' + localize.t('tiq.publish.code_dialog.html.the_script_is_generated') + '&lt;/p>';
					fullhtml += '<br><br>&lt;h2>' + localize.t('tiq.publish.code_dialog.html.to_place_code') + '&lt;/h2><br><br>';
					fullhtml += '&lt;ol><br>';
					fullhtml += '    &lt;li> ' + localize.t('tiq.publish.code_dialog.html.ensure_you_are_getting') + '&lt;/li><br>';
					fullhtml += '    &lt;li> ' + localize.t('tiq.publish.code_dialog.html.click_tealium_script') + '&lt;/li><br>';
					fullhtml += '    &lt;li> ' + localize.t('tiq.publish.code_dialog.html.click_and_drag') + '&lt;/li><br>';
					fullhtml += '    &lt;li> ' + localize.t('tiq.publish.code_dialog.html.copy_the_code') + '&lt;/li><br>';
					fullhtml += '    &lt;li> ' + localize.t('tiq.publish.code_dialog.html.navigate_to_website') + '&lt;/li><br>';
					fullhtml += '&lt;/ol>';

					fullhtml += '<br><br>&lt;/body><br>&lt;/html>';
					fullhtml = fullhtml.replace(/##METATAGS##/, this.utag_meta());
					fullhtml = fullhtml.replace(/##UTAG_DATA##/, this.utag_data());
					return fullhtml;
				}
			}
		};

		function _getCustomPublishPath(env) {
			var supported = ['dev','qa','prod'];
			if(supported.indexOf(env) > -1 && String(utui.data.publish['publish_'+env]).trim() != '') {
				return utui.data.publish['publish_'+env];
			}
			return '';
		}

		function _isCustomPublishPath(env) {
			var supported = ['dev','qa','prod'];

			if(utui.data.publish.hasOwnProperty('publish_'+env) && supported.indexOf(env) > -1 && String(utui.data.publish['publish_'+env]).trim() !== '') {
				return true;
			}
			return false;
		}

		function _setPublishPath(env) {
			if(_isCustomPublishPath(env)) {
				var path = _getCustomPublishPath(env);
				$('#' + _namespace + '_codeSnippet').find('span.codecenter_url').html(path);
				return;
			}

			$('#' + _namespace + '_codeSnippet').find('span.codecenter_url').html('<span class="codecenter_cdn">//' + gAppConfig.utag_host + '/' + gAppConfig.utag_path + '</span>/<span class="codelabel_account">' + utui.data.settings.account + '</span>/<span class="codelabel_profileid">' + utui.data.settings.profileid + '</span>/<span class="codecenter_target codelabel_target">'+env+'</span>/');
			return;

		}

		// @param (input) string - name input
		function _isEnvLabelValid(envTarget) {
			var $field = $('#' + _namespace + '_env_targetname'),
				$error = $('#' + _namespace + '_env_error'),
				errorMsg = '',
				aliasName = $field.val(),
				regexLettersNumbers = XRegExp('^[\\p{L}0-9-]+$');

			if (aliasName === '') {
				$error.slideUp();
				$field.removeClass('validation-field-outline');
				return true;

			} else if (!aliasName.match(regexLettersNumbers)) {
				errorMsg = localize.t('tiq.publish.code_dialog.error.title_must_contain', {environment:aliasName});

			} else if ((utui.targets.hasTarget(aliasName) && aliasName.toLowerCase() !== envTarget)
				|| utui.targets.hasAliasName(envTarget, aliasName)) {
				errorMsg = localize.t('tiq.publish.code_dialog.error.title_already_exists', {environment:aliasName});
			}

			if (errorMsg != '') {
				$error.text(errorMsg).slideDown();
				$field.addClass('validation-field-outline').attr('data-env', envTarget);
				return false;
			} else {
				$error.slideUp();
				$field.removeClass('validation-field-outline').prop('data-env',false);
				return true;
			}
		}

		var _bindUI = {
			tab: function () {
				var envArray = utui.targets.getList(),
					$envTitle = $('#' + _namespace + '_env_targetname'),
					$error = $('#' + _namespace + '_env_error');

				for (var key in envArray) {
					(function (env) {
						$('#' + _namespace + '_listselection_' + env).on('click', function (e) {
							e.stopImmediatePropagation();

							// clear error msg
							$error.slideUp();
							if ($envTitle.hasClass('validation-field-outline')) {
								// reset alias and clear error
								var $previousEnv = $envTitle.attr('data-env');
								if ($previousEnv) {
									var alias_name = utui.targets.aliasDisplayName($previousEnv);
									_aliasList[$previousEnv].alias_name = alias_name;
									alias_name += ' (' + utui.targets.toDisplayName($previousEnv) + ')';
									$('#' + _namespace + '_listselection_' + $previousEnv).text(alias_name).attr('title', alias_name);
								}
								$envTitle.removeClass('validation-field-outline');
							}

							// clear existing selection
							$('#' + _namespace + '_listing').children('li').each(function () {
								$(this).removeClass('selected');
							});

							// highlight selection
							$(this).parent().addClass('selected');

							// update panel
							utui.util.pubsub.subscribe(utui.constants.environments.TOGGLED, _viewModel.updateEnvironmentPanel(env));

							return false;
						});
					})(envArray[key]);
				}
			},
			deleteBtn: function () {
				$('#' + _namespace + '_deleteBtn').on('click', function (e) {
					e.stopImmediatePropagation();

					var env = $('#' + _namespace + '_header_selectedEnv').html(); //TODO: call selected environment away from DOM.
					utui.publish.showConfirmRemoveEnvironmentDialog(env, _aliasList).initialize();
				});
			},
			addEnvironment: function () {
				$('#' + _namespace + '_addEnvironmentBtn').on('click', function (e) {
					e.stopImmediatePropagation();

					utui.publish.showNewEnvironmentDialog(_aliasList).initialize();
				});
			},
			javascriptTypeBtn: function () {
				var $container = $('#' + _namespace + '_content');

				$('#' + _namespace + '_javascriptType_sync').on('change', function (e) {
					e.stopImmediatePropagation();

					$container.find('.codecenter_code_B').css('display', 'block');
					$container.find('.codecenter_code_C').css('display', 'none');
					$container.find('.type-warning').show();
				});

				$('#' + _namespace + '_javascriptType_async').on('change', function (e) {
					e.stopImmediatePropagation();

					$container.find('.codecenter_code_B').css('display', 'none');
					$container.find('.codecenter_code_C').css('display', 'block');
					$container.find('.type-warning').hide();
				});
			},
			disableCommentsBtn: function () {
				var $checkbox = $('#' + _namespace + '_disableCommentsCkbx');
				var $comments = $('#' + _namespace + '_codeSnippet').find('.codecenter_code_comment');

				$checkbox.on('change', function (e) {
					if (this.checked) {
						$comments.css('display', 'none');
					} else {
						$comments.css('display', 'inline-block');
					}

				});
			},
			selectAllBtn: function () {
				var $container = $('#' + _namespace + '_content');

				function selectText(element) {
					var text = document.getElementById(element),
						range, selection
						;
					if (document.body.createTextRange) { //ms
						range = document.body.createTextRange();
						range.moveToElementText(text);
						range.select();

					} else if (window.getSelection) { //all others
						selection = window.getSelection();
						range = document.createRange();
						range.selectNodeContents(text);
						selection.removeAllRanges();
						selection.addRange(range);
					}
				}

				$container.find('.selecttextbtn').on('click', function (e) {
					e.preventDefault;
					var $el = $(this).parent().children('pre:visible').attr('id');
					selectText($el);
				});
			}
		};

		// ----------------------------------------------------------------
		function _initView() {

			var v = '';
			v += _templateWizard.context(_namespace);
			v += _templateWizard.content(_namespace);

			// Check to see if dialog exists in DOM
			if ($('#' + _namespace + '_dialog').length == 0) {
				$('<div />', { id: _namespace + '_dialog' }).prependTo('body');
				$('<div />', { id: _namespace + '_dialogContent' }).appendTo('#' + _namespace + '_dialog');
			}

			$('#' + _namespace + '_dialogContent').html(v);
		}

		// ----------------------------------------------------------------
		// Displays dialog
		function _showDialog() {
			// $( "#dialog-configureenvironment" ).dialog('destroy');
			// $( "#dialog-configureenvironment" ).dialog({
			$('#' + _namespace + '_dialog').dialog({
				title: localize.t('tiq.publish.code_dialog.title'),
				height: 'auto',
				width: 'auto',
				modal: true,
				autoOpen: true,
				closeOnEscape: false,
				resizable: false,
				draggable: true,
				position: ['center', 'center'],
				buttons: [
					{
						text: localize.t('tiq.dialog.button.ok'),
						id: _namespace + '_dialog_okBtn',
						click: function () {
							// ensure no errors before closing dialog
							if (!$('#' + _namespace + '_env_targetname').hasClass('validation-field-outline')) {
								if (utui.permissions.canSaveProfile()) {
									// persist environment aliases
									utui.profile.updateEnvironmentAlias(_aliasList);
								}
								$(this).dialog("close");
							}
						}
					}
				]
			}).on('dialogclose', function () {
				utui.publish.showSaveDialog().refresh();
				$(this).remove(); //for using 'x' btn
			});

			// Do not show custom environments unless it is enabled
			if (!utui.permissions.canPublishCustom()) {
				$('#' + _namespace + '_addEnvironmentBtn').hide();
			}
		};

		// ----------------------------------------------------------------
		// Dispose dialog
		function _disposeDialog() {
			$('#' + _namespace + '_dialog').dialog('close');
		}


		// PUBLIC
		var _public = {
			// ----------------------------------------------------------------
			// Initial call to show dialog
			initialize: function () {
				_initView();

				_render.context();
				_render.content();

				// Select Prod
				$('#' + _namespace + '_listing li a').eq(2).trigger('click');

				var env = ['dev','qa','prod'];
				for(var i in env) {
					_setPublishPath(env[i]);
				}

				return _showDialog();
			},
			refresh: function () {
				_render.context();
				_render.content();
			}
		}

		return _public;
	},


	showSaveDialog: function () {
		// ------------------------------------------------------
		var self = this;

		var _namespace = 'savePublish';

		var _isEnabled = {
			devPublish: true,
			qaPublish: true,
			prodPublish: true,
			customPublish: true
		};

		var _template = {
			savePublish: function () {
				var v = '';
				v += '<div id="newVersionWrapper">';
				v += '    <div id="savepublish_error"></div>';
				v += '    <div id="newVersionHeader"></div>';
				v += '    <div class="newVersionBody">';
				v += '        <div id="newVersionConfigSection">';
				v += '            <div id="' + _namespace + '_versionSettings" class="publish_versionSettings">';
				v += '                <div id="' + _namespace + '_configSection"></div>';
				v += '                <div id="' + _namespace + '_publishButtonGroup"></div>';
				v += '                <div id="' + _namespace + '_forceFtp"></div>';
				v += '            </div>';
				v += '        </div>';
				v += '        <div id="newVersionHistorySection">' + this.history() + '</div>';
				v += '    </div>';
				v += '    <div id="newVersionConnectorsSection"></div>';
				v += '</div>';
				v += '<div id="currentVersionsWrapper">';
				v += '    <div id="currentVersions">';
				v += '        <div class="publishToTargetContainer">';
				v += '            <div id="currentPubTargets"></div>';
				v += '        </div>';
				v += '    </div>';
				v += '</div>';
				return v;
			},
			history: function () {
				var v = '';
				v += '<div class="publishHistoryContainer">';
				v += '  <table class="publishHistoryContainerTable"><tr>';
				v += '      <td id="publish_changeHistory">';
				v += '          <div class="publish_sectionTitle">' + localize.t('tiq.publish.save.your_changes') + '</div>';
				v += '          <div id="lpdPubDeltas"></div>';
				v += '      </td>';
				v += '      <td id="publish_versionHistory"></td>';
				v += '  </tr></table>';
				v += '</div>';
				return v;
			}
		};

		var _render = {
			titleNotes: function () {
				// Config Section
				$('#' + _namespace + '_configSection').html(_view.configSection());
				_bindUI.notesValidation();
			},
			headSettings: function () {
				// Header Settings Section
				$('#newVersionHeader').html(_view.headSettings());
				_bindUI.headSettings();
			},
			publishToggles: function () {
				_canSavePublishVersion();
				$('#' + _namespace + '_publishButtonGroup').html(_view.publishButtonGroup());
				$('#' + _namespace + '_forceFtp').html(_view.forceFtp());

				// Footer Environment Boxes
				$('#currentPubTargets').html(_view.publishBoxes());
				_bindUI.targetButtons();
				_bindUI.misc();
			},
			history: function () {
				// TODO: refactor views
				// Version History Section
				$('#publish_versionHistory').html(_view.versionHistory());
				$('#pubDlgVHist').html(_viewModel.getVersionHistoryEventList());

				// Changes History Section
				$('#lpdPubDeltas').html(_view.changesHistory());
			}
		};

		var _viewModel = {
			getRevisionHistoryEventList: function () {
				var revHistoryEventList = [];

				utui.util.forEachSorted(utui.data.publish_history[utui.data.settings.revision], function (revisionId, revision) {
					if (utui.util.numericValueOf(revisionId) > 0) {
						revHistoryEventList.unshift(revision);
					}
				});

				return revHistoryEventList;
			},
			getVersionHistoryEventList: function () {
				var historyList = _viewModel.getRevisionHistoryEventList();

				if (historyList.length == 0) {
					return;
				}

				if (historyList.length > 20) {
					$('#pubDlgVHistTitle').html(localize.t('tiq.publish.save.version_history_last'));
				}

				function pubStatusToString(historyList) {
					var pubStatus = historyList.status.replace(/\,/g, ', ').replace(/(dev|qa|prod)/g, function(match){var result = '<span class="env_alias_' + match + '">' + utui.targets.aliasDisplayName(match) + '</span>'; return result;});

					return pubStatus;
				}

				// Print Revision History
				var v = '';
				var actionText = '';
				for (var i = 0; i < historyList.length && i < 20; i++) {
					var history = historyList[i];

					if (history.status) {
						actionText = localize.t('tiq.publish.save.published_to', {environment:pubStatusToString(history)});
					} else if (history.action.indexOf('scheduled') !== -1) {
						actionText = history.action;
					} else {
						actionText = localize.t('tiq.publish.saved_not_published');
					}

					var notesWithBreaks = history.notes.replace(/\n/g, '<br>');

					v += '  <div class="row">';
					v += '  <div class="pub_revTitle"><span class="pub_revAction">' + actionText + ':</span><span class="revDate">' + utui.util.formatDate(history.last) + '</span></div>';
					v += '  <div class="pub_revAuthor"><span class="pub_revLabel">' + localize.t('tiq.publish.save.by') + '</span>' + history.operator + '</div>';
					v += '  <div class="pub_revNotes"><div class="pub_revNotes_left"><span class="pub_revLabel">' + localize.t('tiq.publish.save.notes') + ':</span></div><div class="pub_revNotes_right">' + notesWithBreaks + '</div></div>';
					v += '  </div>';
				}

				return v;
			}
		};

		var _view = {
			headSettings: function () {
				var v = '';
				v += '    <span href="#" id="pubsave_configurePubSettingsBtn" title="' + localize.t('tiq.publish.save.view_edit_publish_settings') + '" class="btn btn-small alignright">' + localize.t('tiq.publish.save.configure_publish_settings') + '</span>';
				v += '    <span href="#" id="pubsave_configureEnvBtn" title="' + localize.t('tiq.publish.save.configure_env_settings') + '" class="btn btn-small alignright">' + localize.t('tiq.publish.save.code_center') + '</span>';
				return v;
			},
			versionHistory: function () {
				var v = '<div id="pubDlgVHistTitle" class="publish_sectionTitle">' + localize.t('tiq.publish.save.version_history') + '</div>';
				v += '<div id="pubDlgVHist" class="publish_versionHistory histEventAudit">';
				v += '  <div class="publish_historyNoEvents">' + localize.t('tiq.publish.save.there_are_no_events') + '</div>';
				v += '</div>';

				return v;
			},
			changesHistory: function () {
				var changesObj = utui.historyManager.getNetChanges();

				var v = '<div class="hist_verEventDetailsContent">';
				v += '  <div class="histEventAuditHeader"><span class="historyChangeCount">' + changesObj.length + '</span>' + localize.t('tiq.publish.save.total_changes_since_last_save') + '</div>';
				if (changesObj.length > 0) {
					v += '  <div class="histEventAudit">' + utui.historyManager.getStringFromEvents(changesObj, 'row', true) + '</div>';
				}
				v += '</div>';
				return v;
			},
			configSection: function () {
				var v = '';
				var title = utui.profile.publishChoiceLabel || utui.config.tabList.publish.save;
				// Libraries can only use the SaveAs option so that a new revision is generated
				if (utui.profile.import.isLibrary()) {
					title = utui.config.tabList.publish.saveas;
				}

				if (title === utui.config.tabList.publish.save) {
					var saveTip = utui.data.publish.disable_custom_version_name ? "save_disabled" : "save";

					v += '  <div id="savepublish_save_type" title="' + utui.tooltip.savepublish[saveTip] + '" style="margin-left:20px;float:left">';
					v += '    <input type="radio" id="savepublish_save_type_save" name="savepublish_save_type_radio" value="save" /><label for="savepublish_save_type_save">' + localize.t('tiq.publish.save.save') + '</label>';
					v += '    <input type="radio" id="savepublish_save_type_saveas"  name="savepublish_save_type_radio" value="saveas" /><label for="savepublish_save_type_saveas">' + localize.t('tiq.publish.save.save_as') + '</label>';
					v += '  </div>';

					v += '  <div id="saveAlert" class="publish_saveAlert"><span class="ui-icon ui-icon-alert" style="float:left;"></span> ' + localize.t('tiq.publish.save.choose_save_as') + '</div>';

					v += '  <div id="savepublish_title" class="publish_form_field">';
					v += '      <div class="publish_form_field_label">' + localize.t('tiq.publish.save.title') + '*</div>';
					v += '      <div class="publish_form_field_input">';
					v += $('<input/>')
						.attr({'id': 'savepublish_version_title',
							'name': 'savepublish_version_title',
							'size': '55',
							'type': 'text',
							'disabled' : 'disabled',
							'value': _.unescape(utui.profile.getRevisionTitle(utui.data.settings.revision))
						})[0].outerHTML;
					v += '      </div>';
					v += '  </div>';

				} else if (title === utui.config.tabList.publish.saveas) {

					var jsDate = new Date();
					var currentDate = utui.util.date.getSaveAsDate(jsDate);
					var saveasTip = utui.data.publish.disable_custom_version_name ? "saveas_disabled" : "saveas";

					v += '  <div id="savepublish_save_type" title="' + utui.tooltip.savepublish[saveasTip] + '" style="margin-left:20px;">';
					v += '    <input type="radio" id="savepublish_save_type_saveas"  name="savepublish_save_type_radio" value="saveas" checked="checked" /><label for="savepublish_save_type_saveas">' + localize.t('tiq.publish.save.save_as') + '</label>';
					v += '  </div>';

					v += '  <div id="savepublish_title" class="publish_form_field">';
					v += '      <div class="publish_form_field_label">' + localize.t('tiq.publish.save.title') + '*</div>';
					v += '      <div class="publish_form_field_input"><input type="text" id="savepublish_version_title" name="savepublish_version_title" size="55"' + ((utui.data.publish.disable_custom_version_name) ? ' disabled="disabled"' : '') + ' value="Version ' + currentDate + '"/></div>';
					v += '  </div>';
				}

				// Notes
				v += '  <div id="savepublish_notes" class="publish_form_field">';
				v += '      <div class="publish_form_field_label">' + localize.t('tiq.publish.save.notes') + '*</div>';
				v += '      <div class="publish_form_field_input"><textarea id="publish_notes" title="' + utui.tooltip.savepublish.notes + '" name="publish_notes"></textarea></div>';
				v += '  </div>';
				return v;
			},
			publishButtonGroup: function () {
				var devAlias = utui.targets.aliasDisplayName('dev'),
					qaAlias = utui.targets.aliasDisplayName('qa'),
					prodAlias = utui.targets.aliasDisplayName('prod'),
					v = '';

				// Publish Buttons
				v += '  <div id="savepublish_environments" class="publish_form_field">';
				v += '      <div class="publish_form_field_label">' + localize.t('tiq.publish.save.publish_to') + '</div>';
				v += '      <div class="publish_form_field_input">';
				v += '          <span id="checkBtn_dev" class="publish_connector ellipsis ui-state-default env_alias_dev" title="' + devAlias + '">' + devAlias + '</span>';
				v += '          <span id="checkBtn_qa" class="publish_connector ellipsis ui-state-default env_alias_qa" title="' + qaAlias + '">' + qaAlias + '</span> ';
				v += '          <span id="checkBtn_prod" class="publish_connector ellipsis ui-state-default env_alias_prod" title="' + prodAlias + '">' + prodAlias + '</span> ';

				var customTargets = utui.targets.getList('custom');
				if ($.isArray(customTargets)) {
					v += '<span id="checkBtn_custom" class="publish_connector ellipsis ui-state-default">' + localize.t('tiq.publish.save.custom') + '</span>';
				}
				v += '      </div>';
				v += '  </div>';
				return v;
			},
			forceFtp: function () {
				var v = '';

				// Force FTP - only if tealium can publish prod
				if (utui.permissions.isTealiumUser() && utui.permissions.canPublishProd()) {
					v += '<div class="publish_settingsAdmin">';
					v += '  <div class="publishConfig_header">' + localize.t('tiq.publish.save.tealium_admin_options') + '</div>'

					var targets = utui.targets.getList(),
						len = targets.length;
					for (var i = 0; i < len; i++) {
						var key = targets[i],
							displayName = utui.targets.aliasDisplayName(key),
							forceFTPDisplayName = '<span class="env_alias_' + key + '">' + displayName + '</span>';
						v += '  <div class="publishAdmin_forceFTP"><input type="checkbox" value="yes" id="forceFTP_' + key + '_chkbox" name="forceFTP_' + key + '_chkbox" original-title="' + localize.t('tiq.publish.save.check_to_force_ftp', {environment:displayName}) + '" /><label for="forceFTP_' + key + '_chkbox">' + localize.t('tiq.publish.save.force_ftp_to', {environment:forceFTPDisplayName}) + '</label></div>';
					}
					v += '</div>';
				}
				return v;
			},
			publishBoxes: function () {

				var revHistoryEventList = _viewModel.getRevisionHistoryEventList();

				var tgtList = ["Dev", "QA", "Prod"],
					customTargets = utui.targets.getList('custom');

				if ($.isArray(customTargets)) {
					tgtList.push('Custom');
				}

				var devPubOKlishEnabled = _isEnabled.devPublish;
				var qaPublishEnabled = _isEnabled.qaPublish;
				var prodPublishEnabled = _isEnabled.prodPublish;
				var customPublishEnabled = _isEnabled.customPublish;

				var v = '<table class="pubTargetsTable"><tr>';

				for (var i = 0; i < tgtList.length; i++) {
					var tKey = tgtList[i].toLowerCase(),
						trgtObj;

					if (tKey != 'custom') {
						trgtObj = utui.dashboard.getLatestTarget(tKey);
					} else {
						for (var ct = 0; ct < customTargets.length; ct++) {
							trgtObj = utui.dashboard.getLatestTarget(customTargets[ct]);
							if (trgtObj) break;
						}
					}
					var targetConnectedClass = '';

					if (typeof revHistoryEventList[0] !== 'undefined') {
						if (trgtObj.title == revHistoryEventList[0].title) {
							targetConnectedClass = ' pub_versionTempConnection';
						}
						;
					}
					;

					v += '<td class="pub_target" id="pub_trgt_' + tKey + '">';
					v += '<div class="publish_targetConnector' + targetConnectedClass + '" id="target_connector_' + tKey + '"></div>';

					v += '<div class="pub_targetContainer">';
					v += '<div class="publish_targetHeader">';

					//Approval Required
					if (tKey === 'prod' && (!utui.publish.workflow.canPublishProd())) {
						v += '<input type="checkbox" id="publish_to_prod_chkbox_approve" name="publish_to_prod_chkbox_approve" value="prodApproval"/>';
						v += '<div class="publishTo_targetName env_alias_prod">' + utui.targets.aliasDisplayName('prod') + '<span class="publishTo_approvalRequired"> - ' + localize.t('tiq.publish.save.approval_required') + '</span></div>';
					} else {
						if (utui.permissions.canPublishToEnvironment(tKey)) {
							// Publish Allowed
							v += '<input type="checkbox" value="' + tKey + '" id="publish_to_' + tKey + '_chkbox" name="publish_to_' + tKey + '_chkbox" title="' + localize.t('tiq.publish.save.check_to_publish', {environment:tgtList[i]}) + '">';

							if (tKey == 'custom') {
								v += '<div class="publishTo_targetName">';
								v += '<select id="publish_to_custom_selbox" name="publish_to_custom_selbox">';
								v += '<option value="">' + localize.t('tiq.publish.save.select_custom_target') + '</option>';
								for (var j = 0; j < customTargets.length; j++) {
									v += '<option value="' + customTargets[j] + '">' + customTargets[j] + '</option>';
								}
								v += '</select>';
								v += '</div>';
							} else {
								var env = tgtList[i].toLowerCase(),
									aliasDisplayName = utui.targets.aliasDisplayName(env);
								v += '<div class="publishTo_targetName ellipsis env_alias_' + env + '" title="' + aliasDisplayName + '">' + aliasDisplayName + '</div>';
							}

						} else {
							var aliasName = utui.targets.aliasDisplayName(tKey);
							if (tKey == 'custom') {
								aliasName = tgtList[i];
							}
							// No Permission
							v += '<input type="checkbox" value="' + tKey + '" disabled id="publish_to_' + tKey + '_chkbox" name="publish_to_' + tKey + '_chkbox" title="' + localize.t('tiq.publish.save.check_to_publish', {environment:tgtList[i]}) + '">';
							v += '<div style="publishTo_targetName env_alias_' + tKey + '">' + aliasName + '<span class="publishTo_permissionRequired"> - ' + localize.t('tiq.publish.save.permission_required') + '</span></div>';

							if (tKey === 'dev') _isEnabled.devPublish = false;
							if (tKey === 'qa') _isEnabled.qaPublish = false;
							if (tKey === 'prod') _isEnabled.prodPublish = false;
							if (tKey === 'custom') _isEnabled.customPublish = false;
						}
					}
					v += '</div>';
					v += '<div class="publish_targetInfo">';
					if (tKey === 'prod') {
						v += '<div class="prodPublishWarning" id="prod_publish_warning" title="' + utui.tooltip.savepublish.target_prod + '">';
						v += '  <i class="icon-warning-sign"></i>' + localize.t('tiq.publish.save.changes_public_facing');
						v += '</div>';
					}
					v += '<div class="targetInfoHeader">' + localize.t('tiq.publish.save.last_published_version') + '</div>';
					if (typeof trgtObj.last !== 'undefined') {
						// lsTitle is a property added to publish_history obj's in utui.dashboard - it's the latest saved title of a revision which is exactly what we want in case a version was renamed and saved.
						// Borrowing utui.dashboard's getLatestSavedVersions method to generate an lsTitle property since we need the same functionality in this view.
						if (!trgtObj.lsTitle) {
							var latestSavedVersions = utui.dashboard.getLatestSavedVersions();
							if (latestSavedVersions[trgtObj.id]) {
								trgtObj.lsTitle = latestSavedVersions[trgtObj.id].title;
							}
						}
						v += '<div class="targetInfo_title">' + (utui.util.safeEscape(trgtObj.lsTitle) || utui.util.safeEscape(trgtObj.title)) + '</div>'; // Fall back to title for any edge case where an lsTitle can't be found
						v += '<div class="targetInfo_saved"><span class="targetInfoLabel">' + localize.t('tiq.publish.save.date') + ' </span> ' + utui.util.formatDate(trgtObj.last) + '</div>';
						v += '<div class="targetInfo_author"><span class="targetInfoLabel">' + localize.t('tiq.publish.save.by') + ' </span> ' + trgtObj.operator + '</div>';
					} else {
						v += '<div class="targetInfo_notPublished">' + localize.t('tiq.publish.save.none') + '</div>';
					}
					v += '</div>';

					v += '</div>';
					v += '</td>';
				}
				v += '</tr></table>'; //end pubTargetsTable
				return v;
			}
		};

		var _bindUI = {
			headSettings: function () {
				$('#pubsave_configurePubSettingsBtn').on('click', function (e) {
					e.stopImmediatePropagation();
					utui.publish.configuration.show();
					return false;
				});
				$('#pubsave_configureEnvBtn').on('click', function (e) {
					e.stopImmediatePropagation();
					utui.publish.showEnvironmentDialog().initialize();
					return false;
				});
			},
			targetButtons: function () {

				function onClickTargets(env) {
					// Do NOT show go-live prompt to Tealium users
					if (!utui.permissions.isTealiumUser()) {
						// If prod and checkbox is NOT checked (since this is a toggle) && need to show Go-Live prompt...
						if (env === 'prod' && !$('#publish_to_prod_chkbox').is(':checked') && utui.account.goLive_isStatePrompt()) {
							utui.account.goLive_showPrompt(function(){
								doClickTargets(env);
							});
							return;
						}
					}
					doClickTargets(env);
				};

				function doClickTargets(env) {
					var $checkbox = $('#publish_to_' + env + '_chkbox');

					$checkbox.prop('checked', !$checkbox.prop('checked'));

					if (env === 'prod') {
						var $checkbox_approve = $('#publish_to_prod_chkbox_approve');
						$checkbox_approve.prop('checked', !$checkbox_approve.prop('checked'));
						if ($checkbox.prop('checked')) {
							$('.prodPublishWarning').slideDown();
						}
						else {
							$('.prodPublishWarning').slideUp();
						}
					}

					$('#checkBtn_' + env).toggleClass('publish_connector_connected');
					$('#pub_trgt_' + env).toggleClass('pub_connected');
					_toggleSaveButtons();
				}


				function onClickCustom(event) {
					event.stopPropagation();

					var $selbox = $('#publish_to_custom_selbox'),
						val = $selbox.val();
					// ignoreToggle is set to true on the change event of the custom select box
					if (event.target == $selbox.get(0)) {
						if (val != '') {
							$('#checkBtn_custom').addClass('publish_connector_connected');
							$('#pub_trgt_custom').addClass('pub_connected');
						} else {
							$('#checkBtn_custom').removeClass('publish_connector_connected');
							$('#pub_trgt_custom').removeClass('pub_connected');
						}
					} else {
						$selbox[0].selectedIndex = ($selbox[0].selectedIndex <= 0) ? 1 : 0;
						$selbox.trigger('change');
					}

					_toggleSaveButtons();
				}

				/*
				 * Bind Target Buttons
				 */
				var envList = ['dev', 'qa', 'prod', 'custom'];

				for (var key in envList) {
					var env = envList[key];

					(function (env) {
						if (_isEnabled[env + 'Publish']) {
							if (env === 'custom') {
								$('#checkBtn_' + env).off('click').on('click', onClickCustom);
								$('#publish_to_' + env + '_selbox').off('change').on('change', onClickCustom);
							} else {
								$('#checkBtn_' + env).on('click', function (e) {
									e.stopPropagation();
									onClickTargets(env);
								});
								$('#pub_trgt_' + env).find('.pub_targetContainer').on('click', function (e) {
									e.stopPropagation();
									onClickTargets(env);
								});
							}
						} else {
							//If disabled, remove option to click publish buttons
							$('#checkBtn_' + env).addClass('checkBtnDisabled');
							$('#pub_trgt_' + env).addClass('pub_target_disabled');
						}
					})(env);
				}
			},
			notesValidation: function () {

				$('#publish_notes').focus();

				// Validation check for notes section
				$('#publish_notes').on('blur', function (e) {
					e.stopImmediatePropagation();
					var text = $('#publish_notes').val().trim();

					if (text.length > 0 && self._saveActionValidation.length > 0) {
						self.saveActionValidation();
					}
				});

				$('#savepublish_version_title').on('blur', function (e) {
					e.stopImmediatePropagation();
					var text = $('#savepublish_version_title').val().trim();

					if (text.length > 0 && self._saveActionValidation.length > 0) {
						self.saveActionValidation();
					}
				});

			},
			misc: function () {
				/*
				 * Some Misc Stuff
				 */
				var title = utui.profile.publishChoiceLabel || utui.config.tabList.publish.save;
				var status = "";
				for (var i in utui.util.getVars(utui.data.publish_history[utui.data.settings.revision], 1)) {
					status = utui.data.publish_history[utui.data.settings.revision][i].status;
				}
				if (title === utui.config.tabList.publish.save) {
					$('#savepublish_save_type_save').prop('checked', true);
				} else if (title === utui.config.tabList.publish.saveas) {
					$('#savepublish_save_type_saveas').prop('checked', true);
				}
				$('#savepublish_save_type').buttonset();

				var d = new Date();
				d.setTime(d.getTime() + 3600000);
				d.setMinutes(0);


				$('#savepublish_publish_type').buttonset();
				$('#savepublish_save_type_saveas').safeBind('click', function () {
					var jsDate = new Date();
					var currentDate = utui.util.date.getSaveAsDate(jsDate);
					var $versionTitle = $('#savepublish_version_title').val('Version ' + currentDate);

					// Only remove disabled attribute if publish setting is NOT set
					if (!utui.data.publish.disable_custom_version_name) {
						$versionTitle.prop('disabled' , false).select();
					} else {
						$versionTitle.attr('disabled', 'disabled');
					}
					$('#saveAlert').hide();
					$('.statusNotes').hide();						

				});
				$('#savepublish_save_type_save').safeBind('click', function () {
					$('#savepublish_version_title').val(utui.profile.getRevisionTitle(utui.data.settings.revision));
					$('#savepublish_version_title').attr('disabled', 'disabled');

					$('#saveAlert').show();
					$('.statusNotes').show();
				});

				$('.publish_connector').on("mouseenter", function () {
					$(this).toggleClass('ui-state-hover');
				}).on("mouseleave", function () {
					$(this).toggleClass('ui-state-hover');
				})

				var tooltipObj = {
					'savepublish_save_type': { gravity: 'n' },
					'publish_notes': { gravity: 'n' },
					'savepublish_publish_type': { gravity: 'n' },
					'savepublish_publish_force_upload_container': { gravity: 'n' },
					'prod_publish_warning' : { gravity: 'se'}
				};
				utui.util.addTooltip(tooltipObj);


				utui.util.setSession(true);
			}
		};

		function _toggleSaveButtons() {
			var $checkboxDev = $('#publish_to_dev_chkbox');
			var $checkboxQA = $('#publish_to_qa_chkbox');
			var $checkboxPub = $('#publish_to_prod_chkbox');
			var $checkboxPub_approve = $('#publish_to_prod_chkbox_approve');

			var $checkboxCustom = $('#publish_to_custom_selbox');

			var saveType = $('#savepublish_save_type').find('input[name="savepublish_save_type_radio"]:checked').val();

			var toggle = function() {
				if ($checkboxDev.prop('checked') || $checkboxQA.prop('checked') || $checkboxPub.prop('checked') || $checkboxPub_approve.prop('checked') || ($checkboxCustom.get(0) && $checkboxCustom.val() != '')) {
					$('.savePubSaveBtn').hide();
					$('.savePubPublishBtn').show();
				} else {
					$('.savePubSaveBtn').show();
					$('.savePubPublishBtn').hide();
				}
			};

			// Function to display a countdown when save is blocked by another recent save
			var countDownToSave = function() {
				if (typeof utui.publish.saveCountdown === 'undefined'){
					utui.publish.secsLeft = utui.sharedSessionManager.getSecondsToSaveUnlock();
					utui.publish.saveBlockedAP = utui.data.settings.account + ':' + utui.data.settings.profileid;
				}
				
				if (utui.publish.secsLeft > 0 && utui.publish.saveBlockedAP === utui.data.settings.account + ':' + utui.data.settings.profileid){
					var message = localize.t('tiq.publish.revision_recently_saved',{secs:utui.publish.secsLeft});

					$('.js-text-save-message').remove();
					$('#savePublish_dialog_saveBtn').before('<p class="js-text-save-message alignright" id="revision_recently_saved_msg"><i class="icon-warning-sign"></i> '+message+'</p>').hide();
					$('#savePublish_dialog_publishBtn').hide();
					utui.publish.saveCountdown  = setTimeout(countDownToSave, 1000);
					utui.publish.secsLeft--;
					
				} else {
					clearTimeout(utui.publish.saveCountdown);
					utui.publish.saveCountdown = undefined;
					
					// Need to revise the save default save title with the most recent timestamp (but only if the user hasn't entered their own title)
					var re = /^Version \d{4}\.\d{2}\.\d{2}\.\d{4}$/; // look for our default save title 
					if (re.exec($('#savepublish_version_title').val())){
						var jsDate = new Date();
						var currentDate = utui.util.date.getSaveAsDate(jsDate);
						$('#savepublish_version_title').val('Version ' + currentDate);
					}

					$("#revision_recently_saved_msg").remove();
					toggle();
				}

			};

			// If concurrent user and save blocked...
			$('.js-text-save-message').remove();
			if(utui.sharedSessionManager._saveBlocked) {
				// If selection is a save as, behave normally
				if(saveType === 'saveas') {
					toggle();
				} else {

					// Show error message
					var message = localize.t('tiq.publish.revision_out_of_date_resave');

					$('#savePublish_dialog_saveBtn').before('<p class="js-text-save-message alignright"><i class="icon-warning-sign"></i> '+message+'</p>').hide();
					$('#savePublish_dialog_publishBtn').hide();
				}
			} else if (utui.sharedSessionManager.getSecondsToSaveUnlock() !== 0){
				if(saveType === 'saveas') {
					// Temporarily block 'Save As' to prevent a new save from overwriting a newly created version with an identical timestamp
					if (! utui.publish.saveCountdown){
						countDownToSave();
					}
					
				} else {
					toggle();	
				}
			} else {
				toggle();
			}
		}

		function _saveValues() {
			var saveObj = utui.publish.saveActionValidation();

			if (saveObj != null) {
				utui.publish.saveHandler(saveObj);

				var publishTarget = "";
				if (saveObj.selPubTarget) {
					var _ac = '';
					publishTarget = " publish: "
					$('input:checked', '#publishTargetForm').each(function () {
						publishTarget += _ac + $('#' + _namespace + '_dialog').val();
						_ac = ', '
					});
				}

				$('#' + _namespace + '_dialog').dialog('close');

			}

			var tagging = _createTaggingObject(saveObj);
            utui.util.pubsub.publish(utui.constants.tagging.TAGGING, tagging);
        }

        function _createTaggingObject(saveObj) {
			var tag = { tealium_event: utui.constants.tagging.ACCOUNT_SAVED,
						action: utui.constants.tagging.ACCOUNT_SAVED,
			    		isLinkType : true
			};

			if (saveObj.type === "save") {
				tag.is_save_as = 0;
			} else {
				tag.is_save_as = 1;
			}

			var publishTargets = _getPublishTargets(saveObj);
			var tagging = Object.assign(tag, publishTargets);
			return tagging;
		}

		function _getPublishTargets(saveObj) {
			var publishTargets = {
                is_custom_publish : 0,
                is_qa_publish : 0,
                is_prod_publish : 0,
				is_dev_publish : 0
            };

			if (saveObj.custom != undefined) {
				publishTargets.is_custom_publish = 1;
			}

			if (saveObj.qa != undefined) {
				publishTargets.is_qa_publish = 1;
			}

			if (saveObj.prod != undefined) {
				publishTargets.is_prod_publish = 1;
			}

			if (saveObj.dev != undefined) {
				publishTargets.is_dev_publish = 1;
			}
			return publishTargets;
		}

		function _initView() {
			var v = '';
			v += _template.savePublish(_namespace);

			// Check to see if dialog exists in DOM
			if ($('#' + _namespace + '_dialog').length == 0) {
				$('<div />', { id: _namespace + '_dialog' }).prependTo('body');
				$('<div />', { id: _namespace + '_dialogContent' }).appendTo('#' + _namespace + '_dialog');
			}

			$('#' + _namespace + '_dialogContent').html(v);
		}

		function _showDialog() {

			var title = utui.profile.publishChoiceLabel || utui.config.tabList.publish.save;

			$('#' + _namespace + '_dialog').dialog({
				autoOpen: true,
				height: 'auto',
				minHeight: 600,
				width: 750,
				modal: true,
				closeOnEscape: false,
				closeText: "",
				resizable: false,
				draggable: true,
				title: title,
				dialogClass: "savePublishDialog",
				buttons: [
					{
						text: localize.t('tiq.dialog.button.save'),
						id: _namespace + '_dialog_saveBtn',
						click: function() {
							_saveValues();
						},
						class: 'savePubSaveBtn'
					},
					{
						text: localize.t('tiq.dialog.button.publish'),
						id: _namespace + '_dialog_publishBtn',
						click: function() {
							_saveValues();
						},
						class: 'savePubPublishBtn'
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						id: _namespace + '_dialog_cancelBtn',
						click: function() {
							$(this).dialog('close');
							utui.util.pubsub.publish(utui.constants.profile.CANCELLED_SAVE);
						},
						style: 'float:left; margin-left: 12px'
					}
				],
				close: function () {
					clearTimeout(utui.publish.saveCountdown);
					utui.publish.saveCountdown = undefined;
					$("#dialog-confirmation").dialog("destroy")
					$('.tipsy').remove();
				}
			}).on('dialogclose', function () {
					$(this).remove(); //for using 'x' btn
					utui.util.pubsub.unsubscribe(utui.constants.publish.PUBLISH_CONFIGURATION_UPDATED, _canSavePublishVersion);
				});

			$('#dialog-confirmation').on('click', function () {
				$('.tipsy').remove();
			});
			_savePublishVersionErrorCheck();

		};

		function _disposeDialog() {
			$('#' + _namespace + '_dialog').dialog('close');
		};

		function _canSavePublishVersion() {

			function _setIsEnabledBool(val) {
				for (env in _isEnabled) {
					_isEnabled[env] = !!val;
				}
			}

			if ( !utui.profile.isLatestVersion && !!utui.data.publish.disable_save_on_old_version ) { // !!: cast disable_save_on_old_version to boolean
				_setIsEnabledBool(false);
				_savePublishVersionErrorCheck();
			} else {
				_setIsEnabledBool(true);
				_savePublishVersionErrorCheck();
			}
		};

		function _savePublishVersionErrorCheck() {
			var $errorBlock = $('#savepublish_error'),
				msg = localize.t('tiq.publish.save.save_publish_not_allowed');

			if ( !utui.profile.isLatestVersion && !!utui.data.publish.disable_save_on_old_version ) {
				$errorBlock.html(msg);
				$errorBlock.delay(500).slideDown();
				$('.savePubSaveBtn').button("disable");
			} else {
				$errorBlock.hide();
				$('.savePubSaveBtn').button("enable");
			}
		}

		// ------------------------------------------------------
		// PUBLIC
		var _public = {
			initialize: function () {
				if (!utui.publish.isSavedAllowed(true)) {
					return;
				}

				_initView();
				_render.titleNotes();
				_render.headSettings();
				_render.publishToggles();
				_render.history();
				_showDialog();

				// Bind save toggling on Save / Save As radio
				$('#savepublish_save_type').find('input:radio').on('click', utui.publish.showSaveDialog().refreshToggleBtns);

				// Make "Save As" the default save button
				$('#savepublish_save_type_saveas').trigger('click');

				$('.js-text-save-message').remove();
				_toggleSaveButtons();

				// listen for publish config update and refresh
				utui.util.pubsub.subscribe(utui.constants.publish.PUBLISH_CONFIGURATION_UPDATED, utui.publish.showSaveDialog().refresh);
			},
			refresh: function () {
				// If saveass is selected let's retain it
				var saveasSelected = $('#savepublish_save_type_saveas').is(':checked');

				_render.publishToggles();
				_render.history();

				if (saveasSelected) {
					// Get the title value before triggering click so we can retain the old value if not disabled
					var title = $('#savepublish_version_title').val();
					var $title = $('#savepublish_version_title');
					var $saveas = $('#savepublish_save_type_saveas');

					// jQuery buttonset bug requires us to set the prop, call buttonset on the parent, then trigger the click
					$saveas.prop('checked', true);
					$saveas.parent().buttonset();
					$saveas.trigger('click');

					// Only set the title value if the field is not disabled
					if (!$title.attr('disabled')) {
						$title.val(title);
					}
				}
			},
			refreshToggleBtns: _toggleSaveButtons
		}


		return _public;
	},


	_saveActionValidation: [],

	saveActionValidation: function () {

		var self = this;

		function validationPass(fieldId) {
			$('#' + fieldId).removeClass('validation-field-outline');
			var index = $.inArray(fieldId, self._saveActionValidation);

			if (index !== -1) {
				self._saveActionValidation.splice(index, 1);
			}

			if (self._saveActionValidation.length == 0) {
				$('#savepublish_error').slideUp();
			}
		}

		function validationFail(errMessage, fieldId) {
			$('#savepublish_error').html(errMessage);
			$('#savepublish_error').slideDown();
			$('#' + fieldId).addClass('validation-field-outline');
			$('#' + fieldId).focus();

			if (self._saveActionValidation.indexOf(fieldId) < 0) {
				self._saveActionValidation.push(fieldId);
			}
		}

		var saveType = $('#savepublish_save_type_save:checked').val();

		if (typeof saveType == 'undefined') {
			saveType = $('#savepublish_save_type_saveas:checked').val();
		}
		var saveObj = {
			type: saveType,
			title: $('#savepublish_version_title').val(),
			notes: $('#publish_notes').val(),
			selPubTarget: $('input:checked', '#publishTargetForm').length > 0,
			dev: $('#publish_to_dev_chkbox:checked').val(),
			qa: $('#publish_to_qa_chkbox:checked').val(),
			prod: $('#publish_to_prod_chkbox:checked').val(),
			prodApproval: $('#publish_to_prod_chkbox_approve:checked').val(),
			lastmanageid: utui.data.settings.lastmanageid,
			lastcustomizeid: utui.data.settings.lastcustomizeid,
			linkedProfiles: utui.profile.import.getLinkedProfilesForPublish(false),
			datacloudLinkedProfiles: utui.profile.import.getAudiencestreamProfilesForPublish(false)
		}

		// value is sent on the change event of the custom select box
		saveObj.custom = $('#publish_to_custom_selbox').val()

		if (saveObj.type == utui.publish.constants.SAVE_AS && saveObj.title == '') {
			validationFail(localize.t('tiq.publish.save.error.please_provide_version_title'), 'savepublish_version_title');
			return null;
		} else {
			validationPass('savepublish_version_title');
		}

		if (saveObj.notes == '') {
			validationFail(localize.t('tiq.publish.save.error.please_provide_information'), 'publish_notes');
			return null;
		} else {
			validationPass('publish_notes');
		}


		return saveObj;
	},

	saveHandler: function (saveObj, callbackHandlerObj) {
		utui.util.pubsub.publish(utui.constants.profile.BEFORE_SAVE);

		if (saveObj.title == '')saveObj.title = utui.profile.getRevisionTitle(utui.data.settings.revision);

		utui.util.loadingModalStart(localize.t('tiq.publish.save.saving_profile'));

		utui.profile.saveTabData(utui.config.currentTab, false);

		var modEvents = utui.historyManager.getAllChanges();
		var tagIds2mark = [];
		for (var i = 0; i < modEvents.length; i++){
			if (modEvents[i].data.kind === "Tag" || modEvents[i].data.kind === "Template"){
				tagIds2mark.push(modEvents[i].data.id);
			} else if (modEvents[i].data.kind === "Extension"){
				var ext2Chk = exapi.getObjectByExtensionId(modEvents[i].data.id);
				if (_.isObject(ext2Chk) && _.has(ext2Chk,"scope")){
					_.each(ext2Chk.scope.split(","),function(s){
						if (_.has(utui.data.manage,s)){
							tagIds2mark.push(s);
						}
					});
				}
			}
		}
		tagIds2mark = _.uniq(tagIds2mark);

		var selectedPubTargets = [];
		_.each(['dev','qa','prod','custom'],function(tkey){
			if (saveObj[tkey]){
				selectedPubTargets.push(saveObj[tkey]);
			}
		});

		_.each(utui.data.manage,function(tag){
			if (tag.publish_revisions){ // Does this tag have the publish revisions object
				if (_.indexOf(tagIds2mark,tag.id) > -1 || _.indexOf(utui.publish.alwayCacheBustTags, tag.tag_id) > -1){ // Has this tag been touched or must always be busted?
					tag.publish_revisions.last_modified = utui.config.lastServerTimestamp.substring(0,12);
				}
			} else { // Set up the default publish revisions object
				tag.publish_revisions = { last_modified : utui.config.lastServerTimestamp.substring(0,12), svr_save_timestamps : {} };
			}
			if (selectedPubTargets.length > 0){ // Is this a save for publish?
				tag.publish_revisions.svr_save_timestamps =  (typeof tag.publish_revisions.svr_save_timestamps === 'undefined') ? {} : tag.publish_revisions.svr_save_timestamps;
				_.each(selectedPubTargets,function(pt){ // Need to update the same timestamps for each publish target
					if (tag.publish_revisions.svr_save_timestamps[pt]){ // Is there a server timestamp for this target? 
						// Has the tag been modified since it was last saved by the server? 
						if (tag.publish_revisions.last_modified > (tag.publish_revisions.svr_save_timestamps[pt])){
							tag.publish_revisions.svr_save_timestamps[pt] = 0; // Mark the tag for the server to update the timestamp
						}
					} else {
						tag.publish_revisions.svr_save_timestamps[pt] = 0; // Doesn't exist, so server needs to set it.
					}
				});
			}
		});

        //------------------------------------------------------------------------------------------------------------------
        // Check for any instances of the JS Developer extension (100040) and promote any snippets that match the targets
		// being published to.
        //------------------------------------------------------------------------------------------------------------------
		var jsCodeRevertObject = {};
        if (selectedPubTargets.length > 0) { // Is this a save for publish?
			_.each(utui.data.customizations,function(ext, extId){
				if (ext.id === "100040"){
                    var extRevertObject = utui.customizations_template[100040].promoteAllSnippetsForTargetList(extId,selectedPubTargets);
                    $.extend(true,jsCodeRevertObject,extRevertObject);
				}
			});
		}

		var dataObj = utui.util.cp(utui.data);
		dataObj.publish_history = {};
		dataObj.r = "saveProfile";
		dataObj.account = utui.login.account;
		dataObj.profile = utui.login.profile;
		dataObj.modifiedImportConfigs = utui.profile.modifiedImportConfigs;
		dataObj.migrateImportExtensions = utui.profile.import.migrateImportExtensions;
		dataObj.customLogoURL = utui.profile.customLogoURL;
		dataObj.cb = Math.random();

		if (!$.isEmptyObject(dataObj.label_relationships)) {
			dataObj.label_relationships = JSON.stringify(dataObj.label_relationships);
		}

		if (saveObj.type == "save") {
			dataObj.save = 1;
			//saveObj.title = $('#publish_div_title_input').val(); //if it's not save as, use the version title
		} else {
			// save version origin
			var currentRevision = utui.profile.getLastRevision(utui.data.settings.revision);
			if (currentRevision && currentRevision.id) {
				dataObj.versionorigin = currentRevision.id;
			}
		}


		try { // Backward compatibility for old version for smartFTP
			if (typeof utui.data.publish.smartFTP !== 'object') {
				utui.data.publish.smartFTP = {'dev': 'init', 'qa': 'init', 'prod': 'init'};

			} else {
				var targets = utui.targets.getList(),
					len = targets.length;
				for (var i = 0; i < len; i++) {
					var key = targets[i];
					if (typeof utui.data.publish.smartFTP[key] == 'undefined') {
						utui.data.publish.smartFTP[key] = 'init';
					}
				}
			}
		} catch (e) { // Defensive code to set a working default
			utui.data.publish.smartFTP = {'dev': 'init', 'qa': 'init', 'prod': 'init'};
		}

		var tgtList = utui.targets.getList(),
			len = tgtList.length;

		for (var i = 0; i < len; i++) {
			var forceFTP = 'no'
			if ($('#forceFTP_' + tgtList[i] + '_chkbox:checked')) {
				forceFTP = $('#forceFTP_' + tgtList[i] + '_chkbox:checked').val();
			}
			if (saveObj[tgtList[i]] === tgtList[i]) {
				if (forceFTP === 'yes') {
					utui.data.publish.smartFTP[tgtList[i]] = 'preMCDN';
				} else {
					if (utui.data.publish.smartFTP[tgtList[i]] == 'init') {
						utui.data.publish.smartFTP[tgtList[i]] = 'preMCDN';
					} else if (utui.data.publish.smartFTP[tgtList[i]] == 'preMCDN') {
						utui.data.publish.smartFTP[tgtList[i]] = 'true';
					} else if (utui.data.publish.smartFTP[tgtList[i]] != 'true') {
						utui.data.publish.smartFTP[tgtList[i]] = 'preMCDN';
					}
				}
			}
		}

		dataObj.notes = saveObj.notes;
		dataObj.title = saveObj.title;
		dataObj.lastmanageid = saveObj.lastmanageid;
		dataObj.lastcustomizeid = saveObj.lastcustomizeid;
		dataObj.history = utui.historyManager.toString();
		dataObj.linkedProfiles = saveObj.linkedProfiles;
		dataObj.datacloudLinkedProfiles = saveObj.datacloudLinkedProfiles;

		if (utui.data.settings.library) {
			dataObj.importable_library = utui.data.settings.library;
		}
		dataObj.revision = utui.data.settings.revision;
		var dataLayerSpecs = utui.define.dataLayerSpecs.getDataLayerSpecsForPublish();
		if (!$.isEmptyObject(dataLayerSpecs)) {
			dataObj.data_layer_spec = dataLayerSpecs;
		}
		var testConfigs = utui.siteVerify.getTestConfigsForPublish();
		if (!$.isEmptyObject(testConfigs)) {
			dataObj.test_config = testConfigs;
		}

		utui.sharedSessionManager.hasSaveInProgress(true);
		if (selectedPubTargets.length > 0){
			utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.SAVE_FOR_PUBLISH , dataObj.revision , selectedPubTargets.toString());
		} else {
			utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.SIMPLE_SAVE , dataObj.revision);
		}
		utui.service.post(utui.service.restapis.SAVE_PROFILE, dataObj, null, function (data) {
			var saveResponse = data; //used if publish timedout or failed
			utui.sharedSessionManager.hasSaveInProgress(false);

			if (data.credentials) {
				utui.util.loadingModalStop();
				if (Object.keys(jsCodeRevertObject).length){
                    utui.customizations_template[100040].revertPromotedSnippetsOnFailure(jsCodeRevertObject);
				}
				utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.INACTIVE);
				if (data.error_json){
					utui.publish.showCredentialsModal(utui.publish.buildErrorMsgFromSvr(data));
				} else {
					utui.publish.showCredentialsModal(data.credentials);	
				}
				
				return;
			} else {
				if (selectedPubTargets.length > 0){
					utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.PREP_FOR_PUBLISH , dataObj.revision , selectedPubTargets.toString());
				} else {
					utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.SAVE_COMPLETE , dataObj.revision);
				}
				var _clearHistory = function (saveObj) {
					// Publish save before clearing historyManger
					if (saveObj.type == "save") {
						utui.util.pubsub.publish(utui.constants.profile.SAVED, saveObj);
					} else {
						utui.util.pubsub.publish(utui.constants.profile.SAVED_AS, saveObj);
					}
					utui.historyManager.clear();
					utui.profile.clear();
					utui.publish.clear();
					$('#define_content input, #define_content select').removeClass('define-changed');
				};

				var _onSaveSuccess = function (data) {
					// Update the latest revision and minor revision for concurrency checking
					var latestRevision = data.revision || publishObj.revision;
					utui.profile.lastRevision = latestRevision;
					utui.data.settings.revision = latestRevision;
					utui.data.settings.minorrevision = saveResponse.uniqueRevisionId || utui.data.settings.minorrevision;
					
					utui.sharedSessionManager.setMyMostRecentSavedVersion({version:latestRevision,revision:utui.data.settings.minorrevision});
					
					if (saveObj.type == utui.publish.constants.SAVE_AS) {
						utui.profile.setPublishData(data.publish_history);
						utui.profile.setCurrentProfile();

						delete utui.profile.recentVersions[dataObj.settings.account + '|' + dataObj.settings.profileid];
						utui.util.pubsub.publish(utui.constants.profile.CREATED, {action: utui.constants.profile.CREATED});
						utui.util.pubsub.publish(utui.constants.profile.LATEST_VERSION_CHANGED);
					}
					else {
						utui.profile.setPublishData(data.publish_history);
						if (utui.config.currentTab == utui.config.tabList.dashboard.tab) {
							utui.dashboard.show();
						}
					}

					// update original_data to reflect newest state
					utui.original_data = $.extend(true, {}, utui.data);
				};

				var target = [],
					environments;  // Tells the server which environments we need to verify permissions for
				if (saveObj.dev) {
					target.push('dev');
				}
				if (saveObj.qa) {
					target.push('qa');
				}
				if (saveObj.prod) {
					target.push('prod');
				}

				environments = target.slice();  // Copies the entire array when not specifying a start and end index
				if (saveObj.custom) {
					target.push(saveObj.custom);    // Contains the custom target to publish to
					if ($.inArray('dev', environments) == -1){
						environments.push('dev');
					}
				}

				// Used to pass into the profile.PUBLISHED event
				var publishEventObj = {targets: target, versionBeingPublished: utui.data.settings.revision, notes: saveObj.notes, type: saveObj.type, action: utui.constants.profile.PUBLISHED};

				utui.manage.updatePublishedTargetsForTags(target);
				utui.customizations.updatePublishedTargetsForExtensions(target);

				if(callbackHandlerObj && callbackHandlerObj.save){
					try{
						callbackHandlerObj.save();
					}catch(e){}
				}

				// If target exists
				if (target.length > 0) {
					utui.sharedSessionManager.hasSaveInProgress(true);

					utui.data.settings.revision = data.revision;


					$('#loading_message').html(localize.t('tiq.publish.save.publishing_version'));

					var publishObj = {
						target: target.join(','),
						environments: environments.join(','),
						revision: data.revision,
						r: 'publish',
						notes: saveObj.notes,
						title: saveObj.title,
						force_upload: saveObj.force_upload,
						lastmanageid: saveObj.lastmanageid,
						lastcustomizeid: saveObj.lastcustomizeid,
						history: dataObj.history,
						uniqueRevisionId: data.uniqueRevisionId,
						account: utui.login.account,
						profile: utui.login.profile,
						linkedProfiles: saveObj.linkedProfiles,
						datacloudLinkedProfiles: saveObj.datacloudLinkedProfiles
					};

					if (dataObj.versionorigin) {
						publishObj.versionorigin = dataObj.versionorigin;
					}

					// Get all of the tags that are active
					var publishedTags = [];

					for (var tagId in utui.data.manage) {
						if (utui.data.manage[tagId].status === 'active')
							publishedTags.push(tagId);
					}
					publishObj.publishedTags = JSON.stringify(publishedTags);
					
					// Get all of the extensions that are active
					var publishedExtensions = [];

					for (var extId in utui.data.customizations) {
						if (utui.data.customizations[extId].status === 'active')
							publishedExtensions.push(extId);
					}
					publishObj.publishedExtensions = JSON.stringify(publishedExtensions);

					// For all the tags that had their publish revsion timestamps reset, update the utui.data.manage value to the server timestamp
					_.each(utui.data.manage,function(tag){
						if (tag.publish_revisions){
							_.each(tag.publish_revisions.svr_save_timestamps,function(ts,tgt,obj){
								if (ts === 0) { 
									obj[tgt] = data.uniqueRevisionId; // Gets the client ts equal to the server value without a reload
								}
							});
						} 
					});

					if (utui.data.settings.library) {
						publishObj.importable_library = utui.data.settings.library;
					}

					utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.PUBLISH_IN_PROGRESS , publishEventObj.versionBeingPublished , target.join(','));
					utui.service.post(utui.service.restapis.PUBLISH, publishObj, null, function (data) {
						utui.sharedSessionManager.hasSaveInProgress(false);
						
						_clearHistory(saveObj);
						if (data.credentials) {
							utui.util.loadingModalStop();
                            if (jsCodeRevertObject){
                                utui.customizations_template[100040].revertPromotedSnippetsOnFailure(jsCodeRevertObject);
                            }
							utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.INACTIVE);
							if (data.error_json){
								utui.publish.showCredentialsModal(utui.publish.buildErrorMsgFromSvr(data));
							} else {
								utui.publish.showCredentialsModal(data.credentials);	
							}
						} else {
							utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.PUBLISH_COMPLETE , publishEventObj.versionBeingPublished , target.join(','));
							if (data.message) {
								// replace environment names with aliases
								var msg = data.message.replace(/(dev|qa|prod)/g, function (match) {
									var result = utui.targets.aliasDisplayName(match);
									return result;
								});
								utui.util.showStatusMessage(msg, true);
							}

							utui.util.loadingModalStop();
						}

						// PUBLISH (success)
						_onSaveSuccess(data);

						utui.util.pubsub.publish(utui.constants.profile.PUBLISHED, publishEventObj);
						if (callbackHandlerObj && callbackHandlerObj.publish) {
							try {
								callbackHandlerObj.publish();
							} catch (e) {
							}
						}

					}, function (status, response) {
						utui.util.loadingModalStop();
						utui.sharedSessionManager.hasSaveInProgress(false);
						utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.INACTIVE);

						_clearHistory(saveObj);
						if (response && response.status === 401) {
                            if (jsCodeRevertObject){
                                utui.customizations_template[100040].revertPromotedSnippetsOnFailure(jsCodeRevertObject);
                            }
							utui.util.showPermissionErrorDialog();
						} else {
							// Just incase we timed out we must assume it worked...
							// PUBLISH (failure)
							_onSaveSuccess(saveResponse);
						}
					});
				} else {
					_clearHistory(saveObj);
					// SAVE or SAVE_AS (success)
					_onSaveSuccess(data);

					utui.util.loadingModalStop();
					utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.SAVE_COMPLETE , dataObj.revision);
				}

			}
		}, function (status, response) {
			utui.util.loadingModalStop();
			utui.sharedSessionManager.hasSaveInProgress(false);
			utui.sharedSessionManager.cuMsgTransport.notifySavePublishEvent(utui.sharedSessionManager.cuMsgTransport.INACTIVE);


			// Set up a catch-all notification
			var errText = localize.t('tiq.profile.error.unable_to_save_profile', {name: dataObj.profile});
			if (response){
				if (response.status === 401){
					utui.util.showPermissionErrorDialog();
					return;		
				} else { // Identify the locked profile scenario and create a detailled message
					if (response.status === 406 && response.responseText){
						var re = /Error saving profile. Profile locked by : (\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+)/;
						var found = response.responseText.match(re);
						if (found){
							errText = localize.t('tiq.profile.error.unable_to_save_locked_profile_detail', {name: dataObj.profile, email: found[1]})
						}
					}					
				} 
			}

			utui.publish.showCredentialsModal(errText);
		});
	},
	buildErrorMsgFromSvr: function(dataObj) {
		try {
			var eObj = dataObj.error_json;
			var dtlKeys = Object.keys(eObj.detail);
			var msgText;
			if (dtlKeys.length > 0){
				msgText = localize.t('tiq.publish.server_error.' + eObj.code, eObj.detail);
			} else {
				msgText = localize.t('tiq.publish.server_error.' + eObj.code);
			}
			return msgText;
		} catch(e) {
			console.log("Exception parsing svr error : "+e);
			return dataObj.credentials;
		}
		
	},
	showCredentialsModal: function (content, callback) {
		$("#dialog-confirmation-content").html(content.replace(/&lt;br( *\/|)&gt;/gi, '<br>')); // Preserve line breaks and escaped content

		$("#dialog").dialog("destroy");
		$("#dialog").show();

		$("#dialog-confirmation").dialog({
			autoOpen: true,
			height: 'auto',
			width: 540,
			modal: true,
			closeOnEscape: false,
			closeText: "",
			buttons: [
				{
					text: localize.t('tiq.dialog.button.close'),
					id: 'credentials_dialog_closeBtn',
					click: function () {
						$(this).dialog('close');
						if (typeof callback != 'undefined')callback();
					}
				}
			]
		});
	},
	editDeploy: function (revision) {
		if (utui.profile.dirty) {
			this.editDeployConfirm(revision);
		} else {
			$('#publish_edit_' + revision).hide();
			utui.util.loadingModalStart(localize.t('tiq.publish.loading_profile'));
			utui.historyManager.clear();
			utui.profile.getProfile(null, {
				revision: revision
			}, function (data) {
				data.initialTab = 'publish';
				utui.profile.getProfileCallback(data);
				$('#profile_revision').val(revision);
				utui.util.loadingModalStop();
			});
		}
	},
	editDeployConfirm: function (revision) {
		var confirmationContent = localize.t('tiq.publish.any_unsaved_changed_lost');
		$("#dialog-confirmation-content").html(confirmationContent);

		$("#dialog-confirmation").dialog({
			autoOpen: true,
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: false,
			closeText: "",
			resizable: false,
			draggable: true,
			buttons: [
				{
					text: localize.t('tiq.dialog.button.yes'),
					id: 'confirmEditDeploy_dialog_yesBtn',
					click: function() {
						utui.profile.clear();
						utui.publish.editDeploy(revision);
						$(this).dialog('close');
					}
				},
				{
					text: localize.t('tiq.dialog.button.no'),
					id: 'confirmEditDeploy_dialog_noBtn',
					click: function() {
						$(this).dialog('close');
						utui.util.pubsub.publish(utui.constants.profile.CANCELLED_UNSAVED_CHANGES);
					},
					style: 'float:left; margin-left: 12px'
				}
			]
		});

		$("#dialog").dialog("destroy");
		$("#dialog").show();
	},
	renameVersionConfirm: function (revision, lastMod) {
		var content = localize.t('tiq.publish.rename_this_version', {name:utui.util.safeEscape(utui.data.publish_history[revision][lastMod].title)}) + '<p>';
		content += localize.t('tiq.publish.please_enter_version_title') + ' '
		content += $('<input/>')
			.attr({'id': 'publish_rename_title',
				'size': '45',
				'type': 'text',
				'value': _.unescape(utui.data.publish_history[revision][lastMod].title)
			})[0].outerHTML;
		$("#dialog-confirmation-content").html(content);

		$("#dialog-confirmation").dialog({
			title: localize.t('tiq.publish.rename_version'),
			autoOpen: true,
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: false,
			closeText: "",
			resizable: false,
			draggable: true,
			buttons: [
				{
					text: localize.t('tiq.dialog.button.rename'),
					id: 'confirmRenameVersion_dialog_renameBtn',
					click: function() {
						utui.publish.renameVersionHandler({
							id: revision,
							lastMod: lastMod,
							title: $('#publish_rename_title').val()
						});
					}
				},
				{
					text: localize.t('tiq.dialog.button.cancel'),
					id: 'confirmRenameVersion_dialog_cancelBtn',
					click: function() {
						$(this).dialog('close');
					},
					style: 'float:left; margin-left: 12px'
				}
			]
		});
		$('#publish_rename_title').focus();
		$("#dialog").dialog("destroy");
		$("#dialog").show();
	},
	renameVersionHandler: function (obj) {
		var newTitle = $('#publish_rename_title').val();
		if (newTitle != '') {
			utui.data.publish_history[obj.id][obj.lastMod].title = newTitle;
			$('#hist_verTitle_' + obj.id + ' .hist_versionTitleLabel').html(utui.util.safeEscape(newTitle));
			$('#filter_version_label_' + obj.id).html(utui.util.safeEscape(newTitle));
			$('#profile_legend_revision').html(utui.util.safeEscape(newTitle));
		}
		$("#dialog-confirmation").dialog('close');

		utui.util.loadingModalStop(localize.t('tiq.publish.updating_version_title'));

		// Set dirty flag on Save/Publish  (changes will be saved along with the version save/publish)
		utui.profile.setDirty();
	},
	copyRevisionConfirm: function (revision, last) {
		var content = 'You are making a copy of: ' + utui.util.safeEscape(utui.data.publish_history[revision][last].title) + '.<p>';
		var jsDate = new Date();
		var currentDate = utui.util.date.getSaveAsDate(jsDate);
		if (utui.profile.dirty == 1) {
			content += '<div class="copyRevision_changes">' + localize.t('tiq.publish.changes_will_not_be_copied') + '</div>';
		}
		// Prevent user from entering a version title if the following setting is enabled
		if (utui.data.publish.disable_custom_version_name) {
			content += localize.t('tiq.publish.new_version_title') + ' <input type="text" size="45" value="Version ' + currentDate + '" id="publish_copy_title" disabled="disabled">';
		} else {
			content += localize.t('tiq.publish.please_enter_new_version_title') + ' <input type="text" size="45" value="Version ' + currentDate + '" id="publish_copy_title">';
		}
		$("#dialog-confirmation-content").html(content);

		$("#dialog-confirmation").dialog({
			title: localize.t('tiq.publish.make_copy'),
			autoOpen: true,
			height: 'auto',
			width: 'auto',
			modal: true,
			closeOnEscape: false,
			closeText: "",
			resizable: false,
			draggable: true,
			buttons: [
				{
					text: localize.t('tiq.dialog.button.save'),
					id: 'confirmRevisionCopy_dialog_saveBtn',
					click: function() {
						$(this).dialog('close');
						utui.publish.copyRevision({
							id: revision,
							title: $('#publish_copy_title').val()
						});
					}
				},
				{
					text: localize.t('tiq.dialog.button.cancel'),
					id: 'confirmRevisionCopy_dialog_cancelBtn',
					click: function() {
						$(this).dialog('close');
					},
					style: 'float:left; margin-left: 12px'
				}
			]
		});
		$('#publish_copy_title').focus();
		$("#dialog").dialog("destroy");
		$("#dialog").show();
	},
	copyRevision: function (obj) {
		$('#publish_' + obj.id).removeClass('ui-state-active');
		utui.util.loadingModalStart(localize.t('tiq.publish.copying_profile'));
		var dataObj = {
			revision: obj.id,
			title: obj.title
		};

		utui.service.get(utui.service.restapis.COPY_REVISION, dataObj, null, utui.publish.copyRevisionCallback);
	},
	copyRevisionCallback: function (data) {
		if (data.credentials) {
			utui.util.loadingModalStop();
			utui.publish.showCredentialsModal(data.credentials);
		} else {
			var deployObj = {
				id: data.settings.revision,
				title: data.publish_history[data.settings.revision].title,
				last: data.settings.revision,
				status: data.publish_history[data.settings.revision].status,
				operator: data.publish_history[data.settings.revision][data.settings.revision].operator,
				notes: data.publish_history[data.settings.revision][data.settings.revision].notes
			}

			utui.profile.setPublishData(data.publish_history);
			utui.publish.editDeploy(data.revision);

			utui.util.pubsub.publish(utui.constants.profile.CREATED, {action:utui.constants.profile.CREATED});

			utui.util.loadingModalStop();
		}
	},

	showHistory: function (id) {
		var publishHistory = '',
			flag = 0,
			arr = [],
			pubObj = utui.data.publish_history[id][id],
			title = pubObj ? localize.t('tiq.publish.history_dialog.version_history_for', {title:pubObj.title}) : localize.t('tiq.publish.history_dialog.version_history');

		publishHistory += '<table id="publishheader">';
		publishHistory += '	<thead>';
		publishHistory += '		<tr>';
		publishHistory += '			<th class="publish">' + localize.t('tiq.publish.history_dialog.date') + '</th>';
		publishHistory += '			<th class="publish">' + localize.t('tiq.publish.history_dialog.operator') + '</th>';
		publishHistory += '			<th class="publish">' + localize.t('tiq.publish.history_dialog.notes') + '</th>';
		publishHistory += '			<th class="publish">' + localize.t('tiq.publish.history_dialog.action') + '</th>';
		publishHistory += '		</tr>';
		publishHistory += '	</thead>';
		publishHistory += '	<tbody id="publishcontent">';

		for (var i in utui.util.getVars(utui.data.publish_history[id])) {
			if (i != 'publishState') {
				arr.push(i);
			}

		}
		arr = arr.sort(function (a, b) {
			return b - a
		});

		for (var i = 0; i < arr.length; i++) {
			var obj = utui.data.publish_history[id][arr[i]];
			publishHistory += '<tr ';
			var publishClass = "publishrow";
			if (flag == 1) {
				flag = 0;
				publishClass += ' ui-alternate-background';
			} else {
				flag = 1;
			}
			publishHistory += 'class="' + publishClass + '">';

			publishHistory += '<td class="publish">' + utui.util.formatDate(obj.last) + ' GMT</td>';
			publishHistory += '<td class="publish">' + obj.operator + '</td>';
			publishHistory += '<td class="publishnotes">' + obj.notes + '</td>';
			if (typeof obj.action == "undefined") obj.action = "";
			if (obj.status && obj.status.indexOf(',') > -1) {
				obj.action = 'Published to ' + obj.status.replace(/,/g, ', ');
			}
			publishHistory += '<td class="publishnotes">' + obj.action + '</td>';
			publishHistory += '</tr>';
		}
		$("#dialog-publish-history-content").html(publishHistory + '</tbody></table>');

		$("#dialog").dialog("destroy");
		$("#dialog").show();


		$("#dialog-publish-history-content").dialog({
			title: title,
			autoOpen: true,
			height: 460,
			width: 800,
			modal: true,
			closeOnEscape: true,
			closeText: "",
			position: ['center', 110],
			draggable: true,
			resizable: false,
			open: function () {
			}
		});
	},
	// ------------------------------------
	download: function (file) {
		window.open(file, 'Download');
	},
	validation: function () {
		return true;
	},

	// --------------------------------------------------------------------
	// Functionality to add/update/remove labels for filtering revisions
	historyLabels: {
		// ----------------------------------------------------------------
		// Returns the labels and mappings for the history revisions
		get: function() {
			var history_labels = {};
			history_labels.labels = utui.account.account_labels || {};
			history_labels.mapping = utui.profile.revision_mapping || {};
			return history_labels;
		},

		// ----------------------------------------------------------------
		setLabels: function(labels) {
			utui.account.account_labels = labels;
		},

		// ----------------------------------------------------------------
		setMapping: function(mapping) {
			utui.profile.revision_mapping = mapping;
		},

		// ----------------------------------------------------------------
		// Returns the label view for the revision
		getRevisionLabelView: function(id, label, revision) {
			return '<div class="label label_' + id + ' ' + utui.util.safeEscape(label.color) + '" title="' + utui.util.safeEscape(label.name) + '"><span class="label-color">' + utui.util.safeEscape(label.name) + '</span><span onclick="utui.publish.historyLabels.deleteFromRevision('+id+', '+revision+')" class="label-delete">x</span></div>';
		},

		// ----------------------------------------------------------------
		hasLabel: function(name, labels) {
			// Optional to pass in the labels to check for duplicates
			labels = labels || utui.publish.historyLabels.get().labels;
			for (var id in labels) {
				if (name.toLowerCase() === labels[id].name.toLowerCase()) {
					return true;
				}
			}
			return false;
		},

		// ----------------------------------------------------------------
		// Validates the label name
		isLabelNameInvalid: function(name, checkForDuplicates) {
			name = name.trim();

			// Make sure a value has been entered for the label
			if (name === '') {
				return localize.t('tiq.publish.history_labels.error.label_name_required');
			}

			// Limit to 40 characters
			if (name.length > 40) {
				return localize.t('tiq.publish.history_labels.error.label_name_40_chars');
			}

			// Can only contain [a-zA-Z0-9- ]
			if (!XRegExp('^[\\p{L}0-9- ]+$').test(name)) {
				return localize.t('tiq.publish.history_labels.error.label_name_only_contain');
			}

			// Make sure there are no duplicates
			if (checkForDuplicates) {
				if (utui.publish.historyLabels.hasLabel(name)) {
					return localize.t('tiq.publish.history_labels.error.label_name_exists');
				}
			}

			return false;
		},

		// ----------------------------------------------------------------
		// Gets the next highest unused label id
		getNextLabelId: function(labels) {
			// Default labels if not defined
			labels = labels || utui.publish.historyLabels.get().labels;

			var nextID = 1;

			// Get the next availabe id
			for (var id in labels) {
				if (Number(id) >= nextID) nextID = Number(id) + 1;
			}

			return String(nextID);
		},

		// ----------------------------------------------------------------
		// Adds the specified id to the revision upon success
		addToRevision: function(id, revision, callback) {
			utui.publish.historyLabels.request.updateMapping(true, id, revision, function(success) {
				if (success) {
					var $labels = $('.labels[data-revision="'+revision+'"]'),
						labels = utui.publish.historyLabels.get().labels;
					$labels.append(utui.publish.historyLabels.getRevisionLabelView(id, labels[id], revision));

					if (callback) {
						callback();
					}
				}
			});
		},

		// ----------------------------------------------------------------
		// Delete the specified id from the revision upon success
		deleteFromRevision: function(id, revision) {
			utui.publish.historyLabels.request.updateMapping(false, id, revision, function(success) {
				if (success) {
					var $labels = $('.labels[data-revision="'+revision+'"]');
					$labels.find('.label_'+id).remove();
					utui.publish.historyLabels.redrawHistory(revision);
				}
			});
		},

		// ----------------------------------------------------------------
		// This will append a color-picker to the specified container
		// The container must be this format <div class="color-picker"><i ...></i><span class="color">...</span></div>
		showColorPicker: function($container, callback) {
			var _$container = $container,
				_$el = _$container.find('.color-select'),
				absTopPosition = _$container.position().top,
				scrollTopPosition = $(document).scrollTop(),
				yPos = absTopPosition - scrollTopPosition,
				absLeftPosition = _$container.position().left,
				scrollLeftPosition = $(document).scrollLeft(),
				xPos = absLeftPosition - scrollLeftPosition;

			// Hide all color-select
			$('.color-select').hide();

			// Append the color-picker to the container if not already there
			if (!_$el[0]) {
				var v = '<div class="color-select">';
				v += '  <div class="color-select-color regal-rose" data-color="regal-rose"></div>';
				v += '  <div class="color-select-color melon-mambo" data-color="melon-mambo"></div>';
				v += '  <div class="color-select-color rich-razzelberry" data-color="rich-razzelberry"></div>';
				v += '  <div class="color-select-color pacific-point" data-color="pacific-point"></div>';
				v += '  <div class="color-select-color tempting-turquoise" data-color="tempting-turquoise"></div>';
				v += '  <div class="color-select-color old-olive" data-color="old-olive"></div>';
				v += '  <div class="color-select-color daffodil-delight" data-color="daffodil-delight"></div>';
				v += '  <div class="color-select-color pumpkin-pie" data-color="pumpkin-pie"></div>';
				v += '  <div class="color-select-color tangerine-tango" data-color="tangerine-tango"></div>';
				v += '  <div class="color-select-color real-red" data-color="real-red"></div>';
				v += '</div>';
				_$el = $(v);

				// Sets the color upon click and closes the picker
				_$el.find('.color-select-color').safeBind('click', function(e) {
					var $color = _$container.find('.color');
					$color.removeClass().addClass('color ' + $(this).attr('data-color'));
					$color.attr('data-color', $(this).attr('data-color'));
					_$container.find('.color-select').hide();
					if (callback) {
						callback($(this).attr('data-color'))
					}
				});

				// Hide if clicked outside
				$(document).safeBind('mouseup.colorSelect', function(e) {
					var $target = e.srcElement ? $(e.srcElement) : $(e.target);
					if (!$target.hasClass('color-select') || !$target.closest('.color-select')[0]) {
						$('.color-select').hide();
					}
				});

				_$container.append(_$el);
			}

			_$el.css({
				left: xPos,
				top: yPos
			}).show();
		},

		// ----------------------------------------------------------------
		// Redraws the history so changes can be seen - specify revision to expand it
		redrawHistory: function(revision) {
			// Redraw the history
			var row = $('.hist_eventRow').attr('data-row') || 0,
				scrollLeft = $('#publish_content').scrollLeft(),
				openedContainers = [];  // Keep track of every container that is currently opened so we can reopen them

			// Populate the openedContainers array with the IDs of the opened containers
			$('.hist_verEventDetails').filter(function() {
				if ($(this).css('display') === 'block') {
					openedContainers.push($(this).attr('id'));
					return true;
				}
				return false;
			});

			// Uncheck expand all details so revision is still in view
			$('#filter_displayAllDetails').prop('checked', false);

			utui.publish.drawHistory(Number(row), 10);

			if (revision) {
				// Loop over the previously opened containers and open them
				for (var i=0; i<openedContainers.length; i++) {
					$('#' + openedContainers[i]).show();
				}

				// Scrolls to the last x location so revision should still be in view
				$('#publish_content').scrollLeft(scrollLeft);
			}
		},

		// ----------------------------------------------------------------
		request: {
			// ------------------------------------------------------------
			// Updates the mapping info for the specified revision.
			// If NOT isAdd, then the id is deleted from the mapping
			updateMapping: function(isAdd, id, revision, callback) {
				utui.util.showSpinner();

				var mapping = $.extend(true, {}, utui.publish.historyLabels.get().mapping),
					ids = mapping[revision] || [],
					url = utui.service.addParamsToURL(utui.service.restapis.HISTORY_LABELS_MAPPING);

				if (isAdd) {
					ids.push(id);
					mapping[revision] = ids;

				} else {
					var index = $.inArray(String(id), ids);
					if (index !== -1) {
						ids.splice(index, 1);

						if (ids.length > 0) {
							mapping[revision] = ids;
						} else {
							delete mapping[revision];
						}
					}
				}

				utui.service.post(url, JSON.stringify(mapping), utui.service.options.JSON,
					function(data) {
						utui.publish.historyLabels.response.onUpdateMappingSuccess(data, revision, callback);
					},
					function(status, response) {
						utui.publish.historyLabels.response.onUpdateMappingError(status, response, callback);
					}
				);
			}
		},

		// ----------------------------------------------------------------
		response: {
			// ------------------------------------------------------------
			onUpdateMappingSuccess: function(data, revision, callback) {
				utui.util.hideSpinner();

				if (data) {
					utui.publish.historyLabels.setMapping(data);
				}

				if (callback) {
					callback(true);
				}
			},

			// ------------------------------------------------------------
			onUpdateMappingError: function(status, response, callback) {
				utui.util.hideSpinner();

				if (callback) {
					callback(false);
				}
			}
		},

		// ----------------------------------------------------------------
		// Dialog to add/remove labels to the specified revision
		editLabelsDialog: function() {
			// Private API
			var _namespace = 'edit_labels_dialog',
				_revision,
				_$container;

			// ------------------------------------------------------------
			function _render() {
				_$container.find('.menu_list_container').empty();
				_$container.find('.menu_list_container').html(_view());
				_bindUI();
				utui.ui.toggleMenu(_$container);
			}

			// ------------------------------------------------------------
			function _view() {
				var v = '',
					history_labels = utui.publish.historyLabels.get(),
					idPrefix = _namespace + '_label_',
					nextColor = utui.labels.getNextLabelColor(_.size(history_labels.labels));

				v += '<div class="revision-labels">';
				v += '  <div class="title">' + localize.t('tiq.publish.history_labels.version_labels') + '</div>';
				v += '  <div class="labels">';

				// Loop over all the labels and only show the ones that are not already added
				for (var id in history_labels.labels) {
					var label = history_labels.labels[id],
						ids = history_labels.mapping[_revision],
						hasLabel = false;

					if (ids) {
						if ($.inArray(String(id), ids) !== -1) {
							hasLabel = true;
						}
					}

					// Only display the label if this revision doesn't already have it
					if (!hasLabel) {
						v += '      <div title="' + utui.util.safeEscape(label.name) + '" class="label label_' + id + ' ' + utui.util.safeEscape(label.color) + '" data-id="'+id+'"><span class="label-color">' + utui.util.safeEscape(label.name) + '</span></div>';
					}
				}

				v += '  </div>';
				v += '  <div class="footer">';
				v += '      <div class="add-label-container">';
				v += '          <div class="color-picker">';
				v += '              <i class="icon-caret-down"></i>';
				v += '              <span class="color '+nextColor+'" data-color="'+nextColor+'"></span>';
				v += '          </div>';
				v += '          <div class="form-field"><input type="text" placeholder="Add New Label" maxlength="40" /><div class="addLabelButton">↩</div></div>';
				v += '      </div>';
				v += '  </div>';
				v += '</div>';

				return v;
			}

			// ------------------------------------------------------------
			function _bindUI() {
				_$container.find('.label').safeBind('click', _eventHandlers.onLabelClick);
				_$container.find('.color-picker > .icon-caret-down').safeBind('click', _eventHandlers.onColorPickerClick);
				_$container.find('.color-picker > .color').safeBind('click', _eventHandlers.onColorPickerClick);
				_$container.find(':text').safeBind('keypress', _eventHandlers.onKeypressEnter);
				_$container.find('.addLabelButton').safeBind('click', _eventHandlers.onBtnAddLabel);
			}

			// ------------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				// Adds the label to the parent container
				onLabelClick: function() {
					var $el = $(this),
						id = $el.attr('data-id');

					// Only remove upon success
					utui.publish.historyLabels.addToRevision(id, _revision, function() {
						$el.remove();
					});
				},

				// --------------------------------------------------------
				onColorPickerClick: function() {
					utui.publish.historyLabels.showColorPicker($(this).closest('.color-picker'));
				},

				// --------------------------------------------------------
				onKeypressEnter: function(e) {
					var keycode = (e.keyCode ? e.keyCode : e.which);

					if (Number(keycode) === 13) {
						_eventHandlers.onBtnAddLabel();
					}
				},

				// --------------------------------------------------------
				onBtnAddLabel: function() {
					var name = _$container.find(':text').val().trim(),
						color = _$container.find('.color').attr('data-color'),
						error = utui.publish.historyLabels.isLabelNameInvalid(name, true);

					if (error) {
						utui.util.showMsgDialog('<div style="width:300px;">'+error+'</div>', localize.t('tiq.publish.history_labels.error.add_label_error'));
					} else {
						_$container.find(':text').blur();

						// Add the label and mapping to this revision
						_request.addLabel({name:name, color:color});
					}
				}
			};

			// ------------------------------------------------------------
			var _request = {
				// --------------------------------------------------------
				// Adds the label to the account labels then adds the label id to the revision
				addLabel: function(label) {
					var id = utui.publish.historyLabels.getNextLabelId(),
						labels = $.extend(true, {}, utui.publish.historyLabels.get().labels);

					labels[id] = label;

					_request.updateLabels(labels, function(success) {
						if (success) {
							utui.publish.historyLabels.request.updateMapping(true, id, _revision, function(success){
								// Publish event upon success
								if (success) {
									utui.util.pubsub.publish(utui.constants.tagging.EVENT, {action: 'add_version_label', 'label_name': label.name});
								}

								utui.publish.historyLabels.redrawHistory(_revision);
							});
						}
					});
				},

				// --------------------------------------------------------
				updateLabels: function(labels, callback) {
					utui.util.showSpinner();

					var url = utui.service.addParamsToURL(utui.service.restapis.HISTORY_LABELS);

					utui.service.post(url, JSON.stringify(labels), utui.service.options.JSON,
						function(data) {
							_response.onUpdateLabelsSuccess(data, callback);
						},
						function(status, response) {
							_response.onUpdateLabelsError(status, response, callback);
						}
					);
				}
			};

			// ------------------------------------------------------------
			var _response = {
				// --------------------------------------------------------
				onUpdateLabelsSuccess: function(data, callback) {
					utui.util.hideSpinner();

					if (data) {
						utui.publish.historyLabels.setLabels(data);
					}

					if (callback) {
						callback(true);
					}
				},

				// --------------------------------------------------------
				onUpdateLabelsError: function(status, response, callback) {
					utui.util.hideSpinner();

					if (callback) {
						callback(false);
					}

					// Unauthorized
					if (response && response.status === 401) {
						utui.util.showPermissionErrorDialog();
					} else {
						utui.util.showMsgDialog('<div style="width:300px;">' + localize.t('tiq.publish.history_labels.error.unable_to_add') + '</div>', localize.t('tiq.publish.history_labels.error.add_label_error'));
					}
				}
			};

			// Public API
			var _public = {
				// --------------------------------------------------------
				show: function(revision) {
					_revision = revision;
					_$container = $('#hist_labelMenu_' + _revision);

					_render();
				}
			}

			return _public;
		}(),

		// ----------------------------------------------------------------
		// Dialog to add/update/remove labels for filtering revisions
		labelsManagerDialog: function() {
			// Private API
			var _namespace = 'history_labels_dialog',
				_$template = utui.ui.dialog.body(false, false),
				_labelsToUpdate = {},
				_labelIDsToDelete = [];

			// ------------------------------------------------------------
			// Returns true (can edit) if selected class is NOT applied
			function _isEditible($el) {
				return !$el.closest('.add-label-container').hasClass('selected');
			}

			// ------------------------------------------------------------
			// Returns true if there is a duplicate label name
			function _hasLabel(labelId, labelName) {
				var $containers = _$template.find('.dialog-content-body .add-label-container').not('.selected'),
					hasLabel = false;

				labelId = labelId || "0";

				$containers.each(function() {
					var $container = $(this),
						id = String($container.attr('data-id')) || "0",
						name = $container.find(':text').val().trim();

					if (labelId !== id && labelName === name) {
						hasLabel = true;
						return false;
					}
				});

				return hasLabel;
			}

			// ------------------------------------------------------------
			function _showValidationMessage(msg) {
				_$template.find('.validation-message').html(msg).show();
			}

			// ------------------------------------------------------------
			function _hideValidationMessage() {
				_$template.find('.validation-message').html('').hide();
			}

			// ------------------------------------------------------------
			// Returns all the label objects from the DOM
			function _getLabels() {
				var $containers = _$template.find('.dialog-content-body .add-label-container'),
					labels = {};

				// Loop over all the containers and construct each label object
				$containers.each(function() {
					var $container = $(this),
						id = String($container.attr('data-id')) || "0",
						name = $container.find(':text').val().trim(),
						color = $container.find('.color').attr('data-color');
					labels[id] = {name:name, color:color};
				});

				return labels;
			}

			// ------------------------------------------------------------
			var _render = {
				// --------------------------------------------------------
				ui: function() {
					_render.contentHeader();
					_render.contentBody();
					_render.contentFooter();
				},

				// --------------------------------------------------------
				contentHeader: function() {
					_$template.find('.dialog-content-header').html(_view.contentHeader());
				},

				// --------------------------------------------------------
				contentBody: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_bindUI.contentBody();
				},

				// --------------------------------------------------------
				contentFooter: function() {
					_$template.find('.dialog-content-footer').html(_view.contentFooter());
					_bindUI.contentFooter();
				}
			};

			// ------------------------------------------------------------
			var _view = {
				// --------------------------------------------------------
				contentHeader: function() {
					return localize.t('tiq.publish.history_labels.note_changes_and_deletions');
				},

				// --------------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div class="validation-message bg-danger"></div>';
					var labels = utui.publish.historyLabels.get().labels;

					for (var id in labels) {
						var label = labels[id];
						v += _view.getLabelBody(id, label);
					}

					return v;
				},

				// --------------------------------------------------------
				getLabelBody: function(id, label) {
					var v = '',
						attr = id ? 'data-id="' + id + '"' : '';

					v += '<div class="add-label-container" ' + attr + '>';
					v += '  <div class="color-picker">';
					v += '      <i class="icon-caret-down"></i><span class="color '+utui.util.safeEscape(label.color)+'" data-color="'+utui.util.safeEscape(label.color)+'"></span>';
					v += '  </div>';
					v += '  <div class="form-field">';
					v += '      <input type="text" maxlength="40" placeholder="' + localize.t('tiq.publish.history_labels.update_label') + '" style="width:355px;" value="'+utui.util.safeEscape(label.name)+'"> <span class="edit"></span>';
					v += '  </div>';
					v += '</div>';

					return v;
				},

				// --------------------------------------------------------
				contentFooter: function() {
					var v = '',
						length = _$template.find('.dialog-content-body').find('.add-label-container').length,
						nextColor = utui.labels.getNextLabelColor(length);

					v += '<div class="add-label-container">';
					v += '  <div class="color-picker">';
					v += '      <i class="icon-caret-down"></i><span class="color '+nextColor+'" data-color="'+nextColor+'"></span>';
					v += '  </div>';
					v += '  <div class="form-field">';
					v += '      <input type="text" maxlength="40" placeholder="' + localize.t('tiq.publish.history_labels.add_new_label') + '"> <span class="btn add">' + localize.t('tiq.publish.history_labels.add') + '</span>';
					v += '  </div>';
					v += '</div>';

					return v;
				}
			};

			// ------------------------------------------------------------
			var _bindUI = {
				// --------------------------------------------------------
				contentBody: function() {
					_$template.find('#'+_namespace+'_btnSave').safeBind('click', _eventHandlers.onBtnSaveClick);
					_$template.find('.color-picker > .icon-caret-down').safeBind('click', _eventHandlers.onColorPickerClick);
					_$template.find('.color-picker > .color').safeBind('click', _eventHandlers.onColorPickerClick);
					_$template.find(':text').safeBind('focus', _eventHandlers.onInputFocus);
					_$template.find('span.edit').safeBind('click', _eventHandlers.onBtnEditClick);
				},

				// --------------------------------------------------------
				contentFooter: function() {
					_$template.find('.color-picker > .icon-caret-down').safeBind('click', _eventHandlers.onColorPickerClick);
					_$template.find('.color-picker > .color').safeBind('click', _eventHandlers.onColorPickerClick);
					_$template.find('span.add').safeBind('click', _eventHandlers.onBtnAddClick);
				}
			};

			// ------------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onColorPickerClick: function() {
					if (_isEditible($(this))) {
						utui.publish.historyLabels.showColorPicker($(this).closest('.color-picker'));
					}
				},

				// --------------------------------------------------------
				onInputFocus: function() {
					// Prevent user from typing if this is marked for delete
					if (!_isEditible($(this))) {
						$(this).blur();
					}
				},

				// --------------------------------------------------------
				// Toggles delete by adding/removing selected class
				onBtnEditClick: function() {
					var $el = $(this),
						$container = $el.closest('.add-label-container');

					if ($container.hasClass('selected')) {
						$container.removeClass('selected');
					} else {
						$container.addClass('selected');
					}
				},

				// --------------------------------------------------------
				onBtnAddClick: function() {
					// Append the new label to the DOM
					var $footer = _$template.find('.dialog-content-footer'),
						id = utui.publish.historyLabels.getNextLabelId(_getLabels()),
						$txtField = $footer.find(':text'),
						name = utui.util.safeEscape($txtField.val().trim()),
						color = $footer.find('.color').attr('data-color');

					if (name.length > 0) {
						_$template.find('.dialog-content-body').append(_view.getLabelBody(id, {name:name, color:color}));
						_$template.find('.dialog-content-footer').html(_view.contentFooter());
						_bindUI.contentBody();
						_bindUI.contentFooter();
					}
				},

				// --------------------------------------------------------
				// Loops over all the fields and removes the one marked for delete and updates all the others
				onBtnSaveClick: function() {
					var $containers = _$template.find('.dialog-content-body .add-label-container'),
						hasError = false;

					// Clear out _labelsToUpdate and _labelIDsToDelete objects
					_labelsToUpdate = {};
					_labelIDsToDelete = [];

					// Remove error class
					_$template.find('.error').removeClass('error');
					_hideValidationMessage();

					$containers.each(function() {
						var $container = $(this),
							id = $container.attr('data-id') || "0",
							name = utui.util.safeUnescape($container.find(':text').val().trim()),
							color = $container.find('.color').attr('data-color'),
							action = $container.hasClass('selected') ? 'delete' : 'update';

						// Ignore selected as they are marked for delete
						if (action !== 'delete') {
							_labelsToUpdate[id] = {name:name, color:color};

							// Run validation
							var error = utui.publish.historyLabels.isLabelNameInvalid(name, false);

							// If there is an error or duplicate label name highlight the field
							if (error || _hasLabel(id, name)) {
								$container.addClass('error');
								hasError = true;
							}
						} else {
							_labelIDsToDelete.push(id);
						}
					});

					if (hasError) {
						_showValidationMessage(localize.t('tiq.publish.history_labels.error.label_name_40_chars_duplicates'));

					} else {
						_request.updateLabels();
					}
				},

				// --------------------------------------------------------
				onBtnCloseClick: function() {
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// ----------------------------------------------------------------
			var _request = {
				// ------------------------------------------------------------
				updateLabels: function() {
					utui.util.showSpinner();

					var url = utui.service.addParamsToURL(utui.service.restapis.HISTORY_LABELS);
					utui.service.post(url, JSON.stringify(_labelsToUpdate), utui.service.options.JSON, _response.onUpdateLabelsSuccess, _response.onUpdateLabelsError);
				},

				// ------------------------------------------------------------
				// Updates the mapping by removing the ids of the labels that were deleted
				updateMapping: function(callback) {
					utui.util.showSpinner();

					if (_labelIDsToDelete.length > 0) {
						var mapping = $.extend(true, {}, utui.publish.historyLabels.get().mapping),
							url = utui.service.addParamsToURL(utui.service.restapis.HISTORY_LABELS_MAPPING);

						// Loop over the ids to delete and remove them from each of the mappings
						for (var i=0; i<_labelIDsToDelete.length; i++) {
							var id = _labelIDsToDelete[i];

							// Loop over all the revision mapping and remove the deleted label id from each mapping
							for (var revision in mapping) {
								var ids = mapping[revision],
									index = $.inArray(String(id), ids);

								// If found then remove it and if there are no more ids for that revision then delete the revision from the mapping
								if (index !== -1) {
									ids.splice(index,1);
									if (ids.length > 0) {
										mapping[revision] = ids;
									} else {
										delete mapping[revision];
									}
								}
							}
						}

						utui.service.post(url, JSON.stringify(mapping), utui.service.options.JSON,
							function (data) {
								_response.onUpdateMappingSuccess(data, callback);
							},
							function(status, response) {
								_response.onUpdateMappingError(status, response, callback);
							}
						);

					} else {
						utui.util.hideSpinner();
						callback();
					}
				}
			};

			// ----------------------------------------------------------------
			var _response = {
				// ------------------------------------------------------------
				onUpdateLabelsSuccess: function(data) {
					utui.util.hideSpinner();

					// Update the account labels object
					if (data) {
						utui.publish.historyLabels.setLabels(data);
					}

					// Updates the mapping if any labels were deleted
					_request.updateMapping(function() {
						// Close this dialog and redraw history
						_eventHandlers.onBtnCloseClick();
						utui.publish.historyLabels.redrawHistory();
					});
				},

				// ------------------------------------------------------------
				onUpdateLabelsError: function(status, response) {
					utui.util.hideSpinner();

					if (response && response.status === 401) {
						utui.util.showPermissionErrorDialog();
						return;
					}
					utui.ui.dialog.message.showError(_namespace, localize.t('tiq.publish.history_labels.error.unable_to_save'));
				},

				// ------------------------------------------------------------
				onUpdateMappingSuccess: function(data, callback) {
					utui.util.hideSpinner();

					if (data) {
						utui.publish.historyLabels.setMapping(data);
					}

					if (callback) {
						callback(true);
					}
				},

				// ------------------------------------------------------------
				onUpdateMappingError: function(status, response, callback) {
					utui.util.hideSpinner();

					if (callback) {
						callback(false);
					}
				}
			};

			// Public API
			// ------------------------------------------------------------
			var _public = {
				// --------------------------------------------------------
				show: function() {
					_render.ui();

					var buttons = [
						{
							text: localize.t('tiq.dialog.button.save'),
							click: _eventHandlers.onBtnSaveClick,
							id: _namespace + '_SaveBtn'
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onBtnCloseClick,
							id: _namespace + '_CloseBtn',
							style: 'float:left; margin-left: 5px'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.publish.history_labels.manage_version_labels'), buttons, _$template, {width:500, height:400, dialogClass:'hist-lbls-mgr'});
				}
			};

			return _public;
		}()
	},
	// --------------------------------------------------------
	showNotesSinceVersion: function (id) {
		// Private API
		var _namespace = 'notes_since_version';
		var _templateModal = utui.ui.template.modal();
		var _templateAccordion = utui.ui.template.accordion;

		var versionKeys = Object.keys(utui.data.publish_history), versionArr = [];
		var date, action, title, notes, operator;
		for (var i = 0; i < versionKeys.sort().length; i++) {
			if (parseInt(versionKeys[i]) >= parseInt(id)) {
				// Parsing versions
				var revisionArr = [];
				var revisionKeys = Object.keys(utui.data.publish_history[versionKeys[i]]);
				for (var j = 0; j < revisionKeys.sort().length; j++) {
					if (!isNaN(revisionKeys[j])) { // ignore publishState Key
						// Parsing revisions
						date = revisionKeys[j].substr(4,2) + '/' + revisionKeys[j].substr(6,2) + '/' + revisionKeys[j].substr(0,4) + ' ' + revisionKeys[j].substr(8,2) + ':' + revisionKeys[j].substr(10,2);
						action = utui.data.publish_history[versionKeys[i]][revisionKeys[j]].action;
						action = (action && action.indexOf('Publish') == 0) ? 'Publish' : 'Save';
						title = utui.data.publish_history[versionKeys[i]][revisionKeys[j]].title;
						notes = utui.data.publish_history[versionKeys[i]][revisionKeys[j]].notes;
						operator = utui.data.publish_history[versionKeys[i]][revisionKeys[j]].operator;
						revisionArr.push({ id: revisionKeys[j], action: action, title: title, date: date, notes: notes, operator: operator});
					}
				}
				versionArr.push(revisionArr);
			}
		}

		// ------------------------------------------------------------
		var _view = {
			// --------------------------------------------------------
			contentBody: function() {
				var versionObj;
				var revisionObj;
				var v = '';

				v += '<div id="' + _namespace + '_description" style="padding:20px;">';
				v += '	<div class="container-fluid">';

				// Grab the first revision (there's always 1 and indent the others if any)
				for (var versionId = 0; versionId < versionArr.length; versionId++) {
					versionObj = versionArr[versionId][0];
					v += '		<div class="row-fluid" style="margin: 8px 0;border: 1px solid rgba(0,0,0,0.2);box-sizing: border-box;padding: 8px;box-shadow: 0 2px 4px rgba(0,0,0,0.1); background-color:white;">';
					v += '			<div style="font-weight: bold; margin-bottom: 0.4em;"><span>' + localize.t('tiq.publish.notes_since_version.versionTitle') + '</span>: <span>' + versionObj.title + '</span></div>';
					v += '			<div><span>' + localize.t('tiq.publish.notes_since_version.date') + '</span>: <span>' + versionObj.date + '</span></div>';
					v += '			<div><span>' + localize.t('tiq.publish.notes_since_version.operator') + '</span>: <span>' + versionObj.operator + '</span></div>';
					v += '			<div><span>' + localize.t('tiq.publish.notes_since_version.action') + '</span>: <span>' + versionObj.action + '</span></div>';
					v += '			<div style="background:rgba(0,0,0,0.05); padding:6px;"><span>' + localize.t('tiq.publish.notes_since_version.notes') + '</span>: <span>' + versionObj.notes + '</span></div>';

					//
					if (versionArr[versionId].length > 1) {
						for (var revisionId = 1; revisionId < versionArr[versionId].length; revisionId++) {
							revisionObj = versionArr[versionId][revisionId];
							v += '		<div style="margin-left: 20px; border-left:3px solid rgba(0,0,0,0.2); padding:8px; margin-top: 8px;">';
							v += '			<div style="font-weight: bold; margin-bottom: 0.4em;"><span>' + localize.t('tiq.publish.notes_since_version.revisionTitle') + '</span>: <span>' + revisionObj.title + '</span></div>';
							v += '			<div><span>' + localize.t('tiq.publish.notes_since_version.date') + '</span>: <span>' + revisionObj.date + '</span></div>';
							v += '			<div><span>' + localize.t('tiq.publish.notes_since_version.operator') + '</span>: <span>' + revisionObj.operator + '</span></div>';
							v += '			<div><span>' + localize.t('tiq.publish.notes_since_version.action')  + '</span>: <span>' + revisionObj.action + '</span></div>';
							v += '			<div style="background:rgba(0,0,0,0.05); padding: 6px;"><span>' + localize.t('tiq.publish.notes_since_version.notes') + '</span>: <span>' + revisionObj.notes + '</span></div>';
							v += '		</div>';
						}
					}
					v += '		</div>';
				}

				v += '	</div>';
				v += '</div>';

				return v;
			}
		};


		// --------------------------------------------------------
		var _eventHandlers = {
			// --------------------------------------------------------
			onBtnCloseClick: function () {
				utui.ui.dialog.dispose(_namespace);
			}
		};

		// ------------------------------------------------------------
		var _render = {
			// --------------------------------------------------------
			ui: function() {
				$('#'+_namespace).find('.modal-body').html( _templateAccordion() );
				$('#'+_namespace).find('.main-body').append( _view.contentBody() );
				$('#'+_namespace).find('.main-container').css("background-color","#f1f1f1")

				utui.ui.dialog.adjustPanelHeights(_namespace);
			}
		};

		var buttons = [
				{
					text: localize.t('tiq.dialog.button.close'),
					click: function () {
						_eventHandlers.onBtnCloseClick();
					},
					id: _namespace + '_applyBtn'
				}
			],
			title = localize.t('tiq.publish.notes_since_version.title', {version: versionArr[0][0].title});

		// Show the modal dialog
		utui.ui.dialog.show(_namespace, title, buttons, _templateModal, {width: 500, height:550}, _eventHandlers.onBtnCloseClick);

		_render.ui();
	},
	// --------------------------------------------------------------------
	// Functionality to obtain data from versions
	revision: {
		// ----------------------------------------------------------------
		_haltFlag: 0,
		// ----------------------------------------------------------------
		// Gets the derived origin revision from the passed in version
		getOrigin: function(revision) {
			if(utui.data.publish_history[revision]) {
				var revEntry = utui.data.publish_history[revision][revision];
				if(revEntry) {
					return utui.data.publish_history[revision][revision].versionorigin;
				} else {
					// condition set for handling corrupted publish histories
					return false;
				}
			}
			return false;
		},
		// ----------------------------------------------------------------
		// Gets the collection of origin revisions for the specified version
		getOriginTrack: function(revision) {
			var versionOriginTrack = [];

			var getTrack = function(revision) {
				var versionOrigin = utui.publish.revision.getOrigin(revision);

				// if origin is of itself (same-minute save)
				if(+versionOrigin === +revision) {
					// utui.publish.revision._haltFlag = 1;

					// proceed to return versionOriginTrack in case there's sufficient data to determine ancestor
					return versionOriginTrack;
				}

				if(versionOrigin) {
					versionOriginTrack.push(+versionOrigin);
					return getTrack(versionOrigin);
				}
				else {
					return versionOriginTrack;
				}
			};

			var track = getTrack(revision);

			if(track) {
				return track.sort();
			} else {
				return false;
			}
		},
		// ----------------------------------------------------------------
		// @param {targetRevision} number - usually the current version you're on
		// @param {sourceRevision} number - incoming version
		getCommonAncestor: function(targetRevision, sourceRevision) {
			utui.publish.revision._haltFlag = 0;

			var targetOriginTrack = utui.publish.revision.getOriginTrack(targetRevision);
			var sourceOriginTrack = utui.publish.revision.getOriginTrack(sourceRevision);

			if(targetRevision === sourceRevision) return targetRevision;

			if(~targetOriginTrack.indexOf(sourceRevision)) {
				// source revision is a common ancestor
				return sourceRevision;
			}

			if(~sourceOriginTrack.indexOf(targetRevision)) {
				// target revision is a common ancestor
				return targetRevision;
			}

			// find the common ancestor
			for (var i = sourceOriginTrack.length - 1; i >= 0; i--) {
				if(~targetOriginTrack.indexOf(sourceOriginTrack[i])) {
					return sourceOriginTrack[i];
				}
			};

			return null;
		},
		// ----------------------------------------------------------------
		// @param {targetRevision} number - usually the current version you're on
		// @param {sourceRevision} number - incoming version
		isMergeable: function(targetRevision, sourceRevision) {
			return getCommonAncestor(targetRevision, sourceRevision) ? true : false;
		},
		// ----------------------------------------------------------------
		dialog: {
			// ----------------------------------------------------------------
			alertNotMergeable: function() {
				// ------------------------------------
				var _namespace = 'notMergeable_dialog',
					_$template = utui.ui.dialog.body(),
					_container;

				// ------------------------------------
				var _view = {
					mainContent: function() {
						var v = '';

							v += '<div id="'+_namespace+'_description">';
								v += '<div class="section-padded">';
									v += '<div class="dialog-icon-container">';
										v += '<i class="icon-warning-sign" style="color:orange;"></i>';
									v += '</div>';
									v += '<div>';
										v += '<h2>'+localize.t('tiq.publish.alert_not_mergable_dialog.title')+'</h2>';
										v += '<p>'+localize.t('tiq.publish.alert_not_mergable_dialog.context')+'</p>';
									v += '</div>';
								v += '</div>';
							v += '</div>';

						return v;
					}
				}

				// ------------------------------------
				var _eventHandlers = {
					onCloseBtnClick: function(e) {
						utui.ui.dialog.dispose(_namespace);
					}
				}

				// ------------------------------------
				// Adds the content to the template
				var _render = {
					// ------------------------------------
					content: function() {
						_$template.find('.dialog-content-body').html(_view.mainContent());
					}
				}

				// ------------------------------------
				var _public = {
					// ------------------------------------
					show: function(container) {
						_container = container;
						_render.content();

						// Dialog buttons
						var buttons = [
							{
								text: localize.t('tiq.publish.alert_not_mergable_dialog.buttons.close'),
								id: _namespace+'_closeBtn',
								click: _eventHandlers.onCloseBtnClick
							}
						];

						utui.ui.dialog.show(_namespace, localize.t('tiq.publish.alert_not_mergable_dialog.title'), buttons, _$template, { width: 480, height: 180 }, _eventHandlers.onCloseBtnClick);
					}
				}

				return _public;
			}()
		}
	}
};
utui.chart = function() {
	// Private API
	// ----------------------------------------------------------------
	var margin = { top: 50, right: 70, bottom: 60, left: 80 },
		FREE_TRIAL_MARGIN = { top: 30, right: 70, bottom: 60, left: 70 },
		FREE_TRIAL_DEFAULT_WIDTH = 600 - margin.left - margin.right,
		DEFAULT_WIDTH = 800 - margin.left - margin.right,
		height = 300 - margin.top - margin.bottom,
		parseDate = d3.time.format("%m-%d-%Y").parse,
		bisectDate = d3.bisector(function(d) { return d.date; }).left;

	// Public API
	var _public = {
		// ------------------------------------------------------------
		createCumulativeChart: function (jsonData, threshold, planCode, title, yLabel, xLabel) {
			if (jsonData) {
				jsonData = $.extend(true, [], jsonData);
				title = title || localize.t('tiq.chart.cumulative_visits');
				yLabel = yLabel || localize.t('tiq.chart.date');
				xLabel = xLabel || localize.t('tiq.chart.visits');
				var chartWidth = (jsonData.length * 20) - FREE_TRIAL_MARGIN.left - FREE_TRIAL_MARGIN.right;

				// Private API
				var $container = $('<div/>'),
					width = (chartWidth > FREE_TRIAL_DEFAULT_WIDTH) ? chartWidth : FREE_TRIAL_DEFAULT_WIDTH,
					total = 0,
					x = d3.time.scale()
						.range([0, width]),
					y = d3.scale.linear()
						.range([height, 0]),
					xAxis = d3.svg.axis()
						.scale(x)
						.orient("bottom")
						.ticks(d3.time.days, 1)
						.tickFormat(function(d) { return d3.time.format('%b %d')(new Date(d)); }),
					yAxis = d3.svg.axis()
						.scale(y)
						.orient("left"),
					area = d3.svg.area()
						.x(function(d) { return x(d.date); })
						.y0(height)
						.y1(function(d) { return y(d.visits); }),
					svg = d3.select($container[0]).append("svg")
						.attr("width", width + FREE_TRIAL_MARGIN.left + FREE_TRIAL_MARGIN.right)
						.attr("height", height + FREE_TRIAL_MARGIN.top + FREE_TRIAL_MARGIN.bottom)
						.append("g")
						.attr("transform", "translate(" + FREE_TRIAL_MARGIN.left + "," + FREE_TRIAL_MARGIN.top + ")");

				var now = new Date();
				var flatData = [];
				// Fill area of graph up to today's date since all dates thereafter will have zero visits
				for (var i = 0; i < jsonData.length; i++) {
					var d = jsonData[i];
					// format date MM-DD-YYYY
					d.date = parseDate(d.date);
					if (d.date < now) {
						total += parseInt(d.visits,10);
						d.visits = total;
						flatData[flatData.length] = d;
					}
				}
				var maxThreshold = (total < threshold+1000) ? threshold+1000 : total;

				x.domain(d3.extent(jsonData, function(d) { return d.date; }));
				y.domain([0, maxThreshold]).nice();

				// Draw rectangle around chart
				svg.append('rect')
					.attr('x', 0)
					.attr('y', 0)
					.attr('height', height)
					.attr('width', width)
					.style('stroke', '#000')
					.style('fill', 'none')
					.style('stroke-width', '1px')
					.style('shape-rendering', 'crispEdges');

				svg.append("path")
					.datum(flatData)
					.attr("class", "area")
					.attr("d", area)
					.attr("border",1);

				// Title
				svg.append("text")
					.attr("x", FREE_TRIAL_MARGIN.left)
					.attr("y", 0 - (FREE_TRIAL_MARGIN.top / 2))
					.attr("text-anchor", "middle")
					.text(title);

				// Total visits
				svg.append("text")
					.attr("x", width)
					.attr("y", 0 - (FREE_TRIAL_MARGIN.top / 2))
					.attr("text-anchor", "end")
					.text(localize.t('tiq.chart.num_total_visits', {num:utui.util.numberWithCommas(total)}));

				// Y axis label
				svg.append("text")
					.attr("x", (width / 2))
					.attr("y", height + 45)
					.attr("text-anchor", "middle")
					.attr("dy", "1em")
					.text(yLabel);

				// Add the X Axis
				svg.append("g")
					.attr("class", "x axis")
					.attr("transform", "translate(0," + height + ")")
					.call(xAxis)
					.selectAll("text")
					.style("text-anchor", "end")
					.attr("dx", "-.8em")
					.attr("dy", ".15em")
					.attr("transform", function(d) {
						return "rotate(-65)"
					});

				// X axis label
				svg.append("text")
					.attr("transform", "rotate(-90)")
					.attr("y", 0 - FREE_TRIAL_MARGIN.left)
					.attr("x",0 - (height / 2))
					.attr("dy", "1em")
					.style("text-anchor", "middle")
					.text(xLabel);

				// Add the Y Axis
				svg.append("g")
					.attr("class", "y axis")
					.call(yAxis);

				// Draw the Plan Limit overage line
				if (planCode !== 'platinum') {
					svg.append("line")
						.attr("x1", 0)
						.attr("y1", y(threshold)) // max_visits per plan
						.attr("x2", width)
						.attr("y2", y(threshold)) // max_visits per plan
						.style("stroke", "red")
						.style("stroke-dasharray", ("3, 3"))
						.style("stroke-width", 1);

					// Exceeded threshold limit of visits
					svg.append("text")
						.attr("x", width + FREE_TRIAL_MARGIN.right)
						.attr("y", y(threshold) + 5)
						.attr("class", "plan-code")
						.attr("text-anchor", "end")
						.text(planCode + ' Limit');
				}

				return $container;
			}
			return '';
		},

		// ------------------------------------------------------------
		createDailyUsageChart: function (jsonData, title, yLabel, xLabel) {
			if (jsonData) {
				jsonData = $.extend(true, [], jsonData);
				title = title || localize.t('tiq.chart.daily_visits');
				yLabel = yLabel || localize.t('tiq.chart.date');
				xLabel = xLabel || localize.t('tiq.chart.visits');

				var total = d3.sum(jsonData, function(d) { return +d.visits; }),
					chartWidth = (jsonData.length * 20) - FREE_TRIAL_MARGIN.left - FREE_TRIAL_MARGIN.right;

				// Private API
				var $container = $('<div/>'),
					width = (chartWidth > FREE_TRIAL_DEFAULT_WIDTH) ? chartWidth : FREE_TRIAL_DEFAULT_WIDTH,
					y = d3.scale.linear()
						.range([height, 0]),
					x = d3.scale.ordinal()
						.rangeRoundBands([0, width], .1),
					xAxis = d3.svg.axis()
						.scale(x)
						.orient("bottom")
						.ticks(d3.time.days, 1)
						.tickFormat(function(d) { return d3.time.format('%b %d')(new Date(d)); }),
					yAxis = d3.svg.axis()
						.scale(y)
						.orient("left"),
					svg = d3.select($container[0]).append("svg")
						.attr("width", width + FREE_TRIAL_MARGIN.left + FREE_TRIAL_MARGIN.right)
						.attr("height", height + FREE_TRIAL_MARGIN.top + FREE_TRIAL_MARGIN.bottom)
						.append("g")
						.attr("transform", "translate(" + FREE_TRIAL_MARGIN.left + "," + FREE_TRIAL_MARGIN.top + ")");

				x.domain(jsonData.map(function(d) { return parseDate(d.date); }));
				y.domain([0, d3.max(jsonData, function(d) { return parseInt(d.visits,10); })]).nice();

				// Draw rectangle around chart
				svg.append('rect')
					.attr('x', 0)
					.attr('y', 0)
					.attr('height', height)
					.attr('width', width)
					.style('stroke', '#000')
					.style('fill', 'none')
					.style('stroke-width', '1px')
					.style('shape-rendering', 'crispEdges');

				// Title
				svg.append("text")
					.attr("x", FREE_TRIAL_MARGIN.left)
					.attr("y", 0 - (FREE_TRIAL_MARGIN.top / 2))
					.attr("text-anchor", "middle")
					.text(title);

				// Total visits
				svg.append("text")
					.attr("x", width)
					.attr("y", 0 - (FREE_TRIAL_MARGIN.top / 2))
					.attr("text-anchor", "end")
					.text(localize.t('tiq.chart.num_total_visits', {num:utui.util.numberWithCommas(total)}));

				// Y axis label
				svg.append("text")
					.attr("x", (width / 2))
					.attr("y", height + 45)
					.attr("text-anchor", "middle")
					.attr("dy", "1em")
					.text(yLabel);


				// Add the X Axis
				svg.append("g")
					.attr("class", "x axis")
					.attr("transform", "translate(0," + height + ")")
					.call(xAxis)
					.selectAll("text")
					.style("text-anchor", "end")
					.attr("dx", "-.8em")
					.attr("dy", ".15em")
					.attr("transform", function(d) {
						return "rotate(-65)"
					});

				// X axis label
				svg.append("text")
					.attr("transform", "rotate(-90)")
					.attr("y", 0 - FREE_TRIAL_MARGIN.left)
					.attr("x",0 - (height / 2))
					.attr("dy", "1em")
					.style("text-anchor", "middle")
					.text(xLabel);


				// Add the Y Axis
				svg.append("g")
					.attr("class", "y axis")
					.call(yAxis);

				// Add toolitp text
				var txt = svg.append('text')
					.attr({ transform: 'translate(5,20)', fill:'black'})
					.text("");

				svg.selectAll(".bar")
					.data(jsonData)
					.enter().append("rect")
					.attr("class", "bar")
					.attr("x", function(d) { return x(d.date); })
					.attr("width", x.rangeBand())
					.attr("y", function(d) { return y(d.visits); })
					.attr("height", function(d) { return height - y(d.visits); })
					.on("mouseover", function() { tooltip.style("display", null); })
					.on("mouseout", function() { tooltip.style("display", "none"); })
					.on("mousemove", function(d) {
						var xPosition = d3.mouse(this)[0] - 15;
						var yPosition = d3.mouse(this)[1] - 25;
						tooltip.attr("transform", "translate(" + xPosition + "," + yPosition + ")");
						tooltip.select("text").text(utui.util.numberWithCommas(d.visits));
					});

				// Tooltip style, initial display is hidden
				var tooltip = svg.append("g")
					.attr("class", "tooltip")
					.style("display", "none");

				tooltip.append("rect")
					.attr("width", 40)
					.attr("height", 20)
					.attr("fill", "white")
					.attr("stroke", "#bbb")
					.attr("stroke-width", ".5px")
					.style("opacity", 0.9);

				tooltip.append("text")
					.attr("x", 15)
					.attr("dy", "1.2em")
					.style("text-anchor", "middle")
					.attr("font-size", "12px");
					//.attr("font-weight", "bold");

				return $container;
			}
			return '';
		},

		// ------------------------------------------------------------
		createCombinedAreaLineChart: function (lineJsonData, areaJsonData, chartId, yLabel, xLabel_1, xLabel_2, totalVisits, totalLabel, colors) {
			// ------------------------------------------------------------
			// LINE CHART
			if (lineJsonData) {
				lineJsonData = $.extend(true, [], lineJsonData);
				yLabel = yLabel || localize.t('tiq.chart.date');
				xLabel_2 = xLabel_2 || localize.t('tiq.chart.trended_visits');
				totalLabel = totalLabel || localize.t('tiq.chart.total_visits');

				// Private API
				var $container = $('<div/>'),
					width = DEFAULT_WIDTH,
					CHART_HEIGHT_MULTIPLIER = 0.6,
					CHART_PADDING = 15,
					COMPUTED_HEIGHT = height + (height * CHART_HEIGHT_MULTIPLIER) + CHART_PADDING,
					x_2 = d3.time.scale()
						.range([0, width]),
					y_2 = d3.scale.linear()
						.range([height, 0]),
					color_2 = d3.scale.category10(),
					yAxis_2 = d3.svg.axis()
						.scale(y_2)
						.orient("left"),
					xAxisGrid = d3.svg.axis()
						.scale(x_2)
						.ticks(d3.time.days, 1)
						.tickSize(-COMPUTED_HEIGHT, 0)
						.tickFormat("")
						.orient("top"),
					line = d3.svg.line()
//						.interpolate("basis")
						.defined(function (d) {
							return d.visits !== null;
						})
						.x(function (d) {
							return x_2(d.date);
						})
						.y(function (d) {
							return y_2(d.visits || 0);
						}),
					svg = d3.select($container[0]).append("svg")
						.attr("width", width + margin.left + margin.right)
						.attr("height", COMPUTED_HEIGHT + margin.top + margin.bottom)
						.append("g")
						.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

				color_2.domain(d3.keys(lineJsonData[0]).filter(function (key) {
					return key !== "date";
				}));

				lineJsonData.forEach(function (d) {
					d.date = parseDate(d.date);
				});

				var tags = color_2.domain().map(function (name) {
					return {
						name: name,
						values: lineJsonData.map(function (d) {
							return {name: name, date: d.date, visits: d[name]};
						})
					};
				});

				x_2.domain(d3.extent(lineJsonData, function (d) {
					return d.date;
				}));

				y_2.domain([
					0,
					d3.max(tags, function (c) {
						return d3.max(c.values, function (v) {
							return v.visits || 0;
						});
					})
				]).nice();

				svg.append("g")
					.attr("class", "y axis")
					.call(yAxis_2);

				// Draw vertical grid lines
				svg.append("g")
					.attr('class', 'grid')
					.call(xAxisGrid);

				// Draw rectangle around chart
				var rect = svg.append('rect')
					.attr('class', 'pane')
					.attr('x', 0)
					.attr('y', 0)
					.attr('height', COMPUTED_HEIGHT)
					.attr('width', width)
					.style('stroke', '#000')
					.style('fill', 'none')
					.style('stroke-width', '1px')
					.style('shape-rendering', 'crispEdges');

				// Draw line to separate two charts
				svg.append("line")
					.attr("x1", 0)
					.attr("y1", height)
					.attr("x2", width)
					.attr("y2", height)
					.style("stroke", "#000")
					.style("stroke-width", 1)
					.style('shape-rendering', 'crispEdges');

				// Legend: Label each plotted line
				var labelVar = 'date',
					varNames = d3.keys(lineJsonData[0]).filter(function (key) {
						return key !== labelVar;
					});
				var legend = svg.selectAll(".legend")
					.data(varNames.slice().reverse())
					.enter()
					.append("g")
					.attr("class", "legend")
					.attr("transform", function (d, i) {
						var xOff = i * 150,
							yOff = -30;
						return "translate(" + xOff + "," + yOff + ")"
					});
				legend.append("rect")
					.attr("width", 10)
					.attr("height", 10)
					.style("fill", function (d) {
						if (colors) {
							return colors[d].color_stop;
						} else {
							return color_2(d);
							/*return 'url(#grad_' + d.replace(/\s+/g, '') + ')';*/
						}
					})
//					.style("stroke", "grey")
					.attr("transform", function (d, i) {
						var xOff = i,
							yOff = 0;
						return "translate(" + xOff + "," + yOff + ")"
					});
				legend.append("text")
					.attr("dx", 15)
					.attr("dy", "0.8em")
					.style("text-anchor", "start")
					.style("fill", "#666")
					.text(function (d) {
						return d;
					});

				// Total visits
				var total = d3.sum(tags, function (c) {
					return d3.sum(c.values, function (v) {
						return v.visits || 0;
					});
				});
				svg.append("text")
					.attr("x", width)
					.attr("y", 0 - (margin.top / 2))
					.attr("text-anchor", "end")
					.text(utui.util.numberWithCommas(total) + ' ' + totalLabel);

				// X axis label
				svg.append("text")
					.attr("transform", "rotate(-90)")
					.attr("y", 0 - margin.left)
					.attr("x", 0 - (height / 2))
					.attr("dy", "1em")
					.style("text-anchor", "middle")
					.text(xLabel_2);

				// Draw SVG Path
				var tag_daily = svg.selectAll(".tag_daily")
					.data(tags)
					.enter().append("g")
					.attr("class", "tag_daily");

				// Draw the lines in unique colors
				var path = svg.selectAll(".tag_daily").append("path")
					.attr("class", "line")
					.attr("d", function (d) {
						return line(d.values);
					})
					.style("stroke", function (d) {
						if (colors) {
							return colors[d.name].color_stop;
						} else {
							return color_2(d.name);
						}
					});

				// Animate points on the line
				if (lineJsonData.length <= 30) {
					// Draw points on line
					var points = tag_daily.selectAll(".point")
						.data(function (d) {
							return d.values;
						})
						.enter().append("circle");

					// Do Transition of Points
					points.transition()
						.delay(function (d, i) {
							return i * 50;
						})
						.duration(2000)
						.attr("class", "point")
						.attr("cx", function (d) {
							return x_2(d.date);
						})
						.attr("cy", function (d) {
							return y_2(d.visits);
						})
						.attr("r", function (d) {
							return d.visits !== null ? 5 : 0;
						})
						.style("fill", function (d) {
							if (colors) {
								return colors[d.name].color_stop;
							} else {
								return color_2(d.name);
							}
						})
						.style("stroke", "white")
						.style("stroke-width", "2px");
				}

				// Do Transition of Path(s)
				path.each(function (d, i) {
					var $path = this,
						totalLength = 0;

					if ($path.hasAttribute("d")) {
						totalLength = $path.getTotalLength();
					}

					d3.select($path).attr("stroke-dasharray", totalLength + "," + totalLength)
						.attr("stroke-dashoffset", totalLength)
						.transition()
						.duration(2000)
						.ease("linear-in-out")
						.attr("stroke-dashoffset", 0);
				});

				// ------------------------------------------------------------
				// AREA CHART
				if (areaJsonData) {
					areaJsonData = $.extend(true, [], areaJsonData);
					yLabel = yLabel || localize.t('tiq.chart.date');
					xLabel_1 = xLabel_1 || localize.t('tiq.chart.cumulative_visits');

					// Format number of ticks
					var num_data_points = areaJsonData.length,
						ticks_interval = d3.time.days;
					if (num_data_points >= 30 && num_data_points < 180) {
						ticks_interval = d3.time.weeks;
					} else if (num_data_points >= 180 && num_data_points < 10950) {
						ticks_interval = d3.time.months;
					} else if (num_data_points >= 10950) {
						ticks_interval = d3.time.years;
					}

					var x_1 = d3.time.scale()
							.range([0, width]),
						y_1 = d3.scale.linear()
							.range([(height * CHART_HEIGHT_MULTIPLIER), 0]),
						color = d3.scale.category10(),
						xAxis_1 = d3.svg.axis()
							.scale(x_1)
							.orient("bottom")
							.ticks(ticks_interval , 1)
							.tickFormat(function (d) {
								return d3.time.format('%b %d')(new Date(d));
							}),
						yAxis_1 = d3.svg.axis()
							.scale(y_1)
							.orient("left")
							.ticks(6), // suggest fewer ticks
						area = d3.svg.area()
							.x(function (d) {
								return x_1(d.date);
							})
							.y0(function (d) {
								return y_1(d.y0);
							})
							.y1(function (d) {
								return y_1(d.y0 + d.y);
							}),
						stack = d3.layout.stack()
							.values(function (d) {
								return d.values;
							});


					color.domain(d3.keys(areaJsonData[0]).filter(function (key) {
						return key !== "date";
					}));

					areaJsonData.forEach(function (d) {
						d.date = parseDate(d.date);
					});

					var tags = stack(color.domain().map(function (name) {
						return {
							name: name,
							values: areaJsonData.map(function (d) {
								return {date: d.date, y: d[name]};
							})
						};
					}));

					x_1.domain(d3.extent(areaJsonData, function (d) {
						return d.date;
					}));
					y_1.domain([0, totalVisits]).nice();

					var labelVar = 'date',
						varNames = d3.keys(areaJsonData[0]).filter(function (key) {
							return key !== labelVar;
						});

					// Append linear gradient defs and FOCUS indicator(s)
					for (var i = 0; i < varNames.length; i++) {
						var colorKey = varNames[i],
							gradient = svg.append("linearGradient")
								.attr("id", "grad_" + colorKey.replace(/\s+/g, '')),
							focus = svg.append("g")
							.attr("class", "focus")
							.attr("id", "focus_" + colorKey.replace(/\s+/g, ''))
							.style("stroke-width","3")
							.style("display", "none");

						focus.append("circle")
							.attr("r", 6);

						gradient.attr("gradientUnits", "userSpaceOnUse")
							.attr('x1', '0%').attr('y1', '0%').attr('x2', '0%').attr('y2', '100%')
							.append("stop")
							.attr("offset", "0%")
							.attr("stop-color", function () {
								if (colors) {
									return colors[colorKey].color_start;
								} else {
									return color(colorKey);
								}
							})
							.attr("stop-opacity", 0.9);
						gradient.append("stop")
							.attr("offset", "100%")
							.attr("stop-color", function () {
								if (colors) {
									return colors[colorKey].color_stop;
								} else {
									return "#fff";
								}
							})
							.attr("stop-opacity", 0);
					}

					// Y axis label
					svg.append("text")
						.attr("x", (width / 2))
						.attr("y", COMPUTED_HEIGHT + 45)
						.attr("text-anchor", "middle")
						.attr("dy", "1em")
						.text(yLabel);

					// Draw SVG Path
					var tag = svg.selectAll(".tag")
						.data(tags)
						.enter().append("g")
						.attr("class", "tag")
						.attr("transform", "translate(0," + (height + CHART_PADDING) + ")"); // add padding so y axis labels don't overlap

					// Fill the areas with unique colors
					tag.append("path")
						.attr("class", "area")
						.attr("d", function (d) {
							return area(d.values);
						})
						.style("fill", function (d) {
							return 'url(#grad_' + d.name.replace(/\s+/g, '') + ')';
						})
						.style("stroke", function (d) { // color border around area
							if (colors) {
								return colors[d.name].color_stop;
							} else {
								return "#000";
							}
						})
						.style("stroke-width","2");

					// Add the X Axis
					svg.append("g")
						.attr("class", "x axis")
						.attr("transform", "translate(0," + (COMPUTED_HEIGHT) + ")")
						.call(xAxis_1)
						.selectAll("text")
						.style("text-anchor", "end")
						.attr("dx", "-.8em")
						.attr("dy", ".15em")
						.attr("transform", function (d) {
							return "rotate(-65)"
						});

					// X axis label
					svg.append("text")
						.attr("transform", "rotate(-90)")
						.attr("y", 0 - margin.left)
						.attr("x", 0 - (height + CHART_PADDING + margin.top))
						.attr("dy", "1em")
						.style("text-anchor", "middle")
						.text(xLabel_1);

					// Add the Y Axis
					svg.append("g")
						.attr("class", "y axis")
						.attr("transform", "translate(" + 0 + "," + (height + CHART_PADDING) + ")") // add padding so y axis labels don't overlap
						.call(yAxis_1);

					// Append tooltip
					var tooltipdiv = d3.select("body")
						.append("div")
						.attr("id", chartId + "Tooltip")
						.attr("class", "chart_tooltip");

					function _getTipText(data, colors, date, title) {
						var v = '';

						if (date) {
							v += '<div class="header">' + utui.util.date.getOrdinalDateFromDateString(date) + '</div>';
						}
						v += '<div class="title"><strong>' + title + '</strong>';

						for (var key in data) {
							if (key !== 'date') {
								var textColor = '#000';
								if (colors) {
									textColor = colors[key].color_stop;
								}
								v += '<p><span class="square" style="background-color:' + textColor + '"></span> <span style="color:' + textColor + '">' + key + '</span> <span class="alignright">' + utui.util.numberWithCommas(+data[key]) + '</span></p>';
							}
						}
						v += '</div>';

						return v;
					}

					function _updateFocusLocation(data) {
						for (var key in data) {
							if (key !== 'date') {
								var focus = svg.select('#focus_' + key.replace(/\s+/g, ''));
								focus.attr("transform", "translate(" + x_2(data.date) + "," + y_2(data[key]) + ")")
									.style("display", "block");
							}
						}
					}

					function _onMouseMove() {
						// Using the x scale, in this case a d3 time scale
						// use the .invert() function to interpolate a date along the scale
						// given the x-coordinates of the mouse.
						// Using the interpolated date, find an index in the sorted data
						// this would be the index suitable for insertion
						// Cumulative Area Tooltip Info
						var x0 = x_1.invert(d3.mouse(this)[0]),
							i = bisectDate(areaJsonData, x0, 1),
							d0 = areaJsonData[i - 1],
							d1 = areaJsonData[i],
							d = null;

						if (d0 && d1) {
							d = x0 - d0.date > d1.date - x0 ? d1 : d0;
						} else {
							return;
						}

						// Trending Line Tooltip Info
						var x0_2 = x_2.invert(d3.mouse(this)[0]),
							i_2 = bisectDate(lineJsonData, x0_2, 1),
							d0_2 = lineJsonData[i_2 - 1],
							d1_2 = lineJsonData[i_2],
							d_2 = x0_2 - d0_2.date > d1_2.date - x0_2 ? d1_2 : d0_2;

						_updateFocusLocation(d_2);

						// Update label to display points of interest info
						var tipText = _getTipText(d_2, colors, d_2.date, localize.t('tiq.chart.trend'));
						tipText += '<div class="divider"></div>';
						tipText += _getTipText(d, colors, '', localize.t('tiq.chart.cumulative'));

						tooltipdiv.html(tipText);

						// Show tooltip hover position
						tooltipdiv.style("visibility", "visible")
							.style("opacity", 1)
							.style("top", d3.event.pageY + "px")
							.style("left", d3.event.pageX + "px");
					}

					function _onMouseOut() {
						// Hide tooltip
						tooltipdiv.style("opacity", 0.5)
							.style("visibility", "hidden");

						svg.selectAll('.focus').style("display", "none");
					}

					// Attach mouse move listener to display cumulative visits per date
					tag.on("mousemove", _onMouseMove).on("mouseout", _onMouseOut);
					rect.on("mousemove", _onMouseMove).on("mouseout", _onMouseOut);
				}

				return $container;
			}
			return '';
		}
	};

	return _public;
}();

utui.reports = function() {
	// PRIVATE API
	var _selectedTab = '',
		TAB_AUDITS = 'audits',
		TAB_MANUAL = 'manual';

	// PUBLIC API
	var _public = {
		// ------------------------------------------------------------
		// Adds the event handlers to the left-nav menu and loads the data for both tags and audits
		//  - Called when utui is loaded
		load: function(){
			utui.reports.audits.load();
			utui.reports.manual.load();
		},

		// ------------------------------------------------------------
		// Initializes the data for both tags and audits
		//  - Called every time a new profile is loaded
		init: function(){
			utui.reports.audits.init();
			utui.reports.manual.init();
		},

		// ------------------------------------------------------------
		// Initially displays the tag reports
		//  - Called every time the Reports tab is clicked
		show: function(){
			if (_selectedTab === '') {
				_public.showSiteAudits();
			}
		},

		// MATTDO combine isAuditsSelected and isManualSelected into one method?
		// ------------------------------------------------------------
		// Returns true if tab tags is not the selected tab
		isAuditsSelected: function(){
			return (_selectedTab !== TAB_MANUAL);
		},

		// ------------------------------------------------------------
		// Returns true if tab tags is not the selected tab
		isManualSelected: function(){
			return (_selectedTab !== TAB_AUDITS);
		},

		// ------------------------------------------------------------
		// Hide other tabs data and display the audits data
		showSiteAudits: function() {
			$('#reports_manual').hide();

			utui.reports.audits.show();
			_selectedTab = TAB_AUDITS;
		},

		// ------------------------------------------------------------
		// Hide other tabs data and display the manual audits data
		showSiteManual: function() {
			$('#reports_audits').hide();

			utui.reports.manual.show();
			_selectedTab = TAB_MANUAL;
		}
	};

	return _public;
}();

utui.reports.manual = function() {
	//"use strict";
	// Private API
	var _auditsID = 'reports_manual',
		_auditsContentID = 'reports_manual_content',
		_dialogNamespace = '_audit_manual_dialog',
		_currentReportId,	// References the reportId when the open report and or delete buttons are clicked
		_notificationTimeout,
		_hasBeenShown = false,	// Flag used to prevent loading data on app load
		_reports = [], // Cache the reports data locally
		_chromeExtUrl = gAppConfig.tealium_tools_package,
		_errorCodeMap = {
			3: localize.t('tiq.reports.error.3'),
			4: localize.t('tiq.reports.error.4'),
			7: localize.t('tiq.reports.error.7'),
			8: localize.t('tiq.reports.error.8'),
			10: localize.t('tiq.reports.error.10'),
			100: localize.t('tiq.reports.error.100'),
			401: localize.t('tiq.reports.error.401')
		};

	// ----------------------------------------------------------------
	function _showUI() {
		if (utui.reports.isManualSelected()) {
			$('#'+_auditsID).show();
		}
	}

	// ----------------------------------------------------------------
	// Resets UI and values back to default
	function _reset(){
		_reports = [];
		_currentReportId = null;

		// Hide the UI
		$('#'+_auditsID).hide();
		$('#reports_audits_marketing').hide();

		// Empty and destroy the accordion
		_clearAuditReports();
	}

	// ----------------------------------------------------------------
	// Clears the reports accoridion
	function _clearAuditReports() {
		$('#'+_auditsContentID).empty().accordion('destroy');
	}

	// ----------------------------------------------------------------
	// Binds all the events for each clickable element in the report summary
	function _bindReportsUIEvents() {
		var $context = $('#'+_auditsContentID);

		$context.find('.actionOpen').safeBind('click', _eventHandlers.onOpenReportClick);
		$context.find('.actionDelete').safeBind('click', _eventHandlers.onDeleteReportClick);
	}

	// ----------------------------------------------------------------
	// Populates the accordian with the selected audit reports
	function _showAuditReports(reportsArr) {
		// Removes the data from the accordion
		_clearAuditReports();

		if (reportsArr.length > 0) {
			$('.noSCReportsToShow').hide();
		} else {
			$('.noSCReportsToShow').show();
			return;
		}

		// Reference the accordion
		var $context = $('#'+_auditsContentID);

		// Create the accordion
		for (var i=0; i<reportsArr.length; i++){
			// TODO(matt) - do we still need _canReportsBeShown? or is it specific to audits?
			// If still processing....
			if (reportsArr[i].sitemaps_to_process > 0 && !_canReportBeShown(reportsArr[i])) {
				continue;
			}
			var id = _view.accordionNamespace + '_' + utui.util.getContainerId() + '_accordion',
				$item = $(_view.accordionItem(id, reportsArr[i]));

			$item.data('reportId', reportsArr[i]._id);
			$context.append($item);
		}

		$context.accordion({ header: 'h3', active: false, autoHeight: false, animated: true, clearStyle: true, collapsible: true });

		// Hack to make link clickable within accordions
		$('.contentAreaTable', $context).find('a').safeBind('click', function(e){e.stopPropagation()});
		_bindReportsUIEvents();
	}

	// ----------------------------------------------------------------
	function _getErrorFromResponse(response, defaultMessage) {
		// Unauthorized
		if (response.status === 401) {
			return _errorCodeMap[401];
		}

		try {
			var error = utui.util.safeParseJSON(response.responseText),
				msg = _errorCodeMap[error.code] || defaultMessage;
			return msg;

		} catch (e) {
			return defaultMessage;
		}
	}

	// ----------------------------------------------------------------
	// Show the maarketing screen since the user has no permission
	function _onInvalidPermissions() {
		$('#reports_audits_marketing').show();
		$('#'+_auditsID).hide();
	}

	// ----------------------------------------------------------------
	// Show the audits screen since the user has permissions
	function _onValidPermissions() {
		$('#reports_audits_marketing').hide();
		_showUI();
		if (_reports.length === 0) {
			_public.show();
		}
	}

	// ----------------------------------------------------------------
	// Show the marketing page if the response code is 403
	function _isAccessDenied(response) {
		if (response.status === 403) {
			_dialogs.dispose('', true);
			_onInvalidPermissions();
			return true;
		}
		return false;
	}

	// TODO(matt) - uses _isReportsComplete which checks sitemaps...need this sort of thing?
	// ------------------------------------------------------------
	// Returns true if the calculated percent is >= 50
	function _canReportBeShown(report) {
		var percent = parseInt(report.url_scanned_percentage) || 0;
		return !report.hasOwnProperty('is_empty') && (percent >= 0 || _isReportComplete(report));
	}

	// TODO(matt) - need this?
	// ------------------------------------------------------------
	// Returns true if sitemaps_to_process is 0
	function _isReportComplete(report) {
		return parseInt(report.sitemaps_to_process) === 0;
	}

	// TODO(matt) - uses _isReportsComplete which checks sitemaps...need this sort of thing?
	// ------------------------------------------------------------
	// Returns the report status to be shown in the UI
	function _getReportStatus(report) {
		var percent = parseInt(report.url_scanned_percentage) || 0;

		// Is complete if no more sitemaps to proccess
		if (_isReportComplete(report)) {
			return localize.t('tiq.reports.finished');
		} else {
			if (percent === 0) {
				return localize.t('tiq.reports.queued');
			} else {
				return localize.t('tiq.reports.percent_complete', {percent:percent});
			}
		}
	}

	// ------------------------------------------------------------
	// Convenience method so we don't have to add the account and profile in every method
	function _addParamsToURL(url, list) {
		url = url.replace('$$acount$$', utui.login.account);
		url = url.replace('$$profile$$', utui.login.profile);

		if (list && !$.isEmptyObject(list)) {
			for (var key in list) {
				url = url.replace('$$' + key + '$$', list[key]);
			}
		}

		return url;
	}

	// ----------------------------------------------------------------
	// This contains the show/hide functionality for the notification div
	var _notification = {
		// ------------------------------------------------------------
		show: function(msg) {
			var $notification = $('#' + _auditsID).find('.tertiaryContentNotification');
			$notification.html(msg);
			clearTimeout(_notificationTimeout);

			// Auto hide the notification after 10 seconds of showing it
			$notification.slideDown(function(){
				_notificationTimeout = setTimeout(function(){_notification.hide();}, 10000);
			});
		},

		// ------------------------------------------------------------
		hide: function() {
			$('#' + _auditsID).find('.tertiaryContentNotification').slideUp();
		}
	};

	// ----------------------------------------------------------------
	// Server API calls
	var _request = {

		// ------------------------------------------------------------
		// Gets the list of reports used to populate the accordian
		getReports: function() {
			_reports = []; // Clear the current report data

			var url = _addParamsToURL(utui.service.restapis.SCAN_COMPANION_REPORTS);

			_clearAuditReports();

			utui.service.get(url, {}, null, _response.onGetReportsSuccess, _response.onGetReportsError);
		},

		// ------------------------------------------------------------
		deleteReport: function(reportId) {
			var url = _addParamsToURL(utui.service.restapis.SCAN_COMPANION_REPORT, {'reportId':reportId});

			utui.service.delete(url, {}, null, _response.onDeleteReportSuccess, _response.onDeleteReportError);
		}
	};

	// ----------------------------------------------------------------
	// Server API response handlers
	var _response = {
		// ------------------------------------------------------------
		onGetReportsSuccess: function(data) {
			// user has permissions so show the reports
			_showUI();

			if ($.isArray(data) && data.length > 0) {
				_reports = data; // Cache reports data

				_showAuditReports(data);

			} else {
				$('.noSCReportsToShow').show();
			}
		},

		// ------------------------------------------------------------
		onGetReportsError: function(status, response) {
			if (_isAccessDenied(response)) {
				return;
			}

			$('.noSCReportsToShow').show();

			var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_retrieve_reports'));
			_notification.show(errorMsg);
		},

		// ------------------------------------------------------------
		onDeleteReportSuccess: function(data) {
			// Remove the report from the cached reports
			for (var i=0; i< _reports.length; i++) {
				if (_currentReportId === _reports[i]._id) {
					var index = i;
					break;
				}
			}
			if (index > -1) {
				_reports.splice(index, 1);
				_showAuditReports(_reports);
			}
		},

		// ------------------------------------------------------------
		onDeleteReportError: function(status, response) {
			if (_isAccessDenied(response)) {
				return;
			}

			var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_delete_report'));

			_notification.show(errorMsg);
		}
	};

	// ----------------------------------------------------------------
	// UI Event handlers
	var _eventHandlers = {

		// ----------------------------------------------------------------
		// Gets the full report details for the selected report
		onOpenReportClick: function(event) {

			utui.util.pubsub.publish(utui.constants.views.AUDIT_DETAILS_SC, {action:utui.constants.views.AUDIT_DETAILS_SC});

			_currentReportId = $(this).parents('.reports_container').data('reportId');

			// Open the audit report dialog
			_dialogs.auditReport().show(_currentReportId, true);
		},

		// ----------------------------------------------------------------
		// Deletes the report for the selected audit
		onDeleteReportClick: function(event) {
			_currentReportId = $(this).parents('.reports_container').data('reportId');
			_dialogs.confirmDeleteReport.show(_currentReportId);
		},

		// ----------------------------------------------------------------
		// Call the show method every time a profile has been loaded
		onProfileLoaded: function(event) {
			// Only call if audits has already been shown once
			if (_hasBeenShown) {
				_public.show();
			}
		},

		// ----------------------------------------------------------------
		// Hides/Shows the marketing page based on isActive value
		onAccountStatusChanged: function(isActive) {
			if (isActive) {
				_onValidPermissions();
			} else {
				_onInvalidPermissions();
			}
		}
	}

	// ----------------------------------------------------------------
	// HTML Content
	var _view = {
		accordionNamespace: 'manual_report_content',

		// ------------------------------------------------------------
		accordionItem: function(id, report) {
			var v = '',
				isReportComplete = _isReportComplete(report);

			v += '<div id="' + id + '" class="reports_container">';
			v += '  <h3>';
			v += '		<span class="ui-icon ui-icon-triangle-1-e"></span>';
			v += '		<a href="#" id="">';
			v += '			<div class="container_date">' + utui.util.date.getFormattedStringFromTimestamp(report.created) + '</div>';
			v += '			<div class="container_reportStatus_manual">' + _getReportStatus(report) + '</div>';
			v += '			<div class="container_title">' + report.title + '</div>';
			v += '			<div class="container_total_manual">' + report.url_total + '</div>';
			v += '			<div class="container_unmanaged_urls_manual">' + (isReportComplete ? report.unmanaged_urls_count : '') + '</div>';
			v += '			<div class="container_unmanaged_tags_manual">' + (isReportComplete ? report.unmanaged_tags_count : '') + '</div>';
			v += '		</a>';
			v += '	</h3>';
			v += '	<div>' + _view.accordionContent(report) + '</div>';
			v += '</div>';

			return v;
		},

		// ------------------------------------------------------------
		accordionContent: function(report) {
			var v = '',
				isReportComplete = _isReportComplete(report);

			v += '<div class="contentButtonBar"></div>';
			v += '<table class="contentAreaTable">';
			v += '	<tbody>';
			v += '	<tr>';
			v += '		<td class="contextContainer">';
			v += '			<div class="contextBox">';
			v += '				<div class="contextActionButtons">';
			v += '					<a href="#" class="actionOpen btn btn-small i-color-copy"><i class="icon-external-link"></i> ' + localize.t('tiq.reports.open_report') + '</a>';
			v += '					<a href="#" class="actionDelete btn btn-small i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.reports.delete') + '</a>';
			v += '				</div>';
			v += '			</div>';
			v += '		</td>';
			v += '		<td class="contentContainer siteAuditSummaryContent">';
			v += '			<div class="contentArea">';
			v += '				<table class="contentAreaTable siteAuditSummaryHeaderTable">';
			v += '					<tr>';
			v += '						<td class="contentTableLabel">' + localize.t('tiq.reports.date') + '</td>';
			v += '						<td class="contentTableValue">' + utui.util.date.getGMTimeStringFromTimestamp(report.created) + '</td>';
			v += '					</tr>';
			v += '					<tr>';
			v += '						<td class="contentTableLabel">' + localize.t('tiq.reports.recipients') + '</td>';
			v += '						<td class="contentTableValue">';

			for (var i=0; i<report.notify_emails.length; i++) {
				v += '							<a href="mailto:' + report.notify_emails[i] + '" class="siteAuditRecipient">' + report.notify_emails[i] + '</a>';
			}

			v += '						</td>';
			v += '					</tr>';
			v += '					<tr>';
			v += '						<td class="contentTableLabel">Results</td>';
			v += '						<td class="contentTableValue">';
			v += '							<div>' + localize.t('tiq.reports.num_pages_in_workflow', {count:report.url_total}) + '</div>';
											if (isReportComplete) {
			v += '							    <div>' + localize.t('tiq.reports.detected_num_pages_with_unmanaged', {count:report.unmanaged_urls_count}) + '</div>';
											}
			v += '						</td>';
			v += '					</tr>';
			v += '				</table>';
			v += '			</div>';

			if (isReportComplete && report.unmanaged_tags && report.unmanaged_tags.length > 0) {
				v += '		<div class="siteAuditSummaryUnmanagedTags">';
				v +=				_view.accordionUnmanagedTagsSummary(report.unmanaged_tags);
				v += '		</div>';
			}

			v += '		</td>';
			v += '	</tr>';
			v += '	</tbody>';
			v += '</table>';

			return v;
		},

		// ----------------------------------------------------
		accordionUnmanagedTagsSummary: function(tagIdArr) {
			var v = '';//

			v += '<div class="siteAuditSummaryUnmanagedTagsHeader">' + localize.t('tiq.reports.detected_num_unique_unmanaged', {count:tagIdArr.length}) + '</div>';

			for (var i = 0; i < tagIdArr.length; i++) {
				var tagId = tagIdArr[i];

				v +=	'<div class="siteAuditSummaryUnmanagedTagSection">';
				v +=	'	<div class="siteAuditSummaryUnmanagedTagLogo">';
				v +=	'		<img src="' + utui.config.manageList[tagId].logo + '?v=' + utui_version + '">';
				v +=	'	</div>';
				v +=	'	<div class="siteAuditSummaryUnmanagedTagTitle">';
				v +=			utui.config.manageList[tagId].title;
				v +=	'	</div>';
				v +=	'	<div class="siteAuditSummaryUnmanagedTagDescription">';
				v +=			utui.config.manageList[tagId].description;
				v +=	'	</div>';
				v +=	'</div>';
			}

			return v;
		},
	}

	// ----------------------------------------------------------------
	// This contains all the dialog functionality
	var _dialogs = {
		// ------------------------------------------------------------
		// Removes the dialog from the DOM
		dispose: function(namespace, removeAll) {
			if (removeAll) {
				$('[id$="' + _dialogNamespace + '"]').dialog().remove();
			} else {
				$('#' + namespace + _dialogNamespace).dialog().remove();
			}
		},

		// ------------------------------------------------------------
		// This is used as the shell for every dialog
		body: function(loft, content) {
			var v = '';
			loft = loft || '';
			content = content || '';

			v += '<table class="dialogTable">';
			v += '	<tr>';
			v += '		<td class="dialogTableBody">';
			v += '			<div class="dialogBody">';
			v += '				<table class="dialogBodyTable">';
			v += '					<tr>';
			v += '						<td colspan="100%" class="dialogBody_loft">';

			v += loft;

			v += '						</td>';
			v += '					</tr>';
			v += '					<tr>';
			v += '						<td class="dialogBody_content">';

			v += content;

			v += '						</td>';
			v += '					</tr>';
			v += '				</table>';
			v += '			</div>';
			v += '		</td>';
			v += '	</tr>';
			v += '</table>';

			return v;
		},

		// ------------------------------------------------------------
		// Returns the dialog with the content specified
		showDialog: function(namespace, title, buttons, content, options) {
			if ($('#' + namespace + _dialogNamespace).length === 0) {
				$('<div />', { id: namespace + _dialogNamespace }).prependTo('body');
				$('<div />', { id: namespace + '_dialogContent' }).appendTo('#' + namespace + _dialogNamespace);
			}

			$('#' + namespace + '_dialogContent').html(content);

			var settings = {
				title: title,
				height: 'auto',
				width: 'auto',
				modal: true,
				closeOnEscape: false,
				resizable: false,
				autoOpen: true,
				draggable: true,
				position: ['center' ,'center'],
				buttons: buttons,
				dialogClass: 'utui-dialog'
			}

			if (!$.isEmptyObject(options)) {
				$.extend(settings, options)
			}

			return $('#' + namespace + _dialogNamespace).dialog(settings).on('dialogclose', function(){_dialogs.dispose(namespace);});
		},

		// ------------------------------------------------------------
		confirmDeleteReport: function(){
			// Private API
			var _namespace = 'confirmDeleteReport';
			var _reportId;

			// --------------------------------------------------------
			function _view() {
				var body = '';

				body += '<div id="' + _namespace + '_description" class="dialogBody_alert">';
				body += '    <div class="dialog-icon-container">';
				body += '        <i class="icon-warning-sign" style="color:orange;"></i>';
				body += '    </div>';
				body += '    <div class="dialog-description">';
				body += '        <p><strong>' + localize.t('tiq.reports.are_you_sure_delete_report') + '</strong></p>';
				body += '        <p>' + localize.t('tiq.reports.action_cannot_be_undone') + '</p>';
				body += '    </div>';
				body += '</div>';

				return _dialogs.body('', body);
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// ----------------------------------------------------
				onDeleteClick: function() {
					_request.deleteReport(_reportId);
					_dialogs.dispose(_namespace);
				},

				// ----------------------------------------------------
				onCancelClick: function() {
					_dialogs.dispose(_namespace);
				}
			}

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(reportId) {
					_reportId = reportId;

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.reports.delete_report'),
							id: _namespace + '_dialog_deleteBtn',
							click: _eventHandlers.onDeleteClick
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							id: _namespace + '_dialog_cancelBtn',
							click: _eventHandlers.onCancelClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					// Show the dialog
					_dialogs.showDialog(_namespace, localize.t('tiq.reports.delete_report'), buttons, _view());
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		// Shows the report in a modal as well as a new window (NOT self-invoking)
		auditReport: function() {
			// Private API
			var _report,
				_reportId,
				_namespace = 'report_content',
				_containerMap = {},
				_numItemsToReturn = 50,
				_isModal = false,
				_context;

			// --------------------------------------------------------
			function _reset() {
				//_containerMap = {};
			}

			// --------------------------------------------------------
			// Finds the accordion item ID from the specified value contained in the container map
			function _getContainerIdFromValue(val) {
				for (var key in _containerMap) {
					if (val === _containerMap[key]) {
						return key;
					}
				}
				return null;
			}

			// --------------------------------------------------------
			// Finds the accordion and adds the content to it
			function _addContentToAccordion(bucket, data, hasMoreItems){
				var $accordion = $('#' + _getContainerIdFromValue(bucket), _context),
					content = '',
					page = Number($accordion.data('page')) || 0;

				for (var i = 0; i < data.length; i++) {

					content += _view.accordionItem(data[i]);

					content += '<tr><td colspan="2"><table class="siteAuditUnmanagedTagDetailsTable"><tbody>';

					var unmanagedTags = data[i].unmanaged_tags;
					for (var key in unmanagedTags) {

						var unmanagedTag = unmanagedTags[key];
						var containerId = utui.util.getContainerId(); // UniqueId needed to delegate click binding

						content += _view.accordionItemUnmanagedTagDetails(unmanagedTag, containerId);

						if (_isModal) {
							_bindUnmanagedTagAddButton($accordion, unmanagedTag, containerId);
						}
					}

					content += '</tbody></table></td></tr>';
				}

				$accordion.data('page', page+=1);
				$accordion.find('.siteAuditTable').append(content);

				if (hasMoreItems) {
					$accordion.find('.reportDetails_sectionBody_loadMore').show();
				} else {
					$accordion.find('.reportDetails_sectionBody_loadMore').hide();
				}

			}

			// --------------------------------------------------------
			// Binds all the accordion UI events
			function _bindAccordionUIEvents() {
				$('.reportDetails', _context).find('.reportDetails_sectionHeader').safeBind('click', _eventHandlers.onAccordionHeaderClick);
				$('.reportDetails', _context).find('.reportDetails_sectionBody_loadMore').safeBind('click', _eventHandlers.onLoadMoreClick);
			}

			function _bindUnmanagedTagAddButton($parentAccordion, tagObj, containerId) {
				$parentAccordion.on('click', '#add_unmanaged_tag_' + containerId, function(e) {
					utui.manage.addItemFromUnmanagedTagReport({tag_id: tagObj.tag_id}, tagObj.utui_config, containerId, $parentAccordion, _eventHandlers.onTagAddedSuccess, _eventHandlers.onTagAddedError);
				});
			}

			function _getHostnameFromUrl(urlString) {
				var $a = $('<a>');
				$a.attr('href', urlString);
				return $a[0].hostname;
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseClick: function(event) {
					_dialogs.dispose(_namespace);
				},

				// ----------------------------------------------------
				// Toggles the accordion and fetches results if visible and empty
				onAccordionHeaderClick: function(event) {
					var $accordion = $(this).parents('.reportDetails_section');
					$('.reportDetails_sectionBody', $(this).parent()).slideToggle(function(){

						// Only make a request if this accordion is opened and has no content
						if ($(this).is(':visible') && $(this).find('.siteAuditTable').is(':empty')) {
							_eventHandlers.onLoadMoreClick(event);
						}
					});

					$accordion.toggleClass('openAccordion');

					if ($accordion.hasClass('openAccordion')) {
						$accordion.find('i').removeClass('icon-caret-right').addClass('icon-caret-down');
					} else {
						$accordion.find('i').removeClass('icon-caret-down').addClass('icon-caret-right');
					}
				},

				// ----------------------------------------------------
				// Loads additional items for the accordion
				onLoadMoreClick: function(event) {
					var $accordion = $(event.target).parents('.reportDetails_section'),
						page = Number($accordion.data('page')) || 0;

					_request.getUnmanaged(page);

					return false;
				},

				onTagAddedSuccess: function($parentAccordion, tagContainerId, unmangedTagContainerId) {
					// Switch to 'added' button
					$('#add_unmanaged_tag_' + unmangedTagContainerId).hide();
					$('#added_unmanaged_tag_' + unmangedTagContainerId).show();

					// Show configure message/link
					$('#configure_unmanaged_tag_' + unmangedTagContainerId).show();

					// Bind configure link
					$parentAccordion.on('click', '#configure_unmanaged_tag_' + unmangedTagContainerId, function(e) {
						_dialogs.dispose(_namespace);
						$('#tabs_manage').trigger('click');
						utui.manage.editTagSettings(tagContainerId);
					});
				},

				onTagAddedError: function() {
					_notification.show(_errorCodeMap[10]);
				}
			}

			// --------------------------------------------------------
			var _notification = {
				// ----------------------------------------------------
				show: function(msg) {
					$('.siteAuditError', _context).html(msg).slideDown(function(){
						setTimeout(function(){
							_notification.hide();
						}, 10000);
					});
				},

				// ----------------------------------------------------
				hide: function() {
					$('.siteAuditError', _context).html('').slideUp();
				}
			}

			// --------------------------------------------------------
			var _request = {
				// ----------------------------------------------------
				// Gets the full report for the specified audit and report
				getReport: function() {
					var url = _addParamsToURL(utui.service.restapis.SCAN_COMPANION_REPORT, {'reportId':_reportId});

					utui.service.get(url, {}, null, _response.onGetReportSuccess, _response.onGetReportError);
				},

				// ----------------------------------------------------
				// Gets all the unmanaged URLs for the specified audit and report
				getUnmanaged: function(page) {
					var bucket = 'unmanaged',
						url = _addParamsToURL(utui.service.restapis.AUDITS_REPORT_UNMANAGED, {'reportId':_reportId});

					utui.service.get(url, {page:page, size:_numItemsToReturn}, null,
						function(data) {
							_response.onGetListSuccess(data, bucket);
						},
						function(status, response){
							_response.onGetListError(bucket, response);
						}
					);
				}
			}

			// --------------------------------------------------------
			var _response = {
				// ----------------------------------------------------
				onGetReportSuccess: function(data) {
					// Generate the accordions
					if (!$.isEmptyObject(data)) {
						_report = data;

						var emails = _report.notify_emails || [];

						// Set summary data
						$('#report_date', _context).html(utui.util.date.getGMTimeStringFromTimestamp(_report.updated));

						for (var i=0; i<emails.length; i++) {
							$('#report_notify_emails', _context).append(_view.reportRecipients(emails[i]));
						}

						$('#report_results', _context).html(_view.reportResults(_report));

						$('#report_status', _context).html(_getReportStatus(_report));

						$('#report_title', _context).html(_report.title);

						$('#report_notes', _context).html(_report.notes);

						// Set the accordions
						var accordions = '',
							id;

						// Add unmanaged tags accordion
						if (_report.unmanaged_urls_count > 0) {
							id = _namespace + '_' + utui.util.getContainerId() + '_section';
							accordions += _view.accordionSection(id, localize.t('tiq.reports.tags_not_managed_by'), _report.unmanaged_urls_count, 'unmanaged');
							_containerMap[id] = "unmanaged";
						}

						$('.reportDetails', _context).append(accordions);


						// Bind the UI events
						_bindAccordionUIEvents();

						// Trigger a click event to expand the first report section
						$('.reportDetails', _context).find('.reportDetails_sectionHeader:first').trigger('click');

					} else {
						_response.onGetReportError();
					}
				},

				// ----------------------------------------------------
				onGetReportError: function(status, response) {
					if (_isAccessDenied(response)) {
						return;
					}

					var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_load_report'));

					_notification.show(errorMsg);
				},

				// ----------------------------------------------------
				onGetListSuccess: function(data, bucket) {
					if (!$.isEmptyObject(data) && $.isArray(data.url_list)) {
						_addContentToAccordion(bucket, data.url_list, data.has_more);

					} else {
						_response.onGetListError(bucket);
					}
				},

				// ----------------------------------------------------
				onGetListError: function(bucket, response) {
					if (_isAccessDenied(response)) {
						return;
					}

					var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_load_urls'));

					_notification.show(errorMsg);

					// Need to auto close the accordion if there is no content
					var $accordion = $('#' + _getContainerIdFromValue(bucket), _context);

					// Close the accordion if there is no content
					if ($accordion.find('.siteAuditTable').is(':empty')) {
						$accordion.find('.reportDetails_sectionHeader').trigger('click');
					}
				}
			}

			// --------------------------------------------------------
			var _view = {
				reportBody: function() {
					var v = '';

					v += '<div id="site_audit_report">';
					v += '	<div class="siteAuditError"></div>';

					v += '	<div class="reportWrapper">';

					if (!_isModal) {
						v += '		<div class="reportHeader">';
						v += '			<img class="tealium_logo" src="img/utui/tealium_iq_logo_small.png" />';
						v += '			<div id="audit_title" class="reportHeader_title"></div>';
						v += '		</div>';
					}

					v += '		<div class="reportBody">';
					v += '			<div class="reportSummary">';
					v += '				<div class="contentArea">';
					v += '					<table class="contentAreaTable siteAuditSummaryHeaderTable">';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.date') + '</td>';
					v += '							<td id="report_date" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.status') + '</td>';
					v += '							<td id="report_status" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.recipients') + '</td>';
					v += '							<td id="report_notify_emails" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.results') + '</td>';
					v += '							<td id="report_results" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '					</table>';
					v += '				</div>';

					v += '				<div class="contentArea contentAreaWide">';
					v += '					<table class="contentAreaTable siteAuditSummaryHeaderTable">';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.title') + '</td>';
					v += '							<td id="report_title" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.notes') + '</td>';
					v += '							<td id="report_notes" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '					</table>';
					v += '				</div>';
					if (_isModal) {
						v += '			<div class="view_manual_report_full_screen">';
						v += '              <a href="#" onclick="common.utils.openWindow(\'report.html?rid=' + _currentReportId + '\'); return false;" class="btn btn-small">' + localize.t('tiq.reports.view_full_screen') + '</a>';
						v += '			</div>'
					}
					v += '			</div>';
					v += '			<div class="reportDetails"></div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				reportRecipients: function(email) {
					return '<a href="mailto:' + email + '" class="siteAuditRecipient">' + email + '</a>';
				},

				// ----------------------------------------------------
				reportResults: function(report) {
					var v = '',
						isReportComplete = _isReportComplete(report);

					v += '<div>' + localize.t('tiq.reports.num_pages_in_workflow', {count:report.url_total}) + '</div>';
					if (isReportComplete) {
						v += '<div>' + localize.t('tiq.reports.detected_num_pages_with_unmanaged', {count:report.unmanaged_urls_count}) + '</div>';
						v += '<div>' + localize.t('tiq.reports.detected_num_unique_unmanaged', {count:report.unmanaged_tags_count}) + '</div>';
					}

					return v;
				},

				// ----------------------------------------------------
				accordionSection: function(id, title, count, sectionType) {
					var isUnmanagedSection = (sectionType && sectionType === 'unmanaged') ? true : false;

					var v = '';

					v += '<div id="' + id + '" class="reportDetails_section">';
					v += '	<a name="" />';
					v += '	<div class="reportDetails_sectionHeader">';
					v += '  <i class="icon-caret-right"></i>';
					v += '		<span class="reportDetails_sectionHeader_title">' + title + '</span>';

					if (_isReportComplete(_report)) {
						v += '		<span class="reportDetails_sectionHeader_count">' + localize.t('tiq.reports.num_pages', {count:count}) + '</span>';

						if (!isUnmanagedSection) {
							v += '		<span class="reportDetails_sectionHeader_percent">' + utui.util.getPercentNum(count, _report.url_total, true) + '%</span>';
						}
					} else {
						v += '		<span class="reportDetails_sectionHeader_count">N/A</span>';
					}

					if (!isUnmanagedSection) {
						v += '		<span class="reportDetails_sectionHeader_lastAudit">' + localize.t('tiq.reports.last_scan_status') + '</span>';
					}

					v += '	</div>';
					v += '	<div class="reportDetails_sectionBody" style="display:none;">';
					v += '		<div class="reportDetails_sectionBody_content">';
					v += '			<table class="siteAuditTable siteAuditTableUnmanagedTags"></table>';
					v += '		</div>';
					v += '		<div class="reportDetails_sectionBody_loadMore">';
					v += '			<a href="#">';
					v += '				<span class="reportDetails_sectionBody_loadMore_text">' + localize.t('tiq.reports.load_more') + '</span>';
					v += '			</a>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				accordionItem: function(data) {
					var v = '',
						title = (!$.isEmptyObject(data.title)) ? data.title : '';

					v += '<tr>';
					v += '	<td class="siteAuditWebPageURL">';

					if (title !== '') {
						v += '      <span title="' + title + '">' + title + '</span><br />';
					}

					v += '	    <span title="' + data.url + '"><a href="' + data.url + '" target="_blank">' + data.url + '</a></span>';
					v += '  </td>';
					v += '</tr>';

					return v;
				},
				// ----------------------------------------------------
				accordionItemUnmanagedTagDetails: function(unmanagedTagObj, containerId, isModal) {
					var v = '';;

					v += '<tr>';
					v += '  <td class="siteAuditUnmanagedTagDetails">';
						v += '  <div class="unmanaged_tag_info">';

						// Logo and Title
						v += '      <div class="unmanaged_tag_info_logo">';
						v += '		<img src="' + utui.config.manageList[unmanagedTagObj.tag_id].logo + '?v=' + utui_version + '">';
						v += '      </div>';
						v += '      <div class="unmanaged_tag_info_name">';
						v += '          <span>' + unmanagedTagObj.tag_name + '</span><br/><span class="unmanaged_tag_info_name_url_count">' + localize.t('tiq.reports.num_urls', {count:unmanagedTagObj.urls.length}) + '</span>';
						v += '      </div>';

						// Tag parameters
						v += '      <div class="unmanaged_tag_params_table"><table><tbody>';
						for (var key in unmanagedTagObj.utui_config) {
							v += '      <tr class="unmanaged_tag_params_row">';
							v += '          <td class="unmanaged_tag_params_cell">' + key + '</td><td class="unmanaged_tag_params_cell unmanaged_tag_params_value">' + unmanagedTagObj.utui_config[key] + '</td>';
							v += '      </tr>';
						}
						v += '      </tbody></table></div>';

						if (_isModal) {
							// Add Tag button
							v += '      <div class="add_unmanaged_tag">';
							v += '      <a href="#" id="add_unmanaged_tag_' + containerId + '" class="addTagBtn" data-tagobj=\'{"id":"' + unmanagedTagObj.tag_id  + '", "category":"' + utui.manage.getTagCategoryById(unmanagedTagObj.tag_id) + '", "name": "' + utui.manage.getTagNameById(unmanagedTagObj.tag_id) + '"}\' ><span class="btn btn-small btn-success"><i class="icon-plus"></i> ' + localize.t('tiq.reports.add') + ' </span></a>';
							v += '      <span id="added_unmanaged_tag_' + containerId + '" style="display:none" class="btn btn-small disabled">' + localize.t('tiq.reports.added') + '</span>'
							v += '      </div>';

							// Configure Tag Notification
							v += '      <div id="configure_unmanaged_tag_' + containerId + '" class="configure_unmanaged_tag_notification" style="display: none">Tag has been added. <a href="#"><span>' + localize.t('tiq.reports.close_and_configure_tag') + '</span></a></div>'
						}

					v += '      </div>';
					v += '  </td>';
					v += '</tr>';

					return v;
				}

			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(reportId, isModal, context) {
					_reset();

					_reportId = reportId;
					_isModal = isModal; // Is this needed?
					_context = context;

					// Grab the report title
					var reportTitle = '';
					for (var i = 0; i < _reports.length; i++) {
						if (_reports[i]._id === _reportId) {
							reportTitle = _reports[i].title;
							break;
						}
					}

					if (isModal) {
						// Show the dialog
						_dialogs.showDialog(_namespace, reportTitle, [], _view.reportBody());
					} else {
						$('.siteAuditReport', _context).append(_view.reportBody());
					}

					// Load the audit report details
					_request.getReport();
				}
			}

			return _public;
		}
	};

	function _showHelpTab() {
		// ----------------------------------------------------
		var _namespace = 'reports';

		// ----------------------------------------------------
		var _articles = [
			{
				id: 0,
				title: localize.t('tiq.reports.help_scan_comp.0.title'),
				type: 'document',
				linkHref: common.community.scan_companion,
				isExternalLink: true
			}
		];

		var _context = {
			header: localize.t('tiq.reports.help_scan_comp.header'),
			body: localize.t('tiq.reports.help_scan_comp.body')
		};

		var _section = 'manual';

		utui.help.initHelpTab(_namespace, _articles, _context, _section);
	}

	// Public API
	var _public = {
		// ------------------------------------------------------------
		load: function() {
			// This does nothing, but one day...IT MIGHT!
		},

		// ------------------------------------------------------------
		init: function() {
			// Reload audits when a profile is loaded
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _eventHandlers.onProfileLoaded, this);

			// Reload if account is now active
			utui.util.pubsub.subscribe(utui.constants.reports.AUDITS_ACCOUNT_STATUS_CHANGED, _eventHandlers.onAccountStatusChanged, this);

			_showHelpTab();

			// Bind the button to install chrome extension
			$('#reports_manual_install_plugin').safeBind('click', function() {
				common.utils.openWindow(_chromeExtUrl);
			});
		},

		// ------------------------------------------------------------
		show: function() {
			_hasBeenShown = true;

			// Reset the global values
			_reset();

			// Get the list of audits
			_request.getReports();
		},

		// ------------------------------------------------------------
		// API so the stand-alone audit report page data can be accessed
		viewReport: function(reportId, context) {
			utui.util.pubsub.publish(utui.constants.views.AUDIT_DETAILS_SC, {action:utui.constants.views.AUDIT_DETAILS_SC});
			_dialogs.auditReport().show(reportId, false, context);
		}
	};

	return _public;
}();

utui.reports.audits = function() {
	//"use strict";
	// Private API
	var _auditsID = 'reports_audits',
		_auditsContentID = 'reports_audits_content',
		_auditSelectboxID = 'auditList',
		_dialogNamespace = '_audit_dialog',
		_audits = [],	    // List of all audits associated with this profile
		_currentAuditId,	// Contains the current audit to add
		_currentReportId,	// References the reportId when the open report and or delete buttons are clicked
		_ajaxOptions = {contentType : 'application/json; charset=UTF-8'},
		_notificationTimeout,
		_hasBeenShown = false,	// Flag used to prevent loading data on app load
		_utagStatusMap = {
			'Not Tagged': localize.t('tiq.reports.error.does_not_contain_utag'),
			'Page Not Found': localize.t('tiq.reports.error.url_not_reached')
		},
		_errorCodeMap = {
			//1: localize.t('tiq.reports.error.1'),
			//2: localize.t('tiq.reports.error.2'),
			3: localize.t('tiq.reports.error.3'),
			4: localize.t('tiq.reports.error.4'),
			5: localize.t('tiq.reports.error.5'),
			7: localize.t('tiq.reports.error.7'),
			8: localize.t('tiq.reports.error.8'),
			9: localize.t('tiq.reports.error.9'),
			10: localize.t('tiq.reports.error.10'),
			100: localize.t('tiq.reports.error.100'),
			401: localize.t('tiq.reports.error.401')
		};

	// ----------------------------------------------------------------
	function _showUI() {
		if (utui.reports.isAuditsSelected()) {
			$('#reports_audits').show();
		}
	}

	// ----------------------------------------------------------------
	// Resets UI and values back to default
	function _reset(){
		_audits = [];
		_currentAuditId = null;
		_currentReportId = null;

		// Hide the notification since it may be displaying a message
		_notification.hide();

		// Hide the UI
		$('#reports_audits').hide();
		$('#reports_audits_marketing').hide();

		// Clear the UI back to it's default state
		_clearAuditUI();
	}

	// ----------------------------------------------------------------
	// Clears the dropdown box and accordion
	function _clearAuditUI() {
		// Clear the select2 but add an empty option so the placeholder shows
		$('#'+_auditSelectboxID).empty().append('<option></option>').select2();

		// Empty and destroy the accordion
		_clearAuditReports();

		// Ensure this is hidden until we get a response from the get request
		$('#'+_auditsID).find('.noItemsAudit').hide();
	}

	// ----------------------------------------------------------------
	// Clears the reports accoridion
	function _clearAuditReports() {
		$('#'+_auditsContentID).empty().accordion('destroy');
	}

	// ----------------------------------------------------------------
	// Adds the event handlers for the global ui elements
	function _bindGlobalUIEvents() {
		$('#'+_auditSelectboxID).select2().safeBind('change', _eventHandlers.onAuditListChange);
		$('#btnAddAudit').safeBind('click', _eventHandlers.onAddAuditClick);
		$('#btnEditAudit').safeBind('click', _eventHandlers.onEditAuditClick);
		$('#btnRunAudit').safeBind('click', _eventHandlers.onRunAuditClick);
		$('#btnDeleteAudit').safeBind('click', _eventHandlers.onDeleteAuditClick);
	}

	// ----------------------------------------------------------------
	// Binds all the events for each clickable element in the report summary
	function _bindReportsUIEvents() {
		var $context = $('#'+_auditsContentID);

		$context.find('.actionOpen').safeBind('click', _eventHandlers.onOpenReportClick);
		$context.find('.actionDelete').safeBind('click', _eventHandlers.onDeleteReportClick);
	}

	// ----------------------------------------------------------------
	// Returns the selected audit from the selectbox
	function _getSelectedAudit() {
		return _findAuditByID($('#'+_auditSelectboxID).val());
	}

	// ----------------------------------------------------------------
	// Populates the audits dropdown list
	function _showAuditList(audit) {
		var $auditList = $('#'+_auditSelectboxID),
			selectedIndex = Math.max(1, $auditList.get(0).selectedIndex); // Convert -1|0 to 1

		$auditList.empty().append("<option></option>");

		// Populate the dropdown box and load the summary for the first audit
		if (_audits.length > 0) {
			// Sort this list
			_sortListByProp(_audits, "title");

			var len = _audits.length;

			for (var i=0; i<len; i++) {
				$auditList.append('<option value="' + _audits[i]._id + '">' + _audits[i].title + '</option>');
				if (audit && audit.title === _audits[i].title) {
					selectedIndex = i+1;
				}
			}

			// Set the selectedIndex and trigger the change event
			$auditList.get(0).selectedIndex = selectedIndex;
			$auditList.select2().trigger('change');
		}

		_showHideMenuOptions();
	}

	// ----------------------------------------------------------------
	// Shows / Hides the menu items as needed
	function _showHideMenuOptions() {
		if (_audits.length > 0) {
			$('#btnRunAudit').removeClass('disabled');
			$('#btnEditAudit').removeClass('disabled');
			$('#btnDeleteAudit').removeClass('disabled');
			$('#'+_auditsID).find('.noItemsAudit').hide();

		} else {
			$('#btnRunAudit').addClass('disabled');
			$('#btnEditAudit').addClass('disabled');
			$('#btnDeleteAudit').addClass('disabled');
			$('#'+_auditsID).find('.noItemsAudit').show();

			$('.noItemsReport').hide();
			$('.noReportsToShow').hide();
		}
	}

	// ----------------------------------------------------------------
	// Populates the accordian with the selected audit reports
	function _showAuditReports(audit) {
		// Removes the data from the accordion
		_clearAuditReports();

		if (!$.isEmptyObject(audit)) {
			// Reference the accordion
			var $context = $('#'+_auditsContentID);

			// Create the accordion
			for (var i=0; i<audit.reports.length; i++){
				// If still processing....
				if (audit.reports[i].sitemaps_to_process > 0 && !_canReportBeShown(audit.reports[i])) {
					continue;
				}
				var id = _view.accordionNamespace + '_' + utui.util.getContainerId() + '_accordion',
					$item = $(_view.accordionItem(id, audit, audit.reports[i]));

				$item.data('reportId', audit.reports[i]._id);
				$context.append($item);
			}

			$context.accordion({ header: 'h3', active: false, autoHeight: false, animated: true, clearStyle: true, collapsible: true });

			// Hack to make link clickable within accordions
			$('.contentAreaTable', $context).find('a').safeBind('click', function(e){e.stopPropagation()});
			_bindReportsUIEvents();
		}
	}

	// ----------------------------------------------------------------
	// This will show hide the noItemToShow or the notification if any reports are pending
	function _onAuditReportsUpdated() {
		var audit = _getSelectedAudit(),
			disableRunBtn = false;

		// Hide initially
		$('.noItemsReport').hide();
		$('.noReportsToShow').hide();

		if (!$.isEmptyObject(audit) && $.isArray(audit.reports) && audit.reports.length > 0) {
			var pendingCount = 0,
				runningCount = 0;
			for (var i=0; i<audit.reports.length; i++) {
				var map = audit.reports[i];
				// When sitemaps_to_process === 0 then the report has complete
				if (parseInt(map.sitemaps_to_process) > 0) {
					runningCount++;

					// Increment pending so we know to show the 'noReportsToShow' message
					if (!_canReportBeShown(map)) {
						pendingCount++;
					}
				}
			}
			if (runningCount > 0) {
				_notification.show(_errorCodeMap[100]);
				disableRunBtn = true;

				if (pendingCount === audit.reports.length) {
					$('.noReportsToShow').show();
				}
			}

		} else {
			$('.noItemsReport').show();
		}

		// Disable the run button if a report is being generated
		_enableDisableElement('btnRunAudit', disableRunBtn);
		_enableDisableElement('btnDeleteAudit', disableRunBtn);
	}

	// ----------------------------------------------------------------
	// Updates the audit if it already exists otherwise adds it to the _audits array
	function _updateAuditsWithAudit(audit) {
		var foundAudit = _findAuditByID(audit._id);

		// If the audit exists in the array then simply update it otherwise add it
		if (foundAudit) {
			$.extend(foundAudit, audit);
		} else {
			_audits.push(audit);
		}
	}

	// ----------------------------------------------------------------
	// Audit lookup
	function _findAuditByID(auditID) {
		for (var i=0; i<_audits.length; i++) {
			if (_audits[i]._id === auditID) {
				return _audits[i];
			}
		}
		return null;
	}

	// ----------------------------------------------------------------
	// Called when an audit was updated from the addEditAudit dialog
	function _doUpdateAudit(audit) {
		_updateAuditsWithAudit(audit);
		_showAuditList(audit);
	}

	// ----------------------------------------------------------------
	// Called when an audit was newly added from the addEditAudit dialog
	function _doAddAudit(audit) {
		_updateAuditsWithAudit(audit);
		_showAuditList(audit);
	}

	// ----------------------------------------------------------------
	// Sets the disabled attr on the specified element id
	function _enableDisableElement(id, disabled) {
		var $button = $('#' + id);

		if ($button.get(0)) {
			if (disabled) {
				$button.attr('disabled', 'disabled');
				$button.addClass('ui-state-disabled');
			} else {
				$button.attr('disabled', null);
				$button.removeClass('ui-state-disabled');
			}
		}
	}

	// ----------------------------------------------------------------
	// Returns the number of targets in the report.environments
	function _getTargetCount(environments) {
		var targetCount = 0;
		if (!$.isEmptyObject(environments)) {
			for (var account in environments) {
				for (var profile in environments[account]) {
					for (var target in environments[account][profile]){
						targetCount ++;
					}
				}
			}
		}

		return targetCount;
	}

	// ----------------------------------------------------------------
	function _getErrorFromResponse(response, defaultMessage) {
		// Unauthorized
		if (response.status === 401) {
			return _errorCodeMap[401];
		}

		try {
			var error = utui.util.safeParseJSON(response.responseText),
				msg = _errorCodeMap[error.code] || defaultMessage;
			return msg;

		} catch (e) {
			return defaultMessage;
		}
	}

	// ----------------------------------------------------------------
	// Show the maarketing screen since the user has no permission
	function _onInvalidPermissions() {
		$('#reports_audits_marketing').show("fast", function() {
			// Only Platinum accounts have an Account Manager
			if (!utui.account.state || utui.account.state === 'active') {
				$('.siteAuditMarketing_action').text(localize.t('tiq.reports.error.contact_manager_to_activate'));
			} else {
				$('.siteAuditMarketing_action').text(localize.t('tiq.reports.error.contact_sales_to_activate'));
			}
		});
		$('#reports_audits').hide();
	}

	// ----------------------------------------------------------------
	// Show the audits screen since the user has permissions
	function _onValidPermissions() {
		$('#reports_audits_marketing').hide();
		_showUI();
		if (_audits.length === 0) {
			_public.show();
		}
	}

	// ----------------------------------------------------------------
	// Show the marketing page if the response code is 403
	function _isAccessDenied(response) {
		if (response.status === 403) {
			_dialogs.dispose('', true);
			_onInvalidPermissions();
			return true;
		}
		return false;
	}

	// ------------------------------------------------------------
	// Returns true if the calculated percent is >= 50
	function _canReportBeShown(report) {
		var percent = parseInt(report.url_scanned_percentage) || 0;
		return !report.hasOwnProperty('is_empty') && (percent >= 0 || _isReportComplete(report));
	}

	// ------------------------------------------------------------
	// Returns true if sitemaps_to_process is 0
	function _isReportComplete(report) {
		return parseInt(report.sitemaps_to_process) === 0;
	}

	// ------------------------------------------------------------
	// Returns the report status to be shown in the UI
	function _getReportStatus(report) {
		var percent = parseInt(report.url_scanned_percentage) || 0;

		// Is complete if no more sitemaps to proccess
		if (_isReportComplete(report)) {
			return "Finished";
		} else {
			if (percent === 0) {
				return 'Queued';
			} else {
				return percent + '% Complete';
			}
		}
	}

	// ------------------------------------------------------------
	// Convenience method so we don't have to add the account and profile in every method
	function _addParamsToURL(url, list) {
		url = url.replace('$$acount$$', utui.login.account);
		url = url.replace('$$profile$$', utui.login.profile);

		if (list && !$.isEmptyObject(list)) {
			for (var key in list) {
				url = url.replace('$$' + key + '$$', list[key]);
			}
		}

		return url;
	}

	// ----------------------------------------------------------------
	// This will sort an array in acending order by the property
	function _sortListByProp(list, prop) {
		list.sort(function(a,b){
			return a[prop].toLowerCase() > b[prop].toLowerCase() ? 1 : ((a[prop].toLowerCase() < b[prop].toLowerCase()) ? -1 : 0);
		})
	}

	// ----------------------------------------------------------------
	// This contains the show/hide functionality for the preloader
	var _loader = {
		// ------------------------------------------------------------
		show: function() {},

		// ------------------------------------------------------------
		hide: function() {}
	}

	// ----------------------------------------------------------------
	// This contains the show/hide functionality for the notification div
	var _notification = {
		// ------------------------------------------------------------
		show: function(msg) {
			var $notification = $('#' + _auditsID).find('.tertiaryContentNotification');
			$notification.html(msg);
			clearTimeout(_notificationTimeout);

			// Auto hide the notification after 10 seconds of showing it
			$notification.slideDown(function(){
				_notificationTimeout = setTimeout(function(){_notification.hide();}, 10000);
			});
		},

		// ------------------------------------------------------------
		hide: function() {
			$('#' + _auditsID).find('.tertiaryContentNotification').slideUp();
		}
	}

	// ----------------------------------------------------------------
	// Server API calls
	var _request = {
		// ------------------------------------------------------------
		// Gets the list of audits needed to populate the dropdown box
		getAuditList: function() {
			var url = _addParamsToURL(utui.service.restapis.AUDITS_LIST);

			// Clear the previous audits
			_audits = [];

			utui.service.get(url, {}, null, _response.onGetAuditListSuccess, _response.onGetAuditListError);
		},

		// ------------------------------------------------------------
		deleteAudit: function(auditId) {
			var url = _addParamsToURL(utui.service.restapis.AUDITS, {'auditId':auditId});

			utui.service.delete(url, {}, null, _response.onDeleteAuditSuccess, _response.onDeleteAuditError);
		},

		// ------------------------------------------------------------
		// This will schedule the audit to generate a report
		runAudit: function(auditId) {
			var url = _addParamsToURL(utui.service.restapis.AUDITS_REPORTS, {'auditId':auditId});

			utui.service.post(url, {}, null, _response.onRunAuditSuccess, _response.onRunAuditError);
		},

		// ------------------------------------------------------------
		// Gets the list of reports for the specified audit used to populate the accordian
		getReports: function(auditId) {
			var url = _addParamsToURL(utui.service.restapis.AUDITS_REPORTS, {'auditId':auditId});

			_clearAuditReports();

			utui.service.get(url, {}, null, _response.onGetReportsSuccess, _response.onGetReportsError);
		},

		// ------------------------------------------------------------
		deleteReport: function(auditId, reportId) {
			var url = _addParamsToURL(utui.service.restapis.AUDITS_REPORT, {'auditId':auditId, 'reportId':reportId});

			utui.service.delete(url, {}, null, _response.onDeleteReportSuccess, _response.onDeleteReportError);
		}
	}

	// ----------------------------------------------------------------
	// Server API response handlers
	var _response = {
		// ------------------------------------------------------------
		onGetAuditListSuccess: function(data) {
			// user has permissions so show the audits
			_showUI();

			if ($.isArray(data) && data.length > 0) {
				_audits = data;

				// Populate the select box that displays all the audits for this profile
				_showAuditList();

			} else {
				_showHideMenuOptions();
			}
		},

		// ------------------------------------------------------------
		onGetAuditListError: function(status, response) {
			if (_isAccessDenied(response)) {
				return;
			}

			// user has permissions so show the audits
			_showUI();

			var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_retrieve_scans'));

			_notification.show(errorMsg);
			_showHideMenuOptions();
		},

		// ------------------------------------------------------------
		// Removes the audit from the array and UI
		onDeleteAuditSuccess: function(data) {
			// Get the selected audit to remove from the UI
			var audit = _getSelectedAudit();

			if (!$.isEmptyObject(audit)) {
				var auditId = (audit) ? audit._id : -1,
					index = -1;

				// Remove the audit from the list
				for (var i = 0; i<_audits.length; i++) {
					if (auditId === _audits[i]._id) {
						index = i;
						break;
					}
				}
				if (index > -1) {
					_audits.splice(index, 1);
				}
			}

				// clears the audit UI
				_clearAuditUI();

				// Updates the audit dropdown box
				_showAuditList();
		},

		// ------------------------------------------------------------
		onDeleteAuditError: function(status, response) {
			if (_isAccessDenied(response)) {
				return;
			}

			var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_delete_scan'));

			_notification.show(errorMsg);
		},

		// ------------------------------------------------------------
		onRunAuditSuccess: function(data) {
			var audit = _findAuditByID(_currentAuditId);

			audit.reports = audit.reports || [];
			audit.reports.push({sitemaps_to_process:1, is_empty:true});
			_onAuditReportsUpdated();
			_notification.show(localize.t('tiq.reports.scan_scheduled_to_run'));
			// Event Tracking
			utui.util.pubsub.publish(utui.constants.reports.AUDIT_RUN_SITE_SCAN, {action:utui.constants.reports.AUDIT_RUN_SITE_SCAN});
		},

		// ------------------------------------------------------------
		onRunAuditError: function(status, response) {
			if (_isAccessDenied(response)) {
				return;
			}

			var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_run_scan'));

			_notification.show(errorMsg);
			_enableDisableElement('btnRunAudit', false);
		},

		// ------------------------------------------------------------
		onGetReportsSuccess: function(data) {
			var audit = _findAuditByID(_currentAuditId);
			audit.reports = data;

			if ($.isArray(data) && data.length > 0) {
				_showAuditReports(audit);

			} else {
				// Show the .noItemsReport div
			}

			_onAuditReportsUpdated();
		},

		// ------------------------------------------------------------
		onGetReportsError: function(status, response) {
			if (_isAccessDenied(response)) {
				return;
			}

			var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_retrieve_reports'));

			_notification.show(errorMsg);
		},

		// ------------------------------------------------------------
		onDeleteReportSuccess: function(data) {
			// Remove the report from the list
			var audit = _findAuditByID(_currentAuditId),
				index = -1;
			for (var i=0; i<audit.reports.length; i++) {
				if (_currentReportId === audit.reports[i]._id) {
					index = i;
					break;
				}
			}
			if (index > -1) {
				audit.reports.splice(index, 1);
				_showAuditReports(audit);
				_onAuditReportsUpdated();
			}
		},

		// ------------------------------------------------------------
		onDeleteReportError: function(status, response) {
			if (_isAccessDenied(response)) {
				return;
			}

			var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_delete_report'));

			_notification.show(errorMsg);
		}
	}

	// ----------------------------------------------------------------
	// UI Event handlers
	var _eventHandlers = {
		// ------------------------------------------------------------
		// Gets the associated reports for the selected audit
		onAuditListChange: function(event) {
			var audit = _findAuditByID($(this).val());

			if (!audit) {
				return;
			}

			// Only get the list if this is a new audit that was selected
			if (_currentAuditId != audit._id) {
				_currentAuditId = audit._id;

				// Hide any notification that may be visible since we are switching audits
				_notification.hide();

				// Get the list of reports for the selected audit
				_request.getReports(audit._id);
			}
		},

		// ------------------------------------------------------------
		// Show the add/edit audit dialog in ADD mode
		onAddAuditClick: function(event) {
			// Show add/edit dialog
			_dialogs.addEditAudit.show();
		},

		// ------------------------------------------------------------
		// Show the add/edit audit dialog in EDIT mode
		onEditAuditClick: function(event) {
			var audit = _getSelectedAudit();

			if (!$.isEmptyObject(audit)) {
				// Show add/edit dialog
				_dialogs.addEditAudit.show(audit);
			}
		},

		// ------------------------------------------------------------
		// Generates a report for the selected audit
		onRunAuditClick: function(event) {
			if ($(this).attr('disabled')) {
				return;
			}
			var audit = _getSelectedAudit();

			if (!$.isEmptyObject(audit)) {
				// Disable the run button to prevent multiple clicks while being processed
				_enableDisableElement(this.id, true);

				// Do we need to show a confirmation dialog?
				_request.runAudit(audit._id);
			}
		},

		// ------------------------------------------------------------
		// Deletes the selected audit
		onDeleteAuditClick: function(event) {
			if ($(this).attr('disabled')) {
				return;
			}

			// Show confirmation dialog box before actually deleting the audit
			// Get the selected audit
			var audit = _getSelectedAudit();
			if (!$.isEmptyObject(audit)) {
				_dialogs.confirmDeleteAudit.show(audit);
			}
		},

		// ----------------------------------------------------------------
		// Gets the full report details for the selected report
		onOpenReportClick: function(event) {

			utui.util.pubsub.publish(utui.constants.views.AUDIT_DETAILS, {action:utui.constants.views.AUDIT_DETAILS});

			_currentReportId = $(this).parents('.reports_container').data('reportId');

			// Open the audit report dialog
			_dialogs.auditReport().show(_currentAuditId, _currentReportId, true);
		},

		// ----------------------------------------------------------------
		// Deletes the report for the selected audit
		onDeleteReportClick: function(event) {
			_currentReportId = $(this).parents('.reports_container').data('reportId');
			_dialogs.confirmDeleteReport.show(_currentReportId);
		},

		// ----------------------------------------------------------------
		// Call the show method every time a profile has been loaded
		onProfileLoaded: function(event) {
			// Only call if audits has already been shown once
			if (_hasBeenShown) {
				_public.show();
			}
		},

		// ----------------------------------------------------------------
		// Hides/Shows the marketing page based on isActive value
		onAccountStatusChanged: function(isActive) {
			if (isActive) {
				_onValidPermissions();
			} else {
				_onInvalidPermissions();
			}
		}
	}

	// ----------------------------------------------------------------
	// HTML Content
	var _view = {
		accordionNamespace: 'audit_report_content',

		// ------------------------------------------------------------
		accordionItem: function(id, audit, report) {
			var v = '',
				isReportComplete = _isReportComplete(report);

			v += '<div id="' + id + '" class="reports_container">';
			v += '  <h3>';
			v += '		<span class="ui-icon ui-icon-triangle-1-e"></span>';
			v += '		<a href="#" id="">';
			v += '			<div class="container_date">' + utui.util.date.getFormattedStringFromTimestamp(report.updated) + '</div>';
			v += '			<div class="container_reportStatus">' + _getReportStatus(report) + '</div>';
			v += '			<div class="container_total">' + report.url_total + '</div>';

			if (isReportComplete) {
				v += '			<div class="container_utagFound">' + report.utag_found_count + ' <span class="acrd_header_prct">' + utui.util.getPercentNum(report.utag_found_count, report.url_total, true) + '%</span></div>';
				v += '			<div class="container_unmanaged">' + (report.unmanaged_urls_count ? (report.unmanaged_urls_count  + ' <span class="acrd_header_prct">' + utui.util.getPercentNum(report.unmanaged_urls_count, report.url_total, true) + '%</span>') : 'N/A') + '</div>';
				v += '			<div class="container_utagMissing">' + report.utag_missing_count + ' <span class="acrd_header_prct">' + utui.util.getPercentNum(report.utag_missing_count, report.url_total, true) + '%</span></div>';
				v += '			<div class="container_urlErrors">' + report.error_count + ' <span class="acrd_header_prct">' + utui.util.getPercentNum(report.error_count, report.url_total, true) + '%</span></div>';
				v += '			<div class="container_urlAdded">' + (report.previous_report_id ? (report.added_url_count + ' <span class="acrd_header_prct">' + utui.util.getPercentNum(report.added_url_count, report.url_total, true) + '%</span>') : 'N/A') + '</div>';
				v += '			<div class="container_urlRemoved">' + (report.previous_report_id ? (report.removed_url_count + ' <span class="acrd_header_prct">' + utui.util.getPercentNum(report.removed_url_count, report.url_total, true) + '%</span>') : 'N/A') + '</div>';
			}

			v += '		</a>';
			v += '	</h3>';
			v += '	<div>' + _view.accordionContent(audit, report) + '</div>';
			v += '</div>';

			return v;
		},

		// ------------------------------------------------------------
		accordionContent: function(audit, report) {
			var v = '',
				isReportComplete = _isReportComplete(report);

			v += '<div class="contentButtonBar"></div>';
			v += '<table class="contentAreaTable">';
			v += '	<tbody>';
			v += '	<tr>';
			v += '		<td class="contextContainer">';
			v += '			<div class="contextBox">';
			v += '				<div class="contextActionButtons">';
			v += '					<a href="#" class="actionOpen btn btn-small i-color-copy"><i class="icon-external-link"></i> ' + localize.t('tiq.reports.open_report') + '</a>';
			v += '					<a href="#" class="actionDelete btn btn-small i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.reports.delete') + '</a>';
			v += '				</div>';
			v += '			</div>';
			v += '		</td>';
			v += '		<td class="contentContainer siteAuditSummaryContent">';

			v += _view.accordionSitemapErrors(report.sitemaps);

			v += '			<div class="contentArea">';
			v += '				<table class="contentAreaTable siteAuditSummaryHeaderTable">';
			v += '					<tr>';
			v += '						<td class="contentTableLabel">' + localize.t('tiq.reports.date') + '</td>';
			v += '						<td class="contentTableValue">' + utui.util.date.getGMTimeStringFromTimestamp(report.updated) + '</td>';
			v += '					</tr>';
			v += '					<tr>';
			v += '						<td class="contentTableLabel">' + localize.t('tiq.reports.recipients') + '</td>';
			v += '						<td class="contentTableValue">';

			for (var i=0; i<report.notify_emails.length; i++) {
				v += '							<a href="mailto:' + report.notify_emails[i] + '" class="siteAuditRecipient">' + report.notify_emails[i] + '</a>';
			}

			v += '						</td>';
			v += '					</tr>';
			v += '					<tr>';
			v += '						<td class="contentTableLabel">' + localize.t('tiq.reports.results') + '</td>';
			v += '						<td class="contentTableValue">';
			v +=                            '<div>' + localize.t('tiq.reports.num_pages_listed', {count:report.url_total}) + '</div>';
			if (isReportComplete) {
				v += '<div>' + localize.t('tiq.reports.detected_num_profiles', {count:_getTargetCount(report.environments)}) + '</div>';
			}
			if (isReportComplete && report.previous_report_id) {
				v +=                        '<div>' + localize.t('tiq.reports.detected_num_pages_since_last', {count:report.added_url_count}) + '</div>';
				v +=                        '<div>' + localize.t('tiq.reports.missing_num_pages_since_last', {count:report.removed_url_count}) + '</div>';
			}
			if (isReportComplete && (report.unmanaged_urls_count !== null)) {
				v +=                        '<div>' + localize.t('tiq.reports.detected_num_pages_with_unmanaged', {count:report.unmanaged_urls_count}) + '</div>';
			}
			v += '						</td>';
			v += '					</tr>';
			v += '				</table>';
			v += '			</div>';
			v += '			<div class="contentArea">';
			v += '				<table class="contentAreaTable siteAuditSummaryEnvironmentsTable">';
			v += '					<tr>';
			v += '						<th>' + localize.t('tiq.reports.environments') + '</th>';
			v += '						<th class="numricalData">' + localize.t('tiq.reports.pages') + '</th>';
			v += '					</tr>';

			if (!$.isEmptyObject(report.environments)) {
				for (var account in report.environments) {
					for (var profile in report.environments[account]) {
						for (var target in report.environments[account][profile]) {
							var url_count = report.environments[account][profile][target].url_count;
							v += '					<tr>';
							v += '						<td>' + account + ' / ' + profile + ' / ' + target + '</td>';

							if (isReportComplete) {
								v += '						<td class="numricalData">' + url_count + ' <span class="percentValue">' + utui.util.getPercentNum(url_count, report.url_total, true) + '%</span></td>';
							}

							v += '					</tr>';
						}
					}
				}
			}

			v += '				</table>';
			v += '			</div>';

			if (isReportComplete && report.unmanaged_tags && report.unmanaged_tags.length > 0) {
				v += '		<div class="siteAuditSummaryUnmanagedTags">';
				v +=				_view.accordionUnmanagedTagsSummary(report.unmanaged_tags);
				v += '		</div>';
			}

			v += '		</td>';
			v += '	</tr>';
			v += '	</tbody>';
			v += '</table>';

			return v;
		},

		// ------------------------------------------------------------
		accordionSitemapErrors: function(sitemaps) {
			var v = '';

			// Check to see if any error occurred
			if ($.isArray(sitemaps) && sitemaps.length > 0) {
				var errorList = [],
					errorMsg = '';

				for (var i=0; i<sitemaps.length; i++) {
					var map = sitemaps[i];
					if (map.error_code !== 0) {
						errorList.push(map);
					}
				}

				if (errorList.length > 0) {
					v += '<div class="siteAuditSummaryError">';
					v += '	<div class="errorContent">';
					v += '		<div class="errorWarningSign"><i class="icon-warning-sign"></i></div>';
					v += '		<div class="errorBody">';
					if (errorList.length <= 1) {
						v += 			localize.t('tiq.reports.error.unable_to_process_sitemap') + ' <a href="' + errorList[0].url + '" target="_blank">' + errorList[0].url + '</a>.';
					} else {
						v += 			localize.t('tiq.reports.error.unable_to_process_sitemaps');
						v += '			<ul>';
						for (var i=0; i<errorList.length; i++) {
							v += '				<li><a href="' + errorList[i].url + '" target="_blank">' + errorList[i].url + '</a></li>';
						}
						v += '			</ul>';
					}
					v += '		</div>';
					v += '	</div>';
					v += '</div>';
				}
			}

			return v;
		},

		// ----------------------------------------------------
		accordionUnmanagedTagsSummary: function(tagIdArr) {
			var v = '';//

			v += '<div class="siteAuditSummaryUnmanagedTagsHeader">' + localize.t('tiq.reports.detected_num_unique_unmanaged', {count:tagIdArr.length}) + '</div>';

			for (var i = 0; i < tagIdArr.length; i++) {
				var tagId = tagIdArr[i];

				v +=	'<div class="siteAuditSummaryUnmanagedTagSection">';
				v +=	'	<div class="siteAuditSummaryUnmanagedTagLogo">';
				v +=	'		<img src="' + utui.config.manageList[tagId].logo + '?v=' + utui_version + '">';
				v +=	'	</div>';
				v +=	'	<div class="siteAuditSummaryUnmanagedTagTitle">';
				v +=			utui.config.manageList[tagId].title;
				v +=	'	</div>';
				v +=	'	<div class="siteAuditSummaryUnmanagedTagDescription">';
				v +=			utui.config.manageList[tagId].description;
				v +=	'	</div>';
				v +=	'</div>';
			}

			return v;
		},
	}

	// ----------------------------------------------------------------
	// This contains all the dialog functionality
	var _dialogs = {
		// ------------------------------------------------------------
		// Removes the dialog from the DOM
		dispose: function(namespace, removeAll) {
			if (removeAll) {
				$('[id$="' + _dialogNamespace + '"]').dialog().remove();
			} else {
				$('#' + namespace + _dialogNamespace).dialog().remove();
			}
		},

		// ------------------------------------------------------------
		// This is used as the shell for every dialog
		body: function(loft, content) {
			var v = '';
			loft = loft || '';
			content = content || '';

			v += '<table class="dialogTable">';
			v += '	<tr>';
			v += '		<td class="dialogTableBody">';
			v += '			<div class="dialogBody">';
			v += '				<table class="dialogBodyTable">';
			v += '					<tr>';
			v += '						<td colspan="100%" class="dialogBody_loft">';

			v += loft;

			v += '						</td>';
			v += '					</tr>';
			v += '					<tr>';
			v += '						<td class="dialogBody_content">';

			v += content;

			v += '						</td>';
			v += '					</tr>';
			v += '				</table>';
			v += '			</div>';
			v += '		</td>';
			v += '	</tr>';
			v += '</table>';

			return v;
		},

		// ------------------------------------------------------------
		// Returns the dialog with the content specified
		showDialog: function(namespace, title, buttons, content, options) {
			if ($('#' + namespace + _dialogNamespace).length === 0) {
				$('<div />', { id: namespace + _dialogNamespace }).prependTo('body');
				$('<div />', { id: namespace + '_dialogContent' }).appendTo('#' + namespace + _dialogNamespace);
			}

			$('#' + namespace + '_dialogContent').html(content);

			var settings = {
				title: title,
				height: 'auto',
				width: 'auto',
				modal: true,
				closeOnEscape: false,
				resizable: false,
				autoOpen: true,
				draggable: true,
				position: ['center' ,'center'],
				buttons: buttons,
				dialogClass: 'utui-dialog'
			}

			if (!$.isEmptyObject(options)) {
				$.extend(settings, options)
			}

			return $('#' + namespace + _dialogNamespace).dialog(settings).on('dialogclose', function(){_dialogs.dispose(namespace);});
		},

		// ------------------------------------------------------------
		addEditAudit: function(){
			var _namespace = 'addEditAudit',
				_audit = {},
				_isNewFlag,
				_containerMap = {};	// Contains the sitemaps with the accordian item ID as the key

			// --------------------------------------------------------
			function _reset() {
				_audit = {};
				_isNewFlag = null;
				_containerMap = {}
			}

			// --------------------------------------------------------
			// Adds a new sitemap or edits and existing sitemap
			function _addSitemap(map, isNewlyCreated) {
				// Check to see if the map already exists and if so just update
				var containerId = _getContainerId(map),
					$content;

				// If sitemap was found then we perform and update otherwise we add it to the sitemaps array
				if (containerId) {
					var id = _namespace + '_sitemap_' + map.containerId + '_accordion';

					// Get the updated content and update the UI
					$content = $(_view.getSitemapContent(id, map));
					$('#' + id).replaceWith($content);

				} else {
					// Generate a new container id and add the map to both the containerMap object and sitemaps array
					map.containerId = utui.util.getContainerId();

					var id = _namespace + '_sitemap_' + map.containerId + '_accordion';

					// Get the sitemap content and it append it to the UI
					$content = $(_view.getSitemapContent(id, map));
					$('#' + _namespace + '_sitemaps').find('.editableList').append($content);
				}

				// Animates to the bottom of the div to show the newly added site map
				if (isNewlyCreated) {
					// First check the box to associate the sitemap with this audit
					$('.editableListItem_check', $content).find('input').prop('checked', 'checked');

					var $context = $('#' + _namespace + _dialogNamespace).find('.dialogBody_contentBody');
					var $el = $('.editableListItem', $context).last();
					$context.animate({scrollTop:$el.position().top}, 1000);
				}

				// Upsert the map in the containermap
				_containerMap[map.containerId] = map;

				// Show/hide no items to show
				_onSitemapsUpdated();
			}

			// --------------------------------------------------------
			// Deletes the sitemap from the UI, sitemaps array and containerMap object
			function _deleteSitemap(map) {
				// Remove the map from the UI
				$('#' + _namespace + '_sitemap_' + map.containerId + '_accordion').remove();

				// Remove the map from the containerMap
				delete _containerMap[map.containerId];

				_onSitemapsUpdated();
			}

			// --------------------------------------------------------
			// Returns the containerId if found
			// We check against containerId since a sitemap might not have an Id yet
			function _getContainerId(map) {
				if (!$.isEmptyObject(_containerMap)) {
					for (var key in _containerMap) {
						var sitemap = _containerMap[key];

						if (map.containerId === sitemap.containerId) {
							return key;
						}
					}
				}
				return null;
			}

			// --------------------------------------------------------
			// Returns the containerId if the specified url is in the list of sitemaps
			function _getContainerIdFromUrl(url) {
				if (!$.isEmptyObject(_containerMap)) {
					for (var key in _containerMap) {
						var sitemap = _containerMap[key];

						if (url === sitemap.url) {
							return key;
						}
					}
				}
				return null;
			}

			// --------------------------------------------------------
			// Returns true if the specified title or url is in the list of sitemaps
			function _hasSitemap(title, url) {
				if (!$.isEmptyObject(_containerMap)) {
					for (var key in _containerMap) {
						var sitemap = _containerMap[key];

						if (title.toLowerCase() === sitemap.title.toLowerCase() || url === sitemap.url) {
							return true;
						}
					}
				}
				return false;
			}

			// --------------------------------------------------------
			// Returns true if an audit with the same title exists
			function _hasAudit(title) {
				if ($.isArray(_audits) && _audits.length > 0) {
					for (var i=0; i<_audits.length; i++) {
						if (title.toLowerCase() === _audits[i].title.toLowerCase()) {
							return true;
						}
					}
				}
				return false;
			}

			// --------------------------------------------------------
			// Returns true if the specified sitemap is associated with this audit
			function _isInAudit(map) {
				if (!$.isEmptyObject(_audit)) {
					for (var i=0; i<_audit.current_sitemap_ids.length; i++) {
						if (map._id === _audit.current_sitemap_ids[i]) {
							return true;
						}
					}
				}
				return false;
			}

			// --------------------------------------------------------
			// Shows the configuration panel
			function _onShowConfiguration() {
				if (_isNewFlag) {
					// show next button
					$('#auditDialogFinishBtn').hide();
					$('#auditDialogBackBtn').hide();
					$('#auditDialogNextBtn').show();
				} else {
					// hide next button
					$('#auditDialogBackBtn').hide();
					$('#auditDialogNextBtn').hide();
				}

				$('#' + _namespace + '_configuration').show();
				$('#' + _namespace + '_sitemaps').hide();
			}

			// --------------------------------------------------------
			// Shows the sitemaps panel
			function _onShowSitemaps() {
				if (_isNewFlag) {
					// show back button
					$('#auditDialogFinishBtn').show();
					$('#auditDialogBackBtn').show();
					$('#auditDialogNextBtn').hide();
				} else {
					// hide back button
					$('#auditDialogBackBtn').hide();
					$('#auditDialogNextBtn').hide();
				}

				$('#' + _namespace + '_configuration').hide();
				$('#' + _namespace + '_sitemaps').show();
			}

			// --------------------------------------------------------
			// Used to show/hide the no items div
			function _onSitemapsUpdated() {
				var $noItems = $('#' + _namespace + _dialogNamespace).find('.noItemsSitemap');

				if ($.isEmptyObject(_containerMap)) {
					$('#' + _namespace + _dialogNamespace).find('.actionSelectAll').prop( "checked", false );
					$noItems.show();
				} else {
					$noItems.hide();
				}
			}

			// --------------------------------------------------------
			// Returns a data structure for an sitemap
			function _getSitemapData() {
				var data = [];

				for (var key in _containerMap) {
					data.push(_containerMap[key]);
				}

				return data;
			}

			// --------------------------------------------------------
			// Returns a data structure for an audit
			function _getAuditData() {
				var data = {};

				if (!_isNewFlag) {
					data._id = _audit._id;
				}

				data.title = $.trim($('#' + _namespace + '_configuration_title').val());
				data.notify_emails = _normalizeEmailList($('#' + _namespace + '_configuration_emails').val());
				data.notes = $.trim($('#' + _namespace + '_configuration_notes').val());
				data.current_sitemap_ids = [];

				// Ensure that we are sending an array of emails
				data.notify_emails = data.notify_emails.split(',');

				var $sitemapList = $('#' + _namespace + '_sitemaps').find(':checkbox:checked');
				$.each($sitemapList, function() {
					var id = $(this).parents('.editableListItem').attr('id');
					if (id) {
						id = id.replace(/[^0-9]/g, '');
						data.current_sitemap_ids.push(_containerMap[id]._id);
					}
				});

				return data;
			}

			// --------------------------------------------------------
			// Shows the specified error message within the main dialog
			function _showDialogError(error) {
				// Need to resize the editable list
				var $errorBox = $('#' + _namespace + _dialogNamespace).find('.dialogBody_loftAlert'),
					isVisible = $errorBox.is(':visible');

				$errorBox.html(error).show();

				// Only adjust the height if the error is first shown
				if (!isVisible) {
					var $editableList = $('#' + _namespace + '_sitemaps').find('.editableList'),
						maxHeight = parseInt($editableList.css('max-height'));
					$editableList.css('max-height', maxHeight - $errorBox.outerHeight());
				}
			}

			// --------------------------------------------------------
			// Hides the error in the main dialog
			function _hideDialogError() {
				// Need to resize the editable list
				var $errorBox = $('#' + _namespace + _dialogNamespace).find('.dialogBody_loftAlert'),
					isVisible = $errorBox.is(':visible');

				// Only hide if visible
				if (isVisible) {
					var $editableList = $('#' + _namespace + '_sitemaps').find('.editableList'),
						maxHeight = parseInt($editableList.css('max-height'));

					$editableList.css('max-height', maxHeight + $errorBox.outerHeight());
					$errorBox.html('').hide();
				}
			}

			// --------------------------------------------------------
			// Used to replace all common separated values and normalize them into a comma delimited list
			function _normalizeEmailList(val) {
				val = val.replace(/\s/g, ',');      // Replace all whitespace characters to a comma
				val = val.replace(/;/g, ',');       // Replace semicolon to comma
				val = val.replace(/,{2,}/g, ',');   // Replace all multiple commas in a row to a single comma
				val = val.replace(/,$/, '');        // Replace trailing comma
				val = val.replace(/^,/, '');        // Replace starting comma
				return val;
			}

			// --------------------------------------------------------
			var _request = {
				// ----------------------------------------------------
				// Gets a list of all the associated sitemaps for this profile
				getSitemaps: function() {
					var url = _addParamsToURL(utui.service.restapis.AUDITS_SITEMAPS);
					utui.service.get(url, {}, null, _response.onGetSitemapsSuccess, _response.onGetSitemapsError);
				},

				// ------------------------------------------------------------
				// Updates  (upsert) the list of all associated sitempas for this profile
				putSitemaps: function() {
					var url = _addParamsToURL(utui.service.restapis.AUDITS_SITEMAPS);
					utui.service.put(url, JSON.stringify(_getSitemapData()), _ajaxOptions, _response.onPutSitemapsSuccess, _response.onPutSitemapsError);
				},

				// ------------------------------------------------------------
				// Updates the audit
				putAudit: function() {
					var url = _addParamsToURL(utui.service.restapis.AUDITS, {'auditId':_audit._id});
					utui.service.put(url, JSON.stringify(_getAuditData()), _ajaxOptions, _response.onPutAuditSuccess, _response.onPutAuditError);
				},

				// ------------------------------------------------------------
				// Creates a new audit
				postAudit: function() {
					var url = _addParamsToURL(utui.service.restapis.AUDITS_LIST);
					utui.service.post(url, JSON.stringify(_getAuditData()), _ajaxOptions, _response.onPostAuditSuccess, _response.onPutAuditError);
				}
			}

			// --------------------------------------------------------
			var _response = {
				// ----------------------------------------------------
				onGetSitemapsSuccess: function(data) {
					if (!$.isEmptyObject(data)) {
						for (var i=0; i<data.length; i++) {
							_addSitemap(data[i]);
						}
					} else {
						_onSitemapsUpdated();
					}
				},

				// --------------------------------------------------------
				onGetSitemapsError: function(status, response) {
					if (_isAccessDenied(response)) {
						return;
					}

					var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_retrieve_maps'));

					_showDialogError(errorMsg);
					_onSitemapsUpdated();
				},

				// --------------------------------------------------------
				onPutSitemapsSuccess: function(data) {
					// Update the container map with the new ids
					if ($.isArray(data)) {
						for (var i=0; i<data.length; i++) {
							var map = data[i],
								containerId = _getContainerIdFromUrl(map.url);

							if (containerId) {
								_containerMap[containerId]._id = map._id;
							}
						}
					}

					if (_isNewFlag) {
						_request.postAudit();
					} else {
						_request.putAudit();
					}
				},

				// --------------------------------------------------------
				onPutSitemapsError: function(status, response) {
					if (_isAccessDenied(response)) {
						return;
					}

					var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_save_maps'));

					_showDialogError(errorMsg);
					_enableDisableElement('auditDialogFinishBtn', false);
				},

				// ------------------------------------------------------------
				onPutAuditSuccess: function(data) {
					_doUpdateAudit(_getAuditData());
					_dialogs.dispose(_namespace);
				},

				// ------------------------------------------------------------
				onPostAuditSuccess: function(data) {
					if (!$.isEmptyObject(data)) {
						var audit = _getAuditData();
						audit._id = data._id;
						_doAddAudit(audit);
						_dialogs.dispose(_namespace);
						// Event Tracking
						utui.util.pubsub.publish(utui.constants.reports.AUDIT_CREATE_SITE_SCAN, {action:utui.constants.reports.AUDIT_CREATE_SITE_SCAN});
					} else {
						_response.onPutAuditError();
					}
				},

				// ------------------------------------------------------------
				onPutAuditError: function(status, response) {
					if (_isAccessDenied(response)) {
						return;
					}

					var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_save_scan'));

					_showDialogError(errorMsg);
					_enableDisableElement('auditDialogFinishBtn', false);
				}
			}

			// --------------------------------------------------------
			var _dialogs_ = {
				// ------------------------------------------------------------
				addEditSitemap: function() {
					// Private API
					var _namespace = 'addEditSitemap',
						_sitemap,
						_isNewFlag,
						_verifiedURL;

					// --------------------------------------------------------
					// Resets all the variables
					function _reset() {
						_sitemap = null;
						_isNewFlag = true;
						_verifiedURL = '';
					}

					// --------------------------------------------------------
					// Validates all the required field and makes sure that the URL doesn't return a 404
					function _validate(callback) {
						var $title = $('#' + _namespace + '_sitemap_title'),
							$url = $('#' + _namespace + '_sitemap_url'),
							titleVal = $.trim($title.val()),
							currentSitemapTitle = (!$.isEmptyObject(_sitemap)) ? _sitemap.title : '',
							urlVal = $.trim($url.val()),
							$validation = $('#' + _namespace + _dialogNamespace).find('.dialogBody_contentHeader_validation'),
							error = '',
							$field,
							onSuccess = function() {
								$validation.hide();
								_verifiedURL = urlVal;
								if (callback) {
									callback();
								}
							},
							onError = function($field, errorMsg) {
								$validation.html(errorMsg);
								$validation.show();
								if ($field) $field.focus();
							};

						// Hide the error initially
						$validation.html('').hide();

						if (titleVal === '') {
							onError($title, localize.t('tiq.reports.error.must_specify_title'));

						} else if (!XRegExp('^[\\p{L}0-9-_ ]{3,30}$').test(titleVal)) {	///^[a-zA-Z0-9-_ ]{3,30}$/i
							onError($title, localize.t('tiq.reports.error.title_must_be_between'));

						} else if (_hasSitemap(titleVal, urlVal) && titleVal.toLowerCase() !== currentSitemapTitle.toLowerCase()) {
							onError($title, localize.t('tiq.reports.error.site_map_already_exists'));

						} else if (urlVal === '' || !/^http(s)?:\/\/[\w-]+(\.[\w-]+)+\.?(:\d+)?(\/\S+\.xml)$/i.test(urlVal)) {
							onError($url, localize.t('tiq.reports.error.invalid_url'));

						} else if (_verifiedURL === '' || _verifiedURL != urlVal) {
							var url = _addParamsToURL(utui.service.restapis.AUDITS_SITEMAP_VERIFY);
							//utui.service.head(url, {url:encodeURIComponent(urlVal)}, null,

							// Disable the save button since there seems to be some latency with the urest head request
							_enableDisableElement('btnSaveSitemap', true);

							utui.service.head(url, {url:urlVal}, null,
								function(data){
									onSuccess();
								},
								function(status, response){
									if (response.status === 304) {
										onSuccess();
									} else {
										var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.site_map_not_verified'));

										onError($title, errorMsg);

										// Enable the save button
										_enableDisableElement('btnSaveSitemap', false);
									}
								}
							);

						} else {
							onSuccess();
						}
					}

					// --------------------------------------------------------
					function _view() {
						var body = '',
							title = _sitemap.title || '',
							url = _sitemap.url || '';

						body += '<div id="' + _namespace + '_body">';
						body += '	<table class="dialogBody_contentTable">';
						body += '		<tr>';
						body += '			<td class="dialogBody_contentTableHeader">';
						body += '				<div class="dialogBody_contentHeader">';
						body += '					<div class="dialogBody_contentHeader_validation"></div>';
						body += '				</div>';
						body += '			</td>';
						body += '		</tr>';
						body += '		<tr>';
						body += '			<td class="dialogBody_contentTableBody">';

						body += '				<div class="dialogBody_contentBody">';
						body += '					<div class="dialogBody_contentBody_navSection">';
						body += '						<div class="dialogBody_contentBody_navSectionBody">';
						body += '							<div class="dialogSectionBody">';
						body += '								<div class="dialogSectionConfigGroup">';
						body += '									<div class="dialogSectionConfig">';
						body += '										<div id="">';
						body += '											<div class="dialogSectionConfig_label">' + localize.t('tiq.reports.title') + '</div>';
						body += '											<div class="dialogSectionConfig_item">';
						body += '												<input type="text" id="' + _namespace + '_sitemap_title" value="' + title + '" class="wizard_title" maxlength="100" />';
						body += '											</div>';
						body += '										</div>';
						body += '									</div>';
						body += '								</div>';

						body += '								<div class="dialogSectionConfigGroup">';
						body += '									<div class="dialogSectionConfig">';
						body += '										<div id="">';
						body += '											<div class="dialogSectionConfig_label">' + localize.t('tiq.reports.url') + '</div>';
						body += '											<div class="dialogSectionConfig_item">';
						body += '												<div class="dialogSectionConfig_itemTips">' + localize.t('tiq.reports.error.only_xml_maps_accepted') + '</div>';
						body += '												<input type="text" id="' + _namespace + '_sitemap_url" value="' + url + '" class="wizard_title" maxlength="200" />';
						body += '											</div>';
						body += '										</div>';
						body += '									</div>';
						body += '								</div>';
						body += '							</div>';
						body += '						</div>';
						body += '					</div>';
						body += '				</div>';

						body += '			</td>';
						body += '		</tr>';
						body += '	</table>';
						body += '</div>';

						return _dialogs.body('', body);
					}

					// --------------------------------------------------------
					var _eventHandlers = {
						// ----------------------------------------------------
						onSaveClick: function() {
							_sitemap.title = $('#' + _namespace + '_sitemap_title').val();
							_sitemap.url = $('#' + _namespace + '_sitemap_url').val();

							_validate(function() {
								_addSitemap(_sitemap, _isNewFlag);
								_dialogs.dispose(_namespace);
							});
						},

						// ----------------------------------------------------
						onCancelClick: function() {
							_dialogs.dispose(_namespace);
						}
					}

					// Public API
					var _public = {
						// ----------------------------------------------------
						show: function(sitemap) {
							_reset();

							_sitemap = sitemap || {};

							if (!$.isEmptyObject(_sitemap)) {
								_isNewFlag = false;
							}

							// Dialog buttons
							var buttons = [{
								text: localize.t('tiq.dialog.button.save'),
								click: _eventHandlers.onSaveClick,
								class: 'sitemapDialogSaveBtn',
								id: 'btnSaveSitemap'
							},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									click: _eventHandlers.onCancelClick,
									style: 'float:left; margin-left: 12px',
									class: 'sitemapDialogCancelBtn',
									id: 'btnCancelSitemap'
								}
							];

							// Show the dialog
							_dialogs.showDialog(_namespace, localize.t('tiq.reports.create_site_map'), buttons, _view());

							if (_isNewFlag) {
								$('#sitemapDialogSaveBtn').hide();
							} else {
								$('#sitemapDialogCreateBtn').hide();
							}
						}
					}

					return _public;
				}(),

				// ------------------------------------------------------------
				confirmDeleteSitemap: function() {
					// Private API
					var _namespace = 'confirmDeleteSitemap',
						_sitemap;

					// --------------------------------------------------------
					function _view() {
						var body = '';

						body += '<div id="' + _namespace + '_description" class="dialogBody_alert">';
						body += '    <div class="dialog-icon-container">';
						body += '        <i class="icon-warning-sign" style="color:orange;"></i>';
						body += '    </div>';
						body += '    <div class="dialog-description">';
						body += '        <p><strong>' + localize.t('tiq.reports.are_you_sure_delete_map', {title:_sitemap.title}) + '</strong></p>';
						body += '        <p>' + localize.t('tiq.reports.action_cannot_be_undone') + '</p>';
						body += '    </div>';
						body += '</div>';

						return _dialogs.body('', body);
					}

					// --------------------------------------------------------
					var _eventHandlers = {
						// ----------------------------------------------------
						onDeleteClick: function() {
							_deleteSitemap(_sitemap);
							_dialogs.dispose(_namespace);
						},

						// ----------------------------------------------------
						onCancelClick: function() {
							_dialogs.dispose(_namespace);
						}
					}

					// Public API
					var _public = {
						// ----------------------------------------------------
						show: function(sitemap) {
							_sitemap = sitemap;

							// Dialog buttons
							var buttons = [
								{
									text: localize.t('tiq.reports.delete_site_map'),
									id: _namespace + '_dialog_deleteBtn',
									click: _eventHandlers.onDeleteClick
								},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									id: _namespace + '_dialog_cancelBtn',
									click: _eventHandlers.onCancelClick,
									style: 'float:left; margin-left: 12px'
								}
							];

							// Show the dialog
							_dialogs.showDialog(_namespace, localize.t('tiq.reports.delete_site_map'), buttons, _view());
						}
					}

					return _public;
				}()
			}

			// --------------------------------------------------------
			// Private API
			var _view = {
				// ----------------------------------------------------
				getDialogContent: function() {
					var loft = '',
						body = '',
						title = _audit.title || '',
						notes = _audit.notes || '',
						emails = ($.isArray(_audit.notify_emails)) ? _audit.notify_emails.toString().replace(/,/g, '\n') : utui.login.email;

					// LOFT
					// Add wizardTabFlow if is new audit since we are in flow mode
					if (_isNewFlag) {
						loft += '<div class="dialogBody_loftTabs wizardTabFlow">';
					} else {
						loft += '<div class="dialogBody_loftTabs">';
					}

					loft += '	<div id="' + _namespace + '_loftTab_configuration" class="loftTab activeTab">' + localize.t('tiq.reports.configuration') + '</div>';
					loft += '	<div id="' + _namespace + '_loftTab_sitemaps" class="loftTab">' + localize.t('tiq.reports.site_maps') + '</div>';
					loft += '</div>';
					loft += '<div class="dialogBody_loftAlert"></div>';

					// BODY -> CONFIGURATION
					body += '<div id="' + _namespace + '_configuration">';
					body += '	<table class="dialogBody_contentTable">';
					body += '		<tr>';
					body += '			<td class="dialogBody_contentTableHeader">';
					body += '				<div class="dialogBody_contentHeader"></div>';
					body += '			</td>';
					body += '		</tr>';
					body += '		<tr>';
					body += '			<td class="dialogBody_contentTableBody">';
					body += '				<div class="dialogBody_contentBody">';
					body += '					<div class="dialogBody_contentBody_navSection">';
					body += '						<div class="dialogBody_contentBody_navSectionBody">';
					body += '							<div class="dialogSectionBody">';
					body += '								<div class="dialogSectionConfigGroup">';
					body += '									<div class="dialogSectionConfig">';
					body += '										<div id="">';
					body += '											<div class="dialogSectionConfig_label">' + localize.t('tiq.reports.title') + '</div>';
					body += '											<div class="dialogSectionConfig_item">';
					body += '												<input type="text" id="' + _namespace + '_configuration_title" value="' + title + '" class="wizard_title" style="width:400px;" maxlength="30" />';
					body += '											</div>';
					body += '										</div>';
					body += '									</div>';
					body += '								</div>';
					body += '								<div class="dialogSectionConfigGroup">';
					body += '									<div class="dialogSectionConfig">';
					body += '										<div id="">';
					body += '											<div class="dialogSectionConfig_label">' + localize.t('tiq.reports.recipients') + '</div>';
					body += '											<div class="dialogSectionConfig_item">';
					body += '												<div class="dialogSectionConfig_itemTips">' + localize.t('tiq.reports.enter_people_notified') + '</div>';
					body += '												<textarea id="' + _namespace + '_configuration_emails" style="height:60px; width:400px;" maxlength="500">' + emails + '</textarea>';
					body += '											</div>';
					body += '										</div>';
					body += '									</div>';
					body += '								</div>';
					body += '								<div class="dialogSectionConfigGroup">';
					body += '									<div class="dialogSectionConfig">';
					body += '										<div id="">';
					body += '											<div class="dialogSectionConfig_label">' + localize.t('tiq.reports.notes') + '</div>';
					body += '											<div class="dialogSectionConfig_item">';
					body += '												<textarea id="' + _namespace + '_configuration_notes" style="height:60px; width: 400px" maxlength="255">' + notes + '</textarea>';
					body += '											</div>';
					body += '										</div>';
					body += '									</div>';
					body += '								</div>';
					body += '							</div>';
					body += '						</div>';
					body += '					</div>';
					body += '				</div>';
					body += '			</td>';
					body += '		</tr>';
					body += '		<tr>';
					body += '			<td class="dialogBody_contentTableFooter">';
					body += '				<div class="dialogBody_contentFooter"></div>';
					body += '			</td>';
					body += '		</tr>';
					body += '	</table>';
					body += '</div>';


					// BODY -> SITE MAPS
					body += '<div id="' + _namespace + '_sitemaps">';
					body += '	<table class="dialogBody_contentTable">';
					body += '		<tr>';
					body += '			<td class="dialogBody_contentTableHeader">';
					body += '				<div class="dialogBody_contentHeader">';

					body += '					<div class="dialogBody_contentHeader_listHeader">';
					body += '						<table class="dialogBody_contentHeader_listHeader_table">';
					body += '							<tbody>';
					body += '								<tr>';
					body += '									<td class="dialogBody_contentHeader_listHeader_tableLeft">';
					body += '										<div id="selectAll">';
					body += '											<div class="selectAll_selection">';
					body += '												<input id="audit_sitemaps_selectall" type="checkbox" name="loadRuleAll" value="statusActive" class="actionSelectAll">';
					body += '												<label for="audit_sitemaps_selectall">' + localize.t('tiq.reports.select_all_site_maps') + '</label>'
					body += '											</div>';
					body += '										</div>';
					body += '									</td>';
					body += '									<td class="dialogBody_contentHeader_listHeader_tableRight">';
					body += '										<span class="btn btn-mini i-color-add actionCreateSitemap"><i class="icon-plus"></i> ' + localize.t('tiq.reports.create_site_map') + '</span>';
					body += '									</td>';
					body += '								</tr>';
					body += '							</tbody>';
					body += '						</table>';
					body += '					</div>';

					body += '				</div>';
					body += '			</td>';
					body += '		</tr>';
					body += '		<tr>';
					body += '			<td class="dialogBody_contentTableBody">';
					body += '				<div class="dialogBody_contentBody">';
					body += '					<div class="dialogBody_contentHeader_listBody editableList">';

					// No items to show sitemap
					body += '						<div class="noItemsToShow noItemsSitemap">';
					body += '							<span>' + localize.t('tiq.reports.create_new_site_map') + '</span>';
					body += '							<i class="icon-hand-up"></i>';
					body += '						</div>';

					body += '					</div>';
					body += '				</div>';
					body += '			</td>';
					body += '		</tr>';
					body += '		<tr>';
					body += '			<td class="dialogBody_contentTableFooter">';
					body += '				<div class="dialogBody_contentFooter"></div>';
					body += '			</td>';
					body += '		</tr>';
					body += '	</table>';
					body += '</div>';

					return _dialogs.body(loft, body);
				},

				// ----------------------------------------------------
				getSitemapContent: function(id, sitemap) {
					var v = '';

					v += '<div id="' + id + '" class="editableListItem">';
					v += '	<div class="editableListItem_header">';
					v += '		<div class="editableListItem_check">';

					// If this sitemap is associated with this audit then set the checked attribute
					if (_isInAudit(sitemap)) {
						v += '		<input type="checkbox" checked="checked" name="" id="' + id + '_chk" value="statusActive">';
					} else {
						v += '		<input type="checkbox" name="" id="' + id + '_chk" value="statusActive">';
					}

					v += '			<label class="sitemap_url" for="' + id + '_chk">';
					v += '				<span class="editableListItem_titleDescription" title="' + sitemap.title + '">' + sitemap.title + '</span> ';
					v += '				<span class="editableListItem_titleDescription" title="' + sitemap.url + '">' + sitemap.url + '</span>';
					v += '			</label>';
					v += '		</div>';
					v += '		<div class="editableListItem_buttons">';
					v += '			<a href="#" class="btn btn-small actionEdit i-color-edit"><i class="icon-edit"></i> ' + localize.t('tiq.reports.edit') + '</a>';
					v += '			<a href="#" class="btn btn-small actionDelete i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.reports.delete') + '</a>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				}
			}

			// --------------------------------------------------------
			function _bindUI() {
				// Configuration tab click event handler
				$('#' + _namespace + '_loftTab_configuration').safeBind('click', function(){
					$(this).parent().find('.activeTab').removeClass('activeTab');
					$(this).addClass('activeTab');

					_onShowConfiguration();
				});

				// Site Maps tab click event handler
				$('#' + _namespace + '_loftTab_sitemaps').safeBind('click', function(){
					$(this).parent().find('.activeTab').removeClass('activeTab');
					$(this).addClass('activeTab activeTabLast');

					_onShowSitemaps();
				});

				// Create Site Map click event handler
				$('#' + _namespace + _dialogNamespace).on('click', '.actionCreateSitemap', function() {
					_dialogs_.addEditSitemap.show();
				});

				// Select All Site Maps change event handler
				$('#' + _namespace + _dialogNamespace).on('change', '.actionSelectAll', function() {
					var isChecked = $(this).is(':checked'),
						$chkList = $('#' + _namespace + _dialogNamespace).find('.editableListItem_check input');

					// Don' allow the option to be selected if no sitemaps exist
					if ($.isEmptyObject(_containerMap)) {
						$(this).prop( "checked", false );
						return;
					}

					// Toggle the checked attribute
					if (isChecked) {
						$chkList.prop('checked', 'checked');
					} else {
						$chkList.prop( "checked", false );
					}
				});

				// Site Map edit button click event handler
				$('#' + _namespace + _dialogNamespace).on('click', '.actionEdit', function(){
					var containerId = $(this).parents('.editableListItem').attr('id').replace(/[^0-9]*/g,'');
					_dialogs_.addEditSitemap.show(_containerMap[containerId]);
				});

				// Site Map delete button click event handler
				$('#' + _namespace + _dialogNamespace).on('click', '.actionDelete', function(event){
					var containerId = $(this).parents('.editableListItem').attr('id').replace(/[^0-9]*/g,'');
					_dialogs_.confirmDeleteSitemap.show(_containerMap[containerId]);
				});
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// ----------------------------------------------------
				onCancelBtnClick: function() {
					_dialogs.dispose(_namespace);
				},

				// ----------------------------------------------------
				onNextBtnClick: function() {
					$('#' + _namespace + '_loftTab_sitemaps').trigger('click');
				},

				// ----------------------------------------------------
				onBackBtnClick: function() {
					$('#' + _namespace + '_loftTab_configuration').trigger('click');
				},

				// ----------------------------------------------------
				onFinishBtnClick: function(event) {
					var $title = $('#' + _namespace + '_configuration_title'),
						$emails = $('#' + _namespace + '_configuration_emails'),
						titleVal = $.trim($title.val()),
						currentAuditTitle = (!$.isEmptyObject(_audit)) ? _audit.title : '',
						emailVal = _normalizeEmailList($emails.val()),
						emailList = emailVal.split(','),
						errorMsg,
						$field = $title;

					_hideDialogError();

					if (titleVal === '') {
						errorMsg = 'You must specify a title.';

					} else if (!XRegExp('^[\\p{L}0-9-_ ]{3,30}$').test(titleVal)) {	///^[a-zA-Z0-9-_ ]{3,30}$/i
						errorMsg = localize.t('tiq.reports.error.title_must_be_between');

					} else if (_hasAudit(titleVal) && titleVal.toLowerCase() !== currentAuditTitle.toLowerCase()) {
						errorMsg = localize.t('tiq.reports.error.scan_title_already_exists');

					} else if (emailVal === '') {
						errorMsg = localize.t('tiq.reports.error.must_specify_recipient');
						$field = $emails;

					} else {
						// Need to validate all the emails in the email list
						for (var i=0; i<emailList.length; i++) {
							if (!utui.util.isValidEmail(emailList[i])) {
								errorMsg = localize.t('tiq.reports.error.emails_not_valid');
								$field = $emails;
								break;
							}
						}
					}

					if (errorMsg) {
						_showDialogError(errorMsg);
						$('#' + _namespace + '_loftTab_configuration').trigger('click');
						$field.focus();
						return;
					}

					// Disable the finish button
					_enableDisableElement(event.currentTarget.id, true);

					// First save sitemaps then the audit
					_request.putSitemaps();
				}
			}

			// --------------------------------------------------------
			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(audit) {
					_reset();

					var title = localize.t('tiq.reports.create_site_scan');
					_isNewFlag = true;

					if (audit) {
						_audit = audit;
						_isNewFlag = false;
						title = localize.t('tiq.reports.edit_site_scan');
					}

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.finish'),
							click: _eventHandlers.onFinishBtnClick,
							id: 'auditDialogFinishBtn'
						},
						{
							text: localize.t('tiq.dialog.button.next'),
							click: _eventHandlers.onNextBtnClick,
							id: 'auditDialogNextBtn'
						},
						{
							text: localize.t('tiq.dialog.button.back'),
							click: _eventHandlers.onBackBtnClick,
							id: 'auditDialogBackBtn'
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px',
							id: 'auditDialogCancelBtn'
						}
					];

					// Show the dialog
					_dialogs.showDialog(_namespace, title, buttons, _view.getDialogContent(), {height:400, width:700});

					_bindUI();

					_onShowConfiguration();

					// Get the list of sitemaps
					_request.getSitemaps();
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		confirmRunAudit: function(){
			// Private API
			function _view() {

			}

			// Public API
			var _public = {
				show: function(auditID) {

				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		confirmDeleteAudit: function(){
			// Private API
			var _namespace = 'confirmDeleteAudit',
				_audit;

			// --------------------------------------------------------
			function _view() {
				var body = '';

				body += '<div id="' + _namespace + '_description" class="dialogBody_alert">';
				body+= '    <div class="dialog-icon-container">';
				body += '        <i class="icon-warning-sign" style="color:orange;"></i>';
				body += '    </div>';
				body += '    <div class="dialog-description">';
				body += '        <p><strong>' + localize.t('tiq.reports.are_you_sure_delete_audit', {title:_audit.title}) + '</strong></p>';
				body += '        <p>' + localize.t('tiq.reports.all_published_changes') + '</p>';
				body += '    </div>';
				body += '</div>';

				return _dialogs.body('', body);
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// ----------------------------------------------------
				onDeleteClick: function() {
					_request.deleteAudit(_audit._id);
					_dialogs.dispose(_namespace);
				},

				// ----------------------------------------------------
				onCancelClick: function() {
					_dialogs.dispose(_namespace);
				}
			}

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(audit) {
					_audit = audit;

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.reports.delete_scan'),
							id: _namespace + '_dialog_deleteBtn',
							click: _eventHandlers.onDeleteClick
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							id: _namespace + '_dialog_cancelBtn',
							click: _eventHandlers.onCancelClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					// Show the dialog
					_dialogs.showDialog(_namespace, localize.t('tiq.reports.delete_scan'), buttons, _view());
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		confirmDeleteReport: function(){
			// Private API
			var _namespace = 'confirmDeleteReport';
			var _reportId;

			// --------------------------------------------------------
			function _view() {
				var body = '';

				body += '<div id="' + _namespace + '_description" class="dialogBody_alert">';
				body += '    <div class="dialog-icon-container">';
				body += '        <i class="icon-warning-sign" style="color:orange;"></i>';
				body += '    </div>';
				body += '    <div class="dialog-description">';
				body += '        <p><strong>' + localize.t('tiq.reports.are_you_sure_delete_report') + '</strong></p>';
				body += '        <p>' + localize.t('tiq.reports.action_cannot_be_undone') + '</p>';
				body += '    </div>';
				body += '</div>';

				return _dialogs.body('', body);
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// ----------------------------------------------------
				onDeleteClick: function() {
					_request.deleteReport(_currentAuditId, _reportId);
					_dialogs.dispose(_namespace);
				},

				// ----------------------------------------------------
				onCancelClick: function() {
					_dialogs.dispose(_namespace);
				}
			}

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(reportId) {
					_reportId = reportId;

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.reports.delete_report'),
							id: _namespace + '_dialog_deleteBtn',
							click: _eventHandlers.onDeleteClick
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							id: _namespace + '_dialog_cancelBtn',
							click: _eventHandlers.onCancelClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					// Show the dialog
					_dialogs.showDialog(_namespace, localize.t('tiq.reports.delete_report'), buttons, _view());
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		// Shows the report in a modal as well as a new window (NOT self-invoking)
		auditReport: function() {
			// Private API
			var _audit,
				_report,
				_auditId,
				_reportId,
				_namespace = 'report_content',
				_containerMap = {},
				_numItemsToReturn = 50,
				_isModal = false,
				_context;

			// --------------------------------------------------------
			function _reset() {
				//_containerMap = {};
			}

			// --------------------------------------------------------
			// Finds the accordion item ID from the specified value contained in the container map
			function _getContainerIdFromValue(val) {
				for (var key in _containerMap) {
					if (val === _containerMap[key]) {
						return key;
					}
				}
				return null;
			}

			// --------------------------------------------------------
			// Finds the accordion and adds the content to it
			function _addContentToAccordion(bucket, data, hasMoreItems){
				var $accordion = $('#' + _getContainerIdFromValue(bucket), _context),
					content = '',
					page = Number($accordion.data('page')) || 0;

				for (var i=0; i<data.length; i++) {
					content += _view.accordionItem(data[i], bucket);

					if (bucket === 'unmanaged') {
						content += '<tr><td colspan="2"><table class="siteAuditUnmanagedTagDetailsTable"><tbody>';

						var unmanagedTags = data[i].unmanaged_tags;
						for (var key in unmanagedTags) {

							var unmanagedTag = unmanagedTags[key];
							var containerId = utui.util.getContainerId(); // UniqueId needed to delegate click binding

							content += _view.accordionItemUnmanagedTagDetails(unmanagedTag, containerId);

							if (_isModal) {
								_bindUnmanagedTagAddButton($accordion, unmanagedTag, containerId);
							}
						}

						content += '</tbody></table></td></tr>';
					}
				}

				$accordion.data('page', page+=1);
				$accordion.find('.siteAuditTable').append(content);

				// Hide/Show unchanged content
				_eventHandlers.onShowRemovedChange();

				if (hasMoreItems) {
					$accordion.find('.reportDetails_sectionBody_loadMore').show();
				} else {
					$accordion.find('.reportDetails_sectionBody_loadMore').hide();
				}
			}

			// --------------------------------------------------------
			// Bind all global element events
			function _bindGlobalUIEvents() {
				$('.siteAuditKey_showRemoved', _context).find('input').safeBind('change', _eventHandlers.onShowRemovedChange);
			}

			// --------------------------------------------------------
			// Binds all the accordion UI events
			function _bindAccordionUIEvents() {
				$('.reportDetails', _context).find('.reportDetails_sectionHeader').safeBind('click', _eventHandlers.onAccordionHeaderClick);
				$('.reportDetails', _context).find('.reportDetails_sectionBody_loadMore').safeBind('click', _eventHandlers.onLoadMoreClick);
			}

			function _bindUnmanagedTagAddButton($parentAccordion, tagObj, containerId) {
				$parentAccordion.on('click', '#add_unmanaged_tag_' + containerId, function(e) {
					utui.manage.addItemFromUnmanagedTagReport({tag_id: tagObj.tag_id}, tagObj.utui_config, containerId, $parentAccordion, _eventHandlers.onTagAddedSuccess, _eventHandlers.onTagAddedError);
				});
			}

			function _getHostnameFromUrl(urlString) {
				var $a = $('<a>');
				$a.attr('href', urlString);
				return $a[0].hostname;
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseClick: function(event) {
					_dialogs.dispose(_namespace);
				},

				// ----------------------------------------------------
				// Hide/Show unchanged content
				onShowRemovedChange: function(event) {
					var isChecked = $('.siteAuditKey_showRemoved', _context).find('input').is(':checked');

					if (isChecked) {
						$('.siteAuditWebPageStatus:empty', _context).parents('tr').hide();
					} else {
						$('.siteAuditWebPageStatus:empty', _context).parents('tr').show();
					}
				},

				// ----------------------------------------------------
				// Toggles the accordion and fetches results if visible and empty
				onAccordionHeaderClick: function(event) {
					var $accordion = $(this).parents('.reportDetails_section');
					$('.reportDetails_sectionBody', $(this).parent()).slideToggle(function(){

						// Only make a request if this accordion is opened and has no content
						if ($(this).is(':visible') && $(this).find('.siteAuditTable').is(':empty')) {
							_eventHandlers.onLoadMoreClick(event);
						}
					});

					$accordion.toggleClass('openAccordion');

					if ($accordion.hasClass('openAccordion')) {
						$accordion.find('i').removeClass('icon-caret-right').addClass('icon-caret-down');
					} else {
						$accordion.find('i').removeClass('icon-caret-down').addClass('icon-caret-right');
					}
				},

				// ----------------------------------------------------
				// Loads additional items for the accordion
				onLoadMoreClick: function(event) {
					var $accordion = $(event.target).parents('.reportDetails_section'),
						containerValue = _containerMap[$accordion.attr('id')],
						page = Number($accordion.data('page')) || 0;

					if (containerValue === 'missing') {
						_request.getMissing(page);

					} else if (containerValue === 'errors') {
						_request.getErrors(page);

					} else if (containerValue === 'unmanaged') {
						_request.getUnmanaged(page);

					} else {
						var valSplit = containerValue.split(' / ');
						_request.getEnvironment(valSplit[0], valSplit[1], valSplit[2], page);
					}
					return false;
				},

				onTagAddedSuccess: function($parentAccordion, tagContainerId, unmangedTagContainerId) {
					// Switch to 'added' button
					$('#add_unmanaged_tag_' + unmangedTagContainerId).hide();
					$('#added_unmanaged_tag_' + unmangedTagContainerId).show();

					// Show configure message/link
					$('#configure_unmanaged_tag_' + unmangedTagContainerId).show();

					// Bind configure link
					$parentAccordion.on('click', '#configure_unmanaged_tag_' + unmangedTagContainerId, function(e) {
						_dialogs.dispose(_namespace);
						$('#tabs_manage').trigger('click');
						utui.manage.editTagSettings(tagContainerId);
					});
				},

				onTagAddedError: function() {
					_notification.show(_errorCodeMap[10]);
				}
			}

			// --------------------------------------------------------
			var _notification = {
				// ----------------------------------------------------
				show: function(msg) {
					$('.siteAuditError', _context).html(msg).slideDown(function(){
						setTimeout(function(){
							_notification.hide();
						}, 10000);
					});
				},

				// ----------------------------------------------------
				hide: function() {
					$('.siteAuditError', _context).html('').slideUp();
				}
			}

			// --------------------------------------------------------
			var _request = {
				// ----------------------------------------------------
				// Gets the full report for the specified audit and report
				getReport: function() {
					var url = _addParamsToURL(utui.service.restapis.AUDITS_REPORT, {'auditId':_auditId, 'reportId':_reportId});

					utui.service.get(url, {}, null, _response.onGetReportSuccess, _response.onGetReportError);
				},

				// ----------------------------------------------------
				// Gets all the missing URLs for the specified audit and report
				getMissing: function(page) {
					var bucket = 'missing',
						url = _addParamsToURL(utui.service.restapis.AUDITS_REPORT_MISSING, {'auditId':_auditId, 'reportId':_reportId});

					utui.service.get(url, {page:page, size:_numItemsToReturn}, null,
						function(data) {
							_response.onGetListSuccess(data, bucket);
						},
						function(status, response){
							_response.onGetListError(bucket, response);
						}
					);
				},

				// ----------------------------------------------------
				// Gets all the error URLs for the specified audit and report
				getErrors: function(page) {
					var bucket = 'errors',
						url = _addParamsToURL(utui.service.restapis.AUDITS_REPORT_ERRORS, {'auditId':_auditId, 'reportId':_reportId});

					utui.service.get(url, {page:page, size:_numItemsToReturn}, null,
						function(data) {
							_response.onGetListSuccess(data, bucket);
						},
						function(status, response){
							_response.onGetListError(bucket, response);
						}
					);
				},

				// ----------------------------------------------------
				// Gets all the unmanaged URLs for the specified audit and report
				getUnmanaged: function(page) {
					// We create an 'unmanaged' bucket to use the same UI pattern that the other URL calls use, but Unmanaged Tags don't actually have a separate bucket - URLs in other buckets may also contain unmanaged tags
					// We will use the bucket attribute from the URLs returned from this call to display info in the 'category' column of the Unmanaged Tags report section
					var bucket = 'unmanaged',
						url = _addParamsToURL(utui.service.restapis.AUDITS_REPORT_UNMANAGED, {'auditId':_auditId, 'reportId':_reportId});
					utui.service.get(url, {page:page, size:_numItemsToReturn}, null,
						function(data) {
							_response.onGetListSuccess(data, bucket);
						},
						function(status, response){
							_response.onGetListError(bucket, response);
						}
					);
				},

				// ----------------------------------------------------
				// Gets all the environment URLs for the specified audit, report and environment
				getEnvironment: function(account, profile, environment, page) {
					var bucket = account + ' / ' + profile + ' / ' + environment,
						url = _addParamsToURL(utui.service.restapis.AUDITS_REPORT_ENVIRONMENT, {'auditId':_auditId, 'reportId':_reportId, 'reportaccount':account, 'reportprofile':profile, 'environment':environment});

					utui.service.get(url, {page:page, size:_numItemsToReturn}, null,
						function(data) {
							_response.onGetListSuccess(data, bucket);
						},
						function(status, response){
							_response.onGetListError(bucket, response);
						}
					);
				}
			}

			// --------------------------------------------------------
			var _response = {
				// ----------------------------------------------------
				onGetReportSuccess: function(data) {
					// Generate the accordions
					if (!$.isEmptyObject(data)) {
						_report = data;

						var content = '',
							environments = _report.environments || {},
							emails = _report.notify_emails || [];

						// Show any audit errors
						$('.reportBody', _context).prepend(_view.reportSitemapErrors(_report.sitemaps));

						// Set summary data
						$('#report_date', _context).html(utui.util.date.getGMTimeStringFromTimestamp(_report.updated));

						for (var i=0; i<emails.length; i++) {
							$('#report_notify_emails', _context).append(_view.reportRecipients(emails[i]));
						}

						$('#report_results', _context).html(_view.reportResults(_report));

						$('#report_status', _context).html(_getReportStatus(_report));

						// Set Environment summary data
						content = _view.environmentSummary(localize.t('tiq.reports.error.not_tagged'), _report.utag_missing_count);
						content += _view.environmentSummary(localize.t('tiq.reports.error.page_not_found'), _report.error_count);

						// Enviornments
						for (var account in environments) {
							for (var profile in environments[account]) {
								for (var target in environments[account][profile]) {
									var url_count = environments[account][profile][target].url_count;
									content += _view.environmentSummary(account + ' / ' + profile + ' / ' + target, url_count);
								}
							}
						}

						$('#site_audit_report', _context).find('.siteAuditSummaryEnvironmentsTable').append(content);

						// Set the accordions
						var accordions = '',
							id;

						// Add unmanaged tags accordion
						if (_report.unmanaged_urls_count > 0) {
							id = _namespace + '_' + utui.util.getContainerId() + '_section';
							accordions += _view.accordionSection(id, localize.t('tiq.reports.tags_not_managed_by'), _report.unmanaged_urls_count, 'unmanaged');
							_containerMap[id] = "unmanaged";
						}

						// Add missing and errors accordions
						if (_report.utag_missing_count > 0) {
							id = _namespace + '_' + utui.util.getContainerId() + '_section';
							accordions += _view.accordionSection(id, localize.t('tiq.reports.num_pages_not_managed_by', {count:_report.utag_missing_count == 1}), _report.utag_missing_count);
							_containerMap[id] = "missing";
						}

						if (_report.error_count > 0) {
							id = _namespace + '_' + utui.util.getContainerId() + '_section';
							accordions += _view.accordionSection(id, localize.t('tiq.reports.num_pages_not_reached', {count:_report.error_count == 1}), _report.error_count);
							_containerMap[id] = "errors";
						}

						// Environments
						for (var account in environments) {
							for (var profile in environments[account]) {
								for (var target in environments[account][profile]) {
									var url_count = environments[account][profile][target].url_count,
										title = account + ' / ' + profile + ' / ' + target;

									id = _namespace + '_' + utui.util.getContainerId() + '_section';
									accordions += _view.accordionSection(id, localize.t('tiq.reports.num_pages_managed_by', {count:url_count}) + ' ' + title, url_count);
									_containerMap[id] = title;
								}
							}
						}

						$('.reportDetails', _context).append(accordions);


						// Bind the UI events
						_bindAccordionUIEvents();

						// Trigger a click event to expand the first report section
						$('.reportDetails', _context).find('.reportDetails_sectionHeader:first').trigger('click');

					} else {
						_response.onGetReportError();
					}
				},

				// ----------------------------------------------------
				onGetReportError: function(status, response) {
					if (_isAccessDenied(response)) {
						return;
					}

					var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_load_report'));

					_notification.show(errorMsg);
				},

				// ----------------------------------------------------
				onGetListSuccess: function(data, bucket) {
					if (!$.isEmptyObject(data) && $.isArray(data.url_list)) {
						_addContentToAccordion(bucket, data.url_list, data.has_more);

					} else {
						_response.onGetListError(bucket);
					}
				},

				// ----------------------------------------------------
				onGetListError: function(bucket, response) {
					if (_isAccessDenied(response)) {
						return;
					}

					var errorMsg = _getErrorFromResponse(response, localize.t('tiq.reports.error.unable_to_load_urls'));

					_notification.show(errorMsg);

					// Need to auto close the accordion if there is no content
					var $accordion = $('#' + _getContainerIdFromValue(bucket), _context);

					// Close the accordion if there is no content
					if ($accordion.find('.siteAuditTable').is(':empty')) {
						$accordion.find('.reportDetails_sectionHeader').trigger('click');
					}
				}
			}

			// --------------------------------------------------------
			var _view = {
				reportBody: function() {
					var v = '';

					v += '<div id="site_audit_report">';
					v += '	<div class="siteAuditError"></div>';

					v += '	<div class="reportWrapper">';

					if (!_isModal) {
						v += '		<div class="reportHeader">';
						v += '			<img class="tealium_logo" src="img/utui/tealium_iq_logo_small.png" />';
						v += '			<div id="audit_title" class="reportHeader_title"></div>';
						v += '		</div>';
					}

					v += '		<div class="reportBody">';
					v += '			<div class="reportSummary">';
					v += '				<div class="contentArea">';
					v += '					<table class="contentAreaTable siteAuditSummaryHeaderTable">';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.date') + '</td>';
					v += '							<td id="report_date" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.status') + '</td>';
					v += '							<td id="report_status" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.recipients') + '</td>';
					v += '							<td id="report_notify_emails" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '						<tr>';
					v += '							<td class="contentTableLabel">' + localize.t('tiq.reports.results') + '</td>';
					v += '							<td id="report_results" class="contentTableValue"></td>';
					v += '						</tr>';
					v += '					</table>';
					v += '				</div>';

					v += '				<div class="contentArea">';
					v += '					<table class="contentAreaTable siteAuditSummaryEnvironmentsTable">';
					v += '						<tr>';
					v += '							<th>' + localize.t('tiq.reports.environments') + '</th>';
					v += '							<th class="numricalData">' + localize.t('tiq.reports.pages') + '</th>';
					v += '						</tr>';
					v += '					</table>';
					v += '				</div>';

					v += '				<div class="contentArea siteAuditKey">';
					v += '					<div class="siteAuditKey_showRemoved">';
					v += '                      <input id="show_removed" type="checkbox"/> <label for="show_removed">' + localize.t('tiq.reports.only_display_changes') + '</label>';

					if (_isModal) {
						v += '                      <a href="#" onclick="common.utils.openWindow(\'report.html?aid=' + _currentAuditId + '&rid=' + _currentReportId + '\'); return false;" class="btn btn-small">' + localize.t('tiq.reports.view_full_screen') + '</a>';
					}

					v += '                  </div>';
					v += '				</div>';
					v += '			</div>';

					v += '			<div class="reportDetails"></div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				reportRecipients: function(email) {
					return '<a href="mailto:' + email + '" class="siteAuditRecipient">' + email + '</a>';
				},

				// ----------------------------------------------------
				reportResults: function(report) {
					var v = '',
						isReportComplete = _isReportComplete(report);

					v += '<div>' + localize.t('tiq.reports.num_pages_listed', {count:report.url_total}) + '</div>';
					if (isReportComplete) {
						v += '<div>' + localize.t('tiq.reports.detected_num_profiles', {count:_getTargetCount(report.environments)}) + '</div>';
					}
					if (isReportComplete && report.previous_report_id) {
						v += '<div>' + localize.t('tiq.reports.detected_num_pages_since_last', {count:report.added_url_count}) + '</div>';
						v += '<div>' + localize.t('tiq.reports.missing_num_pages_since_last', {count:report.removed_url_count}) + '</div>';
					}
					if (isReportComplete && (report.unmanaged_urls_count !== null)) {
						v += '<div>' + localize.t('tiq.reports.detected_num_pages_with_unmanaged', {count:report.unmanaged_urls_count}) + '</div>';
					}
					if (isReportComplete && (report.unmanaged_tags_count !== null)) {
						v += '<div>' + localize.t('tiq.reports.detected_num_unique_unmanaged', {count:report.unmanaged_tags_count}) + '</div>';
					}
					return v;
				},

				// ----------------------------------------------------
				reportSitemapErrors: function(sitemaps) {
					var v = '';

					// Check to see if any error occurred
					if ($.isArray(sitemaps) && sitemaps.length > 0) {
						var errorList = [],
							errorMsg = '';

						for (var i=0; i<sitemaps.length; i++) {
							var map = sitemaps[i];
							if (map.error_code !== 0) {
								errorList.push(map);
							}
						}

						if (errorList.length > 0) {
							v += '<div class="siteAuditSummaryError">';
							v += '	<div class="errorContent">';
							v += '		<div class="errorWarningSign"><i class="icon-warning-sign"></i></div>';
							v += '		<div class="errorBody">';
							if (errorList.length <= 1) {
								v += 			localize.t('tiq.reports.error.unable_to_process_sitemap') + ' <a href="' + errorList[0].url + '" target="_blank">' + errorList[0].url + '</a>.';
							} else {
								v += 			localize.t('tiq.reports.error.unable_to_process_sitemaps');
								v += '			<ul>';
								for (var i=0; i<errorList.length; i++) {
									v += '				<li><a href="' + errorList[i].url + '" target="_blank">' + errorList[i].url + '</a></li>';
								}
								v += '			</ul>';
							}
							v += '		</div>';
							v += '	</div>';
							v += '</div>';
						}
					}

					return v;
				},

				// ----------------------------------------------------
				environmentSummary: function(title, count) {
					var v = '';

					v += '<tr>';
					v += '	<td title="' + title + '">' + title + '</td>';

					if (_isReportComplete(_report)) {
						v += '	<td class="numricalData"> ' + count;
						v += '		<span class="percentValue">' + utui.util.getPercentNum(count, _report.url_total, true) + '%</span>';
						v += '	</td>';
					} else {
						v += '  <td class="numericalData">N/A</td>';
					}
					v += '</tr>';

					return v;
				},

				// ----------------------------------------------------
				accordionSection: function(id, title, count, sectionType) {
					var isUnmanagedSection = (sectionType && sectionType === 'unmanaged') ? true : false;

					var v = '';

					v += '<div id="' + id + '" class="reportDetails_section">';
					v += '	<a name="" />';
					v += '	<div class="reportDetails_sectionHeader">';
					v += '  <i class="icon-caret-right"></i>';
					v += '		<span class="reportDetails_sectionHeader_title">' + title + '</span>';

					if (_isReportComplete(_report)) {
						v += '		<span class="reportDetails_sectionHeader_count">' + localize.t('tiq.reports.num_pages', {count:count}) + '</span>';
						v += '		<span class="reportDetails_sectionHeader_percent">' + utui.util.getPercentNum(count, _report.url_total, true) + '%</span>';
					} else {
						v += '		<span class="reportDetails_sectionHeader_count">N/A</span>';
					}

					v += '		<span class="reportDetails_sectionHeader_lastAudit">' + localize.t('tiq.reports.' + (isUnmanagedSection ? 'utag_status' : 'last_scan_status')) + '</span>';

					v += '	</div>';
					v += '	<div class="reportDetails_sectionBody" style="display:none;">';
					v += '		<div class="reportDetails_sectionBody_content">';
					v += '			<table class="siteAuditTable ' + (isUnmanagedSection ? 'siteAuditTableUnmanagedTags':'') +'"></table>';
					v += '		</div>';
					v += '		<div class="reportDetails_sectionBody_loadMore">';
					v += '			<a href="#">';
					v += '				<span class="reportDetails_sectionBody_loadMore_text">' + localize.t('tiq.reports.load_more') + '</span>';
					v += '			</a>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				accordionItem: function(data, sectionBucket) {
					// Passing in sectionBucket as Unmanaged Tags can fall into multiple buckets, but UI logic uses 'bucket' (var bucket = 'unmanaged' in onGetListSuccess) to organize data into accordions, etc.
					var v = '',
						title = (!$.isEmptyObject(data.title)) ? data.title : '',
						bucket,
						utagStatus;

					v += '<tr>';
					v += '	<td class="siteAuditWebPageURL">';

					if (title !== '') {
						v += '      <span title="' + title + '">' + title + '</span><br />';
					}

					v += '	    <span title="' + data.url + '"><a href="' + data.url + '" target="_blank">' + data.url + '</a></span>';
					v += '  </td>';

					if (sectionBucket !== 'unmanaged') {
						if (!$.isEmptyObject(data.previous) && data.previous.bucket !== null && data.previous.bucket != data.bucket) {
							bucket = data.previous.bucket.replace(/\//g, ' / ');
							utagStatus = _utagStatusMap[bucket] || bucket;
							var changedFrom = localize.t('tiq.reports.changed_from');
							v += '	<td class="siteAuditWebPageStatus" title="' + changedFrom + ' ' + utagStatus + '"><span>' + changedFrom + '</span> ' + utagStatus + '</td>';
						} else {
							v += '	<td class="siteAuditWebPageStatus"></td>';
						}
					} else {
						utagStatus = _utagStatusMap[data.bucket] || data.bucket;
						v += '	<td class="siteAuditUnmanagedCategory" title="' + utagStatus + '">' + utagStatus + '</td>';
					}

					v += '</tr>';

					return v;
				},

				// ----------------------------------------------------
				accordionItemUnmanagedTagDetails: function(unmanagedTagObj, containerId, isModal) {
					var v = '';;

					v += '<tr>';
					v += '  <td class="siteAuditUnmanagedTagDetails">';
					v += '  <div class="unmanaged_tag_info">';

					// Logo and Title
					v += '      <div class="unmanaged_tag_info_logo">';
					v += '		<img src="' + utui.config.manageList[unmanagedTagObj.tag_id].logo + '?v=' + utui_version + '">';
					v += '      </div>';
					v += '      <div class="unmanaged_tag_info_name">';
					v += '          <span>' + unmanagedTagObj.tag_name + '</span><br/><span class="unmanaged_tag_info_name_url_count">' + localize.t('tiq.reports.num_urls', {count:unmanagedTagObj.urls.length}) + '</span>';
					v += '      </div>';

					// Tag parameters
					v += '      <div class="unmanaged_tag_params_table"><table><tbody>';
					for (var key in unmanagedTagObj.utui_config) {
						v += '      <tr class="unmanaged_tag_params_row">';
						v += '          <td class="unmanaged_tag_params_cell">' + key + '</td><td class="unmanaged_tag_params_cell unmanaged_tag_params_value">' + unmanagedTagObj.utui_config[key] + '</td>';
						v += '      </tr>';
					}
					v += '      </tbody></table></div>';

					if (_isModal) {
						// Add Tag button
						v += '      <div class="add_unmanaged_tag">';
						v += '      <a href="#" id="add_unmanaged_tag_' + containerId + '" class="addTagBtn" data-tagobj=\'{"id":"' + unmanagedTagObj.tag_id  + '", "category":"' + utui.manage.getTagCategoryById(unmanagedTagObj.tag_id) + '", "name": "' + utui.manage.getTagNameById(unmanagedTagObj.tag_id) + '"}\' ><span class="btn btn-small btn-success"><i class="icon-plus"></i> ' + localize.t('tiq.reports.add') + ' </span></a>';
						v += '      <span id="added_unmanaged_tag_' + containerId + '" style="display:none" class="btn btn-small disabled">' + localize.t('tiq.reports.added') + '</span>'
						v += '      </div>';

						// Configure Tag Notification
						v += '      <div id="configure_unmanaged_tag_' + containerId + '" class="configure_unmanaged_tag_notification" style="display: none">' + localize.t('tiq.reports.tag_has_been_added') + ' <a href="#"><span>' + localize.t('tiq.reports.close_and_configure_tag') + '</span></a></div>'
					}

					v += '      </div>';
					v += '  </td>';
					v += '</tr>';

					return v;
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(auditId, reportId, isModal, context) {
					_reset();

					_auditId = auditId;
					_reportId = reportId;
					_isModal = isModal; // Is this needed?
					_context = context;
					_audit = _findAuditByID(auditId);

					if (isModal) {
						// Show the dialog
						_dialogs.showDialog(_namespace, _audit.title, [], _view.reportBody());
					} else {
						$('.siteAuditReport', _context).append(_view.reportBody());

						// Populate the title
						$('#audit_title', _context).html(_audit.title);
					}

					// Bind UI
					_bindGlobalUIEvents();

					// Load the audit report details
					_request.getReport();

				}
			}

			return _public;
		}
	}

	function _showHelpTab() {
		// ----------------------------------------------------
		var _namespace = 'reports';

		// ----------------------------------------------------
		var _articles = [
			{
				id: 0,
				title: localize.t('tiq.reports.help.0.title'),
				type: 'document',
				linkHref: common.community.site_scan,
				isExternalLink: true
			}
		];

		var _context = {
			header: localize.t('tiq.reports.help.header'),
			body: localize.t('tiq.reports.help.body')
		};

		var _section = 'audits';

		utui.help.initHelpTab(_namespace, _articles, _context, _section);
	}

	// Public API
	var _public = {
		// ------------------------------------------------------------
		load: function() {

		},

		// ------------------------------------------------------------
		init: function() {
			// Reload audits when a profile is loaded
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _eventHandlers.onProfileLoaded, this);

			// Reload if account is now active
			utui.util.pubsub.subscribe(utui.constants.reports.AUDITS_ACCOUNT_STATUS_CHANGED, _eventHandlers.onAccountStatusChanged, this);

			_bindGlobalUIEvents();

			_showHelpTab();
		},

		// ------------------------------------------------------------
		show: function() {
			_hasBeenShown = true;

			// Reset the global values
			_reset();

			// Get the list of audits
			_request.getAuditList();
		},

		// ------------------------------------------------------------
		getAudits: function(){
			return _audits;
		},

		// ------------------------------------------------------------
		// Expose the server command via the JS command design pattern
		// usage: utui.reports.audits.execute('create', {name:'value'});
		execute: function(name){
			_loader.show();

			_request[name] && _request[name].apply(_request, [].slice.call(arguments,1));
		},

		// ------------------------------------------------------------
		// API so the stand-alone audit report page data can be accessed
		viewReport: function(auditId, reportId, context) {
			utui.util.pubsub.publish(utui.constants.views.AUDIT_DETAILS, {action:utui.constants.views.AUDIT_DETAILS});
			_dialogs.auditReport().show(auditId, reportId, false, context);
		}
	};

	return _public;
}();

utui.reports.load();

utui.siteVerify = function () {
//	"use strict";
	// PRIVATE
	// --------------------------------------------------------
	var _namespace = 'site_verify',
		_$header = $('#tabs-dashboard').find('#tabs_site_verify'),
		_containerList = 'site_verify_list',
		_$content = $('#tabs-dashboard').find('#' + _containerList),
		_errorCodeMap = {
			success_run_test_now: localize.t('tiq.dashboard.verify_data_layer.error.success_run_test_now'),
			error_run_test_now: localize.t('tiq.dashboard.verify_data_layer.error.error_run_test_now')
		},
		_constants = {
			SUCCESS: 'Success'
		};


	// --------------------------------------------------------
	function _showHelpTab() {
		var _articles = [
				{
					id: 0,
					title: localize.t('tiq.dashboard.verify_data_layer.resource.what_is_verify_data_layer'),
					type: 'document',
					linkHref: common.community.verify_data_layer_overview,
					isExternalLink: true
				},
				{
					id: 1,
					title: localize.t('tiq.dashboard.verify_data_layer.resource.create_test_with_tealium_tools'),
					type: 'document',
					linkHref: common.community.verify_data_layer_test_recorder,
					isExternalLink: true
				}
			],
			_context = {
				header: localize.t('tiq.dashboard.verify_data_layer.resource.verify_data_layer'),
				body: localize.t('tiq.dashboard.verify_data_layer.resource.verify_data_layer_intro')
			};

		utui.help.initHelpTab(_namespace, _articles, _context);
	}

	// --------------------------------------------------------
	// @param "viewType" - tile || row
	function _setViewState(viewType) {
		var idHash = CryptoJS.SHA256(utui.login.email).toString();
		var localData = JSON.parse(utui.util.storage.loadLocal(idHash));

		localData.tabState[utui.siteVerify.id].itemview = viewType;

		utui.util.storage.storeLocal(idHash, JSON.stringify(localData));
	}

	// --------------------------------------------------------
	function _getViewState() {
		var view = 'row'; // default to row view
		var idHash = CryptoJS.SHA256(utui.login.email).toString();
		if (typeof utui.util.storage.loadLocal(idHash) === 'undefined') {
			return view;
		}

		var localData = JSON.parse(utui.util.storage.loadLocal(idHash));
		if (localData && localData.hasOwnProperty('tabState')) {
			if (localData.tabState[utui.siteVerify.id].itemview) {
				view = localData.tabState[utui.siteVerify.id].itemview;
			}
		}

		return view;
	}

	// --------------------------------------------------------
	function _hideAccordion() {
		_$content.find('.viewItem').removeClass('selected not-selected');
		_tetris.removeExpandedView();
	}

	// --------------------------------------------------------
	function _getTestConfigKey($el, context) {
		if (!context) {
			return $el.attr('data-tile-key');
		}

		return $el.closest('.' + context).attr('data-tile-key');
	}

	// --------------------------------------------------------
	function _reset() {
		_public.test_configs = null;
		_public.deleted_test_configs = {};
	}

	// --------------------------------------------------------
	function _getVisibleTestConfigs() {
		var $visibleTestConfigs = _$content.find('.viewItem:visible'),
			testConfigArray = [],
			id;

		$visibleTestConfigs.each(function (e) {
			id = $(this).data('tile-key');
			if (typeof id !== 'undefined') {
				testConfigArray.push(_public.test_configs[id]);
			}
		});

		testConfigArray.sort(_dynamicSort(String('title')));

		return testConfigArray;
	}

	// --------------------------------------------------------
	function _dynamicSort(property) {
		var sortOrder = 1;
		if (property[0] === "-") { // Sort in Descending Order i.e. '-name'
			sortOrder = -1;
			property = property.substr(1);
		}

		return function (a, b) {
			var aValueLowered = a[property].toLowerCase(),
				bValueLowered = b[property].toLowerCase(),
				result = (aValueLowered < bValueLowered) ? -1 : (aValueLowered > bValueLowered) ? 1 : 0;

			return result * sortOrder;
		};
	}

	// --------------------------------------------------------
	function _expandSelectedTestConfig(id) {
		if (id) {
			var $testConfig = _$content.find('#' + _namespace + '_' + id),
				$container = _$content.closest('#' + _namespace + '_container');

			// Expand selected test config
			$testConfig.trigger('click');

			// Scroll to selected test config
			setTimeout(function () {
				$container.animate({
					scrollTop: $testConfig.offset().top - $container.offset().top + $container.scrollTop()
				}, 'slow');
			}, 300);
		}
	}

	// --------------------------------------------------------
	function _getResultSummaryStatusIcon(status) {
		if (status === 'Success') {
			return '<i class="icon-circle success"></i> ';
		} else {
			return '<i class="icon-ban-circle failed"></i> ';
		}
	}

	// --------------------------------------------------------
	var _eventHandlers = {
		// --------------------------------------------------------
		onAddTestBtnClick: function () {
			utui.siteVerify.showTealiumTools();
		},

		// --------------------------------------------------------
		onRefreshBtnClick: function () {
			utui.define.dataLayerSpecs.getDataLayerSpecsForRefresh(_request.getTestConfigsForRefresh);
		},

		// --------------------------------------------------------
		onFilterSearchInput: function (event) {
			var input = _.escape($(this).val().toLowerCase()),
				objInView,
				resultsCount = 0,
				$searchResults = _$header.find('#' + _namespace + '_filterSearch_results'),
				v = '';

			// we want to parse the data-tile-key from each element visible on screen, then fetch its data object
			objInView = _getVisibleTestConfigs();
			// Show search results
			$searchResults.show();
			utui.util.openModal($searchResults);

			if (input.length > 0) {
				resultsCount = 0;

				for (var entry in objInView) {
					if (!objInView.hasOwnProperty(entry)) continue;

					var testConfig = objInView[entry],
						title = testConfig.title ? testConfig.title.toLowerCase() : '',
						desc = testConfig.description ? testConfig.description.toLowerCase() : '',
						uid = '' + testConfig.id;

					if (title.indexOf(input) > -1) {
						resultsCount++;
						v += _view.filterResultItem(testConfig, input);
					} else if (desc.indexOf(input) > -1) {
						resultsCount++;
						v += _view.filterResultItem(testConfig, input);
					} else if (uid.indexOf(input) > -1) {
						resultsCount++;
						v += _view.filterResultItem(testConfig, input);
					}
				}

				if (resultsCount === 0) {
					v += _view.filterNoResultsFound(input);
				}

				$searchResults.html(v);
				return;
			}
			$searchResults.html('');
		},

		// --------------------------------------------------------
		onFilterSearchResultClick: function (event) {
			var id = $(this).attr('data-id'),
				$searchResults = _$header.find('#' + _namespace + '_filterSearch_results');

			// Hide search results and expand selected test config
			$searchResults.fadeOut();
			utui.util.closeModal();
			_expandSelectedTestConfig(id);
		},

		// --------------------------------------------------------
		onGridViewBtnClick: function () {
			_setViewState('tile');
			// Highlight gridView button
			_$header.find('.' + _namespace + '-toggleview').removeClass('selected');
			$(this).addClass('selected');

			_$header.find('.accordion_header').slideUp();
			_hideAccordion();

			// Render grid layout
			_$content.find('.viewItem').removeClass('ds-row tetristile').addClass('ds-tile');
			_tetris.updateLayout();
		},

		// --------------------------------------------------------
		onListViewBtnClick: function () {
			_setViewState('row');
			// Highlight listView button
			_$header.find('.' + _namespace + '-toggleview').removeClass('selected');
			$(this).addClass('selected');

			_$header.find('.accordion_header').slideDown();
			_hideAccordion();

			// Render list layout
			_$content.find('.viewItem').removeClass('ds-tile tetristile').addClass('ds-row');
			_tetris.updateLayout();
		},

		// --------------------------------------------------------
		onTestElementClick: function (event) {
			var $el = $(this);

			// Hide accordion
			if ($el.hasClass('selected')) {
				_hideAccordion();
				return false;
			}

			// Show accordion
			var keyNum = _getTestConfigKey($el);
			_tetris.showExpandedView(keyNum);

			return false;
		},

		// --------------------------------------------------------
		onEditTestBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getTestConfigKey($el, 'accordionDetails'),
				testConfig = _public.test_configs[dataKey];

			// Edit Test Config
			if (testConfig) {
				utui.siteVerify.showAddMore(testConfig);
			}

		},

		// --------------------------------------------------------
		onRunTestNowBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getTestConfigKey($el, 'accordionDetails'),
				env = $el.data('env'),
				testConfig;

			if (dataKey) {
				testConfig = _public.test_configs[dataKey];
				if (testConfig) {
					_request.runTestConfigNow(testConfig._id, env);
					_$content.find('.js-dropdown-listing').hide();
				}
			}
		},

		// --------------------------------------------------------
		onDeleteTestBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getTestConfigKey($el, 'accordionDetails'),
				testConfig = _public.test_configs[dataKey],
				testTitle;

			// Delete Test Config
			if (testConfig) {
				testTitle = utui.util.safeEscape(testConfig.title);
				utui.adminlib.confirmDialog().show(_namespace, {action: localize.t('tiq.dashboard.verify_data_layer.delete'), confirm: localize.t('tiq.dashboard.verify_data_layer.are_you_sure', {test_title: testTitle}), title: localize.t('tiq.dashboard.verify_data_layer.confirm_delete', {test_title: testTitle})}, function () {
					_eventHandlers.onTestConfigDeleted(testConfig);
				});
			}
		},

		// --------------------------------------------------------
		onEditTestScriptBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getTestConfigKey($el, 'accordionDetails'),
				testConfig = _public.test_configs[dataKey];

			// Edit Test Config
			if (testConfig) {
				var $modalDialog = utui.siteVerify.showAddMore(testConfig);
				$modalDialog.find('#test_structure').trigger('click');
			}
		},

		// --------------------------------------------------------
		onDataLayerSpecsScopedLinkClick: function (event) {
			var $el = $(this),
				dataKey = $el.attr('data-key');

			if (dataKey) {
				utui.util.pubsub.publish(utui.constants.data_layer_specs.FOCUSED, '' + dataKey);
			}
		},

		// --------------------------------------------------------
		onViewAllTestsBtnClick: function (event) {
			var $el = $(this),
				dataKey = _getTestConfigKey($el, 'accordionDetails'),
				testConfig = _public.test_configs[dataKey];

			// View Test Results
			if (!$el.hasClass('disabled') && testConfig) {
				utui.siteVerify.showTestResults(testConfig);
			}
		},

		// --------------------------------------------------------
		onReportDateRunClick: function (event) {
			var $el = $(this),
				dataKey = $el.attr('data-test-run-id'),
				testConfig = _public.test_configs[_getTestConfigKey($el, 'accordionDetails')];

			if (testConfig && dataKey) {
				utui.siteVerify.showTestResults(testConfig, function () {
					$('.js-navtab[data-tab-id="' + dataKey + '"]').trigger('click');
				});
			}
		},

		// --------------------------------------------------------
		onTestConfigAdded: function (data) {
			if (data) {
				var testConfig = data.test_config;

				if (testConfig) {
					var id = testConfig.id;
					_public.test_configs[id] = testConfig;
					_public.refreshContent();
					_expandSelectedTestConfig(id);

					// Record additions in history
					utui.profile.setActionPerformed({
						action: utui.constants.test_configs.ADDED,
						data: {
							id: "" + id,
							name: testConfig.title,
							kind: utui.constants.test_configs.TYPE,
							operation: utui.constants.operation.ADDED,
							container : _containerList
						}
					}, true);
				}
			}
		},

		// --------------------------------------------------------
		onTestConfigUpdated: function (data) {
			if (data) {
				var testConfig = data.test_config;
				if (testConfig) {
					var id = testConfig.id;
					_public.test_configs[id] = testConfig;
					_public.refreshContent();
					_expandSelectedTestConfig(id);

					// Record updates in history
					utui.profile.setActionPerformed({
						action: utui.constants.test_configs.UPDATED,
						data: {
							id: "" + id,
							name: testConfig.title,
							kind: utui.constants.test_configs.TYPE,
							operation: utui.constants.operation.UPDATED,
							container: _containerList
						}
					}, true);
				}
			}
		},

		// --------------------------------------------------------
		onTestConfigDeleted: function (testConfig) {
			if (testConfig) {
				var deletedTestConfig = _public.test_configs[testConfig.id];

				// Set delete action and store deleted test config for save profile
				deletedTestConfig.action = utui.constants.operation.REMOVED;
				_public.deleted_test_configs[testConfig.id] = deletedTestConfig;

				delete _public.test_configs[testConfig.id];
				utui.util.pubsub.publish(utui.constants.test_configs.REMOVED, deletedTestConfig);
				_public.refreshContent();

				// Record deletes in history
				utui.profile.setActionPerformed({
					action: utui.constants.test_configs.REMOVED,
					data: {
						id: "" + deletedTestConfig.id,
						name: deletedTestConfig.title,
						kind: utui.constants.test_configs.TYPE,
						operation: utui.constants.operation.REMOVED,
						container: _containerList
					}
				}, true);
			}
		},

		// --------------------------------------------------------
		onProfileLoaded: function () {
			_reset();

			// Fetch test configs and refresh content
			if ((utui.config.currentTab === utui.dashboard.id && $('#my_site_site_verify_menu').parent().hasClass('selected'))
				|| (utui.config.currentTab === utui.define.id)) {
				_public.loadTestConfigs(_public.refreshContent);
			}
		},

		// --------------------------------------------------------
		onFocusedTestConfig: function (uid) {
			// Switch tabs
			$('#tabs').tabs('select', utui.dashboard.id);
			$('#my_site_site_verify_menu').trigger('click');

			// Find accordion to open
			_$content.find('.viewItem').each(function (index) {
				var $el = $(this);

				if ($el.attr('data-tile-key') === uid) {
					$el.trigger('click');

					var $container = _$content.closest('#' + _namespace + '_container');
					// Scroll to selected test config
					setTimeout(function () {
						$container.animate({
							scrollTop: $el.offset().top - $container.offset().top + $container.scrollTop()
						}, 'slow');
					}, 300);

					return false;
				}
			});
		}
	};

	// --------------------------------------------------------
	var _tetris = {
		// --------------------------------------------------------
		updateLayout: function () {
			_$content.tetris('.viewItem').updateLayout();
		},

		// --------------------------------------------------------
		removeExpandedView: function(doNotUpdateLayout) {
			if(doNotUpdateLayout) {
				return _$content.tetris('.viewItem').removeExpandedView(true);
			}
			return _$content.tetris('.viewItem').removeExpandedView();
		},

		// --------------------------------------------------------
		attachExpandedView: function(elIndex, $detailsView) {
			_$content.tetris('.viewItem').attachExpandedView(elIndex, $detailsView);
			_$content.css('height', '100%');

			// Provide enough height for the expanded accodion to be visible
			var $accordionDetails = _$content.find('.accordionDetails');
			if($accordionDetails.length) {
				var height = $accordionDetails.height();
				_$content.css("padding-bottom", height);
			}
		},

		// --------------------------------------------------------
		showExpandedView: function (id) {
			if (id) {
				// Global remove selected class on elements...
				_$content.find('.viewItem')
					.removeClass('selected')
					.addClass('not-selected');

				// Set Accordion contents and trigger selection
				var innerView = _view.accordionContent(id),
					$accordion = $('<div />', { class: 'accordionDetails', 'data-tile-key': id }).html(innerView),
					$element = _$content.find('.viewItem[data-tile-key="' + id + '"]'),
					elIndex = $element.index('.viewItem:visible');

				$element
					.removeClass('not-selected')
					.addClass('selected');

				_tetris.removeExpandedView(true);
				_tetris.attachExpandedView(elIndex, $accordion);

				_bindUI.accordionContent();
			}
		}
	};

	// --------------------------------------------------------
	var _view = {
		// --------------------------------------------------------
		contentBody: function () {
			var testConfigs = _public.test_configs,
				testConfigsLength = _.size(testConfigs),
				viewState = _getViewState(),
				testConfig, id, status, title, lastRunDate, lastRunClass, lastRunStatus, lastRunStatusIcon, lastRunFailed, resultReports, reportsObj,
				v = '';

			if (testConfigsLength > 0) {
				for (var i in testConfigs) {
					testConfig = testConfigs[i];
					id = testConfig.id;
					status = testConfig.status;
					title = utui.util.safeEscape(testConfig.title);
					resultReports = testConfig.result_reports;
					lastRunDate = localize.t('tiq.dashboard.verify_data_layer.not_yet_run');
					lastRunClass = ' not-run';
					lastRunStatus = '&mdash;';
					lastRunStatusIcon = '';
					lastRunFailed = '&mdash;';
					if (resultReports && resultReports.length > 0) {
						reportsObj = resultReports[0];
						lastRunDate = utui.util.date.getMiddleEndianDateFromDateString(reportsObj.date_run);
						lastRunClass = '';
						lastRunStatusIcon = _getResultSummaryStatusIcon(reportsObj.result_summary_status);
						if (reportsObj.no_of_checks != 0 && reportsObj.no_of_checks == reportsObj.expected_no_of_checks) {
							lastRunStatus = localize.t('tiq.dashboard.verify_data_layer.complete');
							lastRunFailed = reportsObj.no_of_fails;
						} else if (reportsObj.expected_no_of_checks == 0 && reportsObj.result_summary_status === _constants.SUCCESS) {
							lastRunStatus = localize.t('tiq.dashboard.verify_data_layer.complete');
						} else {
							lastRunStatus = localize.t('tiq.dashboard.verify_data_layer.errors_occurred');
						}
					}

					v += '  <div id="' + _namespace + '_' + id + '" class="viewItem ds-' + viewState + ' tetristile" data-tile-key="' + i + '">';
					v += '		<div class="viewItem-inner">';
					v += '      	<div class="container_test_title ellipsis" title="' + title + '">' + title + '</div>'; //TODO: mco notify automation that I cannot use container_title
					v += '      	<div class="container_last_run_date ellipsis' + lastRunClass + '">' + lastRunStatusIcon + '&nbsp;' + lastRunDate + '</div>';
					v += '      	<div class="container_last_run_status">' + lastRunStatus + '</div>';
					v += '      	<div class="container_last_run_failed">' + lastRunFailed + '</div>';
					v += '			<div class="container_uid">' + id + '</div>';
					v += '		</div>';
					v += '  </div>';
				}
			} else {
				v += '	<div class="noItemsToShow">';
				v += '		<span>' + localize.t('tiq.dashboard.verify_data_layer.add_a_new_test') + '</span>';
				v += '		<i class="icon-hand-up"></i>';
				v += '	</div>';
			}

			return v;
		},

		// --------------------------------------------------------
		accordionContent: function (id) {
			var testConfig = _public.test_configs[id],
				title = testConfig.title || '',
				description = testConfig.description || '',
				recipients = (testConfig.recipients) ? testConfig.recipients.join(', ') : [],
//				browsers = (testConfig.browsers) ? testConfig.browsers.join(', ') : [],
				steps = (testConfig.steps) ? testConfig.steps : [],
				numSteps = steps.length,
				dataLayerSpecs = utui.define.dataLayerSpecs.getCurrentDataLayerSpecs(),
				dataLayerSpec,
				numDataSourcesPerSpec = 0,
				stepsObj,
				resultReports = (testConfig.result_reports) ? testConfig.result_reports : [],
				numReports = resultReports.length,
				enableDisableReports = (numReports > 0) ? '' : ' disabled',
				reportsObj,
				devAliasName = localize.t('tiq.dashboard.verify_data_layer.environment', {env: utui.targets.aliasDisplayName('dev')}),
				qaAliasName = localize.t('tiq.dashboard.verify_data_layer.environment', {env: utui.targets.aliasDisplayName('qa')}),
				prodAliasName = localize.t('tiq.dashboard.verify_data_layer.environment', {env: utui.targets.aliasDisplayName('prod')}),
				pageDefault = localize.t('tiq.dashboard.verify_data_layer.page_default'),
				v = '';

			v += '<div class="accordion-context-container">';
			v += '	<div class="contextSectionHeader">' + localize.t('tiq.dashboard.verify_data_layer.uid') + '<div class="contextSectionInfo contextSectionUID">' + id + '</div></div>';
			v += '  <div class="contextActionButtons">';
			if (testConfig._id) {
				v += '		<div id="' + _namespace + '_run_test_now_options">';
				v += '			<a href="#" id="' + _namespace + '_runTestBtn" class="btn btn-small js-dropdown-button"><i class="icon-play success"></i> ' + localize.t('tiq.dashboard.verify_data_layer.run_test_using') + ' <i class="icon-caret-down"></i></a>';
				v += '			<div class="run-test-env menu_list_container js-dropdown-listing">';
				v += '				<div class="menulistitem"><a class="menulistfont run-test-now ellipsis" data-env="default"><span title="' + pageDefault + '">' + pageDefault + '</span></a></div>';
				v += '				<div class="menulistitem"><a class="menulistfont run-test-now ellipsis" data-env="prod"><span class="env_alias_prod" title="' + prodAliasName + '">' + prodAliasName + '</span></a></div>';
				v += '				<div class="menulistitem"><a class="menulistfont run-test-now ellipsis" data-env="qa"><span class="env_alias_qa" title="' + qaAliasName + '">' + qaAliasName + '</span></a></div>';
				v += '				<div class="menulistitem"><a class="menulistfont run-test-now ellipsis" data-env="dev"><span class="env_alias_dev" title="' + devAliasName + '">' + devAliasName + '</span></a></div>';
				v += '    		</div>';
				v += '		</div>';
			} else {
				v += '      <a href="#" id="' + _namespace + '_runTestBtn" class="btn btn-small disabled" title="' + utui.tooltip.site_verify.run_test_now + '"><i class="icon-play success"></i> ' + localize.t('tiq.dashboard.verify_data_layer.run_test_using') + '</a>';
			}
			v += '      <a href="#" id="' + _namespace + '_deleteTestBtn" class="btn btn-small i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.dashboard.verify_data_layer.delete_test') + '</a>';
			v += '  </div>';
			v += '</div>';

			v += '<div class="accordion-content-container">';
			v += '  <div class="main-container">';
			v += '      <div class="main-body container-fluid">';
			v += '			<div class="row-fluid">';
			v += '				<div class="span12">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleText">' + localize.t('tiq.dashboard.verify_data_layer.test_configuration') + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" id="' + _namespace + '_editTestBtn" class="btn btn-small i-color-edit" data-key="' + id + '"><i class="icon-edit"></i> ' + localize.t('tiq.dashboard.verify_data_layer.edit') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div class="contentBlockTitle">' + localize.t('tiq.dashboard.verify_data_layer.properties') + '</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.dashboard.verify_data_layer.title') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue ellipsis" title="' + title + '">' + title + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.dashboard.verify_data_layer.description') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue ellipsis" title="' + description + '">' + description + '</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '          		<div>';
			v += '              		<div class="contentTableLabel">' + localize.t('tiq.dashboard.verify_data_layer.recipients') + '</div>';
			v += '              		<div class="contentValueContainer">';
			v += '                  		<div class="contentValue ellipsis" title="' + recipients + '">' + recipients + '</div>';
			v += '              		</div>';
			v += '          		</div>';
//			v += '          		<div>';
//			v += '              		<div class="contentTableLabel">' + localize.t('tiq.dashboard.verify_data_layer.browsers') + '</div>';
//			v += '              		<div class="contentValueContainer">';
//			v += '                  		<div class="contentValue ellipsis" title="' + browsers + '">' + browsers + '</div>';
//			v += '              		</div>';
//			v += '          		</div>';
			v += '				</div>';
			v += '			</div>';
			v += '      </div>';

			v += '      <div class="container-fluid data-layer-specs">';
			v += '			<div class="row-fluid">';
			v += '				<div class="span12">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleExpander"><i class="icon-caret-right"></i></div>';
			v += '              		<div class="titleText">' + localize.t('tiq.dashboard.verify_data_layer.test_steps') + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" id="' + _namespace + '_editTestScriptBtn" class="btn btn-small i-color-edit"><i class="icon-edit"></i> ' + localize.t('tiq.dashboard.verify_data_layer.edit') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '      			<div class="container-fluid">';
			v += '          			<div class="row-fluid mapping-row-title">';
			v += '              			<div class="span4">' + localize.t('tiq.dashboard.verify_data_layer.step') + '</div>';
			v += '              			<div class="span4">' + localize.t('tiq.dashboard.verify_data_layer.data_layer_spec') + '</div>';
			v += '              			<div class="span1">' + localize.t('tiq.dashboard.verify_data_layer.type') + '</div>';
			v += '              			<div class="span3 alignright">' + localize.t('tiq.dashboard.verify_data_layer.data_sources') + '</div>';
			v += '          			</div>';
			v += '          		</div>';
			v += '          		<div class="tagMappedTableHeader"></div>';
			v += '          		<div class="contentSectionBody scrollSection">';
			v += '              		<div class="contentBlock">';
			v += '                  		<div class="contentSectionBodyContent">';

			var spec_id;
			for (var i = 0; i < numSteps; i++) {
				stepsObj = steps[i];
				dataLayerSpec = dataLayerSpecs[stepsObj.data_spec_seq_id];
				if (dataLayerSpec) {
					if (dataLayerSpec.data_sources) {
						numDataSourcesPerSpec = dataLayerSpec.data_sources.length;
					}
					spec_id = dataLayerSpec.id;
					v += '      						<div class="container-fluid">';
					v += '          						<div class="row-fluid">';
					v += '                          			<div class="span4 ellipsis" title="' + stepsObj.title + '">' + stepsObj.title + '</div>';
					v += '                          			<div class="span4 ellipsis" title="' + dataLayerSpec.title + '">' + dataLayerSpec.title + ' (' + spec_id + ')</div>';
					v += '                          			<div class="span1 ellipsis" title="' + dataLayerSpec.type + '">' + dataLayerSpec.type + '</div>';
					v += '                          			<div class="span3 alignright ellipsis" title="' + numDataSourcesPerSpec + '">' + numDataSourcesPerSpec;
					v += '                          				<span class="data-layer-specs-scoped-link">';
					v += '                              				<a class="nostyle" href="#" data-key="' + spec_id + '"><i class="icon-reply"></i></a>';
					v += '                          				</span>';
					v += '										</div>';
					v += '									</div>';
					v += '                      		</div>';
				}
			}

			v += '                  		</div>';
			v += '              		</div>';
			v += '          		</div>';
			v += '				</div>';
			v += '			</div>';
			v += '      </div>';

			v += '      <div class="container-fluid test-report-runs">';
			v += '			<div class="row-fluid">';
			v += '				<div class="span12">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleExpander"><i class="icon-caret-right"></i></div>';
			v += '              		<div class="titleText">' + localize.t('tiq.dashboard.verify_data_layer.reports') + '</div>';
			v += '              		<div class="titleCount">' + numReports + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" id="' + _namespace + '_viewAllTestsBtn" class="btn btn-small i-color-edit' + enableDisableReports + '"><i class="icon-edit"></i> ' + localize.t('tiq.dashboard.verify_data_layer.view_all') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '      			<div class="container-fluid">';
			v += '          			<div class="row-fluid mapping-row-title">';
			v += '              			<div class="span4">' + localize.t('tiq.dashboard.verify_data_layer.date_run') + '</div>';
			v += '              			<div class="span3">' + localize.t('tiq.dashboard.verify_data_layer.environment_header') + '</div>';
			v += '              			<div class="span3">' + localize.t('tiq.dashboard.verify_data_layer.status') + '</div>';
			v += '              			<div class="span2 alignright">' + localize.t('tiq.dashboard.verify_data_layer.failed_udo_checks') + '</div>';
			v += '						</div>';
			v += '          		</div>';
			v += '          		<div class="tagMappedTableHeader"></div>';
			v += '          		<div class="contentSectionBody scrollSection">';
			v += '              		<div class="contentBlock">';
			v += '                  		<div class="contentSectionBodyContent">';

			for (var i = 0; i < numReports; i++) {
				reportsObj = resultReports[i];
				v += '      						<div class="container-fluid">';
				v += '          						<div class="row-fluid">';
				v += '										<div class="span4 report-date-run ellipsis" data-test-run-id="' + reportsObj._id + '">' + _getResultSummaryStatusIcon(reportsObj.result_summary_status) + '&nbsp;' + utui.util.date.getGMTDateTimeStringFromDateString(reportsObj.date_run) + '</div>';
				v += '										<div class="span3 report-test-execution-env ellipsis">' + reportsObj.test_execution_env + '</div>';
				if (reportsObj.no_of_checks != 0 && reportsObj.no_of_checks == reportsObj.expected_no_of_checks) {
					v += '										<div class="span3">' + localize.t('tiq.dashboard.verify_data_layer.complete') + '</div>';
				} else if (reportsObj.expected_no_of_checks == 0 && reportsObj.result_summary_status === _constants.SUCCESS) {
					v += '										<div class="span3">' + localize.t('tiq.dashboard.verify_data_layer.complete') + '</div>';
				} else {
					v += '										<div class="span3">' + localize.t('tiq.dashboard.verify_data_layer.errors_occurred') + '</div>';
				}
				if (reportsObj.no_of_checks != 0) {
					v += '										<div class="span2 alignright ellipsis">' + reportsObj.no_of_fails + '</div>';
				} else {
					v += '										<div class="span2 alignright">&mdash;</div>';
				}
				v += '									</div>';
				v += '								</div>';
			}

			v += '							</div>';
			v += '						</div>';
			v += '					</div>';
			v += '				</div>';
			v += '			</div>';
			v += '		</div>';

			v += '  </div>';
			v += '</div>';

			return v;
		},

		// --------------------------------------------------------
		filterResultItem: function (dataObj, input) {
			var pattern = new RegExp('(' + input + ')', 'gi'),
				title = utui.util.safeEscape(dataObj.title).replace(pattern, '<span class="highlighted-text">$1</span>'),
				desc = utui.util.safeEscape(dataObj.description).replace(pattern, '<span class="highlighted-text">$1</span>'),
				type = utui.util.safeEscape(dataObj.type),
				id = dataObj.id,
				v = '';

			v += '<div class="resultRow" data-id="' + id + '">';
			v += '<div class="contextName">' + title + '</div>';
			v += '<div class="contextLabel">' + type + '</div>';
			v += '<div class="contextDesc">' + desc + '</div>';
			v += '</div>';

			return v;
		},

		// --------------------------------------------------------
		filterNoResultsFound: function (userInput) {
			var v = '';

			v += '<div class="resultRow resultRowNotFound">';
			v += localize.t('tiq.dashboard.verify_data_layer.no_results_found') + ' <strong>' + userInput + '</strong>';
			v += '</div>';

			return v;
		}
	};

	// --------------------------------------------------------
	var _render = {
		// --------------------------------------------------------
		contentBody: function () {
			_$content.html(_view.contentBody());
			_bindUI.contentBody();
			_tetris.updateLayout();
		}
	};

	// --------------------------------------------------------
	var _bindUI = {
		// --------------------------------------------------------
		contentHeader: function () {
			_$header.find('#' + _namespace + '_addTestBtn').safeOn('click', _eventHandlers.onAddTestBtnClick);
			_$header.find('#' + _namespace + '_refreshBtn').safeOn('click', _eventHandlers.onRefreshBtnClick);
			_$header.find('#' + _namespace + '_filterSearch_input').safeOn('keyup', _eventHandlers.onFilterSearchInput);
			_$header.find('#' + _namespace + '_filterSearch_results').safeOn('click', '.resultRow', _eventHandlers.onFilterSearchResultClick);
			_$header.find('#' + _namespace + '_gridViewBtn').safeOn('click', _eventHandlers.onGridViewBtnClick);
			_$header.find('#' + _namespace + '_listViewBtn').safeOn('click', _eventHandlers.onListViewBtnClick);
		},

		// --------------------------------------------------------
		contentBody: function () {
			_$content.find('.viewItem').safeOn('click', _eventHandlers.onTestElementClick);
		},

		// --------------------------------------------------------
		accordionContent: function () {
			_$content.find('#' + _namespace + '_editTestBtn').safeOn('click', _eventHandlers.onEditTestBtnClick);
			_$content.find('#' + _namespace + '_runTestBtn').tipsy({gravity: 'sw'});
			utui.ui.toggleMenu(_$content.find('#' + _namespace + '_run_test_now_options'));
			_$content.find('.run-test-now').safeOn('click', _eventHandlers.onRunTestNowBtnClick);
			_$content.find('#' + _namespace + '_deleteTestBtn').safeOn('click', _eventHandlers.onDeleteTestBtnClick);
			_$content.find('#' + _namespace + '_editTestScriptBtn').safeOn('click', _eventHandlers.onEditTestScriptBtnClick);
			_$content.find('.data-layer-specs-scoped-link a').safeOn('click', _eventHandlers.onDataLayerSpecsScopedLinkClick);
			_$content.find('#' + _namespace + '_viewAllTestsBtn').safeOn('click', _eventHandlers.onViewAllTestsBtnClick);
			_$content.find('.report-date-run').safeOn('click', _eventHandlers.onReportDateRunClick);
		}
	};

	// --------------------------------------------------------
	var _request = {
		// --------------------------------------------------------
		getTestConfigs: function (callback) {
			utui.util.showSpinner();

			var url = utui.service.addParamsToURL(utui.service.restapis.GET_TEST_CONFIGS, {'version': utui.data.settings.revision});
			utui.service.get(url, null, null,
				function() {
					_response.onGetTestConfigsSuccess.apply(this, arguments);
					if (callback) callback();
				},
				function() {
					_response.onGetTestConfigsError.apply(this, arguments);
					if (callback) callback();
				}
			);
		},

		// --------------------------------------------------------
		getNextTestConfigId: function (callback) {
			utui.util.showSpinner();

			var id;
			utui.service.put(utui.service.restapis.GET_NEXT_TEST_CONFIG_ID, null, null,
				function () {
					id = _response.onGetNextTestConfigIdSuccess.apply(this, arguments);
					if (callback) callback(id);
				},
				function () {
					id = _response.onGetNextTestConfigIdError.apply(this, arguments);
					if (callback) callback(id);
				}
			);
		},

		// --------------------------------------------------------
		runTestConfigNow: function (id, env) {
			utui.util.showSpinner();

			var url = utui.service.addParamsToURL(utui.service.restapis.RUN_TEST_CONFIG_NOW, {'id': id, 'env':env});
			utui.service.put(url, null, null, _response.onRunTestConfigNowSuccess, _response.onRunTestConfigNowError);
		},

		// --------------------------------------------------------
		getTestConfigsForRefresh: function () {
			utui.util.showSpinner();

			var url = utui.service.addParamsToURL(utui.service.restapis.GET_TEST_CONFIGS, {'version': utui.data.settings.revision});
			utui.service.get(url, null, null, _response.onGetTestConfigsForRefreshSuccess, _response.onGetTestConfigsError);
		}
	};

	// --------------------------------------------------------
	var _response = {
		// --------------------------------------------------------
		onGetTestConfigsSuccess: function (data) {
			utui.util.hideSpinner();

			_public.test_configs = {};
			if (data && data.length > 0) {
				for (var i = 0; i < data.length; i++) {
					_public.test_configs[data[i].id] = data[i];
				}
			}
		},

		// --------------------------------------------------------
		onGetTestConfigsError: function (status, response) {
			utui.util.hideSpinner();

			_reset();
		},

		// --------------------------------------------------------
		onGetNextTestConfigIdSuccess: function (data) {
			utui.util.hideSpinner();

			if (data) {
				_public.last_test_config_id = data.id;
			}

			return '' + _public.last_test_config_id;
		},

		// --------------------------------------------------------
		onGetNextTestConfigIdError: function (status, response) {
			utui.util.hideSpinner();

			// last_test_config_id contains the last id created so we should always increment from that
			var maxId = _public.last_test_config_id || 0;
			if (maxId == 0) {
				for (var i in utui.util.getVars(_public.test_configs)) {
					var num = parseInt(i);
					if (num > maxId) {
						maxId = num;
					}
				}
			}

			_public.last_test_config_id = ++maxId;

			return '' + _public.last_test_config_id;
		},

		// --------------------------------------------------------
		onRunTestConfigNowSuccess: function (data) {
			utui.util.hideSpinner();

			utui.util.showStatusMessage(_errorCodeMap.success_run_test_now);
		},

		// --------------------------------------------------------
		onRunTestConfigNowError: function (status, response) {
			utui.util.hideSpinner();

			var errorMsg = utui.service.getErrorFromResponse(response, '', _errorCodeMap.error_run_test_now);
			utui.util.showStatusMessage(errorMsg);
		},

		// --------------------------------------------------------
		onGetTestConfigsForRefreshSuccess: function (data) {
			utui.util.hideSpinner();

			if (data && data.length > 0) {
				for (var i = 0; i < data.length; i++) {
					if (!_public.test_configs[data[i].id]) {
						// New test was added via Tealium Tools
						_public.test_configs[data[i].id] = data[i];
					} else {
						// Update result reports that may have been run recently
						_public.test_configs[data[i].id].result_reports =  data[i].result_reports;
					}
				}
			}

			// Refresh tab data
			$('#my_site_site_verify_menu').trigger('click');
		}
	};

	// PUBLIC
	// --------------------------------------------------------
	var _public = {
		id: 'site_verify',
		test_configs: null,
		deleted_test_configs: {},
		last_test_config_id: 0,

		// --------------------------------------------------------
		init: function () {
			utui.util.pubsub.subscribe(utui.constants.test_configs.ADDED, _eventHandlers.onTestConfigAdded);
			utui.util.pubsub.subscribe(utui.constants.test_configs.UPDATED, _eventHandlers.onTestConfigUpdated);
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _eventHandlers.onProfileLoaded);
			utui.util.pubsub.subscribe(utui.constants.test_configs.FOCUSED, _eventHandlers.onFocusedTestConfig);
			utui.util.pubsub.subscribe(utui.constants.profile.SAVED, _eventHandlers.onProfileLoaded); // enable the Run Test Now button
			utui.util.pubsub.subscribe(utui.constants.profile.LATEST_VERSION_CHANGED, _eventHandlers.onProfileLoaded); // enable the Run Test Now button
		},

		// --------------------------------------------------------
		show: function () {
			var viewState = _getViewState();

			_bindUI.contentHeader();
			_showHelpTab();

			if (viewState === 'row') {
				_$header.find('#' + _namespace + '_listViewBtn').trigger('click');
			} else if (viewState === 'tile') {
				_$header.find('#' + _namespace + '_gridViewBtn').trigger('click');
			}

			_public.loadTestConfigs(function () {
				_public.refreshContent();

				// Fetch data layer specs
				utui.define.dataLayerSpecs.loadDataLayerSpecs();
			});
		},

		// --------------------------------------------------------
		refreshContent: function () {
			_render.contentBody();
			utui.profile.showAllModifiedTabLabels(utui.constants.test_configs.TYPE);
		},

		// --------------------------------------------------------
		loadTestConfigs: function (callback) {
			// Only request test configs once
			if (!_public.test_configs) {
				_request.getTestConfigs(callback);
			} else {
				if (callback) callback();
			}
		},

		// --------------------------------------------------------
		getTestConfigsForPublish: function () {
			// Combine added, updated, and deleted test configs
			return $.extend(true, {}, _public.test_configs, _public.deleted_test_configs);
		},

		// --------------------------------------------------------
		showAddMore: function (testConfig, callback) {
			// Private API
			var _namespace = 'site_verify_dialog_addmore',
				_containerName = 'test_config_',
				_selectedTab = 'test_config',
				_resources = [
					{ type: 'article', title: localize.t('tiq.dashboard.verify_data_layer.resource.data_layer_verification'), url: common.community.verify_data_layer_overview },
					{ type: 'article', title: localize.t('tiq.dashboard.verify_data_layer.resource.use_tealium_tools'), url: common.community.verify_data_layer_test_recorder }
				],
				_testConfigInputFields = {
					fieldset: {
						title: {
							fieldType: 'text',
							label: localize.t('tiq.dashboard.verify_data_layer.config.title'),
							size: '70'
						},
						description: {
							fieldType: 'text',
							label: localize.t('tiq.dashboard.verify_data_layer.config.description'),
							size: '70'
						},
						recipients: {
							fieldType: 'text',
							label: localize.t('tiq.dashboard.verify_data_layer.config.recipients'),
							title: localize.t('tiq.dashboard.verify_data_layer.config.recipients_note'),
							size: '70'
						}
//						browsers: {
//							fieldType: 'checkboxGroup',
//							group: 'test_config_browsers',
//							label: localize.t('tiq.dashboard.verify_data_layer.config.browsers'),
//							title: localize.t('tiq.dashboard.verify_data_layer.config.browsers_note'),
//							checkboxes: [
//								{
//									id: '_chrome',
//									label: localize.t('tiq.dashboard.verify_data_layer.config.chrome'),
//									value: 'Chrome',
//									defaultValue: false
//								},
//								{
//									id: '_firefox',
//									label: localize.t('tiq.dashboard.verify_data_layer.config.firefox'),
//									value: 'Firefox',
//									defaultValue: false
//								},
//								{
//									id: '_ie',
//									label: localize.t('tiq.dashboard.verify_data_layer.config.ie'),
//									value: 'IE',
//									defaultValue: false
//								},
//								{
//									id: '_safari',
//									label: localize.t('tiq.dashboard.verify_data_layer.config.safari'),
//									value: 'Safari',
//									defaultValue: false
//								}
//							]
//						}
					}
				},
				_testSteps,
				_templateModal = utui.ui.template.modal(),
				_templateAccordion = utui.ui.template.accordion(true),
				_testConfig,
				_errors = {
					title: localize.t('tiq.dashboard.verify_data_layer.error.title'),
					recipients: localize.t('tiq.dashboard.verify_data_layer.error.recipients'),
					steps: localize.t('tiq.dashboard.verify_data_layer.error.steps'),
					invalid_steps: localize.t('tiq.dashboard.verify_data_layer.error.invalid_steps')
				},
				$modalDialog,
				_saveObj;

			_testConfig = testConfig;

			// setup the save object
			if (_isNewTestConfig(_testConfig)) {
				_saveObj = _constructEmptyTestConfig();
			} else {
				// Copy the test config object to prevent unsaved changes from being persisted
				_testConfig = $.extend(true, {}, testConfig);
				// Default array objects to empty array if necessary
				_testConfig.recipients = (_testConfig.recipients) ? _testConfig.recipients : [];
				_testConfig.browsers = (_testConfig.browsers) ? _testConfig.browsers : [];
				_testConfig.steps = (_testConfig.steps) ? _testConfig.steps : [];
				_saveObj = _testConfig;
			}

			// --------------------------------------------------------
			function _isNewTestConfig(testConfig) {
				return testConfig === 'create';
			}

			// --------------------------------------------------------
			function _constructEmptyTestConfig() {
				return {
					id: '-1',
					title: '',
					description: '',
					type: 'UDO Verify',
					status: 'active',
					recipients: [utui.login.email],
					browsers: [],
					steps: [],
					result_reports: [],
					action: utui.constants.operation.ADDED
				};
			}

			// --------------------------------------------------------
			function _getNextTestConfigId(callback) {
				_request.getNextTestConfigId(callback);
			}

			// --------------------------------------------------------
			function _isValid() {
				var hasErrors = false,
					$fieldGroup;

				_hideValidationMessage();

				// Validate test config Info
				if ($.trim(_saveObj.title) === '') {
					$modalDialog.find('#test_config').trigger('click');
					$fieldGroup = $modalDialog.find('#' + _containerName + 'title').closest('.form-group');
					$fieldGroup.addClass('has-error').find('.row-message').html(_errors.title);
					hasErrors = true;
				}
				var emails = _saveObj.recipients,
					email;
				for (var i = 0; i < emails.length; i++ ) {
					email = emails[i];
					if (!utui.util.isValidEmail(email)) {
						if (!hasErrors) {
							$modalDialog.find('#test_config').trigger('click');
						}
						$fieldGroup = $modalDialog.find('#' + _containerName + 'recipients').closest('.form-group');
						$fieldGroup.addClass('has-error').find('.row-message').html(_errors.recipients);
						hasErrors = true;
						break;
					}
				}

				if (!hasErrors) {
					hasErrors = _validateJSON();

					if (hasErrors) {
						_showValidationMessage(_errors.invalid_steps);
					}
					else if ($.isEmptyObject(_saveObj.steps)) {
						_showValidationMessage(_errors.steps);
						hasErrors = true;
					}
				}

				return !hasErrors;
			}

			// --------------------------------------------------------
			function _validateJSON() {
				var script = _testSteps.getValue(),
					validObj;

				try {
					// Validate JSON
					validObj = JSON.parse('{"0" : [' + script.replace(/\n/g, "") + ']}');
					_saveObj.steps = validObj['0'];
				} catch (e) {
					return true; // error
				}

				return false; // success
			}

			// --------------------------------------------------------
			function _hideValidationMessage() {
				$modalDialog.find('.validation-message').html('').hide();
			}

			// --------------------------------------------------------
			function _showValidationMessage(msg) {
				$modalDialog.find('.validation-message').html(msg).show();
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onTopNavMenuClick: function (event) {
					event.preventDefault();

					var $el = $(this),
						tabId = $el.attr('id');

					_selectedTab = tabId;

					$modalDialog.find('.wizard_tab').removeClass('activeTab');
					$el.addClass('activeTab');

					// Render selected tab panel
					_panels[tabId].render();
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				onFieldInputChange: function (event) {
					var $el = $(this),
						type = $el.attr('type'),
						value = $el.val(),
						attr = $el.attr('id');

					if (type === 'checkbox') {
						attr = $el.attr('name');
						value = [];
						$modalDialog.find('input[name="' + attr + '"]:checked').each(function () {
							value.push($(this).val());
						});
						value = value.join(',');
					}

					attr = attr.replace(_containerName, '');

					if ($.type(_saveObj[attr]) === 'array') {
						_saveObj[attr] = (value) ? value.replace(/ /g,'').split(',') : []; //Trim whitespace and convert to array
					} else {
						_saveObj[attr] = value;
					}
				},

				// --------------------------------------------------------
				onBtnCancelClick: function () {
					_hideValidationMessage();
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			var _bindUI = {
				// --------------------------------------------------------
				topNavMenu: function () {
					$modalDialog.find('.wizard_tab').safeOn('click', _eventHandlers.onTopNavMenuClick);
				},

				// --------------------------------------------------------
				formFields: function () {
					$modalDialog.find('input').safeOn('change', _eventHandlers.onFieldInputChange);
				},

				// --------------------------------------------------------
				scriptEditor: function () {
					_testSteps = CodeMirror.fromTextArea($('#' + _namespace + '_code')[0], {
						mode: 'javascript',
						content: $('#' + _namespace + '_code').val(),
						indentWithTabs: true,
						tabMode: 'indent',
						matchBrackets: true,
						lineNumbers: true
					});
					_testSteps.setOption('onChange', function () {
						if (!_testSteps.getValue()) {
							_render.showJSONValidationMsg('');
						}
						else if (_validateJSON()) {
							_render.showJSONValidationMsg('<div class="invalid-json"><i class="icon-circle"></i> ' + localize.t('tiq.dashboard.verify_data_layer.error.invalid_json_structure') + '</div>');
						} else {
							_hideValidationMessage();
							_render.showJSONValidationMsg('<div class="valid-json"><i class="icon-circle"></i> ' + localize.t('tiq.dashboard.verify_data_layer.error.valid_json_structure') + '</div>');
						}
					});
					_testSteps.focus();
				}
			};

			// ------------------------------------
			var _panels = {
				// ------------------------------------
				test_config: {
					// ------------------------------------
					render: function() {
						var slug = 'test_config',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							title = '<h2>' + utui.ui.template.contextFieldItemView(localize.t('tiq.dashboard.verify_data_layer.properties')) + '</h2>',
							fieldCollection = _testConfigInputFields.fieldset,
							context = utui.ui.template.contextBox(_view.test_config.context(), localize.t('tiq.dashboard.verify_data_layer.about_data_layer_verification')),
							content = _view.test_config.contentBody(fieldCollection, slug),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text');

						$header.empty();
						_render.hideJSONValidationMsg();

						$body
							.empty()
							.append(title)
							.append(content);

						$context
							.empty()
							.append(context);

						$applyBtn.text(localize.t('tiq.dialog.button.next'));

						_bindUI.formFields();

						// Set values from _saveObj
						for (var i in fieldCollection) {
							var val = _saveObj[i],
								fieldType = fieldCollection[i].fieldType;
							if (val) {
								if (fieldType !== 'checkboxGroup') {
									$body.find('#' + _containerName + i).val(val);
								} else {
									for ( var j = 0; j < val.length; j++) {
										$body.find('[name="' + _containerName + i + '"][value="' + val[j] + '"]').prop('checked', true);
									}
								}
							}
						}
					}
				},
				// ------------------------------------
				test_structure: {
					// ------------------------------------
					render: function() {
						var $content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text');

						$header.empty();

						$body
							.empty()
							.append('<div class="validation-message bg-danger"></div>')
							.append('<div class="content-body">' + _view.test_structure.contentBody() + '</div>');

						$context
							.empty()
							.append(utui.ui.template.contextBox(_view.test_structure.contextAboutUDOVerification(), localize.t('tiq.dashboard.verify_data_layer.about_udo_verification')))
							.append(utui.ui.template.contextBox(_view.test_structure.contextCreateScripts(), localize.t('tiq.dashboard.verify_data_layer.create_scripts_easily')));

						$applyBtn.text(localize.t('tiq.dialog.button.apply'));

						_bindUI.scriptEditor();

					}
				}
			};

			// --------------------------------------------------------
			var _view = {
				// --------------------------------------------------------
				modal: {
					// --------------------------------------------------------
					contentHeader: function () {
						var v = '';

						v += '<div id="test_config" class="wizard_tab activeTab">';
						v += '  <h2>' + localize.t('tiq.dashboard.verify_data_layer.test_configuration') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.verify_data_layer.configure_your_test_settings') + '</p>';
						v += '</div>';

						v += '<div id="test_structure" class="wizard_tab">';
						v += '  <h2>' + localize.t('tiq.dashboard.verify_data_layer.test_structure') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.verify_data_layer.view_and_modify_actions') + '</p>';
						v += '</div>';

						return v;
					}
				},

				// --------------------------------------------------------
				test_config: {
					// --------------------------------------------------------
					context: function () {
						var v = '';

						v += '<div>' + _resources[0].title + '</div>';
						v += '<button class="btn btn-small" onclick="utui.help.openCommunityLink(\'' + _resources[0].url + '\'); return false;"><i class="icon-external-link"></i> ' + localize.t('tiq.dashboard.verify_data_layer.learn_more') + '</button>';

						return v;
					},

					// --------------------------------------------------------
					contentBody: function (fieldset, slug) {
						var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, slug, true),
							v = '';

						v += '<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
						v += '</div></div></div>';

						return '<div class="section-padded-top-bottom">' + v + '</div>';
					}
				},

				// --------------------------------------------------------
				test_structure: {
					// --------------------------------------------------------
					contentBody: function () {
						var prettyPrintArray = [],
							v = '';

						v += '<textarea id="' + _namespace + '_code" value="" name="' + _namespace + '_code">';
						for (var i = 0; i < _saveObj.steps.length; i++) {
							prettyPrintArray.push(JSON.stringify(_saveObj.steps[i], null, 2)); //pretty-print
						}
						v += prettyPrintArray.join(', ');
						v += '</textarea>';

						return v;
					},

					// --------------------------------------------------------
					contextAboutUDOVerification: function () {
						var v = '';

						v += '<div>' + _resources[0].title + '</div>';
						v += '<button class="btn btn-small" onclick="utui.help.openCommunityLink(\'' + _resources[0].url + '\'); return false;"><i class="icon-external-link"></i> ' + localize.t('tiq.dashboard.verify_data_layer.learn_more') + '</button>';

						return v;
					},

					// --------------------------------------------------------
					contextCreateScripts: function () {
						var v = '';

						v += '<div>' + _resources[1].title + '</div>';
						v += '<button class="btn btn-small" onclick="utui.help.openCommunityLink(\'' + _resources[1].url + '\'); return false;"><i class="icon-external-link"></i> ' + localize.t('tiq.dashboard.verify_data_layer.learn_more') + '</button>';

						return v;
					}
				}
			};

			// --------------------------------------------------------
			var _render = {
				// --------------------------------------------------------
				ui: function () {
					$modalDialog.find('.modal-header').html(_view.modal.contentHeader());
					$modalDialog.find('.modal-body').html(_templateAccordion);

					_bindUI.topNavMenu();

					// Render 1st panel into DOM
					_panels.test_config.render();

					// Dialog adjustments
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				showJSONValidationMsg: function (content) {
					var v = '<div class="bg-warning js-notification"><div class="section-padded">' + localize.t('tiq.dashboard.verify_data_layer.note_json_customized');
					v += content;
					v += '</div></div>';

					_render.hideJSONValidationMsg();
					$modalDialog.find('.main-footer').prepend(v);

					// Dialog adjustments
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				hideJSONValidationMsg: function () {
					$modalDialog.find('.js-notification').remove();
				}
			};

			var buttons = [
					{
						text: localize.t('tiq.dialog.button.next'),
						click: function () {
							if (_selectedTab === 'test_config') {
								$modalDialog.find('#test_structure').trigger('click');
							}
							else if (_isValid()) {
								var id = _saveObj.id;
								if (id !== '-1') {
									// Update test config
									_saveObj.action = utui.constants.operation.UPDATED;
									utui.util.pubsub.publish(utui.constants.test_configs.UPDATED, {test_config: _saveObj});
								} else {
									// Save new test config
									_getNextTestConfigId(function (id) {
										_saveObj.id = id;
										utui.util.pubsub.publish(utui.constants.test_configs.ADDED, {test_config: _saveObj});
									});
								}

								_eventHandlers.onBtnCancelClick();

								if (callback) {
									callback({ id: id });
								}
							}
						},
						id: _namespace + '_applyBtn'
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						click: _eventHandlers.onBtnCancelClick,
						id: _namespace + '_cancelBtn',
						style: 'float:left; margin-left: 12px'
					}
				],
				title = (_isNewTestConfig(_testConfig)) ? localize.t('tiq.dashboard.verify_data_layer.create_new_test') : localize.t('tiq.dashboard.verify_data_layer.test', {test_title: utui.util.safeEscape(_testConfig.title)});

			// Show the modal dialog
			$modalDialog = utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width:1000, height:550 }, _eventHandlers.onBtnCancelClick);

			// Render the contents of the dialog
			_render.ui();

			return $modalDialog;
		},

		// --------------------------------------------------------
		showTealiumTools: function (callback) {
			// Private API
			var _namespace = 'site_verify_tools',
				v = '';
			
			v += '<div id="' + _namespace + '_description" style="padding:20px;">';
			v += '	<div class="container-fluid">';
			v += '		<div class="row-fluid">';
			v += '			<div class="span8">';
			v += '				<h3>' + localize.t('tiq.dashboard.verify_data_layer.creating_tests_with_tealium_tools') + '</h3>';
			v += '				<ol>';
			v += '					<li>' + localize.t('tiq.dashboard.verify_data_layer.install_the_tealium_tools') + '</li>';
			v += '					<li>' + localize.t('tiq.dashboard.verify_data_layer.use_the_verify_script') + '</li>';
			v += '					<li>' + localize.t('tiq.dashboard.verify_data_layer.add_the_recording') + '</li>';
			v += '				</ol>';
			v += '				<a href="#" onclick="utui.help.openCommunityLink(\'' + common.community.verify_data_layer_test_recorder + '\'); return false;">' + localize.t('tiq.dashboard.verify_data_layer.view_the_tutorial') + '</a>';
			v += '				<p><h4>' + localize.t('tiq.dashboard.verify_data_layer.tealium_tools_capabilities') + '</h4>';
			v += '					<ul>';
			v += '						<li>' + localize.t('tiq.dashboard.verify_data_layer.evaluate_your_tag') + '</li>';
			v += '						<li>' + localize.t('tiq.dashboard.verify_data_layer.inspect_the_data_layer') + '</li>';
			v += '						<li>' + localize.t('tiq.dashboard.verify_data_layer.create_scripts') + '</li>';
			v += '						<li>' + localize.t('tiq.dashboard.verify_data_layer.inspect_and_test') + '</li>';
			v += '					</ul>';
			v += '				</p>';
			v += '				<button class="btn btn-success" onclick="common.utils.openWindow(\'' + gAppConfig.tealium_tools_package + '\');">' + localize.t('tiq.dashboard.verify_data_layer.install_tealium_tools_now') + '</button>';
			v += '			</div>';
			v += '			<div class="span4">';
			v += '				<img alt="" src="../img/tealium_tools.png" height="300" width="250">';
			v += '			</div>';
			v += '		</div>';
			v += '	</div>';
			v += '</div>';

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onBtnOkClick: function () {
					utui.ui.dialog.dispose(_namespace);
				}
			};

			var buttons = [
					{
						text: localize.t('tiq.dialog.button.ok'),
						click: function () {
							_eventHandlers.onBtnOkClick();
							if (callback) {
								callback();
							}
						},
						id: _namespace + '_applyBtn'
					}
				],
				title = localize.t('tiq.dashboard.verify_data_layer.create_new_test');

			// Show the modal dialog
			utui.ui.dialog.show(_namespace, title, buttons, v, {width: 815}, _eventHandlers.onBtnOkClick);
		},

		// --------------------------------------------------------
		showTestResults: function (testConfig, callback) {
			// Private API
			var _namespace = 'site_verify_dialog_test_results',
				_templateModal = utui.ui.template.modal(),
				_templateAccordion = utui.ui.template.accordion(true),
				_testConfig,
				$modalDialog,
				_selectedTestId,
				_testResults = {},
				_constants = {
					SUCCESS: 'Success',
					FAILED: 'failed',
					NAVIGATION_ERROR: 'Navigation Error',
					UDO_FETCH_ERROR: 'Failed To Find UDO',
					VERIFIED: 'Verified',
					STEP_NOT_RUN: 'Step Not Run'
				},
				_errorCodeMap = {
					get_test_result: localize.t('tiq.dashboard.verify_data_layer.error.get_test_result'),
					delete_test_result: localize.t('tiq.dashboard.verify_data_layer.error.delete_test_result')
				},
				needsRefresh = false;

			_testConfig = testConfig;


			// --------------------------------------------------------
			function _hideValidationMessage() {
				$modalDialog.find('.validation-message').html('').hide();
			}

			// --------------------------------------------------------
			function _showValidationMessage(msg) {
				$modalDialog.find('.validation-message').html(msg).show();
			}

			// --------------------------------------------------------
			function _hideStepAccordion(id) {
				if (id) {
					$modalDialog.find('.row-item[data-row-key="' + id + '"]').removeClass('selected not-selected');
					$modalDialog.find('.row-item-accordion[data-key="' + id + '"]').hide();
				}
			}

			// --------------------------------------------------------
			function _getDataSourceActionStatus (multiBrowserResults) {
				var successCount = 0,
					failedCount = 0;

				for (var i = 0; i < multiBrowserResults.length; i++) {
					if (multiBrowserResults[i].data_source_verify_result === _constants.SUCCESS) {
						successCount++;
					} else {
						failedCount++;
					}
				}

				if (failedCount === 0) {
					return '<i class="icon-circle success"></i>';
				} else if (failedCount > 0 && successCount > 0) {
					return '<i class="icon-warning-sign warning"></i>';
				} else {
					return '<i class="icon-ban-circle failed"></i>';
				}
			}

			// --------------------------------------------------------
			function _selectFirstReportView() {
				// Select First date run
				var $navTab = $modalDialog.find('.js-navtab').first();
				if ($navTab.length > 0) {
					$navTab.trigger('click');
				} else {
					// Display no content message and disable delete button
					_render.contentBody();
					$modalDialog.find('#' + _namespace + '_deleteTestResultBtn').attr('disabled', 'disabled');
				}
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onNavMenuClick: function (event) {
					var $el = $(this),
						tabId = $el.attr('data-tab-id');

					$el.closest('.dialog-context-nav').find('.selected').removeClass('selected');
					$el.closest('li').addClass('selected');

					_selectedTestId = tabId;
					_request.getTestResult(_render.content);
				},

				// --------------------------------------------------------
				onExpandAllClick: function (event) {
					var $el = $(this);

					if ($el.hasClass('icon-plus-sign-alt')) {
						$el.removeClass('icon-plus-sign-alt').addClass('icon-minus-sign-alt');
						$('label[for=' + $el.attr('id') + ']').text(localize.t('tiq.dashboard.verify_data_layer.collapse_all'));
						// Expand all steps
						$modalDialog.find('.result-step').removeClass('selected').trigger('click');
					} else {
						$el.removeClass('icon-minus-sign-alt').addClass('icon-plus-sign-alt');
						$('label[for=' + $el.attr('id') + ']').text(localize.t('tiq.dashboard.verify_data_layer.expand_all'));
						// Collapse all steps
						$modalDialog.find('.result-step').addClass('selected').trigger('click');
					}
				},

				// --------------------------------------------------------
				onDeleteTestResultBtnClick: function (event) {
					var $el = $(this),
						isDisabled = $el.attr('disabled') === 'disabled',
						reportTitle;

					if (!isDisabled) {
						reportTitle = utui.util.date.getGMTDateTimeStringFromDateString(_testResults[_selectedTestId].date_run);

						utui.adminlib.confirmDialog().show(_namespace, {action: localize.t('tiq.dashboard.verify_data_layer.delete'), confirm: localize.t('tiq.dashboard.verify_data_layer.are_you_sure_test_result', {report_title: reportTitle}),  title: localize.t('tiq.dashboard.verify_data_layer.confirm_delete_test_result', {report_title: reportTitle})}, function () {
							_request.deleteTestResult(function () {
								var resultReports = _testConfig.result_reports,
									resultLength = resultReports.length;

								// Delete cached test result
								delete _testResults[_selectedTestId]

								// Remove report from result reports
								for (var i = 0; i < resultLength; i++) {
									if (_testConfig.result_reports[i]._id === _selectedTestId) {
										_testConfig.result_reports.splice(i, 1)
										break;
									}
								}
								_render.contextBody(_selectFirstReportView);
							});
						});
					}
				},

				// --------------------------------------------------------
				onStepResultElementClick: function (event) {
					var $el = $(this),
						rowKey = $el.attr('data-row-key');

					// Hide accordion
					if ($el.hasClass('selected')) {
						_hideStepAccordion(rowKey);

						// Uncheck expand all
						var $expandAllBtn = $modalDialog.find('#' + _namespace + '_expand_all');
						if ($expandAllBtn.hasClass('icon-minus-sign-alt')) {
							$expandAllBtn.removeClass('icon-minus-sign-alt').addClass('icon-plus-sign-alt');
							$('label[for=' + _namespace + '_expand_all]').text(localize.t('tiq.dashboard.verify_data_layer.expand_all'));
						}
						return false;
					}

					// Show accordion
					_render.expandedStepAccordion(rowKey);

					return false;
				},

				// --------------------------------------------------------
				onReportActionElementClick: function (event) {
					var $el = $(this),
						actionKey = $el.attr('data-action-key');

					// Hide accordion action
					if ($el.hasClass('selected')) {
						$el.siblings('.row-item-accordion-action[data-key="' + actionKey + '"]').hide();
						$el.removeClass('selected');
						return false;
					}

					// Show accordion action
					_render.expandedDataSourceAction(actionKey);

					return false;
				},

				// --------------------------------------------------------
				onFailedBrowserStepStatusClick: function (event) {
					var $el = $(this),
						scrollPadding = 20,
						$failedNote = $el.next('.failed-note'),
						$mainBody = $modalDialog.find('.main-body');

					if ($failedNote.hasClass('selected')) {
						$failedNote.toggleClass('selected'); // close selected failure note
					} else {
						$('.failed-note').removeClass('selected'); // close all failure notes
						$failedNote.toggleClass('selected'); // open selected failure note
						$failedNote.css('z-index', $.ui.dialog.maxZ);

						// Scroll to selected note
						setTimeout(function () {
							$mainBody.animate({
								scrollTop: $failedNote.offset().top - scrollPadding - $mainBody.offset().top + $mainBody.scrollTop()
							}, 'slow');
						}, 50);

						// Hide if clicked outside
						$(document).safeBind('mouseup.failedBrowserStepStatus', function(e) {
							var $target = e.srcElement ? $(e.srcElement) : $(e.target);
							if ($target.hasClass('diagnostic-guide')) {
								return false;
							}
							else if (!$target.hasClass('failedBrowserStepStatus') || !$target.closest('.failedBrowserStepStatus')[0]) {
								$('.failed-note').removeClass('selected');
								$(document).off('mouseup.failedBrowserStepStatus');
							}
						});
					}

					return false;
				},

				// --------------------------------------------------------
				onBtnCloseClick: function () {
					// Re-open selected test config to refresh reports section
					if (needsRefresh) {
						utui.util.pubsub.publish(utui.constants.test_configs.FOCUSED, '' +  _testConfig.id);
					}
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			var _view = {
				// --------------------------------------------------------
				contextBody: function () {
					var resultReports = _testConfig.result_reports,
						numReports = resultReports.length,
						reportsObj,
						v = '';

					v += '<ul class="dialog-context-nav">';

					for (var i = 0; i < numReports; i++) {
						reportsObj = resultReports[i];
						v += '	<li><a href="#" class="js-navtab" data-tab-id="' + reportsObj._id + '" style="padding-left: 10px;">';
						v += _getResultSummaryStatusIcon(reportsObj.result_summary_status) + utui.util.date.getGMTDateTimeStringFromDateString(reportsObj.date_run);
						v += '	</li></a>';
					}

					v += '</ul>';

					return v;
				},

				// --------------------------------------------------------
				contentHeader: function () {
					var testResult = _testResults[_selectedTestId];
					var resultReports = _testConfig.result_reports || [];
					var resultLength = resultReports.length;
					var testExecutionEnv = '';
					var v = '';

					// Match the test_execution_env with the _selectedTestId
					for (var i = 0; i < resultLength; i++) {
						if (_testConfig.result_reports[i]._id === _selectedTestId) {
							testExecutionEnv = _testConfig.result_reports[i].test_execution_env;
							break;
						}
					}

					v += '<header class="wizardHeader" id="' + _namespace + '_header">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '			<div class="span2"><i class="icon-plus-sign-alt" id="' + _namespace + '_expand_all" name="' + _namespace + '_expand_all"><label for="' + _namespace + '_expand_all">' + localize.t('tiq.dashboard.verify_data_layer.expand_all') + '</label></i></div>';
					v += '			<div class="span8 wizardTitle">' + _testConfig.title + ' - ' + utui.util.date.getGMTDateTimeStringFromDateString(testResult.date_run) + ' <span title="' + localize.t('tiq.dashboard.verify_data_layer.test_execution_environment') + '">(' + testExecutionEnv + ')</span></div>';
					v += '			<div class="span2">';
					v += '				<a href="#" id="' + _namespace + '_deleteTestResultBtn" class="btn btn-small i-color-delete pull-right"><i class="icon-trash"></i> ' + localize.t('tiq.dashboard.verify_data_layer.delete') + '</a>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</header>';

					return v;
				},

				// --------------------------------------------------------
				contentBody: function () {
					var testResult = _testResults[_selectedTestId] || {},
						summaryNotes = testResult.summary_note || [],
						summaryNotesLength = summaryNotes.length,
						summaryNotesObj,
						stepResults = testResult.step_results || [],
						numSteps = stepResults.length,
						stepObj,
						specTitle, actionTitle, specType, specValue,
						resultStatus, resultStatusClass = '',
						v = '';

					v += '<div class="validation-message bg-danger"></div>';
					v += '<div class="content-body">';

					// Display script failure message if present
					v += '	<div class="summary-notes">';
					for (var i = 0; i < summaryNotesLength; i++) {
						summaryNotesObj = summaryNotes[i];

						v += '		<div>';
						v += '			<p class="container_result_status failed">' + utui.util.safeEscape(summaryNotesObj.reason) + '</p>';
						v += '			<p>' + utui.util.safeEscape(summaryNotesObj.user_action) + '</p>';
						v += '		</div>';
					}
					v += '	</div>';

					if (numSteps > 0) {
						for (var i = 0; i < numSteps; i++) {
							stepObj = stepResults[i];
							specTitle = utui.util.safeEscape(stepObj.data_spec_title);
							actionTitle = utui.util.safeEscape(stepObj.title);
							specType = utui.util.safeEscape(stepObj.type);
							specValue = utui.util.safeEscape(stepObj.value);
							resultStatus = utui.util.safeEscape(stepObj.step_status_summary);
							if (resultStatus === _constants.SUCCESS) {
								resultStatusClass = '';
								resultStatus = '<i class="icon-ok"></i> ' + localize.t('tiq.dashboard.verify_data_layer.passed');
							} else if (resultStatus === _constants.STEP_NOT_RUN) {
								resultStatusClass = ' not-run';
							} else {
								resultStatusClass = ' ' + _constants.FAILED;
							}


							v += '	<div class="result">';
							v += '		<div id="' + _namespace + '_' + i + '" class="row-item result-step" data-row-key="' + i + '">';
							v += '			<div class="viewItem-inner">';
							v += '				<div class="container_spec_title ellipsis" title="' + specTitle + '">' + specTitle + '</div>';
							v += '				<div class="container_action_title ellipsis" title="' + actionTitle + '">' + actionTitle + '</div>';
							v += '				<div class="container_spec_type ellipsis">' + specType + '</div>';
							v += '				<div class="container_spec_value ellipsis">' + specValue + '</div>';
							v += '				<div class="container_result_status ellipsis' + resultStatusClass + '">' + resultStatus + '</div>';
							v += '			</div>';
							v += '		</div>';
							v += '		<div id="' + _namespace + '_accordion_' + i + '" class="row-item-accordion" data-key="' + i + '"></div>';
							v += '	</div>';
						}
					} else {
						v += '	<div class="chart_message">' + localize.t('tiq.dashboard.verify_data_layer.there_are_no_test_results') + '</div>';
					}
					v += '</div>';

					return v;
				},

				// --------------------------------------------------------
				accordionStepContent: function (id) {
					var testResult = _testResults[_selectedTestId],
						stepObj = testResult.step_results[id],
						imgURL = '',
						browser, browserClass = '',
						browserStepStatus = stepObj.browser_step_status || [],
						browserStepStatusLength = browserStepStatus.length,
						browserStepStatusObj,
						status,
						actions = stepObj.actions || [],
						actionsLength = actions.length,
						actionsObj,
						actionKey,
						v = '';

					// Show screenshot for first browser result in collection
					if (browserStepStatusLength > 0) {
						browserStepStatusObj = browserStepStatus[0];
						if (browserStepStatusObj) {
							imgURL = browserStepStatusObj.screenshot_link || '';
							browser = browserStepStatusObj.browser;
							if (browser) {
								browserClass ='screenshot-overlay browser-icon browser-' + browser.toLowerCase();
							}
						}
					}

					v += '<div class="accordion-content-container">';
					v += '  <div class="main-container">';
					v += '      <div class="accordion-main-body">';
					v += '			<div class="container-fluid report-step-result">';
					v += '				<div class="row-fluid">';
					v += '					<div class="span2">';
					if (imgURL) {
						v += '						<div class="' + browserClass + '"></div>';
						v += '						<a href="' + imgURL + '" target="_blank">';
						v += '							<img class="screenshot" src="' + imgURL + '" alt="" title="' + localize.t('tiq.dashboard.verify_data_layer.screenshot_taken_from', {browser: browser}) + '">';
						v += '						</a>';
					}
					v += '					</div>';

					v += '					<div class="span10">';
					v += '						<div class="row-fluid">';
					v += '							<div class="span2"><strong>' + localize.t('tiq.dashboard.verify_data_layer.browser') + '</strong></div>';
					v += '							<div class="span2"><strong>' + localize.t('tiq.dashboard.verify_data_layer.navigation') + '</strong><i class="icon-question-sign" title="' + utui.tooltip.site_verify.navigation_status + '"></i></div>';
					v += '							<div class="span2"><strong>' + localize.t('tiq.dashboard.verify_data_layer.udo') + '</strong><i class="icon-question-sign" title="' + utui.tooltip.site_verify.udo_data_fetch_status + '"></i></div>';
					v += '							<div class="span2"><strong>' + localize.t('tiq.dashboard.verify_data_layer.spec') + '</strong><i class="icon-question-sign" title="' + utui.tooltip.site_verify.data_spec_fetch_status + '"></i></div>';
					v += '							<div class="span4"><strong>' + localize.t('tiq.dashboard.verify_data_layer.screenshot') + '</strong></div>';
					v += '						</div>';
					for (var i = 0; i < browserStepStatusLength; i++) {
						browserStepStatusObj = browserStepStatus[i];

						v += '						<div class="row-fluid">';
						v += '							<div class="span2">' + utui.util.safeEscape(browserStepStatusObj.browser) + '</div>';
						status = browserStepStatusObj.navigation_status;
						if (!browserStepStatusObj.notrun_step_status) {
							v += '							<div class="span2">' + _view.browserStepStatus(status, browserStepStatusObj.note) + '</div>';
						} else {
							v += '							<div class="span2"></div>';
							status = _constants.FAILED;
						}
						if (status === _constants.SUCCESS) {
							v += '							<div class="span2">' + _view.browserStepStatus(browserStepStatusObj.udo_data_fetch_status, browserStepStatusObj.note) + '</div>';
						} else {
							v += '							<div class="span2"></div>';
						}
						status = browserStepStatusObj.udo_data_fetch_status;
						if (status === _constants.SUCCESS) {
							v += '							<div class="span2">' + _view.browserStepStatus(browserStepStatusObj.data_spec_fetch_status, browserStepStatusObj.note) + '</div>';
						} else {
							v += '							<div class="span2"></div>';
						}
						v += '							<div class="span4">';
						if (browserStepStatusObj.screenshot_link) {
							v += '								<a href="' + browserStepStatusObj.screenshot_link + '" target="_blank">' + localize.t('tiq.dashboard.verify_data_layer.view_image') + '</a>';
						}
						v += '							</div>';
						v += '						</div>';
					}
					v += '					</div>';

					v += '				</div>';
					v += '			</div>';

					if (actionsLength > 0) {
						v += '			<div class="row-item report-action-title"><div>' + localize.t('tiq.dashboard.verify_data_layer.data_source') + '</div><div>' + localize.t('tiq.dashboard.verify_data_layer.expected_value') + '</div></div>';
						for (var i = 0; i < actionsLength; i ++) {
							actionsObj = actions[i];
							actionKey = id + '_' + i;

							v += '			<div class="row-item report-action ellipsis" data-action-key="' + actionKey + '">';
							v += _getDataSourceActionStatus(actionsObj.multi_browser_results);
							v += '				<div class="report-action-source">' + utui.util.safeEscape(actionsObj.source) + '</div>';
							v += '				<div>' + utui.config.dataSourceOperators[actionsObj.format][actionsObj.requirement] + ' ' + utui.util.safeEscape(actionsObj.expected_value) + '</div>';
							v += '			</div>';
							v += '			<div id="' + _namespace + '_accordion_action_' + actionKey + '" class="row-item-accordion-action" data-key="' + actionKey + '"></div>';
						}
					}
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// --------------------------------------------------------
				accordionActionContent: function (id) {
					var parts = id.split('_'),
						step = parts[0],
						action = parts[1],
						testResult = _testResults[_selectedTestId],
						actionObj = testResult.step_results[step].actions[action],
						multiBrowserResults = actionObj.multi_browser_results || [],
						multiBrowserResultsLength = multiBrowserResults.length,
						multiBrowserResultsObj,
						browser,
						actualValue,
						v = '';

					for (var i = 0; i < multiBrowserResultsLength; i++) {
						multiBrowserResultsObj = multiBrowserResults[i];
						browser = utui.util.safeEscape(multiBrowserResultsObj.browser);
						actualValue = utui.util.safeEscape(multiBrowserResultsObj.actual_value);

						v += '<div class="browser-result">';
						v += '	<div class="browser-icon browser-' + browser.toLowerCase() + '">' + browser + '</div>';
						v += '	<div class="ellipsis" title="' + actualValue + '">\"' + actualValue + '\"</div>';
						v += '	<div>' + _view.browserStepStatus(multiBrowserResultsObj.data_source_verify_result) + '</div>';
						v += '</div>';
					}

					return v;
				},

				// --------------------------------------------------------
				browserStepStatus: function (status, note) {
					var v = '';

					if (status === _constants.SUCCESS) {
						v += '<i class="icon-circle success"></i> ' + localize.t('tiq.dashboard.verify_data_layer.success');
					} else {
						if (note) {
							v += '<i class="icon-ban-circle failed"></i> <span class="hyper failedBrowserStepStatus">' + localize.t('tiq.dashboard.verify_data_layer.failed') + ' <i class="icon-caret-down"></i></span>';
							v += '<div class="failed-note">';
							v += '	<p><strong>' + localize.t('tiq.dashboard.verify_data_layer.error_message') + '</strong></p>';
							if (note.selector) {
								v += '	<p>' + localize.t('tiq.dashboard.verify_data_layer.failed_on_selector') + ' ' +  note.selector + '</p>';
							}
							v += '	<p>' + note.description + '</p>';
							v += '	<p><a class="diagnostic-guide" href="#" onclick="utui.help.openCommunityLink(\'' + common.community.verify_data_layer_test_diagnostic_guide + '\'); return false;">' + localize.t('tiq.dashboard.verify_data_layer.view_diagnostic_guide') + '</a></p>';
							v += '</div>';
						} else {
							v += '<i class="icon-ban-circle failed"></i> ' + localize.t('tiq.dashboard.verify_data_layer.failed');
						}
					}

					return v;
				}
			};

			// --------------------------------------------------------
			var _bindUI = {
				// --------------------------------------------------------
				contextNavMenu: function () {
					$modalDialog.find('.js-navtab').off('click').on('click', _eventHandlers.onNavMenuClick);
				},

				// --------------------------------------------------------
				contentHeader: function () {
					$modalDialog.find('#' + _namespace + '_deleteTestResultBtn').safeOn('click', _eventHandlers.onDeleteTestResultBtnClick);
					$modalDialog.find('#' + _namespace + '_expand_all').safeOn('click', _eventHandlers.onExpandAllClick);
				},

				// --------------------------------------------------------
				contentBody: function () {
					$modalDialog.find('.row-item').safeOn('click', _eventHandlers.onStepResultElementClick);
				},

				// --------------------------------------------------------
				accordionStepContent: function () {
					$modalDialog.find('.report-action').safeOn('click', _eventHandlers.onReportActionElementClick);
					$modalDialog.find('.icon-question-sign, .screenshot').tipsy({gravity: 'sw'});
					$modalDialog.find('.failedBrowserStepStatus').safeOn('click', _eventHandlers.onFailedBrowserStepStatusClick);
				}
			};

			// --------------------------------------------------------
			var _render = {
				// --------------------------------------------------------
				ui: function (callback) {
					$modalDialog.find('.modal-body').html(_templateAccordion);

					var $header = $modalDialog.find('.main-header'),
						$body = $modalDialog.find('.main-body');

					$header.empty();

					$body.empty()
						.append('<div class="validation-message bg-danger"></div>');

					_render.contextBody(callback);

					// Dialog adjustments
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				contextBody: function (callback) {
					$modalDialog.find('.sidebar-body')
						.empty()
						.append(utui.ui.template.contextBox('', localize.t('tiq.dashboard.verify_data_layer.select_report_to_view')))
						.append(utui.ui.template.navigationCompositeView(_view.contextBody()));

					_bindUI.contextNavMenu();

					if (callback) {
						callback();
					}
				},

				// --------------------------------------------------------
				contentHeader: function () {
					$modalDialog.find('.main-header').html(_view.contentHeader());
					_bindUI.contentHeader()
				},

				// --------------------------------------------------------
				contentBody: function () {
					$modalDialog.find('.main-body').html(_view.contentBody());
				},

				// --------------------------------------------------------
				content: function () {
					_render.contentHeader();
					_render.contentBody();
					_bindUI.contentBody();
					// Dialog adjustments
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				expandedStepAccordion: function (id) {
					if (id) {
						// Set Accordion contents and trigger selection
						var innerView = _view.accordionStepContent(id),
							$accordion = $modalDialog.find('.row-item-accordion[data-key="' + id + '"]').html(innerView),
							$element = $modalDialog.find('.row-item[data-row-key="' + id + '"]');

						$element.addClass('selected');
						$accordion.slideDown();

						_bindUI.accordionStepContent();

						// Auto-expand all failed and warning data sources
						$accordion.find('.report-action .failed, .report-action .warning').parent().trigger('click');
					}
				},

				// --------------------------------------------------------
				expandedDataSourceAction: function (id) {
					if (id) {
						// Set Accordion contents and trigger selection
						var innerView = _view.accordionActionContent(id),
							$accordion = $modalDialog.find('.row-item-accordion-action[data-key="' + id + '"]').html(innerView),
							$element = $modalDialog.find('.report-action[data-action-key="' + id + '"]');

						$element.addClass('selected');
						$accordion.slideDown();
					}
				}
			};

			// --------------------------------------------------------
			var _request = {
				// --------------------------------------------------------
				getTestResult: function (callback) {
					utui.util.showSpinner();
					_hideValidationMessage();

					var testResult = _testResults[_selectedTestId];
					if (!testResult) {
						var url = utui.service.addParamsToURL(utui.service.restapis.GET_TEST_RESULT_BY_ID, {'id': _selectedTestId});
						utui.service.get(url, null, null,
							function () {
								_response.onGetTestResultSuccess.apply(this, arguments);
								if (callback) callback();
							},
							function () {
								_response.onGetTestResultError.apply(this, arguments);
							}
						);
					} else { // Test Result has already been fetched from server
						utui.util.hideSpinner();
						if (callback) callback();
					}
				},

				// --------------------------------------------------------
				deleteTestResult: function (callback) {
					utui.util.showSpinner();

					var url = utui.service.addParamsToURL(utui.service.restapis.DELETE_TEST_RESULT, {'id': _selectedTestId});
					utui.service.delete(url, null, null,
						function () {
							_response.onDeleteTestConfigSuccess.apply(this, arguments);
							if (callback) callback();
						},
						function () {
							_response.onDeleteTestConfigError.apply(this, arguments);
						});
				}
			};

			// --------------------------------------------------------
			var _response = {
				// --------------------------------------------------------
				onGetTestResultSuccess: function (data) {
					utui.util.hideSpinner();

					_hideValidationMessage();
					_testResults[_selectedTestId] = data;
				},

				// --------------------------------------------------------
				onGetTestResultError: function (status, response) {
					utui.util.hideSpinner();

					$modalDialog.find('.content-body').empty();
					var errorMsg = utui.service.getErrorFromResponse(response, '', _errorCodeMap.get_test_result);
					_showValidationMessage(errorMsg);
				},

				// --------------------------------------------------------
				onDeleteTestConfigSuccess: function (data) {
					utui.util.hideSpinner();

					needsRefresh = true;
				},

				// --------------------------------------------------------
				onDeleteTestConfigError: function (status, response) {
					utui.util.hideSpinner();

					var errorMsg = utui.service.getErrorFromResponse(response, '', _errorCodeMap.delete_test_result);
					_showValidationMessage(errorMsg);
				}
			};

			var buttons = [
					{
						text: localize.t('tiq.dialog.button.close'),
						click: _eventHandlers.onBtnCloseClick,
						id: _namespace + '_closeBtn'
					}
				],
				title = localize.t('tiq.dashboard.verify_data_layer.test_results', {title: utui.util.safeEscape(_testConfig.title)});

			// Show the modal dialog
			$modalDialog = utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width: 1010, height: 850 }, _eventHandlers.onBtnCloseClick);

			// Render the contents of the dialog
			if (!callback) {
				callback = _selectFirstReportView;
			}
			_render.ui(callback);
		}

	};

	return _public;
}();

utui.tour = function() {
    // PRIVATE
    // ----------------------------------------------------
    var _namespace = "iqTour";

    // ----------------------------------------------------
    var _isSourceHelpCenter = false;

    // ----------------------------------------------------
    var _queue = [];

    // ----------------------------------------------------
    utui.util.pubsub.subscribe(utui.constants.help_center.TUTORIAL_ENDED, _processQueue);

    // ----------------------------------------------------
    // Our customized tour engine used to handle tours on top of the Hopscotch framework
    // Refer to documentation v0.1.2 for basics: https://github.com/linkedin/hopscotch
    var _tourEngine = {
        registerHelpers: function() {
            hopscotch.registerHelper('fillText', function(textFieldId, textStr) {
                document.getElementById(textFieldId).value = textStr;
            });
        },
        startTour: function(tourName, setStep, hasClickCapture) {
            if(hasClickCapture !== false) {
                _clickCapture.activate();
            }

            return hopscotch.startTour(tourName, setStep);
        },
        nextStep: function() {
            return hopscotch.nextStep();
        },
        prevStep: function() {
            return hopscotch.prevStep();
        },
        pauseTour: function() {
            return hopscotch.endTour(false);
        },
        endTour: function(isSourceHelpCenter) {
            // Show Help Center after dismissing tour
            if(_isSourceHelpCenter) {
                utui.help.showHelpCenterDialog();
            }

            return hopscotch.endTour();
        },
        getCurrStepNum: function() {
            return hopscotch.getCurrStepNum();
        },
        /*
         * Checks for tour state saved in sessionStorage/cookies and returns the
         * state if it exists. Use this method to determine whether or not you
         * should resume a tour.
        */
        getState: function() {
            return hopscotch.getState();
        },
	    trackProgress: function() {
			var currentState = _tourEngine.getState(),
				stateStep = _tourEngine.getCurrStepNum() || 0,
		        stepTotal = 0;

            stateStep += 1; // increment step by 1 to keep data consistent with steps.length

		    if (currentState) {
			    var state = currentState.split(':'),
				    stateName = state[0]

			    var tourInfo = utui.tour.getTourInfo(stateName);
			    if (tourInfo && tourInfo.steps) {
				    stepTotal = tourInfo.steps.length;
			    }
			    utui.util.pubsub.publish(utui.constants.help_center.TUTORIAL_STEP, {action:utui.constants.help_center.TUTORIAL_STEP, tour_name:stateName, tour_step_number:stateStep, tour_step_total:stepTotal});
		    }
	    },
        queueNextTour: function(tourName) {
            if(_queue.indexOf(tourName) === -1) {
                _queue.push(tourName); //add to queue
            }
        },
        clearQueue: function() {
            _queue.length = 0; //clear queue array
        },
        listen: function(eventName, callback) {
            return hopscotch.listen(eventName, callback);
        }
    }

    var _dialogs = {
        // ------------------------------------------------------------
        // Prompts user if they attempt to leave the tour
        stopTourConfirm: function() {
            // Private API
            var _namespace = 'iqTourStopConfirm_dialog',
                _$template = utui.ui.dialog.body();

            // --------------------------------------------------------
            // Adds the content to the template
            var _render = {
                // ----------------------------------------------------
                content: function() {
                    _$template.find('.dialog-content-body').html(_view.contentBody());
                }
            }

            // --------------------------------------------------------
            // Returns the content within the template
            var _view = {
                // ----------------------------------------------------
                contentBody: function() {
                    var v = '';

                    v += '<div id="'+_namespace+'_container" class="dialog-content">';
                        v += '<div class="dialog-content-header container-fluid">';
                            v += '<div class="row-fluid">';
                                v += '<div class="span12">';
                                        v += '<div class="dialog-h1">' + localize.t('tiq.tours.confirm.are_you_sure_exit_tour') + '</div>';
                                v += '</div>';
                            v += '</div>';
                            v += '<div class="dialog-content-body container-fluid">';
                                v += '<div class="row-fluid">';
                                    v += '<div class="span12">';
                                        v += '<p>' + localize.t('tiq.tours.confirm.dont_worry') + '</p>';
                                    v += '</div>';
                                v += '</div>';
                            v += '</div>';
                        v += '</div>';
                    v += '</div>';

                    return v;
                }
            }

            // ----------------------------------------------------
            // This processes the view elements
            var _viewModel = { }

            // --------------------------------------------------------
            // Binds the UI elements
            var _bindUI = { }

            // --------------------------------------------------------
            // UI Event handlers
            var _eventHandlers = {
                // ----------------------------------------------------
                onCancelBtnClick: function() {
                    utui.ui.dialog.dispose(_namespace);

                    var state = _tourEngine.getState(),
                        stateName, stateStep, tourEntry;
                    

                    if(state) {
                        state = state.split(':');
                        stateName = state[0],
                        stateStep = state[1],
                        
                        _tourEngine.startTour( _getTourInfo(stateName), parseInt(stateStep) );
                        _clickCapture.activate();
                    } else {
                        console.warn('ERROR: Tour is not resumable because the state is undefined.')
                    }
                },
                onExitTourBtnClick: function() {
                    utui.ui.dialog.dispose(_namespace);
                    var openDialogs = utui.ui.dialog.openDialogs;
                    
                    for (var i = openDialogs.length - 1; i >= 0; i--) {
                        utui.ui.dialog.dispose(openDialogs[i]);
                    };

                    _tourEngine.endTour();
                }
            }

            // PUBLIC
            // ----------------------------------------------------
            var _public = {
                // ----------------------------------------------------
                show: function(sessionId) {
                    _render.content();

                    // Dialog buttons
                    var buttons = [
                        {
                            text: localize.t('tiq.dialog.button.exit_tour'),
                            click: _eventHandlers.onExitTourBtnClick,
                            id: _namespace + 'ExitTourBtn',
                            class: 'nav-btn'
                        },
                        {
                            text: localize.t('tiq.dialog.button.continue_tour'),
                            click: _eventHandlers.onCancelBtnClick,
                            id: _namespace + 'CancelBtn',
                            class: 'nav-btn'
                        }
                    ];

                    // Show the dialog
                    utui.ui.dialog.show(_namespace, '', buttons, _$template, {width:500,height:200});
                },
                hide: function() {
                    $('#'+_namespace).dialog().remove();
                }
            }

            return _public;
        }()
    }

    // ----------------------------------------------------
    // Binds the UI elements
    var _bindUI = {
        init: function() {
            this.clickCapture();
        },
        initTutorialCenter: function() {
            $('#'+_namespace+'_button').on('click', _eventHandlers.onTutoralCenterBtnClick);
        },
        clickCapture: function() {
            $(document).on('click', '.iq-tutorial-capture', _eventHandlers.onCaptureClick);
        }
    }

    // ----------------------------------------------------
    // UI Event handlers
    var _eventHandlers = {
        onTutoralCenterBtnClick: function(event) {
            _dialogs.tourLibrary.show();
        },
        onCaptureClick: function(event) {
            if(!$.isEmptyObject(_tourEngine.getState())) {
                _clickCapture.deactivate();
                _tourEngine.pauseTour();
                _dialogs.stopTourConfirm.show();
            } else {
                _clickCapture.destroy();
            }
        }
    }

    // ----------------------------------------------------
    // This is a prevention mechanism that disallows users from navigating away from tour
    var _clickCapture = {
        isActiveOnPage: function() {
            if($('#'+_namespace+'_capture').length === 0) {
                return false;
            }
            return true;
        },
        activate: function() {
            if(this.isActiveOnPage()) {
                $('#'+_namespace+'_capture').show();
            } else {
                $('<div />', {
                    'class': 'iq-tutorial-capture',
                    'id': _namespace+'_capture'
                }).appendTo(document.body);
            }
        },
        deactivate: function() {
            $('#'+_namespace+'_capture').hide();
        },
        destroy: function() {
            $('#'+_namespace+'_capture').remove();
        }
    }

    // ----------------------------------------------------
    // Fetches the tour object based on ID
    function _getTourInfo(id) {
        for (var i in utui.tour.lib) {
            if(!utui.tour.lib.hasOwnProperty(i)) continue;
        
            if(utui.tour.lib[i].id === id) {
                return utui.tour.lib[i];
            }
        }
        return null;
    }

    // ----------------------------------------------------
    function _processQueue() {
        // If we have a tour pending in queue, go ahead and call it.
        if(_queue.length > 0) {
            _public.startTour(_queue[0], 0, true);
            _queue.shift();
        }
    }

    // PUBLIC
    // ----------------------------------------------------
    var _public = {
        // ----------------------------------------------------
        // @param (tourId) string - the ID of the tour
        // @param (isSourceHelpCenter) bool - set this true if we're expecting to return to the Help Center
        // @param (hasClickCapture) bool - set false if we choose not to have a click capture (the prevention mechanism that disallows users from navigating away from tour)
        startTour: function(tourId, isSourceHelpCenter, hasClickCapture) {
            var tourEntry = _getTourInfo(tourId);

            _isSourceHelpCenter = (isSourceHelpCenter) ? true : false;

            _tourEngine.endTour(); // clears any existing tour

            if(tourEntry) {
                _tourEngine.startTour(tourEntry, null, hasClickCapture);
	            _tourEngine.trackProgress();
            }
            
            _bindUI.init();
        },
        
        // ----------------------------------------------------
        // @param (showHelpCenter) bool - shows help center dialog after tour ends (called by tours onEnd method)
        endTour: function(showHelpCenter) {

            //Note: if getState returns a string, we know the tour is active.
            if(_isSourceHelpCenter && showHelpCenter && $.isEmptyObject(_tourEngine.getState())) {
                utui.help.showHelpCenterDialog();
                _isSourceHelpCenter = false; // resets source
            }

            _clickCapture.destroy();
        },
        queueNextTour: function(tourName) {
            _tourEngine.queueNextTour(tourName);
        },
	    trackProgress: _tourEngine.trackProgress,

	    getTourInfo: _getTourInfo
    }
    return _public;

}();

utui.tour.cat = function() {
    // sample code
    // @method tour_index [array] - this references the ID of the tour within _tourLibraryTopic.
    return [
        {
            id: 0,
            name: localize.t('tiq.tours.cat.name'),
            description: localize.t('tiq.tours.cat.desc'),
            tour_index: ['tour-iq-overview']
        }
    ];

}();

utui.tour.lib = {

    'tour-iq-overview': {
        id: "tour-iq-overview",
        name: localize.t('tiq.tours.lib.iq_overview.name'),
        description: localize.t('tiq.tours.lib.iq_overview.desc'),
        date : "1/20/2014",
        i18n: {
			nextBtn: localize.t('tiq.tours.lib.iq_overview.next'),
			prevBtn: localize.t('tiq.tours.lib.iq_overview.prev'),
            doneBtn: localize.t('tiq.tours.lib.iq_overview.done'),
			skipBtn: localize.t('tiq.tours.lib.iq_overview.skip'),
			closeTooltip: localize.t('tiq.tours.lib.iq_overview.close_tooltip')
        },
        onNext: function() {
            $('.iq-tutorial-highlight').removeClass('iq-tutorial-highlight');
        },
        onEnd: function() {
            $('.iq-tutorial-highlight').removeClass('iq-tutorial-highlight');

            if($('#global_save').hasClass('js-current-active')) {
                $('#global_save').removeClass('js-current-active');
            }
            else if($('#global_save').hasClass('js-set-active')) {
                $('#global_save').removeClass('btn-warning js-set-active'); 
            }
            return utui.tour.endTour(true);
        },
        steps: [
            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.welcome.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.welcome.content'),
                target: "logoContainer",
                placement: "center",
                onShow: function() {
                    $('#tabs_dashboard').trigger('click');
                }
            },


            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.help.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.help.content'),
                target: "helpCenterLink",
                placement: "bottom",
                arrowOffset: "right",
                xOffset: "right",
                onShow: function() {
                    $('#helpCenterLink').addClass('iq-tutorial-highlight');
                }
            },

            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.summary.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.summary.content'),
                target: "tabs_dashboard",
                placement: "bottom",
                onShow: function() {
                    $('#tabs_dashboard').trigger('click');
                }
            },


            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.datalayer_tab.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.datalayer_tab.content'),
                target: "tabs_define",
                placement: "bottom",
                arrowOffset: "left",
                // xOffset: "left",
                showCTAButton: true,
                ctaLabel: localize.t('tiq.tours.lib.iq_overview.steps.datalayer_tab.ctaLabel'),
                onCTA: function() {
					utui.help.openCommunityLink(common.community.adding_data_sources, '_blank');
                    return false;
                },
                onShow: function() {
                    $('#tabs_define').trigger('click');
                }
            },


            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.loadrules.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.loadrules.content'),
                target: "tabs_loadrules",
                placement: "bottom",
                arrowOffset: "center",
                xOffset: "center",
                onShow: function() {
                    $('#tabs_loadrules').trigger('click');
                }
            },


            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.tags.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.tags.content'),
                target: "tabs_manage",
                placement: "bottom",
                arrowOffset: "center",
                xOffset: "center",
                showCTAButton: true,
                ctaLabel: localize.t('tiq.tours.lib.iq_overview.steps.tags.ctaLabel'),
                onCTA: function() {
					utui.help.openCommunityLink(common.community.adding_a_tag, '_blank');
                    return false;
                },
                onShow: function() {
                    $('#tabs_manage').trigger('click');
                }
            },

                {
                    title: "",
                    content: localize.t('tiq.tours.lib.iq_overview.steps.tags.add_tag.content') + "<span id='tagLoadSpinner' style='position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.4); font-size: 16px; text-align: center; display: none'>" + localize.t('tiq.tours.lib.iq_overview.steps.tags.add_tag.loading') + "</span>",
                    target: "manage_addMoreBtn",
                    placement: "bottom",
                    arrowOffset: "right",
                    xOffset: "right",
                    onShow: function() {
                        $('#manage_addMoreBtn').addClass('iq-tutorial-highlight');
                    },
                    onNext: function() {
                        utui.manage.marketplace.show();
                    }
                },

                {
                    title: "",
                    content: localize.t('tiq.tours.lib.iq_overview.steps.tags.add_tag.content'),
                    target: "manage_addMoreBtn",
                    placement: "bottom",
                    arrowOffset: "right",
                    xOffset: "right",
                    onShow: function() {
                        hopscotch.nextStep();
                    }
                },

                {
                    title: localize.t('tiq.tours.lib.iq_overview.steps.tags.marketplace.title'),
                    content: localize.t('tiq.tours.lib.iq_overview.steps.tags.marketplace.content'),
                    target: "logoContainer",
                    placement: "center",
                    showCTAButton: true,
                    ctaLabel: localize.t('tiq.tours.lib.iq_overview.steps.tags.ctaLabel'),
                    onShow: function() {
                        $('#hopscotch-next').focus();
                    },
                    onCTA: function() {
						utui.help.openCommunityLink(common.community.adding_a_tag, '_blank');
                        return false;
                    },
                    onNext: function() {
                        $('#tagMarketplace_closeBtn').trigger('click');
                    }
                },


            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.save.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.save.content'),
                target: "global_save",
                placement: "bottom",
                arrowOffset: "right",
                xOffset: "right",
                onShow: function() {
                    if($('#global_save').hasClass('btn-warning')) {
                        $('#global_save').addClass('js-current-active');
                    }
                    else {
                        $('#global_save').addClass('btn-warning js-set-active');
                    }
                },
                onNext: function() {
                    if($('#global_save').hasClass('js-current-active')) {
                        $('#global_save').removeClass('js-current-active');
                    }
                    else {
                        $('#global_save').removeClass('btn-warning js-set-active'); 
                    }
                    
                    if(utui.permissions.isReadOnly()) {
                        hopscotch.showStep(15);
                    } else {
                        $('#global_save').trigger('click');
                    }
                }
            },

            // Initializes click of a dialog
            // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
            {
				title: localize.t('tiq.tours.lib.iq_overview.steps.save.title'),
				content: localize.t('tiq.tours.lib.iq_overview.steps.save.content'),
                target: "global_save",
                placement: "bottom",
                arrowOffset: "right",
                xOffset: "right",
                onShow: function() {
                    hopscotch.nextStep();
                }
            },


            // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            {
                title: "",
                content: localize.t('tiq.tours.lib.iq_overview.steps.save.dialog.content'),
                target: "logoContainer",
                placement: "center"
            },

            {
                title: "",
                content: localize.t('tiq.tours.lib.iq_overview.steps.save.code_center.content'),
                target: "pubsave_configureEnvBtn",
                placement: "bottom",
                arrowOffset: "right",
                xOffset: "right",
                onNext: function() {
                    $('#pubsave_configureEnvBtn').trigger('click');
                }
            },
            {
                title: "",
                content: localize.t('tiq.tours.lib.iq_overview.steps.save.code_center.content'),
                target: "pubsave_configureEnvBtn",
                placement: "bottom",
                arrowOffset: "right",
                xOffset: "right",
                onShow: function() {
                    hopscotch.nextStep();
                }
            },

            {
                title: "",
                content: localize.t('tiq.tours.lib.iq_overview.steps.save.code_center.content_grab_here'),
                target: "logoContainer",
                placement: "center",
                onNext: function() {
                    $('#configureEnv_dialog_okBtn').trigger('click');
                    $('#savePublish_dialog_cancelBtn').trigger('click');
                }
            },

            // --------------------------------------------------------------------------------------
            {
                title: localize.t('tiq.tours.lib.iq_overview.steps.conclusion.title'),
                content: localize.t('tiq.tours.lib.iq_overview.steps.conclusion.content'),
                target: "global_save",
                placement: "center",
                onShow: function() {
                    $('#tabs_dashboard').trigger('click');
                }
            }
        ]
    },

    // Dependent by Help Center dialog; do not delete
    'tour-return': {
        id: "tour-return",
        name: localize.t('tiq.tours.lib.return.name'),
        date : "1/8/2013",
        i18n: {
            doneBtn: 'Done'
        },
        steps: [
            {
                title: localize.t('tiq.tours.lib.return.steps.return.title'),
                content: localize.t('tiq.tours.lib.return.steps.return.content'),
                target: "helpCenterLink",
                placement: "bottom",
                arrowOffset: "right",
                xOffset: "right",
                showCTAButton: true,
                ctaLabel: localize.t('tiq.tours.lib.return.steps.return.ctaLabel'),
                onCTA: function() {
                    utui.tour.queueNextTour('tour-iq-overview');
                    $('#hopscotch-done').trigger('click');
                }
            }
        ],
        onEnd: function() {
            utui.tour.endTour();
        }
    }
};



utui.updates = {
    content : [
        {
            id : 86,
            title : "Rich Dropdowns also Popout!",
            desc : "Click the popout button of the new dropdowns to view an easy to use data source selector dialog.",
            date : "5/6/2014",
            imgSrc : "/img/dropdowns2.png"
        },
        {
            id : 87,
            title : "Richer Data Source Drop-downs are Here!",
            desc : "The data source drop-downs for Load Rules and Mappings are sleeker and better organized. You'll be able to quickly and easily select the data source you want, or add one on the fly with a few quick clicks.",
            date : "5/6/2014",
            imgSrc : "/img/dropdowns.png"
        },
        {
            id : 88,
            title : "Crypto Extension now available!",
            desc : "Use this new extension to enable support for MD5 hashing of any data source.",
            date : "5/15/2014"
        },
        {
            id : 89,
            title : "New user permission for Javascript Extensions",
            desc : "By its nature, the Javascript Extension is quite powerful. Now you can limit access and changes to your Javascript Extensions with this new user permission.",
            date : "5/15/2014"
        },
        {
            id : 90,
            title : "Welcome Scan Companion!",
            desc : "Available from the new Tealium Tools for Chrome, we've created a companion to Site Scan, affectionately named, Scan Companion. Go beyond your sitemap files with Scan Companion to detect unmanaged tags within dynamic pages, such as your purchase flow. Learn more today!",
            date : "5/15/2014",
            linkUrl : common.community.scan_companion
        },
        {
            id : 91,
            title : "Introducing Tealium Tools For Chrome",
            desc : "We are excited to announce a new way to access all your favorite Tealium tools, such as Tealium iQ, Web Companion, and Scan Companion (new), with much more to come. Available now from the Chrome Web Store.",
            date : "5/15/2014",
            linkUrl : "https://chrome.google.com/webstore/detail/tealium-tools/gidnphnamcemailggkemcgclnjeeokaa"
        },
        {
            id : 92,
            title : "Now Site Scan Detects Unmanaged Tags!",
            desc : "We've improved Site Scan to now detect those pesky vendor tags on your website not managed through Tealium iQ.",
            date : "5/15/2014",
            linkUrl : common.community.site_scan
        },
        {
            id : 93,
            title : "Tag Marketplace Policy now Available",
            desc : "Prefer to restrict which vendor tags are available in our Marketplace? Now you can with the new Tag Management Policy, available now to account owners from the administration menu in the upper right.",
            date : "5/22/2014",
            linkUrl : "https://community.tealiumiq.com/posts/811549"
        },
        {
            id: 94,
            title : "Publish Environment Titles are Here!",
            desc : "Expand the utility of your normal publish environments by giving them customized titles. Now Tealium iQ can match your organization's environment setup to a T.",
            date : "5/27/2014",
            linkUrl : "https://community.tealiumiq.com/posts/813032"
        },
        {
            id: 95,
            title : "Extensions Extreme Makeover!",
            desc : "We've given Extensions a facelift to improve usability and provide a more streamlined workflow.",
            date : "6/03/2014"
        },
	    {
		    id: 96,
		    title : "Tealium iQ gets a Turboboost!",
		    desc : "We've been working hard under the hood to improve speed and responsiveness of the UI to save you time.",
		    date : "6/03/2014"
	    },
        {
            id: 97,
            title : "The Newest Mobile Plugins are Here!",
            desc : "We're thrilled to announce our new plugins for the PhoneGap and Titanium mobile platforms and the 3D game engine Unity.",
            date : "6/04/2014"
        },
		{
			id : 98,
			title : "Version Labels Have Arrived!",
			desc : "A new tool in your organizational arsenal, Version Labels enable you to easily identify versions and separate the good from the bad at a glance.",
			date : "6/10/2014",
			linkUrl : "https://community.tealiumiq.com/posts/816435"
		},
        {
            id: 99,
            title : "Introducing the Do Not Track Extension",
            desc : "This Extension prevents loading some or all of your Tags to respect a visitor's Do Not Track preference.",
            date : "6/19/2014",
            linkUrl : "https://community.tealiumiq.com/posts/785004"
        },
	    {
		    id: 100,
		    title : "Site Scan Upgraded (Again!)",
		    desc : "We've upgraded Site Scan so that it not only detects any unmanaged Tags, but adds and automatically configures those Tags in Tealium iQ with a few simple clicks.",
		    date : "7/09/2014",
		    linkUrl : common.community.site_scan
	    },
        {
            id: 101,
            title : "AudienceStream Trace is now available for Mobile!",
            desc : "We’re delighted to announce more robust mobile libraries that include support for AudienceStream Trace. Check out the TLC and repo wikis for more information.",
            date : "7/15/2014",
            linkUrl : "https://community.tealiumiq.com/posts/835175"
        },
	    {
		    id: 102,
		    title : "New icons highlight changes to Tealium iQ!",
		    desc : "New color-coded visual indicators are here to notify you of any changes you make to your Tealium iQ profile. These indicators will call out the elements you’ve added, removed or modified.",
		    date : "7/29/2014",
		    linkUrl : common.community.save_publish_a_version
	    },
		{
			id: 103,
			title : "New Tag Status Checker tool (under Account Admin)",
			desc : "The Tag Status Checker shows you the current version of your tag templates and indicates which ones have been modified.",
			date : "7/31/2014"
	    },
        {
            id: 104,
            title : "Tag Reports got a facelift!",
            desc : "We redesigned the Tag Reports and made it more user-friendly. Here's what's different: color-coded charts, interactive popups, and account-level reporting.",
            date : "7/31/2014"
        },
        {
            id: 105,
            title : "Did you notice the new My iQ tab?",
            desc : "The My iQ tab is now home to the Summary and Reports tab. It's a centralized location for Tag and Site Scan reports generated for your site.",
            date : "7/31/2014",
            linkUrl : "https://community.tealiumiq.com/posts/842351-my-iq-tab"
        },
        {
            id: 106,
            title : "New and improved Tag Marketplace is here!",
            desc : "We have powered up its Search functionality and redesigned the interface so adding Tags to Tealium iQ is easier and faster.",
            date : "8/7/2014",
            linkUrl : common.community.tags_tab
        },
        {
            id: 107,
            title : "Try our new Set Profile Logo feature!",
            desc : "Customize a Tealium iQ profile by adding a new header logo. Just provide the image url and that’s it!",
            date : "8/07/2014",
            linkUrl: "https://community.tealiumiq.com/posts/842351"
        },
	    {
		    id: 108,
		    title : "Introducing the new 'Title' field for Data Sources.",
		    desc : "The title says it all! Now you have the option to provide a short Title to your Data Sources for easier identification.",
		    date : "9/04/2014"
	    },
		{
			id: 109,
			title : "Autoconfigure your Tag!",
			desc : "The Tag Marketplace just got smarter! It can detect your Tag parameters from a vendor code snippet and automatically configure your Tag in a single step.",
			date : "9/09/2014",
			linkUrl: "https://community.tealiumiq.com/posts/859220-tag-marketplace"

		},
        {
            id: 110,
            title : "Meet the improved Tealium Tools Extension!",
            desc : "In addition to a sleeker look and feel, the Tealium Tools Chrome Extension now lets you build your own line of custom tools and utilities.",
            date : "9/12/2014",
            linkUrl: common.community.tealium_tools_chrome_extension_custom_tools
        },
        {
            id: 111,
            title : "Announcing Tealium’s Mobile Library Version 4.0",
            desc : "We’re thrilled to announce the newest version of our Mobile Library. To make using the mobile library easier, we’ve streamlined the way it’s implemented through Tealium iQ by replacing the old Library Manager extension with easier-to-configure publish settings. In addition to a smoother implementation process, the new library allows you to run parts of your app’s code directly from Tealium iQ.",
            date : "10/07/2014"
        },
        {
            id: 112,
            title : "Mobile Library Grand Opening!",
            desc : "We’re making our mobile libraries open to the public. Now you can check out our code at your leisure. Play with our native iOS, Android, Windows 8, and Blackberry libraries, or go directly to our Unity, Phonegap, or Titanium plugins and see what all the fuss is about.",
            date : "10/07/2014",
            linkUrl: "https://community.tealiumiq.com/posts/871339"
        },
	    {
		    id: 113,
		    title : "Boost your Data Sources with Labels!",
		    desc : "You can now assign labels to your Data Sources for better organization. Using labels you can quickly and easily group Data Sources. It's simple, give it a shot.",
		    date : "10/14/2014",
		    linkUrl: "https://community.tealiumiq.com/posts/541657-data-layer-tab"
	    },
        {
            id:114,
            title : "Introducing Colored Labels for AudienceStream!",
            desc : "Organize your AudienceStream Attributes with the new Labels utility. Just assign the Attribute a label, pick a colored icon and you are done!",
            date : "10/14/2014"
        },
        {
            id:115,
            title : "TLC Maintenance Alert",
            desc : "Tealium Learning Community will be unavailable on October 25th from 4:00 PM to 6:00 PM Pacific Daylight Time due to required maintenance. If you have any questions during this time, please contact your Tealium Account Manager.<br/>We apologize for the inconvenience!",
            date : "10/23/2014"
        },
        {
            id:116,
            title : "The Modal Offer Extension Has Landed!",
            desc : "Now you can quickly and easily create a modal for just about any situation and customize it to your heart’s desire. Check out the TLC for details! ",
            date : "11/13/2014",
            linkUrl: "https://community.tealiumiq.com/posts/886401"
        },
        {
            id:117,
            title : "Registration for Digital Velocity is Open",
            desc : "You’re invited to the industry’s biggest gathering of experts in tag management and unified marketing from April 14-16, 2015, in downtown San Diego. Join our growing community of global brands for three days of hands-on training, exclusive best practices, thought leadership, and valuable peer networking. <a href=\"http://www.digitalvelocityconference.com/?utm_source=tiq&utm_medium=alert&utm_term=register_user_conference&utm_content=tiq_alert&utm_campaign=tiq_promo\" target=\"blank\" style=\"color:#2E6E9E; font-weight:bold; padding:0; display:inline;\">Register now!</a>",
            date : "11/13/2014"
        },
        {
            id:118,
            title : "Diff for Deployed Tags is Here!",
            desc : "Have total confidence in your deployed tag files with our new \"Distro\" verification features. Now you can compare the code of your tags between versions and revisions. Changes are highlighted and presented side by side, making it a cinch to read them. More details on TLC!",
            date : "12/18/2014",
            linkUrl: "https://community.tealiumiq.com/posts/896430"
        },
	    {
		    id:119,
		    title : "We're thrilled to announce the newest version of our Mobile Library",
		    desc : "Our newest mobile libraries feature a new technology, TagBridge! TagBridge enables you to define actions in Tealium iQ that trigger changes in your native apps. This opens an entire dimension of mobile marketing for native applications.",
		    date : "12/23/2014",
		    linkUrl: "https://community.tealiumiq.com/posts/913912"
	    },
	    {
		    id:120,
		    title : "Secure your Tealium iQ configurations with Resource Locks.",
		    desc : "Tealium iQ Labels can now double as a virtual lock to protect Data Sources, Tags, Load Rules, and Extensions in your profile. Labels that are enabled as Resource Locks will render a read-only view of the Tealium iQ configuration, keeping it safe from users who are not allowed to modify it. More details on TLC!",
		    date : "01/22/2015",
		    linkUrl: "https://community.tealiumiq.com/posts/922996"
	    },
        {
            id:121,
            title : "Improved Pixel Reduction!",
            desc : "Tealium now gives you the ability to bundle any of your Tags into the utag.js file. This keeps all the functionality of the Tags while reducing the number of requests made from your page.",
            date : "01/29/2015",
            linkUrl: common.community.tag_configuration_advanced_settings
        },
        {
            id:122,
            title : "TLC Maintenance Alert",
            desc : "The Tealium Learning Community will be unavailable on February 7th from 10:00 PM to 10:30 PM CST due to required maintenance. If you have any questions during this time, please contact your Tealium Account Manager. We apologize for the inconvenience!",
            date : "2/5/2015"
        },
        {
            id:123,
            title: "Introducing Split Trait Segmentation in AudienceStream",
            desc: "AudienceStream now gives you the ability to assign values to a trait based on percentages. You can enhance your AB tests, verify your connectors, and much more.",
            date: "2/18/2015",
            linkUrl: "https://community.tealiumiq.com/posts/935438"
        },
        {
            id:124,
            title: "Introducing the Verify Data Layer feature",
            desc: "The Verify Data Layer feature makes it a cinch to take stock of your Data Layer implementation and verify that the UDO is set up properly. Check out the posts to learn more.",
            date: "5/22/2015",
            linkUrl: "https://community.tealiumiq.com/series/21371-tealium-s-verify-data-layer-tool"
        },
        {
            id:125,
            title: "EventDB: The Latest Addition to the DataAccess Platform",
            desc: "EventDB is a fast and effective way to stream your events into an SQL database so you can analyze the data with a BI tool of your choice. Check out our article for more details.",
            date: "5/22/2015",
            linkUrl: "https://community.tealiumiq.com/posts/974299"
        },
		{
			id:126,
			title: "Multifactor Auth (MFA) is here!",
			desc: "At Tealium, we take account security very seriously. That is why we now support MFA with Google Authenticator tokens. Activate MFA to protect your account from unauthorized user access.",
			date: "6/30/2015",
			linkUrl: common.community.multi_factor_authentication_for_tealium
		},
		{
			id:127,
			title: "Introducing the ability to merge changes!",
			desc: "This new feature provides you the ability to accept changes from concurrent users and the agility for bringing version changes together.",
			date: "10/1/2015",
			linkUrl: "https://community.tealiumiq.com/posts/1039938"
		},
        {
            id:128,
            title: "MFA - Important Update!",
            desc: "Starting Tuesday, February 16th, we will automatically enable Multi-factor Authentication (MFA) setting in your Tealium account. You will require your password and 6-digit security token from Google's Authenticator mobile app to sign in.",
            date: "1/19/2016",
            linkUrl: "https://community.tealiumiq.com/t5/2-Tealium-iQ-Documentation/Multi-Factor-Authentication-MFA-for-Tealium/ta-p/627"
        },
        {
            id:129,
            title: "The new Tealium Learning Community is here!",
            desc: "We are proud to announce the newly redesigned Tealium Learning Community with a cleaner look and easier navigation. Check it out and let us know what you think!",
            date: "2/16/2016",
            linkUrl: "https://community.tealiumiq.com"
        },
        {
            id:130,
            title: "Server Maintenance Alert",
            desc: "We will be performing server maintenance on Tuesday, April 26th from 10 PM to 11 PM (PST). During this time, the Site Scan and Verify Data Layer services will be unavailable and there will be NO data collection for AudienceStream and DataAccess. You will, however, be able to login and access your Tealium account. If you have questions or concerns during this time, please contact your Tealium Account Manager. We apologize for the inconvenience.",
            date: "4/21/2016"
        },
        {
            id:131,
            title: "Data Sources Are Now Renamed",
            desc: 'Starting this week, you\'ll notice we\'ve renamed "Data Sources" in Tealium iQ to "Variables."  This small change better describes the scope of data that is in the universal data layer.',
            date: "9/6/2016",
            linkUrl: "https://community.tealiumiq.com/t5/Announcements/Data-Sources-to-Variables-Announcement/m-p/15467"
        },
        {
            id:132,
            title: "Tealium iQ Tag Management and Universal Data Hub",
            desc: 'In the coming weeks, you will notice new terminology on our corporate website and in our product interfaces as we introduce the Tealium Universal Data Hub.<br></br>First, Tealium iQ will be renamed Tealium iQ Tag Management. Notwithstanding the name change in the UI, there will be no other differences or disruptions in your experience.<br></br>Secondly, the Universal Data Hub UI will become the new home for Tealium’s data products including AudienceStream, DataAccess, and Eventstream.<br></br>Watch Tealium Founder and CTO, Mike Anderson share Tealium’s vision of the Universal Data Hub <a style="display: inline-block; padding: 0; color: #057ABD;" href="http://embed.vidyard.com/share/epmXD1fYsTna3Ep66pirwv">here</a>.',
            date: "9/26/2016"
        },
        {
            id:133,
            title: "Meet the new Data Layer Enrichment Extension",
            desc: 'A hassle-free way to enrich your current Data Layers with brand new variables on the fly. Just host your new Data Layers on our CDN, configure this Extension, and start enriching.',
            date: "10/4/2016",
            linkUrl: "https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/Data-Layer-Enrichment-Extension/ta-p/15230"
        },
        {
            id:134,
            title: "The Data Layer Enrichment API is here",
            desc: "Want to give your Data Layer a boost? Try our new Data Layer Enrichment API. Simply upload and configure your variables on Tealium’s CDN, then use Tealium’s new extension to enrich your data layer." ,
            date: "10/4/2016",
            linkUrl: "https://community.tealiumiq.com/t5/Tealium-iQ-APIs/Overview/ta-p/14619"
        },
        {
            id:135,
            title: "Improved JavaScript Code Extension",
            desc: "Introducing the ability to add Conditions and extra run options so you can more finely control your custom code implementation." ,
            date: "12/06/2016",
            linkUrl: "https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/JavaScript-Code-Extension/ta-p/11925"
        },
		{
			id:136,
			title: "Ringing in the new year with Single Sign-On support",
			desc: "We are thrilled to introduce Single Sign-On using SAML for Tealium. Now you can integrate your identity provider with Tealium for a seamless and secure login experience." ,
			date: "12/27/2016",
			linkUrl: "https://community.tealiumiq.com/t5/Announcements/Using-Single-Sign-On-with-Tealium/ta-p/16782"
		},
        {
            id:137,
            title: "We Miss Hearing From You",
            desc:  "We haven't seen you in the Tealium Learning Community for a while and we miss you! We made some improvements recently and are excited to share them with you. <p><b>Here's what we've been working on:</b> </p><ul> <li>Fresh redesign of the <a href=\"https://community.tealiumiq.com/?utm_source=tiq&utm_medium=link&utm_campaign=we-miss-you&utm_content=happy-beast-2017\" target=\"_blank\" style=\"color:#2E6E9E; text-decoration:none;\" >home page</a></li><li>Self-guided <a href=\"https://community.tealiumiq.com\/t5\/tkb\/communitypage?utm_source=tiq&utm_medium=link&utm_campaign=we-miss-you&utm_content=happy-beast-2017\" target=\"_blank\" style=\"color:#2E6E9E;text-decoration:none;\">documentation portal</a></li><li>Brand new <a href=\"https://community.tealiumiq.com/t5/Tealium-Expert-Portal/ct-p/tealium-expert-portal?utm_source=tiq&utm_medium=link&utm_campaign=we-miss-you&utm_content=happy-beast-2017\" target=\"_blank\" style=\"color:#2E6E9E;text-decoration:none;\">Tealium Expert Portal</a></li></ul><p>So come join the conversation!</p>",
            date: "09/14/2017",
            linkUrl: "https://community.tealiumiq.com?utm_source=tiq&utm_medium=link&utm_campaign=we-miss-you&utm_content=happy-beast-2017-visit-tlc"
        },

        // TODO - delete this? do we need to make the next announcment #139 to prevent users not seeing the next announcement? - Jas
        // {
			// id:138,
			// title: "Ask Me Anything with Tealium CTO",
			// desc:  "Join us for an Ask Me Anything with our Founder & Chief Technology Officer, Mike Anderson, on November 14, 2017 at 10:00 AM PST in the <a href=\"https://community.tealiumiq.com/t5/Announcements/Ask-Me-Anything-with-Tealium-Founder-and-CTO-Mike-Anderson/m-p/19865?utm_source=tiq&utm_medium=link&utm_campaign=ask-me-anything-2017&utm_content=tlc\" target=\"_blank\" style=\"color:#2E6E9E;text-decoration:none;\">Tealium Learning Community</a>. <p><b>We'll be talking about:</b></p><ul><li>What can we expect from Tealium in 2018?</li><li>How can I get the most out of my Tealium products?</li><li>What's the fastest way I can educate my teams on how to use Tealium?</li></ul><p>Mark your calendar and join us for the conversation!</p>",
			// date: "11/2/2017",
			// linkUrl: "https://community.tealiumiq.com/t5/Announcements/Ask-Me-Anything-with-Tealium-Founder-and-CTO-Mike-Anderson/m-p/19865?utm_source=tiq&utm_medium=link&utm_campaign=ask-me-anything-2017&utm_content=learn-more"
        // }
        {
            id:139,
            title: "Introducing Product Ideas",
            desc:  "Do you have an idea for an enhancement to Tealium products and features? We'd love to hear about it. Introducing the new Product Ideas forum on the Tealium Learning Community. A place to discuss feature requests, vote for your favorites, and submit your own ideas to help shape the future of Tealium!",
            date: "01/09/2018",
            linkUrl: "https://community.tealiumiq.com/t5/Announcements/Introducing-Product-Ideas/td-p/20949?utm_campaign=product-ideas&utm_source=tiq&utm_medium=link&utm_content=learn-more"
        },
        {
            id:140,
            title: "Upgraded Collaboration Features",
            desc:  "We’ve upgraded our collaboration features to make it even easier to work together.",
            date: "01/31/2018",
            linkUrl: "https://community.tealiumiq.com/t5/iQ-Tag-Management/Collaboration-Features/ta-p/21503"
        },
        {
            id:141,
            title: "Tealium API v2",
            desc:  "Introducing the Tealium v2 API with SSO support and managed API keys for a higher level of security and stricter account control.",
            date: "02/22/2018",
            linkUrl: "https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-and-Generating-API-Keys/ta-p/21205"
        },
        {
            id:142,
            title: "Get Ready for GDPR",
            desc:  "Consent Management is now fully released and available to be published. Activate your consent tools and get one step closer to GDPR compliance.",
            date: "05/09/2018",
            linkUrl: "https://community.tealiumiq.com/t5/Announcements/Preparing-for-GDPR/m-p/22574#M97"
        },
        {
            id:143,
            title: "Extension Publish Locations",
            desc:  "Introducing publish locations for extensions! Improve your release workflow by controlling which extensions get published to Dev, QA, and Prod.",
            date: "06/28/2018",
            linkUrl: "https://community.tealiumiq.com/t5/Announcements/Extensions-Now-Support-Publish-Locations/m-p/24349"
        },
        {
            id:144,
            title: "Design Refresh Coming Soon!",
            desc:  "We are preparing some exciting changes to the iQ interface. Look for a refreshed design in the next week. All the same features, just a lot better looking!",
            date: "07/11/2018"
        },
        {
            id:145,
            title: "New JavaScript Code Extension",
            desc:  "Write JavaScript code in an enhanced code editor with syntax checking, code diffs, and a draft mode for safe-guarded publishes.",
            date: "09/06/2018",
            linkUrl: "https://community.tealiumiq.com/t5/Announcements/New-JavaScript-Code-Extension-with-Upgraded-Editor-and-Publish/m-p/25538#M115"
        },
        {
            id:146,
            title: "DOM Variables Get a New Look",
            desc: "Those DOM variables we all know and love are now conveniently displayed on the <span onclick='utui.dashboard.shortcutLink(\"Data Layer Tab\");' class='hyper'>Data Layer tab</span>. All the same utility, just a little more visibility!",
            date: "09/20/2018" 
        },
        {
            id:147,
            title: "Tags and Extensions Get a Little Closer",
            desc: "The tags view now shows a list of related extensions. Tag-scoped extensions, those that reference mapped variables, and other relevant extensions will now appear within the tag configuration for a better overview of the tag.",
            date: "11/01/2018"
        }
    ],
    /* Returns an array of unread update objects, all of the messages need to be after the date provided */
    getUnreadUpdates : function(userData) {
        var indicesOfUpdatesRead = userData.updatesRead,
            date = utui.util.date.getDateFromString(userData.dateOfFirstLogin),
            unreadUpdates = [];

        for(var i = this.content.length - 1; i >= 0; i--) {
            var currUpdate = this.content[i];
            if(indicesOfUpdatesRead.indexOf(currUpdate.id) < 0) {
                if(date && (utui.util.date.getDateFromString(currUpdate.date).getTime() >= date.getTime()))
                    unreadUpdates.push(currUpdate);
                else if(!date)
                    unreadUpdates.push(currUpdate);
            }
        }

        return unreadUpdates;
    },
    markAllRead : function() {
        var userData, i, currUpdate, toBeMarkedRead = [];
        for(i = 0; i < this.content.length; i++) {
            currUpdate = this.content[i];

            toBeMarkedRead.push(currUpdate.id);
        }

        var idHash = CryptoJS.SHA256(utui.login.email).toString();
        userData = JSON.parse(utui.util.storage.loadLocal(idHash) || "{}");
        userData.updatesRead = toBeMarkedRead;
        utui.util.storage.storeLocal(idHash, JSON.stringify(userData));
    },
    markRead : function(id) {

        var idHash = CryptoJS.SHA256(utui.login.email).toString();
        var userData = JSON.parse(utui.util.storage.loadLocal(idHash)|| "{}"),
            indicesOfUpdatesRead = userData.updatesRead || [];

        indicesOfUpdatesRead.push(id);

        utui.util.storage.storeLocal(idHash, JSON.stringify(userData));
    }
};

utui.users = function() {
	"use strict";

	// Private API
	var _userData = {},
		_errorCodeMap = {
			1400: localize.t('tiq.users.error.1400'),
			1469: localize.t('tiq.users.error.1469'),
			1403: localize.t('tiq.users.error.1403'),
			1451: localize.t('tiq.users.error.1451'),
			1453: localize.t('tiq.users.error.1453'),
			1461: localize.t('tiq.users.error.1461'),
			1464: localize.t('tiq.users.error.1464')
		};

	// ----------------------------------------------------------------
	// Clears user data
	function _clear() {
		_userData = {};
	}

	// ----------------------------------------------------------------
	// Replaces certain characters with a dash that prevents jquery selctors from matching any element
	function _replaceSelector(value) {
		// The following characters need to be replaced or jquery selectors will not work
		value = value.replace(/([!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g, '-');
		return value;
	}

	// ----------------------------------------------------------------
	// Returns the error message if the response code is in the error code map
	function _getErrorFromResponse(response, namespace, defaultMessage) {
		if (!response) return defaultMessage;

		// Unauthorized
		if (response.status === 403 || response.status === 401) {
			// Close the dialog but NOT the usermanager dialog
			if (namespace !== 'users_usermanager_dialog') {
				utui.util.showPermissionErrorDialog(function(){
					utui.ui.dialog.dispose(namespace);
				});
			} else {
				utui.util.showPermissionErrorDialog();
			}
			return '';
		}

		try {
			var error = utui.util.safeParseJSON(response.responseText),
				msg = _errorCodeMap[error.returnCode] || defaultMessage;
			return msg;

		} catch (e) {
			return defaultMessage;
		}
	}

	// ----------------------------------------------------------------
	// Convenience method so we don't have to add the account and profile in every method
	function _addParamsToURL(url, list) {
		if (list && !$.isEmptyObject(list)) {
			for (var key in list) {
				url = url.replace('$$' + key + '$$', list[key]);
			}
		}

		// Just in case they haven't already been added (we add here in case it's custom ones are in the list)
		url = url.replace('$$account$$', utui.login.account);
		url = url.replace('$$profile$$', utui.login.profile);

		return url;
	}

	// ----------------------------------------------------------------
	// Sort list
	function _sortList(list) {
		list.sort(function(a,b){
			return a.toLowerCase() > b.toLowerCase() ? 1 : ((a.toLowerCase() < b.toLowerCase()) ? -1 : 0);
		});
	}

	// ----------------------------------------------------------------
	// Updates the specified user object or adds it to the userData array
	function _updateUser(updatedUser) {
		var user = utui.users.getUser(updatedUser.email);
		if (user) {
			$.extend(user, updatedUser);
		} else {
			_userData[updatedUser.email] = updatedUser;
		}

		// Show you are no longer in read only state if is_stale has changed to false
		if (utui.users.isStale && !updatedUser.is_stale) {
			utui.users.isStale = false;
			// 12/14/2015 - do not block UI while permission cache is being updated
//			utui.util.showMsgDialog('<strong>' + localize.t('tiq.users.permissions_updated_body') + '</strong>', localize.t('tiq.users.permissions_updated_title'));
		}

		// update the admin menu text
		utui.util.pubsub.publish(utui.constants.users.UPDATED);
	}

	// ----------------------------------------------------------------
	// Gets the list of profiles from the specified profile in the user object
	function _getProfilePermissionsFromUser(user, profile) {
		if (user.profiles) {
			if (user.profiles[profile] && !$.isEmptyObject(user.profiles[profile].permissions)) {
				return user.profiles[profile].permissions;
			} else {
				if (user.profiles['*'] && $.inArray(profile, user.expanded_profiles) > -1) {
					return user.profiles['*'].permissions;
				}
			}
		}
		return [];
	}

	// ----------------------------------------------------------------
	// This will return all the profile and permissions associated with the user
	function _getProfilesWithPermissionsFromUser(user) {
		var profilesObj = {},
			profiles = _getProfilesFromUser(user);
		for (var i=0; i<profiles.length; i++) {
			var profile = profiles[i],
				permissions = _getProfilePermissionsFromUser(user, profile);
			if (permissions) {
				profilesObj[profile] = {profile:profile, permissions:permissions};
			}
		}
		return profilesObj;
	}

	// ----------------------------------------------------------------
	// Returns an array of the profiles that the user has
	// If no user is specified it will get the profiles from the current user
	function _getProfilesFromUser(user, onlyFromProfilesObj) {
		var type = $.type(user),
			userObj = (type === 'object' ? user : type === 'string' ? _public.getUser(user) : _public.getCurrentUser()),
			profiles = [];

		if (onlyFromProfilesObj) {
			for (var key in userObj.profiles) {
				profiles.push(key);
			}
		} else {
			profiles = userObj.expanded_profiles;
		}

		// Sort the array
		_sortList(profiles);

		return profiles;
	}

	// ----------------------------------------------------------------
	// Returns true if the user is at least assigned to 1 profile
	function _isAssignedToProfiles(user) {
		var profiles = user.expanded_profiles || [];
		// Remove the wildcard
		var wildcardIndex = $.inArray('*', profiles);
		if (wildcardIndex > -1) {
			// Remove the wildcard permission from this view
			profiles.splice(wildcardIndex, 1);
		}
		return profiles.length > 0;
	}

	// ----------------------------------------------------------------
	// Returns true if the specified user has wildcard permission
	function _hasWildcardProfile(user) {
		// If no user is specified the default to the logged in user
		user = user || utui.users.getCurrentUser();
		return user.profiles['*'] ? true : false;
	}

	// ----------------------------------------------------------------
	// Returns the user's name
	function _getUserName(user) {
		var firstName = user.first_name || '',
			lastName = user.last_name || '';

		return $.trim(firstName + ' ' + lastName);
	}

	// ----------------------------------------------------------------
	// Constructs the user image
	function _getUserImage(user, classes) {
		var firstName = user.first_name || '',
			lastName = user.last_name || '',
			firstInitial = firstName[0] || '',
			lastInitial = lastName[0] || '',
			userName = _getUserName(user),
			src = user.photo_url || 'img/tealium-avatar-bg.png',
			v = '';

		if (user.photo_url) {
			classes += ' user-avatar-linkedin';
		} else if (firstName || lastName) {
			classes += ' user-avatar-initials';
		} else {
			classes += ' user-avatar-blank';
		}

		v += '<div class="user-avatar ' + classes + '">';
		v += '  <span>' + firstInitial + lastInitial + '</span>';
		v += '	<img src="'+src+'" alt="'+userName+'" title="'+userName+'">';
		v += '</div>';

		return v;
	}

	// ----------------------------------------------------------------
	// Schedule an mfa enabled logout.
	function _setUserLogoutSchedule(bool) {
		if (_userData && utui.login.email) {
			_userData[utui.login.email].pending_logout = !!bool;
		}
	}

	// ----------------------------------------------------------------
	// Get the current user's mfa logout schedule.
	function _getUserLogoutSchedule() {
		return !!_userData[utui.login.email].pending_logout;
	}

	// ----------------------------------------------------------------
	// Server API calls
	var _request = {
		// ------------------------------------------------------------
		getUser: function(email, callback) {
			var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username:email});
			utui.service.get(url, null, null,
				function() {
					_response.onGetUserSuccess.apply(this, arguments);
					if (callback) callback(true);
				},
				function(){
					if (callback) callback(false);
				}
			);
		},

		// ------------------------------------------------------------
		updateUser: function(user) {
			var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username:user.email});
			utui.service.put(url, JSON.stringify(user), utui.service.options.JSON, _response.onUpdateUserSuccess, _response.onUpdateUserError);
		},

		// ------------------------------------------------------------
		logout: function() {
			// close child windows immediately
			common.utils.closeAllChildWindows();
			utui.service.post(utui.service.restapis.LOG_OUT, {}, {}, _response.onLogoutSuccess, _response.onLogoutSuccess);
		}
	};

	// ----------------------------------------------------------------
	// Server API response handlers
	var _response = {
		// ------------------------------------------------------------
		onGetUserSuccess: function(data) {
			var tempData = JSON.parse('{"' + data.email + '":{}}');
			tempData[data.email] = data;
			_userData = tempData;

			// Show welcome screen if last_login_date is null (first use)
			if (!data.last_login_date) {
				utui.util.pubsub.publish(utui.constants.users.IS_FIRST_TIME);

                utui.help.showNewUserIntro();
			}

			// Show warning message to user that they are in read only mode
			if (data.is_stale && !utui.users.isStale) {
//				var warning_message = '';
//
//				warning_message += '<div class="dialogBody_alert">';
//				warning_message += '   <div class="dialog-icon-container">';
//				warning_message += '       <i class="icon-warning-sign" style="color:orange;"></i>';
//				warning_message += '   </div>';
//				warning_message += '   <div class="dialog-description">' + localize.t('tiq.users.permissions_updated_currently') + '</div>';
//				warning_message += '</div>';

				// 12/14/2015 - do not block UI while permission cache is being updated
//				utui.util.showMsgDialog(warning_message, localize.t('tiq.users.permissions_updating'), function() {
					utui.users.isStale = true;
//				});
			}
      if (utui.historyManager.getNetChanges().length>0) {
        utui.util.pubsub.publish(utui.constants.profile.CHANGED, false);
      }

		},

		// ------------------------------------------------------------
		onUpdateUserSuccess: function(data){
			// Update the user in the collection
			if (data && data.email) {
				_updateUser(data);
			}
		},

		// ------------------------------------------------------------
		onUpdateUserError: function(status, response) {
			var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.unable_to_update'));
			utui.util.showStatusMessage(errorMsg);
		},

		// ------------------------------------------------------------
		onLogoutSuccess: function(data) {
			utui.profile.clear();
			if (utui.ping.id != 0) {
				clearInterval(utui.ping.id);
			}

			var url = (typeof utui_redirectUrl !== 'undefined' && !$.isEmptyObject(utui_redirectUrl)) ? utui_redirectUrl : '/';

			//If the account has a single log out url set, then use it instead.
			if (typeof utui.account.sso.slo_url !== 'undefined' && !$.isEmptyObject(utui.account.sso.slo_url)) {
				url = utui.account.sso.slo_url;
			}

			window.location.href = url;
		}
	};

	// ----------------------------------------------------------------
	// This contains all the GLOBAL dialog functionality
	var _dialogs = {
		shared: {
			// --------------------------------------------------------
			// Loops over the all the elements to find each tooltip and then adds them
			addToolTips: function($context) {
				var customTooltipObj = {};
				$context.find('.permissions-tooltip-icon').each(function(){
					customTooltipObj[this.id] = { gravity:'w' };
					utui.util.addTooltip(customTooltipObj, $context);
				});
			},

			// --------------------------------------------------------
			// Updated the badge to full, partial or empty for the specified element
			updateCircleBadge: function($el, style){
				$el.removeClass('badge-circle-full');
				$el.removeClass('badge-circle-partial');
				$el.removeClass('badge-circle-empty');
				$el.addClass('badge-circle-' + style);
			},

			// --------------------------------------------------------
			// Updates the badge to active or inactive for the specified environment
			updateEnvironmentBadge: function($el, style) {
				$el.removeClass('badge-env-active');
				$el.removeClass('badge-env-inactive');
				$el.addClass('badge-env-' + style);
			},

			// --------------------------------------------------------
			// Updates all the account badges in the specified context based off the specified permissions
			updateAccountBadges: function($context, permissions, bShowTooltip) {
				var $el,
					customTooltipObj = {},
					namespace = $context.attr('id'),
					id;

				if ($.inArray(utui.permissions.MANAGE_ACCOUNT, permissions) > -1) {
					$el = $context.find('.accounts-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
					// Tooltip
					if (bShowTooltip) {
						id = namespace+'_accounts_tooltip';
						$el.attr({'title':localize.t('tiq.users.badge_manage_account'),'id':id});
						customTooltipObj[id] = { gravity:'nw'};
					}
				}
				if ($.inArray(utui.permissions.MANAGE_AUDIT, permissions) > -1) {
					$el = $context.find('.reports-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
					// Tooltip
					if (bShowTooltip) {
						id = namespace+'_reports_tooltip';
						$el.attr({'title':localize.t('tiq.users.badge_manage_audit'),'id':id});
						customTooltipObj[id] = { gravity:'nw'};
					}
				}
				if ($.inArray(utui.permissions.CREATE_PROFILE, permissions) > -1) {
					$el = $context.find('.profiles-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
					// Tooltip
					if (bShowTooltip) {
						id = namespace+'_profiles_tooltip';
						$el.attr({'title':localize.t('tiq.users.badge_create_profile'),'id':id});
						customTooltipObj[id] = { gravity:'nw'};
					}
				}
				if ($.inArray(utui.permissions.EXTENSIONS_JAVASCRIPT, permissions) > -1) {
					$el = $context.find('.extensions-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
					// Tooltip
					if (bShowTooltip) {
						id = namespace+'_extensions_tooltip';
						$el.attr({'title':localize.t('tiq.users.badge_extensions_js'),'id':id});
						customTooltipObj[id] = { gravity:'nw'};
					}
				}

				if (!$.isEmptyObject(customTooltipObj)) {
					utui.util.addTooltip(customTooltipObj, $context);
				}
			},

			// --------------------------------------------------------
			// Updates all the profile badges in the specified context based off the specified permissions
			updateProfileBadges: function($context, profilesObj, bShowTooltip) {
				var $el,
					customTooltipObj = {},
					namespace = $context.attr('id'),
					id,
					$groups = $context.find('.profile-permissions');

				$.each($groups, function() {
					var $group = $(this),
						profile = $group.find('input[name="profile"]').val(),
						permissions = _getProfilePermissionsFromUser({profiles:profilesObj}, profile);

					if ($.inArray(utui.permissions.MANAGE_USERS, permissions) > -1) {
						$el = $group.find('.users-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
						// Tooltip
						if (bShowTooltip) {
							id = namespace+'_'+_replaceSelector(profile)+'_users_tooltip';
							$el.attr({'title':localize.t('tiq.users.badge_manage_users'),'id':id});
							customTooltipObj[id] = { gravity:'nw'};
						}
					}
					if ($.inArray(utui.permissions.MANAGE_TEMPLATES, permissions) > -1) {
						$el = $group.find('.templates-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
						// Tooltip
						if (bShowTooltip) {
							id = namespace+'_'+_replaceSelector(profile)+'_templates_tooltip';
							$el.attr({'title':localize.t('tiq.users.badge_manage_templates'),'id':id});
							customTooltipObj[id] = { gravity:'nw'};
						}
					}
					if ($.inArray(utui.permissions.MANAGE_SECURE_LABELS, permissions) > -1) {
						$el = $group.find('.labels-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
						// Tooltip
						if (bShowTooltip) {
							id = namespace+'_'+_replaceSelector(profile)+'_labels_tooltip';
							$el.attr({'title':localize.t('tiq.users.badge_manage_secure_labels'),'id':id});
							customTooltipObj[id] = { gravity:'nw'};
						}
					}

					var canSaveProfile = $.inArray(utui.permissions.SAVE_PROFILE, permissions) > -1,
						canCopy = $.inArray(utui.permissions.COPY, permissions) > -1,
						versionsBadge = (canSaveProfile && canCopy ? 'full' : canSaveProfile || canCopy ? 'partial' : 'empty');

					$el = $group.find('.versions-badge').removeClass('badge-circle-empty').addClass('badge-circle-'+versionsBadge);
					// Tooltip
					if (versionsBadge !== 'empty' && bShowTooltip) {
						var save_copy = canSaveProfile && canCopy ? 'save and copy' : canSaveProfile ? 'save' : 'copy';
						id = namespace+'_'+_replaceSelector(profile)+'_profile_tooltip';
						$el.attr({'title':localize.t('tiq.users.badge_save_profile', {'save_copy':save_copy}),'id':id});
						customTooltipObj[id] = { gravity:'nw'};
					}

					if ($.inArray(utui.permissions.PUBLISH_DEV, permissions) > -1) {
						$el = $group.find('.dev-badge').removeClass('badge-env-inactive').addClass('badge-env-active');
						// Tooltip
						if (bShowTooltip) {
							id = namespace+'_'+_replaceSelector(profile)+'_dev_tooltip';
							$el.attr({'title':localize.t('tiq.users.badge_env_dev', {'env':utui.targets.aliasDisplayName('dev')}),'id':id});
							customTooltipObj[id] = { gravity:'nw'};
						}
					}
					if ($.inArray(utui.permissions.PUBLISH_QA, permissions) > -1) {
						$el = $group.find('.qa-badge').removeClass('badge-env-inactive').addClass('badge-env-active');
						// Tooltip
						if (bShowTooltip) {
							id = namespace+'_'+_replaceSelector(profile)+'_qa_tooltip';
							$el.attr({'title':localize.t('tiq.users.badge_env', {'env':utui.targets.aliasDisplayName('qa')}),'id':id});
							customTooltipObj[id] = { gravity:'nw'};
						}
					}
					if ($.inArray(utui.permissions.PUBLISH_PROD, permissions) > -1) {
						$el = $group.find('.prod-badge').removeClass('badge-env-inactive').addClass('badge-env-active');
						// Tooltip
						if (bShowTooltip) {
							id = namespace+'_'+_replaceSelector(profile)+'_prod_tooltip';
							$el.attr({'title':localize.t('tiq.users.badge_env', {'env':utui.targets.aliasDisplayName('prod')}),'id':id});
							customTooltipObj[id] = { gravity:'nw'};
						}
					}
          
          var devPromote  = $.inArray(utui.permissions.JS_DRAFT_PROMOTION_DEV, permissions) !== -1,
              qaPromote   = $.inArray(utui.permissions.JS_DRAFT_PROMOTION_QA, permissions) !== -1,
              prodPromote = $.inArray(utui.permissions.JS_DRAFT_PROMOTION_PROD, permissions)!== -1;
          
          if (devPromote && qaPromote && prodPromote) {
            $el = $group.find('.js-promotion-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
          } else if (devPromote || qaPromote || prodPromote) {
            $el = $group.find('.js-promotion-badge').removeClass('badge-circle-empty').addClass('badge-circle-partial');
          } else {
            $el = $group.find('.js-promotion-badge');
          }
          
          // Tooltip
          if (bShowTooltip) {
            id = namespace+'_'+_replaceSelector(profile)+'_js-promotion_tooltip';
            var envs = [];
            if (devPromote) {envs.push(utui.targets.aliasDisplayName('dev'))}
            if (qaPromote) {envs.push(utui.targets.aliasDisplayName('qa'))}
            if (prodPromote) {envs.push(utui.targets.aliasDisplayName('prod'))}
            if (envs.length > 0) {
              $el.attr({'title':localize.t('tiq.users.badge_js_promotion_permission', {env : envs.join(", ")}),'id':id});
						} else {
              $el.attr({'title':localize.t('tiq.users.badge_js_promotion_permission_none'),'id':id});
            }
            
            customTooltipObj[id] = { gravity:'nw'};
          }
					
				});
				if (!$.isEmptyObject(customTooltipObj)) {
					utui.util.addTooltip(customTooltipObj, $context);
				}
			},

			// --------------------------------------------------------
			// Event called when an account permission checkbox is checked
			// This will return a set of permissions that have been checked in the account view
			onAccountPermissionsChange: function($el) {
				var $container = $el.closest('.accordion-group'),
					permissions = [];

				// Update account permission badges
				var isManageAccountChecked = $container.find('input[name="'+utui.permissions.MANAGE_ACCOUNT+'"]').is(':checked'),
					isReportsChecked = $container.find('input[name="'+utui.permissions.MANAGE_AUDIT+'"]').is(':checked'),
					isCreateProfilesChecked = $container.find('input[name="'+utui.permissions.CREATE_PROFILE+'"]').is(':checked'),
					isExtensionsJavascriptChecked = $container.find('input[name="'+utui.permissions.EXTENSIONS_JAVASCRIPT+'"]').is(':checked');

				_dialogs.shared.updateCircleBadge($container.find('.accounts-badge'), (isManageAccountChecked ? 'full' : 'empty'));
				_dialogs.shared.updateCircleBadge($container.find('.reports-badge'), (isReportsChecked ? 'full' : 'empty'));
				_dialogs.shared.updateCircleBadge($container.find('.profiles-badge'), (isCreateProfilesChecked ? 'full' : 'empty'));
				_dialogs.shared.updateCircleBadge($container.find('.extensions-badge'), (isExtensionsJavascriptChecked ? 'full' : 'empty'));

				// Update Select all checkbox
				if (isManageAccountChecked && isReportsChecked && isCreateProfilesChecked && isExtensionsJavascriptChecked) {
					$container.find('.select-all-permissions').find('input').prop('checked', 'checked');
				} else {
					$container.find('.select-all-permissions').find('input').prop( "checked", false );
				}

				// Loop over the checked boxes and apply those permissions
				$.each($container.find('.permission-checkbox:checked'), function() {
					permissions.push($(this).val());
				});
				return permissions;
			},

			// --------------------------------------------------------
			// Called when a checkbox has been checked and when apply all... button has been clicked
			// This will update the badges in the profiles sections for the current group
			onProfilesPermissionsChange: function($el, profilesObj) {
				var $container = $el.closest('.accordion-group'),
					profile = $container.find('input[name="profile"]').val();

				// Update account permission badges
				var isManageUsersChecked = $container.find('input[name="'+utui.permissions.MANAGE_USERS+'"]').is(':checked'),
					isManageTemplatesChecked  = $container.find('input[name="'+utui.permissions.MANAGE_TEMPLATES+'"]').is(':checked'),
					isManageLabelsChecked  = $container.find('input[name="'+utui.permissions.MANAGE_SECURE_LABELS+'"]').is(':checked'),
					isSaveVersionsChecked = $container.find('input[name="'+utui.permissions.SAVE_PROFILE+'"]').is(':checked'),
					isSaveAsChecked = $container.find('input[name="'+utui.permissions.COPY+'"]').is(':checked'),
					isPublishDevChecked  = $container.find('input[name="'+utui.permissions.PUBLISH_DEV+'"]').is(':checked'),
					isPublishQaChecked  = $container.find('input[name="'+utui.permissions.PUBLISH_QA+'"]').is(':checked'),
					isPublishProdChecked  = $container.find('input[name="'+utui.permissions.PUBLISH_PROD+'"]').is(':checked'),
					isPromoteDevChecked  = $container.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_DEV+'"]').is(':checked'),
					isPromoteQaChecked  = $container.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_QA+'"]').is(':checked'),
					isPromoteProdChecked  = $container.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_PROD+'"]').is(':checked');
				
				_dialogs.shared.updateCircleBadge($container.find('.users-badge'), (isManageUsersChecked ? 'full' : 'empty'));
				_dialogs.shared.updateCircleBadge($container.find('.templates-badge'), (isManageTemplatesChecked ? 'full' : 'empty'));
				_dialogs.shared.updateCircleBadge($container.find('.labels-badge'), (isManageLabelsChecked ? 'full' : 'empty'));
				_dialogs.shared.updateCircleBadge($container.find('.versions-badge'), (isSaveVersionsChecked && isSaveAsChecked ? 'full' : isSaveVersionsChecked || isSaveAsChecked ? 'partial' : 'empty'));
				_dialogs.shared.updateCircleBadge($container.find('.js-promotion-badge'), (isPromoteDevChecked && isPromoteQaChecked && isPromoteProdChecked ? 'full' : isPromoteDevChecked || isPromoteQaChecked || isPromoteProdChecked ? 'partial' : 'empty'));
				
				_dialogs.shared.updateEnvironmentBadge($container.find('.dev-badge'), (isPublishDevChecked ? 'active' : 'inactive'));
				_dialogs.shared.updateEnvironmentBadge($container.find('.qa-badge'), (isPublishQaChecked ? 'active' : 'inactive'));
				_dialogs.shared.updateEnvironmentBadge($container.find('.prod-badge'), (isPublishProdChecked ? 'active' : 'inactive'));

				// Update Select all checkbox
				if (isManageUsersChecked &&
					isManageTemplatesChecked &&
					isManageLabelsChecked &&
					isSaveVersionsChecked && isSaveAsChecked &&
					isPublishDevChecked && isPublishQaChecked && isPublishProdChecked &&
					isPromoteDevChecked && isPromoteQaChecked && isPromoteProdChecked) {
					$container.find('.select-all-permissions').find('input').prop('checked', 'checked');
				} else {
					$container.find('.select-all-permissions').find('input').prop( "checked", false );
				}

				// Clear previous permissions
				profilesObj[profile].permissions = [];  // {profileName:{profile:profileName,permissions:[]}
				// Loop over the checked boxes and apply those permissions
				$.each($container.find('.permission-checkbox:checked'), function() {
					profilesObj[profile].permissions.push($(this).val());
				});
				
			},

			// ------------------------------------------------------------
			// Called when 'Select All Permisions' is changed from any accordion
			onSelectAllPermissionsChange: function($el) {
				var $selectAllCheckbox = $el.find('input');
				var isChecked = $selectAllCheckbox.is(':checked');
				var $checkboxes = $el.closest('.accordion-group').find('.permission-checkbox');
				// Toggle the checked attribute
				if (isChecked) {
					$checkboxes.not(':checked').click(); // Use the click method (rather than just setting 'checked') to trigger event handlers on checkboxes
				} else {
					$checkboxes.filter(':checked').click();
				}

				// If a permission checkbox is disabled, it can't be checked so we have to revert the Select All checkbox to being unchecked
				if (isChecked) {
					$selectAllCheckbox.prop('checked', 'checked');
				} else {
					$selectAllCheckbox.prop( "checked", false );
				}
			},

			// --------------------------------------------------------
			// Called when the apply permissions to ... button is clicked in any profile permissions accordion
			onApplyPermissionsToSelectedProfiles: function(el, profilesObj) {
				var $group = $(el).closest('.accordion-group'),
					$inputs = $group.find('.permission-checkbox'),
					$selectAll = $group.find('.select-all-permissions').find('input'),
					$accordion = $group.closest('.profile-permissions-accordion'),
					$groups = $accordion.find('.accordion-group').not($group);	// Does not contain $(this) group

				// Loop over all the accordion groups and apply the same changes
				// Uncheck everything first
				$groups.find('input').prop( "checked", false );

				$.each($groups, function() {
					var $el = $(this);
					$.each($inputs, function() {
						var $cbox = $el.find('input[name="' + $(this).attr('name') + '"]');
						if ($(this).is(':checked')) {
							$cbox.trigger('click');
						} else {
							_dialogs.shared.onProfilesPermissionsChange($cbox, profilesObj);
						}
					});
					var $cboxAll = $el.find('.select-all-permissions').find('input');
					if ($selectAll.is(':checked')) {
						$cboxAll.prop('checked', 'checked');
					}
				});
			},

			// --------------------------------------------------------
			// This is used to temporary modify the specified user and grant them wildcard profile with permissions that are an intersection of all their profile permissions
			// - Required when a non-wildcard user selected the "All Profiles" option
			assignPermisionsAfterExclusions: function (user) {
				user = $.extend(true, {}, user);

				var list = [],
					permissions,
					profiles = _getProfilesWithPermissionsFromUser(user);

				for (var key in profiles) {
					list.push(profiles[key].permissions);
				}

				permissions = _.intersection.apply(undefined, list);
				// Take out READ_ONLY
				var readonlyIndex = $.inArray(utui.permissions.READ_ONLY, permissions);
				if (readonlyIndex > -1) {
					// Remove the read_only permission
					permissions.splice(readonlyIndex, 1);
				}

				if (permissions.length > 0) {
					user.profiles['*'] = {profile:'*', permissions:permissions};
				}

				return user;
			},

			view: {
				// ----------------------------------------------------
				// Header for the dialog content
				dialogContentHeader: function(content) {
					var v = '';

					v += '<div class="dialog-content-header utui-table">';
					v += '	<div class="dialog-content-inner">';
					v += content;
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				// Icon legend in footer
				iconLegend: function(namespace) {
					namespace = namespace || '';

					var v = '';

					v += '<div class="legend-container">';
					v += '	<ul class="legend-listing" id="' + namespace + '_legend_listing">';
					v += '		<li><h3>' + localize.t('tiq.users.legend.title') + '</h3></li>';
					v += '		<li><div class="badge-circle-full-sm disabled"></div> ' + localize.t('tiq.users.legend.full') + '</li>';
					v += '		<li><div class="badge-circle-partial-sm disabled"></div> ' + localize.t('tiq.users.legend.partial') + '</li>';
					v += '		<li><div class="badge-circle-empty-sm disabled"></div> ' + localize.t('tiq.users.legend.empty') + '</li>';
					v += '	</ul>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------------------
				// Returns all the profiles the specified user is allowed to modify
				getProfileListOptions: function(user, profiles) {
					var v = '';

					for (var i=0; i<profiles.length; i++) {
						var profile = profiles[i];
						if (profile !== '*') {
							// Only show profiles that I (current logged in user) can manage
							var myPermissions = _getProfilePermissionsFromUser(user, profile);
							if ($.inArray(utui.permissions.MANAGE_USERS, myPermissions) > -1) {
								v += '	<option value="' + profile + '">' + profile + '</option>';
							}
						}
					}

					return v;
				},

				// ----------------------------------------------------
				// Permissions (account|profile) container used across multiple screens
				permissionsContainer:function (namespace, isAccordion, type/*profile|account*/, data/*accounts|profiles*/) {
					var v = '';

					v += '<div class="utui-permissions-container utui-table">';

					// Return the account permissions view
					if (type === 'account') {
						v += _dialogs.shared.view.permissionsAccountHeader();
						if (isAccordion) {
							v += _dialogs.shared.view.permissionsAccountBodyAccordion(namespace, data);
						} else {
							v += _dialogs.shared.view.permissionsAccountBody(data);
						}

						// Return the profile permissions view
					} else {
						v += _dialogs.shared.view.permissionsProfileHeader();
						if (isAccordion) {
							v += _dialogs.shared.view.permissionsProfileBodyAccordion(namespace, data);
						} else {
							v += _dialogs.shared.view.permissionsProfileBody(data);
						}
					}

					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				permissionsAccountHeader:function() {
					var v = '';

					v += '<div class="utui-table-header">';
					v += '	<div class="row-fluid">';
					v += '		<div class="span4 alignleft">';
					v += '			<div class="utui-table-header-data"><strong>' + localize.t('tiq.users.header.account') + '</strong></div>';
					v += '		</div>';
					v += '		<div class="span2 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.account_settings') + '</div>';
					v += '		</div>';
					v += '		<div class="span2 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.reports') + '</div>';
					v += '		</div>';
					v += '		<div class="span2 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.profiles') + '</div>';
					v += '		</div>';
					v += '		<div class="span2 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.javascript') + '</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				permissionsProfileHeader:function() {
					var v = '';

					v += '<div class="utui-table-header">';
					v += '	<div class="row-fluid">';
					v += '		<div class="span3 alignleft">';
					v += '			<div class="utui-table-header-data"><strong>' + localize.t('tiq.users.header.profile') + '</strong></div>';
					v += '		</div>';
					v += '		<div class="span1 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.users') + '</div>';
					v += '		</div>';
					v += '		<div class="span1 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.templates') + '</div>';
					v += '		</div>';
					v += '		<div class="span1 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.labels') + '</div>';
					v += '		</div>';
					v += '		<div class="span1 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.versions') + '</div>';
					v += '		</div>';
          v += '<div class="span2 aligncenter">';
          v += '	<div class="utui-table-header-data" id="user-overview__js-promotion_permissions_tooltip">' + localize.t('tiq.users.header.js_promotion') + '</div>';
          v += '</div>';
					v += '		<div class="span2 aligncenter">';
					v += '			<div class="utui-table-header-data">' + localize.t('tiq.users.header.environments') + '</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				permissionsAccountBody:function(accounts) {
					var v = '';

					v += '	<div class="utui-table-body">';
					v += '		<div class="utui-table-row account-permissions">';
					v += '			<input type="hidden" name="account" value="'+utui.login.account+'" />';
					v += '			<div class="row-fluid">';
					v += '				<div class="span4">';
					v += '					<div class="utui-table-title">'+utui.login.account+'</div>';
					v += '				</div>';
					v += '				<div class="span2 aligncenter">';
					v += '					<div class="utui-table-row-data">';
					v += '						<div class="badge-circle-empty accounts-badge"></div>';
					v += '					</div>';
					v += '				</div>';
					v += '				<div class="span2 aligncenter">';
					v += '					<div class="utui-table-row-data">';
					v += '						<div class="badge-circle-empty reports-badge"></div>';
					v += '					</div>';
					v += '				</div>';
					v += '				<div class="span2 aligncenter">';
					v += '					<div class="utui-table-row-data">';
					v += '						<div class="badge-circle-empty profiles-badge"></div>';
					v += '					</div>';
					v += '				</div>';
					v += '				<div class="span2 aligncenter">';
					v += '					<div class="utui-table-row-data">';
					v += '						<div class="badge-circle-empty extensions-badge"></div>';
					v += '					</div>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';

					return v;
				},

				// ----------------------------------------------------
				permissionsAccountBodyAccordion:function(namespace, accounts) {
					var v = '';

					v += '<div class="accordion account-permissions-accordion">';

					var id = namespace + '_' + _replaceSelector(utui.login.account) + '_accordion';

					v += '	<div id="'+id+'" class="utui-table-row accordion-group">';
					v += '		<input type="hidden" name="account" value="'+utui.login.account+'" />';
					v += '		<div class="accordion-heading">';
					v += '			<a class="accordion-toggle">';
					v += '				<div class="row-fluid">';
					v += '					<div class="span4">';
					v += '						<div class="utui-table-title">'+utui.login.account+'</div>';
					v += '					</div>';
					v += '					<div class="span2">';
					v += '						<div class="utui-table-row-data aligncenter">';
					v += '							<div class="badge-circle-empty accounts-badge"></div>';
					v += '						</div>';
					v += '					</div>';
					v += '					<div class="span2">';
					v += '						<div class="utui-table-row-data aligncenter">';
					v += '							<div class="badge-circle-empty reports-badge"></div>';
					v += '						</div>';
					v += '					</div>';
					v += '					<div class="span2">';
					v += '						<div class="utui-table-row-data aligncenter">';
					v += '							<div class="badge-circle-empty profiles-badge"></div>';
					v += '						</div>';
					v += '					</div>';
					v += '					<div class="span2">';
					v += '						<div class="utui-table-row-data aligncenter">';
					v += '							<div class="badge-circle-empty extensions-badge"></div>';
					v += '						</div>';
					v += '					</div>';
					v += '				</div>';
					v += '			</a>';
					v += '		</div>';
					v += '		<div class="accordion-body collapse in">';
					v += '			<div class="accordion-inner">';
					v += '				<div class="container-fluid">';
					v += '					<div class="row-fluid">';
					v += '						<div class="span6">';
					v += '							<h3>';
					v += 								localize.t('tiq.users.account.account_settings.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_account_account_settings_tooltip" title="' + localize.t('tiq.users.account.account_settings.tooltip') + '"><i class="icon-question-sign"></i></div>'
					v += '                          </h3>';
					v += '							<ul class="simple-listing">';
					v += '								<li>';
					v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.MANAGE_ACCOUNT+'" name="'+utui.permissions.MANAGE_ACCOUNT+'" value="'+utui.permissions.MANAGE_ACCOUNT+'" class="permission-checkbox"/>';
					v += '									<label for="'+id+'_'+utui.permissions.MANAGE_ACCOUNT+'">' + localize.t('tiq.users.account.permission.manage_account') + '</label>';
					v += '								</li>';
					v += '							</ul>';
					v += '						</div>';
					v += '						<div class="span6">';
					v += '							<h3>';
					v += 								localize.t('tiq.users.account.reports.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_account_reports_tooltip" title="' + localize.t('tiq.users.account.reports.tooltip') + '"><i class="icon-question-sign"></i></div>'
					v += '                          </h3>';
					v += '							<ul class="simple-listing">';
					v += '								<li>';
					v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.MANAGE_AUDIT+'" name="'+utui.permissions.MANAGE_AUDIT+'" value="'+utui.permissions.MANAGE_AUDIT+'" class="permission-checkbox"/>';
					v += '									<label for="'+id+'_'+utui.permissions.MANAGE_AUDIT+'">' + localize.t('tiq.users.account.permission.manage_site_scans') + '</label>';
					v += '								</li>';
					v += '							</ul>';
					v += '						</div>';
					v += '					</div>';
					v += '				</div>';
					v += '				<div class="container-fluid">';
					v += '					<div class="row-fluid">';
					v += '						<div class="span6">';
					v += '							<h3>';
					v += 								localize.t('tiq.users.account.profiles.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_account_profiles_tooltip" title="' + localize.t('tiq.users.account.profiles.tooltip') + '"><i class="icon-question-sign"></i></div>'
					v += '                          </h3>';
					v += '							<ul class="simple-listing">';
					v += '								<li>';
					v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.CREATE_PROFILE+'" name="'+utui.permissions.CREATE_PROFILE+'" value="'+utui.permissions.CREATE_PROFILE+'" class="permission-checkbox"/>';
					v += '									<label for="'+id+'_'+utui.permissions.CREATE_PROFILE+'">' + localize.t('tiq.users.account.permission.manage_profiles') + '</label>';
					v += '								</li>';
					v += '							</ul>';
					v += '						</div>';
					v += '						<div class="span6">';
					v += '							<h3>';
					v += 								localize.t('tiq.users.account.javascript.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_account_javascript_tooltip" title="' + localize.t('tiq.users.account.javascript.tooltip') + '"><i class="icon-question-sign"></i></div>'
					v += '                          </h3>';
					v += '							<ul class="simple-listing">';
					v += '								<li>';
					v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.EXTENSIONS_JAVASCRIPT+'" name="'+utui.permissions.EXTENSIONS_JAVASCRIPT+'" value="'+utui.permissions.EXTENSIONS_JAVASCRIPT+'" class="permission-checkbox"/>';
					v += '									<label for="'+id+'_'+utui.permissions.EXTENSIONS_JAVASCRIPT+'">' + localize.t('tiq.users.account.permission.manage_javascript') + '</label>';
					v += '								</li>';
					v += '							</ul>';
					v += '						</div>';
					v += '					</div>';
					v += '				</div>';
					v += '				<div class="accordion-extras">';
					v += '					<label>';
					v += '  					<div class="btn select-all-permissions extras-buttons">';
					v += '  						<input type="checkbox">';
					v += 								localize.t('tiq.users.select_all_permissions');
					v += '  					</div>';
					v += '					</label>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				permissionsProfileBody:function(profiles) {
					var devAliasName = utui.targets.aliasDisplayName('dev'),
						qaAliasName = utui.targets.aliasDisplayName('qa'),
						prodAliasName = utui.targets.aliasDisplayName('prod'),
						v = '';

					v += '	<div class="utui-table-body">';

					for (var i=0; i<profiles.length; i++) {
						var profile = profiles[i],
							profileName = profile === '*' ? localize.t('tiq.users.profile.all_profiles') : profile;

						v += '		<div class="utui-table-row profile-permissions">';
						v += '			<input type="hidden" name="profile" value="'+profile+'" />';
						v += '			<div class="row-fluid">';
						v += '				<div class="span3">';
						v += '					<div class="utui-table-title">'+profileName+'</div>';
						v += '				</div>';
						v += '				<div class="span1">';
						v += '					<div class="utui-table-row-data aligncenter">';
						v += '						<div class="badge-circle-empty users-badge"></div>';
						v += '					</div>';
						v += '				</div>';
						v += '				<div class="span1">';
						v += '					<div class="utui-table-row-data aligncenter">';
						v += '						<div class="badge-circle-empty templates-badge"></div>';
						v += '					</div>';
						v += '				</div>';
						v += '				<div class="span1">';
						v += '					<div class="utui-table-row-data aligncenter">';
						v += '						<div class="badge-circle-empty labels-badge"></div>';
						v += '					</div>';
						v += '				</div>';
						v += '				<div class="span1">';
						v += '					<div class="utui-table-row-data aligncenter">';
						v += '						<div class="badge-circle-empty versions-badge"></div>';
						v += '					</div>';
						v += '				</div>';
						v += '				<div class="span2">';
						v += '					<div class="utui-table-row-data aligncenter">';
						v += '						<div class="badge-circle-empty js-promotion-badge"></div>';
						v += '					</div>';
						v += '				</div>';
						v += '				<div class="span2">';
						v += '					<div class="utui-table-row-data aligncenter">';
						v += '						<div class="badge-env-inactive dev-badge ellipsis" title="' + devAliasName + '">' + devAliasName + '</div>';
						v += '						<div class="badge-env-inactive qa-badge ellipsis" title="' + qaAliasName + '">' + qaAliasName + '</div>';
						v += '						<div class="badge-env-inactive prod-badge ellipsis" title="' + prodAliasName + '">' + prodAliasName + '</div>';
						v += '					</div>';
						v += '				</div>';
						v += '			</div>';
						v += '		</div>';
					}
					v += '	</div>';

					return v;
				},

				// ----------------------------------------------------
				permissionsProfileBodyAccordion:function(namespace, profiles) {
					var devAliasName = utui.targets.aliasDisplayName('dev'),
						qaAliasName = utui.targets.aliasDisplayName('qa'),
						prodAliasName = utui.targets.aliasDisplayName('prod'),
						v = '';

					v += '<div class="accordion profile-permissions-accordion">';

					// Accordion body
					for (var i=0; i<profiles.length; i++) {
						var profile = profiles[i],
							profileName = profile === '*' ? localize.t('tiq.users.profile.all_profiles') : profile,
							id = namespace + '_' + _replaceSelector(profile) + '_accordion';

						v += '	<div id="'+id+'" class="utui-table-row accordion-group">';
						v += '		<input type="hidden" name="profile" value="'+profile+'" />';
						v += '		<div class="accordion-heading">';
						v += '			<a class="accordion-toggle">';
						v += '				<div class="row-fluid">';
						v += '					<div class="span3">';
						v += '						<div class="utui-table-title">'+profileName+'</div>';
						v += '					</div>';
						v += '					<div class="span1">';
						v += '						<div class="utui-table-row-data aligncenter">';
						v += '							<div class="badge-circle-empty users-badge"></div>';
						v += '						</div>';
						v += '					</div>';
						v += '					<div class="span1">';
						v += '						<div class="utui-table-row-data aligncenter">';
						v += '							<div class="badge-circle-empty templates-badge"></div>';
						v += '						</div>';
						v += '					</div>';
						v += '					<div class="span1">';
						v += '						<div class="utui-table-row-data aligncenter">';
						v += '							<div class="badge-circle-empty labels-badge"></div>';
						v += '						</div>';
						v += '					</div>';
						v += '					<div class="span1">';
						v += '						<div class="utui-table-row-data aligncenter">';
						v += '							<div class="badge-circle-empty versions-badge"></div>';
						v += '						</div>';
						v += '					</div>';
            v += '				<div class="span2">';
            v += '					<div class="utui-table-row-data aligncenter">';
            v += '						<div class="badge-circle-empty js-promotion-badge"></div>';
            v += '					</div>';
            v += '				</div>';
						v += '					<div class="span2">';
						v += '						<div class="utui-table-row-data aligncenter">';
						v += '							<div class="badge-env-inactive dev-badge ellipsis" title="' + devAliasName + '">' + devAliasName + '</div>';
						v += '							<div class="badge-env-inactive qa-badge ellipsis" title="' + qaAliasName + '">' + qaAliasName + '</div>';
						v += '							<div class="badge-env-inactive prod-badge ellipsis" title="' + prodAliasName + '">' + prodAliasName + '</div>';
						v += '						</div>';
						v += '					</div>';
						v += '				</div>';
						v += '			</a>';
						v += '		</div>';
						v += '		<div class="accordion-body collapse in">';
						v += '			<div class="accordion-inner">';
						v += '				<div class="container-fluid">';
						v += '					<div class="row-fluid">';
						v += '						<div class="span6">';
						v += '							<h3>';
						v += 								localize.t('tiq.users.profile.users.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_profile_users_tooltip" title="' + localize.t('tiq.users.profile.users.tooltip') + '"><i class="icon-question-sign"></i></div>'
						v += '                          </h3>';
						v += '							<ul class="simple-listing">';
						v += '								<li>';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.MANAGE_USERS+'" name="'+utui.permissions.MANAGE_USERS+'" value="'+utui.permissions.MANAGE_USERS+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.MANAGE_USERS+'">' + localize.t('tiq.users.profile.permission.manage_users') + '</label>';
						v += '								</li>';
						v += '							</ul>';
						v += '						</div>';
						v += '						<div class="span6">';
						v += '							<h3>';
						v += 								localize.t('tiq.users.profile.templates.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_profile_templates_tooltip" title="' + localize.t('tiq.users.profile.templates.tooltip') + '"><i class="icon-question-sign"></i></div>'
						v += '                          </h3>';
						v += '							<ul class="simple-listing">';
						v += '								<li>';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.MANAGE_TEMPLATES+'" name="'+utui.permissions.MANAGE_TEMPLATES+'" value="'+utui.permissions.MANAGE_TEMPLATES+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.MANAGE_TEMPLATES+'">' + localize.t('tiq.users.profile.permission.manage_templates') + '</label>';
						v += '								</li>';
						v += '							</ul>';
						v += '						</div>';
						v += '					</div>';
						v += '				</div>';
						v += '				<div class="container-fluid">';
						v += '					<div class="row-fluid">';
						v += '						<div class="span6">';
						v += '							<h3>';
						v += 								localize.t('tiq.users.profile.labels.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_profile_labels_tooltip" title="' + localize.t('tiq.users.profile.labels.tooltip') + '"><i class="icon-question-sign"></i></div>'
						v += '                          </h3>';
						v += '							<ul class="simple-listing">';
						v += '								<li>';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.MANAGE_SECURE_LABELS+'" name="'+utui.permissions.MANAGE_SECURE_LABELS+'" value="'+utui.permissions.MANAGE_SECURE_LABELS+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.MANAGE_SECURE_LABELS+'">' + localize.t('tiq.users.profile.permission.manage_resource_locks') + '</label>';
						v += '								</li>';
						v += '							</ul>';
						v += '						</div>';
						v += '						<div class="span6">';
						v += '							<h3>';
						v += 								localize.t('tiq.users.profile.versions.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_profile_versions_tooltip" title="' + localize.t('tiq.users.profile.versions.tooltip') + '"><i class="icon-question-sign"></i></div>';
						v += '                          </h3>';
						v += '							<ul class="simple-listing">';
						v += '								<li>';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.SAVE_PROFILE+'" name="'+utui.permissions.SAVE_PROFILE+'" value="'+utui.permissions.SAVE_PROFILE+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.SAVE_PROFILE+'">' + localize.t('tiq.users.profile.permission.save_existing_version') + '</label>';
						v += '								</li>';
						v += '								<li>';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.COPY+'" name="'+utui.permissions.COPY+'" value="'+utui.permissions.COPY+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.COPY+'">' + localize.t('tiq.users.profile.permission.save_new_version') + '</label>';
						v += '								</li>';
						v += '							</ul>';
						v += '						</div>';
						v += '					</div>';
						v += '				</div>';
						v += '				<div class="container-fluid">';
						v += '					<div class="row-fluid">';
						v += '						<div class="span6">';
						v += '							<h3>';
						v += 								localize.t('tiq.users.profile.environments.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_'+utui.permissions.CREATE_PROFILE+'_tooltip" title="' + localize.t('tiq.users.profile.environments.tooltip') + '"><i class="icon-question-sign"></i></div>'
						v += '                          </h3>';
						v += '							<ul class="simple-listing">';
						v += '								<li class="ellipsis">';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.PUBLISH_DEV+'" name="'+utui.permissions.PUBLISH_DEV+'" value="'+utui.permissions.PUBLISH_DEV+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.PUBLISH_DEV+'">' + localize.t('tiq.users.profile.permission.publish_env_dev', {env: utui.targets.aliasDisplayName('dev')}) + '</label>';
						v += '								</li>';
						v += '								<li class="ellipsis">';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.PUBLISH_QA+'" name="'+utui.permissions.PUBLISH_QA+'" value="'+utui.permissions.PUBLISH_QA+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.PUBLISH_QA+'">' + localize.t('tiq.users.profile.permission.publish_env', {env: utui.targets.aliasDisplayName('qa')}) + '</label>';
						v += '								</li>';
						v += '								<li class="ellipsis">';
						v += '									<input type="checkbox" id="'+id+'_'+utui.permissions.PUBLISH_PROD+'" name="'+utui.permissions.PUBLISH_PROD+'" value="'+utui.permissions.PUBLISH_PROD+'" class="permission-checkbox"/>';
						v += '									<label for="'+id+'_'+utui.permissions.PUBLISH_PROD+'">' + localize.t('tiq.users.profile.permission.publish_env', {env: utui.targets.aliasDisplayName('prod')}) + '</label>';
						v += '								</li>';
						v += '							</ul>';
						v += '						</div>';
            v += '						<div class="span6">';
            v += '							<ul class="simple-listing">';
            v += '							  <h3>';
            v += 								    localize.t('tiq.users.profile.js_draft_promotion.title') + ' <div class="permissions-tooltip-icon" id="'+id+'_'+utui.permissions.JS_DRAFT_PROMOTION_PROD+'_tooltip" title="' + localize.t('tiq.users.profile.js_draft_promotion.tooltip') + '"><i class="icon-question-sign"></i></div>';
            v += '                </h3>';
            v += '							<ul class="simple-listing">';
            v += '								<li class="ellipsis">';
            v += '									<input type="checkbox" id="' + id + '_' + utui.permissions.JS_DRAFT_PROMOTION_DEV + '" name="' + utui.permissions.JS_DRAFT_PROMOTION_DEV + '" value="' + utui.permissions.JS_DRAFT_PROMOTION_DEV + '" class="permission-checkbox"/>';
            v += '									<label for="'+id+'_'+utui.permissions.JS_DRAFT_PROMOTION_DEV+'">' + localize.t('tiq.users.profile.js_draft_promotion.promote_dev', {env: utui.targets.aliasDisplayName('dev')}) + '</label>';
            v += '								</li>';
            v += '								<li class="ellipsis">';
            v += '									<input type="checkbox" id="' + id + '_' + utui.permissions.JS_DRAFT_PROMOTION_QA + '" name="' + utui.permissions.JS_DRAFT_PROMOTION_QA + '" value="' + utui.permissions.JS_DRAFT_PROMOTION_QA + '" class="permission-checkbox"/>';
            v += '									<label for="'+id+'_'+utui.permissions.JS_DRAFT_PROMOTION_QA+'">' + localize.t('tiq.users.profile.js_draft_promotion.promote', {env: utui.targets.aliasDisplayName('qa')}) + '</label>';
            v += '								</li>';
            v += '								<li class="ellipsis">';
            v += '									<input type="checkbox" id="' + id + '_' + utui.permissions.JS_DRAFT_PROMOTION_PROD + '" name="' + utui.permissions.JS_DRAFT_PROMOTION_PROD + '" value="' + utui.permissions.JS_DRAFT_PROMOTION_PROD + '" class="permission-checkbox"/>';
            v += '									<label for="'+id+'_'+utui.permissions.JS_DRAFT_PROMOTION_PROD+'">' + localize.t('tiq.users.profile.js_draft_promotion.promote', {env: utui.targets.aliasDisplayName('prod')}) + '</label>';
            v += '								</li>';
            v += '						</div>';
            v += '					</div>';
            v += '				</div>';

						v += '				<div class="accordion-extras">';
						v += '					<label>';
						v += '  					<div class="btn select-all-permissions extras-buttons">';
						v += '  						<input type="checkbox">';
						v += 							localize.t('tiq.users.select_all_permissions');
						v += '  					</div>';
						v += '					</label>';
						if (profiles.length > 1) {
							v += '				<div class="apply-permissions extras-buttons">';
							v += '					<a class="btn">' + localize.t('tiq.users.profile.apply_to_selected') + '</a>';
							v += '				</div>';
						}
						v += '				</div>';
						v += '			</div>';
						v += '		</div>';
						v += '	</div>';
					}

					v += '</div>';

					return v;
				}
			},

			// --------------------------------------------------------
			eventHandlers: {
				// ----------------------------------------------------
				onAccordionClick: function() {
					var $accordion = $(this).closest('.accordion'),
						$group = $(this).closest('.accordion-group'),
						$innerDiv = $group.find('.accordion-inner');

					function _closeAccordions($group) {
						$accordion.find('.accordion-inner').slideUp(300);
						$accordion.find('.accordion-group').removeClass('selected');
						$group.addClass('selected');
					}

					if($innerDiv.is(':visible')) {
						$innerDiv.slideUp(300, function() {
							$group.removeClass('selected');
						});
					}
					else {
						_closeAccordions($group);
						$innerDiv.slideDown(300);
						$group.addClass('selected');
					}
				},

				// ----------------------------------------------------
				// Prevents duplicates in select2
				onProfileListSelect: function(event) {
					var val = event.val || '',
						profiles = $(this).val() || [];
					if ($.inArray(val, profiles) > -1) {
						event.preventDefault();
					}
				}
			}
		},

		// ------------------------------------------------------------
		// USER MANAGER MODAL
		userManager: function() {
			// Private API
			var _namespace = 'users_usermanager_dialog',
				_$template = utui.ui.dialog.body(),
				_users,                 // Contains the list of users loaded from server request
				_selectedOption,		// Selected option from the account/profile(s) dropdown
				_isAccountSelected;		// Set to true if the account is selected in the dropdown

			// --------------------------------------------------------
			function _clear() {
				_selectedOption = null;
				_isAccountSelected = null;
			}

			// --------------------------------------------------------
			// Refreshes the view to account for any changes that may have been made
			function _refresh() {
				_render.ui();
			}

			// --------------------------------------------------------
			// Sets the selectedIndex for the account/profile dropdown
			function _setSelectedIndex() {
				var $auditList = _$template.find('#'+_namespace+'_profile_selector'),
					index = 0;

				if (!_selectedOption) {
					// Does this user have a wildcard permission? if so then set the index to 0
					if (utui.permissions.canManageAccount()) {
						_selectedOption = utui.login.account;
					} else {
						_selectedOption = utui.login.profile;
					}
				}

				// Now find the index of the option
				for (var i=0; i<$auditList.get(0).options.length; i++) {
					var option = $auditList.get(0).options[i];
					if (option.value === _selectedOption) index = i;
				}

				$auditList.get(0).selectedIndex = index;

				// So we know if we are displaying account info or profile info
				_isAccountSelected = $auditList.val() == utui.login.account;
			}

			// --------------------------------------------------------
			// Hides and show the single/bulk user options
			function _hideShowUserOptions() {
				// Hide the user options
				_$template.find('.single-user-options').hide();
				_$template.find('.bulk-user-options').hide();

				// Get all checked values
				var $checked = _$template.find('#'+_namespace+'_user_list').find('input:visible:checked');
				if ($checked.length === 1) {
					_$template.find('.single-user-options').show();
				} else if ($checked.length > 1) {
					_$template.find('.bulk-user-options').show();
				}
			}

			// --------------------------------------------------------
			// Returns an array of users that are checked in the user list
			function _getSelectedUsersList() {
				var $checked = _$template.find('#'+_namespace+'_user_list').find('input:visible:checked'),
					users = [];

				$.each($checked, function() {
					var $row = $(this).closest('.clickable');
					users.push($row.find('input[name="email"]').val());
				});

				return users;
			}

			// --------------------------------------------------------
			// Returns an object of users that are checked in the user list
			function _getSelectedUsersObject() {
				var userList = _getSelectedUsersList(),
					users = {};

				for (var i=0; i<userList.length; i++) {
					users[userList[i]] = _users[userList[i]];
				}

				return users;
			}

			// --------------------------------------------------------
			// Adds the content to the template
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					// Render the content
					_render.content();

					// Load the list of permissions then users for the account
					_request.getUsers();
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-footer').html(_view.contentFooter());

					// Set the selected option
					_setSelectedIndex();

					// Need to add wildcard to the footer legend for account view
					if (_isAccountSelected) {
						var tooltipID = _namespace+'_tooltip_wildcard';
						_$template.find('.legend-listing').append('<li id="'+tooltipID+'" title="' + localize.t('tiq.users.legend.wildcard.tooltip') + '"><i class="icon-asterisk"></i> ' + localize.t('tiq.users.legend.wildcard.title') + '</li>');

						// Set the tooltips
						var customTooltipObj = {};
						customTooltipObj[tooltipID] = { gravity:'w' };
						utui.util.addTooltip(customTooltipObj, _$template);
					}

					// Set the sort options but need to do after account/profile dropdown is generated
					_$template.find('#'+_namespace+'_user_sort_options').html(_view.sortOptions());
					// Set the filter options but need to do after account/profile dropdown is generated
					_$template.find('#'+_namespace+'_user_filter_options').html(_view.filterOptions());

					_bindUI.global();
					_bindUI.tooltip();
				},

				// ----------------------------------------------------
				users: function() {
					_$template.find('#'+_namespace+'_user_options').html(_view.usersOptions());
					_$template.find('#'+_namespace+'_user_listHeader').html(_view.usersHeader());
					_$template.find('#'+_namespace+'_user_list').html(_view.users());

					// Hide all Tealium users by default
					_eventHandlers.onFilterOptionChange();

					_bindUI.users();

					// Make the scrollbar reset to the top
					_$template.find('.utui-table-body').scrollTop(0);
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					// Top buttons container
					v += '<div class="usermanager-dialog-header">';
					v += '	<div class="container-fluid">';

					// First row buttons
					v += '      <div class="profile-selection-top valign-container">';
					v += '  		<div class="row-fluid">';
					v += '  			<div class="span4">';
					v += '  				<select id="'+_namespace+'_profile_selector" class="usermanager-select">' + _view.profileSelectOptions() + '</select>';
					v += '  			</div>';
					v += '  			<div class="span7">';
					v += '  				<div id="'+_namespace+'_sort_options_menu" class="dropdown" style="float:right; position:relative;">';
					v += '  					<button id="tag_sort_menu_button" class="sort_menu_button js-dropdown-button" type="button">';
					v += '  						<span style="float:right" class="ui-icon ui-icon-triangle-1-s"></span>';
					v += '  						<span style="float:right;font-size:11px;" class="sort_button">';
					v += '  							<span id="tag_sort_menu_text"><span class="menufont">' + localize.t('tiq.sort_by') + '</span></span>';
					v += '  						</span>';
					v += '  					</button>';
					v += '  					<div id="'+_namespace+'_user_sort_options" class="menu_list_container gradient js-dropdown-listing" style="width:100px;"></div>';
					v += '  				</div>';
					v += '  			</div>';
					v += '  			<div class="span1">';
					v += '  				<div id="'+_namespace+'_filter_options_menu" class="dropdown" style="float:right; position:relative;">';
					v += '  					<button id="tag_filter_menu_button" class="filter_menu_button js-dropdown-button filter_button" type="button">';
					v += '  						<span style="float:right" class="ui-icon ui-icon-triangle-1-s"></span>';
					v += '  						<span id="tag_filter_menu_text"><span class="menufont">' + localize.t('tiq.filter') + '</span></span>';
					v += '  					</button>';
					v += '  					<div id="'+_namespace+'_user_filter_options" class="menu_list_container gradient js-dropdown-listing" style="width:200px;"></div>';
					v += '  				</div>';
					v += '  			</div>';
					v += '  		</div>';
					v += '      </div>';

					// Second row buttons
					v += '      <div class="profile-selection-top valign-container">';
					v += '  		<div class="row-fluid">';
					v += '  			<div class="span2">';
					v += '  				<label>';
					v += '  					<div class="btn">';
					v += '  						<input type="checkbox" id="'+_namespace+'_select_all_users">';
					v += 							localize.t('tiq.users.select_all');
					v += '  					</div>';
					v += '  				</label>';
					v += '  			</div>';
					v += '  			<div class="span8" id="'+_namespace+'_user_options"></div>';
					v += '  			<div class="span2 alignright">';
					v += '  				<div class="btn" id="'+_namespace+'_new_user" title="' + localize.t('tiq.users.add_user.tooltip') + '">';
					v += 						localize.t('tiq.users.add_user.title');
					v += '  				</div>';
					v += '  			</div>';
					v += '  		</div>';
					v += '      </div>';

					v += '	</div>';
					v += '</div>';

					// Users container
					v += '<div class="utui-users-container">';
					// Users row header
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid utui-table-header" id="'+_namespace+'_user_listHeader"></div>';
					v += '	</div>';

					// Users scrollable container
					v += '	<div class="container-fluid">';
					v += '		<div class="utui-table-body usermanager-user-list" id="'+_namespace+'_user_list"></div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				contentFooter: function() {
					var v = '';

					v += _dialogs.shared.view.iconLegend(_namespace);

					return v;
				},

				// ----------------------------------------------------
				sortOptions: function () {
					var v = '';

					v += '<div class="formItem ellipsis">';
					v += '	<input type="radio" class="asc" id="'+_namespace+'_sort_cbox1" name="sort-users" value="sort_email" checked />';
					v += '	<label for="'+_namespace+'_sort_cbox1">' + localize.t('tiq.users.email') + '</label>';
					v += '</div>';
					v += '<div class="formItem ellipsis">';
					v += '	<input type="radio" id="'+_namespace+'_sort_cbox2" name="sort-users" value="sort_first_name"/>';
					v += '	<label for="'+_namespace+'_sort_cbox2">' + localize.t('tiq.users.first_name') + '</label>';
					v += '</div>';
					v += '<div class="formItem ellipsis">';
					v += '	<input type="radio" id="'+_namespace+'_sort_cbox3" name="sort-users" value="sort_last_name"/>';
					v += '	<label for="'+_namespace+'_sort_cbox3">' + localize.t('tiq.users.last_name') + '</label>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				filterOptions: function() {
					var v = '';

					v += '<div class="formItem"><strong>' + localize.t('tiq.users.filter.title') + '</strong></div>';

					// Show account level filters
					if (_isAccountSelected) {
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox1" value="'+utui.permissions.MANAGE_ACCOUNT+'"/>';
						v += '	<label for="'+_namespace+'_filter_cbox1">' + localize.t('tiq.users.account.permission.manage_account') + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox2" value="'+utui.permissions.MANAGE_AUDIT+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox2">' + localize.t('tiq.users.account.permission.manage_site_scans') + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox3" value="'+utui.permissions.CREATE_PROFILE+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox3">' + localize.t('tiq.users.account.permission.manage_profiles') + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox4" value="'+utui.permissions.EXTENSIONS_JAVASCRIPT+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox4">' + localize.t('tiq.users.account.permission.manage_javascript') + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox5" value="NO_NAME" />';
						v += '	<label for="'+_namespace+'_filter_cbox5">' + localize.t('tiq.users.filter.name_not_set') + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox7" value="HAS_API_KEY" />';
						v += '	<label for="'+_namespace+'_filter_cbox7">' + localize.t('tiq.users.filter.api_keys_assigned') + '</label>';
						v += '</div>';
						if(utui.permissions.isTealiumUser()) {
						v += '<div class="divider"></div>';
						v += '<h3>' + localize.t('tiq.users.filter.tealium_users') + '</h3>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox6" value="TEALIUM_USER" />';
						v += '	<label for="'+_namespace+'_filter_cbox6">' + localize.t('tiq.users.filter.show_tealium_users') + '</label>';
						v += '</div>';
						}

						// Show profile level filters
					} else {
						v += '<h3>' + localize.t('tiq.users.filter.users') + '</h3>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox1" value="'+utui.permissions.MANAGE_USERS+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox1">' + localize.t('tiq.users.profile.permission.manage_users') + '</label>';
						v += '</div>';
						v += '<h3>' + localize.t('tiq.users.filter.templates') + '</h3>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox2" value="'+utui.permissions.MANAGE_TEMPLATES+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox2">' + localize.t('tiq.users.profile.permission.manage_templates') + '</label>';
						v += '</div>';
						v += '<h3>' + localize.t('tiq.users.filter.labels') + '</h3>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox3" value="'+utui.permissions.MANAGE_SECURE_LABELS+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox3">' + localize.t('tiq.users.profile.permission.manage_resource_locks') + '</label>';
						v += '</div>';
						v += '<h3>' + localize.t('tiq.users.filter.versions') + '</h3>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox4" value="'+utui.permissions.SAVE_PROFILE+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox4">' + localize.t('tiq.users.profile.permission.save_existing_version') + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox5" value="'+utui.permissions.COPY+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox5">' + localize.t('tiq.users.profile.permission.save_new_version') + '</label>';
						v += '</div>';
						v += '<h3>' + localize.t('tiq.users.filter.environments') + '</h3>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox6" value="'+utui.permissions.PUBLISH_DEV+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox6">' + localize.t('tiq.users.profile.permission.publish_env_dev', {env: utui.targets.aliasDisplayName('dev')}) + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox7" value="'+utui.permissions.PUBLISH_QA+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox7">' + localize.t('tiq.users.profile.permission.publish_env', {env: utui.targets.aliasDisplayName('qa')}) + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox8" value="'+utui.permissions.PUBLISH_PROD+'" />';
						v += '	<label for="'+_namespace+'_filter_cbox8">' + localize.t('tiq.users.profile.permission.publish_env', {env: utui.targets.aliasDisplayName('prod')}) + '</label>';
						v += '</div>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox9" value="NO_NAME" />';
						v += '	<label for="'+_namespace+'_filter_cbox9">' + localize.t('tiq.users.filter.name_not_set') + '</label>';
						v += '</div>';
            v += '<div class="formItem ellipsis">';
            v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox11" value="HAS_API_KEY" />';
            v += '	<label for="'+_namespace+'_filter_cbox11">' + localize.t('tiq.users.filter.api_keys_assigned') + '</label>';
            v += '</div>';
						if(utui.permissions.isTealiumUser()) {
						v += '<div class="divider"></div>';
						v += '<h3>' + localize.t('tiq.users.filter.tealium_users') + '</h3>';
						v += '<div class="formItem ellipsis">';
						v += '	<input type="checkbox" id="'+_namespace+'_filter_cbox10" value="TEALIUM_USER" />';
						v += '	<label for="'+_namespace+'_filter_cbox10">' + localize.t('tiq.users.filter.show_tealium_users') + '</label>';
						v += '</div>';
						}
					}

					return v;
				},

				// ----------------------------------------------------
				usersOptions: function() {
					var v = '';

					// Single user options
					v += '<div class="single-user-options">';
					v += ' ' + localize.t('tiq.users.user_options');
					v += '  <a class="btn" id="'+_namespace+'_single_edit_user_account_btn"><i class="icon"></i> ' + localize.t('tiq.users.edit_view_user_settings') + '</a>';
					v += '  <a class="btn" id="'+_namespace+'_single_edit_user_permissions_btn"><i class="icon"></i> ' + localize.t('tiq.users.edit_view_user_permissions') + '</a>';
					v += '  <div id="'+_namespace+'_single_user_options_more" style="display:inline-block;">';
					v += '    <a class="btn js-dropdown-button" id="'+_namespace+'_single_user_permissions_more_btn">' + localize.t('tiq.users.more') + ' <i class="icon-caret-down"></i></a>';
					v += '    <div class="single-user-options-more-menu menu_list_container js-dropdown-listing">';
					v += '      <div class="menulistitem"><a class="menulistfont" id="'+_namespace+'_single_remove_from_profiles_btn">' + localize.t('tiq.users.remove_from_profiles') + '</a></div>';
					v += '      <div class="menulistitem"><a class="menulistfont" id="'+_namespace+'_single_delete_user_btn">' + localize.t('tiq.users.remove_user') + '</a></div>';
					v += '    </div>';
					v += '  </div>';
					v += '</div>';
					v += '</div>';

					// Bulk user options
					v += '<div class="bulk-user-options">';
					v += '	Bulk User Options:';
					v += '	<a class="btn" id="'+_namespace+'_bulk_add_account_permissions_btn"><i class="icon"></i> ' + localize.t('tiq.users.add_account_permissions') + '</a>';
					v += '	<a class="btn" id="'+_namespace+'_bulk_add_profile_permissions_btn"><i class="icon"></i> ' + localize.t('tiq.users.add_profile_permissions') + '</a>';
					v += '	<div id="'+_namespace+'_bulk_user_options_more" style="display:inline-block;">';
					v += '		<a class="btn js-dropdown-button" id="'+_namespace+'_bulk_user_permissions_more_btn">' + localize.t('tiq.users.more') + ' <i class="icon-caret-down"></i></a>';
          v += '		<div class="bulk-user-options-more-menu menu_list_container js-dropdown-listing">';
          v += '			<div class="menulistitem"><a class="menulistfont" id="'+_namespace+'_bulk_manage_apikey_btn">' + localize.t('tiq.users.manage_apikeys') + '</a></div>';
          v += '			<div class="divider"></div>';
          v += '			<div class="menulistitem"><a class="menulistfont" id="'+_namespace+'_bulk_remove_account_permissions_btn">' + localize.t('tiq.users.remove_account_permissions') + '</a></div>';
          v += '			<div class="menulistitem"><a class="menulistfont" id="'+_namespace+'_bulk_remove_profile_permissions_btn">' + localize.t('tiq.users.remove_profile_permissions') + '</a></div>';
          v += '			<div class="menulistitem"><a class="menulistfont" id="'+_namespace+'_bulk_remove_from_profiles_btn">' + localize.t('tiq.users.remove_from_profile') + '</a></div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				usersHeader: function() {
					var v = '';

					// Show account level header
					if (_isAccountSelected) {
						v += '<div class="span4" style="padding-left:32px;">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.name') + '</div>';
						v += '</div>';
						v += '<div class="span1-2 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.account_settings') + '</div>';
						v += '</div>';
						v += '<div class="span1-2 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.reports') + '</div>';
						v += '</div>';
						v += '<div class="span1-2 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.profiles') + '</div>';
						v += '</div>';
						v += '<div class="span1-2 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.javascript') + '</div>';
						v += '</div>';
						v += '<div class="span1-2 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.assigned_profiles') + '</div>';
						v += '</div>';

						// Show profile level header
					} else {
						v += '<div class="span5" style="padding-left:32px;">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.name') + '</div>';
						v += '</div>';
						v += '<div class="span1 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.users') + '</div>';
						v += '</div>';
						v += '<div class="span1 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.templates') + '</div>';
						v += '</div>';
						v += '<div class="span1 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.labels') + '</div>';
						v += '</div>';
						v += '<div class="span1 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.versions') + '</div>';
						v += '</div>';
						v += '<div class="span2 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.js_promotion') + '</div>';
						v += '</div>';
						v += '<div class="span2 aligncenter">';
						v += '	<div class="utui-table-header-data">' + localize.t('tiq.users.header.environments') + '</div>';
						v += '</div>';
					}

					return v;
				},

				// ----------------------------------------------------
				users: function() {
					var v = '',
						selectedProfile = _selectedOption || utui.login.profile,
						devAliasName = utui.targets.aliasDisplayName('dev'),
						qaAliasName = utui.targets.aliasDisplayName('qa'),
						prodAliasName = utui.targets.aliasDisplayName('prod');

					for (var key in _users) {
						var user = _users[key];
						var userName = _getUserName(user);
						var firstName = user.first_name || '';
						var lastName = user.last_name || '';

						if (user.is_stale) {
							v += '<div class="utui-table-row clickable disabled" title="' + localize.t('tiq.users.pending_changes') + '">';
						} else {
							v += '<div class="utui-table-row clickable">';
						}

						v += '	<label class="row-fluid">';
						v += '		<div class="span'+(_isAccountSelected?'4':'5')+'">';
						v += '			<div class="utui-table-row-data">';
						v += '				<div class="selection-row-checkbox">';
						if (!user.is_stale) {
							v += '					<input type="checkbox" />';
						}
						v += '				</div>';
						v += '				<div class="selection-row-meta">';
						v += '					<div class="user-container">';
						v +=					_getUserImage(user, 'small');
						if (userName) {
							v += '						<div class="user-givenname" data-email="' + user.email + '" data-firstName="' + firstName + '" data-lastName="' + lastName + '">' + userName + '</div>';

						} else {
							v += '						<div class="user-givenname no-name" data-email="' + user.email + '" data-firstName="' + firstName + '" data-lastName="' + lastName + '" title="' + localize.t('tiq.users.no_name_tooltip') + '">(' + localize.t('tiq.users.name_not_set') + ')</div>';
						}
						v += '						<div class="user-email">' + user.email + '</div>';
						v += '						<input type="hidden" name="email" value="' + user.email + '" />';
						v += '					</div>';
						v += '				</div>';
						v += '			</div>';
						v += '		</div>';

						if (user.is_stale) {
							v += '      <div class="span'+(_isAccountSelected?'6':'5')+' aligncenter is-stale">' + localize.t('tiq.users.pending_changes') + '</div>';
							v += '      <div class="span2"></div>';
						} else {
							// Show account level options
							if (_isAccountSelected) {
								v += '		<div class="span1-2 aligncenter">';
								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + ($.inArray(utui.permissions.MANAGE_ACCOUNT, user.permissions) > -1 ? 'full' : 'empty') + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span1-2 aligncenter">';
								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + ($.inArray(utui.permissions.MANAGE_AUDIT, user.permissions) > -1 ? 'full' : 'empty') + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span1-2 aligncenter">';
								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + ($.inArray(utui.permissions.CREATE_PROFILE, user.permissions) > -1 ? 'full' : 'empty') + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span1-2 aligncenter">';
								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + ($.inArray(utui.permissions.EXTENSIONS_JAVASCRIPT, user.permissions) > -1 ? 'full' : 'empty') + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span1-2 aligncenter">';
								v += '			<div class="utui-table-row-data"><span class="blue">' + (user.is_assigned_to_all_current_and_future_profiles ? (user.assigned_profile_count + '<i class="icon-asterisk icon-wildcard"></i>') : user.assigned_profile_count) + '</span> / ' + user.total_profile_count + '</div>';
								v += '		</div>';

								// Show profile level options
							} else {
								var profilePermissions = _getProfilePermissionsFromUser(user, selectedProfile);
								v += '		<div class="span1 aligncenter">';
								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + ($.inArray(utui.permissions.MANAGE_USERS, profilePermissions) > -1 ? 'full' : 'empty') + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span1 aligncenter">';
								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + ($.inArray(utui.permissions.MANAGE_TEMPLATES, profilePermissions) > -1 ? 'full' : 'empty') + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span1 aligncenter">';
								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + ($.inArray(utui.permissions.MANAGE_SECURE_LABELS, profilePermissions) > -1 ? 'full' : 'empty') + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span1 aligncenter">';

								// Check to see if the user has full,partial or no publish permissions
								var canSaveProfile = $.inArray(utui.permissions.SAVE_PROFILE, profilePermissions) > -1,
									canCopy = $.inArray(utui.permissions.COPY, profilePermissions) > -1,
									versionsBadge = (canSaveProfile && canCopy ? 'full' : canSaveProfile || canCopy ? 'partial' : 'empty');

								v += '			<div class="utui-table-row-data"><div class="badge-circle-' + versionsBadge + '"></div></div>';
								v += '		</div>';
								v += '		<div class="span3 aligncenter">';
								v += '			<div class="utui-table-row-data">';
								v += '				<div class="badge-env-' + ($.inArray(utui.permissions.PUBLISH_DEV, profilePermissions) > -1 ? 'active':'inactive') + ' ellipsis" title="' + devAliasName + '">' + devAliasName + '</div>';
								v += '				<div class="badge-env-' + ($.inArray(utui.permissions.PUBLISH_QA, profilePermissions) > -1 ? 'active':'inactive') + ' ellipsis" title="' + qaAliasName + '">' + qaAliasName + '</div>';
								v += '				<div class="badge-env-' + ($.inArray(utui.permissions.PUBLISH_PROD, profilePermissions) > -1 ? 'active':'inactive') + ' ellipsis" title="' + prodAliasName + '">' + prodAliasName + '</div>';
								v += '			</div>';
								v += '		</div>';
							}
						}
						v += '	</label>';
						v += '</div>';
					}

					return v;
				},

				// ----------------------------------------------------
				// Returns the list of profiles for the select box
				// If the user has permissions for account level it will return the account and place the profiles in a group
				profileSelectOptions: function() {
					var v = '';

					// Get the profiles from the current user
					var profiles = _getProfilesFromUser();
					_sortList(profiles);

					// Add the profiles
					for (var i=0; i<profiles.length; i++) {
						var profile = profiles[i],
							permissions = _getProfilePermissionsFromUser(_userData[utui.login.email], profile);

						// Only add profiles that the user has permissions to manage and isn't wildcard
						if (profile !== '*' && $.inArray(utui.permissions.MANAGE_USERS, permissions) > -1) {
							v += '<option value="' + profile + '">' + profile + '</option>';
						}
					}

					// Add the account
					if (utui.permissions.canManageAccount()) {
						v = '<optgroup label="' + localize.t('tiq.users.dropdown.account') + '"><option value="' + utui.login.account + '">' + utui.login.account + '</option></optgroup><optgroup label="' + localize.t('tiq.users.dropdown.profiles') + '">' + v + '</optgroup>';
					}

					return v;
				}
			}

			// --------------------------------------------------------
			// Binds the UI events
			var _bindUI = {
				global: function() {
					_$template.find('#'+_namespace+'_profile_selector').safeOn('change', _eventHandlers.onProfileSelectorChange);
					_$template.find('#'+_namespace+'_user_sort_options input:radio').safeOn('click', _eventHandlers.onSortOptionClick);
					_$template.find('#'+_namespace+'_user_filter_options input:checkbox').safeOn('change', _eventHandlers.onFilterOptionChange);
					_$template.find('#'+_namespace+'_select_all_users').safeOn('change', _eventHandlers.onSelectAllUsersChange);
					_$template.find('#'+_namespace+'_new_user').safeOn('click', _eventHandlers.onNewUserBtnClick);
					_$template.find('#'+_namespace+'_profile_selector').select2({minimumResultsForSearch: -1});

					utui.ui.toggleMenu(_$template.find('#'+_namespace+'_sort_options_menu'));
					utui.ui.toggleMenu(_$template.find('#'+_namespace+'_filter_options_menu'));
				},

				// --------------------------------------------------------
				users: function() {
					_$template.find('#'+_namespace+'_user_list input:checkbox').safeOn('change', _eventHandlers.onUserRowChange);

					// Single user options
					_$template.find('#'+_namespace+'_single_edit_user_account_btn').safeOn('click', _eventHandlers.onEditUserSettingsBtnClick);
					_$template.find('#'+_namespace+'_single_edit_user_permissions_btn').safeOn('click', _eventHandlers.onEditUserPermissionsBtnClick);
					_$template.find('#'+_namespace+'_single_remove_from_profiles_btn').safeOn('click', _eventHandlers.onRemoveFromProfilesBtnClick);
					_$template.find('#'+_namespace+'_single_delete_user_btn').safeOn('click', _eventHandlers.onDeleteUserBtnClick);

					utui.ui.toggleMenu(_$template.find('#'+_namespace+'_single_user_options_more'));

					// Bulk user options
					_$template.find('#'+_namespace+'_bulk_add_account_permissions_btn').safeOn('click', _eventHandlers.onAddAccountPermissionsBtnClick);
					_$template.find('#'+_namespace+'_bulk_remove_account_permissions_btn').safeOn('click', _eventHandlers.onRemoveAccountPermissionsBtnClick);
					_$template.find('#'+_namespace+'_bulk_add_profile_permissions_btn').safeOn('click', _eventHandlers.onAddProfilePermissionsBtnClick);
					_$template.find('#'+_namespace+'_bulk_remove_profile_permissions_btn').safeOn('click', _eventHandlers.onRemoveProfilePermissionsBtnClick);
					_$template.find('#'+_namespace+'_bulk_remove_from_profiles_btn').safeOn('click', _eventHandlers.onRemoveFromProfilesBtnClick);
					_$template.find('#'+_namespace+'_bulk_manage_apikey_btn').safeOn('click', _eventHandlers.onManageAPIKeysBtnClick);

					utui.ui.toggleMenu(_$template.find('#'+_namespace+'_bulk_user_options_more'));
				},

				// --------------------------------------------------------
				tooltip: function() {
					var obj = {};
					obj[_namespace+'_new_user'] = { gravity: 'n' };
					utui.util.addTooltip(obj, _$template);
				}
			}

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				// Re-renders the UI when a new option is selected
				onProfileSelectorChange: function() {
					utui.ui.dialog.message.hide(_namespace);

					_selectedOption = $(this).val();

					// Render the UI
					_render.ui();
				},

				// ----------------------------------------------------
				onSortOptionClick: function (e) {
					var $el = $(e.currentTarget);
					var sort = $el.val();
					var className = '.user-container';
					var sortDirection = 'asc';
					var dataAttr;

					if (sort === 'sort_email') {
						dataAttr = 'data-email';

					} else if (sort === 'sort_first_name') {
						dataAttr = 'data-firstName';

					} else if (sort === 'sort_last_name') {
						dataAttr = 'data-lastName';
					}

					if ($el.hasClass('asc')) {
						_resetSortFlag();
						$el.addClass('desc');
						sortDirection = 'desc';

					} else if ($el.hasClass('desc')) {
						_resetSortFlag();
						$el.addClass('asc');

					} else {
						_resetSortFlag();
						$el.addClass('asc');
					}

					function _resetSortFlag() {
						$('input[name="sort-users"]').removeClass('asc desc');
					}

					function _userManagementSortByClassName (a,b) {
						var x = $(a).find(className + ' [' + dataAttr + ']').attr(dataAttr).toLowerCase();
						var y =  $(b).find(className + ' [' + dataAttr + ']').attr(dataAttr).toLowerCase();

						if (sortDirection === 'asc') {
							return (x > y) ? 1 : (x < y) ? -1 : 0;

						} else {
							return (x < y) ? 1 : (x > y) ? -1 : 0;
						}
					}

					function _userManagementReorderElements (el) {
						var container = $('#'+_namespace+'_user_list');
						container.html('');
						el.each(function(){
							$(this).appendTo(container);
						});
					}

					_userManagementReorderElements($('.utui-table-row').sort(_userManagementSortByClassName));
					_bindUI.users();
				},

				// ----------------------------------------------------
				// Applies all the checked filter to the UI
				onFilterOptionChange: function() {
					var $filters = $(this).closest('.menu_list_container').find('input:checked'),
						$users = $('#'+_namespace+'_user_list').find('.clickable'),
						$showTealiumFilter = $('input[value="TEALIUM_USER"]');

					// If any filters are selected
					if ($filters.length > 0) {
						$users.hide();
						// Loop over all the users to see if they should be filtered (shown/hidden)
						$users.each(function() {
							var email = $(this).find('input[name="email"]').val(),
								userObj = _users[email],
								permissions = _isAccountSelected ? userObj.permissions : _getProfilePermissionsFromUser(userObj, _selectedOption),
								bShowUser = true,
								userName = _getUserName(userObj);

							// Check the selected filters against the user's permissions/characteristics to determine whether they are shown
							for (var i = 0; i < $filters.length; i++) {
								var filter = $($filters[i]).val();
								// If they are a tealium user and the show tealium filter is off then don't show, otherwise check their permissions/characteristics against the filters
								if ((!$showTealiumFilter.prop('checked') &&  email.indexOf('@tealium.com') !== -1) || (filter === "NO_NAME" && userName) 
									|| (filter === "HAS_API_KEY" && userObj.has_api_key !== true)
                					|| (filter !== "TEALIUM_USER" && filter !== 'HAS_API_KEY' && filter !== 'NO_NAME' && $.inArray(filter, permissions) === -1)) {
									bShowUser = false;
									break;
								}
							}

							// Show user ?
							if (bShowUser) {
								$(this).show();
							}
						});
					// If no filters are selected, show all the users except Tealium users (hidden by default)
					} else {
						$users.each(function() {
							if ($(this).find('input[name="email"]').val().indexOf('@tealium.com') === -1) {
								$(this).show();
							} else {
								$(this).hide();
							}
						});
					}

					_hideShowUserOptions();
				},

				// ----------------------------------------------------
				onSelectAllUsersChange: function() {
					var isChecked = $(this).is(':checked');
					// Toggle the checked attribute
					if (isChecked) {
						$('#'+_namespace+'_user_list').find('.clickable input:checkbox').prop('checked', 'checked');
					} else {
						$('#'+_namespace+'_user_list').find('.clickable input:checkbox').prop( "checked", false );
					}

					_hideShowUserOptions();
				},

				// ----------------------------------------------------
				onUserRowChange: function() {
					// Remove the checked attribute from the select all button
					$('#'+_namespace+'_select_all_users').prop( "checked", false );
					_hideShowUserOptions();
				},

				// ----------------------------------------------------
				onNewUserBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers() && !utui.permissions.canManageAccount()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_dialogs.addUser.show(_refresh);
				},

				// ----------------------------------------------------
				onEditUserSettingsBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers() && _getSelectedUsersList()[0] !== utui.login.email) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					var selectedUsers = _getSelectedUsersList();
					_dialogs.editUser.show(_users[selectedUsers[0]], _refresh);
				},

				// ----------------------------------------------------
				onEditUserPermissionsBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers() && !utui.permissions.canManageAccount()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					var selectedUsers = _getSelectedUsersList();
					_dialogs.editUserPermissions.show(_users[selectedUsers[0]], _refresh);
				},

				// ----------------------------------------------------
				onRemoveFromProfilesBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_dialogs.removeProfilesFromUser.show(_getSelectedUsersObject(), _refresh);
				},
				onManageAPIKeysBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_dialogs.manageAPIKeys.show(_getSelectedUsersObject(), _refresh);
				},

				// ----------------------------------------------------
				onDeleteUserBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers() && _getSelectedUsersList()[0] !== utui.login.email) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					var selectedUsers = _getSelectedUsersList();
					_dialogs.deleteUser.show(_users[selectedUsers[0]], _refresh);
				},

				// ----------------------------------------------------
				onAddAccountPermissionsBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageAccount()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_dialogs.addRemoveAccountPermissions.show(_getSelectedUsersObject(), true, _refresh);
				},

				// ----------------------------------------------------
				onRemoveAccountPermissionsBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageAccount()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_dialogs.addRemoveAccountPermissions.show(_getSelectedUsersObject(), false, _refresh);
				},

				// ----------------------------------------------------
				onAddProfilePermissionsBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_dialogs.addRemoveProfilePermissions.show(_getSelectedUsersObject(), true, _refresh);
				},

				// ----------------------------------------------------
				onRemoveProfilePermissionsBtnClick: function() {
					// Verify permission
					if (!utui.permissions.canManageUsers) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_dialogs.addRemoveProfilePermissions.show(_getSelectedUsersObject(), false, _refresh);
				},

				// ----------------------------------------------------
				onCloseBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onRefreshBtnClick: function() {
					_refresh();
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				// Gets the users for the current account or specified profile
				getUsers: function() {
					utui.util.showSpinner();

					var url;
					if (_selectedOption !== utui.login.account) {
						url = _addParamsToURL(utui.service.restapis.USERS_PROFILE, {profile:_selectedOption});
					} else {
						url = _addParamsToURL(utui.service.restapis.USERS_ALL_ACCOUNT);
					}
					utui.service.get(url, null, null, _response.onGetUsersSuccess, _response.onGetUsersError);
				}
			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ----------------------------------------------------
				onGetUsersSuccess: function(data) {
					utui.util.hideSpinner();

					if ($.isEmptyObject(data)) {
						utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.no_users_found'));
					}
					_users = data;

					_render.users();
				},

				// ----------------------------------------------------
				onGetUsersError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_get_users'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function() {
					_clear();
					_render.ui();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.close'),
							click: _eventHandlers.onCloseBtnClick,
							id: _namespace + 'CloseBtn'
						},
						{
							text: localize.t('tiq.dialog.button.refresh'),
							click: _eventHandlers.onRefreshBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'RefreshBtn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.title'), buttons, _$template, {width:925});
					$('#'+_namespace+'RefreshBtn').find('.ui-button-text').prepend('<i class="icon-refresh"></i> ');
				},

				// ----------------------------------------------------
				// Returns the selected profile or null if account is selected
				getSelectedProfile: function() {
					return _selectedOption === utui.login.account ? utui.login.profile : _selectedOption;
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		// ADD NEW USER MODAL
		addUser: function() {
			// Private API
			var _namespace = 'add_user_dialog',
				_$template = utui.ui.dialog.body(),
				_callback,		// Method to call upon success of adding user
				_user,			// User object that is constructed as user selects options
				_profiles,		// List of selected profiles in the profile drop down (select2)
				_canManageAccount,  // If false we do NOT show the account permissions screen
				_canManageUsers,    // If false we do NOT show the profile permissions screen
				_loggedInUser,      // Contains the current logged in user
				_screens,// = [_showEmail, _showAccountPermissions, _showProfileSelect, _showProfilePermissions, _showConfirm],
				_numScreen;

			// --------------------------------------------------------
			function _clear() {
				_user = {profiles:{}};
				_profiles = [];
				_screens = [];
				_numScreen = null;
				_$template.find('.dialog-screen').hide();

				// Only show screen that the user can manage
				_screens.push(_showEmail);
				if (_canManageAccount) {
					_screens.push(_showAccountPermissions);
				}
				if (_canManageUsers) {
					_screens.push(_showProfileSelect);
					_screens.push(_showProfilePermissions);
				}
				// Always show confirm
				_screens.push(_showConfirm);
			}

			// --------------------------------------------------------
			// Validates each screen before displaying the next
			function _showScreen(direction) {
				var num = _numScreen,
					screenID = _$template.find('.dialog-screen:visible').attr('id');

				if (direction === 'next') {
					if (_validate()) {
						_numScreen ++;
					} else {
						return;
					}
				} else if (direction === 'previous') {
					_numScreen --;

				} else {
					_numScreen = 0;
				}

				// Need to skip the profile permissions screen if no profiles were selected
				if (_profiles.length === 0 && (screenID === (_namespace+'_profile_select_screen') || screenID === (_namespace+'_confirm_screen'))) {
					// Don't skip if these apply
					if ((screenID === (_namespace+'_profile_select_screen') && (num > _numScreen)) || (screenID === (_namespace+'_confirm_screen') && !_canManageUsers)) {

					} else {
						_numScreen = (num < _numScreen) ? _numScreen+1 : _numScreen-1;
					}
				}

				// Show the screen if different
				if (num !== _numScreen) {
					// Hide any dialog message
					utui.ui.dialog.message.hide(_namespace);

					// Hide all screens and nav buttons
					_$template.find('.dialog-screen').hide();
					_$template.closest('.ui-dialog').find('.nav-btn').hide();

					_screens[_numScreen]();

					// Show the nav buttons
					if (_numScreen === 0) {
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen < _screens.length-1) {
						$('#' + _namespace + 'PreviousBtn').show();
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen === _screens.length-1) {
						$('#' + _namespace + 'FinishBtn').show();
						$('#' + _namespace + 'PreviousBtn').show();
					}
				}

			}

			// --------------------------------------------------------
			// Validates the user info as well as populates the _user object
			function _validate() {
				var screenID = _$template.find('.dialog-screen:visible').attr('id');

				// Validate email address
				if (screenID === (_namespace+'_email_screen')) {
					// Make sure that the user entered a valid email address
					var $email = $('#'+_namespace+'_email');
					var emailVal = $email.val();

					if (!utui.util.isValidEmail(emailVal)) {
						// If this is an invalid tealium email then show the invalid tealium email message
						if (emailVal.indexOf('@tealium.com') !== -1) {
							utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.1451'));
						} else {
							utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.invalid_email'));
						}

						$email.focus();
						return false;
					}

					// Set the users email
					_user.email = emailVal;
					_$template.find('.username').html(_user.email);

					// Validate the profile select screen
				} else if (screenID === (_namespace+'_profile_select_screen')) {
					// Make sure that the user entered a valid email address
					var $profileList = $('#'+_namespace+'_profile_list'),
						profileOption = $('#'+_namespace+'_profile_options :radio:checked').val();

					if (profileOption === 'profiles') {
						var profiles = $profileList.val();
						if (!$.isArray(profiles) || profiles.length === 0) {
							utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.no_profile_selected'));
							$profileList.focus();
							return false;
						}
					}
				}

				return true;
			}

			// --------------------------------------------------------
			function _showEmail() {
				_$template.find('.notice').hide();
				_$template.find('.dialog-content-footer').hide();
				_$template.find('#'+_namespace+'_email_screen').show();

				// Enable the first field
				_$template.find("input:text:visible:first").focus();
			}

			// --------------------------------------------------------
			function _showAccountPermissions() {
				_$template.find('.notice').hide();
				_$template.find('.dialog-content-footer').show();
				_$template.find('#'+_namespace+'_account_permissions_screen').show();
			}

			// --------------------------------------------------------
			function _showProfileSelect() {
				_$template.find('.notice').hide();
				_$template.find('.dialog-content-footer').hide();
				_$template.find('#'+_namespace+'_profile_select_screen').show();
			}

			// --------------------------------------------------------
			function _showProfilePermissions() {
				_$template.find('.notice').hide();
				_$template.find('.dialog-content-footer').show();

				// Re-render the profile permissions since they may have changed
				_render.profilePermissions();

				_$template.find('#'+_namespace+'_profile_permissions_screen').show();
			}

			// --------------------------------------------------------
			function _showConfirm() {
				_$template.find('.notice').show();
				_$template.find('.dialog-content-footer').show();

				// Re-render the confirmation view
				_render.confirm();

				_$template.find('#'+_namespace+'_confirm_screen').show();
			}

			// --------------------------------------------------------
			// Add the content to the template
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					_render.content();
					_render.email();
					_render.accountPermissions();
					if (_canManageUsers) {
						_render.profileSelect();
						_render.profilePermissions();
					}
					_render.confirm();
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-footer').html(_view.contentFooter());
				},

				// ----------------------------------------------------
				email:function() {
					_$template.find('#'+_namespace+'_email_screen').html(_view.email());
					_bindUI.email();
				},

				// ----------------------------------------------------
				accountPermissions:function() {
					var $context = _$template.find('#'+_namespace+'_account_permissions_screen').html(_view.accountPermissions());
					_bindUI.accountPermissions();

					// Disable the checkboxes that the user does NOT have permissions to assign
					if (!utui.permissions.canManageAccount()) $context.find('input[name="'+utui.permissions.MANAGE_ACCOUNT+'"]').attr('disabled','disabled');
					if (!utui.permissions.canManageAudit()) $context.find('input[name="'+utui.permissions.MANAGE_AUDIT+'"]').attr('disabled','disabled');
					if (!utui.permissions.canCreateProfile()) $context.find('input[name="'+utui.permissions.CREATE_PROFILE+'"]').attr('disabled','disabled');
					if (!utui.permissions.canEditJavascriptExtensions()) $context.find('input[name="'+utui.permissions.EXTENSIONS_JAVASCRIPT+'"]').attr('disabled','disabled');

					// Add tooltips
					_dialogs.shared.addToolTips($context);
				},

				// ----------------------------------------------------
				profileSelect:function() {
					_$template.find('#'+_namespace+'_profile_select_screen').html(_view.profileSelect());
					_bindUI.profileSelect();
				},

				// ----------------------------------------------------
				profilePermissions:function() {
					var $context = _$template.find('#'+_namespace+'_profile_permissions_screen').html(_view.profilePermissions());
					_bindUI.profilePermissions();

					// Update to add all previous permissions
					var $groups = $context.find('.accordion-group');
					$.each($groups, function() {
						var $group = $(this),
							profile = $group.find('input[name="profile"]').val(),
							permissions = _getProfilePermissionsFromUser(_user, profile);

						// Trigger clicked if permissions is present (this will update the badges)
						for (var j=0; j<permissions.length; j++) {
							$group.find('input[value="' + permissions[j] + '"]').trigger('click');
						}

						// Disable checkboxes that the user does NOT have permissions to assign
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_USERS, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_USERS+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_TEMPLATES, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_TEMPLATES+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_SECURE_LABELS, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_SECURE_LABELS+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.SAVE_PROFILE, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.SAVE_PROFILE+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.COPY, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.COPY+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_DEV, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_DEV+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_QA, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_QA+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_PROD, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_PROD+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_DEV, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_DEV+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_QA, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_QA+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_PROD, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_PROD+'"]').attr('disabled','disabled');
					});

					// Add tooltips
					_dialogs.shared.addToolTips($context);
				},

				// ----------------------------------------------------
				confirm:function() {
					var $context = _$template.find('#'+_namespace+'_confirm_screen').html(_view.confirm());

					// Update the account badges
					if (_canManageAccount) {
						_dialogs.shared.updateAccountBadges($context, _user.permissions);
					}

					// Update the profile badges
					if (_profiles.length > 0 && _canManageUsers) {
						_dialogs.shared.updateProfileBadges($context, _user.profiles);
					}
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div id="'+_namespace+'_email_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_account_permissions_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_profile_select_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_profile_permissions_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_confirm_screen" class="dialog-screen"></div>';

					return v;
				},

				// ----------------------------------------------------
				contentFooter: function() {
					var v = '',
						email = '<span class="username"></span>';

					v += '<div style="width: 100%; text-align: center; margin-bottom: 4px; display: none;" class="notice">' + localize.t('tiq.users.success.email_sent', {email:email}) + '</span></div>';
					v += _dialogs.shared.view.iconLegend(_namespace);

					return v;
				},

				// ----------------------------------------------------
				email: function() {
					var v = '',
						headerContent,
						user = utui.users.getCurrentUser();

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.create.title') + '</h1>';
					headerContent += '<p class="headline">' + localize.t('tiq.users.create.header') + '</p>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);

					v += '<div class="container-fluid">';
					v += '	<div class="row-fluid">';
					v += '		<div class="span12">';
					v += '			<div class="wizardStepLegend offset1">';
					v += '				<div class="wizardStep wizardStepActive">';
					v += '					<div class="wizardStepCount">1</div>';
					v += '					<div class="wizardStepTitle">' + localize.t('tiq.users.create.step1.title') + '</div>';
					v += '				</div>';
					v += '				<div class="wizardStep wizardStepOptional">';
					v += '					<div class="wizardStepCount">2</div>';
					v += '					<div class="wizardStepTitle">' + localize.t('tiq.users.create.step2.title') + '</div>';
					v += '					<div class="wizardStepSubTitle">' + localize.t('tiq.users.create.step2.desc') + '</div>';
					v += '				</div>';
					v += '				<div class="wizardStep wizardStepOptional">';
					v += '					<div class="wizardStepCount">3</div>';
					v += '					<div class="wizardStepTitle">' + localize.t('tiq.users.create.step3.title') + '</div>';
					v += '					<div class="wizardStepSubTitle">' + localize.t('tiq.users.create.step3.desc') + '</div>';
					v += '				</div>';
					v += '				<div class="wizardStep wizardStepOptional">';
					v += '					<div class="wizardStepCount">4</div>';
					v += '					<div class="wizardStepTitle">' + localize.t('tiq.users.create.step4.title') + '</div>';
					v += '					<div class="wizardStepSubTitle">' + localize.t('tiq.users.create.step4.desc') + '</div>';
					v += '				</div>';
					v += '				<div class="wizardStep">';
					v += '					<div class="wizardStepCount">5</div>';
					v += '					<div class="wizardStepTitle">' + localize.t('tiq.users.create.step5.title') + '</div>';
					v += '				</div>';
					v += '			</div>';
					v += '          <hr class="wizardDivider">';
					v += '          <div style="margin:0 0 20px 20px;"><strong>' + localize.t('tiq.users.create.begin.title') + '</strong></div>';
					v += '			<div class="form-horizontal">';
					v += '				<div class="control-group">';
					v += '					<label class="control-label">' + localize.t('tiq.users.create.begin.email') + '</label>';
					v += '					<div class="controls">';
					v += '						<input type="text" id="'+_namespace+'_email" class="span7" placeholder="john.doe@tealium.com" />';
					v += '					</div>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				accountPermissions: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.create.account.title', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, true, 'account', [utui.login.account]);

					return v;
				},

				// ----------------------------------------------------
				profileSelect: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.create.profile_select.title', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);

					v += '<div class="container-fluid assignprofile-container">';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1">';
					v += '			<div id="'+_namespace+'_profile_options">';
					v += '				<h2>' + localize.t('tiq.users.create.profile_select.options') + '</h2>';

					// Only show this option if the user has the wildcard profile
					if (_loggedInUser.profiles['*']) {
						v += '				<div class="control-group">';
						v += '					<input type="radio" value="all" name="assignprofile-profilegroup" id="' + _namespace + '-option-all" />';
						v += '					<label for="' + _namespace + '-option-all">';

						if (_hasWildcardProfile()) {
							v += '						<strong>' + localize.t('tiq.users.create.profile_select.wildcard.title') + '</strong><br />';
							v += '						<span class="desc">' + localize.t('tiq.users.create.profile_select.wildcard.desc') + '</span>';
						} else {
							v += '						<strong>' + localize.t('tiq.users.create.profile_select.all_profiles.title') + '</strong><br />';
							v += '						<span class="desc">' + localize.t('tiq.users.create.profile_select.all_profiles.desc') + '</span>';
						}

						v += '					</label>';
						v += '				</div>';
					}

					v += '				<div class="control-group">';
					v += '					<input type="radio" value="profiles" name="assignprofile-profilegroup" id="' + _namespace + '-option-profiles" checked="checked" />';
					v += '					<label for="' + _namespace + '-option-profiles">';
					v += '						<strong>' + localize.t('tiq.users.create.profile_select.select_profiles.title') + '</strong><br />';
					v += '						<span class="desc">' + localize.t('tiq.users.create.profile_select.select_profiles.desc') + '</span>';
					v += '					</label>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1" style="margin-top:10px;">';
					v += '			<div id="'+_namespace+'_profile_list_container">';
					v += '				<h2>' + localize.t('tiq.users.create.profile_select.profile_list') + '</h2>';
					v += '				<select id="'+_namespace+'_profile_list" multiple>';

					// populate the profiles from the current user
					var me = utui.users.getCurrentUser();
					v += _dialogs.shared.view.getProfileListOptions(me, _getProfilesFromUser(me));

					v += '				</select>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				profilePermissions: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.create.profile.title', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, true, 'profile', _profiles);

					return v;
				},

				// ----------------------------------------------------
				confirm: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.create.confirm', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					if (_canManageAccount) {
						v += _dialogs.shared.view.permissionsContainer(_namespace, false, 'account', [utui.login.account]);
					}
					if (_profiles.length > 0 && _canManageUsers) {
						v += _dialogs.shared.view.permissionsContainer(_namespace, false, 'profile', _profiles);
					}

					return v;
				}
			}

			// --------------------------------------------------------
			// Binds the UI events
			var _bindUI = {
				// --------------------------------------------------------
				email: function() {
					// Force lowercase on blur
					_$template.find('#'+_namespace+'_email').safeOn('blur', _eventHandlers.onEmailBlur);
				},

				// --------------------------------------------------------
				accountPermissions: function() {
					// Add functionality to Accordion
					var $accordion = _$template.find('.account-permissions-accordion');
					$accordion.find('.accordion-toggle').safeOn('click', _dialogs.shared.eventHandlers.onAccordionClick);
					$accordion.find('.permission-checkbox').safeOn('change', _eventHandlers.onAccountPermissionsChange);
					$accordion.find('.select-all-permissions').safeOn('change', _eventHandlers.onSelectAllPermissionsChange);

					// Open the accordion
					_$template.find('.account-permissions-accordion .accordion-toggle').trigger('click');
				},

				// --------------------------------------------------------
				profileSelect: function() {
					_$template.find('#'+_namespace+'_profile_options :radio').safeOn('change', _eventHandlers.onProfileOptionsChange);

					var $profileList = _$template.find('#'+_namespace+'_profile_list');

					$profileList.select2({
						placeholder: localize.t('tiq.users.create.profile_select.select_profiles.title'),
						closeOnSelect: false,
						minimumResultsForSearch: -1
					});

					$profileList.safeOn('change', _eventHandlers.onProfileListChange);
					$profileList.safeOn('select2-selecting', _dialogs.shared.eventHandlers.onProfileListSelect);

					// Add the selected profile as the default value
					var selectedProfile = _dialogs.userManager.getSelectedProfile();
					if (selectedProfile) {
						_$template.find('#'+_namespace+'_profile_list').select2('val',selectedProfile).trigger('change');
					}
				},

				// --------------------------------------------------------
				profilePermissions: function() {
					// Add functionality to Accordion
					var $accordion = _$template.find('.profile-permissions-accordion');
					$accordion.find('.accordion-toggle').safeOn('click', _dialogs.shared.eventHandlers.onAccordionClick);
					$accordion.find('.permission-checkbox').safeOn('change', _eventHandlers.onProfilePermissionsChange);
					$accordion.find('.select-all-permissions').safeOn('change', _eventHandlers.onSelectAllPermissionsChange);
					$accordion.find('.apply-permissions a').safeOn('click', _eventHandlers.onApplyPermissionsToSelectedProfilesClick);

					// Open the first accordion
					_$template.find('.profile-permissions-accordion .accordion-toggle').first().trigger('click');
				}
			}

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				// Force lowercase on blur
				onEmailBlur: function() {
					var val = $(this).val().toLowerCase();
					$(this).val(val);
				},

				// ----------------------------------------------------
				// Enables/Disables the profile select list depending on which option is selected
				onProfileOptionsChange: function() {
					var option = $(this).val(),
						$profileList = $('#'+_namespace+'_profile_list'),
						enabled = false;

					if (option === 'all') {
						_user.profiles = {};
						_user.profiles['*'] = {
							profile:'*',
							permissions:[]
						}

						_profiles = ['*'];

					} else if (option === 'none') {
						_user.profiles = {};

						_profiles = [];

					} else {
						delete _user.profiles['*'];
						enabled = true;
					}
					$profileList.select2('val', _profiles);
					$profileList.select2('enable', enabled);
				},

				// ----------------------------------------------------
				onProfileListChange: function(event) {
					var profiles = $(this).val() || [];

					if (event.removed) {
						delete _user.profiles[event.removed.text];

					} else {
						var profile = event.added ? event.added.text : profiles[0];
						if (!_user.profiles[profile]) {
							_user.profiles[profile] = {profile:profile, permissions:[]};
						}
					}

					// Sort the profiles
					_sortList(profiles);
					_profiles = profiles;
				},

				// ----------------------------------------------------
				onAccountPermissionsChange: function() {
					_user.permissions = _dialogs.shared.onAccountPermissionsChange($(this));
				},

				// ----------------------------------------------------
				onProfilePermissionsChange: function() {
					_dialogs.shared.onProfilesPermissionsChange($(this), _user.profiles);
				},

				// ----------------------------------------------------
				onApplyPermissionsToSelectedProfilesClick: function() {
					_dialogs.shared.onApplyPermissionsToSelectedProfiles(this, _user.profiles);
				},

				// ----------------------------------------------------
				onSelectAllPermissionsChange: function() {
					_dialogs.shared.onSelectAllPermissionsChange($(this));
				},

				// ----------------------------------------------------
				onFinishBtnClick: function() {
					_request.addUser();
				},

				// ----------------------------------------------------
				onNextBtnClick: function() {
					_showScreen('next');
				},

				// ----------------------------------------------------
				onPreviousBtnClick: function() {
					_showScreen('previous');
				},

				// ----------------------------------------------------
				onCancelBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				addUser: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.USERS_ALL_ACCOUNT);
					_user.account = utui.login.account;
					utui.service.post(url, JSON.stringify(_user), utui.service.options.JSON, _response.onAddUserSuccess, _response.onAddUserError);
				}
			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ----------------------------------------------------
				onAddUserSuccess: function(data){
					utui.util.hideSpinner();

					utui.util.pubsub.publish(utui.constants.users.CREATED, {action:utui.constants.users.CREATED});

					if (_callback) {
						_callback(_user);
					}
					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onAddUserError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_add_user'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(callback) {
					_callback = callback;
					// Cache the permissions since we check in a few places
					_canManageAccount = utui.permissions.canManageAccount();
					_canManageUsers = utui.permissions.canManageUsers();

					// Give the logged in user wildcard profile if they don't have just so they can use the All Profiles option
					_loggedInUser = _dialogs.shared.assignPermisionsAfterExclusions(utui.users.getCurrentUser());

					_clear();
					_render.ui();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.finish'),
							click: _eventHandlers.onFinishBtnClick,
							id: _namespace + 'FinishBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: localize.t('tiq.dialog.button.next'),
							click: _eventHandlers.onNextBtnClick,
							id: _namespace + 'NextBtn',
							class: 'nav-btn'
						},
						{
							text: localize.t('tiq.dialog.button.previous'),
							click: _eventHandlers.onPreviousBtnClick,
							id: _namespace + 'PreviousBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CancelBtn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.create.dialog_title'), buttons, _$template, {width:800});

					// Show the first screen of the flow
					_showScreen();
				}
			};

			return _public;
		}(),

		// ------------------------------------------------------------
		// EDIT USER
		editUser: function() {
			// Private API
			var _namespace = 'edit_user_dialog',
				_$template = utui.ui.dialog.body(false, true),
				_user,              // User we are editing
				_callback,          // Method to call upon success of editing user
				_profiles = [],
				_passwordAttr = {
					password_length: 8,	// num of characters
					numeric_characters: 1,	// num of numbers
					upper_characters: 1,	// num of uppercase
					special_characters: 1,	// num of special characters
					password_history: 1 // pw history restriction
				},
				_requirementExclusions = {password_history:1, mfa:1},
				_passwordAttrQty = 0;

			// --------------------------------------------------------
			function _clear() {
				_profiles = [];
				_passwordAttrQty = 0;
				_highlightNav();
				_$template.find('.dialog-screen').hide();
			}

			// --------------------------------------------------------
			function _highlightNav($el) {
				_$template.find('.dialog-context-nav li').removeClass('selected');
				if ($el) {
					$el.parent().addClass('selected');
				}
			}

			// ----------------------------------------------------
			function _isRetypePasswordMatched() {
				var $newPasswordField = $('#' + _namespace + '_newPasswordField');
				var $newPasswordConfirmField = $('#' + _namespace + '_newPasswordConfirmField');

				if ($newPasswordField.val() == $newPasswordConfirmField.val()) {
					$('#' + _namespace + '_passMatchedNotification').html('');
					return true;
				}

				if ($newPasswordConfirmField.val() == '') {
					$('#' + _namespace + '_passMatchedNotification').html('')
					return false;
				}

				if ($newPasswordField.val().length == $newPasswordConfirmField.val().length) {
					$('#' + _namespace + '_passMatchedNotification').html(localize.t('tiq.users.error.password_match'))
					return false;
				}

				return false;
			}

			// ----------------------------------------------------
			// This checks to see whether the requirements are available
			function _initRequirements() {
				var count = 1; //1 is default due to mandatory whitespace requirement

				for (var key in _passwordAttr) {
					// exclude password history and mfa from meter
					if (_passwordAttr[key] == 0
						|| typeof _requirementExclusions[key] != 'undefined') {
						continue;
					}
					count++;
				}

				_passwordAttrQty = count;
			}

			// ----------------------------------------------------
			// Checks to see whether value of attribute exists
			// @param (attr) string - object property name
			function _isActiveRequirement(attr) {
				var attr = attr || '';

				if (_passwordAttr[attr] && _passwordAttr[attr] > 0) {
					return true;
				}
				return false;
			}

			// ----------------------------------------------------
			// @param (pw) string - typed password
			function _validatePasswordOnKey(pw) {
				var passwordRegEx = /^[a-zA-Z0-9@#$%\^&*()\-_=+'"\[\]{}|;:<>,.\/?! ]+$/,
					$newPasswordField = $('#'+_namespace+'_newPasswordField'),
					$newPasswordConfirmField = $('#'+_namespace+'_newPasswordConfirmField'),
					$pwReqLength = $('#'+_namespace+'_pwReqLength'),
					$pwReqNumLength = $('#'+_namespace+'_pwReqNumLength'),
					$pwReqSpecial = $('#'+_namespace+'_pwReqSpecial'),
					$pwReqUppercase = $('#'+_namespace+'_pwReqUppercase'),
					$pwNoWhitespace = $('#'+_namespace+'_pwNoWhitespace'),
					$pwLength6 = $('#'+_namespace+'_pwLength6'),
					$pwValidChars = $('#'+_namespace+'_pwValidChars'),
					setRequirements = _passwordAttrQty,
					metRequirements = 0,
					PROGRESS_BAR_WIDTH = 0;

				// Set initial requirement as not met
				$('#' + _namespace + '_passwordMeterStatus').html(localize.t('tiq.users.error.not_met'));

				// Incremenet the setRequirements to account for the regular expression test performed at the end.
				setRequirements ++;

				// If password is blank, immediately set requirements to 0.
				if (pw === '') {
					$('#' + _namespace + '_requirementList').find('li').removeClass('requirement-met').addClass('requirement-not-met');
					$('#' + _namespace + '_requirementList').find('i').removeClass('icon-ok').addClass('icon-remove');
					$('#' + _namespace + '_passwordMeter').find('.bar').css('width', PROGRESS_BAR_WIDTH + '%');
					return false;
				}

				// ----------------------------------------------------
				function isCharLength(pw) {
					if (pw.length >= _passwordAttr.password_length && _passwordAttr.password_length != 0) {
						return true;
					}
					return false;
				}

				// ----------------------------------------------------
				function isCharNumLength(pw) {
					var num = pw.match(/\d+/g);
					if (num && num.toString().length >= _passwordAttr.numeric_characters && _passwordAttr.numeric_characters != 0) {
						return true
					}
					// USE .test METHOD
					return false;
				}

				// ----------------------------------------------------
				function isCharUppercase(pw) {
					var uppercaseCharLength = 0;
					var letters = XRegExp('^\\p{L}'); ///^[a-zA-Z]/;

					if (_passwordAttr.upper_characters !== 0) {
						for (var i = pw.length - 1; i >= 0; i--) {
							if (letters.exec(pw[i])) {
								if (pw[i] == pw[i].toUpperCase() && isNaN(pw[i])) {
									uppercaseCharLength++;
								}
							}
						}
						if (uppercaseCharLength >= _passwordAttr.upper_characters) {
							return true;
						}
					}

					return false;
				}

				// ----------------------------------------------------
				function isCharSpecial(pw) {
					var specialChar = "@#$%^&*()-_=+'\"[]{}|;:<>,./?! ";
					var specialCharLength = 0;

					if (_passwordAttr.special_characters !== 0) {
						for (var i = pw.length - 1; i >= 0; i--) {
							if (specialChar.indexOf(pw[i]) != -1) {
								specialCharLength++;
							}
						}
						;
						if (specialCharLength >= _passwordAttr.special_characters) {
							return true;
						}
					}

					return false;
				}

				// ----------------------------------------------------
				function isCharWhitespace(pw) {
					var whitespace = ' ';
					var whitespaceLength = 0;

					for (var i = pw.length - 1; i >= 0; i--) {
						if (whitespace.indexOf(pw[i]) != -1) {
							whitespaceLength++;
						}
					}

					if (whitespaceLength) {
						return false;
					}
					return true;
				}

				// ----------------------------------------------------
				function isCharAllowed(pw) {
					return passwordRegEx.test(pw);
				}

				// ----------------------------------------------------
				function validateReq($field) {
					$field.removeClass('requirement-not-met').addClass('requirement-met');
					$field.find('i').removeClass('icon-remove').addClass('icon-ok');
					metRequirements++;
					PROGRESS_BAR_WIDTH = metRequirements / setRequirements * 100;
				};

				// ----------------------------------------------------
				function InvalidateReq($field) {
					$field.removeClass('requirement-met').addClass('requirement-not-met');
					$field.find('i').removeClass('icon-ok').addClass('icon-remove');
				};

				(isCharLength(pw)) ? validateReq($pwReqLength) : InvalidateReq($pwReqLength);
				(isCharNumLength(pw)) ? validateReq($pwReqNumLength) : InvalidateReq($pwReqNumLength);
				(isCharSpecial(pw)) ? validateReq($pwReqSpecial) : InvalidateReq($pwReqSpecial);
				(isCharUppercase(pw)) ? validateReq($pwReqUppercase) : InvalidateReq($pwReqUppercase);
				(isCharWhitespace(pw)) ? validateReq($pwNoWhitespace) : InvalidateReq($pwNoWhitespace);
				(isCharAllowed(pw)) ? validateReq($pwValidChars) : InvalidateReq($pwValidChars);

				if (metRequirements == setRequirements) {
					$('#' + _namespace + '_passwordMeterStatus').html(localize.t('tiq.users.success.met'));
					$('#' + _namespace + '_passwordMeter').find('.bar').removeClass('bar-danger').addClass('bar-success');
				} else {
					$('#' + _namespace + '_passwordMeterStatus').html(localize.t('tiq.users.error.not_met'));
					$('#' + _namespace + '_passwordMeter').find('.bar').removeClass('bar-success').addClass('bar-danger');
				}

				// Apply width
				$('#' + _namespace + '_passwordMeter').find('.bar').css('width', PROGRESS_BAR_WIDTH + '%');

				if (metRequirements == setRequirements) {
					return true;
				}

				return false;
			}

			// --------------------------------------------------------
			// Add the content to the template
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					_render.context();
					_render.content();
					_render.userOverview();
					// Lazy load the other screen to speed up the initial load

					// Scroll to the top of the scrollable areas
					_$template.find('.dialog-content-body').scrollTop(0);
					_$template.find('.utui-table-body').scrollTop(0);
				},

				// ----------------------------------------------------
				context: function() {
					_$template.find('.dialog-context-body').html(_view.contextBody());
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-header').html(_view.contentHeader());
					_$template.find('.dialog-content-body').html(_view.contentBody()).css({'height':'425px'});
					_$template.find('.dialog-content-footer').html(_view.contentFooter());

					_bindUI.global();
				},

				// ----------------------------------------------------
				userOverview: function() {
					_$template.find('#' + _namespace + '_user_overview_headline').html(_view.userOverviewHeadline());
					var $context = _$template.find('#' + _namespace + '_user_overview_screen').html(_view.userOverview());
					_bindUI.userOverview();

					// Update the account badges
					_dialogs.shared.updateAccountBadges($context, _user.permissions, true);
          
          var id = 'user-overview__js-promotion_permissions_tooltip';
          $('#'+id).attr({'title':localize.t('tiq.users.badge_js_promotion')});
          var customTooltipObj = {};
          customTooltipObj[id] = { gravity:'nw'};
          
          utui.util.addTooltip(customTooltipObj);
					
					// Update the profile badges
					if (_profiles.length > 0) {
						var profilesObj = _getProfilesWithPermissionsFromUser(_user);
						_dialogs.shared.updateProfileBadges($context, profilesObj, true);
					}
				},

				// ----------------------------------------------------
				changePassword: function() {
					_$template.find('#' + _namespace + '_change_password_headline').html(_view.changePasswordHeadline());
					_$template.find('#' + _namespace + '_change_password_screen').html(_view.changePassword());
					_bindUI.changePassword();
					_bindUI.fields();
					_bindUI.tooltip();
				},

				// ----------------------------------------------------
				mfaSettings: function () {
					_$template.find('#' + _namespace + '_mfa_settings_headline').html(_view.mfaSettingsHeadline());
					_$template.find('#' + _namespace + '_mfa_settings_screen').html(_view.mfaSettings());
					_bindUI.mfaSettings();
				},

				//----------------------------------------------------
				apikeySettings: function () {
					_$template.find('#' + _namespace + '_apikey_settings_headline').html(_view.apikeySettingsHeadline());
					_$template.find('#' + _namespace + '_apikey_settings_screen').html(_view.apikeySettings());
					_bindUI.apikeySettings();
				}
      }

			

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contextBody: function() {
					var v = '',
						isUpdatingSelf = _user.email === utui.login.email;

					v += '<div class="dialog-context-title">' + localize.t('tiq.users.edit_user.context.title') + '</div>';

					v += '<ul class="dialog-context-nav">';
					v += '	<li><a id="'+_namespace+'_user_overview_menu" href="#">' + localize.t('tiq.users.edit_user.context.user_overview') + '</a></li>';

					// You can only change your own password
					if (!utui.account.sso_isSAML() && isUpdatingSelf) {
						v += '	<li><a id="'+_namespace+'_change_password_menu" href="#">' + localize.t('tiq.users.edit_user.context.change_password') + '</a></li>';
					}

					// Can only reset other user's MFA setting
					if (!utui.account.sso_isSAML() && !isUpdatingSelf && utui.permissions.canChangePassword) {
						v += '	<li><a id="'+_namespace+'_mfa_settings_menu" href="#">' + localize.t('tiq.users.edit_user.context.mfa_settings') + '</a></li>';
					}

					v += '	<li><a id="'+_namespace+'_apikey_settings_menu" href="#">' + localize.t('tiq.users.edit_user.context.api_key') + '</a></li>';

					v += '</ul>';

					return v;
				},

				// ----------------------------------------------------
				contentHeader: function() {
					var v = '';

					v += '<div id="'+_namespace+'_user_overview_headline" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_change_password_headline" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_mfa_settings_headline" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_apikey_settings_headline" class="dialog-screen"></div>';

					return v;
				},

				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div id="'+_namespace+'_user_overview_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_change_password_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_mfa_settings_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_apikey_settings_screen" class="dialog-screen"></div>';

					return v;
				},

				// ----------------------------------------------------
				contentFooter: function() {
					var v = '';

					v += _dialogs.shared.view.iconLegend(_namespace);

					return v;
				},

				// ----------------------------------------------------
				userOverviewHeadline: function() {
					var v = '';

					v += '<div class="dialog-content-headline valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '			<div class="span6">';
					v += '				<div class="dialog-content-headline-title">' + localize.t('tiq.users.edit_user.overview.user_overview') + '</div>';
					v += '			</div>';
					v += '			<div class="span6 alignright">';

					if (utui.login.email === _user.email) {
						v += '				<a id="'+_namespace+'_edit_user_profile_btn" class="btn">' + localize.t('tiq.users.edit_user.overview.edit_user_profile') + '</a>';
					}

					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				userOverview: function() {
					var v = '';

					v += '<div class="edituser-container" id="edituser_profile">';

					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '			<div class="span2">';
					v += '				<div class="edituser-information-avatar">';

					v += _getUserImage(_user, 'large');

					v += '					</div>';
					v += '				</div>';
					v += '				<div class="span10">';
					v += '					<div class="edituser-information-container">';
					v += _view.userProfile();
					v += '                  </div>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					v += _dialogs.shared.view.permissionsContainer(_namespace, false, "account", [utui.login.account]);

					if (_profiles.length > 0) {
						v += _dialogs.shared.view.permissionsContainer(_namespace, false, "profile", _profiles);
					}

					return v;
				},

				// ----------------------------------------------------
				userProfile: function() {
					var v = '';

					v += '<div class="user-fullname">' + (_getUserName(_user) || localize.t('tiq.users.tealium_user')) + '</div>';
					v += '<div class="user-title">' + (_user.title || '') + '</div>';
					v += '<div class="user-email">' + localize.t('tiq.users.edit_user.email') + ' <span class="blue">' + _user.email + '</span></div>';
					v += '<div class="user-primary-account">' + localize.t('tiq.users.edit_user.primary_account') + ' <span class="blue">' + (_user.primary_account || '') + '</span></div>';

					return v;
				},

				// ----------------------------------------------------
				userProfileEdit: function() {
					var v = '';

					v += '<h3>' + localize.t('tiq.users.edit_user.overview.user_info') + '</h3>';
					v += '<p class="edituser-linkedin">' + localize.t('tiq.users.edit_user.overview.import_linkedin') + ' <script type="IN/Login"></script></p>';
					v += '<ul class="edituser-listing">';
					v += '  <li><label class="options-label">' + localize.t('tiq.users.edit_user.overview.first_name') + '</label><input type="text" id="user-first-name" class="options-field" value="' + (_user.first_name || '') + '" maxlength="50" /></li>';
					v += '  <li><label class="options-label">' + localize.t('tiq.users.edit_user.overview.last_name') + '</label><input type="text" id="user-last-name" class="options-field" value="' + (_user.last_name || '') + '" maxlength="50" /></li>';
					v += '  <li><label class="options-label">' + localize.t('tiq.users.edit_user.overview.title') + '</label><input type="text" id ="user-title" class="options-field" value="' + (_user.title || '') + '" maxlength="50" /></li>';
					v += '  <li><label class="options-label">' + localize.t('tiq.users.edit_user.overview.email') + '</label><input type="text" class="options-field" value="' + _user.email + '" disabled="disabled" /></li>';
					v += '</ul>';

					v += '<hr />';
					v += '<button id="'+_namespace+'_cancel_user_info_btn" class="btn pull-left" type="button">' + localize.t('tiq.users.edit_user.overview.cancel') + '</button>';
					v += '<button id="'+_namespace+'_save_user_info_btn" class="btn pull-right" type="button">' + localize.t('tiq.users.edit_user.overview.save_info') + '</button>';

					return v;
				},

				// ----------------------------------------------------
				changePasswordHeadline: function() {
					var v = '';

					v += '<div class="dialog-content-headline valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '			<div class="span12">';
					v += '				<div class="dialog-content-headline-title">' + localize.t('tiq.users.edit_user.password.title') + '</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				mfaSettingsHeadline: function () {
					var v = '';

					v += '<div class="dialog-content-headline valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '			<div class="span12">';
					v += '				<div class="dialog-content-headline-title">' + localize.t('tiq.users.edit_user.mfa.title') + '</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				apikeySettingsHeadline: function () {
					var v = '';

					v += '<div class="dialog-content-headline valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '			<div class="span12">';
					v += '				<div class="dialog-content-headline-title">' + localize.t('tiq.users.edit_user.apikey.title') + '</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				changePassword: function() {
					var v = '',
						isUpdatingAnotherUser = _user.email !== utui.login.email,
						userName = _getUserName(_user) || _user.email;

					v += '<div class="dialog-content-fullpanel valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';

					v += '			<div id="' + _namespace + '_passwordConfigureSubpanel" class="span5" style="padding-top: 15px; vertical-align:top;">';
					v += '				<div class="form-horizontal">';
					v += '					<div class="control-group">';

					// If you are not you then change wording
					if (isUpdatingAnotherUser) {
						v += '						<label class="control-label">' + localize.t('tiq.users.edit_user.password.your_current_password') + '</label>';
					} else {
						v += '						<label class="control-label">' + localize.t('tiq.users.edit_user.password.current_password') + '</label>';
					}

					v += '						<div class="controls">';
					v += '							<input type="password" id="' + _namespace + '_oldPasswordField">';
					v += '						</div>';
					v += '					</div>';
					v += '					<div class="control-group">';
					v += '						<label class="control-label">' + localize.t('tiq.users.edit_user.password.new_password') + '</label>';
					v += '						<div class="controls">';
					v += '							<input type="password" id="' + _namespace + '_newPasswordField">';
					v += '						</div>';
					v += '					</div>';
					v += '					<div class="control-group">';
					v += '						<label class="control-label">' + localize.t('tiq.users.edit_user.password.confirm_new') + '</label>';
					v += '						<div class="controls">';
					v += '							<input type="password" id="' + _namespace + '_newPasswordConfirmField">';
					v += '							<div id="' + _namespace + '_passMatchedNotification"></div>';
					v += '						</div>';
					v += '						<div class="controls">';
					v += '							<input type="checkbox" id="' + _namespace + '_showPasswordChkbox">';
					v += '							<label for="' + _namespace + '_showPasswordChkbox">Show Password</label>';
					v += '						</div>';
					v += '					</div>';

					v += '					<div class="controls">';
					v += '						<a id="'+_namespace+'_change_password_btn" class="btn ui-state-disabled">' + localize.t('tiq.users.edit_user.password.title') + '</a>';
					v += '					</div>';

					v += '				</div>';
					v += '			</div>';

					v += '<div class="span1"></div>';

					v += '			<div id="' + _namespace + '_passwordMeterSubpanel" class="span6">';

					if (isUpdatingAnotherUser) {
						v += '				<p>' + localize.t('tiq.users.edit_user.password.before_you_change', {username:'<strong'> + userName + '\'s</strong>'}) + '</p>';
					}

					v += '              <p><div id="'+_namespace+'_passwordStrength">' + localize.t('tiq.users.edit_user.password.password_requirement') + ' <span id="'+_namespace+'_passwordMeterStatus">' + localize.t('tiq.users.error.not_met') + '</span></div></p>';
					v += '              <div id="'+_namespace+'_passwordMeter" class="progress progress-striped active">';
					v += '                  <div class="bar bar-danger"></div>';
					v += '              </div>';
					v += '              <div id="'+_namespace+'_passwordRequirement">';
					v += '                  <div id="'+_namespace+'_requirementListContainer">';
					v += '                      <p>' + localize.t('tiq.users.edit_user.password.criteria') + '</p>';
					v += '                      <ul id="'+_namespace+'_requirementList">';

					if(_isActiveRequirement('password_length')) {
						v += '<li id="'+_namespace+'_pwReqLength" class="requirement-not-met"><i class="icon-remove"></i>' + localize.t('tiq.users.edit_user.password.minimum_password_length', {chars:_passwordAttr.password_length}) + '</li>';
					}
					if(_isActiveRequirement('numeric_characters')) {
						v += '<li id="'+_namespace+'_pwReqNumLength" class="requirement-not-met"><i class="icon-remove"></i>' + localize.t('tiq.users.edit_user.password.minimum_numeric_chars', {count:_passwordAttr.numeric_characters}) + '</li>';
					}
					if(_isActiveRequirement('upper_characters')) {
						v += '<li id="'+_namespace+'_pwReqUppercase" class="requirement-not-met"><i class="icon-remove"></i>' + localize.t('tiq.users.edit_user.password.minimum_upper_chars', {count:_passwordAttr.upper_characters}) + '</li>';
					}
					if(_isActiveRequirement('special_characters')) {
						v += '<li id="'+_namespace+'_pwReqSpecial" class="requirement-not-met"><i class="icon-remove"></i>' + localize.t('tiq.users.edit_user.password.minimum_special_chars', {count:_passwordAttr.special_characters}) + '</li>';
					}
					v += '<li id="'+_namespace+'_pwNoWhitespace" class="requirement-not-met"><i class="icon-remove"></i>' + localize.t('tiq.users.edit_user.password.no_whitespace_chars') + '</li>';
					if(_isActiveRequirement('password_history') && _passwordAttr.password_history > 1) {
						v += '<li id="'+_namespace+'_pwHistory" class="requirement-not-met">' + localize.t('tiq.users.edit_user.password.previous_password', {count:_passwordAttr.password_history}) + '</li>';
					}

					v += '                        <li id="'+_namespace+'_pwValidChars" class="requirement-not-met"><i class="icon-remove"></i>' + localize.t('tiq.users.edit_user.password.only_valid_special_chars') + ' <div id="'+_namespace+'_pwValidChars_toolip" class="dialog-info-icon" title="' + localize.t('tiq.users.edit_user.password.special_chars') + '"><a href="#" class="icon-question-sign"></a></div></li>';

					v += '                      </ul>';
					v += '                </div>';
					v += '          </div>';

					v += '			</div>';

					v += '		</div>';
					v += '	</div>';

					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				mfaSettings: function() {
					var v = '';

					v += '<div class="dialog-content-fullpanel valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid" style="padding-top: 15px;">';
					v += '			<div class="span12">' + localize.t('tiq.users.edit_user.mfa.description') + '</div>';
					v += '		</div>';
					v += '		<div class="row-fluid" style="padding-top: 15px;">';
					v += '			<div class="span12">';
					v += '				<button id="'+_namespace+'_reset_mfa_token_btn" class="btn">' + localize.t('tiq.users.edit_user.mfa.reset_mfa_token') + '</button>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				apikeySettings: function() {
					var v = '';

					v += '<div class="dialog-content-fullpanel valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid" style="padding-top: 15px;">';
					v += '			<div class="span12">' + localize.t('tiq.users.edit_user.apikey.description', {
						link : '<a href="javascript:;" onclick="utui.help.openCommunityLink(\'' + common.community.api_v2_getting_started + '\'); return false;" class="learnMore">'+ localize.t('tiq.users.edit_user.apikey.api_doc') + '</a>'
          }) + '</div>';
					v += '		</div>';
					if (_user.email !== utui.login.email) {
            v += '		<div class="row-fluid" style="padding-top: 15px;">';
            v += '      <div><span class="bold">' + localize.t('tiq.users.edit_user.email') + '</span>&nbsp;<span class="blue">' + _user.email + '</span></div>';
            v += '		</div>';
          }
					v += '		<div class="row-fluid" style="padding-top: 15px;">';
					v += '			<div class="span12"><span class="bold">' + localize.t('tiq.users.edit_user.apikey.status') + ':</span>&nbsp;<span id="'+_namespace+'_api_status"></span></div>';
					v += '		</div>';
					v += '		<div class="row-fluid" style="padding-top: 15px;">';
					v += '			<div class="span12">';
					v += '				<button id="'+_namespace+'_apikey_generate_btn" class="btn">' + localize.t('tiq.users.edit_user.apikey.generate_key') + '</button>';
					v += '				<button id="'+_namespace+'_apikey_reset_btn" class="btn">' + localize.t('tiq.users.edit_user.apikey.reset_key') + '</button>';
					v += '				<button id="'+_namespace+'_apikey_revoke_btn" class="btn">' + localize.t('tiq.users.edit_user.apikey.revoke_key') + '</button>';
					v += '				<button id="'+_namespace+'_apikey_auth_btn" class="btn">' + localize.t('tiq.users.edit_user.apikey.authorize') + '</button>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				}
			};

			// --------------------------------------------------------
			// Binds the UI events
			var _bindUI = {
				// ----------------------------------------------------
				global: function() {
					// Bind all the buttons within the context view
					_$template.find('#'+_namespace+'_user_overview_menu').safeOn('click', _eventHandlers.onUserOverviewMenuClick);
					_$template.find('#'+_namespace+'_change_password_menu').safeOn('click', _eventHandlers.onChangePasswordMenuClick);
					_$template.find('#'+_namespace+'_mfa_settings_menu').safeOn('click', _eventHandlers.onMFASettingsMenuClick);
					_$template.find('#'+_namespace+'_apikey_settings_menu').safeOn('click', _eventHandlers.onApiKeyMenuClick);
				},

				// --------------------------------------------------------
				userOverview: function() {
					_$template.find('#'+_namespace+'_user_overview_menu').trigger('click');
					_$template.find('#'+_namespace+'_edit_user_profile_btn').safeOn('click', _eventHandlers.onEditUserProfileBtnClick);
				},

				// --------------------------------------------------------
				changePassword: function() {
					_$template.find('#'+_namespace+'_change_password_btn').safeOn('click', _eventHandlers.onChangePasswordBtnClick);
					_$template.find('#' + _namespace + '_showPasswordChkbox').safeOn('click', _eventHandlers.onShowPasswordChkClick);
				},

				// --------------------------------------------------------
				mfaSettings: function() {
					_$template.find('#'+_namespace+'_reset_mfa_token_btn').safeOn('click', _eventHandlers.onResetMFATokenBtnClick);
				},

				// --------------------------------------------------------
				apikeySettings: function() {
					_$template.find('#'+_namespace+'_apikey_generate_btn').safeOn('click', _eventHandlers.onGenerateAPIKeyBtnClick);
					_$template.find('#'+_namespace+'_apikey_reset_btn').safeOn('click', _eventHandlers.onResetAPIKeyBtnClick);
					_$template.find('#'+_namespace+'_apikey_auth_btn').safeOn('click', _eventHandlers.onResetAPIKeyBtnClick);
					_$template.find('#'+_namespace+'_apikey_revoke_btn').safeOn('click', _eventHandlers.onRevokeAPIKeyBtnClick);
				},

				// --------------------------------------------------------
				fields: function() {
					var $newPasswordField = $('#'+_namespace+'_newPasswordField');
					var $newPasswordConfirmField = $('#'+_namespace+'_newPasswordConfirmField');
					var self = this;

					$newPasswordField
						.on('keyup', function(e) {
							var result = $(this).val();

							if(_validatePasswordOnKey(result) && _isRetypePasswordMatched()) {
								self.enablePasswordBtn();
							} else {
								self.disablePasswordBtn();
							}
						})
						.on('blur', function(e) {
							var result = $(this).val();

							_isRetypePasswordMatched();
						});

					$newPasswordConfirmField
						.on('keyup', function(e) {
							var result = $newPasswordField.val();

							if(_validatePasswordOnKey(result) && _isRetypePasswordMatched()) {
								self.enablePasswordBtn();
							} else {
								self.disablePasswordBtn();
							}
						})
						.on('paste', function(e) {
							e.preventDefault();
						})
						.on('blur', function(e) {
							var result = $newPasswordField.val();

							if(_isRetypePasswordMatched()) {
								$('#'+_namespace+'_passMatchedNotification').html('');
							} else {
								$('#'+_namespace+'_passMatchedNotification').html('Password does not match.')
							}
						});
				},
				username: function() {
					var user = (id) ? id : utui.login.email;
					$('#'+_namespace+'_userField').html(user);
				},
				enablePasswordBtn: function() {
					$('#'+_namespace+'_change_password_btn').removeClass('ui-state-disabled');
				},
				disablePasswordBtn: function() {
					$('#'+_namespace+'_change_password_btn').addClass('ui-state-disabled');
				},
				showNewPasswordChkbox: function() {
					$('#'+_namespace+'_showPasswordChkbox').on('click', function(e) {

						if(this.checked) {
							document.getElementById(_namespace+'_newPasswordField').type = 'text';
							document.getElementById(_namespace+'_newPasswordConfirmField').type = 'text';
						} else {
							document.getElementById(_namespace+'_newPasswordField').type = 'password';
							document.getElementById(_namespace+'_newPasswordConfirmField').type = 'password';
						}
					});
				},

				// --------------------------------------------------------
				tooltip: function() {
					var obj = {};
					obj[_namespace+'_pwValidChars_toolip'] = { gravity: 's' };
					utui.util.addTooltip(obj);
				}
			};

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onCloseBtnClick: function() {
					if (_callback) {
						_callback();
					}

					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onUserOverviewMenuClick: function() {
					_highlightNav($(this));

					_$template.find('.dialog-screen').hide();
					_$template.find('#'+_namespace+'_user_overview_headline').show();
					_$template.find('#'+_namespace+'_user_overview_screen').show();
				},

				// ----------------------------------------------------
				onEditUserProfileBtnClick: function() {
					if ($(this).hasClass('disabled')) {
						return;
					}

					var $edituser = $('.edituser-container'),
						$container = $('#edituser_profile'),
						$information = $container.find('.edituser-information-container');

					$(this).addClass('disabled');
					$edituser.addClass('edit');
					$information.html(_view.userProfileEdit());
					_$template.find('#'+_namespace+'_cancel_user_info_btn').safeOn('click', _eventHandlers.onCancelUserProfileBtnClick);
					_$template.find('#'+_namespace+'_save_user_info_btn').safeOn('click', _eventHandlers.onApplyEditProfileBtnClick);

					// Append the linkedin script
					linkedIn.load(function(member) {
						if (member.firstName) {
							$('#user-first-name').val(member.firstName);
						}
						if (member.lastName) {
							$('#user-last-name').val(member.lastName);
						}
						if (member.headline) {
							$('#user-title').val(member.headline);
						}
						if (member.pictureUrl) {
							var tmpUser = $.extend({}, true, _user, {photo_url:member.pictureUrl});
							_$template.find('.edituser-information-avatar').html(_getUserImage(tmpUser, 'large'));
						}
						_$template.find('.edituser-linkedin').hide();
					});
				},

				// ----------------------------------------------------
				onCancelUserProfileBtnClick: function() {
					var $edituser = $('.edituser-container'),
						$container = $('#edituser_profile'),
						$information = $container.find('.edituser-information-container');

					_$template.find('#'+_namespace+'_edit_user_profile_btn').removeClass('disabled');
					$edituser.removeClass('edit');
					$information.html(_view.userProfile());
					_$template.find('.edituser-information-avatar').html(_getUserImage(_user, 'large'));
				},

				// ----------------------------------------------------
				onChangePasswordMenuClick: function() {
					_highlightNav($(this));

					_request.getPasswordPolicy(function() {
						_initRequirements();
						_render.changePassword();
						_$template.find('.dialog-screen').hide();
						_$template.find('#'+_namespace+'_change_password_headline').show();
						_$template.find('#'+_namespace+'_change_password_screen').show();
						_$template.find('#'+_namespace+'_change_password_screen input:password:first').focus();
					});
				},

				// ----------------------------------------------------
				onMFASettingsMenuClick: function () {
					_highlightNav($(this));

					_render.mfaSettings();
					_$template.find('.dialog-screen').hide();
					_$template.find('#'+_namespace+'_mfa_settings_headline').show();
					_$template.find('#'+_namespace+'_mfa_settings_screen').show();
				},

				// ----------------------------------------------------
				onShowPasswordChkClick: function() {
					if (this.checked) {
						document.getElementById(_namespace+'_newPasswordField').type = 'text';
						document.getElementById(_namespace+'_newPasswordConfirmField').type = 'text';
					} else {
						document.getElementById(_namespace+'_newPasswordField').type = 'password';
						document.getElementById(_namespace+'_newPasswordConfirmField').type = 'password';
					}
				},

				// ----------------------------------------------------
				onChangePasswordBtnClick: function() {
					if (!$(this).hasClass('ui-state-disabled')) {
						_request.updatePassword();
					}
				},

				// ----------------------------------------------------
				onResetMFATokenBtnClick: function() {
					if (!$(this).hasClass('ui-state-disabled')) {
						_request.resetMFAToken();
					}
				},

				// ----------------------------------------------------
				onApplyEditProfileBtnClick: function () {
					var $firstName = $('#user-first-name'),
						$lastName = $('#user-last-name'),
						$title = $('#user-title'),
						$photoUrl = $('.user-avatar-linkedin img').attr('src'),
						inputRegExp = XRegExp('^(\\p{L}|\\p{N}|[-_ \\.\']){1,50}$');///^[a-zA-Z0-9-_ \.']{1,50}$/;

					// Verify First Name
					if ($firstName.val().trim() === '') {
						utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.first_name_blank'));
						$firstName.focus();
						return false;

					} else if (!inputRegExp.test($firstName.val().trim())) {
						utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.first_name_chars'));
						$firstName.focus();
						return false;

						// Verify Last Name
					} else if ($lastName.val().trim() === '') {
						utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.last_name_blank'));
						$lastName.focus();
						return false;

					} else if (!inputRegExp.test($lastName.val().trim())) {
						utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.last_name_chars'));
						$lastName.focus();
						return false;

						// Verify Title
					} else if ($title.val().trim() !== '' && !inputRegExp.test($title.val().trim())) {
						utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.title_chars'));
						$title.focus();
						return false;
					}

					// Else validation passes
					_user.first_name = $firstName.val().trim();
					_user.last_name = $lastName.val().trim();
					_user.title = $title.val().trim();
					if ($photoUrl) {
						_user.photo_url = $('.user-avatar-linkedin img').attr('src');
					}

					_request.updateUserProfile();
				},

				//-----------------------------------------------------
				onApiKeyMenuClick: function() {
					_highlightNav($(this));
					
          _render.apikeySettings();
          _$template.find('.dialog-screen').hide();
          _$template.find('#'+_namespace+'_apikey_settings_headline').show();
          _$template.find('#'+_namespace+'_apikey_settings_screen').show();
          
          $('#' + _namespace + '_apikey_reset_btn').hide();
          $('#' + _namespace + '_apikey_revoke_btn').hide();
          $('#' + _namespace + '_apikey_auth_btn').hide();
          $('#' + _namespace + '_apikey_generate_btn').hide();
          
          utui.util.showSpinner();
          
          _request.getUserApiKeyInfo();
				},

				//------------------------------------------------------
				onGenerateAPIKeyBtnClick: function() {
          utui.util.showSpinner();
					_request.generateApiKey();
				},

				//------------------------------------------------------
				onResetAPIKeyBtnClick: function() {
					_request.state = "reset";
					_request.authorizeApiKey();
				},

				//------------------------------------------------------
				onRevokeAPIKeyBtnClick: function() {
					console.log("DO REVOKE API KEY");
					_request.revokeApiKey();
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				// Get the user data
				getUser: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username: _user.email});
					utui.service.get(url, null, null, _response.onGetUserSuccess, _response.onGetUserError);
				},

				// ----------------------------------------------------
				updateUserProfile: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username: _user.email});
					utui.service.put(url, JSON.stringify(_user), utui.service.options.JSON, _response.onUpdateUserProfileSuccess, _response.onUpdateUserProfileError);
				},

				// ------------------------------------------------------------
				updatePassword: function() {
					utui.util.showSpinner();

					var $oldPassword = $('#'+_namespace+'_oldPasswordField').val(),
						$newPassword = $('#'+_namespace+'_newPasswordField').val().trim();
					var dataObj = {
						new_password: $newPassword,
						old_password: $oldPassword
					};

					var url = _addParamsToURL(utui.service.restapis.EDIT_PASSWORD, {username: _user.email});
					utui.service.put(url, dataObj, null, _response.onUpdatePasswordSuccess, _response.onUpdatePasswordError);
				},

				// ------------------------------------------------------------
				resetMFAToken: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.RESET_MFA_TOKEN, {username: _user.email});
					utui.service.put(url, null, null, _response.onResetMFATokenSuccess, _response.onResetMFATokenError);
				},

				// ----------------------------------------------------
				getPasswordPolicy: function (cb) {
					utui.util.showSpinner();

					utui.service.get(utui.service.restapis.PASSWORD_POLICY, null, null,
						function(data) {
							_response.onGetPasswordPolicySuccess(data);
							if (cb) {
								cb();
							}
						},
						function(status, response) {
							// Set the default policy
							var defaultPolicy = { "password_length" : 8 , "numeric_characters" : 1 , "special_characters" : 1 , "upper_characters" : 1 , "password_history" : 1};
							_response.onGetPasswordPolicySuccess(defaultPolicy);
							if (cb) {
								cb();
							}
						});
				},

				// ----------------------------------------------------
				authorizeApiKey: function() {
					utui.service.post(utui.service.restapis.API_KEY_AUTHORIZE, JSON.stringify([_user.email]), utui.service.options.JSON, _response.onApiKeyAuthSuccess, _response.onApiKeyAuthError);
				},
        
        // ----------------------------------------------------
        generateApiKey: function () {
          var url = utui.service.restapis.API_KEY_GENERATE;
          utui.service.post(url, {username: _user.email}, null, _response.onGenerateApiKeySuccess, _response.onGenerateApiKeyError);
        },

				// ----------------------------------------------------
				getUserApiKeyInfo: function() {
					var url = _addParamsToURL(utui.service.restapis.API_KEY_RETRIEVE, {username: _user.email});
					return utui.service.get(url, {}, null, _response.onGetApiKeyInfoSuccess, _response.onGetApiKeyInfoError);
				},

				// ----------------------------------------------------
				revokeApiKey: function() {
					utui.service.delete(utui.service.restapis.API_KEY_REVOKE, JSON.stringify([_user.email]), utui.service.options.JSON, _response.onRevokeApiKeySuccess, _response.onRevokeApiKeyError);
				}

			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ----------------------------------------------------
				onGetUserSuccess: function(data) {
					utui.util.hideSpinner();

					_user = data;
					_profiles = _getProfilesFromUser(_user);

					var wildcardIndex = $.inArray('*', _profiles);
					if (wildcardIndex > -1) {
						// Remove the wildcard permission from this view
						_profiles.splice(wildcardIndex, 1);
					}

					_render.ui();
				},

				// ----------------------------------------------------
				onGetUserError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_get_user_info'));
					utui.util.showMsgDialog(errorMsg, 'Error', function() {utui.ui.dialog.dispose(_namespace)});
				},

				// ----------------------------------------------------
				onUpdateUserProfileSuccess: function(data) {
					utui.util.hideSpinner();

					_updateUser(_user);
					_render.ui();
				},

				// ----------------------------------------------------
				onUpdateUserProfileError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_update_user_info'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				},

				// ----------------------------------------------------
				onUpdatePasswordSuccess: function(data) {
					utui.util.hideSpinner();
					utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.users.success.password_changed'));
					// Clear the values
					_$template.find('#' + _namespace + '_change_password_screen input').val('');
					_bindUI.disablePasswordBtn();
					_validatePasswordOnKey('');
				},

				// ----------------------------------------------------
				onUpdatePasswordError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = '',
						$oldPasswordField = $('#' + _namespace + '_oldPasswordField'),
						responseText = response.responseText || '';

					if (responseText.indexOf('ILLEGAL_MATCH') >= 0) {
						errorMsg += localize.t('tiq.users.error.password_too_similar');
					}
					else if (responseText.indexOf('Current password must be provided when changing the password') >= 0 || responseText.indexOf('CURRENT_PASSWORD_MISMATCH') >= 0) {
						if ($oldPasswordField.val() == '') {
							errorMsg += localize.t('tiq.users.error.password_cannot_be_blank');
						} else {
							errorMsg += localize.t('tiq.users.error.password_not_match_records');
						}
					}
					else if (responseText.indexOf('ILLEGAL_WHITESPACE') >= 0) {
						errorMsg += localize.t('tiq.users.error.password_cannot_use_whitespace');
					}
					else if (responseText.indexOf('Cannot use previous') >= 0) {
						var num = responseText.replace(/[^0-9]/g, '') || 1;
						errorMsg += localize.t('tiq.users.error.password_cannot_use_previous', {num:num});
					}
					else if (responseText.indexOf('INSUFFICIENT_CHARACTERISTICS') >= 0) {
						errorMsg += localize.t('tiq.users.error.password_requirements_not_met');
					}
					else if (responseText.indexOf('1469') >= 0) {
						if ($oldPasswordField.length != 0 && $oldPasswordField.val() == '') {
							errorMsg += localize.t('tiq.users.error.password_cannot_be_blank');
						} else {
							errorMsg += localize.t('tiq.users.error.password_invalid_account_permissions');
						}
					}
					else {
						errorMsg += errorMsg += localize.t('tiq.users.error.password_invalid_permissions');
					}

					utui.ui.dialog.message.showError(_namespace, errorMsg);
				},

				// ----------------------------------------------------
				onResetMFATokenSuccess: function(data) {
					utui.util.hideSpinner();

					utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.users.edit_user.mfa.reset_success'));
					_$template.find('#'+_namespace+'_reset_mfa_token_btn').addClass('ui-state-disabled');
				},

				// ----------------------------------------------------
				onResetMFATokenError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_reset_mfa_token'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				},

				// ----------------------------------------------------
				onGetPasswordPolicySuccess: function(data) {
					utui.util.hideSpinner();

					if (data) {
						_passwordAttr = data;
					}
				},

				// ----------------------------------------------------
				onGetPasswordPolicyError: function(status, response) {
					utui.util.hideSpinner();
				},

				// ----------------------------------------------------
				onApiKeyAuthSuccess: function(status, response) {
				//200 - no data
					utui.util.hideSpinner();
          utui.ui.dialog.message.showSuccess(_namespace,localize.t("tiq.users.edit_user.apikey.reset_success"));
          _request.getUserApiKeyInfo();
				},

				// ----------------------------------------------------
				onApiKeyAuthError: function(status, response) {
				//standard permission failure response
          utui.util.hideSpinner();
          utui.util.showPermissionErrorDialog();
				},

				// ----------------------------------------------------
				onGenerateApiKeySuccess: function(data, response) {
          //{ "key" : <api key string value> }
          $('#' + _namespace + '_apikey_generate_btn').hide();
          _request.getUserApiKeyInfo();
					
					var v = "";
          
          v += '<div id="' + _namespace + '_description" class="dialogBody_alert">';
          v += '   <div class="dialog-icon-container" style="margin-top: 20px;">';
          v += '       <i class="icon-warning-sign" style="color:orange;"></i>';
          v += '   </div>';
          v += '   <div class="dialog-description" style="max-width:670px">';
          v += '       <div style="text-align: center; margin-right: 20px; margin-bottom: 10px;"><span><strong>'+localize.t("tiq.users.edit_user.apikey.api_key")+'</strong>:&nbsp;'+data.key+'</span></div>';
          v += '       <p>' + localize.t('tiq.users.edit_user.apikey.generated_key') + '</p>';
          v += '   </div>';
          v += '</div>';
          
          var buttons = {
            'Done': {
              click: function (e) {
                // Prevents from hiding dialogs that get closed when document is clicked
                e.stopImmediatePropagation();
                $(this).dialog('close');
              },
              style: 'float:right; margin-left: 12px',
              text : localize.t('tiq.dialog.button.done')
            }
          };
					
          
          utui.util.hideSpinner();
					utui.util.showDialog(v, localize.t("tiq.users.edit_user.apikey.title"), buttons, {width : "750px"});
					
					
				},

				// ----------------------------------------------------
				onGenerateApiKeyError: function(status, response) {
          utui.util.hideSpinner();
          utui.ui.dialog.message.showError(_namespace, localize.t("tiq.users.edit_user.apikey.generate_error"));
				},

				// ----------------------------------------------------
				onGetApiKeyInfoSuccess: function(status, response) {
          
          utui.util.hideSpinner();
          
          var isAdmin = utui.permissions.canManageUsers(), isSelf = _user.email === utui.login.email;
          
          //Self
          
          var $reset = $('#' + _namespace + '_apikey_reset_btn'),
					$revoke = $('#' + _namespace + '_apikey_revoke_btn'),
          $generate = $('#' + _namespace + '_apikey_generate_btn'),
          $auth = $('#' + _namespace + '_apikey_auth_btn');
          
          $reset.hide();
          $revoke.hide();
          $generate.hide();
          $auth.hide();
          //Update status messgae
          
          function processAPIKeyDate(date) {
            var _date = date;
            if ( utui.util.typeOf(_date) !== "date") {
              _date = new Date(_date);
            }
            
            return utui.util.date.getYMDStringFromDate(_date,":");
          }
          
          var msg = localize.t("tiq.users.edit_user.apikey.no_info");
          
          if (status) {
  
            var sorted = _.sortBy(_.filter([
              {name : "last_authorized_on",
                date: (status.last_authorized_on || {})["$date"]
              },
              {name : "revoked_on",
                date: (status.revoked_on || {})["$date"]
              },
              {name : "last_used",
                date: (status.last_used || {})["$date"]
              },
              {name : "generated_on",
                date: (status.generated_on || {})["$date"]
              }
            ], function (data) {
              return !!data.date
            }), "date");
  
            if (!isSelf && !isAdmin) {
              utui.util.showPermissionErrorDialog();
              return;
            }
  
            switch (sorted[sorted.length - 1].name) {
              case "last_authorized_on":
                msg = localize.t("tiq.users.edit_user.apikey.authorized_on") + ": " + processAPIKeyDate(status.last_authorized_on["$date"]) + " By: " + status.last_authorized_by;
                if (isSelf) {
                  $generate.show();
                } else if (isAdmin) {
                  $revoke.show();
                }
                break;
              case "revoked_on":
                msg = localize.t("tiq.users.edit_user.apikey.revoked_on") + ": " + processAPIKeyDate(status.revoked_on["$date"]) + " By: " + status.revoked_by;
                if (isAdmin) {
                  $reset.show();
                }
                break;
              case "last_used":
                msg = localize.t("tiq.users.edit_user.apikey.last_used_on") + ": " + processAPIKeyDate(status.last_used["$date"]);
                if (isAdmin) {
                  $reset.show();
                  $revoke.show();
                }
                break;
              case "generated_on":
                msg = localize.t("tiq.users.edit_user.apikey.generated_on") + ": " + processAPIKeyDate(status.generated_on["$date"]);
                if (isAdmin) {
                  $reset.show();
                  $revoke.show();
                }
                break;
              default:
                msg = "";
                utui.ui.dialog.message.showError(_namespace, localize.t("tiq.users.edit_user.apikey.unknown_sate"));
            }
          } else if (!status && isAdmin && !isSelf) {
            $auth.show();
					} else if (!status && isAdmin && isSelf) {
            $generate.show();
					}
          $("#"+_namespace+"_api_status").text(msg);
					
				},
				

				// ----------------------------------------------------
				onGetApiKeyInfoError: function(status, response) {
          utui.util.hideSpinner();
          utui.util.showPermissionErrorDialog();
				},

				// ----------------------------------------------------
				onRevokeApiKeySuccess: function(status, response) {
          utui.util.hideSpinner();
          utui.ui.dialog.message.showSuccess(_namespace,localize.t("tiq.users.edit_user.apikey.revoke_success"));
          
            _request.getUserApiKeyInfo();
				},

				// ----------------------------------------------------
				onRevokeApiKeyError: function(status, response) {
          _request.state = null;
          utui.util.hideSpinner();
					utui.util.showPermissionErrorDialog();
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(user, callback) {
					_user = user;
					_callback = callback;

					_clear();

					_request.getUser();

					// Dialog buttons
					var buttons = [{
						text: 'Close',
						click: _eventHandlers.onCloseBtnClick,
						id: _namespace + 'CloseBtn'
					}];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.edit_user.title'), buttons, _$template, {width:975}, _callback);
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		// EDIT USER PERMISSIONS MODAL
		editUserPermissions: function() {
			// Private API
			var _namespace = 'edit_user_permissions_dialog',
				_$template = utui.ui.dialog.body(),
				_user,			    // User object that we will be editing
				_userToSave,        // User object to save so real user object remains unedited
				_callback,		    // Method to call upon success of adding user
				_profiles,		    // List of selected profiles in the profile drop down (select2)
				_canManageAccount,  // If false we do NOT show the account permissions screen
				_canManageUsers,    // If false we do NOT show the profile permissions screen
				_loggedInUser,      // Contains the current logged in user
				_screens,// = [_showAccountPermissions, _showUserInfo, _showProfilePermissions, _showConfirm],
				_numScreen;

			// --------------------------------------------------------
			function _clear() {
				_userToSave = null;
				_profiles = [];
				_screens = [];
				_numScreen = null;
				_$template.find('.dialog-screen').hide();

				// Only show screen that the user can manage
				if (_canManageAccount) {
					_screens.push(_showAccountPermissions);
				}
				if (_canManageUsers) {
					_screens.push(_showProfileSelect);
					_screens.push(_showProfilePermissions);
				}
				// Always show confirm
				_screens.push(_showConfirm);
			}

			// --------------------------------------------------------
			// Validates each screen before displaying the next
			function _showScreen(direction) {
				var num = _numScreen,
					screenID = _$template.find('.dialog-screen:visible').attr('id');

				if (direction === 'next') {
					if (_validate()) {
						_numScreen ++;
					} else {
						return;
					}
				} else if (direction === 'previous') {
					_numScreen --;

				} else {
					_numScreen = 0;
				}

				// Need to skip the profile permissions screen if no profiles were selected
				if (_profiles.length === 0 && (screenID === (_namespace+'_profile_select_screen') || screenID === (_namespace+'_confirm_screen'))) {
					_numScreen = (num < _numScreen) ? _numScreen+1 : _numScreen-1;
					_numScreen = _numScreen < 0 ? 0 : _numScreen;   // Default to 0 since we don't know if this will be screen 0, 1 or 2
				}

				// Show the screen if different
				if (num !== _numScreen) {
					// Hide any dialog message
					utui.ui.dialog.message.hide(_namespace);

					// Hide all screens and nav buttons
					_$template.find('.dialog-screen').hide();
					_$template.closest('.ui-dialog').find('.nav-btn').hide();

					_screens[_numScreen]();

					// Show the nav buttons
					if (_numScreen === 0) {
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen < _screens.length-1) {
						$('#' + _namespace + 'PreviousBtn').show();
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen === _screens.length-1) {
						$('#' + _namespace + 'FinishBtn').show();
						$('#' + _namespace + 'PreviousBtn').show();
					}
				}
			}

			// --------------------------------------------------------
			// Validates the user info as well as populates the _user object
			function _validate() {
				var screenID = _$template.find('.dialog-screen:visible').attr('id');

				// Validate the profile select screen
				if (screenID === (_namespace+'_profile_select_screen')) {
					var $profileList = $('#'+_namespace+'_profile_list'),
						profileOption = $('#'+_namespace+'_profile_options :radio:checked').val();

					if (profileOption === 'profiles' || profileOption === 'current') {
						var profiles = $profileList.val();
						if (!$.isArray(profiles) || profiles.length === 0) {
							utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.must_select_profile'));
							$profileList.focus();
							return false;
						}
					}
				}

				return true;
			}

			// --------------------------------------------------------
			function _showProfileSelect() {
				_$template.find('.notice').hide();
				_$template.find('.dialog-content-footer').hide();
				_$template.find('#'+_namespace+'_profile_select_screen').show();

				// Enable the first field
				_$template.find("input:text:visible:first").focus();
			}

			// --------------------------------------------------------
			function _showAccountPermissions() {
				_$template.find('.notice').hide();
				_$template.find('.dialog-content-footer').show();
				_$template.find('.username').html(_user.email);
				_$template.find('#'+_namespace+'_account_permissions_screen').show();
			}

			// --------------------------------------------------------
			function _showProfilePermissions() {
				_$template.find('.notice').hide();
				_$template.find('.dialog-content-footer').show();

				// Re-render the profile permissions since they may have changed
				_render.profilePermissions();

				_$template.find('#'+_namespace+'_profile_permissions_screen').show();
			}

			// --------------------------------------------------------
			function _showConfirm() {
				_$template.find('.notice').show();
				_$template.find('.dialog-content-footer').show();

				// Re-render the confirmation view
				_render.confirm();

				_$template.find('#'+_namespace+'_confirm_screen').show();
			}

			// --------------------------------------------------------
			// Add the content to the template
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					_render.content();
					_render.accountPermissions();
					// Only show if user has permissions to manage users
					if (_canManageUsers) {
						_render.profileSelect();
						_render.profilePermissions();
					}
					_render.confirm();
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-footer').html(_view.contentFooter());
				},

				// ----------------------------------------------------
				accountPermissions:function() {
					var $context = _$template.find('#'+_namespace+'_account_permissions_screen').html(_view.accountPermissions());
					_bindUI.accountPermissions();

					var permissions = _user.permissions;    // User permissions are updated on click so must use a temp variable here
					// Trigger click if permissions is present (this will update the badges)
					for (var i=0; i<permissions.length; i++) {
						$context.find('input[value="' + permissions[i] + '"]').trigger('click');
					}

					// Disable the checkboxes that the user does NOT have permissions to assign
					if (!utui.permissions.canManageAccount()) $context.find('input[name="'+utui.permissions.MANAGE_ACCOUNT+'"]').attr('disabled','disabled');
					if (!utui.permissions.canManageAudit()) $context.find('input[name="'+utui.permissions.MANAGE_AUDIT+'"]').attr('disabled','disabled');
					if (!utui.permissions.canCreateProfile()) $context.find('input[name="'+utui.permissions.CREATE_PROFILE+'"]').attr('disabled','disabled');
					if (!utui.permissions.canEditJavascriptExtensions()) $context.find('input[name="'+utui.permissions.EXTENSIONS_JAVASCRIPT+'"]').attr('disabled','disabled');

					// If all boxes are checked then check the select all box too
					if (!$context.find('.permission-checkbox').is(':not(:checked)')) {
						$context.find('.select-all-permissions').find('input').prop('checked', 'checked');
					}

					// Add tooltips
					_dialogs.shared.addToolTips($context);
				},

				// ----------------------------------------------------
				profileSelect:function() {
					_$template.find('#'+_namespace+'_profile_select_screen').html(_view.profileSelect());
					_bindUI.profileSelect();
				},

				// ----------------------------------------------------
				profilePermissions:function() {
					var $context = _$template.find('#'+_namespace+'_profile_permissions_screen').html(_view.profilePermissions());
					_bindUI.profilePermissions();

					// Update to add all previous permissions
					var $groups = $context.find('.accordion-group');
					$.each($groups, function() {
						var $group = $(this),
							profile = $group.find('input[name="profile"]').val(),
							permissions = _getProfilePermissionsFromUser(_userToSave, profile),
							triggerClick = ($.inArray('*', _profiles) > -1 && !_hasWildcardProfile()) ? false : true;

						// DO NOT TRIGGER CLICK IF NOT WILDCARD AND ALL PROFILES ARE SELECTED
						if (triggerClick) {
							// Trigger clicked if permissions is present (this will update the badges)
							for (var j=0; j<permissions.length; j++) {
								$group.find('input[value="' + permissions[j] + '"]').trigger('click');
							}
						}

						// Disable checkboxes that the user does NOT have permissions to assign
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_USERS, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_USERS+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_TEMPLATES, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_TEMPLATES+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_SECURE_LABELS, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_SECURE_LABELS+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.SAVE_PROFILE, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.SAVE_PROFILE+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.COPY, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.COPY+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_DEV, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_DEV+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_QA, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_QA+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_PROD, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_PROD+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_DEV, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_DEV+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_QA, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_QA+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_PROD, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_PROD+'"]').attr('disabled','disabled');

						// If all boxes are checked then check the select all box too
						if (!$group.find('.permission-checkbox').is(':not(:checked)')) {
							$group.find('.select-all-permissions').find('input').prop('checked', 'checked');
						}
					});
					
					// Add tooltips
					_dialogs.shared.addToolTips($context);
				},

				// ----------------------------------------------------
				confirm:function() {
					var $context = _$template.find('#'+_namespace+'_confirm_screen').html(_view.confirm());

					// Update the account badges
					if (_canManageAccount) {
						_dialogs.shared.updateAccountBadges($context, _userToSave.permissions);
					}

					// Update the profile badges
					if (_profiles.length > 0 && _canManageUsers) {
						_dialogs.shared.updateProfileBadges($context, _userToSave.profiles);
					}
				}
			}

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div id="'+_namespace+'_account_permissions_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_profile_select_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_profile_permissions_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_confirm_screen" class="dialog-screen"></div>';

					return v;
				},

				// ----------------------------------------------------
				contentFooter: function() {
					var v = '';

					v += _dialogs.shared.view.iconLegend(_namespace);

					return v;
				},

				// ----------------------------------------------------
				accountPermissions: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.create.account.title', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, true, 'account', [utui.login.account]);

					return v;
				},

				// ----------------------------------------------------
				profileSelect: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.edit_permissions.profile_select.title', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);

					v += '<div class="container-fluid assignprofile-container">';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1">';
					v += '			<div id="'+_namespace+'_profile_options">';
					v += '				<h2>' + localize.t('tiq.users.create.profile_select.options') + '</h2>';

					// Only show this option if the user has the wildcard profile
					if (_loggedInUser.profiles['*']) {
						v += '				<div class="control-group">';
						v += '					<input type="radio" value="all" name="assignprofile-profilegroup" id="' + _namespace + '-option-all" />';
						v += '					<label for="' + _namespace + '-option-all">';

						if (_hasWildcardProfile()) {
							v += '						<strong>' + localize.t('tiq.users.edit_permissions.profile_select.wildcard.title') + '</strong><br />';
							v += '						<span class="desc">' + localize.t('tiq.users.edit_permissions.profile_select.wildcard.desc') + '</span>';
						} else {
							v += '						<strong>' + localize.t('tiq.users.edit_permissions.profile_select.all_profiles.title') + '</strong><br />';
							v += '						<span class="desc">' + localize.t('tiq.users.edit_permissions.profile_select.all_profiles.desc') + '</span>';
						}

						v += '					</label>';
						v += '				</div>';
					}

					// Only show this option if the selected user is assigned to at least 1 profile other than wildcard
					if (_isAssignedToProfiles(_user)) {
						v += '				<div class="control-group">';
						v += '					<input type="radio" value="current" name="assignprofile-profilegroup" id="' + _namespace + '-option-current" />';
						v += '					<label for="' + _namespace + '-option-current">';
						v += '						<strong>' + localize.t('tiq.users.edit_permissions.profile_select.currently_assigned_profiles.title') + '</strong><br />';
						v += '						<span class="desc">' + localize.t('tiq.users.edit_permissions.profile_select.currently_assigned_profiles.desc') + '</span>';
						v += '					</label>';
						v += '				</div>';
					}

					v += '				<div class="control-group">';
					v += '					<input type="radio" value="profiles" name="assignprofile-profilegroup" id="' + _namespace + '-option-profiles" checked="checked" />';
					v += '					<label for="' + _namespace + '-option-profiles">';
					v += '						<strong>' + localize.t('tiq.users.edit_permissions.profile_select.select_profiles.title') + '</strong><br />';
					v += '						<span class="desc">' + localize.t('tiq.users.edit_permissions.profile_select.select_profiles.desc') + '</span>';
					v += '					</label>';
					v += '				</div>';

					// Don't show if user can only manage users since it is nonsensical at that point to select no profiles
					if (_canManageAccount) {
						v += '				<div class="control-group">';
						v += '					<input type="radio" value="none" name="assignprofile-profilegroup" id="' + _namespace + '-option-none" />';
						v += '					<label for="' + _namespace + '-option-none">';
						v += '						<strong>' + localize.t('tiq.users.edit_permissions.profile_select.no_profile_changes.title') + '</strong><br />';
						v += '						<span class="desc">' + localize.t('tiq.users.edit_permissions.profile_select.no_profile_changes.desc') + '</span>';
						v += '					</label>';
						v += '				</div>';
					}

					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1" style="margin-top:10px;">';
					v += '			<div id="'+_namespace+'_profile_list_container">';
					v += '				<h2>' + localize.t('tiq.users.edit_permissions.profile_select.profile_list') + '</h2>';
					v += '				<select id="'+_namespace+'_profile_list" multiple>';

					// populate the profiles from the current user
					var me = utui.users.getCurrentUser();
					v += _dialogs.shared.view.getProfileListOptions(me, _getProfilesFromUser(me));

					v += '				</select>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				profilePermissions: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.edit_permissions.profile.title', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, true, 'profile', _profiles);

					return v;
				},

				// ----------------------------------------------------
				confirm: function() {
					var v = '',
						headerContent,
						email = '<span class="blue username">' + _user.email + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.edit_permissions.confirm.title', {email:email}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					if (_canManageAccount) {
						v += _dialogs.shared.view.permissionsContainer(_namespace, false, 'account', [utui.login.account]);
					}
					if (_profiles.length > 0 && _canManageUsers) {
						v += _dialogs.shared.view.permissionsContainer(_namespace, false, 'profile', _profiles);
					}

					return v;
				}
			}

			// --------------------------------------------------------
			// Binds the UI events
			var _bindUI = {
				// --------------------------------------------------------
				accountPermissions: function() {
					// Add functionality to Accordion
					var $accordion = _$template.find('.account-permissions-accordion');
					$accordion.find('.accordion-toggle').safeOn('click', _dialogs.shared.eventHandlers.onAccordionClick);
					$accordion.find('.permission-checkbox').safeOn('change', _eventHandlers.onAccountPermissionsChange);
					$accordion.find('.select-all-permissions').safeOn('change', _eventHandlers.onSelectAllPermissionsChange);

					// Open the accordion
					_$template.find('.account-permissions-accordion .accordion-toggle').trigger('click');
				},

				// --------------------------------------------------------
				profileSelect: function() {
					_$template.find('#'+_namespace+'_profile_options :radio').safeOn('change', _eventHandlers.onProfileOptionsChange);

					var $profileList = _$template.find('#'+_namespace+'_profile_list');

					$profileList.select2({
						placeholder: 'Select profile(s)',
						closeOnSelect: false,
						minimumResultsForSearch: -1
					});

					$profileList.safeOn('change', _eventHandlers.onProfileListChange);
					$profileList.safeOn('select2-selecting', _dialogs.shared.eventHandlers.onProfileListSelect);

					// Add the selected profile as the default value
					var selectedProfile = _dialogs.userManager.getSelectedProfile();
					if (selectedProfile) {
						_$template.find('#'+_namespace+'_profile_list').select2('val',selectedProfile).trigger('change');
					}
				},

				// --------------------------------------------------------
				profilePermissions: function() {
					// Add functionality to Accordion
					var $accordion = _$template.find('.profile-permissions-accordion');
					$accordion.find('.accordion-toggle').safeOn('click', _dialogs.shared.eventHandlers.onAccordionClick);
					$accordion.find('.permission-checkbox').safeOn('change', _eventHandlers.onProfilePermissionsChange);
					$accordion.find('.select-all-permissions').safeOn('change', _eventHandlers.onSelectAllPermissionsChange);
					$accordion.find('.apply-permissions a').safeOn('click', _eventHandlers.onApplyPermissionsToSelectedProfilesClick);

					// Open the first accordion
					_$template.find('.profile-permissions-accordion .accordion-toggle').first().trigger('click');
				}
			}

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				// Enables/Disables the profile select list depending on which option is selected
				onProfileOptionsChange: function() {
					var option = $(this).val(),
						$profileList = $('#'+_namespace+'_profile_list'),
						enabled = false;

					_profiles = [];
					_userToSave.profiles = {};

					// remove disabled attribute
					$profileList.find('option').prop('disabled' , false);

					if (option === 'all') {
						_profiles = ['*'];
						_userToSave.profiles['*'] = {profile:'*',permissions:_getProfilePermissionsFromUser(_user, '*')};

					} else if (option === 'current') {
						$profileList.find('option').each(function() {
							// Add disabled attribute to all profiles not in selected users list
							if ($.inArray($(this).attr('value'), _user.expanded_profiles) === -1) {
								$(this).attr('disabled', 'disabled');
							}
						});
						enabled = true;

					} else if (option === 'none') {


					} else {
						enabled = true;
					}
					$profileList.select2('val', _profiles);
					$profileList.select2('enable', enabled);
				},

				// ----------------------------------------------------
				onProfileListChange: function(event) {
					var profiles = $(this).val() || [];

					if (event.removed) {
						delete _userToSave.profiles[event.removed.text];

					} else {
						var profile = event.added ? event.added.text : profiles[0];
						if (!_userToSave.profiles[profile]) {
							_userToSave.profiles[profile] = {profile:profile, permissions:_getProfilePermissionsFromUser(_user, profile)};
						}
					}

					// Sort the profiles
					_sortList(profiles);
					_profiles = profiles;
				},

				// ----------------------------------------------------
				onAccountPermissionsChange: function() {
					_userToSave.permissions = _dialogs.shared.onAccountPermissionsChange($(this));
				},

				// ----------------------------------------------------
				onProfilePermissionsChange: function() {
					_dialogs.shared.onProfilesPermissionsChange($(this), _userToSave.profiles);
				},

				// ----------------------------------------------------
				onApplyPermissionsToSelectedProfilesClick: function() {
					_dialogs.shared.onApplyPermissionsToSelectedProfiles(this, _userToSave.profiles);
				},

				// ----------------------------------------------------
				onSelectAllPermissionsChange: function() {
					_dialogs.shared.onSelectAllPermissionsChange($(this));
				},

				// ----------------------------------------------------
				onFinishBtnClick: function() {
					_request.updateUser();
				},

				// ----------------------------------------------------
				onNextBtnClick: function() {
					_showScreen('next');
				},

				// ----------------------------------------------------
				onPreviousBtnClick: function() {
					_showScreen('previous');
				},

				// ----------------------------------------------------
				onCancelBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				// Get the user data
				getUser: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username: _user.email});
					utui.service.get(url, null, null, _response.onGetUserSuccess, _response.onGetUserError);
				},

				// ------------------------------------------------------------
				updateUser: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username:_user.email});
					utui.service.put(url, JSON.stringify(_userToSave), utui.service.options.JSON, _response.onUpdateUserSuccess, _response.onUpdateUserError);
				}
			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ----------------------------------------------------
				onGetUserSuccess: function(data) {
					utui.util.hideSpinner();

					_user = data;

					// Copy the user object so we don't edit permissions and remove profiles
					_userToSave = $.extend(true, {}, _user);
					// Profiles will be constructed when they make a selection from the profiles list
					_userToSave.profiles = {};

					_render.ui();
					// Show the first screen of the flow
					_showScreen();
				},

				// ----------------------------------------------------
				onGetUserError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_get_user_info'));
					utui.util.showMsgDialog(errorMsg, 'Error', function() {utui.ui.dialog.dispose(_namespace)});
				},

				// ------------------------------------------------------------
				onUpdateUserSuccess: function(data){
					utui.util.hideSpinner();

					if (_callback) {
						_callback();
					}
					utui.ui.dialog.dispose(_namespace);
				},

				// ------------------------------------------------------------
				onUpdateUserError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_update_user'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(user, callback) {
					_user = user;
					_callback = callback;
					// Cache the permissions since we check in a few places
					_canManageAccount = utui.permissions.canManageAccount();
					_canManageUsers = utui.permissions.canManageUsers();

					// Give the logged in user wildcard profile if they don't have just so they can use the All Profiles option
					_loggedInUser = _dialogs.shared.assignPermisionsAfterExclusions(utui.users.getCurrentUser());

					_clear();
					_request.getUser();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.finish'),
							click: _eventHandlers.onFinishBtnClick,
							id: _namespace + 'FinishBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: localize.t('tiq.dialog.button.next'),
							click: _eventHandlers.onNextBtnClick,
							id: _namespace + 'NextBtn',
							class: 'nav-btn'
						},
						{
							text: localize.t('tiq.dialog.button.previous'),
							click: _eventHandlers.onPreviousBtnClick,
							id: _namespace + 'PreviousBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CancelBtn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.edit_permissions.title'), buttons, _$template, {width:800});
				}
			};

			return _public;
		}(),

		// ------------------------------------------------------------
		// DELETE USER
		deleteUser: function() {
			// Private API
			var _namespace = 'delete_user_dialog',
				_$template = utui.ui.dialog.body(),
				_user,          // User to delete
				_callback;      // Method to call upon success of deleting user

			// --------------------------------------------------------
			// Add the content to the template
			var _render = {
				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
				}
			}
			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				contentBody: function() {
					var v = '';

					v += '<div id="' + _namespace + '_description" class="dialogBody_alert">';
					v += '   <div class="dialog-icon-container">';
					v += '       <i class="icon-warning-sign" style="color:orange;"></i>';
					v += '   </div>';
					v += '   <div class="dialog-description">';

					var userName = '<span style="color:#1496FF;">' + (_getUserName(_user) || _user.email) + '</span>';

					v += '       <p><strong>' + localize.t('tiq.users.delete_user_dialog.content_p1', {username:userName}) + '</strong></p>';
					v += '       <p>' + localize.t('tiq.users.delete_user_dialog.content_p2') + '</p>';
					v += '       <p style="font-weight:bold; color:#ff0000;">' + localize.t('tiq.users.delete_user_dialog.content_p3') + '</p>';
					v += '   </div>';
					v += '</div>';

					return v;
				}
			}

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onCancelBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onRemoveBtnClick: function() {
					_request.deleteUser();
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				deleteUser: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username:_user.email});
					utui.service.delete(url, null, null, _response.onDeleteUserSuccess, _response.onDeleteUserError);
				}
			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ----------------------------------------------------
				onDeleteUserSuccess: function(data){
					utui.util.hideSpinner();

					if (_callback) {
						_callback();
					}
					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onDeleteUserError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_delete_user'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(user, callback) {
					_user = user;
					_callback = callback;

					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCancelBtnClick,
							id: _namespace + 'CloseBtn'
						},
						{
							text: localize.t('tiq.dialog.button.remove_user'),
							click: _eventHandlers.onRemoveBtnClick,
							id: _namespace + 'RemoveBtn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.delete_user_dialog.title'), buttons, _$template, {height:200});
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		
		
		
		// BULK USER MANAGE API KEYS
    manageAPIKeys: function() {
      // Private API
      var _namespace = 'manage_apikeys_for_user_dialog',
          _$template = utui.ui.dialog.body(false, true),
          _users,             // Users to remove profiles from
          _usersList,         // Users array of emails
          _callback,          // Method to call when complete
          _isMultipleUsers,   // True if removeing from multiple users
          _screens = [_showManageAPIKeys],
          _numScreen,
          _action;
      
      // --------------------------------------------------------
      function _clear() {
        _numScreen = null;
        _$template.find('.dialog-screen').hide();
      }
      
      // --------------------------------------------------------
      function _reset() {
        _createUsersList();
        _isMultipleUsers = $.isArray(_usersList) && _usersList.length > 1;
      }
      
      // --------------------------------------------------------
      // Set _usersList to contain an array of emails
      function _createUsersList() {
        _usersList = [];
        for (var email in _users) {
          _usersList.push(email);
        }
      }
      
      // --------------------------------------------------------
      // Validates each screen before displaying the next
      function _showScreen(direction) {
        var num = _numScreen;
        
        _numScreen = 0;
        $('#' + _namespace + 'FinishBtn').show();
        _screens[_numScreen]();
        
      }
      
      // --------------------------------------------------------
      // Validates the user info as well as populates the _user object
      function _validate() {
        var screenID = _$template.find('.dialog-screen:visible').attr('id');
        
        // Validate the profile select screen
        if (screenID === (_namespace+'_manage_apikeys_screen')) {
          var $profileList = $('#'+_namespace+'_profile_list'),
              profileOption = $('#'+_namespace+'_profile_options :radio:checked').val();
          
          if (profileOption === 'profiles') {
            var profiles = $profileList.val();
            // Handle single select
            if (profiles && $.type(profiles) === 'string') {
              profiles = [profiles];
            }
            if (!$.isArray(profiles) || profiles.length === 0) {
              utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.no_manage_apikeysed'));
              $profileList.focus();
              return false;
            }
          }
        }
        
        return true;
      }
      
      // --------------------------------------------------------
      function _showManageAPIKeys() {
        _$template.find('#'+_namespace+'_manage_apikeys_screen').show();
        
        // Enable the first field
        _$template.find("input:text:visible:first").focus();
      }
      
      // --------------------------------------------------------
      // Add the content to the template
      var _render = {
        // ----------------------------------------------------
        ui: function() {
          if (_isMultipleUsers) {
            _render.context();
            _$template.find('.dialog-context-container').show();
          } else {
            _$template.find('.dialog-context-container').hide();
          }
          _render.content();
          _render.selectProfiles();
        },
        
        // ----------------------------------------------------
        context: function() {
          _$template.find('.dialog-context-body').html(_view.contextBody());
        },
        
        // ----------------------------------------------------
        content: function() {
          _$template.find('.dialog-content-body').html(_view.contentBody());
        },
        
        // ----------------------------------------------------
        selectProfiles:function() {
          _$template.find('#'+_namespace+'_manage_apikeys_screen').html(_view.selectProfiles());
          _bindUI.selectProfiles();
        }
      };
      
      // --------------------------------------------------------
      // Returns the content within the template
      var _view = {
        // ----------------------------------------------------
        contextBody: function() {
          var v = '';
          v += '<div class="dialog-context-title">' + localize.t('tiq.users.users') + '</div>';
          
          v += '<ul class="dialog-context-users">';
          
          for (var email in _users) {
            v += '  <li>';
            v += _getUserImage(_users[email], 'xsmall pull-left');
            v += _getUserName(_users[email]) || email;
            v += '  </li>';
          }
          
          v += '</ul>';
          
          return v;
        },
        
        // ----------------------------------------------------
        contentBody: function() {
          var v = '';
          
          v += '<div id="'+_namespace+'_manage_apikeys_screen" class="dialog-screen"></div>';
          return v;
        },
        
        // ----------------------------------------------------
        selectProfiles: function() {
          var v = '';
          
          v += '<div class="container-fluid manageapikeys-container">';
          v += '	<div class="row-fluid">';
          v += '		<div class="span10 offset1">';
          v += '			<div id="'+_namespace+'_apikey_options">';
          v += '				<h2>' + localize.t('tiq.users.edit_user.apikey.multi.select_action') + '</h2>';
          v += '				<div class="control-group">';
          v += '					<input type="radio" value="all" name="manageapikeys-group" id="' + _namespace + '-option-auth" checked="checked"/>';
          v += '					<label for="' + _namespace + '-option-auth">';
          v += '						<strong>' + localize.t('tiq.users.edit_user.apikey.multi.action_authorize') + '</strong><br /> <br />';
          v += '						<span class="desc">' + localize.t('tiq.users.edit_user.apikey.multi.action_authorize_desc') + '</span>';
          v += '					</label>';
          v += '				</div>';
          v += '				<div class="control-group">';
          v += '					<input type="radio" value="all" name="manageapikeys-group" id="' + _namespace + '-option-revoke" />';
          v += '					<label for="' + _namespace + '-option-auth">';
          v += '						<strong>' + localize.t('tiq.users.edit_user.apikey.multi.action_revoke') + '</strong><br /> <br />';
          v += '						<span class="desc">' + localize.t('tiq.users.edit_user.apikey.multi.action_revoke_desc') + '</span>';
          v += '					</label>';
          v += '				</div>';
          v += '			</div>';
          v += '		</div>';
          v += '	</div>';
          v += '</div>';
          
          return v;
        }
      };
      
      // --------------------------------------------------------
      // Binds the UI events
      var _bindUI = {
        // --------------------------------------------------------
        selectProfiles: function() {
          _$template.find('#'+_namespace+'_profile_options :radio').safeOn('change', _eventHandlers.onProfileOptionsChange);
          
          var $profileList = _$template.find('#'+_namespace+'_profile_list');
          
          if (_isMultipleUsers) {
            $profileList.select2({
              placeholder: localize.t('tiq.users.remove_profiles.confirm.select_profile'),
              minimumResultsForSearch: -1
            });
          } else {
            $profileList.select2({
              placeholder: localize.t('tiq.users.remove_profiles.confirm.select_profiles'),
              closeOnSelect: false,
              minimumResultsForSearch: -1
            });
          }
          
          $profileList.safeOn('change', _eventHandlers.onProfileListChange);
          $profileList.safeOn('select2-selecting', _dialogs.shared.eventHandlers.onProfileListSelect);
          
          // Add the selected profile as the default value
          var selectedProfile = _dialogs.userManager.getSelectedProfile();
          if (selectedProfile) {
            _$template.find('#'+_namespace+'_profile_list').select2('val',selectedProfile).trigger('change');
          }
        }
      };
      
      // --------------------------------------------------------
      // UI Event handlers
      var _eventHandlers = {
        
        // ----------------------------------------------------
        onSaveBtnClick: function() {
          _request.preformAction();
        },
        
        // ----------------------------------------------------
        onCancelBtnClick: function() {
          utui.ui.dialog.dispose(_namespace);
        }
      };
      
      // --------------------------------------------------------
      // Server API calls
      var _request = {
        // ----------------------------------------------------
        // Get the user data only if NOT in multi user mode
        getUser: function() {
          if (!_isMultipleUsers) {
            var email;
            for (email in _users) break;
            utui.util.showSpinner();
            
            var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username: email});
            utui.service.get(url, null, null, _response.onGetUserSuccess, _response.onGetUserError);
          } else {
            _response.onGetUserSuccess(utui.users.getCurrentUser());
          }
        },
        
        // ----------------------------------------------------
        preformAction: function() {
          utui.util.showSpinner();
          
          var url;
          
          _action = $("input[name='manageapikeys-group']:checked")[0].id;
          
          if (_action.indexOf("-option-auth") > -1) {
            utui.service.post(utui.service.restapis.API_KEY_AUTHORIZE, JSON.stringify(_usersList), utui.service.options.JSON, _response.onManageAPIKeySuccess, _response.onManageAPIKeyError);
          } else {
            utui.service.delete(utui.service.restapis.API_KEY_REVOKE, JSON.stringify(_usersList), utui.service.options.JSON, _response.onManageAPIKeySuccess, _response.onManageAPIKeyError);
          }
          
          
        }
      };
      
      // --------------------------------------------------------
      // Server API response handlers
      var _response = {
        // ------------------------------------------------------------
        onGetUserSuccess: function(data) {
          utui.util.hideSpinner();
          
          _render.ui();
          _showScreen();
        },
        
        // ------------------------------------------------------------
        onGetUserError: function(status, response){
          utui.util.hideSpinner();
          
          var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_get_profile_list'));
          utui.util.showMsgDialog(errorMsg, 'Error', function() {utui.ui.dialog.dispose(_namespace)});
        },
        
        // ----------------------------------------------------
        onManageAPIKeySuccess: function(data) {
          utui.util.hideSpinner();
          
          // utui.ui.dialog.dispose(_namespace);
  
          utui.ui.dialog.message.showSuccess(_namespace, localize.t('tiq.users.edit_user.apikey.multi.successful_action'));
          
        },
        
        // ----------------------------------------------------
        onManageAPIKeyError: function(status, response) {
          utui.util.hideSpinner();
          
          var _errTxt;
          
          if (_action.indexOf("-option-auth") > -1) {
            _errTxt = localize.t('tiq.users.error.apikey_error_auth');
          } else {
            _errTxt = localize.t('tiq.users.error.apikey_error_revoke');
          }
          
          var errorMsg = _getErrorFromResponse(response, _namespace, _errTxt);
          utui.ui.dialog.message.showError(_namespace, errorMsg);
        }
      };
      
      // Public API
      // Public API
      var _public = {
        // ----------------------------------------------------
        show: function(users, callback) {
          _users = users;
          _callback = callback;
          
          _clear();
          _reset();
          
          // Dialog buttons
          var buttons = [
            {
              text: localize.t('tiq.dialog.button.save'),
              click: _eventHandlers.onSaveBtnClick,
              id: _namespace + 'FinishBtn',
              class: 'nav-btn'
            },
            {
              text: localize.t('tiq.dialog.button.cancel'),
              click: _eventHandlers.onCancelBtnClick,
              style: 'float:left; margin-left: 12px',
              id: _namespace + 'CancelBtn'
            }
          ];
          
          // Show the dialog
          utui.ui.dialog.show(_namespace, localize.t('tiq.users.edit_user.apikey.multi.title', {count:_isMultipleUsers?2:1}), buttons, _$template, {width:(_isMultipleUsers ? 975 : 800)});
          
          _request.getUser();
        }
      };
      
      return _public;
    }(),
		
		// REMOVE PROFILE(s) FROM USER(s)
		removeProfilesFromUser: function() {
			// Private API
			var _namespace = 'remove_profiles_from_user_dialog',
				_$template = utui.ui.dialog.body(false, true),
				_users,             // Users to remove profiles from
				_usersList,         // Users array of emails
				_callback,          // Method to call when complete
				_profilesList,      // List of profiles to display in profile drop down
				_profilesSelected,	// List of selected profiles in the profile drop down (select2)
				_isMultipleUsers,   // True if removeing from multiple users
				_screens = [_showSelectedProfiles, _showConfirm],
				_numScreen;

			// --------------------------------------------------------
			function _clear() {
				_profilesList = [];
				_profilesSelected = [];
				_numScreen = null;
				_$template.find('.dialog-screen').hide();
			}

			// --------------------------------------------------------
			function _reset() {
				_createUsersList();
				_isMultipleUsers = $.isArray(_usersList) && _usersList.length > 1;
			}

			// --------------------------------------------------------
			// Set _usersList to contain an array of emails
			function _createUsersList() {
				_usersList = [];
				for (var email in _users) {
					_usersList.push(email);
				}
			}

			// --------------------------------------------------------
			// Validates each screen before displaying the next
			function _showScreen(direction) {
				var num = _numScreen

				if (direction === 'next') {
					if (_validate()) {
						_numScreen ++;
					} else {
						return;
					}
				} else if (direction === 'previous') {
					_numScreen --;

				} else {
					_numScreen = 0;
				}

				// Show the screen if different
				if (num !== _numScreen) {
					// Hide any dialog message
					utui.ui.dialog.message.hide(_namespace);

					// Hide all screens and nav buttons
					_$template.find('.dialog-screen').hide();
					_$template.closest('.ui-dialog').find('.nav-btn').hide();

					_screens[_numScreen]();

					// Show the nav buttons
					if (_numScreen === 0) {
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen < _screens.length-1) {
						$('#' + _namespace + 'PreviousBtn').show();
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen === _screens.length-1) {
						$('#' + _namespace + 'FinishBtn').show();
						$('#' + _namespace + 'PreviousBtn').show();
					}
				}
			}

			// --------------------------------------------------------
			// Validates the user info as well as populates the _user object
			function _validate() {
				var screenID = _$template.find('.dialog-screen:visible').attr('id');

				// Validate the profile select screen
				if (screenID === (_namespace+'_profile_select_screen')) {
					var $profileList = $('#'+_namespace+'_profile_list'),
						profileOption = $('#'+_namespace+'_profile_options :radio:checked').val();

					if (profileOption === 'profiles') {
						var profiles = $profileList.val();
						// Handle single select
						if (profiles && $.type(profiles) === 'string') {
							profiles = [profiles];
						}
						if (!$.isArray(profiles) || profiles.length === 0) {
							utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.no_profile_selected'));
							$profileList.focus();
							return false;
						}
					}
				}

				return true;
			}

			// --------------------------------------------------------
			function _showSelectedProfiles() {
				_$template.find('#'+_namespace+'_profile_select_screen').show();

				// Enable the first field
				_$template.find("input:text:visible:first").focus();
			}

			// --------------------------------------------------------
			function _showConfirm() {
				// Re-render the confirmation view
				_render.confirm();

				_$template.find('#'+_namespace+'_confirm_screen').show();
			}

			// --------------------------------------------------------
			// Add the content to the template
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					if (_isMultipleUsers) {
						_render.context();
						_$template.find('.dialog-context-container').show();
					} else {
						_$template.find('.dialog-context-container').hide();
					}
					_render.content();
					_render.selectProfiles();
					_render.confirm();
				},

				// ----------------------------------------------------
				context: function() {
					_$template.find('.dialog-context-body').html(_view.contextBody());
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-footer').html(_view.contentFooter());
				},

				// ----------------------------------------------------
				selectProfiles:function() {
					_$template.find('#'+_namespace+'_profile_select_screen').html(_view.selectProfiles());
					_bindUI.selectProfiles();
				},

				// ----------------------------------------------------
				confirm:function() {
					_$template.find('#'+_namespace+'_confirm_screen').html(_view.confirm());
				}
			};

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				// ----------------------------------------------------
				contextBody: function() {
					var v = '';
					v += '<div class="dialog-context-title">' + localize.t('tiq.users.users') + '</div>';

					v += '<ul class="dialog-context-users">';

					for (var email in _users) {
						v += '  <li>';
						v += _getUserImage(_users[email], 'xsmall pull-left');
						v += _getUserName(_users[email]) || email;
						v += '  </li>';
					}

					v += '</ul>';

					return v;
				},

				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div id="'+_namespace+'_profile_select_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_confirm_screen" class="dialog-screen"></div>';

					return v;
				},

				// ----------------------------------------------------
				contentFooter: function() {
					var v = '';

					v += _dialogs.shared.view.iconLegend(_namespace);

					return v;
				},

				// ----------------------------------------------------
				selectProfiles: function() {
					var v = '',
						headerContent,
						userName;

					if (_isMultipleUsers) {
						userName = '<span class="blue username">' + localize.t('tiq.users.users') + '</span>';
						headerContent = '<h1 class="headline">' + localize.t('tiq.users.remove_profiles.profile.title', {username:userName, count:1}) + '</h1>';
					} else {
						userName = '<span class="blue username">' + _usersList[0] + '</span>';
						headerContent = '<h1 class="headline">' + localize.t('tiq.users.remove_profiles.profile.title', {username:userName, count:2}) + '</h1>';
					}
					v += _dialogs.shared.view.dialogContentHeader(headerContent);

					v += '<div class="container-fluid assignprofile-container">';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1">';
					v += '			<div id="'+_namespace+'_profile_options">';
					v += '				<h2>' + localize.t('tiq.users.remove_profiles.profile.profile_options') + '</h2>';
					v += '				<div class="control-group">';
					v += '					<input type="radio" value="all" name="assignprofile-profilegroup" id="' + _namespace + '-option-all" />';
					v += '					<label for="' + _namespace + '-option-all">';
					v += '						<strong>' + localize.t('tiq.users.remove_profiles.profile.all_profiles.title') + '</strong><br />';
					v += '						<span class="desc">';
					if (_hasWildcardProfile()) {
						v += localize.t('tiq.users.remove_profiles.profile.all_profiles.desc_wildcard');
					} else {
						v += localize.t('tiq.users.remove_profiles.profile.all_profiles.desc');
					}
					v += '                      </span>';
					v += '					</label>';
					v += '				</div>';
					v += '				<div class="control-group">';
					v += '					<input type="radio" value="profiles" name="assignprofile-profilegroup" id="' + _namespace + '-option-profiles" checked="checked" />';
					v += '					<label for="' + _namespace + '-option-profiles">';
					v += '						<strong>' + localize.t('tiq.users.remove_profiles.profile.select_profiles.title', {count:_isMultipleUsers?2:1}) + '</strong><br />';

					if (_isMultipleUsers) {
						v += '						<span class="desc">' + localize.t('tiq.users.remove_profiles.profile.select_profiles.desc_multiple') + '</span>';
					} else {
						v += '						<span class="desc">' + localize.t('tiq.users.remove_profiles.profile.select_profiles.desc') + '</span>';
					}

					v += '					</label>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1" style="margin-top:10px;">';
					v += '			<div id="'+_namespace+'_profile_list_container">';
					v += '				<h2>' + localize.t('tiq.users.remove_profiles.profile.profile_list') + '</h2>';

					if (_isMultipleUsers) {
						v += '				<select id="'+_namespace+'_profile_list"><option value=""></option>';
					} else {
						v += '				<select id="'+_namespace+'_profile_list" multiple>';
					}

					// populate the profiles from the current user
					v += _dialogs.shared.view.getProfileListOptions(utui.users.getCurrentUser(), _profilesList);

					v += '				</select>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				confirm: function() {
					var v = '',
						headerContent,
						userName = '<span class="blue">' + (_isMultipleUsers ? localize.t('tiq.users.users') : _usersList[0]) + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.remove_profiles.confirm.title', {username:userName, count:_isMultipleUsers?2:1}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);

					v += '<div class="utui-permissions-container utui-table">';
					v += '  <div class="utui-table-header">';
					v += '  	<div class="row-fluid">';
					v += '  		<div class="span12 alignleft">';
					v += '  			<div class="utui-table-header-data"><strong>' + localize.t('tiq.users.remove_profiles.confirm.profile') + '</strong></div>';
					v += '  		</div>';
					v += '  	</div>';
					v += '  </div>';

					v += '	<div class="utui-table-body">';

					for (var i=0; i<_profilesSelected.length; i++) {
						var profile = _profilesSelected[i],
							profileName = profile === '*' ? localize.t('tiq.users.remove_profiles.confirm.all_profiles') : profile;

						v += '		<div class="utui-table-row profile-permissions">';
						v += '			<input type="hidden" name="profile" value="'+profile+'" />';
						v += '			<div class="row-fluid">';
						v += '				<div class="span12">';
						v += '					<div class="utui-table-title">'+profileName+'</div>';
						v += '				</div>';
						v += '			</div>';
						v += '		</div>';
					}
					v += '	</div>';
					v += '<div>';

					return v;
				}
			}

			// --------------------------------------------------------
			// Binds the UI events
			var _bindUI = {
				// --------------------------------------------------------
				selectProfiles: function() {
					_$template.find('#'+_namespace+'_profile_options :radio').safeOn('change', _eventHandlers.onProfileOptionsChange);

					var $profileList = _$template.find('#'+_namespace+'_profile_list');

					if (_isMultipleUsers) {
						$profileList.select2({
							placeholder: localize.t('tiq.users.remove_profiles.confirm.select_profile'),
							minimumResultsForSearch: -1
						});
					} else {
						$profileList.select2({
							placeholder: localize.t('tiq.users.remove_profiles.confirm.select_profiles'),
							closeOnSelect: false,
							minimumResultsForSearch: -1
						});
					}

					$profileList.safeOn('change', _eventHandlers.onProfileListChange);
					$profileList.safeOn('select2-selecting', _dialogs.shared.eventHandlers.onProfileListSelect);

					// Add the selected profile as the default value
					var selectedProfile = _dialogs.userManager.getSelectedProfile();
					if (selectedProfile) {
						_$template.find('#'+_namespace+'_profile_list').select2('val',selectedProfile).trigger('change');
					}
				}
			};

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				// Enables/Disables the profile select list depending on which option is selected
				onProfileOptionsChange: function() {
					var option = $(this).val(),
						$profileList = $('#'+_namespace+'_profile_list'),
						enabled = false;

					if (option === 'all') {
						_profilesSelected = ['*'];

					} else {
						_profilesSelected = [];
						enabled = true;
					}
					$profileList.select2('val', _profilesSelected);
					$profileList.select2('enable', enabled);
				},

				// ----------------------------------------------------
				onProfileListChange: function(event) {
					var profiles = $(this).val() || [];

					if ($.type(profiles) === 'string') {
						profiles = [profiles];
					}

					// Sort the profiles
					_sortList(profiles);
					_profilesSelected = profiles;
				},

				// ----------------------------------------------------
				onRemoveBtnClick: function() {
					_request.removeProfiles();
				},

				// ----------------------------------------------------
				onNextBtnClick: function() {
					_showScreen('next');
				},

				// ----------------------------------------------------
				onPreviousBtnClick: function() {
					_showScreen('previous');
				},

				// ----------------------------------------------------
				onCancelBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				// Get the user data only if NOT in multi user mode
				getUser: function() {
					if (!_isMultipleUsers) {
						var email;
						for (email in _users) break;
						utui.util.showSpinner();

						var url = _addParamsToURL(utui.service.restapis.USERS_ACCOUNT, {username: email});
						utui.service.get(url, null, null, _response.onGetUserSuccess, _response.onGetUserError);
					} else {
						_response.onGetUserSuccess(utui.users.getCurrentUser());
					}
				},

				// ----------------------------------------------------
				removeProfiles: function() {
					utui.util.showSpinner();

					var url = _addParamsToURL(utui.service.restapis.USERS_REMOVE_ALL_PROFILE_PERMISSIONS),
						data = {emails:_usersList, profiles:_profilesSelected};

					utui.service.put(url, JSON.stringify(data), utui.service.options.JSON, _response.onRemoveProfilesSuccess, _response.onRemoveProfilesError);
				}
			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ------------------------------------------------------------
				onGetUserSuccess: function(data) {
					utui.util.hideSpinner();

					_profilesList = _getProfilesFromUser(data);
					_render.ui();
					_showScreen();
				},

				// ------------------------------------------------------------
				onGetUserError: function(status, response){
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_get_profile_list'));
					utui.util.showMsgDialog(errorMsg, 'Error', function() {utui.ui.dialog.dispose(_namespace)});
				},

				// ----------------------------------------------------
				onRemoveProfilesSuccess: function(data) {
					utui.util.hideSpinner();

					if (_callback) {
						_callback();
					}

					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onRemoveProfilesError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_remove_profiles'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(users, callback) {
					_users = users;
					_callback = callback;

					_clear();
					_reset();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.remove'),
							click: _eventHandlers.onRemoveBtnClick,
							id: _namespace + 'FinishBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: localize.t('tiq.dialog.button.next'),
							click: _eventHandlers.onNextBtnClick,
							id: _namespace + 'NextBtn',
							class: 'nav-btn'
						},
						{
							text: localize.t('tiq.dialog.button.previous'),
							click: _eventHandlers.onPreviousBtnClick,
							id: _namespace + 'PreviousBtn',
							style: 'display:none;',
							class: 'nav-btn'
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CancelBtn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.remove_profiles.title', {count:_isMultipleUsers?2:1}), buttons, _$template, {width:(_isMultipleUsers ? 975 : 800)});

					_request.getUser();
				}
			};

			return _public;
		}(),

		// ------------------------------------------------------------
		// BULK USER - ADD/REMOVE PROFILE PERMISSIONS
		addRemoveProfilePermissions: function() {
			// Private API
			var _namespace = 'add_remove_profile_permissions_dialog',
				_$template = utui.ui.dialog.body(false, true),
				_users,             // Users to add/remove profile permissions from
				_usersList,         // Users array of emails
				_isAdd,             // true if adding permissions and false if removing
				_user,			    // User object that is constructed as user selects options
				_callback,		    // Method to call upon success of adding user
				_profilesObj = {},  // {profileName:profile:profileName,permissions:[],...}
				_loggedInUser,      // Contains the current logged in user
				_screens = [_showProfileSelect, _showProfilePermissions, _showConfirm],
				_numScreen;

			// --------------------------------------------------------
			function _clear() {
				_user = null;
				_profilesObj = {};
				_numScreen = null;
				_$template.find('.dialog-screen').hide();
			}

			// --------------------------------------------------------
			function _reset() {
				_createUsersList();
			}

			// --------------------------------------------------------
			// Set _usersList to contain an array of emails
			function _createUsersList() {
				_usersList = [];
				for (var email in _users) {
					_usersList.push(email);
				}
			}

			// --------------------------------------------------------
			// Validates each screen before displaying the next
			function _showScreen(direction) {
				var num = _numScreen;

				if (direction === 'next') {
					if (_validate()) {
						_numScreen ++;
					} else {
						return;
					}
				} else if (direction === 'previous') {
					_numScreen --;

				} else {
					_numScreen = 0;
				}

				// Show the screen if different
				if (num !== _numScreen) {
					// Hide any dialog message
					utui.ui.dialog.message.hide(_namespace);

					// Hide all screens and nav buttons
					_$template.find('.dialog-screen').hide();
					_$template.closest('.ui-dialog').find('.nav-btn').hide();

					_screens[_numScreen]();

					// Show the nav buttons
					if (_numScreen === 0) {
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen < _screens.length-1) {
						$('#' + _namespace + 'PreviousBtn').show();
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen === _screens.length-1) {
						$('#' + _namespace + 'FinishBtn').show();
						$('#' + _namespace + 'PreviousBtn').show();
					}
				}
			}

			// --------------------------------------------------------
			// Validates the user info as well as populates the _user object
			function _validate() {
				var screenID = _$template.find('.dialog-screen:visible').attr('id');

				// Validate the profile select screen
				if (screenID === (_namespace+'_profile_select_screen')) {
					var $profileList = $('#'+_namespace+'_profile_list'),
						profileOption = $('#'+_namespace+'_profile_options :radio:checked').val();

					if (profileOption === 'profiles') {
						if (!$profileList.val()) {
							utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.no_profile_selected'));
							$profileList.focus();
							return false;
						}
					}

					// Validate profile permissions screen
				} else if (screenID === (_namespace+'_profile_permissions_screen')) {
					for (var key in _profilesObj) {
						if ($.isEmptyObject(_profilesObj[key].permissions)) {
							utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.no_permission_selected'));
							return false;
						}
					}
				}

				return true;
			}

			// --------------------------------------------------------
			function _showProfileSelect() {
				_$template.find('.dialog-content-footer').hide();
				_$template.find('#'+_namespace+'_profile_select_screen').show();

				// Enable the first field
				_$template.find("input:text:visible:first").focus();
			}

			// --------------------------------------------------------
			function _showProfilePermissions() {
				// Re-render the permissions view
				_render.profilePermissions();

				_$template.find('.dialog-content-footer').show();
				_$template.find('#'+_namespace+'_profile_permissions_screen').show();
			}

			// --------------------------------------------------------
			function _showConfirm() {
				// Re-render the confirmation view
				_render.confirm();

				_$template.find('.dialog-content-footer').show();
				_$template.find('#'+_namespace+'_confirm_screen').show();
			}

			// --------------------------------------------------------
			// Add the content to the template
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					_render.context();
					_render.content();
					_render.profileSelect();
				},

				// ----------------------------------------------------
				context: function() {
					_$template.find('.dialog-context-body').html(_view.contextBody());
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-footer').html(_view.contentFooter());
				},

				// ----------------------------------------------------
				profileSelect:function() {
					_$template.find('#'+_namespace+'_profile_select_screen').html(_view.profileSelect());
					_bindUI.profileSelect();
				},

				// ----------------------------------------------------
				profilePermissions: function() {
					var $context = _$template.find('#'+_namespace+'_profile_permissions_screen').html(_view.profilePermissions());
					_bindUI.profilePermissions();

					// Update badges if in remove mode
					if (!_isAdd) {
						$context.find('[class*="badge-"]').addClass('remove');
					}

					// Update to add all previous permissions
					var $groups = $context.find('.accordion-group');
					$.each($groups, function() {
						var $group = $(this),
							profile = $group.find('input[name="profile"]').val(),
							permissions = _profilesObj[profile].permissions;

						// Trigger clicked if permissions is present (this will update the badges)
						for (var i=0; i<permissions.length; i++) {
							$group.find('input[value="' + permissions[i] + '"]').trigger('click');
						}

						// Disable checkboxes that the user does NOT have permissions to assign
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_USERS, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_USERS+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_TEMPLATES, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_TEMPLATES+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.MANAGE_SECURE_LABELS, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.MANAGE_SECURE_LABELS+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.SAVE_PROFILE, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.SAVE_PROFILE+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.COPY, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.COPY+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_DEV, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_DEV+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_QA, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_QA+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.PUBLISH_PROD, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.PUBLISH_PROD+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_DEV, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_DEV+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_QA, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_QA+'"]').attr('disabled','disabled');
						if (!utui.permissions.hasUserPermission(utui.permissions.JS_DRAFT_PROMOTION_PROD, profile, _loggedInUser)) $group.find('input[name="'+utui.permissions.JS_DRAFT_PROMOTION_PROD+'"]').attr('disabled','disabled');
					});

					// Add tooltips
					_dialogs.shared.addToolTips($context);
				},

				// ----------------------------------------------------
				confirm:function() {
					var $context = _$template.find('#'+_namespace+'_confirm_screen').html(_view.confirm());

					// Update badges if in remove mode
					if (!_isAdd) {
						$context.find('[class*="badge-"]').addClass('remove');
					}

					// Update the profile badges
					var $groups = $context.find('.profile-permissions');
					$.each($groups, function() {
						var $group = $(this),
							profile = $group.find('input[name="profile"]').val(),
							permissions = _profilesObj[profile].permissions;

						if ($.inArray(utui.permissions.MANAGE_USERS, permissions) > -1) $group.find('.users-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
						if ($.inArray(utui.permissions.MANAGE_TEMPLATES, permissions) > -1) $group.find('.templates-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
						if ($.inArray(utui.permissions.MANAGE_SECURE_LABELS, permissions) > -1) $group.find('.labels-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');

						var canSaveProfile = $.inArray(utui.permissions.SAVE_PROFILE, permissions) > -1,
							canCopy = $.inArray(utui.permissions.COPY, permissions) > -1,
							versionsBadge = (canSaveProfile && canCopy ? 'full' : canSaveProfile || canCopy ? 'partial' : 'empty');

						$group.find('.versions-badge').removeClass('badge-circle-empty').addClass('badge-circle-'+versionsBadge);

						if ($.inArray(utui.permissions.PUBLISH_DEV, permissions) > -1) $group.find('.dev-badge').removeClass('badge-env-inactive').addClass('badge-env-active');
						if ($.inArray(utui.permissions.PUBLISH_QA, permissions) > -1) $group.find('.qa-badge').removeClass('badge-env-inactive').addClass('badge-env-active');
						if ($.inArray(utui.permissions.PUBLISH_PROD, permissions) > -1) $group.find('.prod-badge').removeClass('badge-env-inactive').addClass('badge-env-active');
            
            versionsBadge = (canSaveProfile && canCopy ? 'full' : canSaveProfile || canCopy ? 'partial' : 'empty');
            
            $group.find('.versions-badge').removeClass('badge-circle-empty').addClass('badge-circle-'+versionsBadge);
            
            var devPromote  = $.inArray(utui.permissions.JS_DRAFT_PROMOTION_DEV, permissions) !== -1,
                qaPromote   = $.inArray(utui.permissions.JS_DRAFT_PROMOTION_QA, permissions) !== -1,
                prodPromote = $.inArray(utui.permissions.JS_DRAFT_PROMOTION_PROD, permissions) !== -1;
            
            if (devPromote && qaPromote && prodPromote) {
              $group.find('.js-promotion-badge').removeClass('badge-circle-empty').addClass('badge-circle-full');
						} else if (devPromote || qaPromote || prodPromote) {
              $group.find('.js-promotion-badge').removeClass('badge-circle-empty').addClass('badge-circle-partial');
						}
						
					});
				}
			};

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				contextBody: function() {
					var v = '';
					v += '<div class="dialog-context-title">' + localize.t('tiq.users.users') + '</div>';

					v += '<ul class="dialog-context-users">';

					for (var email in _users) {
						v += '  <li>';
						v += _getUserImage(_users[email], 'xsmall pull-left');
						v += _getUserName(_users[email]) || email;
						v += '  </li>';
					}

					v += '</ul>';

					return v;
				},

				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div id="'+_namespace+'_profile_select_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_profile_permissions_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_confirm_screen" class="dialog-screen"></div>';

					return v;
				},

				// ----------------------------------------------------
				contentFooter: function() {
					var v = '';

					v += _dialogs.shared.view.iconLegend(_namespace);

					return v;
				},

				// ----------------------------------------------------
				profileSelect: function() {
					var v = '',
						headerContent,
						profiles = _getProfilesFromUser(),
						action = _isAdd ? 'add' : 'remove',
						hasWildCardProfile = _hasWildcardProfile(),
						userName = '<span class="blue username">' + localize.t('tiq.users.users') + '</span>',
						key = _isAdd? 'title' : "title_remove_from";

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.' + key, {username:userName}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);

					v += '<div class="container-fluid assignprofile-container">';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1">';
					v += '			<div id="'+_namespace+'_profile_options">';
					v += '				<h2>' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.profile_options') + '</h2>';

					// Only show this option if the user has the wildcard profile
					if (_loggedInUser.profiles['*']) {
						v += '				<div class="control-group">';
						v += '					<input type="radio" value="all" name="assignprofile-profilegroup" id="' + _namespace + '-option-all" />';
						v += '					<label for="' + _namespace + '-option-all">';

						if (hasWildCardProfile && _isAdd) {
							v += '						<strong>' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.wildcard.title') + '</strong><br />';
							v += '						<span class="desc">' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.wildcard.desc_'  + action) + '</span>';
						} else {
							v += '						<strong>' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.all_profiles.title') + '</strong><br />';
							v += '						<span class="desc">' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.all_profiles.desc_' + action);
							if (_isAdd) {
								if (!hasWildCardProfile) {
									v += localize.t('tiq.users.add_remove_profile_permissions.profile_select.all_profiles.desc2_add_not_wildcard');
								}
							} else {
								if (hasWildCardProfile) {
									v += localize.t('tiq.users.add_remove_profile_permissions.profile_select.all_profiles.desc2_remove_wildcard');
								} else {
									v += localize.t('tiq.users.add_remove_profile_permissions.profile_select.all_profiles.desc2_remove_not_wildcard');
								}
							}
							v += '                      </span>';
						}

						v += '					</label>';
						v += '				</div>';
					}

					v += '				<div class="control-group">';
					v += '					<input type="radio" value="profiles" name="assignprofile-profilegroup" id="' + _namespace + '-option-profiles" checked="checked" />';
					v += '					<label for="' + _namespace + '-option-profiles">';
					v += '						<strong>' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.select_profile.title') + '</strong><br />';
					v += '						<span class="desc">' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.select_profile.desc_' + action) + '</span>';
					v += '					</label>';
					v += '				</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '	<div class="row-fluid">';
					v += '		<div class="span10 offset1" style="margin-top:10px;">';
					v += '			<div id="'+_namespace+'_profile_list_container">';
					v += '				<h2>' + localize.t('tiq.users.add_remove_profile_permissions.profile_select.profile_list') + '</h2>';
					v += '				<select id="'+_namespace+'_profile_list"><option value=""></option>';

					// populate the profiles from the current user
					v += _dialogs.shared.view.getProfileListOptions(utui.users.getCurrentUser(), profiles);

					v += '				</select>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				profilePermissions: function() {
					var v = '',
						headerContent,
						userName = '<span class="blue">' + localize.t('tiq.users.users') + '</span>',
						key = _isAdd ? 'add' : 'remove';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.add_remove_profile_permissions.profile.title_' + key, {username:userName}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, true, 'profile', _getProfilesFromUser({profiles:_profilesObj}, true));

					return v;
				},

				// ----------------------------------------------------
				confirm: function() {
					var v = '',
						headerContent,
						userName = '<span class="blue">' + localize.t('tiq.users.users') + '</span>',
						key = _isAdd ? 'add' : 'remove';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.add_remove_profile_permissions.confirm.title_' + key, {username:userName}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, false, 'profile', _getProfilesFromUser({profiles:_profilesObj}, true));

					return v;
				}
			};

			// --------------------------------------------------------
			// Binds the UI events
			var _bindUI = {
				// --------------------------------------------------------
				profileSelect: function() {
					_$template.find('#'+_namespace+'_profile_options :radio').safeOn('change', _eventHandlers.onProfileOptionsChange);

					var $profileList = _$template.find('#'+_namespace+'_profile_list');

					$profileList.select2({
						placeholder: 'Select profile',
						minimumResultsForSearch: -1
					});

					$profileList.safeOn('change', _eventHandlers.onProfileListChange);
					$profileList.safeOn('select2-selecting', _dialogs.shared.eventHandlers.onProfileListSelect);

					// Add the selected profile as the default value
					var selectedProfile = _dialogs.userManager.getSelectedProfile();
					if (selectedProfile) {
						_$template.find('#'+_namespace+'_profile_list').select2('val',selectedProfile).trigger('change');
					}
				},

				// --------------------------------------------------------
				profilePermissions: function() {
					// Add functionality to Accordion
					var $accordion = _$template.find('.profile-permissions-accordion');
					$accordion.find('.accordion-toggle').safeOn('click', _dialogs.shared.eventHandlers.onAccordionClick);
					$accordion.find('.permission-checkbox').safeOn('change', _eventHandlers.onProfilePermissionsChange);
					$accordion.find('.select-all-permissions').safeOn('change', _eventHandlers.onSelectAllPermissionsChange);
					$accordion.find('.apply-permissions a').safeOn('click', _eventHandlers.onApplyPermissionsToSelectedProfilesClick);

					// Open the first accordion
					_$template.find('.profile-permissions-accordion .accordion-toggle').first().trigger('click');
				}
			};

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				// Enables/Disables the profile select list depending on which option is selected
				onProfileOptionsChange: function() {
					var option = $(this).val(),
						$profileList = $('#'+_namespace+'_profile_list'),
						enabled = false;

					if (option === 'all') {
						_profilesObj = {};
						_profilesObj['*'] = {
							profile:'*',
							permissions:[]
						}

					} else {
						delete _profilesObj['*'];
						enabled = true;
					}
					$profileList.select2('val', []);
					$profileList.select2('enable', enabled);
				},

				// ----------------------------------------------------
				onProfileListChange: function(event) {
					var profile = $(this).val() || '';

					_profilesObj = {};
					if (profile !== '') {
						_profilesObj[profile] = {profile:profile, permissions:[]};
					}
				},

				// ----------------------------------------------------
				onProfilePermissionsChange: function() {
					_dialogs.shared.onProfilesPermissionsChange($(this), _profilesObj);
				},

				// ----------------------------------------------------
				onApplyPermissionsToSelectedProfilesClick: function() {
					_dialogs.shared.onApplyPermissionsToSelectedProfiles(this, _profilesObj);
				},

				// ----------------------------------------------------
				onSelectAllPermissionsChange: function() {
					_dialogs.shared.onSelectAllPermissionsChange($(this));
				},

				// ----------------------------------------------------
				onFinishBtnClick: function() {
					_request.updatePermissions();
				},

				// ----------------------------------------------------
				onNextBtnClick: function() {
					_showScreen('next');
				},

				// ----------------------------------------------------
				onPreviousBtnClick: function() {
					_showScreen('previous');
				},

				// ----------------------------------------------------
				onCancelBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				updatePermissions: function() {
					utui.util.showSpinner();

					var api = _isAdd ? utui.service.restapis.USERS_ADD_PROFILE_PERMISSIONS : utui.service.restapis.USERS_REMOVE_PROFILE_PERMISSIONS,
						url = _addParamsToURL(api),
						data = {emails:_usersList, profiles:_profilesObj};

					utui.service.put(url, JSON.stringify(data), utui.service.options.JSON, _response.onUpdatePermissionsSuccess, _response.onUpdatePermissionsError);

				}
			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ----------------------------------------------------
				onUpdatePermissionsSuccess: function(data) {
					utui.util.hideSpinner();

					if (_callback) {
						_callback();
					}

					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onUpdatePermissionsError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_' + (_isAdd ? 'add' : 'remove') + '_permissions'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(users, isAdd, callback) {
					_users = users;
					_isAdd = isAdd;
					_callback = callback;

					// Give the logged in user wildcard profile if they don't have just so they can use the All Profiles option
					_loggedInUser = _dialogs.shared.assignPermisionsAfterExclusions(utui.users.getCurrentUser());

					_clear();
					_reset();

					_user = utui.users.getCurrentUser();

					_render.ui();

					// Dialog buttons
					var buttons = [
						{
							text: 'Finish',
							click: _eventHandlers.onFinishBtnClick,
							id: _namespace + 'FinishBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: 'Next',
							click: _eventHandlers.onNextBtnClick,
							id: _namespace + 'NextBtn',
							class: 'nav-btn'
						},
						{
							text: 'Previous',
							click: _eventHandlers.onPreviousBtnClick,
							id: _namespace + 'PreviousBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: 'Cancel',
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CancelBtn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.add_remove_profile_permissions.title_' + (_isAdd ? 'add' : 'remove')), buttons, _$template, {width:975});

					_showScreen();
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		// BULK USER - ADD/REMOVE ACCOUNT PERMISSIONS
		addRemoveAccountPermissions: function() {
			// Private API
			var _namespace = 'add_remove_account_permissions_dialog',
				_$template = utui.ui.dialog.body(false, true),
				_users,             // Users to add/remove account permissions from
				_usersList,         // Users array of emails
				_isAdd,
				_callback,
				_user,
				_permissions = [],
				_screens = [_showAccountPermissions, _showConfirm],
				_numScreen;

			// --------------------------------------------------------
			function _clear() {
				_user = null;
				_permissions = [];
				_numScreen = null;
				_$template.find('.dialog-screen').hide();
			}

			// --------------------------------------------------------
			function _reset() {
				_createUsersList();
			}

			// --------------------------------------------------------
			// Set _usersList to contain an array of emails
			function _createUsersList() {
				_usersList = [];
				for (var email in _users) {
					_usersList.push(email);
				}
			}

			// --------------------------------------------------------
			// Validates each screen before displaying the next
			function _showScreen(direction) {
				var num = _numScreen;

				if (direction === 'next') {
					if (_validate()) {
						_numScreen ++;
					} else {
						return;
					}
				} else if (direction === 'previous') {
					_numScreen --;

				} else {
					_numScreen = 0;
				}

				// Show the screen if different
				if (num !== _numScreen) {
					// Hide any dialog message
					utui.ui.dialog.message.hide(_namespace);

					// Hide all screens and nav buttons
					_$template.find('.dialog-screen').hide();
					_$template.closest('.ui-dialog').find('.nav-btn').hide();

					_screens[_numScreen]();

					// Show the nav buttons
					if (_numScreen === 0) {
						$('#' + _namespace + 'NextBtn').show();

					} else if (_numScreen === 1) {
						$('#' + _namespace + 'FinishBtn').show();
						$('#' + _namespace + 'PreviousBtn').show();
					}
				}
			}

			// --------------------------------------------------------
			// Validates the user info as well as populates the _user object
			function _validate() {
				var screenID = _$template.find('.dialog-screen:visible').attr('id');

				// Validate account permissions screen
				if (screenID === (_namespace+'_account_permissions_screen')) {
					if ($.isEmptyObject(_permissions)) {
						utui.ui.dialog.message.showError(_namespace, localize.t('tiq.users.error.no_permission_selected'));
						return false;
					}
				}

				return true;
			}

			// --------------------------------------------------------
			function _showAccountPermissions() {
				_$template.find('#'+_namespace+'_account_permissions_screen').show();
			}

			// --------------------------------------------------------
			function _showConfirm() {
				// Re-render the confirmation view
				_render.confirm();

				_$template.find('#'+_namespace+'_confirm_screen').show();
			}

			// --------------------------------------------------------
			// Add the content to the template
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					_render.context();
					_render.content();
					_render.accountPermissions();
					_render.confirm();
				},

				// ----------------------------------------------------
				context: function() {
					_$template.find('.dialog-context-body').html(_view.contextBody());
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.contentBody());
					_$template.find('.dialog-content-footer').html(_view.contentFooter());
				},

				// ----------------------------------------------------
				accountPermissions: function() {
					var $context = _$template.find('#'+_namespace+'_account_permissions_screen').html(_view.accountPermissions());
					_bindUI.accountPermissions();

					// Update badges if in remove mode
					if (!_isAdd) {
						$context.find('[class*="badge-"]').addClass('remove');
					}

					// Disable the checkboxes that the user does NOT have permissions to assign
					if (!utui.permissions.canManageAccount()) $context.find('input[name="'+utui.permissions.MANAGE_ACCOUNT+'"]').attr('disabled','disabled');
					if (!utui.permissions.canManageAudit()) $context.find('input[name="'+utui.permissions.MANAGE_AUDIT+'"]').attr('disabled','disabled');
					if (!utui.permissions.canCreateProfile()) $context.find('input[name="'+utui.permissions.CREATE_PROFILE+'"]').attr('disabled','disabled');
					if (!utui.permissions.canEditJavascriptExtensions()) $context.find('input[name="'+utui.permissions.EXTENSIONS_JAVASCRIPT+'"]').attr('disabled','disabled');

					// Add tooltips
					_dialogs.shared.addToolTips($context);
				},

				// ----------------------------------------------------
				confirm:function() {
					var $context = _$template.find('#'+_namespace+'_confirm_screen').html(_view.confirm());

					// Update badges if in remove mode
					if (!_isAdd) {
						$context.find('[class*="badge-"]').addClass('remove');
					}

					// Update the account badges
					_dialogs.shared.updateAccountBadges($context, _permissions);
				}
			};

			// --------------------------------------------------------
			// Returns the content within the template
			var _view = {
				contextBody: function() {
					var v = '';
					v += '<div class="dialog-context-title">' + localize.t('tiq.users.users') + '</div>';

					v += '<ul class="dialog-context-users">';

					for (var email in _users) {
						v += '  <li>';
						v += _getUserImage(_users[email], 'xsmall pull-left');
						v += _getUserName(_users[email]) || email;
						v += '  </li>';
					}

					v += '</ul>';

					return v;
				},

				// ----------------------------------------------------
				contentBody: function() {
					var v = '';

					v += '<div id="'+_namespace+'_account_permissions_screen" class="dialog-screen"></div>';
					v += '<div id="'+_namespace+'_confirm_screen" class="dialog-screen"></div>';

					return v;
				},

				// ----------------------------------------------------
				contentFooter: function() {
					var v = '';

					v += _dialogs.shared.view.iconLegend(_namespace);

					return v;
				},

				// ----------------------------------------------------
				accountPermissions: function() {
					var v = '',
						headerContent,
						userName = '<span class="blue">' + localize.t('tiq.users.users') + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.add_remove_account_permissions.account.title_' + (_isAdd ? 'add' : 'remove'), {username:userName}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, true, 'account', [utui.login.account]);

					return v;
				},

				// ----------------------------------------------------
				confirm: function() {
					var v = '',
						headerContent,
						userName = '<span class="blue">' + localize.t('tiq.users.users') + '</span>';

					headerContent = '<h1 class="headline">' + localize.t('tiq.users.add_remove_account_permissions.confirm.title_' + (_isAdd ? 'add' : 'remove'), {username:userName}) + '</h1>';
					v += _dialogs.shared.view.dialogContentHeader(headerContent);
					v += _dialogs.shared.view.permissionsContainer(_namespace, false, 'account', [utui.login.account]);

					return v;
				}
			};

			// --------------------------------------------------------
			// Binds the UI events
			var _bindUI = {
				// --------------------------------------------------------
				accountPermissions: function() {
					// Add functionality to Accordion
					var $accordion = _$template.find('.account-permissions-accordion');
					$accordion.find('.accordion-toggle').safeOn('click', _dialogs.shared.eventHandlers.onAccordionClick);
					$accordion.find('.permission-checkbox').safeOn('change', _eventHandlers.onAccountPermissionsChange);
					$accordion.find('.select-all-permissions').safeOn('change', _eventHandlers.onSelectAllPermissionsChange);

					// Open the accordion
					_$template.find('.account-permissions-accordion .accordion-toggle').trigger('click');
				}
			};

			// --------------------------------------------------------
			// UI Event handlers
			var _eventHandlers = {
				// ----------------------------------------------------
				onAccountPermissionsChange: function() {
					_permissions = _dialogs.shared.onAccountPermissionsChange($(this));
				},

				// ----------------------------------------------------
				onSelectAllPermissionsChange: function() {
					_dialogs.shared.onSelectAllPermissionsChange($(this));
				},

				// ----------------------------------------------------
				onFinishBtnClick: function() {
					_request.updatePermissions();
				},

				// ----------------------------------------------------
				onNextBtnClick: function() {
					_showScreen('next');
				},

				// ----------------------------------------------------
				onPreviousBtnClick: function() {
					_showScreen('previous');
				},

				// ----------------------------------------------------
				onCancelBtnClick: function() {
					utui.ui.dialog.dispose(_namespace);
				}
			};

			// --------------------------------------------------------
			// Server API calls
			var _request = {
				// ----------------------------------------------------
				updatePermissions: function() {
					utui.util.showSpinner();

					var api = _isAdd ? utui.service.restapis.USERS_ADD_ACCOUNT_PERMISSIONS : utui.service.restapis.USERS_REMOVE_ACCOUNT_PERMISSIONS,
						url = _addParamsToURL(api),
						data = {emails:_usersList, permissions:_permissions};

					utui.service.put(url, JSON.stringify(data), utui.service.options.JSON, _response.onUpdatePermissionsSuccess, _response.onUpdatePermissionsError);
				}
			};

			// --------------------------------------------------------
			// Server API response handlers
			var _response = {
				// ----------------------------------------------------
				onUpdatePermissionsSuccess: function(data) {
					utui.util.hideSpinner();

					if (_callback) {
						_callback();
					}

					utui.ui.dialog.dispose(_namespace);
				},

				// ----------------------------------------------------
				onUpdatePermissionsError: function(status, response) {
					utui.util.hideSpinner();

					var errorMsg = _getErrorFromResponse(response, _namespace, localize.t('tiq.users.error.unable_to_' + (_isAdd ? 'add' : 'remove') + '_permissions'));
					utui.ui.dialog.message.showError(_namespace, errorMsg);
				}
			};

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function(users, isAdd, callback) {
					_users = users;
					_isAdd = isAdd;
					_callback = callback;

					_clear();
					_reset();

					_user = utui.users.getCurrentUser();

					_render.ui();

					// Dialog buttons
					var buttons = [
						{
							text: 'Finish',
							click: _eventHandlers.onFinishBtnClick,
							id: _namespace + 'FinishBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: 'Next',
							click: _eventHandlers.onNextBtnClick,
							id: _namespace + 'NextBtn',
							class: 'nav-btn'
						},
						{
							text: 'Previous',
							click: _eventHandlers.onPreviousBtnClick,
							id: _namespace + 'PreviousBtn',
							class: 'nav-btn',
							style: 'display:none;'
						},
						{
							text: 'Cancel',
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px',
							id: _namespace + 'CancelBtn'
						}
					];

					// Show the dialog
					utui.ui.dialog.show(_namespace, localize.t('tiq.users.add_remove_account_permissions.title_' + (_isAdd ? 'add' : 'remove')), buttons, _$template, {width:975});

					_showScreen();
				}
			};

			return _public;
		}(),

		// ------------------------------------------------------------
		showConfigurePasswordDialog: function () {
			// Private API
			var _namespace = 'configurePasswordDialog_dialog',
				_$template = utui.ui.dialog.body(false, false);

			// --------------------------------------------------------
			var _render = {
				// ----------------------------------------------------
				ui: function() {
					_render.content();
				},

				// ----------------------------------------------------
				content: function() {
					_$template.find('.dialog-content-header').html(_view.contentHeader());
					_$template.find('.dialog-content-body').html(_view.contentBody());

					//_bindUI.global();
					_bindUI.fields();
					_bindUI.buttons();
					_bindUI.tooltip();
				}
			};

			// --------------------------------------------------------
			var _view = {
				// ----------------------------------------------------
				contentHeader: function() {
					var v = '';

					v += '<div class="dialog-content-headline valign-container">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '			<div class="span12">';
					v += '				<div class="dialog-content-headline-title">' + localize.t('tiq.users.configure_password.header') + '</div>';
					v += '			</div>';
					v += '		</div>';
					v += '	</div>';
					v += '</div>';

					return v;
				},

				// ----------------------------------------------------
				contentBody: function() {
					var mfa =_passwordAttr.mfa;
					var mfa_enabled_label = localize.t('tiq.users.configure_password.mfa.not_enabled', {ucase:true});
					var mfa_button_label = localize.t('tiq.users.configure_password.mfa.enable_mfa_for_this_account');
					var v = '';

					if (mfa) {
						mfa_enabled_label = localize.t('tiq.users.configure_password.mfa.enabled', {ucase:true});
						mfa_button_label =localize.t('tiq.users.configure_password.mfa.disable_mfa_for_this_account');
					}

					v += '<div style="margin-top: 10px;">';
					v += '	<div class="container-fluid">';
					v += '		<div class="row-fluid">';
					v += '          <div class="span8 password-policy">';

					v += '              <h3>' + localize.t('tiq.users.configure_password.current.title') + '</h3>';
					v += '              <p>' + localize.t('tiq.users.configure_password.default.title') + '</p>';
					v += '              <ul style="padding-left:25px; margin-bottom: 15px;">';
					v += '                  <li>' + localize.t('tiq.users.configure_password.default.chars') + '</li>';
					v += '                  <li>' + localize.t('tiq.users.configure_password.default.numeric_chars') + '</li>';
					v += '                  <li>' + localize.t('tiq.users.configure_password.default.uppercase_chars') + '</li>';
					v += '                  <li>' + localize.t('tiq.users.configure_password.default.special_chars') + '</li>';
					v += '              </ul>';

					v += '              <div><span><strong>' + localize.t('tiq.users.configure_password.strength') + '</strong></span> <span id="'+_namespace+'_passwordMeterStatus">' + localize.t('tiq.users.configure_password.basic') + '</span></div>';
					v += '              <div id="'+_namespace+'_passwordMeter" class="progress progress-striped active">';
					v += '                  <div class="bar"></div>';
					v += '              </div>';

					v += '              <ul id="'+_namespace+'_settingsList">';
					v += '                  <li>';
					v += '                      <div class="option-label">' + localize.t('tiq.users.configure_password.current.min_password_length') + '</div>';
					v += '                      <div class="option-field">';
					v += '                          <div id="'+_namespace+'_minPasswordLength" class="spinner-field-container">';
					v += '                              <label for="'+_namespace+'_minPasswordLengthField">' + localize.t('tiq.users.configure_password.characters') + '</label>';
					v += '                              <input type="text" class="spinner-field" id="'+_namespace+'_minPasswordLengthField" value="'+_passwordAttr.password_length+'" />';
					v += '                              <div class="spinner-minus btn btn-mini"><i class="icon-minus"></i></div>';
					v += '                              <div class="spinner-plus btn btn-mini"><i class="icon-plus"></i></div>';
					v += '                          </div>';
					v += '                      </div>';
					v += '                  </li>';
					v += '                  <li>';
					v += '                      <div class="option-label">' + localize.t('tiq.users.configure_password.current.min_uppercase_chars') + '</div>';
					v += '                      <div class="option-field">';
					v += '                          <div id="'+_namespace+'_minUppercaseChar" class="spinner-field-container">';
					v += '                              <label for="'+_namespace+'_minUppercaseCharField">' + localize.t('tiq.users.configure_password.characters') + '</label>';
					v += '                              <input type="text" class="spinner-field" id="'+_namespace+'_minUppercaseCharField" value="'+_passwordAttr.upper_characters+'" />';
					v += '                              <div class="spinner-minus btn btn-mini"><i class="icon-minus"></i></div>';
					v += '                              <div class="spinner-plus btn btn-mini"><i class="icon-plus"></i></div>';
					v += '                          </div>';
					v += '                      </div>';
					v += '                  </li>';
					v += '                  <li>';
					v += '                      <div class="option-label">' + localize.t('tiq.users.configure_password.current.min_numeric_chars') + '</div>';
					v += '                      <div class="option-field">';
					v += '                          <div id="'+_namespace+'_minNumericChar" class="spinner-field-container">';
					v += '                              <label for="'+_namespace+'_minNumericCharField">' + localize.t('tiq.users.configure_password.characters') + '</label>';
					v += '                              <input type="text" class="spinner-field" id="'+_namespace+'_minNumericCharField" value="'+_passwordAttr.numeric_characters+'" />';
					v += '                              <div class="spinner-minus btn btn-mini"><i class="icon-minus"></i></div>';
					v += '                              <div class="spinner-plus btn btn-mini"><i class="icon-plus"></i></div>';
					v += '                          </div>';
					v += '                      </div>';
					v += '                  </li>';
					v += '                  <li>';
					v += '                      <div class="option-label">' + localize.t('tiq.users.configure_password.current.min_special_chars');
					v += '                          <div id="'+_namespace+'_pwSpecialChar" class="dialog-info-icon" title="' + localize.t('tiq.users.configure_password.current.valid_special_chars') + '"><a href="#" class="icon-question-sign"></a></div>';
					v += '                      </div>';
					v += '                      <div class="option-field">';
					v += '                          <div id="'+_namespace+'_minSpecialChar" class="spinner-field-container">';
					v += '                              <label for="'+_namespace+'_minSpecialCharField">' + localize.t('tiq.users.configure_password.characters') + '</label>';
					v += '                              <input type="text" class="spinner-field" id="'+_namespace+'_minSpecialCharField" value="'+_passwordAttr.special_characters+'" />';
					v += '                              <div class="spinner-minus btn btn-mini"><i class="icon-minus"></i></div>';
					v += '                              <div class="spinner-plus btn btn-mini"><i class="icon-plus"></i></div>';
					v += '                          </div>';
					v += '                      </div>';
					v += '                  </li>';
					v += '                  <li>';
					v += '                      <div class="option-label">' + localize.t('tiq.users.configure_password.current.password_history_restriction');
					v += '                          <div id="'+_namespace+'_pwHistory" class="dialog-info-icon" title="' + localize.t('tiq.users.configure_password.current.password_history_restriction_title') + '"><a href="#" class="icon-question-sign"></a></div>';
					v += '                      </div>';
					v += '                      <div class="option-field">';
					v += '                          <div id="'+_namespace+'_passwordHistory" class="spinner-field-container">';
					v += '                              <label for="'+_namespace+'_passwordHistoryField">' + localize.t('tiq.users.configure_password.passwords') + '</label>';
					v += '                              <input type="text" class="spinner-field" id="'+_namespace+'_passwordHistoryField" value="'+_passwordAttr.password_history+'" />';
					v += '                              <div class="spinner-minus btn btn-mini"><i class="icon-minus"></i></div>';
					v += '                              <div class="spinner-plus btn btn-mini"><i class="icon-plus"></i></div>';
					v += '                          </div>';
					v += '                      </div>';
					v += '                  </li>';
					v += '              </ul>';

					v += '              <div class="dialog-row">';
					v += '                  <a href="#" id="'+_namespace+'_basicSettingBtn" class="btn">' + localize.t('tiq.users.configure_password.use_default_settings') + '</a>';
					v += '                  <a href="#" id="'+_namespace+'_recommendedSettingBtn" class="btn">' + localize.t('tiq.users.configure_password.use_recommended_settings') + '</a>';
					v += '              </div>';
					v += '          </div>';
					v += '		    <div class="span4">';
					v += '              <h3 style="display: inline-block;">' + localize.t('tiq.users.configure_password.mfa.multi_factor_authentication') + '</h3>';
					v += '              <p>' + localize.t('tiq.users.configure_password.mfa.multi_factor_authentication_description') + ' <a href="javascript:;" onclick="utui.help.openCommunityLink(\'' + common.community.multi_factor_authentication_for_tealium + '\'); return false;" class="learnMore">'+ localize.t('tiq.users.configure_password.mfa.learnMore') + '</a></p>';
					v += '				<div id="' + _namespace + '_mfa_setting" ' + (mfa ? 'class="mfa-enabled"' : '') + '>' + mfa_enabled_label + '</div>';
					v += '				<div id="'+_namespace+'_multi-factor_auth">';
					v += '					<button id="' + _namespace + '_mfaToggleBtn" class="btn">' + mfa_button_label + '</button>';
					v += '				</div>';
					v += '				<div class="' + _namespace + '_mfa_setup_warning' + (mfa ? ' mfa-enabled mfa-hidden' : ' mfa-hidden') + '">';
					v += '					<i class="icon-warning-sign"></i>';
					v += '					<div><strong>' + localize.t('tiq.users.configure_password.mfa.mfa_setup_warning') + '</strong></div>';
					v += '				</div>';
					v += '          </div>';
					v += '	    </div>';
					v += '  </div>';
					v += '</div>';

					return v;
				},

				confirmToggleMFA: function() {
					var v = '';

					if (!_passwordAttr.mfa) {
						v += '<h2>' + localize.t('tiq.users.configure_password.mfa.are_you_sure_enable_mfa') + '</h2>';
						v += '<p>' + localize.t('tiq.users.configure_password.mfa.enable_mfa_disclaimer') + '</p>';
						v += '<p>' + localize.t('tiq.users.configure_password.mfa.mfa_supported_devices') + '</p>';
					} else {
						v += '<h2>' + localize.t('tiq.users.configure_password.mfa.are_you_sure_disable_mfa') + '</h2>';
						v += '<p>' + localize.t('tiq.users.configure_password.mfa.disable_mfa_disclaimer') + '</p>';
					}

					return v;
				}
			};

			// --------------------------------------------------------
			var _passwordAttr = {
				password_length: 8,	// num of characters
				numeric_characters: 1,	// num of numbers
				upper_characters: 1,	// num of uppercase
				special_characters: 1,	// num of special characters
				password_history: 1 // pw history restriction
			};

			// --------------------------------------------------------
			var _passwordAttrDefault = {
				password_length: 8,	// num of characters
				numeric_characters: 1,	// num of numbers
				upper_characters: 1,	// num of uppercase
				special_characters: 1,	// num of special characters
				password_history: 1 // pw history restriction
			};

			// --------------------------------------------------------
			var _passwordAttrRecommended = {
				password_length: 12,	// num of characters
				numeric_characters: 2,	// num of numbers
				upper_characters: 2,	// num of uppercase
				special_characters: 1,	// num of special characters
				password_history: 2 // pw history restriction
			};

			// --------------------------------------------------------
			function isLogicValid($field, value, direction) {

				var id = $field.attr('id');
				var minPasswordValue = $('#'+_namespace+'_minPasswordLengthField').val();
				var combinedCases = parseInt(_passwordAttr.numeric_characters) + parseInt(_passwordAttr.upper_characters) + parseInt(_passwordAttr.special_characters);

// PLUS logic
				if(direction == 'plus') {
					if(value > 99) {
						return false;
					}
					if(id === _namespace+'_minNumericCharField' && minPasswordValue >= 99 && combinedCases >= 99) {
						return false;
					}
					if(id === _namespace+'_minUppercaseCharField' && minPasswordValue >= 99 && combinedCases >= 99) {
						return false;
					}
					if(id === _namespace+'_minSpecialCharField' && minPasswordValue >= 99 && combinedCases >= 99) {
						return false;
					}
					if(id === _namespace+'_passwordHistoryField' && value > 6) {
						return false;
					}
				}

// MINUS logic
				if(direction == 'minus') {
					if(value <= 0) {
						return false;
					}
// Prevent minimizing length if attributes are greater
					if(id === _namespace+'_minPasswordLengthField' && (combinedCases > value) ) {
						return false;
					}
					if(id === _namespace+'_minPasswordLengthField' && value < _passwordAttrDefault.password_length) {
						return false;
					}
					if(id === _namespace+'_minNumericCharField' && value < _passwordAttrDefault.numeric_characters) {
						return false;
					}
					if(id === _namespace+'_minUppercaseCharField' && value < _passwordAttrDefault.upper_characters) {
						return false;
					}
					if(id === _namespace+'_minSpecialCharField' && value < _passwordAttrDefault.special_characters) {
						return false;
					}
				}

// Store data into object
				if(id === _namespace+'_minPasswordLengthField') {
					_passwordAttr.password_length = value;
				}
				if(id === _namespace+'_minNumericCharField') {
					_passwordAttr.numeric_characters = value;
				}
				if(id === _namespace+'_minUppercaseCharField') {
					_passwordAttr.upper_characters = value;
				}
				if(id === _namespace+'_minSpecialCharField') {
					_passwordAttr.special_characters = value;
				}
				if(id === _namespace+'_passwordHistoryField') {
					_passwordAttr.password_history = value;
				}

				$field.val(value);

				return true;

			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onMFAToggleBtnClick: function (event) {
					var btnText = localize.t('tiq.users.configure_password.mfa.enable_mfa'),
						titleText = localize.t('tiq.users.configure_password.mfa.confirm_enable_mfa');

					if (_passwordAttr.mfa) {
						btnText = localize.t('tiq.users.configure_password.mfa.disable_mfa');
						titleText = localize.t('tiq.users.configure_password.mfa.confirm_disable_mfa');
					}

					utui.adminlib.confirmDialog().show(_namespace, {action: btnText, confirm: _view.confirmToggleMFA(),  title: titleText}, function () {
						if (!_passwordAttr.mfa) {
							_passwordAttr.mfa = true;
							_$template.find('#' + _namespace + '_mfa_setting').addClass('mfa-enabled').text(localize.t('tiq.users.configure_password.mfa.enabled', {ucase:true}));
							_$template.find('#' + _namespace + '_mfaToggleBtn').text(localize.t('tiq.users.configure_password.mfa.disable_mfa_for_this_account'));
							utui.util.pubsub.publish(utui.constants.account.MFA_TOGGLED, true);
						} else {
							_passwordAttr.mfa = false;
							_$template.find('#' + _namespace + '_mfa_setting').removeClass('mfa-enabled').text(localize.t('tiq.users.configure_password.mfa.not_enabled', {ucase:true}));
							_$template.find('#' + _namespace + '_mfaToggleBtn').text(localize.t('tiq.users.configure_password.mfa.enable_mfa_for_this_account'));
							utui.util.pubsub.publish(utui.constants.account.MFA_TOGGLED, false);
						}
					});
				}
			};

			// --------------------------------------------------------
			var _bindUI = {
				// ----------------------------------------------------
				buttons: function() {

					_$template.find('#'+_namespace+'_basicSettingBtn').on('click', function(e) {
						e.stopImmediatePropagation();

						_passwordAttr.password_length = _passwordAttrDefault.password_length;
						_passwordAttr.numeric_characters = _passwordAttrDefault.numeric_characters;
						_passwordAttr.upper_characters = _passwordAttrDefault.upper_characters;
						_passwordAttr.special_characters = _passwordAttrDefault.special_characters;
						_passwordAttr.password_history = _passwordAttrDefault.password_history;

						_updateMeterLogic();
						_updateView();
						return false;
					});

					_$template.find('#'+_namespace+'_recommendedSettingBtn').on('click', function(e) {
						e.stopImmediatePropagation();

						_passwordAttr.password_length = _passwordAttrRecommended.password_length;
						_passwordAttr.numeric_characters = _passwordAttrRecommended.numeric_characters;
						_passwordAttr.upper_characters = _passwordAttrRecommended.upper_characters;
						_passwordAttr.special_characters = _passwordAttrRecommended.special_characters;
						_passwordAttr.password_history = _passwordAttrRecommended.password_history;

						_updateMeterLogic();
						_updateView();
						return false;
					});


					_$template.find('.spinner-plus').on('click', function(e) {
						var $field = $(this).closest('.option-field').find('.spinner-field');
						var value = $field.val();

						value = parseInt(value);
						value++;

						if(isLogicValid($field, value, 'plus')) {
							_overridePasswordLengthValue();
							_updateMeterLogic();
						}
						return false;
					});

					_$template.find('.spinner-minus').on('click', function(e) {
						var $field = $(this).closest('.option-field').find('.spinner-field');
						var value = $field.val();

						value = parseInt(value);
						value--;

						if(isLogicValid($field, value, 'minus')) {
							_overridePasswordLengthValue();
							_updateMeterLogic();
						}

						return false;
					});
				},

				// ----------------------------------------------------
				fields: function() {

// TODO: Store val into a data model,
// which will then pass a call to the API and store there
					_$template.find('#'+_namespace+'_minPasswordLengthField').on('change', function(e) {
						var val = $(this).val();

						if(isNaN(val) || val < 8) {
							val = 8;
							$(this).val(val);
						} else if(val > 99) {
							val = 99;
							$(this).val(val);
						}

						_passwordAttr.password_length = val;

						_overridePasswordLengthValue();
						_updateMeterLogic();

					});
					_$template.find('#'+_namespace+'_minNumericCharField').on('change', function(e) {
						var val = $(this).val();

						if(isNaN(val) || val < 1) {
							val = 1;
							$(this).val(val);
						} else if(val > 30) {
							val = 30;
							$(this).val(val);
						}

						_passwordAttr.numeric_characters = val;

						_overridePasswordLengthValue();
						_updateMeterLogic();
					});
					_$template.find('#'+_namespace+'_minUppercaseCharField').on('change', function(e) {
						var val = $(this).val();

						if(isNaN(val) || val < 1) {
							val = 1;
							$(this).val(val);
						} else if(val > 30) {
							val = 30;
							$(this).val(val);
						}

						_passwordAttr.upper_characters = val;

						_overridePasswordLengthValue();
						_updateMeterLogic();
					});
					_$template.find('#'+_namespace+'_minSpecialCharField').on('change', function(e) {
						var val = $(this).val();

						if(isNaN(val) || val < 1) {
							val = 1;
							$(this).val(val);
						} else if(val > 30) {
							val = 30;
							$(this).val(val);
						}

						_passwordAttr.special_characters = val;

						_overridePasswordLengthValue();
						_updateMeterLogic();
					});
					_$template.find('#'+_namespace+'_passwordHistoryField').on('change', function(e) {
						var val = $(this).val();

						if(isNaN(val) || val < 1) {
							val = 1;
							$(this).val(val);
						} else if(val > 6) {
							val = 6;
							$(this).val(val);
						}

						_passwordAttr.password_history = val;

						_overridePasswordLengthValue();
						_updateMeterLogic();
					});
					_$template.find('#'+_namespace+'_dialog').find('.spinner-field').on('click', function(e) {
						var $el = $(this);
						$el.select();
					});

					_$template.find('#'+_namespace+'_mfaToggleBtn').safeOn('click', _eventHandlers.onMFAToggleBtnClick);

				},

				// ----------------------------------------------------
				tooltip: function() {
					var obj = {};
					obj[_namespace+'_pwSpecialChar'] = { gravity: 's' };
					obj[_namespace+'_pwHistory'] = { gravity: 's' };
					obj[_namespace+'_mfa_info'] = { gravity: 's' };
					utui.util.addTooltip(obj, _$template);
				}
			};

			// --------------------------------------------------------
			function _updateView() {
				_$template.find('#'+_namespace+'_minPasswordLengthField').val(_passwordAttr.password_length);
				_$template.find('#'+_namespace+'_minNumericCharField').val(_passwordAttr.numeric_characters);
				_$template.find('#'+_namespace+'_minUppercaseCharField').val(_passwordAttr.upper_characters);
				_$template.find('#'+_namespace+'_minSpecialCharField').val(_passwordAttr.special_characters);
				_$template.find('#'+_namespace+'_passwordHistoryField').val(_passwordAttr.password_history);
			}


			// --------------------------------------------------------
			// If combined password attributes exceed password length
			// then update password length
			function _overridePasswordLengthValue() {
				var combinedCases = parseInt(_passwordAttr.numeric_characters) + parseInt(_passwordAttr.upper_characters) + parseInt(_passwordAttr.special_characters);

				if(combinedCases > _$template.find('#'+_namespace+'_minPasswordLengthField').val()) {

					_$template.find('#'+_namespace+'_minPasswordLengthField').val(combinedCases);

					_passwordAttr.password_length = combinedCases;
				}
			}

			// --------------------------------------------------------
			// The MFA Setup Warning should be hidden on initial launch of Password Policy since the user may or may not intend to update his MFA Settings.
			// This handles displaying the MFA setup warning or updating the Confirmation Button in the Dialog.
			function _updatePasswordPolicyDialogElements(flag) {
				if (flag) {
					_$template.find('.' + _namespace + '_mfa_setup_warning').addClass('mfa-enabled').removeClass('mfa-hidden');
					_$template.closest('.ui-dialog').find('#' + _namespace + '_updatePasswordBtn span').html(localize.t('tiq.dialog.button.update_password_settings_logout'));
				} else {
					_$template.find('.' + _namespace + '_mfa_setup_warning').removeClass('mfa-enabled').addClass('mfa-hidden');
					_$template.closest('.ui-dialog').find('#' + _namespace + '_updatePasswordBtn span').html(localize.t('tiq.dialog.button.update_password_settings'));
				}
			}

			// --------------------------------------------------------
			// Cleanup MFA logout channel and remove the current user's pending logout if any.
			function _disposeMFALogoutRestrictions() {
				utui.users.setCurrentUserLogoutSchedule(false);
				utui.util.pubsub.unsubscribe(utui.constants.account.MFA_TOGGLED, _updatePasswordPolicyDialogElements);
				utui.util.pubsub.unsubscribe(utui.constants.account.MFA_TOGGLED, utui.users.setCurrentUserLogoutSchedule);
			}

			// --------------------------------------------------------
			// Trigger a logout event.
			function _enforceMFALogoutRestrictions() {
				if (utui.users.getCurrentUserLogoutSchedule()) {
					utui.users.logout();
				}
			}

			// --------------------------------------------------------
			// Register the MFA logout channel and add listeners.
			function _registerMFALogoutRestrictions() {
				utui.util.pubsub.subscribe(utui.constants.account.MFA_TOGGLED, _updatePasswordPolicyDialogElements);
				utui.util.pubsub.subscribe(utui.constants.account.MFA_TOGGLED, utui.users.setCurrentUserLogoutSchedule);
			}

			// --------------------------------------------------------
			function _updateMeterLogic() {
				var attr = _passwordAttr,
					INITIAL_WIDTH = 50;

				// Character Length Logic
				if(attr.password_length >= 18) {
					INITIAL_WIDTH += 26;
				} else if(attr.password_length >= 8) {
					INITIAL_WIDTH += (attr.password_length - 4) * 2;
				}

				// Numeric Character Logic
				if(attr.numeric_characters >= 3) {
					INITIAL_WIDTH += 15;
				} else if(attr.numeric_characters >= 1) {
					INITIAL_WIDTH += (attr.numeric_characters - 1) * 5;
				}

				// Uppercase Character Logic
				if(attr.upper_characters >= 4) {
					INITIAL_WIDTH += 20;
				} else if(attr.upper_characters >= 1) {
					INITIAL_WIDTH += (attr.upper_characters - 1) * 5;
				}

				// Special Character Logic
				if(attr.special_characters >= 4) {
					INITIAL_WIDTH += 20;
				} else if(attr.special_characters >= 1) {
					INITIAL_WIDTH += (attr.special_characters - 1) * 5;
				}

				// Recent Password Restriction Logic
				if(attr.password_history >= 2) {
					INITIAL_WIDTH += 10;
				}

				// Meter Color Change
				if(INITIAL_WIDTH >= 85) {
					_$template.find('#'+_namespace+'_passwordMeterStatus').html(localize.t('tiq.users.configure_password.very_strong'));
					_$template.find('#'+_namespace+'_passwordMeter').find('.bar').removeClass('bar-warning').removeClass('bar-success');
				} else if(INITIAL_WIDTH >= 65) {
					_$template.find('#'+_namespace+'_passwordMeterStatus').html(localize.t('tiq.users.configure_password.stronger'));
					_$template.find('#'+_namespace+'_passwordMeter').find('.bar').removeClass('bar-warning').addClass('bar-success');
				} else {
					_$template.find('#'+_namespace+'_passwordMeterStatus').html(localize.t('tiq.users.configure_password.strong'));
					_$template.find('#'+_namespace+'_passwordMeter').find('.bar').removeClass('bar-success').addClass('bar-warning');
				}

				if(INITIAL_WIDTH > 100) {
					INITIAL_WIDTH = 100;
				}

				_$template.find('#'+_namespace+'_passwordMeter').find('.bar').css('width',INITIAL_WIDTH+'%');
			}

			// --------------------------------------------------------
			function _getPasswordPolicy(callback) {

				var hash = ['password_length','numeric_characters','special_characters','upper_characters','password_history','mfa'];

				utui.service.get(utui.service.restapis.PASSWORD_POLICY, {}, null,
					function(data) {
						for (var i = hash.length - 1; i >= 0; i--) {
							var value = hash[i];
							_passwordAttr[value] = data[value];
						};
						callback();
					},
					function(data) {
						callback();
					}
				);
			}

			// --------------------------------------------------------
			function _updatePasswordPolicy(callback) {
				var url = utui.service.addParamsToURL(utui.service.restapis.PASSWORD_POLICY);
				var dataObj = _passwordAttr;
				utui.service.put(url, JSON.stringify(_passwordAttr), utui.service.options.JSON, callback, _validateError);
			}


			// --------------------------------------------------------
			function _validateError(type, data) {
				var errorMsg = '';
				var response = data.responseText;

				if(response.indexOf('1469') >= 0) {
					errorMsg += localize.t('tiq.users.error.account_not_configured_for_policy');
				} else if(response.indexOf('ILLEGAL_VALUE') >= 0) {
					errorMsg += localize.t('tiq.users.error.configuration_for_password_chars');
				} else {
					errorMsg += localize.t('tiq.users.error.error_processing_request');
				}

				utui.ui.dialog.message.showError(_namespace, errorMsg);
			}


			// --------------------------------------------------------
			// Show dialog
			function _showDialog() {
				//_clear();
				_render.ui();

				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.dialog.button.update_password_settings'),
						id: _namespace + '_updatePasswordBtn',
						click: function () {
							_updatePasswordPolicy(function() {
								_enforceMFALogoutRestrictions();
								_disposeMFALogoutRestrictions();
								utui.ui.dialog.dispose(_namespace);
							});
						}
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						id: _namespace + '_cancelBtn',
						click: function () {
							_disposeMFALogoutRestrictions();
							utui.ui.dialog.dispose(_namespace);
						},
						style: 'float:left; margin-left: 12px'
					}
				];

				// Show the dialog
				utui.ui.dialog.show(_namespace, localize.t('tiq.users.configure_password.title'), buttons, _$template, { width: 740, height:520 });
			}

			// Public API
			var _public = {
				// ----------------------------------------------------
				initialize: function () {
					if(!utui.permissions.canManageAccount() || utui.account.sso_isSAML()) {
						utui.util.showPermissionErrorDialog();
						return;
					}

					_getPasswordPolicy(function() {
						_showDialog();
						_updateMeterLogic();
						_registerMFALogoutRestrictions();
					});
				}
			};

			return _public;
		}
	};

	// Public API
	var _public = {
		// ------------------------------------------------------------
		// Set to true if the user's permissions are being updated
		isStale: false,

		// ------------------------------------------------------------
		load: function() {},

		// ------------------------------------------------------------
		// This launches the user management modal
		show: function() {
			// 12/14/2015 - ignore isStale flag; do not block UI while permission cache is being updated
			if (utui.permissions.canShowUserManager()) { // && !utui.users.isStale) {
				_dialogs.userManager.show();
			} else {
				utui.util.showPermissionErrorDialog();
			}
		},

		// ------------------------------------------------------------
		clear: _clear,

		// ------------------------------------------------------------
		loadUser: function(email, callback) {
			_request.getUser(email, callback);
		},

		// ------------------------------------------------------------
		// Launches the edit user dialog
		showEditUserDialog: function() {
			_dialogs.editUser.show(_userData[utui.login.email]);
		},

		// ------------------------------------------------------------
		// Displays the old show configure password dialog (unchanged!)
		showConfigurePasswordDialog: function() {
			_dialogs.showConfigurePasswordDialog().initialize()
		},

		// ------------------------------------------------------------
		logout: _request.logout,

		// ------------------------------------------------------------
		// Returns the specified user object
		getUser: function(email) {
			return _userData[email];
		},

		// ------------------------------------------------------------
		getUsers: function(callback) {
			utui.service.get(utui.service.restapis.USERS_PROFILE, null, null, callback, callback);
		},

		// ------------------------------------------------------------
		// Returns the logged in user object
		getCurrentUser: function() {
			return _userData[utui.login.email];
		},

		// ------------------------------------------------------------
		// Returns all (profile and account) user permissions
		getUserPermissions: function(user, profile) {
			if (user) {
				var profilePermissions = _getProfilePermissionsFromUser(user, profile);
				return user.permissions.concat(profilePermissions);
			}
		},

		// ------------------------------------------------------------
		// Returns all profile user permissions
		getUserProfilePermissions: function(user, profile) {
			if (user) {
				return _getProfilePermissionsFromUser(user, profile);
			}
		},

		// ------------------------------------------------------------
		// Gets the name or email of the current logged in user to display in the admin menu
		getAdminMenuName: function() {
			var user = _public.getCurrentUser(),
				userName = _getUserName(user) || utui.login.email;

			return userName;
		},

		// ------------------------------------------------------------
		// Get's the current pending logout state.
		// @return {bool} true if the user has a pending logout, false otherwise.
		getCurrentUserLogoutSchedule: function() {
			return !!((_public.getCurrentUser()||{}).pending_logout);
		},

		// ------------------------------------------------------------
		// Set's the user's current logout schedule into the _userData obj.
		// @return {bool} creates|deletes|does nothing to the pending_logout key, then returns true.
		setCurrentUserLogoutSchedule: function(bool) {
			var userData = _public.getCurrentUser();
			// (expression, expression) evaluates both expressions and returns the second.
			return bool ? (userData.pending_logout = true, true) : userData.hasOwnProperty('pending_logout') ? (delete userData.pending_logout, true) : true;
		},

		// ------------------------------------------------------------
		// Updates the user object
		updateUserData: _updateUser
	};

	return _public;
}();

utui.users.load();

utui.lifecycle = {
    resourceInit:function(){
        //run any functions after the resources are loaded
        utui.manage.policy.initialize();
        utui.util.storage.removeLocal(utui.login.email); //remove localstorage email for security cleanup
    }
};

utui.util.pubsub.subscribe(utui.constants.lifecycle.CORE_RESOURCES_LOADED, utui.lifecycle.resourceInit, this);
utui.targets = function() {
	// PRIVATE API
	// ----------------------------------------------------------------
	// Contains a list of environments that the user can publish to
	// custom targets will be added dynamically
	var _list = {
		dev: {
			type: 'default',
			display_name: 'Dev',
			alias_name: ''
		},
		qa: {
			type: 'default',
			display_name: 'QA',
			alias_name: ''
		},
		prod: {
			type: 'default',
			display_name: 'Prod',
			alias_name: ''
		}/*,
		stage: {
			type: 'custom',
			display_name: 'stage'
		}*/
	};

	// To keep track if the enabled status has changed
	var _enabled;

	// Listen to the updated event so we can check if the enabled flag has been toggled
	utui.util.pubsub.subscribe(utui.constants.publish.PUBLISH_CONFIGURATION_UPDATED, _onStatusChange);

	// Set up a listener to listen for profile updates
	// so that we can update the list when a new profile is loaded
	utui.util.pubsub.subscribe(utui.constants.profile.SETTINGS_UPDATED, _init);

	// ----------------------------------------------------------------
	function _init() {
		// Remove any previous non-default items
		_clear();

		_addTargets(utui.data.settings.customTargets, 'custom');

		_setEnvironmentAliases(utui.data.settings.env_alias);
	};

	// ----------------------------------------------------------------
	// This will publish an event if the status has changed from enabled to disabled and back.
	function _onStatusChange() {
		var enabled = utui.permissions.isCustomTargetsEnabled();
		if (enabled != _enabled) {
			utui.util.pubsub.publish(utui.constants.publish.CUSTOM_TARGETS_STATUS_CHANGED, enabled);
		}
		_enabled = enabled;
	};

	// ----------------------------------------------------------------
	function _setEnvironmentAliases (data) {
		if (data) {
			var alias_info = data.alias_info;
			for (key in alias_info) {
				utui.targets.updateAliasName(key, alias_info[key].alias_name);
			}
		}
	};

	// ----------------------------------------------------------------
	function _addTargets(targets, type) {
		targets = targets || '';
		if (typeof targets == 'string') {
			targets = targets.split(',');
		}
		var len = targets.length;
		for (var i=0; i<len; i++) {
			_public.addTarget($.trim(targets[i]), type);
		}
	};

	// ----------------------------------------------------------------
	// This will clear all custom targets
	function _clear(type) {
		type = type || 'custom';	// Default to custom
		for  (var key in _list) {
			if (_list[key].type.toLowerCase() == type.toLowerCase()) {
				delete _list[key];
			} else {
				// clear alias_name in-case different account is loaded
				_list[key].alias_name = '';
			}
		}
	};

	// ----------------------------------------------------------------
	// Update the customTargets to the custom targets stored in the _list object
	function _updateCustomTargets() {
		// Add the target to the utui.data.settings.customTargets array string
		var customTargets = _public.getList('custom', true) || '';
		utui.data.settings.customTargets = customTargets.toString();
	};

	// PUBLIC API
	var _public = {
		// ----------------------------------------------------------------
		// Returns an array of target environments that type matches the type specified
		// ignoreEnabledFlag is used to get the custom targets list regardless of the configuration setting
		getList: function(type, ignoreEnabledFlag) {
			var matchedList = [];

			for (var key in _list) {
				if (_list[key].type == type || !type) {
					// Only return custom targets if type is custom and configuration setting or ignoreFlag is enabled
					if (_list[key].type == 'custom' && (!utui.permissions.isCustomTargetsEnabled() && !ignoreEnabledFlag)) {
						continue;
					}
					matchedList.push(key);
				}
			}
			if ($.isEmptyObject(matchedList)) {
				matchedList = null;
			}
			return matchedList;
		},

		// ----------------------------------------------------------------
		// Returns true if the target name is of type 'custom'
		isCustom: function(name) {
			if (_list[name] && _list[name].type == 'custom') {
				return true;
			}
			return false;
		},

		// ----------------------------------------------------------------
		// Returns true if the target name is of type 'default'
		isDefault: function(name) {
			if (_list[name] && _list[name].type == 'default') {
				return true;
			}
			return false;
		},

		// ----------------------------------------------------------------
		// Returns true if the name is already an existing target
		hasTarget: function(name) {
			// Need to perform a case insensitive search
			for (var key in _list) {
				if (key.toLowerCase() == name.toLowerCase()) {
					return true;
				}
			}
			return false;
		},

		// ----------------------------------------------------------------
		// Returns true if the name is already an existing alias_name
		hasAliasName: function(envTarget, name) {
			name = name.toLowerCase();

			// Need to perform a case insensitive search
			for (var key in _list) {
				var alias_name = _list[key].alias_name;
				if ((alias_name && alias_name.toLowerCase() === name) && (envTarget !== key)) {
					return true;
				}
			}
			return false;
		},

		// ----------------------------------------------------------------
		// Adds a new target to the list but first verifies that the name doesn't collide with an existing target
		addTarget: function(name, type) {
			if (!name) {
				return;
			}
			type = type || 'custom';

			// Check to see if the target already exists (case insensitive)
			if (_public.hasTarget(name)) {
				// Fail
				return false;
			}
			_list[name] = {type:type, display_name:name};

			_updateCustomTargets();

			// Success
			return true;
		},

		// ----------------------------------------------------------------
		// This is just a stub to be used when supported
/* TODO: Remove from profile (save) */
		removeTarget: function(name) {
			if (!name) {
				return;
			}
			for (var key in _list) {
				if (key.toLowerCase() == name.toLowerCase()) {
					delete _list[key];
				}
			}

			_updateCustomTargets();
		},

		// ----------------------------------------------------------------
		// This will return the display_name for the name specified
		toDisplayName: function(name) {
			var env = _list[name];

			if (env) {
				return env.display_name;
			}
			return name;
		},

		// ----------------------------------------------------------------
		// This will return the alias_name concatenated with the environment name for the name specified
		aliasDisplayName: function(name) {
			var env = _list[name];

			if (env) {
				if (env.alias_name) {
					return env.alias_name;
				}
				// custom env
				return env.display_name;
			}
			return name;
		},

		// ----------------------------------------------------------------
		// This will update the alias_name for the name specified
		updateAliasName: function(env, name) {
			var envObj = _list[env];

			if (envObj) {
				envObj.alias_name = name;
			}
		},

		getAliasList: function() {
			return _list;
		},

		isPublishTargetsForExtensionOk: function(extensionId){
			try {
                var ext = exapi.getObjectByExtensionId(extensionId);
                if ("true" === utui.config.customizationList[ext.id].blockPubTargetsLogic) {
					return false;
                }
            } catch (e) {}
			return true;
        },
		// ----------------------------------------------------------------
		// This will append the specified target types to the object passed in
		// If you are passing in a JSON object then the defaultValue parameter
		// can be used to set the value for each new key.
		// USES:
		// 		var targets = utui.targets.addTargetsToObject(['dev','qa'prod'], null, 'custom')
		// 		var targets = utui.targets.addTargetsToObject([]);
		// 		var targets = utui.targets.addTargetsToObject({dev:'',qa:'',prod:''}, '', 'custom');
		//	 	var targets = utui.targets.addTargetsToObject({dev:{},qa:{},prod:[]}, {}, 'custom');
		// 		var targets = utui.targets.addTargetsToObject({}, {});
		addTargetsToObject: function(obj, defaultValue, type, ignoreEnabledFlag) {
			if (!obj) return;
			var targets = _public.getList(type, ignoreEnabledFlag),
				addKey;
			for (var key in _list) {
				addKey = false;
				if (type) {
					if (_list[key].type.toLowerCase() == type.toLowerCase()) {
						addKey = true
					}
				} else {
					addKey = true;
				}
				if (addKey) {
					if ($.isArray(obj)){
						if ($.inArray(key, obj) == -1) {
							obj.push(key);
						}
					} else {
						if (!obj.hasOwnProperty(key)) {
							obj[key] = defaultValue;
						}
					}
				}
			}
			return obj;
		},

		// ------------------------------------------------------------
		updateEnvironmentUI: function (alias_info) {
			for (var key in alias_info) {
				var alias_name = alias_info[key].alias_name;
				utui.targets.updateAliasName(key, alias_name);

				if (!alias_name) {
					alias_name = alias_info[key].display_name;
				}
				// update remaining dom elements
				$('.env_alias_' + key).each(function () {
					var $el = $(this);
					$el.text(alias_name);

					// update title attribute if title attribute exists already
					if ($el.attr('title')) {
						$el.attr('title', alias_name);
					}
				});

				// update special cases such as the distro link buttons
				$('.sp_env_alias_' + key).each(function () {
					var $el = $(this),
						$text = $el.text();

					$el.attr('title', $text);
				});
			}
		}
	}

	// EXPOSE API
	return _public;
}();
utui.publish.configuration = function() {
	// ------------------------------------
	var _namespace = "publish_config",
		_currentPanel = '',
		_version = '',
		_userSelectedVersion = '',
		_templateModal = utui.ui.template.modal(),
		_templateAccordion = utui.ui.template.accordion,
		_templateTabItemView = utui.ui.template.tabItemView,
		_templateTabCollectionView = utui.ui.template.tabCollectionView,
		_mobilePublishConfig = utui.config.mobile,
		_constants = {
			VERSION_WORKFLOW: 'version_workflow',
			PERFORMANCE_ENHANCEMENT: 'performance_enhancement',
			IMPLEMENTATION: 'implementation',
			PUBLISHING_URLS: 'publishing_urls',
			LEGACY_SETTINGS: 'legacy_settings',
			SELECT_PROFILE: 'Select Profile'
		};

	// ------------------------------------
	// This determines the initial state of the settings. cacheData will store
	// all user interactions, then on-save we will merge them into the publish data object.
	var _cachedData = {
		_mobile: {}
	}

	// ------------------------------------
	// TODO: move this to utui.config object
	// NOTE: since we have objects here for publish aliases, we cannot easily move it to config without a workaround on how we handle those views.
	var _generalPublishConfig = {
		resources: [
			{ type: "article", title: localize.t('tiq.publish.config.how_to_enable_publish_config'), url: common.community.publish_configurations }
		],
		fieldsetCollection: [
			// ------------------------------------
			// Version Workflow
			{
				categoryTitle: localize.t('tiq.publish.config.workflow.title'),
				categorySlug: _constants.VERSION_WORKFLOW,
				fieldset: {
					publish_notify: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.workflow.fieldset.publish_notify.label'),
						size: '64',
						title: localize.t('tiq.publish.config.workflow.fieldset.publish_notify.title')
					},
					disable_custom_version_name: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.workflow.fieldset.disable_custom_version_name.label'),
						title: localize.t('tiq.publish.config.workflow.fieldset.disable_custom_version_name.title'),
						defaultValue: true
					},
					disable_save_on_old_version: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.workflow.fieldset.disable_save_on_old_version.label'),
						title: localize.t('tiq.publish.config.workflow.fieldset.disable_save_on_old_version.title'),
						defaultValue: true
					},
					enable_workflow: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.workflow.fieldset.enable_workflow.label'),
						title: localize.t('tiq.publish.config.workflow.fieldset.enable_workflow.title'),
						defaultValue: false
					},
					alert_notify: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.workflow.fieldset.alert_notify.label'),
						size: '64',
						title: localize.t('tiq.publish.config.workflow.fieldset.alert_notify.title')
					},
					lock_profile: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.workflow.fieldset.lock_profile.label'),
						title: localize.t('tiq.publish.config.workflow.fieldset.lock_profile.title'),
						defaultValue: false
					}
				}
			},
			// ------------------------------------
			// Performance Enhancement
			{
				categoryTitle: localize.t('tiq.publish.config.performance.title'),
				categorySlug: _constants.PERFORMANCE_ENHANCEMENT,
				fieldset: {
					readywait: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.performance.fieldset.readywait.label'),
						title: localize.t('tiq.publish.config.performance.fieldset.readywait.title'),
						defaultValue: false
					},
					bundled_tags: {
						fieldType: 'custom',
						label: localize.t('tiq.publish.config.performance.fieldset.bundled_tags.label'),
						title: '',
						customRenderer:  {
							getView : function(){
								var crtt = new String();
								_.each(utui.data.manage, function(a,b,c){
									if (a.advconfig_bundle && a.advconfig_bundle === 'yes'){
										crtt += '<div class="bundled_tags_cell" style="clear:both;width:140px;" title="'+a.tag_name+'">'+ a.tag_name.substring(0,20) + "</div>"
											 + '<div class="bundled_tags_cell" style="width:140px;" title="'+a.title+'">'+ a.title.substring(0,20) + "</div>"
											 + '<div class="bundled_tags_cell_highlight" style="width:25px;">UID:' + "</div>"
											 +'<div class="bundled_tags_cell" style="width:40px;">' + a.id + '</div>';
									}
								});
								return '<div id="bundled_tags_container">' + crtt + '</div>';
							},
							getTitle : function() {
								var totBundledTags = 0;
								_.each(utui.data.manage, function(a,b,c){
									if (a.advconfig_bundle && a.advconfig_bundle === 'yes'){
										totBundledTags++;
									}
								});
								return localize.t('tiq.publish.config.performance.fieldset.bundled_tags.title', {tags:'<span class="notice_count">'+totBundledTags+'</span>'});
							}
						}
					},
					bundle_all: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.performance.fieldset.bundle_all.label'),
						title: localize.t('tiq.publish.config.performance.fieldset.bundle_all.title'),
						defaultValue: false
					},
					minify: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.performance.fieldset.minify.label'),
						title: localize.t('tiq.publish.config.performance.fieldset.minify.title'),
						defaultValue: false
					}
				}
			},
			// ------------------------------------
			// Implementation
			{
				categoryTitle: localize.t('tiq.publish.config.implementation.title'),
				categorySlug: _constants.IMPLEMENTATION,
				fieldset: {
					distro_zip: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.implementation.fieldset.distro_zip.label'),
						title: localize.t('tiq.publish.config.implementation.fieldset.distro_zip.title'),
						defaultValue: false
					},
					domain: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.implementation.fieldset.domain.label'),
						size: '64',
						title: localize.t('tiq.publish.config.implementation.fieldset.domain.title')
					},
					data_object: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.implementation.fieldset.data_object.label'),
						size: '24',
						title: localize.t('tiq.publish.config.implementation.fieldset.data_object.title')
					},
					basevariable: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.implementation.fieldset.basevariable.label'),
						size: '64',
						title: localize.t('tiq.publish.config.implementation.fieldset.basevariable.title')
					},
					sessiontimeout: {
						fieldType: 'text',
						fieldSuffix: 'Milliseconds',
						label: localize.t('tiq.publish.config.implementation.fieldset.sessiontimeout.label'),
						size: '8',
						example: '1800000',
						title: localize.t('tiq.publish.config.implementation.fieldset.sessiontimeout.title')
					},
					enable_custom_targets: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.implementation.fieldset.enable_custom_targets.label'),
						title: localize.t('tiq.publish.config.implementation.fieldset.enable_custom_targets.title'),
						defaultValue: false
					},
					enable_sync_loader: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.implementation.fieldset.enable_sync_loader.label'),
						title: localize.t('tiq.publish.config.implementation.fieldset.enable_sync_loader.title'),
						defaultValue: false
					},
					enable_utf8_encoding: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.implementation.fieldset.pub_utf8_encoding.label'),
						title: localize.t('tiq.publish.config.implementation.fieldset.pub_utf8_encoding.title'),
						defaultValue: false
					},
					noload: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.implementation.fieldset.noload.label'),
						title: localize.t('tiq.publish.config.implementation.fieldset.noload.title'),
						defaultValue: false
					},
					audienceStream_profile: {
						fieldType: 'select',
						label: localize.t('tiq.publish.config.implementation.fieldset.audienceStream_profile.label'),
						title: localize.t('tiq.publish.config.implementation.fieldset.audienceStream_profile.title'),
						select2placeholder : _constants.SELECT_PROFILE,
						fieldOptions: []
					}
				}
			},
			// ------------------------------------
			// Publishing URLs
			{
				categoryTitle: localize.t('tiq.publish.config.publishing_urls.title'),
				categoryDesc: localize.t('tiq.publish.config.publishing_urls.desc'),
				categorySlug: _constants.PUBLISHING_URLS,
				isAccordion: 'true',
				fieldset: {
					publish_dev: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.publishing_urls.fieldset.publish_dev.label'),
						size: '64',
						example: '//www.example.com/utag/dev/utag.js',
						title: localize.t('tiq.publish.config.publishing_urls.fieldset.publish_dev.title')
					},
					publish_qa: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.publishing_urls.fieldset.publish_qa.label'),
						size: '64',
						example: '//www.example.com/utag/qa/utag.js',
						title: localize.t('tiq.publish.config.publishing_urls.fieldset.publish_qa.title')
					},
					publish_prod: {
						fieldType: 'text',
						label: localize.t('tiq.publish.config.publishing_urls.fieldset.publish_prod.label'),
						size: '64',
						example: '//www.example.com/utag/prod/utag.js',
						title: localize.t('tiq.publish.config.publishing_urls.fieldset.publish_prod.title')
					}
				}
			},
			// ------------------------------------
			// Legacy Settings
			{
				categoryTitle: localize.t('tiq.publish.config.legacy_settings.title'),
				categorySlug: _constants.LEGACY_SETTINGS,
				isAccordion: 'true',
				fieldset: {
					enable_purge_sub: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.legacy_settings.fieldset.enable_purge_sub.label'),
						title: localize.t('tiq.publish.config.legacy_settings.fieldset.enable_purge_sub.title'),
						defaultValue: false
					},
					forcetimeout: {
						fieldType: 'text',
						fieldSuffix: 'Milliseconds',
						label: localize.t('tiq.publish.config.legacy_settings.fieldset.forcetimeout.label'),
						size: '8',
						example: '4000',
						title: localize.t('tiq.publish.config.legacy_settings.fieldset.forcetimeout.title')
					},
					enable_purge_footer: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.legacy_settings.fieldset.enable_purge_footer.label'),
						title: localize.t('tiq.publish.config.legacy_settings.fieldset.enable_purge_footer.title'),
						defaultValue: false
					},
					enable_mobile: {
						fieldType: 'checkbox',
						label: localize.t('tiq.publish.config.legacy_settings.fieldset.enable_mobile.label'),
						title: localize.t('tiq.publish.config.legacy_settings.fieldset.enable_mobile.title'),
						defaultValue: false
					}
				}
			}
		]
	}

	// ------------------------------------
	var _util = {
		// ------------------------------------
		getMobileSDKParityVersionByAPIVersion: function(apiVersion) {
			var versionCollection = utui.config.mobileVersionGroup;
			var _apiNum = parseInt(apiVersion);
			var versionResults = versionCollection.filter(function(a) { return a.mobile_api_version === _apiNum; });

			if(versionResults.length) {
				return versionResults[0].value;
			}

			return;
		}
	};

	// ------------------------------------
	function _setFieldsInDataObject(apiVersion) {
		var versionFieldsetCollection = _mobilePublishConfig.version[apiVersion].fieldsetCollection,
			collection,
			model;

		for (var i = 0; i < versionFieldsetCollection.length; i++) {

			collection = versionFieldsetCollection[i].fieldset;

			for(var key in collection) {
				model = collection[key];

				_cachedData._mobile[apiVersion][key] = model.defaultValue;
			}
		};

		// Set enabled to true by default
		_cachedData._mobile[apiVersion]['_is_enabled'] = 'true';
	}

	// ------------------------------------
	function _addMissingDataSources(sdkVersion, callback) {
		var dataSources = getDataSourcePresenceStatus(sdkVersion),
			bulkAddDataSources = function(collection, id) {
				var name, type, desc, bundle;

				for (var i = 0; i < collection.length; i++) {

					name = collection[i].name;
					type = collection[i].type;
					desc = collection[i].description;
					bundle = collection[i].bundle;

					utui.define.addDataSource(id + i, undefined, name, type, desc, bundle);
				};
			};

		var inactiveCount = dataSources.inactiveCollection.length;
		var activeCount = dataSources.activeCollection.length;

		// Add missing data sources
		utui.define.getNextId.fromServer(inactiveCount, null,
			function(providedLastId, count, nextId) {
				bulkAddDataSources(dataSources.inactiveCollection, nextId);
				if(callback) callback();
			},
			function(nextId) {
				bulkAddDataSources(dataSources.inactiveCollection, nextId);
				if(callback) callback();
			});

		// Add bundle properties to existing data sources
		utui.define.getNextId.fromServer(activeCount, null,
			function(providedLastId, count, nextId) {
				bulkAddDataSources(dataSources.activeCollection, nextId);
				if(callback) callback();
			},
			function(nextId) {
				bulkAddDataSources(dataSources.activeCollection, nextId);
				if(callback) callback();
			});

		// Update dashboard
		utui.dashboard.updateDataSourceDashlet();
	}

	// ------------------------------------
	function isSourceExistInProfile(dsName, dsType) {
		var dataSourceData = dsapi.getData();
		return !$.isEmptyObject(dataSourceData[dsType+'.'+dsName]);
	}

	// ------------------------------------
	function isSourceDeprecated(variableProp, sdkVersion) {
		var isDeprecated = variableProp.mobile_sdk.is_deprecated;
		var maxSupport = variableProp.mobile_sdk.max_support || '999';
		var _m = String(maxSupport);
		var _v = String(sdkVersion);
		
		// if maximum supported version is greater than or equal to platform version
		return isDeprecated || (_m && (utui.util.versionCompare(_v, _m) >= 0));
	}

	// ------------------------------------
	function isPlatformAvailableInSource(variableProp, platform, sdkVersion) {
		var minSupportedVersion = variableProp.mobile_sdk.supported_platform[platform] || '1';
		var _v = String(sdkVersion);

		if(!variableProp.mobile_sdk.supported_platform[platform]) {
			return false;
		}

		// if minimum supported version is less than or equal to platform version
		return minSupportedVersion && (utui.util.versionCompare(minSupportedVersion, _v) <= 0);
	}

	// ------------------------------------
	function isPlatformSupportedInDataSourceVersion(supportedPlatformVersion, sdkVersion) {
		var _sdkV = String(sdkVersion);
		var _supV = String(supportedPlatformVersion);
		
		if(utui.util.versionCompare(_sdkV, _supV) >= 0) {
			return true;
		}

		return false;
	}

	// ------------------------------------
	function isDataSourceAvailableInSDKVersion(variableProp, version) {
		var platformCollection = ['android','ios','bbry','win'],
			supportedPlatformsObj = variableProp.mobile_sdk.supported_platform,
			supportedVersion;

		for (var i = platformCollection.length - 1; i >= 0; i--) {
			supportedVersion = supportedPlatformsObj[platformCollection[i]];

			if(isPlatformSupportedInDataSourceVersion(supportedVersion, version)) {
				return true;
			}
		};

		return false;
	}

	// ------------------------------------
	function getDataSourcePresenceStatus(sdkVersion) {
		var variableCollection = _mobilePublishConfig.variablesTemplate,
			variableObj,
			dataSourceObj,
			inactiveCollection = [],
			activeCollection = [],
			deprecatedCollection = [];

		variableCollection = variableCollection.sort(function (a, b) {
			if (a.name > b.name) { return 1; }
			if (a.name < b.name) { return -1; }
			// a must be equal to b
			return 0;
		});

		for (var i = 0; i < variableCollection.length; i++) {
			variableObj = variableCollection[i];

			// if ds meets minimum version requirements
			if(isDataSourceAvailableInSDKVersion(variableObj, sdkVersion)) {
				
				dataSourceObj = $.extend({}, {
					title: variableObj.title,
					name: variableObj.name,
					type: variableObj.type,
					description: variableObj.description,
					bundle: {
						_collection: "mobile",
						_version: sdkVersion,
						_id: variableObj.id
					}
				});

				// if ds is not deprecated
				if(!isSourceDeprecated(variableObj, sdkVersion)) {
					// if ds exist in profile
					if(isSourceExistInProfile(variableObj.name, variableObj.type)) {
						activeCollection.push($.extend({}, dataSourceObj));
					}
					// if ds not exist in profile
					else {
						inactiveCollection.push($.extend({}, dataSourceObj));
					}
				}
				// if ds deprecated
				else {
					// if ds exist in profile
					if(isSourceExistInProfile(variableObj.name, variableObj.type)) {
						deprecatedCollection.push($.extend({}, dataSourceObj));
					}
				}
			}
		};

		return {
			activeCollection		: activeCollection,
			inactiveCollection		: inactiveCollection,
			deprecatedCollection	: deprecatedCollection
		}
	}

	// ------------------------------------
	var _dialog = {
		// ------------------------------------
		dataSourcesList: function() {
			// ------------------------------------
			var _namespace = 'dataSourcesList_dialog',
				_$template = utui.ui.dialog.body(),
				_version;

			// ------------------------------------
			var _eventHandlers = {
				// ------------------------------------
				onCloseBtnClick: function(e) {
					$('#'+_namespace).find('.main-body').empty();
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_templateAccordion(false, false));
				}
			}

			// ------------------------------------
			function init() {
				_render.content();

				// Dialog buttons
				var buttons = [
					{
						text: localize.t('tiq.dialog.button.close'),
						id: _namespace+'_closeBtn',
						click: _eventHandlers.onCloseBtnClick,
						style: 'float:right; margin-right: 12px'
					}
				];

				utui.ui.dialog.show(_namespace, localize.t('tiq.publish.config.mobile.mobile_sdk_data_sources_library') + " v"+_version, buttons, _$template, { width: 900, height: 524 }, _eventHandlers.onCloseBtnClick);
			}

			// ------------------------------------
			function render() {
				$('#'+_namespace).find('.main-body').html('<div class="section-padded">' + _viewModel.getVariablesView() + '</div>');

				_bindUI.mobileTooltip(_namespace);

				utui.ui.dialog.adjustPanelHeights(_namespace);
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				// @param (version) string -- version number of SDK (i.e. '3.0')
				// @param (isAudit) boolean -- renders audit view with capabilities for updating data sources
				show: function(version, isAudit) {
					_version = version;

					init();
					render();
				}
			}

			return _public;
		}(),
		// ------------------------------------
		confirmActivateMobile: function() {
			// ------------------------------------
			var _namespace = 'confirmActivateMobile_dialog',
				_$template = utui.ui.dialog.body(),
				_container;

			// ------------------------------------
			var _view = {
				mainContent: function() {
					var v = '';

						v += '<div id="'+_namespace+'_description">';
							v += '<div class="section-padded">';
								v += '<div class="dialog-icon-container">';
									v += '<i class="icon-warning-sign" style="color:orange;"></i>';
								v += '</div>';
								v += '<div class="dialog-description">';
									v += '<p><strong>' + localize.t('tiq.publish.config.mobile.are_you_sure_activate_mobile_library') + '</strong></p>';
									v += '<p>' + localize.t('tiq.publish.config.mobile.click_activate_to_enable') + '</p>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				}
			}

			// ------------------------------------
			var _eventHandlers = {
				onActivateBtnClick: function(e) {
					var apiVersion = _mobilePublishConfig.version._default;
					var sdkVersion = _util.getMobileSDKParityVersionByAPIVersion(apiVersion);

					_api.addVersion(apiVersion);
					_addMissingDataSources(sdkVersion, function() {

						// **
						_setFieldsInDataObject(apiVersion);

						// Set global version
						_userSelectedVersion = apiVersion;

						// enable mobile flag
						_cachedData._mobile = $.extend(_cachedData._mobile, { _firstpublish: true });

						_panel.mobile.render(apiVersion);
					});

					utui.ui.dialog.dispose(_namespace);
				},
				// ------------------------------------
				onCancelBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.mainContent());
				}
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				show: function(container) {
					_container = container;
					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.activate'),
							id: _namespace+'_activateBtn',
							click: _eventHandlers.onActivateBtnClick
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							id: _namespace+'_cancelBtn',
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					utui.ui.dialog.show(_namespace, localize.t('tiq.publish.config.mobile.mobile_confirm_activation'), buttons, _$template, { width: 360, height: 210 }, _eventHandlers.onCancelBtnClick);
				}
			}

			return _public;
		}(),
		// ------------------------------------
		addMobileLibrary: function() {
			// ------------------------------------
			var _namespace = 'confirmAddMobileLibrary_dialog',
				_$template = utui.ui.dialog.body();

			// ------------------------------------
			var _view = {
				mainContent: function() {
					var v = '';

						v += '<div id="'+_namespace+'_description">';
							v += '<div class="container-fluid">';
								v += '<div class="row-fluid">';
									v += '<div class="span12">';
										v += '<h2>' + localize.t('tiq.publish.config.mobile.select_the_versions') + '</h2>';
										v += '<div id="'+_namespace+'_selectVersionContainer">';

										v += '</div>';
										v += '<p>' + localize.t('tiq.publish.config.mobile.by_clicking_add') + '<p>';
									v += '</div>';
								v += '</div>';
							v += '</div>';
						v += '</div>';

					return v;
				}
			}

			// ------------------------------------
			var _eventHandlers = {
				// ------------------------------------
				onAddBtnClick: function(e) {
					var selectedVersionValues = getSelectedVersionValues(),
						sdkVersion,
						apiVersion;

					for (var i = 0; i < selectedVersionValues.length; i++) {
						apiVersion = selectedVersionValues[i];
						sdkVersion = _util.getMobileSDKParityVersionByAPIVersion(apiVersion);

						_api.addVersion(apiVersion);
						_addMissingDataSources(sdkVersion, function() {
							
							// show fields for api version
							_setFieldsInDataObject(apiVersion);

							// set user selected version
							_userSelectedVersion = apiVersion;

							// enable mobile flag
							_cachedData._mobile = $.extend(_cachedData._mobile, { _firstpublish: true });

							_panel.mobile.render(apiVersion);
						});
					};


					utui.ui.dialog.dispose(_namespace);
				},
				// ------------------------------------
				onCancelBtnClick: function(e) {
					utui.ui.dialog.dispose(_namespace);
				}
			}

			// ------------------------------------
			var _viewModel = {
				getSelectVersionCollectionView: function() {
					var versionList = _api.getAllVersions(),
						data = _api.getVersions(),
						apiVersion,
						content = '';

					content += '<select id="'+_namespace+'_selectVersionList" class="span12" multiple>';

					for(var key in versionList) {
						if(!versionList.hasOwnProperty(key)) continue;

						apiVersion = versionList[key];
						sdkVersion = _util.getMobileSDKParityVersionByAPIVersion(apiVersion);

						// If version exists in cache already, skip it
						if(~data.indexOf(apiVersion)) continue;

						content += '<option value="'+apiVersion+'">' + localize.t('tiq.publish.config.mobile.mobile_sdk_version', {version:('v'+sdkVersion)}) + '</option>';
					}

					content += '</select>';

					return content;
				}
			}

			// ------------------------------------
			// Adds the content to the template
			var _render = {
				// ------------------------------------
				content: function() {
					_$template.find('.dialog-content-body').html(_view.mainContent());
				}
			}

			function getSelectedVersionValues() {
				var selectedValues = [];

				$('#'+_namespace+'_selectVersionList :selected').each(function(){
					selectedValues.push($(this).val());
				});

				return selectedValues;
			}

			// ------------------------------------
			function init() {
					_render.content();

					// Dialog buttons
					var buttons = [
						{
							text: localize.t('tiq.dialog.button.add'),
							id: _namespace+'_addBtn',
							click: _eventHandlers.onAddBtnClick
						},
						{
							text: localize.t('tiq.dialog.button.cancel'),
							id: _namespace+'_cancelBtn',
							click: _eventHandlers.onCancelBtnClick,
							style: 'float:left; margin-left: 12px'
						}
					];

					utui.ui.dialog.show(_namespace, localize.t('tiq.publish.config.mobile.add_versions'), buttons, _$template, { width: 360, height: 210 }, _eventHandlers.onCancelBtnClick);
			}

			// ------------------------------------
			function render() {
				$('#'+_namespace+'_selectVersionContainer').empty().html( _viewModel.getSelectVersionCollectionView() );
			}

			// ------------------------------------
			var _public = {
				// ------------------------------------
				show: function() {
					init();
					render();
				}
			}

			return _public;
		}()
	};

	// ------------------------------------
	var _view = {
		// ------------------------------------
		serverErrorMessage: function(message) {
			return '<div class="section-padded bg-danger">'+message+'</div>';
		},
		// ------------------------------------
		addVersionBtnItemView: function() {
			return '<button id="'+_namespace+'_addVersionBtn" class="btn btn-mini i-color-add"><i class="icon-plus"></i> ' + localize.t('tiq.publish.config.mobile.add_version') + '</button>';
		},
		// ------------------------------------
		icon: {
			android: function(isInactive) {
				return '<div class="mobile-icon mobile-icon-android'+(isInactive ? ' inactive' : '')+'" title="' + localize.t('tiq.publish.config.mobile.icon.android' + (isInactive ? '_not_supported' : '')) + '"><i class="icon-android"></i></div>';
			},
			ios: function(isInactive) {
				return '<div class="mobile-icon mobile-icon-ios'+(isInactive ? ' inactive' : '')+'" title="' + localize.t('tiq.publish.config.mobile.icon.ios' + (isInactive ? '_not_supported' : '')) + '"><i class="icon-apple"></i></div>';
			},
			bbry: function(isInactive) {
				return '<div class="mobile-icon mobile-icon-bbry'+(isInactive ? ' inactive' : '')+'" title="' + localize.t('tiq.publish.config.mobile.icon.blackberry' + (isInactive ? '_not_supported' : '')) + '"></div>';
			},
			win: function(isInactive) {
				return '<div class="mobile-icon mobile-icon-win'+(isInactive ? ' inactive' : '')+'" title="' + localize.t('tiq.publish.config.mobile.icon.windows' + (isInactive ? '_not_supported' : '')) + '"><i class="icon-windows"></i></div>';
			}
		},
		// ------------------------------------
		mobileBundleTableCollectionView: function(content) {
			var v = '';
				v += '<table class="table table-striped utui-table-clearfont" style="margin-bottom:48px">';
					v += '<thead>';
						v += '<tr>';
							v += '<td><strong>' + localize.t('tiq.publish.config.mobile.name') + '</strong></td>';
							v += '<td><strong>' + localize.t('tiq.publish.config.mobile.description') + '</strong></td>';
							v += '<td style="width:130px;"><strong>' + localize.t('tiq.publish.config.mobile.platform') + '</strong></td>';
						v += '</tr>';
					v += '</thead>';
					v += '<tbody>';
						v += content;
					v += '</tbody>';
				v += '</table>';
			return v;
		},
		// ------------------------------------
		mobileBundleTableItemView: function(title, name, desc, prop) {
			var v = '';
				v += '<tr>';

					v += '<td>';
						v += '<div class="table-cell-variable">'+name+'</div>';
					v += '</td>';

					v += '<td>';
						v += '<div class="table-cell-title">'+title+'</div>';
						v += '<div class="table-cell-description">'+desc+'</div>';
						if(prop.var_type && !$.isEmptyObject(prop.var_type)) {
							v += '<div class="table-cell-var_type">';
								v += '<strong>' + localize.t('tiq.publish.config.mobile.type') + '</strong> '+prop.var_type;
							v += '</div>';
						}
						if(prop.var_example && !$.isEmptyObject(prop.var_example)) {
							v += '<div>';
								v += '<strong>' + localize.t('tiq.publish.config.example') + '</strong> <span class="table-cell-var_example">'+prop.var_example+'</span>';
							v += '</div>';
						}
						if(prop.disclaimer && !$.isEmptyObject(prop.disclaimer)) {
							v += '<div class="table-cell-disclaimer">';
								v += '<strong>' + localize.t('tiq.publish.config.mobile.disclaimer') + '</strong> '+prop.disclaimer;
							v += '</div>';
						}
						if(prop.is_deprecated) {
							v += '<div class="table-cell-deprecated bg-warning"><i class="icon-warning-sign"></i> '+prop.deprecated_msg+"</div>";
						}
					v += '</td>';
					v += '<td>';
						v += '<div class="table-cell-platform">'+prop.platforms+'</div>';
					v += '</td>';
				v += '</tr>';
			return v;
		}
	};


	// ------------------------------------
	var _viewModel = {
		// ------------------------------------
		getAddedVersionsListView: function() {
			var versionList = _api.getVersions(),
				content = '',
				list = '',
				sdkVerison;

			for(var key in versionList) {
				sdkVerison = _util.getMobileSDKParityVersionByAPIVersion(versionList[key]);
				list += '<li><a href="#'+versionList[key]+'" class="js-versiontab" data-tab-id="'+versionList[key]+'">' + localize.t('tiq.publish.config.mobile.mobile_sdk_version', {version:('v'+sdkVerison)}) + '</a></li>';
			}

			content = utui.ui.template.navigationCompositeView('<ul class="dialog-context-nav">'+list+'</ul>', '<div class="alignright">' + _view.addVersionBtnItemView() + '</div>' + localize.t('tiq.publish.config.versions'));

			return content;
		},
		// ------------------------------------
		getArticleCollectionView: function(collection) {
			var resourceCollection = collection,
				resourceModel,
				content = '';

				for (var i = resourceCollection.length - 1; i >= 0; i--) {
					resourceModel = resourceCollection[i];

					content += utui.ui.template.articleButton(resourceModel.title, null, resourceModel.type, resourceModel.url);
				};

			return content;
		},

		// ------------------------------------
		getPlatformSupportItemView: function(variableProp, version) {
			var supportedPlatforms = ['android','ios','bbry','win'],
				platform,
				content = '';

			for (var i = 0; i < supportedPlatforms.length; i++) {
				platform = supportedPlatforms[i];

				if(isPlatformAvailableInSource(variableProp, platform, version)) {
					content += _view.icon[platform]();
				}
				else {
					content += _view.icon[platform](true);
				}
			};

			return content;
		},

		// ------------------------------------
		getTableItemView: function(collection, version) {
			var content = '',
				variablesTemplate = _mobilePublishConfig.variablesTemplate,
				variableObj,
				properties,
				variableProp;

			for (var i = 0; i < collection.length; i++) {
				variableObj = collection[i];
				variableProp = variablesTemplate.filter(function(a) { return a.id === variableObj.bundle._id })[0];

				properties = $.extend({}, {
					var_type: variableProp.var_type,
					var_example: variableProp.var_example,
					disclaimer: variableProp.disclaimer,
					is_deprecated: variableProp.mobile_sdk.is_deprecated,
					deprecated_msg: variableProp.mobile_sdk.deprecated_msg,
					platforms: this.getPlatformSupportItemView(variableProp, version)
				});

				content += _view.mobileBundleTableItemView(variableObj.title, variableObj.name, variableObj.description, properties);
			};

			return _view.mobileBundleTableCollectionView(content);
		},
		// ------------------------------------
		getVariablesView: function(sdkVersion) {
			var _v = sdkVersion || _util.getMobileSDKParityVersionByAPIVersion(_userSelectedVersion),
				dataSources = getDataSourcePresenceStatus(_v),
				content = '';

			if(dataSources.inactiveCollection.length > 0) {
				content += '<div class="container-fluid"><div class="row-fluid"><div class="span12"><div class="mobile-datasources-header-container"><h2>' + dataSources.inactiveCollection.length + ' ' + localize.t('tiq.publish.config.mobile.data_sources_to_be_added') + '</h2></div></div></div></div>';
				content += '<div class="container-fluid">' + this.getTableItemView(dataSources.inactiveCollection, _v) + '</div>';
			}
			if(dataSources.deprecatedCollection.length > 0) {
				content += '<div class="container-fluid"><div class="row-fluid"><div class="span12"><div class="mobile-datasources-header-container"><h2>' + dataSources.deprecatedCollection.length + ' ' + localize.t('tiq.publish.config.mobile.deprecated_data_sources') + '</h2></div></div></div></div>';
				content += '<div class="container-fluid">' + this.getTableItemView(dataSources.deprecatedCollection, _v) + '</div>';
			}
			if(dataSources.activeCollection.length > 0) {
				content += '<div class="container-fluid"><div class="row-fluid"><div class="span12"><div class="mobile-datasources-header-container"><h2>' + dataSources.activeCollection.length + ' ' + localize.t('tiq.publish.config.mobile.already_added_data_sources') + '</h2></div></div></div></div>';
				content += '<div class="container-fluid">' + this.getTableItemView(dataSources.activeCollection, _v) + '</div>';
			}

			return content;
		},
		// ------------------------------------
		showSaveDisclaimer: function() {
			var content = '<div class="bg-warning js-notification"><div class="section-padded">' + localize.t('tiq.publish.config.mobile.saved_changes') + '</div></div>';

			if(!$('#'+_namespace).find('.js-notification').length) {
				$('#'+_namespace).find('.modal-footer').prepend( content );
			}

			utui.ui.dialog.adjustPanelHeights(_namespace);
		},
		// ------------------------------------
		// Interprets the value of current and renamed fields, then sets it accordingly
		populateUserOptions: function(publishDataObj, configObj, namespace, isReadOnly) {

			function isRestricted(field, key) {
				// check mobile library extension
				if(key === "enable_mobile" && !exapi.isExtensionInProfile('100030')) return true;

				// check legacy enable purge footer
				if(key === "enable_purge_footer" && (parseInt(utui.data.settings.creation) > parseInt(utui.publish.footerUsageExpiration))) return true;

				return false;
			}

			for(var i in configObj) {
				if(!configObj.hasOwnProperty(i)) continue;

				var fieldset = configObj[i]['fieldset'],
					userValue;

				for(var key in fieldset) {
					if(!fieldset.hasOwnProperty(key)) continue;

					var id = namespace+'_'+key,
						field = fieldset[key],
						defaultValue = field.defaultValue,
						fieldType = field.fieldType;

					userValue = publishDataObj[key];

					if(isRestricted(field, key)) continue;

					// Legacy support
					if(key === 'disable_custom_version_name' || key === 'disable_save_on_old_version') {
						if(userValue == 'yes' || userValue === 'true' || userValue === true) {
							if(isReadOnly) {
								utui.ui.form.readonly.setFieldValue(id, fieldType, false, defaultValue);
							}
							else {
								utui.ui.form.setFieldValue(id, fieldType, false, defaultValue);
							}
						}
						else {
							if(isReadOnly) {
								utui.ui.form.readonly.setFieldValue(id, fieldType, true, defaultValue);
							}
							else {
								utui.ui.form.setFieldValue(id, fieldType, true, defaultValue);
							}
						}
					}
					else {
						if(isReadOnly) {
							utui.ui.form.readonly.setFieldValue(id, fieldType, userValue, defaultValue);
						}
						else {
							utui.ui.form.setFieldValue(id, fieldType, userValue, defaultValue);
						}
					}
				}
			}
		},
		// ------------------------------------
		getHeaderGeneralView: function() {
			var title = '<h2>' + localize.t('tiq.publish.config.general_publishing') + '</h2>',
				description = '<p>' + localize.t('tiq.publish.config.use_these_settings_to_modify') + '</p>',
				content = '<div class="section-padded-top-bottom">'+utui.ui.template.contextFieldItemView(title + description)+'</div>';

			return content;
		},
		// ------------------------------------
		getMobileIntroContextView: function() {
			var content,
				v = '';

				v += '<h2>' + localize.t('tiq.publish.config.mobile.activating_mobile_library') + '</h2>';
				v += '<p>' + localize.t('tiq.publish.config.when_activating_the_mobile') + '</p>';

				content = '<div class="container-fluid"><div class="section-padded-top-bottom">'+v+'</div></div>';

			return content;
		},
		// ------------------------------------
		getHeaderMobileView: function(apiVersion) {
			var content = '',
				_v = apiVersion || false,
				sdkVersion = _util.getMobileSDKParityVersionByAPIVersion(_v),
				id = _namespace+'_mobile__lib_version',
				btnItem = '',
				col1 = '',
				col2 = '';

			var view = {
				activateBtnItemView: function() {
					return '<button id="'+_namespace+'_activateMobileBtn" class="btn btn-success">' + localize.t('tiq.publish.config.mobile.activate_mobile_library') + '</button>';
				},
				activateBtnFirstTimeItemView: function() {
					return '<button id="'+_namespace+'_activateMobileFirstTimeBtn" class="btn btn-success">' + localize.t('tiq.publish.config.mobile.activate_mobile_library') + '</button>';	
				},
				deactivateBtnItemView: function() {
					return '<button id="'+_namespace+'_deactivateMobileBtn" class="btn">' + localize.t('tiq.publish.config.mobile.deactivate_mobile_library') + '</button>';
				}
			};

			// If version has been passed by (existing version available)
			if(_v) {
				// Set button item
				btnItem = _api.isVersionEnabled(_v) ? view.deactivateBtnItemView() : view.activateBtnItemView();

				// Column 1
				col1 += '<h2>' + localize.t('tiq.publish.config.mobile.mobile_library_publishing') + ' v<span>'+sdkVersion+'</span></h2>';
				col1 += '<p>' + localize.t('tiq.publish.config.mobile.use_these_settings_to_configure') + '</p>';

				// Column 2
				col2 += '<div class="alignright" style="margin-bottom: 8px;">'+btnItem+'</div>';
			}
			// If new user
			else {
				col1 += '<h2>' + localize.t('tiq.publish.config.mobile.mobile_library_publishing') + '</h2>';
				col1 += '<p>' + localize.t('tiq.publish.config.mobile.use_these_settings_to_configure') + '</p>';

				col2 += '<div class="alignright" style="margin-bottom: 8px;">'+view.activateBtnFirstTimeItemView()+'</div>';
			}

			content += '<div class="container-fluid">'+utui.ui.template.row.splitCol('<div class="section-padded-top-bottom">'+col1+'</div>', '<div class="section-padded-top-bottom">'+col2+'</div>')+"</div>";

			return content;
		},

		// ------------------------------------
		getPublishStatusView: function(apiVersion, sdkVersion) {
			var content = '',
				status = '',
				col1 = '';

			// User has no data sources
			if(!_api.isVersionEnabled(apiVersion)) {
				col1 = '<i class="icon-minus-sign"></i> ' + localize.t('tiq.publish.config.mobile.mobile_library_publishing_deactivated', { version: sdkVersion });
				status = 'danger';

				content += '<div class="container-fluid bg-'+status+'">';
					content += '<div class="row-fluid valign-container">';
						content += '<div class="span12">';
							content += '<div class="section-padded-top-bottom">';
								content += col1;
							content += '</div>';
						content += '</div>';
					content += '</div>';
				content += '</div>';
			}

			return content;
		},

		// ------------------------------------
		getDataSourceStatusView: function(sdkVersion) {
			var sdkVersion = sdkVersion || _util.getMobileSDKParityVersionByAPIVersion(_userSelectedVersion),
				dataSources = getDataSourcePresenceStatus(sdkVersion),
				activeCollectionLength = dataSources.activeCollection.length,
				inactiveCollectionLength = dataSources.inactiveCollection.length,
				deprecatedCollectionLength = dataSources.deprecatedCollection.length,
				content = '',
				status = '',
				col1 = '',
				col2 = '';

			// User has no data sources
			if(activeCollectionLength === 0) {
				col1 = '<i class="icon-warning-sign"></i> ' + localize.t('tiq.publish.config.mobile.you_do_not_have_any_mobile');
				status = 'warning';

				col2 = '<button id="'+_namespace+'_updateDataSourcesBtn" class="btn">' + localize.t('tiq.publish.config.mobile.update_data_sources') + '</button>';
			}
			// User has missing data sources
			else {

				if(inactiveCollectionLength > 0) {
					status = 'warning';
					if (deprecatedCollectionLength > 0) {
						col1 = '<i class="icon-warning-sign"></i> ' + localize.t('tiq.publish.config.mobile.you_have_num_missing_mobile_deprecated', {num:inactiveCollectionLength, deprecated:deprecatedCollectionLength});
					} else {
						col1 = '<i class="icon-warning-sign"></i> ' + localize.t('tiq.publish.config.mobile.you_have_num_missing_mobile', {num:inactiveCollectionLength});
					}

					col2 = '<button id="'+_namespace+'_updateDataSourcesBtn" class="btn">' + localize.t('tiq.publish.config.mobile.update_data_sources') + '</button>';
				}
				// User has all data sources
				else {
					status = 'success';
					var deprecated = deprecatedCollectionLength > 0 ? ' <i>(<strong>' + deprecatedCollectionLength + '</strong> deprecated)</i>' : '';
					col1 = '<i class="icon-ok"></i>' + localize.t('tiq.publish.config.mobile.all_mobile_data_sources', {version: sdkVersion, deprecated: deprecated});
				}
			}

			content += '<div class="container-fluid bg-'+status+'">';
				content += '<div class="row-fluid valign-container">';
					content += '<div class="span8">';
						content += '<div class="section-padded-top-bottom">';
							content += col1;
						content += ' <a href="#" class="js-show-ds-list" data-id="'+sdkVersion+'" style="color:#09f; text-decoration:none;">' + localize.t('tiq.publish.config.mobile.view_list') + '</a>';
						content += '</div>';
					content += '</div>';
					content += '<div class="span4 alignright">';
						content += col2;
					content += '</div>';
				content += '</div>';
			content += '</div>';

			return content;
		},
		// ------------------------------------
		// @param (version) number - used to determine fieldset status for mobile (TODO: figure out a way to break this logic away from this call for modularity purposes)
		getFieldSetView: function(categoryCollection, slug, apiVersion) {
			var contentSet = '',
				isEnabled = apiVersion ? _api.isVersionEnabled(apiVersion) : true, // checks version to see if enabled, otherwise default is true
				id = (apiVersion ? _namespace+'_'+slug+'_'+apiVersion : _namespace+'_'+slug),
				categoryModel,
				title,
				fieldsetCollection;

			for (var i = 0; i < categoryCollection.length; i++) {
				categoryModel = categoryCollection[i];

				title = categoryModel.categoryTitle || false;
				fieldsetCollection = utui.ui.template.form.fieldsetCollectionView( categoryModel.fieldset, id, isEnabled );

				contentSet += '<div class="container-fluid"><div class="row-fluid"><div class="span12">';
					contentSet += utui.ui.template.compositeView( title, utui.ui.template.form.rowCollectionView( fieldsetCollection ), true, true );
				contentSet += '</div></div></div>';
			};

			return '<div class="section-padded-top-bottom">'+contentSet+'</div>';
		},
		// ------------------------------------
		setPanel: function(slug) {
			$('#'+_namespace).find('.tab-pane').removeClass('active');
			$('#'+_namespace+'_'+slug).addClass('active');

			return;
		}
	};

	// ------------------------------------
	var _bindUI = {
		// --------------------------------------------------
		addVersionBtn: function() {
			$('#'+_namespace+'_addVersionBtn').off('click').on('click', _eventHandler.onAddVersionBtnClick);
		},
		// --------------------------------------------------
		mobileTooltip: function(namespace) {
			var _n = namespace || _namespace;
			$('#'+_n).find('.mobile-icon').tipsy({ gravity: 's', fade: false, opacity: 0.9 });
		},
		// --------------------------------------------------
		updateDataSourcesBtn: function() {
			$('#'+_namespace+'_updateDataSourcesBtn').off('click').on('click', _eventHandler.onUpdateDataSourcesBtnClick);
		},
		// --------------------------------------------------
		showDSList: function() {
			$('#'+_namespace).find('.js-show-ds-list').off('click').on('click', _eventHandler.onShowDSListBtnClick);
		},
		// --------------------------------------------------
		deactivateMobileBtn: function() {
			$('#'+_namespace+'_deactivateMobileBtn').off('click').on('click', _eventHandler.onDeactivateMobileBtnClick);
		},
		// --------------------------------------------------
		activateMobileBtn: function() {
			$('#'+_namespace+'_activateMobileBtn').off('click').on('click', _eventHandler.onActivateMobileBtnClick);
		},
		// --------------------------------------------------
		activateMobileFirstTimeBtn: function() {
			$('#'+_namespace+'_activateMobileFirstTimeBtn').off('click').on('click', _eventHandler.onActivateMobileFirstTimeBtnClick);
		},
        // --------------------------------------------------
        topNavMenu: function() {
            $('#'+_namespace).find('.js-navtab').off('click').on('click', _eventHandler.onTopNavMenuClick);
        },
        // --------------------------------------------------
        sideNavMenu: function() {
            $('#'+_namespace).find('.js-versiontab').off('click').on('click', _eventHandler.onSideNavMenuClick);
        },
		// --------------------------------------------------
		formFields: function() {
			$('#'+_namespace).find('input').off('change').on('change', _eventHandler.onFieldInput);
			$('#'+_namespace).find('select').off('change').on('change', _eventHandler.onFieldInput);
		},
		// --------------------------------------------------
		convertSelect2: function(content) {
			var $selectLists = content.find('select');
			$.each($selectLists, function() {
				var $el = $(this);
				$el.select2($el.data().placeholder ? {placeholder:$el.data().placeholder} : {});				
			});
		}
	};

	// ------------------------------------
	var _eventHandler = {
		// ------------------------------------
		onAddVersionBtnClick: function(e) {
			_dialog.addMobileLibrary.show();
		},
		// ------------------------------------
		onUpdateDataSourcesBtnClick: function(e) {
			e.stopImmediatePropagation();

			var sdkVersion = _util.getMobileSDKParityVersionByAPIVersion(_userSelectedVersion);
			_addMissingDataSources(sdkVersion, function() {
				_panel.mobile.render();
			});
		},
		// ------------------------------------
		onShowDSListBtnClick: function(e) {
			e.stopImmediatePropagation();
			e.preventDefault();

			var $el = $(this),
				sdkVersion = $el.attr('data-id');

			_dialog.dataSourcesList.show(sdkVersion, true);
		},
		// ------------------------------------
		onDeactivateMobileBtnClick: function(e) {
			e.stopImmediatePropagation();

			var _v = _userSelectedVersion;

			_cachedData._mobile[_v]._is_enabled = ""+false;
			_cachedData._mobile._firstpublish = ""+true;


			_viewModel.showSaveDisclaimer();

			_panel.mobile.render();
		},
		// ------------------------------------
		onActivateMobileFirstTimeBtnClick: function(e) {
			e.stopImmediatePropagation();

			_dialog.confirmActivateMobile.show();
		},
		// ------------------------------------
		onActivateMobileBtnClick: function(e) {
			e.stopImmediatePropagation();

			var _v = _userSelectedVersion;

			_cachedData._mobile[_v]._is_enabled = ""+true;
			_cachedData._mobile._firstpublish = ""+true;

			_viewModel.showSaveDisclaimer();

			_panel.mobile.render();
		},
		// ------------------------------------
		onFieldInput: function(e) {

			var $el = $(this),
				tabPane = $el.closest('.tab-pane').attr('data-tab-id'),
				version = _userSelectedVersion,
				errorEntryIndex;

			if(_validation.isValid(tabPane)) {
				errorEntryIndex = _validation.tabWithErrors.indexOf(tabPane);

				if(errorEntryIndex > -1) {
					_validation.tabWithErrors.splice(errorEntryIndex, 1);
				}

				if(tabPane === 'mobile') {
					var obj = _api.interpretData(tabPane, version);

					// TODO: use something besides extend, since extend doesn't add false or undefined functions
					_cachedData._mobile[version] = $.extend(_cachedData._mobile[version], obj);
				}
			}

			_viewModel.showSaveDisclaimer();
		},
		// ------------------------------------
		onTopNavMenuClick: function(e) {
			e.preventDefault();

			var $el = $(this),
				tabId = $el.attr('data-tab-id');

			$(this).closest('.nav').find('.active').removeClass('active');
			$(this).closest('li').addClass('active');

			_currentPanel = tabId;

			_viewModel.setPanel(tabId);

			utui.ui.dialog.adjustPanelHeights(_namespace);
		},
		// ------------------------------------
		onSideNavMenuClick: function(e) {
			e.preventDefault();

			var $el = $(this),
				apiVersion = $el.attr('data-tab-id');

			_userSelectedVersion = apiVersion;

			$(this).closest('.dialog-context-nav').find('.selected').removeClass('selected');
			$(this).closest('li').addClass('selected');

			// TODO: move this into a setSubPanel function...
			var slug = 'mobile',
				$mainPanelBody = $('#'+_namespace+'_'+slug).find('.main-body');

			$mainPanelBody
				.empty()
				.append( _subpanel.mobile.getView(apiVersion) )
				.append( );

			_subpanel.mobile.setBind(apiVersion);


			utui.ui.dialog.adjustPanelHeights(_namespace);
      utui.ui.enableAccordionElements(_namespace+'_'+slug);
		},
		// ------------------------------------
		onSaveBtnClick: function(e) {
			var results;

			if(_validation.isValid()) {
				utui.util.loadingModalStart(localize.t('tiq.publish.config.saving_publish_settings'));

				results = _api.getData();

				utui.data.publish = $.extend({}, results);
				// Clean up of bug wreckage
				delete utui.data.publish.account;
				delete utui.data.publish.profile;

				utui.service.get(utui.service.restapis.SAVE_PUBLISH_CONFIG, results, null, _response.onSavePublishConfigSuccess, _response.onSavePublishConfigError);


			}
			else {
				if(_validation.tabWithErrors.length > 0) {
					$('#'+_namespace).find('.js-navtab[data-tab-id="'+_validation.tabWithErrors[0]+'"]').trigger('click');
				}

				_validation.scrollToError();
			}
		},
		// ------------------------------------
		onCloseBtnClick: function(e) {

			_clear();
			utui.ui.dialog.dispose(_namespace);
		}
	};

	// ------------------------------------
	var _render = {
		// ------------------------------------
		modalHead: function() {

			// TODO: separate this out
			var tab = [
					{
						id: 0,
						slug: 'general',
						title: localize.t('tiq.publish.config.general_publishing')
					},
					{
						id: 1,
						slug: 'mobile',
						title: localize.t('tiq.publish.config.mobile_library_publishing')
					}
				],
				content = '';

			for(var key in tab) {
				if(!tab.hasOwnProperty(key)) continue;

				content += _templateTabItemView(tab[key].slug, tab[key].title, tab[key].description);
			}

			$('#'+_namespace).find('.modal-header')
					.prepend('<div class="js-validation"></div>')
					.append( _templateTabCollectionView(content) ).find('li:first-child').addClass('active');
		},
		// ------------------------------------
		modalBody: function() {
			var tabs = _panel._tabs,
				content = '';

			for(var key in tabs) {
				if(!tabs.hasOwnProperty(key)) continue;

				content += utui.ui.template.panelItemView(_namespace+'_'+tabs[key].slug, tabs[key].slug, _templateAccordion(true) )
			}

			$('#'+_namespace).find('.modal-body').html( utui.ui.template.panelCollectionView(content) );
		}
	};

	// ------------------------------------
	var _api = {
		// ------------------------------------
		isVersionEnabled: function(version) {
			// If version exists, return boolean
			if(!$.isEmptyObject(_cachedData._mobile[version])) {
				return _cachedData._mobile[version]._is_enabled == 'true';
			}
			return null;
		},
		// ------------------------------------
		getVersions: function() {
			var collection = [],
				versionList = _api.getAllVersions(),
				data = _cachedData._mobile,
				version;

			for(var key in versionList) {
				if(!versionList.hasOwnProperty(key)) continue;

				version = versionList[key];

				if(!$.isEmptyObject(data[version])) {
					collection.push(version);
				}
			}

			return collection.sort();
		},
		// ------------------------------------
		getAllVersions: function() {
			var collection = [],
				versionList = _mobilePublishConfig.version;

			for(var key in versionList) {
				if(!versionList.hasOwnProperty(key)) continue;

				if(key.indexOf('_') == 0) continue;

				collection.push(key);
			}

			return collection.sort();
		},
		// ------------------------------------
		addVersion: function(version) {
			var _v = ''+version, // convert to string
				versionList = _api.getAllVersions();

			if(!this.isVersionInCachedData(_v) && ~versionList.indexOf(_v)) {

				// TODO: add data source object in here
				// _cachedData._mobile[_v] = { alpha: true }
				_cachedData._mobile[_v] = { }
				return true;
			}

			return;
		},
		// ------------------------------------
		removeVersion: function(version) {
			var _v = ''+version; // convert to string

			if(this.isVersionInCachedData(_v)) {
				delete _cachedData._mobile[_v];

				// return verified results
				return this.getVersions();
			}
			return;
		},
		// ------------------------------------
		isVersionInCachedData: function(version) {
			var data = _cachedData._mobile;

			if(!$.isEmptyObject(data[version])) {
				return true;
			}
			return false;
		},
		// ------------------------------------
		interpretData: function(tabPane, version) {
			var obj = {},
				panelId = _namespace+'_'+tabPane,
				_id = _namespace+'_'+tabPane+(version?'_'+version:''),
				$panel = $('#'+panelId),
				$textfields = $panel.find('input[type="text"]'),
				$radios = $panel.find('input[type="radio"]:radio:checked'),
				$select = $panel.find('select');

			$textfields.each(function(i) {
				var $el = $(this),
					value = $el.val(),
					id = $el.attr('id');

				if (id) {
					id = id.replace(_id+'_', '');
					obj[id] = value;
				}
			});

			$radios.each(function(i) {
				var $el = $(this),
					value = $el.val(),
					id = $el.parent().attr('id').replace(_id+'_', '');

				if(tabPane === 'general') {
					if(id === 'disable_custom_version_name' || id === 'disable_save_on_old_version') {
						obj[id] = (value == 'false') ? 'yes' : '';
					}
					else {
						obj[id] = (value == 'true') ? 'yes' : '';
					}
				}
				else {
					obj[id] = (value == 'true') ? true : false;
				}
			});

			$select.each(function(i) {
				var $el = $(this),
					value = $el.val(),
					id = $el.attr('id').replace(_id+'_', '');

				obj[id] = (value !== _constants.SELECT_PROFILE) ? value : '';
			});

			return obj;
		},
		// ------------------------------------
		// This is the master data that will get sent back
		getData: function() {
			var results = _api.interpretData('general'); //**TODO** bug -- only takes "General" if that's the tab we have visible..... ugh.

			results['_mobile'] = $.extend(_cachedData._mobile, _cachedData._mobile);
			results = $.extend({}, results, { revision: utui.data.settings.revision });

			return results;
		}
	};

	// ------------------------------------
	function _getVal($el) {
		return $el.val().trim();
	}

	// ------------------------------------
	var _request = {
		// ------------------------------------
		getDatacloudProfiles: function() {
			utui.util.showSpinner();

			var url = utui.service.addParamsToURL(utui.service.restapis.DATACLOUD_PROFILES, {account: utui.login.account});
			return utui.service.get(url, null, null, _response.onGetDatacloudProfilesSuccess, _response.onGetDatacloudProfilesError);
		}
	};

	// ------------------------------------
	var _response = {
		// ------------------------------------
		onSavePublishConfigSuccess: function(data) {
			utui.util.loadingModalStop();

			utui.util.pubsub.publish(utui.constants.publish.PUBLISH_CONFIGURATION_UPDATED);

			_clear();
			utui.ui.dialog.dispose(_namespace);
		},

		// ------------------------------------
		onSavePublishConfigError: function(status, response) {
			utui.util.loadingModalStop();

			var $head = $('#'+_namespace).find('.modal-header'),
				message = utui.service.getErrorFromResponse(response, _namespace, localize.t('tiq.publish.config.error.unable_to_save_configuration'));

			$head.find('.js-validation').html(_view.serverErrorMessage(message));

			utui.ui.dialog.adjustPanelHeights(_namespace);
		},
		// ------------------------------------
		onGetDatacloudProfilesSuccess: function(data) {
			utui.util.hideSpinner();

			if (data && data.profiles) {
				var implementationFieldsetCollection = $.grep(_generalPublishConfig.fieldsetCollection, function(elem) { return elem.categorySlug === _constants.IMPLEMENTATION; });
				if (implementationFieldsetCollection[0]) {
					implementationFieldsetCollection[0].fieldset.audienceStream_profile.fieldOptions = data.profiles;
				}
			}
		},

		// ------------------------------------
		onGetDatacloudProfilesError: function(status, response) {
			utui.util.hideSpinner();
		}
	};

	// ------------------------------------
	var _validation = {
		// ------------------------------------
		tabWithErrors: [],
		// ------------------------------------
		setError: function($categoryGroup, $fieldGroup, tabPane, message) {
			$fieldGroup.addClass('has-error').find('.row-message').html( message || '' );

			// If view is inactive, set it to active
			if(!$categoryGroup.hasClass('active')) {
				$categoryGroup.addClass('active');
			}

			if(_validation.tabWithErrors.indexOf(tabPane) === -1) {
				_validation.tabWithErrors.push(tabPane);
			}
		},

		// ------------------------------------
		// Returns true if the form fields are valid
		isValid: function(tabPane) {
			var isTabValid = true;

			if(!tabPane) {
				for (var i = 0; i < _panel._tabs.length; i++) {
					if(!_panel[_panel._tabs[i].slug].isValid()) {
						isTabValid = false;
					};
				};
			}
			else {
				return _panel[tabPane].isValid();
			}

			return isTabValid;

		},

		// ------------------------------------
		scrollToError: function() {
			var $errorEl = $('#'+_namespace).find('.form-group.has-error').get(0),
				windowScrollPos = $('#'+_namespace).find('.main-body').scrollTop();

			if($errorEl) {
				var contentPos = $($errorEl).position().top;

				// If we haven't already scrolled, scroll
				if(contentPos !== 0) {
					$('#'+_namespace).find('.main-body').animate({
						scrollTop: contentPos + windowScrollPos
					}, 800);
				}
			}
		}
	}

	// ------------------------------------
	var _panel = {
		// ------------------------------------
		_tabs: [
			{
				id: 0,
				slug: 'general',
				title: localize.t('tiq.publish.config.general_publishing')
				// description: 'Publish Tag Settings'
			},
			{
				id: 1,
				slug: 'mobile',
				title: localize.t('tiq.publish.config.mobile_library_publishing')
				// description: 'Configure your mobile API'
			}
		],
		// ------------------------------------
		general: {
			isValid: function() {
				var data = utui.data.publish,
					$el,
					value,
					hasErrors = false,
					tabPane = 'general';

				$('#'+_namespace+'_'+tabPane).find('.has-error').removeClass('has-error');

				// Add error highlighting to fields that fail
				for(var key in data) {
					if(!data.hasOwnProperty(key)) continue;

					// exclude private keys
					if(key.indexOf('_') === 0) continue;

					$el = $('#'+_namespace+'_'+tabPane+'_'+key);
					var $formGroup = $el.closest('.form-group'),
						$categoryGroup = $el.closest('.js-accordion-container');

					if(key === 'publish_dev') {
						value = _getVal($el);

						if(/['"]/g.test(value)) {
							_validation.setError($categoryGroup, $formGroup, tabPane, localize.t('tiq.publish.config.error.publish_urls_cannot_contain_quotes'));
							hasErrors = true;
						}
					}
					else if (key === 'publish_qa') {
						value = _getVal($el);

						if(/['"]/g.test(value)) {
							_validation.setError($categoryGroup, $formGroup, tabPane, localize.t('tiq.publish.config.error.publish_urls_cannot_contain_quotes'));
							hasErrors = true;
						}
					}
					else if (key === 'publish_prod') {
						value = _getVal($el);

						if(/['"]/g.test(value)) {
							_validation.setError($categoryGroup, $formGroup, tabPane, localize.t('tiq.publish.config.error.publish_urls_cannot_contain_quotes'));
							hasErrors = true;
						}
					}
					else if (key === 'publish_notify') {
						value = _getVal($el);

						if(!utui.util.isValidMultipleEmails(value)) {
							_validation.setError($categoryGroup, $formGroup, tabPane, localize.t('tiq.publish.config.error.invalid_email_publish'));
							hasErrors = true;
						}
					}
					else if (key === 'alert_notify') {
						value = _getVal($el);

						if(!utui.util.isValidMultipleEmails(value)) {
							_validation.setError($categoryGroup, $formGroup, tabPane, localize.t('tiq.publish.config.error.invalid_email_alert'));
							hasErrors = true;
						}
					}

				};

				if(hasErrors) return false;

				return true;
			},
			render: function() {
				var slug = 'general',
					$content = $('#'+_namespace+'_'+slug),
					$mainPanelBody = $content.find('.main-body'),
					$sidebarPanelBody = $content.find('.sidebar-body'),
					fieldCollection = _generalPublishConfig.fieldsetCollection,
					resourceCollection = _generalPublishConfig.resources,
					namespace = _namespace+'_'+slug;

				$mainPanelBody
					.empty()
					.append( _viewModel.getHeaderGeneralView() )
					.append( _viewModel.getFieldSetView(fieldCollection, slug) );

				$sidebarPanelBody
					.empty()
					.append(utui.ui.template.contextBox(_viewModel.getArticleCollectionView(resourceCollection), localize.t('tiq.publish.config.resources')));

				// Fill in the data
				_viewModel.populateUserOptions(utui.data.publish, fieldCollection, namespace);

				// Bind buttonset rendering
				$('#'+_namespace).find('.js-toggle-switch').buttonset();

				// Convert select lists to select2
				_bindUI.convertSelect2($mainPanelBody);

				// Bind form checks
				_bindUI.formFields();

				// Enable accordion bindings
				utui.ui.enableAccordionElements(_namespace+'_'+slug);
			}
		},
		// ------------------------------------
		mobile: {
			isValid: function() {
				return true;
			},
			render: function() {
				var slug = 'mobile',
					sideCol = '',
					$content = $('#'+_namespace+'_'+slug),
					$mainPanelBody = $content.find('.main-body'),
					$sidebarPanelBody = $content.find('.sidebar-body'),
					version = _userSelectedVersion,
					articleVersion = _userSelectedVersion || 4,
					articleCollection = _mobilePublishConfig.version[ articleVersion ].resources;

				if(_userSelectedVersion) {
					sideCol += _viewModel.getAddedVersionsListView();
				}

				sideCol += utui.ui.template.contextBox(_viewModel.getArticleCollectionView(articleCollection), localize.t('tiq.publish.config.resources'));

				$sidebarPanelBody.empty().append( sideCol );

				if(version) {
					$mainPanelBody.empty().append( _subpanel.mobile.getView(version) );
					_subpanel.mobile.setBind(version);
				}
				else {
					$mainPanelBody.empty().append( _subpanel.default.getView() );
					_subpanel.default.setBind()
				}

				_bindUI.addVersionBtn();
				_bindUI.sideNavMenu();
				_bindUI.updateDataSourcesBtn();
				_bindUI.activateMobileBtn();
				_bindUI.activateMobileFirstTimeBtn();
				_bindUI.deactivateMobileBtn();

				// Bind form checks
				_bindUI.formFields();

				// Set menu item
				$content.find('.js-versiontab[data-tab-id="'+version+'"]').trigger('click');

				utui.ui.dialog.adjustPanelHeights(_namespace);
        
        // Enable accordion bindings
        utui.ui.enableAccordionElements(_namespace+'_'+slug);

				return;
			}
		}
	};

	// ------------------------------------
	var _subpanel = {
		// ------------------------------------
		default: {
			getView: function() {
				var content = '',
					defaultAPIVersion = _mobilePublishConfig.version._default,
					sdkVersion = _util.getMobileSDKParityVersionByAPIVersion(defaultAPIVersion);

				content += _viewModel.getHeaderMobileView();
				content += _viewModel.getMobileIntroContextView();
				content += '<div class="section-padded-top-bottom">' + _viewModel.getVariablesView(sdkVersion) + '</div>';

				return content;
			},
			setBind: function() {

				_bindUI.updateDataSourcesBtn();
				_bindUI.activateMobileBtn();
				_bindUI.addVersionBtn();
				_bindUI.mobileTooltip();

				// Enable accordion bindings
				utui.ui.enableAccordionElements(_namespace);

				_bindUI.showDSList();
			}
		},

		// ------------------------------------
		mobile: {
			getView: function(apiVersion) {
				var _v = apiVersion || _userSelectedVersion,
					sdkVersion = _util.getMobileSDKParityVersionByAPIVersion(_v),
					isEnabled = _api.isVersionEnabled(_v),
					content = '',
					fieldObjects;

				fieldObjects = _mobilePublishConfig.version[ _v ].fieldsetCollection;

				content += _viewModel.getHeaderMobileView(apiVersion);
				content += _viewModel.getPublishStatusView(apiVersion, sdkVersion);

				if(isEnabled) {
					content += _viewModel.getDataSourceStatusView(sdkVersion);
				}
				content += _viewModel.getFieldSetView(fieldObjects, 'mobile', _v);

				return content;
			},
			setBind: function(apiVersion) {
				var _v = apiVersion || _userSelectedVersion,
					fieldObjects = _mobilePublishConfig.version[ _v ].fieldsetCollection,
					namespace = _namespace+'_mobile_'+_v;

				_viewModel.populateUserOptions(_cachedData._mobile[_v], fieldObjects, namespace, !_api.isVersionEnabled(_v));

				// Bind form checks
				_bindUI.formFields();
				_bindUI.addVersionBtn();
				_bindUI.sideNavMenu();
				_bindUI.updateDataSourcesBtn();
				_bindUI.deactivateMobileBtn();
				_bindUI.activateMobileBtn();
				_bindUI.showDSList();

				// Bind buttonset rendering
				$('#'+_namespace).find('.js-toggle-switch').buttonset();

				return;
			}
		}
	};

	// ------------------------------------
	// resets the cache
	function _clear() {
		_cachedData = $.extend({}, { _mobile: {} });
		_currentPanel = '';
		_version = '';
		_userSelectedVersion = '';
	}

	// ------------------------------------
	function _setVersionSelectionOnLoad() {
		var existingVersions = [];
		for(var key in _cachedData._mobile) {
			var value = parseInt(key);

			if(typeof value === 'number' && !isNaN(value)) {
				existingVersions.push(value);
			}
		}

		if(existingVersions.length > 0) {
			_userSelectedVersion = existingVersions[existingVersions.length-1];
		}
	}

	// ------------------------------------
	function render() {
		var tabs = _panel._tabs;

		// Disable tabs for now...
		_render.modalHead();
		_render.modalBody();

		_bindUI.topNavMenu();

		// Checks to see if existing data model has version...
		_setVersionSelectionOnLoad();

		// Default View
		_viewModel.setPanel('general');

		// Render panels into DOM
		for (var i = 0; i < tabs.length; i++) {
			_panel[tabs[i].slug].render();
		};

		// Dialog adjustments
		utui.ui.dialog.adjustPanelHeights(_namespace);
	}

	// ------------------------------------
	function init() {

		// Initialize new cached data obj
		_cachedData._mobile = $.extend({}, utui.data.publish._mobile);

		// Title
		var title = localize.t('tiq.publish.config.publish_configuration');

		// Dialog buttons
		var buttons = [
			{
				text: localize.t('tiq.dialog.button.save'),
				id: _namespace+'_saveBtn',
				click: _eventHandler.onSaveBtnClick,
				style: 'float:right; margin-right: 12px'
			},
			{
				text: localize.t('tiq.dialog.button.cancel'),
				id: _namespace+'_closeBtn',
				click: _eventHandler.onCloseBtnClick,
				style: 'float:left; margin-left: 12px'
			}
		];

		// Show the dialog
		utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width:920, height:624 }, _eventHandler.onCloseBtnClick);
	}

	// ------------------------------------
	var _public = {
		// ------------------------------------
		show: function() {
			init();
			$.when(_request.getDatacloudProfiles()).then(function() {
				render();
			});
		},
		cachedData: function() {
			return _cachedData;
		}
	};
	return _public;
}();

utui.tagging = {

	init:function() {
        utui.util.pubsub.subscribe(utui.constants.profile.PUBLISHED, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.profile.CREATED, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.revision.VERSION_CREATED, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.help.SUPPORT_REQUEST, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.users.CREATED, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.labels.ASSIGNED, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.chat.MSG_POSTED, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.templates.SAVED_PROFILE, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.templates.SAVED_VERSION, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.views.AUDIT_DETAILS, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.views.AUDIT_DETAILS_SC, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.reports.AUDIT_CREATE_SITE_SCAN, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.reports.AUDIT_RUN_SITE_SCAN, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.publish.WORKFLOW_ASK, this.processEvent, this);
		utui.util.pubsub.subscribe(utui.constants.help_center.TUTORIAL_STEP, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.help_center.QUICKSTART, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.tagging.EVENT, this.processEvent, this);

        // Tagging
        utui.util.pubsub.subscribe(utui.constants.tagging.TAGGING, this.processEvent, this);
        utui.util.pubsub.subscribe(utui.constants.views.TAB_CLICK, this.processEvent, this);

    },

	processEvent:function(data) {

		//make sure utag is defined
		if(typeof utag !== 'undefined') {
			data = data || {};
			var event = data.action;

			delete data.action;	// No longer needed;

			data.event_type = event;
			data.event_name = event;
			data.account = utui.data.settings.account;
			data.profile = utui.data.settings.profileid;
			data.user = utui.login.email;
			data.internal_user = utui.util.isTealiumUser();
			data.event_date = utui.util.date.getStringFromDate(new Date());

			switch(event)
			{
				case utui.constants.tagging.TAGGING :
				case utui.constants.tagging.ACCOUNT_SAVED :
                    if(data.tealium_event !== 'undefined') {
                        delete data.event_type; //eventSpec does not need this property anymore
                        delete data.event_name; //eventSpec does not need this property anymore
                    }
                    break;
				case utui.constants.profile.PUBLISHED :
					if(data.targets) {
						for(var i=0; i < data.targets.length; i++) {

							if(data.targets[i] === 'prod') {
								data.publish_prod = 'true';
							}
							else if(data.targets[i] === 'qa') {
								data.publish_qa = 'true';
							}
							else if(data.targets[i] === 'dev') {
								data.publish_dev = 'true';
							}
							else {
								data.publish_custom = 'true';
							}
						}
                        delete data.targets;
					}
					break;
				case utui.constants.views.TAB_CLICK :
					if('tab_id' in data ) {
						data.page = utui.tagging.getPageFromTabId(data.tab_id);
                        delete data.tab_id;
					} else if ('screen_name' in data) {
                        delete data.event_type; //eventSpec does not need this property anymore
                        delete data.event_name; //eventSpec does not need this property anymore
					}
					break;
				case utui.constants.profile.CREATED :

					if(('isLibrary' in data) && (data.isLibrary === true)) {
						if(('lib_type' in data) && (data.lib_type === utui.profile.import.REQUIRED)) {
							data.profile_type = 'required library'
						}
						else if(('lib_type' in data) && (data.lib_type === utui.profile.import.OPTIONAL)) {
							data.profile_type = 'optional library'
						}

                        delete data.isLibrary;
					}
					break;
				case utui.constants.labels.ASSIGNED :
					if('name' in data) {
						data.labelname = data.name;
                        delete data.name;
					}
					break;
				case utui.constants.self_service.AUDIENCESTREAM_INTEREST :
					data.self_service_event = utui.constants.self_service.AUDIENCESTREAM_INTEREST;
					break;
				case utui.constants.self_service.FREE_TRIAL_EXTENDED :
					if ('duration_days' in data) {
						data.extend_free_trial_days = '' + data.duration_days;
					}
					break;
				case utui.constants.self_service.FREE_TRIAL_UPGRADED :
					data.free_trial_upgraded = 'enterprise';
					break;
				case utui.constants.self_service.FREE_TRIAL_EXPIRED :
					data.free_trial_expired = 'expired';
					break;
				default:
					break;
			}

			if (data.isLinkType) {
				delete data.isLinkType;
				utag.link(data);
			} else {
                utag.view(data);
            }
		}

	},

	getPageFromTabId: function (tab_id) {
		if (tab_id === 'tabs_dashboard') {
			return 'Dashboard';
		}
		else if (tab_id === 'tabs_define') {
			return 'Data Sources';
		}
		else if (tab_id === 'tabs_loadrules') {
			return 'Loadrules';
		}
		else if (tab_id === 'tabs_manage') {
			return 'Tags';
		}
		else if (tab_id === 'tabs_customizations') {
			return 'Extensions';
		}
		else if (tab_id === 'tabs_publish') {
			return 'Versions';
		}
		else if (tab_id === 'tabs_test') {
			return 'Test';
		}
		else if (tab_id === 'tabs_reports') {
			return 'Reports';
		}

		return tab_id;
	}

};

window.common = window.common || {};
common.abTest = {
	platforms: {
		tiq: '<span data-i18n="login.ab_test.tealium_iq"></span>',
		as: '<span data-i18n="login.ab_test.tealium_audiencestream"></span>'
	},

	// list of ab test features
	features: {
		/* Example: */
		/*
		demo_mode: {
			supported_platforms: ['tiq', 'as'],
			name: '<span data-i18n="login.ab_test.options.demo_mode.name"></span>',
			description: '<span data-i18n="login.ab_test.options.demo_mode.description"></span>',
			internalUseOnly: false,
			enable: function (platform) {
				if (platform === 'tiq') {
					utui.util.setSession = function () {
						clearTimeout(utui.sessionid);
						clearTimeout(utui.sessionaction);
					}
				}
			}
		}
		*/
		users: {
			supported_platforms: ['as'],
			name: '<span data-i18n="login.ab_test.options.users.name"></span>',
			description: '<span data-i18n="login.ab_test.options.users.description"></span>',
			internalUseOnly: false,
			enable: function () {}
		}
	}
};

window.utui = window.utui || {};
utui.earlyAccess = function() {
	"use strict";

	try {
		// Subscribe to the profile loaded event so we can re-show the icons if needed
		// Subscribe to the profile loaded event so we can enable AB tests if needed
		utui.util.pubsub.subscribe(utui.constants.profile.LOADED, _onProfileLoaded);
		utui.util.pubsub.subscribe(utui.constants.help.INTRO_INIT, _showFeature);
	} catch (err) {}

	// Private API
	var _items = {
		localize: {
			isEarlyAccess: localize.isEarlyAccess,
			icon: {
				tooltip: localize.t('tiq.early_access.tooltip_language'),
				className: '',
				add: function($icon, id) {
					$icon.insertBefore('.admin-menu-name');
					_addTooltip(id, '', $('#adminMenu'));
				}
			}
		}
	};

	// ----------------------------------------------------------------
	// list of ab test features
	var _ab_test_features = common.abTest.features,
		_platforms = common.abTest.platforms,
		_enabledABTests = [];

	// ----------------------------------------------------------------
	function _onProfileLoaded() {
		_showIcons();
		_enableABTests();

	}

	// ----------------------------------------------------------------
	function _addTooltip(id, gravity, $context) {
		var obj = {};
		obj[id] = gravity || {gravity: 'n'};
		utui.util.addTooltip(obj, $context);
	}

	// ----------------------------------------------------------------
	function _init() {
		// Append abTest view always so that abTest can be remembered next time
		$('#abTest').append(_view.login());
		_bindUI.login();

		// Show ab test settings button on login screen
		if (window.location.href.indexOf('?') > -1 && !utui.util.getParameterByName('tlc')) {
			$('#abTestBtn').fadeIn();
		}

		// remember last enabled ab Tests
		var abTest = utui.util.storage.loadLocal('ab_test');
		if (typeof abTest !== 'undefined' && !$.isEmptyObject(abTest)) {
			_enabledABTests = abTest.split('&');
			var parts,
				name,
				feature;
			for (var i = 0; i < _enabledABTests.length; i++) {
				parts = _enabledABTests[i].split('.');
				name = parts[1];
				feature = _ab_test_features[name];
				$('#' + name).prop('checked', true);
			}
		}
	}

	// ----------------------------------------------------------------
	function _enableABTests() {
		var abTest = utui.util.storage.loadLocal('ab_test');

		if (typeof abTest !== 'undefined' && _.size(abTest)) {
			_enabledABTests = abTest.split('&');

			var parts,
				platform,
				feature;
			for (var i = 0; i < _enabledABTests.length; i++) {
				parts = _enabledABTests[i].split('.');
				platform = parts[0];
				feature = _ab_test_features[parts[1]];

				if (!feature) {
					console.warn('WARNING: Early Access feature (' + _enabledABTests[i] + ') does not exist.');

				} else if (!feature.internalUseOnly || utui.login.email.indexOf('@tealium.com') > 0) {
					if (platform === 'tiq') {
						_ab_test_features[parts[1]].enable(platform);
					}
				}
			}
		}

		utui.util.pubsub.publish(utui.constants.lifecycle.AB_TESTS_LOADED);
	}

	// ----------------------------------------------------------------
	// This function is made public; Should typically avoid using this function unless necessary - try to add to early access _items instead
	function _showIcon(obj, key) {
		// Display the icon if needed
		if (obj.icon && obj.icon.add) {
			var earlyAccessLangID = 'early-access-' + key,
				$icon = obj.icon ? _view.icon(earlyAccessLangID, obj.icon.tooltip, obj.icon.className) : {};

			obj.icon.add($icon, earlyAccessLangID);
		}
	}

	// ----------------------------------------------------------------
	// Display early access icons if needed
	function _showIcons() {
		_destroy();

		var customToolTipObj = {};
		for (var key in _items) {
			var obj = _items[key];

			// If this is an early access item...
			if (!obj.hasOwnProperty('isEarlyAccess') || obj.isEarlyAccess()) {
				_showIcon(obj, key);
			}
		}
	}

	// ----------------------------------------------------------------
	function _showFeature(tab) {
		var obj = _items[tab];
		if (!obj) {
			return;
		}

		// If this is an early access item...
		if (!obj.hasOwnProperty('isEarlyAccess') || obj.isEarlyAccess()) {
			// Display the feature if needed
			if (obj.feature && obj.feature.add) {
				var $feature = _view.feature();

				obj.feature.add($feature);
			}
		}
	}

	// ----------------------------------------------------------------
	var _view = {
		// ------------------------------------------------------------
		// Returns the early access icon
		icon: function(id, title, className){
			return $('<img id="' + id + '" class="early-access-icon ' + (className || '') + '" title="' + title + '" src="img/early-access-icon-small.png" />');
		},

		// ------------------------------------------------------------
		feature: function(className) {
			var v = '';
			v += '<div class="early-access-feature ' + (className || '') + '">';
			v += '	<img src="img/early-access-ticket-large.png" align="left">';
			v += localize.t('tiq.early_access.feature_intro', {email: '<a class="email-link" href="#" onclick="window.location.href=\'mailto:earlyaccess@tealium.com?subject=Early Access Feature Verify Data Layer\'">earlyaccess@tealium.com</a>'});
			v += '</div>';
			return $(v);
		},

		// ------------------------------------------------------------
		login: function() {
			var v = '';

			v += '<header></header>';
			v += '<div class="content-body">';
			v += '	<i class="icon-info-sign warning"></i>';
			v += '	<div class="ab-test-disclaimer">' + localize.t('login.ab_test.disclaimer', {url: '<a href="' + common.community.early_access + '" target="_blank">' + localize.t('login.ab_test.early_access_forum') + '</a>'}) + '</div>';

			v += '	<div>';
			v += '		<div class="iq-ab-test">';
			v += '			<h3>' + localize.t('login.ab_test.available_features') + '</h3>';
			v += _view.listItems();
			v += '		</div>';
			v += '	</div>';
			v += '</div>';
			v += '<div class="content-footer">';
			v += '	<button class="btn btn-primary pull-right" id="abTestApplyBtn">' + localize.t('tiq.dialog.button.ok') + '</button>';
			v += '</div>';

			return v;
		},

		// ------------------------------------------------------------
		listItems: function () {
			if (!Object.keys(_ab_test_features).length) {
				return _view.noItemsAvailable();
			}

			var feature,
				platforms,
				v = '';
			v += '<ul>';
			for (var key in _ab_test_features) {
				feature = _ab_test_features[key];
				platforms = feature.supported_platforms;
				v += '	<li>';
				v += '		<input type="checkbox" name="' + key + '" id="' + key + '" data-platforms="' + platforms.join(',') + '" value="y">';
				v += '		<label for="' + key + '">'
				v += '			<span class="title">' + feature.name + '</span>';
				v += '			<div>' + feature.description + '</div>';
				v += '		</label>';
				v += '	</li>';
			}
			v += '</ul>';
			return v;
		},

		// ------------------------------------------------------------
		noItemsAvailable: function () {
			return '<div><i class="icon-wrench"></i> ' + localize.t('login.ab_test.no_items_available') + '</div>';
		}
	};

	// ----------------------------------------------------------------
	var _bindUI = {
		// ------------------------------------------------------------
		login: function() {
			$('#abTestApplyBtn').off('click').on('click', function() {
				$('#abTest').removeClass('selected').fadeOut('fast');
			});
		}
	};

	// ----------------------------------------------------------------
	// Remove all early access icons
	function _destroy() {
		$('.early-access-icon').remove();
	}

	// Public API
	// ----------------------------------------------------------------
	var _public = {
		init:_init,
		destroy: _destroy,

		// ------------------------------------------------------------
		isEnabled: function (abTestParam) {
			var enabled = _enabledABTests.indexOf(abTestParam) > -1;
			if (enabled) {
				// check for internal use only AB test
				var parts = abTestParam.split('.');
				if (!common.abTest.features[parts[1]].internalUseOnly || utui.login.email.indexOf('@tealium.com') > 0) {
					return true;
				}
			}
			return false;
		},
		showIcon: _showIcon
	}

	return _public;
}();

utui.privacyManagement = function () {
	"use strict";
	// PRIVATE
	// --------------------------------------------------------
	var _namespace = 'privacy_management',
		_containerList = 'privacy_management_list',
		_$content = $('#tabs-dashboard').find('#' + _containerList),
		_accountLevelPrivacyResources = {},
		_errorCodeMap = {
			1404: localize.t('tiq.dashboard.privacy_management.account_preferences.error.1404')
		};

	var _util = {
		getSpecialManageGroup: _getSpecialManageGroup(),
		createAceEditor: function ($divNode, type, code, onChange) {
			var html = '';

			html += '<div class="' + type + '-codedev-ace-code-block"><pre id="' + type + '-editor" class="codedev-ace-editor"></pre></div>';
			html += '<div class="privacy_management_ace_editor_exapnd" data-type="' + type + '"><i class="icon-fullscreen"></i></div>';
			$divNode.empty();
			$divNode.append(html);

			var pnlEd = ace.edit(type + "-editor");
			pnlEd.$blockScrolling = Infinity;
			pnlEd.setValue(code || "");
			pnlEd.setTheme("ace/theme/chrome");
			pnlEd.session.setMode("ace/mode/" + type);
			pnlEd.setShowPrintMargin(false);
			pnlEd.clearSelection();

			if (type === "html") {
				var session = pnlEd.getSession();
				session.on("changeAnnotation", function () {
					var annotations = session.getAnnotations() || [],
						newAnnotations = [], changed = false;
					_.forEach(annotations, function (annotation) {
						if (/doctype first\. Expected/.test(annotation.text)) {
							changed = true;
							return;
						}
						newAnnotations.push(annotation);
					});

					if (changed) {
						session.setAnnotations(newAnnotations);
					}
				});
			}

			pnlEd.on("blur", onChange);

			pnlEd.on("change", onChange);

			return pnlEd;
		},
		aceEditorModal: {
			modalpnlEd: null,
			_editor: null,
			render: function (editor, type) {
				_util.aceEditorModal._editor = editor;
				var $body = $('body'),
					darkOverlay = '<div id="js-codedev-dark-overlay"></div>',
					mHtml = '';

				$body.append(darkOverlay);

				mHtml += '<div id="js-codedev-modal-base">';
				mHtml += '<div id="js-codedev-modal-wrapper">';
				mHtml += '<div class="js-codedev-modal-content  ui-corner-all">';
				// Fauc dialog title bar
				mHtml += '<div class="js-codedev-modal-titlebar ui-widget-header ui-corner-all">';
				mHtml += '<div style="padding : 5px;">';
				mHtml += '<span class="ui-dialog-title">Modal Editor - ' + type + '</span>';
				mHtml += '</div>';
				mHtml += '<div style="padding : 3px;">';
				mHtml += '<a href="#" class="js-modal-dismiss ui-dialog-titlebar-close ui-corner-all" role="button">';
				mHtml += '<span class="ui-icon ui-icon-closethick"></span>';
				mHtml += '</a>';
				mHtml += '</div>';
				mHtml += '</div>';
				// Full editor
				mHtml += '<div id="js-modal-editor" class="js-codedev-editor-modal">';
				mHtml += '<div class="' + type + '-codedev-ace-code-block"><pre id="js-modal-ace-editor" class="codedev-ace-editor"></pre>';
				mHtml += '<div style="padding-top:5px;float:right;padding-right: 5px;">';
				mHtml += '<a href="#" class="btn btn-block i-color-info js-modal-dismiss" ><i class="icon-collapse" style="color:#076FB5"></i></a>';
				mHtml += '</div>';
				mHtml += '</div>';
				mHtml += '</div>';
				mHtml += '</div>';
				mHtml += '</div>';
				mHtml += '</div>';

				$body.append(mHtml);

				var pnlEd = _util.aceEditorModal.modalpnlEd = ace.edit("js-modal-ace-editor");
				pnlEd.$blockScrolling = Infinity;
				pnlEd.setValue(editor.getValue());
				pnlEd.setTheme("ace/theme/chrome");
				pnlEd.session.setMode("ace/mode/" + type);
				pnlEd.setShowPrintMargin(false);
				pnlEd.clearSelection();

				if (type === "html") {
					var session = pnlEd.getSession();
					session.on("changeAnnotation", function () {
						var annotations = session.getAnnotations() || [],
							newAnnotations = [], changed = false;
						_.forEach(annotations, function (annotation) {
							if (/doctype first\. Expected/.test(annotation.text)) {
								changed = true;
								return;
							}
							newAnnotations.push(annotation);
						});

						if (changed) {
							session.setAnnotations(newAnnotations);
						}
					});
				}

				_util.aceEditorModal.adjustHeight();
				// Adjust the faux code gutter to match ace editor gutter width
				_util.aceEditorModal.adjustFauxCodeGridCss(editor);
				pnlEd.focus();

				var cursor = editor.selection.getCursor();
				pnlEd.gotoLine(cursor.row + 1, cursor.column);

				$(window).safeOn('resize', _util.aceEditorModal.adjustHeight);

				$(".js-modal-dismiss").safeOn("click", _util.aceEditorModal.dismiss);
			},
			adjustHeight: function () {
				var wrapperHeight = Math.floor($(window).height() - 50);
				var modalHeight = wrapperHeight - 75;
				var aceEdHeight = modalHeight - 17;

				$('#js-codedev-modal-wrapper').css('height', wrapperHeight);
				$('#js-modal-editor').css('height', modalHeight);
				$('#js-modal-ace-editor').css('height', aceEdHeight);
			},
			adjustFauxCodeGridCss: function (editor) {
				var aceGutter = $('.ace_gutter-layer');
				var gutterWidth = '41px';
				if (aceGutter.length > 0) {
					gutterWidth = aceGutter.css('width');
					// console.log("aceGutter.length="+aceGutter.length+"; gutterWidth="+gutterWidth);

					if (gutterWidth === '0px') { // Handle the scenario where the editor hasn't been rendered yet
						var lastRow = (editor.getValue().match(/\n/g) || []).length,
							firstRow = editor.getFirstVisibleRow();
						// console.log("lastRow="+lastRow+"; firstRow="+firstRow);
						if (firstRow < 9) {
							if (lastRow < 10) {
								gutterWidth = '41px';
							} else {
								gutterWidth = '48px';
							}
						} else if (firstRow < 100) {
							if (lastRow < 100) {
								gutterWidth = '48px';
							} else {
								gutterWidth = '55px';
							}
						} else if (firstRow < 1000) {
							if (lastRow < 1000) {
								gutterWidth = '55px';
							} else {
								gutterWidth = '62px';
							}
						} else {
							gutterWidth = '62px';
						}
						// console.log('Adjust gutterWidth='+gutterWidth);
					}
				}
				$('.js-codedev-editor-faux-code').css('grid-template-columns', gutterWidth + ' auto');
				$('.js-codedev-footer').css('grid-template-columns', gutterWidth + ' auto 30px');
			},
			dismiss: function () {
				$(window).off('resize');
				$('#js-codedev-dark-overlay').remove();
				$('#js-codedev-modal-base').remove();
				var cursor = _util.aceEditorModal.modalpnlEd.selection.getCursor();
				_util.aceEditorModal._editor.setValue(_util.aceEditorModal.modalpnlEd.getValue());
				_util.aceEditorModal._editor.clearSelection();
				_util.aceEditorModal._editor.gotoLine(cursor.row + 1, cursor.column);
				_util.aceEditorModal.modalpnlEd.destroy();
				_util.aceEditorModal._editor.focus();
			}
		},
		tokenizer: function (string) {
			string = string || "";
			return string.toLowerCase().replace(/[^a-z0-9\s-_]/g, '').trim().replace(/[\s-_]{2,}/g, '_').replace(/[\s-_]/g, '_');
		},
		getLanguagesSortedByName: function (list) { //Array of country codes

			return list.sort(function sortLangCodesByDisplayName(code1, code2) {
				var lang1 = _util.getLanguageOptionList(code1).label,
					lang2 = _util.getLanguageOptionList(code2).label;
				if (lang1 < lang2) {
					return -1;
				}
				return (lang1 > lang2) ? 1 : 0;
			});

		},
		getLanguageOptionList: function (lang) {
			return lang ?
				_.where(utui.config.privacy_management.languages, {"value": lang})[0] :
				utui.config.privacy_management.languages;
		},
		removeTagFromOmmitedList: function (event) {
			var id = event.id;
			if (!id) {
				return;
			}
			if ($.isEmptyObject(utui.data.privacy_management.explicit)) {
				return;
			}
			var explicit_omittedTags = _util.toCleanArray(utui.data.privacy_management.explicit.omittedTags);

			if (!explicit_omittedTags ||
				!explicit_omittedTags.omittedTags ||
				!explicit_omittedTags.omittedTags.length) {
				return;
			}
			var idx = explicit_omittedTags.indexOf(id);
			if (idx > -1) {
				explicit_omittedTags.splice(idx, 1);
        utui.util.pubsub.publish(utui.constants.privacy_management.explicit.UPDATED);
			}
			utui.data.privacy_management.explicit.omittedTags = explicit_omittedTags.join();
		},
		getDefaultLanguage: function (languages) {
			var lang, defaultLang;
			for (lang in languages) {
				if (!languages.hasOwnProperty(lang)) {
					continue;
				}
				if (!defaultLang) {
					defaultLang = lang;
				}
				if (languages[lang].isDefault) {
					return lang;
				}
			}

			return defaultLang;

		},
		preview: {
			constants : {
				EXPLICIT : "explicit",
				PREFERENCES : "preferences"
			},
			post: function () {
				this.page.postMessage({
					data: this.dataToSend,
					title: this.title
				}, document.location.origin);
			},
			openRender: function (type, objRef, lang, title) {
				var _page = this.page = common.utils.isWindowOpen("pm_preview");
				this.dataToSend = {
					type: type,
					data: objRef,
					lang: lang
				};
				this.title = title;

				if (!_page) {
					this.page = common.utils.openWindow("/privacy_preview.html", 'pm_preview');
				} else {
					this.post();
					_page.focus();
				}
			},
			messageListener: function (event) {
				if (event.origin !== location.origin) {
					return;
				}
				if (!event.data || event.data !== "pm_refresh") {
					return;
				}

				this.post();
			}
		},
		hasValidCollect: function () {
			var manageList = _.sortBy(_.values(utui.data.manage || {}), "sort"),
				found_profile = false,
				regEx = /([^\/]*\/\/|)([^\/]*\/[^\/]*\/)([^\/]*)(.*)/,
				listOfProfile = utui.profile.profiles[utui.login.account];

			// Check to see if datacloud is enabled and if so extract the profile

			for (var idx = 0; idx < manageList.length; idx++) {
				var tag = manageList[idx];
				if (tag.tag_id === '20064' && tag.status === 'active') {

					if (tag.config_profile) { //use config_profile by defualt
						if (_.indexOf(listOfProfile, tag.config_profile.toLowerCase()) > -1) {
							found_profile = true;
							break;
						}
					}
					if (tag.config_server) {
						var config_server = tag.config_server.toLowerCase();
						if (config_server.indexOf(".tealiumiq.com") > -1 && regEx.test(config_server)) {
							// fall back to old method, as long as valid server string
							// get the profile from the server set in the config_server property
							// tag.config_server = "https://datacloud.tealiumiq.com/tealiumiq/base/2/i.gif'

							if (_.indexOf(listOfProfile, config_server.replace(regEx, '$3')) > -1) {
								found_profile = true;
								break;
							}

						}
					}
					found_profile = true;
				}
			}

			return found_profile;
		},
		toCleanArray: function (strArray) {
			if (!strArray) {
				return [];
			}
			return strArray.split(",");
		}
	};

	// Keep --------------------------------------------------------
	function _showHelpTab() {
		var _articles = [
				{
					id: 0,
					title: localize.t('tiq.dashboard.privacy_management.resource.explicit.title_text'),
					type: 'document',
					linkHref: common.community.consent_prompt_manager,
					isExternalLink: true
				},
				{
					id: 1,
					title: localize.t('tiq.dashboard.privacy_management.resource.privacy_consent_preferences'),
					type: 'document',
					linkHref: common.community.consent_preferences_manager,
					isExternalLink: true
				}
			],
			_context = {
				header: localize.t('tiq.dashboard.privacy_management.resource.privacy_management'),
				body: localize.t('tiq.dashboard.privacy_management.resource.privacy_management_intro')
			};

		utui.help.initHelpTab(_namespace, _articles, _context);
	}

	// --------------------------------------------------------
	function _hideModalErrorMessage(namespace) {
		utui.ui.dialog.message.hide(namespace);
	}

	// --------------------------------------------------------
	function _showModalErrorMessage(namespace, msg, isSuccess) {
		utui.ui.dialog.message.show(namespace, msg, isSuccess);
	}

	// --------------------------------------------------------
	function _sortLanguagesByName(list) { // Array of country codes
		return list.sort(function sortLangCodesByDisplayName(code1, code2) {
			var lang1 = utui.config.privacy_management.languages[code1.value].label;
			var lang2 = utui.config.privacy_management.languages[code2.value].label;

			if (lang1 < lang2) {
				return -1;
			}
			return (lang1 > lang2) ? 1 : 0;
		});
	}

	// --------------------------------------------------------
	function _getSpecialManageGroup() {
		var crossPlatformGroups = [
			{key: 'mobile', displayName: 'Mobile'},
			{key: 'engagement', displayName: 'Engagement'},
			{key: 'monitoring', displayName: 'Monitoring'},
			{key: 'crm', displayName: 'CRM'}
		];
		var manageGroup = utui.config.manageGroup;
		var sizeManageGroup = _.size(manageGroup);
		var tempManageGroupObj;
		// Append cross platform groups
		for (var i in crossPlatformGroups) {
			sizeManageGroup++;
			tempManageGroupObj = {}; // append CDP group
			tempManageGroupObj[sizeManageGroup] = {
				groupid: sizeManageGroup,
				sort: sizeManageGroup,
				tab: crossPlatformGroups[i].key,
				title: "",
				text: crossPlatformGroups[i].displayName
			};
			manageGroup = $.extend(true, {}, manageGroup, tempManageGroupObj);
		}
		// Change TiQ keys to match UDH keys
		for (var i in manageGroup) {
			tempManageGroupObj = manageGroup[i];
			if (tempManageGroupObj.tab === 'displayad') {
				tempManageGroupObj.tab = 'display_ads';

			} else if (tempManageGroupObj.tab === 'bigdata') {
				tempManageGroupObj.tab = 'big_data';
			}
		}
		return manageGroup;
	}

	// --------------------------------------------------------
	var _eventHandlers = {
		// --------------------------------------------------------
		onExplicitGetStartedBtnClick: function () {
			var explicit_config = utui.data.privacy_management.explicit || 'create';

			// launch Add/Edit Consent Preferences Dialog
			utui.privacyManagement.showAddEditExplicit(explicit_config, function () {
				utui.privacyManagement.refreshContent();
			});
		},

		// --------------------------------------------------------
		onExplicitEditBtnClick: function (tab) {
			var explicit_config = utui.data.privacy_management.explicit;

			// launch Add/Edit Consent Preferences Dialog
			utui.privacyManagement.showAddEditExplicit(explicit_config, function () {
				utui.privacyManagement.refreshContent();
			}, 'tab_' + tab);
		},

		// --------------------------------------------------------
		onOpenPreviewBtnClick: function () {
			_util.preview.openRender(_util.preview.constants.EXPLICIT,utui.data.privacy_management.explicit,
				_util.getDefaultLanguage(utui.data.privacy_management.explicit.languages),
				localize.t('tiq.dashboard.privacy_management.resource.explicit.title_text'));
		},
		// --------------------------------------------------------
		onConsentGetStartedBtnClick: function (e) {
			var preferences = utui.data.privacy_management.preferences || 'create';

			// launch Add/Edit Consent Preferences Dialog
			utui.privacyManagement.showAddEditConsent(preferences, '');
		},

		// --------------------------------------------------------
		onEditConsentBtnClick: function (e) {
			var $el = $(e.currentTarget);
			var selectedTab = $el.attr('data-key');

			utui.privacyManagement.showAddEditConsent(utui.data.privacy_management.preferences, selectedTab);
		},

		// --------------------------------------------------------
		onConsentPreferencesAdded: function (data) {
			utui.profile.setActionPerformed({
				action: utui.constants.privacy_management.consent.ADDED,
				data: {
					id: utui.constants.privacy_management.consent.ID,
					name: utui.constants.privacy_management.consent.TYPE,
					kind: utui.constants.privacy_management.TYPE,
					operation: utui.constants.operation.ADDED,
					container: _containerList
				}
			}, true);
			_public.refreshContent();
		},

		// --------------------------------------------------------
		onConsentPreferencesUpdated: function (data) {
			utui.profile.setActionPerformed({
				action: utui.constants.privacy_management.consent.UPDATED,
				data: {
					id: utui.constants.privacy_management.consent.ID,
					name: utui.constants.privacy_management.consent.TYPE,
					kind: utui.constants.privacy_management.TYPE,
					operation: utui.constants.operation.UPDATED,
					container: _containerList
				}
			}, true);
			_public.refreshContent();
		},

		// --------------------------------------------------------
		onConsentPreferencesToggled: function (data) {
			utui.profile.setActionPerformed({
				action: utui.constants.privacy_management.consent.TOGGLED,
				data: {
					id: utui.constants.privacy_management.consent.ID,
					name: utui.constants.privacy_management.consent.TYPE,
					kind: utui.constants.privacy_management.TYPE,
					operation: utui.constants.operation.TOGGLED,
					container: _containerList
				}
			}, true);
			_public.refreshContent();
		},

		// --------------------------------------------------------
		onConsentPreferencesRemoved: function () {
			utui.profile.setActionPerformed({
				action: utui.constants.privacy_management.consent.REMOVED,
				data: {
					id: utui.constants.privacy_management.consent.ID,
					name: utui.constants.privacy_management.consent.TYPE,
					kind: utui.constants.privacy_management.TYPE,
					operation: utui.constants.operation.REMOVED,
					container: _containerList
				}
			}, true);
			_public.refreshContent();
		},

		// --------------------------------------------------------
    onFocusedConsentManagement: function (uid) {
			// Switch tabs
			$('#tabs').tabs('select', utui.dashboard.id);
			$('#my_site_site_privacy_management_menu').trigger('click');
			setTimeout(function(){
        $('#privacy_management_scroll_container').animate({
            scrollTop: $("#"+_containerList+" > div[data-tile-key='"+uid+"']").offset().top - 80
					},
          'fast');
			},0);
		},

		// --------------------------------------------------------
		onIsEnabledToggleBtnClick: function (e) {var $el = $(e.currentTarget);

			if (!$el.hasClass('ui-state-disabled')) {
			    utui.data.privacy_management.preferences.isEnabled = !utui.data.privacy_management.preferences.isEnabled;
				utui.util.pubsub.publish(utui.constants.privacy_management.consent.TOGGLED, {
					preferences: utui.data.privacy_management.preferences
				});
			    if (utui.data.privacy_management.preferences.isEnabled) {
                    utui.util.pubsub.publish(utui.constants.privacy_management.consent.ENABLED,{});
			    }
			}
		},

		// --------------------------------------------------------
		onResetPreferencesBtnClick: function (e) {
			// show Are you sure Dialog
			utui.privacyManagement.resetPreferencesConfirmDialog.show(_eventHandlers.onConfirmResetPreferencesBtnClick);
		},

		// --------------------------------------------------------
		onConfirmResetPreferencesBtnClick: function () {
			delete utui.data.privacy_management.preferences;
			utui.util.pubsub.publish(utui.constants.privacy_management.consent.REMOVED);
		},

		// --------------------------------------------------------
		onPreviewPreferencesBtnClick: function (e) {
			var lang;
			_.find(utui.data.privacy_management.preferences.languages, function (obj, index) {
				if (obj.isDefault === true) {
					lang = index;
					return true;
				}
			});
			if (lang) {
				_util.preview.openRender(_util.preview.constants.PREFERENCES,utui.data.privacy_management.preferences, lang, localize.t('tiq.dashboard.privacy_management.resource.explicit.title_text'));
			}
		},
    
    // --------------------------------------------------------
    onConsentPromptAdded: function () {
      utui.profile.setActionPerformed({
        action: utui.constants.privacy_management.explicit.ADDED,
        data: {
          id: utui.constants.privacy_management.explicit.ID,
          name: utui.constants.privacy_management.explicit.TYPE,
          kind: utui.constants.privacy_management.TYPE,
          operation: utui.constants.operation.ADDED,
          container: _containerList
        }
      }, true);
      _public.refreshContent();
    },
    
    // --------------------------------------------------------
    onConsentPromptUpdated: function () {
      utui.profile.setActionPerformed({
        action: utui.constants.privacy_management.explicit.UPDATED,
        data: {
          id: utui.constants.privacy_management.explicit.ID,
          name: utui.constants.privacy_management.explicit.TYPE,
          kind: utui.constants.privacy_management.TYPE,
          operation: utui.constants.operation.UPDATED,
          container: _containerList
        }
      }, true);
      _public.refreshContent();
    },
    
    // --------------------------------------------------------
    onConsentPromptRemoved: function () {
      utui.profile.setActionPerformed({
        action: utui.constants.privacy_management.explicit.REMOVED,
        data: {
          id: utui.constants.privacy_management.explicit.ID,
          name: utui.constants.privacy_management.explicit.TYPE,
          kind: utui.constants.privacy_management.TYPE,
          operation: utui.constants.operation.REMOVED,
          container: _containerList
        }
      }, true);
      _public.refreshContent();
    },
    
    // --------------------------------------------------------
    onConsentPromptToggled: function (data) {
			utui.data.privacy_management.explicit.isEnabled = data.state;
      utui.profile.setActionPerformed({
        action: utui.constants.privacy_management.explicit.TOGGLED,
        data: {
          id: utui.constants.privacy_management.explicit.ID,
          name: utui.constants.privacy_management.explicit.TYPE,
          kind: utui.constants.privacy_management.TYPE,
          operation: utui.constants.operation.TOGGLED,
          container: _containerList
        }
      }, true);
      _public.refreshContent();
    },
		
    // --------------------------------------------------------
    onResetExplicitBtnClick: function (e) {
      // show Are you sure Dialog
      utui.privacyManagement.modals.resetExplictData.show(_eventHandlers.onConfirmResetExplictBtnClick);
    },
		
    // --------------------------------------------------------
    onConfirmResetExplictBtnClick: function (e) {
      delete utui.data.privacy_management.explicit;
      utui.util.pubsub.publish(utui.constants.privacy_management.explicit.REMOVED);
    },
		
    // --------------------------------------------------------
    onToggleExplictClick: function (e) {
      if ($(this).hasClass('ui-state-disabled')) {
        return;
      }
      var $el = $("#" + _namespace + '_explicit_status_toggle span');
      $el.toggleClass('container_status_active').toggleClass('container_status_inactive');
      $("#" + _namespace + "_explicit_deleteBtn").toggle();
      utui.util.pubsub.publish(utui.constants.privacy_management.explicit.TOGGLED,{state:!!$el.hasClass("container_status_active")});
    },
    
    // --------------------------------------------------------
		onExplicitLoadRuleChange: function(data){
      var tmp = utui.data.privacy_management.explicit.loadrule.split(",");
      tmp.splice(data.loadrule, 1);
      utui.data.privacy_management.explicit.loadrule = tmp.join(",");
      if (utui.data.privacy_management.explicit.loadrule === "") {
        utui.data.privacy_management.explicit.loadrule = "all";
      }
      
      _eventHandlers.onTurnOffExplictConsent();
		},
    
    // --------------------------------------------------------
    onTurnOffExplictConsent: function(){
      //Set state to false, as LoadRules have been disabled/changed that are/were in use
			utui.util.pubsub.publish(utui.constants.privacy_management.explicit.TOGGLED, {
      	state : false
      });
		}
		
		
	};

	// --------------------------------------------------------
	var _view = {

		tooltipObj: {},
		// --------------------------------------------------------
		getTagsScoped: function (tags_array) {
			var manage = utui.data.manage;
			var manageList = utui.config.manageList;
			var counter = {active: 0, inactive: 0};

			var rule = '';

			/*
       * SIMILAR TO utui.loadrules.getLoadruleTags(loadrule) -- we will need full tag object rather than just tag.id;
       */
			function constructTagsScoped(tags_array) {
				var title = '';

				_.forEach(tags_array, function (tagId) {
					var tag = manage[tagId];
					title += constructScopedItemsView(tag, tags_array);
				});

				if (title.length === 0) {
					title = constructNoScopedItemsView();
				}

				return constructTagsScopedView('Tags Scoped', title);

			}

			function constructTagsScopedView(label, content) {
				var v = '';

				v += '<table class="contentSectionTable">';
				v += '<thead>';
				v += '  <tr>';
				v += '    <td class="tags-scoped-status"></td>';
				v += '    <td class="tags-scoped-vendor">' + localize.t('tiq.rules.vendor') + '</td>';
				v += '    <td class="tags-scoped-title">' + localize.t('tiq.rules.title') + '</td>';
				v += '    <td class="tags-scoped-uid">UID</td>';
				v += '    <td class="tags-scoped-link"></td>';
				v += '  </tr>';
				v += '</thead>';
				v += '<tbody>';
				v += content;
				v += '</tbody>';
				v += '</table>';

				return v;
			}

			function isTagActive(tag) {
				return (typeof tag.status !== 'undefined' && tag.status === 'active');
			}

			function constructScopedItemsView(tag) {
				var title = manageList[tag.tag_id].title;

				var linkTitle = title;
				if (tag.title !== '') {
					linkTitle += ': ' + tag.title;
				}

				var v = '';
				v += '  <tr>';

				if (isTagActive(tag)) {
					v += ' <td class="tags-scoped-status"><span class="contentSectionListItemStatusOn"></span></td> ';
					counter.active++;
				} else {
					v += ' <td class="tags-scoped-status"><span class="contentSectionListItemStatusOff"></span></td> ';
					counter.inactive++;
				}

				v += '    <td class="tags-scoped-vendor">' + title + '</td>';
				v += '    <td class="tags-scoped-title">' + utui.util.safeEscape(tag.title) + '</td>';
				v += '    <td class="tags-scoped-uid">' + tag.id + '</td>';
				v += '    <td class="tags-scoped-link">';
				v += $('<a/>')
					.attr({
						'class': 'nostyle',
						'href': '#',
						'onclick': 'utui.dashboard.shortcutLink(\'Tags: ' + _.unescape(linkTitle).replace(/'/g, '\\\'') + '\');'
					})
					.html('<i class="icon-reply"></i>')[0].outerHTML;
				v += '    </td>';
				v += '  </tr>';

				return v;
			}

			function constructNoScopedItemsView() {
				var v = '';
				v += '  <tr>';
				v += '    <td class="contentSectionNoListItem" colspan="5">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.there_are_no_tags_scoped') + '</td>';
				v += '  </tr>';
				return v;
			}

			rule += constructTagsScoped(tags_array);
			return rule;

		},
		// --------------------------------------------------------
		contentBody: function () {
			var v = '';

			if (!utui.data.privacy_management.explicit) {
				v += _view.explicitBasicView();
			} else {
				v += _view.explicitDetailedView();
			}

			if (!$.isEmptyObject(utui.data.privacy_management.preferences)) {
				v += _view.consentPreferences_complete();

			} else {
				v += _view.consentPreferences_incomplete();
			}

			return v;
		},

		// --------------------------------------------------------
		consentPreferences_incomplete: function () {
			var v = '';

			v += '<div class="privacy_management_blocks viewItem" data-tile-key="' + utui.constants.privacy_management.consent.ID + '">' +
				'	<header class="privacy_management_header viewItem-inner privacy_management_header_container">' +
				'    	<div class="header-inner privacy_management_blocks_header">' +
				localize.t('tiq.dashboard.privacy_management.resource.general.title_text') +
				'    	</div>' +
				'		<div class="gdpr-padlock"></div>' +
				'  </header>' +
				'	<div class="privacy_management_grid_consent_container">' +
				'		<div class="privacy_management_grid_main_text">' +
				localize.t('tiq.dashboard.privacy_management.resource.general.main_text') +
				'		</div>' +
				'		<div class="privacy_management_grid_basic_consent_img"></div>' +
				'		<div class="privacy_management_grid_learn_more">' +
				'			<div onclick="utui.help.openCommunityLink(\'' + common.community.preparing_gdpr + '\'); return false;" class="utui-selection-button-container hyper">' +
				'				<div class="utui-selection-button-icon">' +
				'					<i class="icon-file-text"></i>' +
				'				</div>' +
				'				<div class="utui-selection-button-description">' +
				'					<h3 class="utui-selection-button-title">' + localize.t('tiq.dashboard.privacy_management.resource.general.learn_more') + '</h3>' +
				'				</div>' +
				'			</div>' +
				'		</div>' +
				'		<div class="privacy_management_grid_learn_more_text">' + localize.t('tiq.dashboard.privacy_management.resource.general.learn_more_desc') + '</div>' +
				'			<div class="privacy_management_grid_get_started">' +
				'				<span id="' + _namespace + '_consent_getStartedBtn" class="btn btn-success" style="margin-top:0; width:78px;">' +
				'					<span>' + localize.t('tiq.dashboard.privacy_management.resource.general.get_started') + '</span>' +
				'				</span>' +
				'			</div>' +
				'		</div>' +
				'	</div>' +
				'</div>';

			return v;
		},

		// --------------------------------------------------------
		explicitDetailedView: function () {

			var obj = utui.data.privacy_management.explicit,
				content = '',
				container = 'privacy_management_explicit';
    
			content += '<div class="privacy_management_blocks viewItem" data-tile-key="' + utui.constants.privacy_management.explicit.ID + '">';


			content += '	<header class="privacy_management_header viewItem-inner privacy_management_header_container_detailed">';
			content += '		<div class="privacy_toggle">';
		    content += '			<div id="' + container + '_status_toggle" class="container_status_wrapper" style="cursor: pointer;">';
			content += '				<span class="js-is-enabled-status container_status_' + (obj.isEnabled ? "active" : "inactive") + '"></span>';
			content += '			</div>';
			content += '		</div>';
			content += '		<div class="privacy_title">';
			content += '			<div class="header-inner privacy_management_blocks_header">';
			content += '				<div style="display: inline-block;">' + localize.t('tiq.dashboard.privacy_management.resource.explicit.title_text') + '</div>';
			content += '			</div>';
			content += '		</div>';
			content += '		<div class="privacy_padlock">';
			content += '			<div class="gdpr-padlock"></div>';
			content += '		</div>';
			content += '  		<div class="privacy_reset">';
			content += '			<span id="privacy_management_explicit_deleteBtn" class="btn i-color-delete" style="' + (obj.isEnabled ? "display:none;" : "") + '">';
			content += '				<i class="icon-trash"></i>';
			content += '				<span>&nbsp;' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.delete') + '</span>';
			content += '			</span>';
			content += '		</div>';
			content += '  		<div class="privacy_preview">';
			content += '			<span id="' + container + '_previewBtn" class="btn btn-success">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.preview') + '</span>';
			content += '  		</div>';
			content += '  		<div class="privacy_preview_img">';
		    content += '      		<div id="'+ container+'_img" class="privacy_management_preview_img"></div>';
			content += '  		</div>';
			content += '	</header>';

			content += '    <table class="contentAreaTable"><tr><td style="position: relative; vertical-align: top; padding-top: 10px; padding-bottom: 10px;">';


			content += '    <div class="main-header"></div>';
			content += '    <div id="' + container + '_settingsBlock" class="contentSection">';
			content += '        <div class="contentSectionTitle">';
			content += '            <div class="titleExpander"><i class="icon-caret-down"></i></div>';
			content += '            <div class="titleText">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.content') + '</div>';
			content += '        <div class="titleButton"><span data-tab="explicit" class="btn btn-mini actionEditSettings i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</span></div>';
			content += '        </div>';
			content += '        <div class="contentSectionBody">';

			content += '        <div id="' + container + '_settingsGeneral" class="contentBlock">';
			content += '            <div class="contentBlockTitle">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.default_text') + '</div>';

			// Properties


			function createRow(container, label, tooltip, value, clss, icon) {
				var content = '', id = container + '_tooltip_' + _util.tokenizer(label);

				value = value ? utui.util.safeEscape(value) : "&nbsp;";
				clss = clss || '';
				icon = icon || '';

				content += '           <table id="' + container + '_basic_settings" class="contentTable">';
				content += '               <tr>';
				content += '                   <td class="contentTableLabel"><div>' + label + '</div></td>';
				content += '                   <td class="contentTableValue">';
				content += '                       <div id="' + container + '_settingsGeneral_' + _util.tokenizer(label) + '" class="contentValueContainer">';
				content += '                           <div class="contentValue '+clss+'">' + icon + " " + value + '</div>';
				content += '                           <div id="' + id + '" original-title="' + tooltip + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div>';
				content += '                       </div>';
				content += '                   </td>';
				content += '               </tr>';
				content += '           </table>';

				_view.tooltipObj[id] = {gravity: 'w'};

				return content;
			}

			var langCode = _util.getDefaultLanguage(obj.languages);
			content += createRow(container, localize.t('tiq.dashboard.privacy_management.explicit_preferences.default_language'), localize.t('tiq.dashboard.privacy_management.explicit_preferences.tooltips.default_language'), _util.getLanguageOptionList(langCode).label + ' (' + langCode + ')');
			content += createRow(container, localize.t('tiq.dashboard.privacy_management.explicit_preferences.enabled_languages'), localize.t('tiq.dashboard.privacy_management.explicit_preferences.tooltips.enabled_languages'),
				_.map(_util.getLanguagesSortedByName(_.keys(obj.languages)), function (language) {
					var lang = _util.getLanguageOptionList(language);
					return lang.label + " (" + lang.value + ")";
				}).join(", "));

			var defaultCommonTokens = obj.languages[langCode].common_tokens;
			content += createRow(container, localize.t('tiq.dashboard.privacy_management.explicit_preferences.title'), localize.t('tiq.dashboard.privacy_management.explicit_preferences.tooltips.title'), defaultCommonTokens.title);
			content += createRow(container, localize.t('tiq.dashboard.privacy_management.explicit_preferences.message'), localize.t('tiq.dashboard.privacy_management.explicit_preferences.tooltips.message'), defaultCommonTokens.message);
			content += createRow(container, localize.t('tiq.dashboard.privacy_management.explicit_preferences.button'), localize.t('tiq.dashboard.privacy_management.explicit_preferences.tooltips.button'), defaultCommonTokens.confirmation_button);


			// Custom Tokens

			function createParamRow(container, label, value, token) {
				var id = container + '_tooltip_' + _util.tokenizer(label);
				var tooltip = "{{" + token + "}}";
				var content = "";
				content += '<tr>';
				content += '  <td class="contentTableLabel"><div>' + label + '</div></td>';
				content += '  <td class="contentTableValue">';
				content += '    <div class="contentValueContainer contentTableValueNone">';
				content += '      <div class="contentValue">';
				content += 			utui.util.safeEscape(value);
				content += '      </div>';
				content += '      <div id="' + id + '" original-title="' + tooltip + '" class="infoIcon"><a href="#" class="icon-question-sign"></a></div>';
				content += '     </div>';
				content += '   </div>';
				content += '  </td>';
				content += '</tr>';

				_view.tooltipObj[id] = {gravity: 'w'};

				return content;
			}

			content += '       <div id="' + _namespace + '_custom_parameters" class="contentBlockSubSection">';
			content += '            <div class="contentBlockSubTitle"><div class="expander"><i class="icon-caret-right"></i></div> ' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.parameters') + '</div>';
			content += '            <div class="contentBlockSubBody">';
			content += '                <table class="contentTable">';

			var defaultCustomTokens = obj.languages[langCode].custom_tokens;
			_.forEach(obj.custom_tokens_definitions, function (token_def) {
				content += createParamRow(container, token_def.title, defaultCustomTokens[token_def.token], token_def.token);
			});


			content += '                </table>';
			content += '            </div>';
			content += '        </div> ';
			content += '</div>';
			content += ' </div>';
			content += ' </div>'; // end contentBlockSubSection


			// LOAD RULES
			content += '    <div id="' + container + '_loadRulesBlock" class="contentSection">';
			content += '        <div class="contentSectionTitle">';
			content += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
			content += '            <div class="titleText">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules') + '</div>';
			content += '            <div class="titleCount">' + _util.toCleanArray(obj.loadrule).length + '</div>';
			content += '            <div class="titleButton"><span id="' + container + '_editLoadRule" data-tab="consentRules" class="btn btn-mini actionEditSettings i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</span></div>';
			content += '        </div>';
			content += '        <div class="contentSectionBody scrollSection">';
			content += '          <div class="LRconditionsBlock contentSectionBodyContent">';
			content += '          </div>';
			content += '        </div>'; // end contentSectionBody
			content += '    </div>'; //end contentSection

			// END LOAD RULES


			// OPTIONS

			content += '    <div id="' + container + '_settingsBlock" class="contentSection">';
			content += '        <div class="contentSectionTitle">';
			content += '            <div class="titleExpander"><i class="icon-caret-down"></i></div>';
			content += '            <div class="titleText">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.options') + '</div>';
			content += '        <div class="titleButton"><span data-tab="options" class="btn btn-mini actionEditSettings i-color-edit" href="#"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</span></div>';
			content += '        </div>';
			content += '        <div class="contentSectionBody">';

			content += '        <div id="' + container + '_settingsGeneral" class="contentBlock">';
			content += '            <div class="contentBlockTitle">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.event_stream_logs') + '</div>';


			content += createRow(container,
				localize.t('tiq.dashboard.privacy_management.explicit_preferences.log_to_eventstream'),
				localize.t('tiq.dashboard.privacy_management.explicit_preferences.tooltips.log_to_eventstream'),
				obj.event_log === "yes" ? localize.t("tiq.ui.on") : localize.t("tiq.ui.off"),
				null,
				obj.event_log === "yes" ? '<i class="icon-ok"></i> ' : '<i class="icon-ban-circle"></i> '
			);

			// Ommited Tags

			content += '       <div id="' + _namespace + '_ommited_Tags" class="contentBlockSubSection">';
			content += '            <div class="contentBlockSubTitle"><div class="expander"><i class="icon-caret-right"></i></div> ' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.tags_to_omit') + '</div>';
			content += '            <div class="contentBlockSubBody">';


			content += '<div id="' + container + '_TagsScoped" style="border: 1px solid #EEE;">';
			var tagCounts = (function (tags_array) {
				var count = 0, active = 0, tags = [];
				_.forEach(tags_array, function (tagId) {
					var tag = utui.data.manage[tagId];
					if (!tag) {
						return;
					}
					count++;
					if (tag.status === "active") {
						active++;
					}
					tags.push(tagId);
				});
				return {active: active, count: count, tagIds: tags};
			}(_util.toCleanArray(obj.omittedTags)));
			obj.omittedTags = tagCounts.tagIds.join();
			// Tags Scoped Head
			content += '        <div class="contentSectionTitle">';
			content += '            <div class="titleExpander"><i class="icon-caret-right"></i></div>';
			content += '            <div class="titleText">' + localize.t('tiq.rules.tags') + '</div>';
			content += '            <div class="titleCount"><span class="titleCountActive">' + localize.t('tiq.rules.num_active', {num: tagCounts.active}) + '</span> / <span class="titleCountTotal">' + tagCounts.count + '</span></div>';
			content += '        </div>';

			// Tags Scoped Body
			content += '        <div class="contentSectionBody scrollSection">';
			content += '          <div class="contentBlock">';
			content += '            <div class="LRconditionsBlock contentSectionBodyContent">' + _view.getTagsScoped(_util.toCleanArray(obj.omittedTags)) + '</div>';
			content += '          </div>';
			content += '        </div>'; // end contentSectionBody
			content += '</div>';

			// content += '                </table>';
			content += '            </div>';
			content += '        </div> ';
			content += '</div>';
			content += ' </div>';
			content += ' </div>'; // end contentBlockSubSection

			// END OPTIONS

			content += '    </td>';
			content += '</tr>';
			content += '</table>'; //  end contentContainer
			content += '</div>';

			return content;
		},

		// --------------------------------------------------------
		explicitBasicView: function () {
			var v = "";
      v += '<div class="privacy_management_blocks viewItem" data-tile-key="' + utui.constants.privacy_management.explicit.ID + '">';
      v += '	<header class="privacy_management_header viewItem-inner privacy_management_header_container">';
			v += '    <div class="header-inner privacy_management_blocks_header">';
			v += localize.t('tiq.dashboard.privacy_management.resource.explicit.title_text');
			v += '    </div>';
			v += '    <div class="gdpr-padlock"></div>';
			v += '  </header>';
			v += '<div class="privacy_management_grid_explicit_container">';
			v += '<div class="privacy_management_grid_main_text">';
			v += localize.t('tiq.dashboard.privacy_management.resource.explicit.main_text');
			v += '</div>';
			v += '<div class="privacy_management_grid_basic_explicit_img"></div>';
			v += '<div class="privacy_management_grid_sub_text">';
			v += localize.t('tiq.dashboard.privacy_management.resource.explicit.sub_text');
			v += '</div>';
			v += '<div class="privacy_management_grid_learn_more">';
			v += '<div onclick="utui.help.openCommunityLink(\'' + common.community.explict_consent + '\'); return false;" class="utui-selection-button-container hyper">';
			v += '<div class="utui-selection-button-icon">';
			v += '<i class="icon-file-text"></i>';
			v += '</div>';
			v += '<div class="utui-selection-button-description">';
			v += '<h3 class="utui-selection-button-title">' + localize.t('tiq.dashboard.privacy_management.resource.explicit.learn_more') + '</h3>';
			v += '</div>';
			v += '</div>';
			v += '</div>';
			v += '<div class="privacy_management_grid_learn_more_text">' + localize.t('tiq.dashboard.privacy_management.resource.explicit.learn_more_desc') + '</div>';
			v += '<div class="privacy_management_grid_get_started">';
			v += '<span id="' + _namespace + '_explicit_getStartedBtn" class="btn btn-success" style="margin-top:0; width: 78px;">';
			v += '<span>' + localize.t('tiq.dashboard.privacy_management.resource.explicit.get_started') + '</span>';
			v += '</span>';
			v += '</div>';
			v += '</div>';
			v += '</div>';
			return v;
		},

		// --------------------------------------------------------
		consentPreferences_complete: function () {
			var preferences = utui.data.privacy_management.preferences;
			var cookieRestriction = (preferences.single_cookie === true) ? localize.t('tiq.dashboard.privacy_management.retain_tealium_cookie') : localize.t('tiq.dashboard.privacy_management.remove_tealium_cookie');
			var defaultCategoryState = (preferences.default_state === true) ? localize.t("tiq.ui.on") : localize.t("tiq.ui.off");
			var specialManageGroup = _getSpecialManageGroup();
			var cdpID = _.size(specialManageGroup) + 1;
			var modifiedManageGroup = $.extend(true, {}, specialManageGroup, { // append CDP group
				cdpID: {
					groupid: cdpID,
					sort: cdpID,
					tab: "cdp",
					title: "",
					text: "CDP"
				}
			});
			var categoryObj;
			var enabledLanguages = [];
			var enabledLanguagesDisplayName;
			var languageDefault;
			var languageDefaultDisplayName;
			var languageObj;
			var customTokenObj;
			var languageCategoryObj;
			var manageGroupObj;
			var omittedTagObj;
			var omittedTagDisplayName;
			var omittedTags = [];
			var commonTokens = {};
			var v = '';

			for (var i in preferences.languages) {
				languageObj = preferences.languages[i];
				enabledLanguages.push(utui.config.privacy_management.languages[i].label + ' (' + utui.config.privacy_management.languages[i].value + ')');
				if (languageObj.isDefault === true) {
					languageDefault = languageObj;
					languageDefaultDisplayName = utui.config.privacy_management.languages[i].label;
					commonTokens = {
						title: languageDefault.common_tokens.title || '',
						message: languageDefault.common_tokens.message || '',
						confirmation_button: languageDefault.common_tokens.confirmation_button || '',
						category: languageDefault.common_tokens.category || '',
						description: languageDefault.common_tokens.description || '',
						status: languageDefault.common_tokens.status || '',
						yes: languageDefault.common_tokens.yes || '',
						no: languageDefault.common_tokens.no || ''
					};
				}
			}
			enabledLanguagesDisplayName = enabledLanguages.join(', ');

			v += '<div class="privacy_management_blocks viewItem" data-tile-key="' + utui.constants.privacy_management.consent.ID + '">';
			v += '	<header class="privacy_management_header viewItem-inner privacy_management_header_container_detailed">';
			v += '		<div class="privacy_toggle">';
		    v += '			<div id="' + _namespace + '_isEnabledToggleBtn" class="container_status_wrapper" style="cursor: pointer;">';
			v += '				<span class="js-is-enabled-status container_status_' + (preferences.isEnabled ? "active" : "inactive") + '"></span>';
			v += '			</div>';
			v += '		</div>';
			v += '		<div class="privacy_title">';
			v += '			<div class="header-inner privacy_management_blocks_header" style="grid-area: title;">';
			v += '				<div style="display: table-cell;">' + localize.t('tiq.dashboard.privacy_management.resource.general.title_text') + '</div>';
			v += '			</div>';
			v += '		</div>';
			v += '		<div class="privacy_padlock">';
			v += '			<div class="gdpr-padlock" style="grid-area: padlock;"></div>';
			v += '		</div>';
			v += '		<div class="privacy_status">';
			v += '		</div>';
			v += '  	<div class="privacy_reset">';
			v += '			<span id="' + _namespace + '_resetPreferencesBtn" class="btn i-color-delete" style="' + (preferences.isEnabled ? "display:none;" : "") + '">';
			v += '				<i class="icon-trash"></i>';
			v += '				<span>&nbsp;' + localize.t('tiq.profile.delete') + '</span>';
			v += '			</span>';
			v += '		</div>';
			v += '  	<div class="privacy_preview">';
			v += '			<span id="' + _namespace + '_previewPreferencesBtn" class="btn btn-success">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.preview') + '</span>';
			v += '  	</div>';
			v += '  	<div class="privacy_preview_img">';
		    v += '      	<div id="'+_namespace+'_preferences_img" class="privacy_management_preview_img"></div>';
			v += '  	</div>';
			v += '	</header>';

			// tab_consent
			v += '<table class="contentAreaTable">';
			v += '	<tbody>';
			v += '		<tr>';
			v += '			<td class="contentContainer">';
			v += '          	<div class="contentSection">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleText">' + localize.t('tiq.dashboard.privacy_management.content') + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" id="' + _namespace + '_editConsentBtn" class="btn btn-small i-color-edit" data-key="tab_consent"><i class="icon-edit"></i> ' + localize.t('tiq.dashboard.privacy_management.edit') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '					<div class="contentSectionBody">';
			v += '						<div class="contentBlock">';
			v += '          				<div class="contentBlockTitle">' + localize.t('tiq.dashboard.privacy_management.default_text') + '</div>';
			v += '							<table class="contentTable">';
			v += '								<tbody>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.default_language') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + languageDefaultDisplayName + '">' + languageDefaultDisplayName + '</div>';
			v += '												<div title="' + localize.t('tiq.dashboard.privacy_management.tooltips.default_language') + '" class="infoIcon js-tooltip-title"><a href="#" class="icon-question-sign"></a></div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.enabled_languages') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + enabledLanguagesDisplayName + '">' + enabledLanguagesDisplayName + '</div>';
			v += '												<div title="' + localize.t('tiq.dashboard.privacy_management.tooltips.enabled_languages') + '" class="infoIcon js-tooltip-title"><a href="#" class="icon-question-sign"></a></div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.title') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.title) + '">' + utui.util.safeEscape(commonTokens.title) + '</div>';
			v += '												<div title="' + localize.t('tiq.dashboard.privacy_management.tooltips.title_consent_preferences') + '" class="infoIcon js-tooltip-title"><a href="#" class="icon-question-sign"></a></div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.message') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.message) + '">' + utui.util.safeEscape(commonTokens.message) + '</div>';
			v += '												<div title="' + localize.t('tiq.dashboard.privacy_management.tooltips.message_consent_preferences') + '" class="infoIcon js-tooltip-title"><a href="#" class="icon-question-sign"></a></div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.button') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.confirmation_button) + '">' + utui.util.safeEscape(commonTokens.confirmation_button) + '</div>';
			v += '												<div title="' + localize.t('tiq.dashboard.privacy_management.tooltips.button_consent_preferences') + '" class="infoIcon js-tooltip-title"><a href="#" class="icon-question-sign"></a></div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.category_header') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.category) + '">' + utui.util.safeEscape(commonTokens.category) + '</div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.description_header') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.description) + '">' + utui.util.safeEscape(commonTokens.description) + '</div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.status') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.status) + '">' + utui.util.safeEscape(commonTokens.status) + '</div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.yes') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.yes) + '">' + utui.util.safeEscape(commonTokens.yes) + '</div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.no') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
			v += '												<div class="contentValue" title="' + utui.util.safeEscape(commonTokens.no) + '">' + utui.util.safeEscape(commonTokens.no) + '</div>';
			v += '											</div>';
			v += '										</td>'
			v += '									<tr>';
			v += '								</tbody>';
			v += '							</table>';

			v += '							<div class="contentBlockSubTitle js-tokens-section-control">';
			v += '								<div class="expander"><i class="icon-caret-right js-tokens-section-caret-toggle"></i></div> ' + localize.t('tiq.dashboard.privacy_management.parameters');
			v += '							</div>';

			v += '							<div class="js-tokens-section hidden">';
			v += '								<table class="contentTable">';
			v += '									<tbody>';
			for (var i in preferences.custom_tokens_definitions) {
				customTokenObj = preferences.custom_tokens_definitions[i];
				v += '										<tr>';
				v += '											<td class="contentTableLabel">';
				v += '												<div title="' + utui.util.safeEscape(customTokenObj.title) + '">' + utui.util.safeEscape(customTokenObj.title) + '</div>';
				v += '											</td>';
				v += '											<td class="contentTableValue">';
				v += '												<div class="contentValueContainer contentTableValueNone">';
				v += '													<div class="contentValue" title="' + utui.util.safeEscape(languageDefault.custom_tokens[customTokenObj.token]) + '">' + utui.util.safeEscape(languageDefault.custom_tokens[customTokenObj.token]) + '</div>';
				v += '												</div>';
				v += '											</td>';
				v += '											<td class="contentTableLabel">';
				v += '												<div class="pm_consent_params" title="{{' + utui.util.safeEscape(customTokenObj.token) + '}}">{{' + utui.util.safeEscape(customTokenObj.token) + '}}</div>';
				v += '											</td>';
				v += '										</tr>';
			}
			for (var i in modifiedManageGroup) {
				manageGroupObj = modifiedManageGroup[i];
				if (manageGroupObj) {
					languageCategoryObj = languageDefault.categories[manageGroupObj.tab];
					if (languageCategoryObj) {
						v += '										<tr>';
						v += '											<td class="contentTableLabel">';
						v += '												<div title="' + manageGroupObj.text + ' Title">' + manageGroupObj.text + ' Title</div>';
						v += '											</td>';
						v += '											<td class="contentTableValue">';
						v += '												<div class="contentValueContainer contentTableValueNone">';
						v += '													<div class="contentValue" title="' + utui.util.safeEscape(languageCategoryObj.name) + '">' + utui.util.safeEscape(languageCategoryObj.name) + '</div>';
						v += '												</div>';
						v += '											</td>';
						v += '											<td class="contentTableLabel">';
						v += '												<div class="pm_consent_params" title="{{category_' + manageGroupObj.tab + '_title}}">{{category_' + manageGroupObj.tab + '_title}}</div>';
						v += '											</td>';
						v += '										</tr>';
						v += '										<tr>';
						v += '											<td class="contentTableLabel">';
						v += '												<div title="' + manageGroupObj.text + ' Description">' + manageGroupObj.text + ' Description</div>';
						v += '											</td>';
						v += '											<td class="contentTableValue">';
						v += '												<div class="contentValueContainer contentTableValueNone">';
						v += '													<div class="contentValue" title="' + utui.util.safeEscape(languageCategoryObj.notes) + '">' + utui.util.safeEscape(languageCategoryObj.notes) + '</div>';
						v += '												</div>';
						v += '											</td>';
						v += '											<td class="contentTableLabel">';
						v += '												<div class="pm_consent_params" title="{{category_' + manageGroupObj.tab + '_description}}">{{category_' + manageGroupObj.tab + '_description}}</div>';
						v += '											</td>';
						v += '										</tr>';
					}
				}
			}
			v += '									</tbody>';
			v += '								</table>';
			v += '							</div>';

			v += '						</div>';
			v += '				</div>';
			v += '				</div>';

			// tab_categories
			v += '				<div class="contentSection">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleText">' + localize.t('tiq.dashboard.privacy_management.categories') + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" id="' + _namespace + '_editCategoriesBtn" class="btn btn-small i-color-edit" data-key="tab_categories"><i class="icon-edit"></i> ' + localize.t('tiq.dashboard.privacy_management.edit') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '					<div class="category-table container-fluid">';
			v += '						<div class="row-fluid category-tag-header-row">';
			v += '							<div class="span6">' + localize.t('tiq.dashboard.privacy_management.category') + '</div><div class="span6">' + localize.t('tiq.dashboard.privacy_management.tags') + '</div>';
			v += '						</div>';
			for (var i in preferences.categories) {
				categoryObj = preferences.categories[i];
				if (categoryObj.tagid.length) {
					v += '						<div class="row-fluid category-tag-child-row">';
					v += '								<div class="span6">' + categoryObj.name + '</div><div class="span6">' + categoryObj.tagid.length + '</div>';
					v += '						</div>';
				}
			}
			v += '					</div>';
			v += '      		</div>';
			// tab_options
			v += '				<div class="contentSection">';
			v += '          		<div class="contentSectionTitle">';
			v += '              		<div class="titleText">' + localize.t('tiq.dashboard.privacy_management.options') + '</div>';
			v += '              		<div class="titleButton">';
			v += '                  		<a href="#" id="' + _namespace + '_editOptionsBtn" class="btn btn-small i-color-edit" data-key="tab_options"><i class="icon-edit"></i> ' + localize.t('tiq.dashboard.privacy_management.edit') + '</a>';
			v += '              		</div>';
			v += '          		</div>';
			v += '					<div class="contentSectionBody">';
			v += '						<div class="contentBlock">';
			v += '          				<div class="contentBlockTitle">' + localize.t('tiq.dashboard.privacy_management.cookie_policy') + '</div>';
			v += '							<table class="contentTable">';
			v += '								<tbody>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.single_cookie_restriction') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
      v += '												<div class="contentValue ellipsis" title="' + cookieRestriction + '">' + cookieRestriction + '</div>';
			v += '											</div>';
			v += '										</td>';
			v += '									</tr>';
			v += '								</tbody>';
			v += '							</table>';
			v += '						</div>';
			
	
			v += '						<div class="contentBlock">';
			v += '          				<div class="contentBlockTitle">' + localize.t('tiq.dashboard.privacy_management.default_state') + '</div>';
			v += '							<table class="contentTable">';
			v += '								<tbody>';
			v += '									<tr>';
			v += '										<td class="contentTableLabel"><div>' + localize.t('tiq.dashboard.privacy_management.category_state') + '</div></td>';
			v += '										<td class="contentTableValue">';
			v += '											<div class="contentValueContainer">';
      v += '												<div class="contentValue ellipsis" title="' + defaultCategoryState + '">' + (preferences.default_state ? '<i class="icon-ok"></i> ' : '<i class="icon-ban-circle"></i> ') + defaultCategoryState + '</div>';
			v += '											</div>';
			v += '										</td>';
			v += '									</tr>';
			v += '								</tbody>';
			v += '							</table>';
			v += '						</div>';
			v += '						</div>';

			for (var i in preferences.categories) {
				categoryObj = preferences.categories[i];
				if (categoryObj.tagid.length) {
					for (var j in categoryObj.tagid) {
						omittedTagObj = categoryObj.tagid[j];
						if (omittedTagObj.isOn === false) {
							omittedTagDisplayName = omittedTagObj.tag_name;
							if (omittedTagObj.id) {
								omittedTagDisplayName += ' [UID ' + omittedTagObj.id + ']';
							}
							omittedTags.push(omittedTagDisplayName);
						}
					}
				}
			}
			var omittedTagsLength = omittedTags.length;
			if (omittedTagsLength > 0) {
				v += '					<div class="contentSectionBody">';
				v += '						<div class="contentBlock">';
				v += '          				<div class="contentBlockTitle">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tags_to_omit') + '</div>';
				v += '							<div class="contentBlockSubTitle js-omitted-tags-section-control">';
				v += '								<div class="expander"><i class="icon-caret-right js-omitted-tags-section-caret-toggle"></i></div> ' + localize.t('tiq.dashboard.privacy_management.tags') + ' (' + omittedTagsLength + ')';
				v += '							</div>';
				v += '							<div class="category-table container-fluid js-omitted-tags-section hidden">';
				v += '								<div class="row-fluid category-tag-header-row">';
				v += '									<div class="span12">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.vendor') + '</div>';
				v += '								</div>';
				for (var i = 0; i < omittedTagsLength; i++) {
					v += '								<div class="row-fluid category-tag-child-row">';
					v += '									<div class="span12" title="' + omittedTags[i] + '">' + omittedTags[i] + '</div>';
					v += '								</div>';
				}
				v += '							</div>';
				v += '						</div>';
				v += '          		<div>';
			}
			v += '				</div>';
			v += '			</td>';
			v += '		</tr>';
			v += '	</tbody>';
			v += '</table>';
      v += '</div>';
			return v;
		},

		drawLoadRule: function (container, myLoadRule) {
			if (typeof myLoadRule == 'undefined') {
				return false;
			}
			var statusClass = 'statusOn',
				tooltipObj = {},
				triggerKey = 'input_', // value used to be inherited from utui.loadrules .triggerKey;
				dateRangeContent = utui.loadrules.dateRange.toDisplayTime(myLoadRule.startDate, myLoadRule.endDate),
				imported = myLoadRule.imported;

			if (myLoadRule.status != 'active') statusClass = 'statusOff';

			var content = '';
			content += '            <div id="' + container + '_loadrule_' + myLoadRule.id + '" class="LRsRule editable ' + (imported ? 'imported' : '') + '">';
			content += '                <div class="contentItemButtonBar">';
			content += '                    <a href="javascript:void(0);" class="btn btn-small contentItemButton actionEdit' + (imported ? ' ui-state-disabled ' : '') + '"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</a>';
			content += '                </div>';
			content += '                <div class="LRsTitle ' + statusClass + '">' + utui.util.safeEscape(myLoadRule.title) + '</div>';

			if (dateRangeContent) {
				content += '<div class="LRdateRangeBlock"><div class="LRsDateRange">' + dateRangeContent + '</div></div>';
			}

			content += '                <div class="LRsConditions">';

			tooltipObj[container + '_loadrule_' + myLoadRule.id + ' .actionGo'] = {gravity: 'ne'}

			var ruleObj = utui.data.loadrules[myLoadRule.id],
				sizeOfRuleObj = utui.util.sizeOf(ruleObj, function (key) {
					return !isNaN(key)
				});
			for (var i = 0; i < sizeOfRuleObj; i++) {
				var ruleFilterObj = {};
				for (var j in utui.util.getVars(ruleObj[i])) {
					if (j.indexOf(triggerKey) == 0) {
						var k = j.substring(triggerKey.length);
						ruleFilterObj[k] = {
							source: ruleObj[i][j],
							filter: ruleObj[i]['filter_' + k],
							operator: ruleObj[i]['operator_' + k]
						};
					}
				}
				var ruleContent = [];
				for (var j in utui.util.getVars(ruleFilterObj, 1)) {
					ruleContent.push('<div class="LRsSource">' + utui.util.safeEscape(dsapi.getVADataSourceDisplayName(ruleFilterObj[j].source)) + '</div><div class="LRsCase">' + ruleFilterObj[j].operator + '</div><div class="LRsFilter">' + utui.util.safeEscape(ruleFilterObj[j].filter) + '</div>');
				}
				var label = localize.t('tiq.tags.loadrule_dialog.condition');
				if (parseInt(i) > 0) label = localize.t('tiq.tags.loadrule_dialog.or_condition');

				content += '<div class="LRsORcondition">';
				for (var a = 0; a < ruleContent.length; a++) {
					content += '<div class="LRsANDcondition">' + ruleContent[a] + '</div>';
				}
				content += '</div>';
			}

			content += '                </div>';
			content += '            </div>';
			$('#' + container + '_loadRulesBlock .contentSectionBodyContent').append(content);
			utui.util.addTooltip(tooltipObj);

			// Mouse Over Edit
			$('#' + container + '_loadrule_' + myLoadRule.id).off().on('mouseenter', function (event) {
				event.stopPropagation();
				$('#' + container + '_loadrule_' + myLoadRule.id + ' .contentItemButton').toggle();
				$('#' + container + '_loadrule_' + myLoadRule.id + ' .contentItemButtonBar').toggleClass('showButtons');
				$('#' + container + '_loadrule_' + myLoadRule.id + ' .contentItemButtonBar:after').css('display', 'none');
				return false;
			}).on('mouseleave', function (event) {
				event.stopPropagation();
				$('#' + container + '_loadrule_' + myLoadRule.id + ' .contentItemButton').toggle();
				$('#' + container + '_loadrule_' + myLoadRule.id + ' .contentItemButtonBar').toggleClass('showButtons');
				$('#' + container + '_loadrule_' + myLoadRule.id + ' .contentItemButtonBar:after').css('display', 'block');
				return false;
			});
			// Mouse Click Edit
			$('#' + container + '_loadrule_' + myLoadRule.id + ' .actionEdit').off().on('click', function () {
				if (!$(this).hasClass("ui-state-disabled")) {
					// Check if you can modify this loadrule
					if (!utui.labels.canUserModify(myLoadRule.labels)) {
						utui.util.showMsgDialog(localize.t('tiq.tags.loadrule_dialog.you_cannot_modify_loadrule'), '');
						return;
					}

					var sv = myLoadRule.id;
					utui.loadrules.showEditItem(utui.loadrules.containerLookup(sv), function lrShowEditItemCB() {
						// utui.manage.setLoadRules:function (true, '', container);
						// utui.manage.constructLoadRules(container);
						// utui.manage.setTitle(container);
						$('#' + container + '_loadRulesBlock .contentSectionBodyContent').empty();
						//_view.drawLoadRule(container, myLoadRule);
						_bindUI.constructLoadRules(
							_namespace + "_explicit",
							_util.toCleanArray(utui.data.privacy_management.explicit.loadrule));
						return false;
					});
				}
			});
			// Mouse Click Pivot
			$('#' + container + '_loadrule_' + myLoadRule.id + ' .actionGo').off().on('click', function () {
				utui.dashboard.shortcutLink(localize.t('tiq.tags.loadrule_dialog.loadrules_name', {name: myLoadRule.title}));
				return false;
			});

			utui.util.addTooltip(tooltipObj);
		}
	};

	// --------------------------------------------------------
	var _render = {
		// --------------------------------------------------------
		contentBody: function () {
			_$content.html(_view.contentBody());
			_bindUI.contentBody();
		}
	};

	// --------------------------------------------------------
	var _bindUI = {
		// --------------------------------------------------------
		contentHeader: function () {

		},

		// --------------------------------------------------------
		contentBody: function () {
			_$content.find('#' + _namespace + '_consent_getStartedBtn').safeOn('click', _eventHandlers.onConsentGetStartedBtnClick);
			_$content.find('#' + _namespace + '_editConsentBtn, #' + _namespace + '_editCategoriesBtn, #' + _namespace + '_editOptionsBtn').safeOn('click', _eventHandlers.onEditConsentBtnClick);
			_$content.find('.js-tokens-section-control').safeOn('click', function () {
				_$content.find('.js-tokens-section').slideToggle();
				_$content.find('.js-tokens-section-caret-toggle').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
			});
			_$content.find('#' + _namespace + '_isEnabledToggleBtn').safeOn('click', _eventHandlers.onIsEnabledToggleBtnClick);
			_$content.find('#' + _namespace + '_resetPreferencesBtn').safeOn('click', _eventHandlers.onResetPreferencesBtnClick);
			_$content.find('#' + _namespace + '_previewPreferencesBtn').safeOn('click', _eventHandlers.onPreviewPreferencesBtnClick);
			_$content.find('.js-tooltip-title').tipsy({gravity: 'sw'});
			_$content.find('.js-omitted-tags-section-control').safeOn('click', function () {
				_$content.find('.js-omitted-tags-section').slideToggle();
				_$content.find('.js-omitted-tags-section-caret-toggle').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
			});

			//---------------explict
			_$content.find('#' + _namespace + '_explicit_getStartedBtn').safeOn('click', _eventHandlers.onExplicitGetStartedBtnClick);
			$('#' + _namespace + '_custom_parameters .contentBlockSubTitle').safeOn('click', function () {
				$('#' + _namespace + '_custom_parameters .contentBlockSubBody').slideToggle();
				$('#' + _namespace + '_custom_parameters .contentBlockSubTitle .expander i').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
			});

			if (utui.data.privacy_management.explicit) {

				$("#" + _namespace + "_explicit_loadRulesBlock .LRconditionsBlock.contentSectionBodyContent").append(
					_bindUI.constructLoadRules(
						_namespace + "_explicit",
						_util.toCleanArray(utui.data.privacy_management.explicit.loadrule))
				);

				$("#" + _namespace + '_ommited_Tags .contentBlockSubTitle').safeOn('click', function () {
					$("#" + _namespace + '_ommited_Tags .contentBlockSubBody').slideToggle();
					$("#" + _namespace + '_ommited_Tags .contentBlockSubTitle .expander i').toggleClass('icon-caret-right').toggleClass('icon-caret-down');
				});

				$("#" + _namespace + '_explicit_status_toggle').safeOn('click', _eventHandlers.onToggleExplictClick);
        
        $("#" + _namespace + "_explicit_deleteBtn").safeOn("click", _eventHandlers.onResetExplicitBtnClick);
        

				$("#" + _namespace + "_container .actionEditSettings").safeOn("click", function () {
					_eventHandlers.onExplicitEditBtnClick($(this).attr("data-tab"));
				});

				$("#" + _namespace + "_explicit_previewBtn").safeOn("click", function () {
					_eventHandlers.onOpenPreviewBtnClick();
				});

				utui.util.addTooltip(_view.tooltipObj);
			}

		},

		// --------------------------------------------------------
		accordionContent: function () {

		},

		// --------------------------------------------------------
		constructLoadRules: function (container, loadrule) {
			var content = '';
			if (typeof loadrule === 'undefined' || loadrule.length === 0 || loadrule[0] === 'all') {
				// all load rules
				content += '   <div class="LRsTitle statusOn">' + localize.t('tiq.tags.all_pages') + '</div>';
			} else {


				for (var ra = 0; ra < loadrule.length; ra++) {
					var myLoadRule = utui.data.loadrules[loadrule[ra]];
					// utui.manage.drawLoadRule(container, myLoadRule);
					_view.drawLoadRule(container, myLoadRule);
				}
				// content += '<div>This tag will load on multiple conditions</div>';
			}

			return content;
		}
	};
	// --------------------------------------------------------
	var _request = {
		// --------------------------------------------------------
		getAccountLevelPrivacySettings: function (callback) {
			utui.util.showSpinner();

			utui.service.get(utui.service.restapis.ACCOUNT_PRIVACY_SETTINGS, {account: utui.login.account}, null,
				function () {
					_response.onGetAccountLevelPrivacySettingsSuccess.apply(this, arguments);
					if (callback) callback(arguments[0], false);
				},
				function () {
					_response.onGetAccountLevelPrivacySettingsError.apply(this, arguments);
					if (callback) callback(null, true);
				}
			);

		}
	};

	// --------------------------------------------------------
	var _response = {
		// --------------------------------------------------------
		onGetAccountLevelPrivacySettingsSuccess: function (data) {
			utui.util.hideSpinner();

			_accountLevelPrivacyResources = data;

			if (!$.isEmptyObject(utui.data.privacy_management.preferences) && utui.data.privacy_management.preferences.isAccountOverride === true) {
				if (data && data.preferences) {
					if (!_.isEqual(utui.data.privacy_management.preferences.languages, data.preferences.languages)) {
						// profile data has been updated/changed
						utui.profile.setActionPerformed({
							action: utui.constants.privacy_management.consent.UPDATED,
							data: {
								id: utui.constants.privacy_management.consent.ID,
								name: utui.constants.privacy_management.consent.TYPE,
								kind: utui.constants.privacy_management.TYPE,
								operation: utui.constants.operation.UPDATED,
								container: _containerList
							}
						}, true);
					}
					utui.data.privacy_management.preferences.languages = data.preferences.languages;
					utui.data.privacy_management.preferences.custom_tokens_definitions = data.preferences.custom_tokens_definitions;
				}
			}

			if (!$.isEmptyObject(utui.data.privacy_management.explicit)
				&& utui.data.privacy_management.explicit.isAccountOverride === true) {
				if (data && data.explicit) {
					if (!_.isEqual(utui.data.privacy_management.explicit.languages,
						data.explicit.languages)) {
            utui.util.pubsub.publish(utui.constants.privacy_management.explicit.UPDATED);
					}

					utui.data.privacy_management.explicit.languages = data.explicit.languages;
					utui.data.privacy_management.explicit.custom_tokens_definitions = data.explicit.custom_tokens_definitions;
				}
			}
		},

		// --------------------------------------------------------
		onGetAccountLevelPrivacySettingsError: function (status, response) {
			utui.util.hideSpinner();
			var errorMsg;

			// Show error if profile is linked to Account Level Privacy Resources
			if (!$.isEmptyObject(utui.data.privacy_management.preferences) && utui.data.privacy_management.preferences.isAccountOverride === true) {
				errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.dashboard.privacy_management.account_preferences.error.unable_to_get_account_privacy_settings'));
				utui.util.showStatusMessage(errorMsg);
			}

			// Show error if profile is linked to Account Level Privacy Resources
			if (!$.isEmptyObject(utui.data.privacy_management.explicit) &&
				utui.data.privacy_management.explicit.isAccountOverride === true) {
				errorMsg = utui.service.getErrorFromResponse(response, _errorCodeMap, localize.t('tiq.dashboard.privacy_management.account_preferences.error.unable_to_get_account_privacy_settings'));
				utui.util.showStatusMessage(errorMsg);
			}

			// reset Account Level Privacy Resources
			_accountLevelPrivacyResources = {};
		}
	};

	// PUBLIC
	// --------------------------------------------------------
	var _public = {
		id: 'privacy_management',

		// --------------------------------------------------------
		init: function () {
      utui.util.pubsub.subscribe(utui.constants.privacy_management.consent.FOCUSED, _eventHandlers.onFocusedConsentManagement);
      
			utui.util.pubsub.subscribe(utui.constants.privacy_management.consent.ADDED, _eventHandlers.onConsentPreferencesAdded, this);
			utui.util.pubsub.subscribe(utui.constants.privacy_management.consent.UPDATED, _eventHandlers.onConsentPreferencesUpdated, this);
			utui.util.pubsub.subscribe(utui.constants.privacy_management.consent.TOGGLED, _eventHandlers.onConsentPreferencesToggled, this);
			utui.util.pubsub.subscribe(utui.constants.privacy_management.consent.REMOVED, _eventHandlers.onConsentPreferencesRemoved, this);
			
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.refreshContent, this);
      utui.util.pubsub.subscribe(utui.constants.profile.SAVED, this.refreshContent, this);
      utui.util.pubsub.subscribe(utui.constants.profile.SAVED_AS, this.refreshContent, this);
			
			utui.util.pubsub.subscribe(utui.constants.tags.ADDED, this.refreshContent, this);
			utui.util.pubsub.subscribe(utui.constants.tags.REMOVED, this.refreshContent, this);
			utui.util.pubsub.subscribe(utui.constants.tags.COPIED, this.refreshContent, this);
			utui.util.pubsub.subscribe(utui.constants.privacy_management.ACCOUNT_DEFAULTS_UPDATED, this.onAccountDefaultsUpdated, this);

			utui.util.pubsub.subscribe(utui.constants.tags.REMOVED, _util.removeTagFromOmmitedList, this);
			
			utui.util.pubsub.subscribe(utui.constants.privacy_management.explicit.ADDED, _eventHandlers.onConsentPromptAdded, this);
			utui.util.pubsub.subscribe(utui.constants.privacy_management.explicit.UPDATED, _eventHandlers.onConsentPromptUpdated, this);
      utui.util.pubsub.subscribe(utui.constants.privacy_management.explicit.REMOVED, _eventHandlers.onConsentPromptRemoved, this);
      utui.util.pubsub.subscribe(utui.constants.privacy_management.explicit.TOGGLED, _eventHandlers.onConsentPromptToggled, this);
      utui.util.pubsub.subscribe(utui.constants.privacy_management.explicit.LRUPDATED, _eventHandlers.onExplicitLoadRuleChange, this);
      
			
			utui.util.pubsub.subscribe(utui.constants.profile.LOADED, this.refreshContent, this);
			utui.util.pubsub.subscribe(utui.constants.privacy_management.ACCOUNT_DEFAULTS_UPDATED, _render.contentBody, this);
		},

		// --------------------------------------------------------
		show: function () {
			_bindUI.contentHeader();
			_showHelpTab();
			_public.refreshContent();
		},

		// --------------------------------------------------------

		modals: {
			addNewCustomParameterDialog: function () {
				// Private API
				var _namespace = 'addNewCustomParameter';

				//----------------------------------------------------------------------------------------------------------------
				function _view() {
					
					var fieldset = {
						title: {
							fieldType: 'text',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.title'),
							size: '40'
						}
					};
					var v = '';
					var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, 'dialog_new_custom_parameter', true);
					v += '<div style="width:410px;">';
					v += '<div id="addNewCustomParameter_error" class="dialog-message dialog-error" style="display: none;"></div>'
					v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
					v += '</div>';
					return v;
				}

				//----------------------------------------------------------------------------------------------------------------
				function _disposeDialog() {
					$('#' + _namespace + '_dialog').dialog().remove();
				}

				// Public API
				var _public = {
					//--------------------------------------------------------------------------------------------------------------------------------
					show: function (callback) {
						// Add the dialog to the DOM if not already there
						var content = _view();
						var title = localize.t('tiq.dashboard.privacy_management.explicit_preferences.add_parameter');

						if ($('#' + _namespace + '_dialog').length == 0) {
							$('<div />', {
								id: _namespace + '_dialog'
							}).prependTo('body');
							$('<div />', {
								id: _namespace + '_dialogContent'
							}).appendTo('#' + _namespace + '_dialog');
						}

						$('#' + _namespace + '_dialogContent').html(content);

						$("#" + _namespace + '_dialog').dialog({
							title: title,
							height: 'auto',
							width: 'auto',
							modal: true,
							closeOnEscape: false,
							resizable: false,
							autoOpen: true,
							draggable: false,
							position: ['center', 'center'],
							buttons: [{
								text: localize.t('tiq.dialog.button.apply'),
								id: 'addCustomParam_dialog_applyBtn',
								click: function () {

									var errMsg = callback();
									if (errMsg) {
										$('#' + _namespace + '_error').empty().append(errMsg);
									} else {
										_disposeDialog();
									}
								}
							},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									id: 'addCustomParam_dialog_cancelBtn',
									click: _disposeDialog,
									style: 'float:left; margin-left: 12px'
								}
							]
						}).on('dialogclose', _disposeDialog);
					}
				};

				return _public;
			}(),
			addNewLanguageDialog: function () {
				// Private API
				var _namespace = 'addNewLanguage';

				//----------------------------------------------------------------------------------------------------------------
				function _view(filterList) {
					var fieldset = {
						language: {
							fieldType: 'select',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.language'),
							fieldOptions: _.map(_.toArray(_util.getLanguageOptionList()),
								function (arrayItem) {
									return {
										label: arrayItem.label + " (" + arrayItem.value + ")",
										value: arrayItem.value
									};
								})
								.filter(function (item) {
									return _.indexOf(filterList, item.value) === -1;
								}),
							select2placeholder: localize.t("tiq.dashboard.privacy_management.explicit_preferences.select_language")
						}
					};
					var v = '';
					var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, 'dialog_new_language', true);
					v += '<div style="width:410px;">';
					v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
					v += '<div id="' + _namespace + '_error" class="ui-state-error ui-corner-all padded admin_error" style="margin-top: -20px;padding:5px;">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.parameter_already_exists') + '</div>';
					v += '</div>';
					return v;
				}

				//----------------------------------------------------------------------------------------------------------------
				function _disposeDialog() {
					$('#' + _namespace + '_dialog').dialog().remove();
				}

				// Public API
				var _public = {
					//--------------------------------------------------------------------------------------------------------------------------------
					show: function (callback, filterList) {
						// Add the dialog to the DOM if not already there
						var content = _view(filterList);
						var title = localize.t('tiq.dashboard.privacy_management.explicit_preferences.add_language');

						if ($('#' + _namespace + '_dialog').length == 0) {
							$('<div />', {
								id: _namespace + '_dialog'
							}).prependTo('body');
							$('<div />', {
								id: _namespace + '_dialogContent'
							}).appendTo('#' + _namespace + '_dialog');
						}

						$('#' + _namespace + '_dialogContent').html(content);

						$("#" + _namespace + '_dialog').dialog({
							title: title,
							height: 'auto',
							width: 'auto',
							modal: true,
							closeOnEscape: false,
							resizable: false,
							autoOpen: true,
							draggable: false,
							position: ['center', 'center'],
							buttons: [{
								text: localize.t('tiq.dialog.button.apply'),
								id: 'addlanguage_dialog_applyBtn',
								click: function () {
									if (callback) {
										var result = callback(); // onAddNewCustomParameter
										if (result === null) {
											return;
										}
									}
									_disposeDialog();
								}
							},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									id: 'addLanguage_dialog_cancelBtn',
									click: _disposeDialog,
									style: 'float:left; margin-left: 12px'
								}
							]
						}).on('dialogclose', _disposeDialog);

						$("#dialog_new_language_language").select2();
					}
				};

				return _public;
			}(),
			removeLanguageConfirmDialog: function () {
				// Private API
				var _namespace = 'confirmDeleteLanguage';

				// --------------------------------------------------------
				function _view(languageName) {
					var v = '';
					v += '<div id="' + _namespace + '_description">';
					v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
					v += '    <div class="dialog-icon-container">';
					v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
					v += '    </div>';
					v += '    <div class="dialog-description">';
					v += '        <p><strong>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.remove_language.are_you_sure_remove', {name: languageName}) + '</strong></p>';
					v += '        <p>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.this_operation_cannot_be_undone') + '</p>';
					v += '    </div>';
					v += '</div>';
					return v;
				}

				// --------------------------------------------------------
				function _disposeDialog() {
					$('#' + _namespace + '_dialog').dialog().remove();
				}

				// Public API
				var _public = {
					// ----------------------------------------------------
					show: function (languageName, callback) {
						// Add the dialog to the DOM if not already there
						var content = _view(languageName);
						var title = localize.t('tiq.dashboard.privacy_management.explicit_preferences.remove_language.title');

						if ($('#' + _namespace + '_dialog').length == 0) {
							$('<div />', {id: _namespace + '_dialog'}).prependTo('body');
							$('<div />', {id: _namespace + '_dialogContent'}).appendTo('#' + _namespace + '_dialog');
						}

						$('#' + _namespace + '_dialogContent').html(content);

						$("#" + _namespace + '_dialog').dialog({
							title: title,
							height: 'auto',
							width: 'auto',
							modal: true,
							closeOnEscape: false,
							resizable: false,
							autoOpen: true,
							draggable: false,
							position: ['center', 'center'],
							buttons: [
								{
									text: title,
									id: 'confirmRemoveLanguage_dialog_removeBtn',
									click: function () {
										if (callback) {
											callback(); // onConfirmDeleteLanguageBtnClick
										}
										_disposeDialog();
									}
								},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									id: 'confirmRemoveLanguage_dialog_cancelBtn',
									click: _disposeDialog,
									style: 'float:left; margin-left: 12px'
								}
							]
						}).on('dialogclose', _disposeDialog);
					}
				};

				return _public;
			}(),
			restoreDefaultContentConfirmDialog: function () {
				// Private API
				var _namespace = 'confirmRestoreDefaultContent';

				// --------------------------------------------------------
				function _view() {
					var v = '';
					v += '<div id="' + _namespace + '_description">';
					v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
					v += '    <div class="dialog-icon-container">';
					v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
					v += '    </div>';
					v += '    <div class="dialog-description">';
					v += '        <p><strong>' + localize.t('tiq.dashboard.privacy_management.are_you_sure_restore_content') + '</strong></p>';
					v += '        <p>' + localize.t('tiq.dashboard.privacy_management.this_operation_cannot_be_undone') + '</p>';
					v += '    </div>';
					v += '</div>';
					return v;
				}

				// --------------------------------------------------------
				function _disposeDialog() {
					$('#' + _namespace + '_dialog').dialog().remove();
				}

				// Public API
				var _public = {
					// ----------------------------------------------------
					show: function (callback) {
						// Add the dialog to the DOM if not already there
						var content = _view();
						var title = localize.t('tiq.dashboard.privacy_management.restore_default_content');

						if ($('#' + _namespace + '_dialog').length == 0) {
							$('<div />', {id: _namespace + '_dialog'}).prependTo('body');
							$('<div />', {id: _namespace + '_dialogContent'}).appendTo('#' + _namespace + '_dialog');
						}

						$('#' + _namespace + '_dialogContent').html(content);

						$("#" + _namespace + '_dialog').dialog({
							title: title,
							height: 'auto',
							width: 'auto',
							modal: true,
							closeOnEscape: false,
							resizable: false,
							autoOpen: true,
							draggable: false,
							position: ['center', 'center'],
							buttons: [
								{
									text: title,
									id: 'confirmRemoveLanguage_dialog_removeBtn',
									click: function () {
										if (callback) {
											callback(); // onConfirmDeleteLanguageBtnClick
										}
										_disposeDialog();
									}
								},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									id: 'confirmRemoveLanguage_dialog_cancelBtn',
									click: _disposeDialog,
									style: 'float:left; margin-left: 12px'
								}
							]
						}).on('dialogclose', _disposeDialog);
					}
				};

				return _public;
			}(),
			resetExplictData: function () {
				// Private API
				var _namespace = 'confirmDeleteExplicitData';

				// --------------------------------------------------------
				function _view() {
					var v = '';
					v += '<div id="' + _namespace + '_description">';
					v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
					v += '    <div style="min-height: 10px;"></div>';
					v += '    <div class="dialog-icon-container">';
					v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
					v += '    </div>';
					v += '    <div class="dialog-description">';
					v += '        <p>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.delete_data.are_you_sure') + '</p>';
					v += '    </div>';
					v += '</div>';
					return v;
				}

				// --------------------------------------------------------
				function _disposeDialog() {
					$('#' + _namespace + '_dialog').dialog().remove();
				}

				// Public API
				var _public = {
					// ----------------------------------------------------
					show: function (callback) {
						// Add the dialog to the DOM if not already there
						var content = _view();
						var title = localize.t('tiq.dashboard.privacy_management.explicit_preferences.delete_data.title');

						if ($('#' + _namespace + '_dialog').length === 0) {
							$('<div />', {id: _namespace + '_dialog'}).prependTo('body');
							$('<div />', {id: _namespace + '_dialogContent'}).appendTo('#' + _namespace + '_dialog');
						}

						$('#' + _namespace + '_dialogContent').html(content);

						$("#" + _namespace + '_dialog').dialog({
							title: title,
							height: 'auto',
							width: 'auto',
							modal: true,
							closeOnEscape: false,
							resizable: false,
							autoOpen: true,
							draggable: false,
							position: ['center', 'center'],
							buttons: [
								{
									text: localize.t('tiq.dashboard.privacy_management.explicit_preferences.delete_data.button'),
									id: 'confirmRemoveLanguage_dialog_removeBtn',
									click: function () {
										if (callback) {
											callback(); // onConfirmDeleteLanguageBtnClick
										}
										_disposeDialog();
									}
								},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									id: 'confirmRemoveLanguage_dialog_cancelBtn',
									click: _disposeDialog,
									style: 'float:left; margin-left: 12px'
								}
							]
						}).on('dialogclose', _disposeDialog);
					}
				};

				return _public;
			}(),
			linkToPrivacyResources: function () {
				// Private API
				var _namespace = 'confirmLinkToPrivacyResources';

				// --------------------------------------------------------
				function _view() {
					var v = '';
					v += '<div id="' + _namespace + '_description">';
					v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
					v += '    <div class="dialog-icon-container">';
					v += '    <div style="min-height: 10px;"></div>';
					v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
					v += '    </div>';
					v += '    <div class="dialog-description" style="max-width: 400px;">';
					v += '        <p><strong>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.link_to_privacy_resources.are_you_sure') + '</strong></p>';
					v += '        <p>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.link_to_privacy_resources.text') + '</p>';
					v += '    </div>';
					v += '</div>';
					return v;
				}

				// --------------------------------------------------------
				function _disposeDialog() {
					$('#' + _namespace + '_dialog').dialog().remove();
				}

				// Public API
				var _public = {
					// ----------------------------------------------------
					show: function (callback) {
						// Add the dialog to the DOM if not already there
						var content = _view();
						var title = localize.t('tiq.dashboard.privacy_management.explicit_preferences.link_to_privacy_resources.title');

						if ($('#' + _namespace + '_dialog').length === 0) {
							$('<div />', {id: _namespace + '_dialog'}).prependTo('body');
							$('<div />', {id: _namespace + '_dialogContent'}).appendTo('#' + _namespace + '_dialog');
						}

						$('#' + _namespace + '_dialogContent').html(content);

						$("#" + _namespace + '_dialog').dialog({
							title: title,
							height: 'auto',
							width: 'auto',
							modal: true,
							closeOnEscape: false,
							resizable: false,
							autoOpen: true,
							draggable: false,
							position: ['center', 'center'],
							buttons: [
								{
									text: title,
									id: 'confirmRemoveLanguage_dialog_removeBtn',
									click: function () {
										if (callback) {
											callback(); // onConfirmDeleteLanguageBtnClick
										}
										_disposeDialog();
									}
								},
								{
									text: localize.t('tiq.dialog.button.cancel'),
									id: 'confirmRemoveLanguage_dialog_cancelBtn',
									click: _disposeDialog,
									style: 'float:left; margin-left: 12px'
								}
							]
						}).on('dialogclose', _disposeDialog);
					}
				};

				return _public;
			}()
		},

		// --------------------------------------------------------
		refreshContent: function () {
			if (($('#my_site_site_privacy_management_menu').parent().hasClass('selected'))) {
				var callback = function () {
					_render.contentBody();
					utui.profile.showAllModifiedTabLabels(utui.constants.privacy_management.TYPE);
				};
				_request.getAccountLevelPrivacySettings(callback);
			}
		},

		// --------------------------------------------------------
		onAccountDefaultsUpdated: function (data) {
			var _refreshContent = false;
			var dataObj = utui.data.privacy_management;

			_accountLevelPrivacyResources = data;

			if ((utui.config.currentTab === utui.dashboard.id && $('#my_site_site_privacy_management_menu').parent().hasClass('selected'))) {
				if (!$.isEmptyObject(dataObj.preferences) && dataObj.preferences.isAccountOverride === true) {
					if (data && data.preferences) {
						dataObj.preferences.languages = data.preferences.languages;
						dataObj.preferences.custom_tokens_definitions = data.preferences.custom_tokens_definitions;
						_refreshContent = true;
					}
				}

				if (!$.isEmptyObject(dataObj.explicit) && dataObj.explicit.isAccountOverride === true) {
					if (data && data.explicit) {
						dataObj.explicit.languages = data.explicit.languages;
						dataObj.explicit.custom_tokens_definitions = data.explicit.custom_tokens_definitions;
						_refreshContent = true;
					}
				}
			}

			if (_refreshContent) {
				_render.contentBody();
			}
		},

		// --------------------------------------------------------
		showAddEditExplicit: function (explicitPreference, callback, selectedTab) {
			// Private API
			var _namespace = 'explicit_preferences_dialog_addedit',
				_containerName = 'test_config_',
				_selectedTab = selectedTab || 'tab_explicit',
				_explicitInputFields = {
					fieldset: {
						title: {
							fieldType: 'text',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.title'),
							size: '70'
						},
						message: {
							fieldType: 'textarea',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.message'),
							size: '70'
						},
						confirmation_button: {
							fieldType: 'text',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.button'),
							size: '70'
						}
					}
				},
				_customizationInputFields = {
					fieldset: {
						css: {
							fieldType: 'custom',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.css'),
							size: '70',
							customRenderer: {
								getView: function () {
									return '<div id="css-ace-editor" class="privacy_management_ace_editor"></div>';
								},
								getTitle: function () {
									return '';
								}
							}
						},
						html: {
							fieldType: 'custom',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.html'),
							size: '70',
							customRenderer: {
								getView: function () {
									return '<div id="html-ace-editor" class="privacy_management_ace_editor"></div>';
								},
								getTitle: function () {
									return '';
								}
							}
						},
						javascript: {
							fieldType: 'custom',
							label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.javascript'),
							size: '70',
							customRenderer: {
								getView: function () {
									return '<div id="js-ace-editor" class="privacy_management_ace_editor"></div>';
								},
								getTitle: function () {
									return '';
								}
							}
						}
					}
				},
				_optionsInputFields = {
					event_logging: {
						fieldset: {
							event_log: {
								fieldType: 'radio',
								label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.log_consent_changes'),
								title: localize.t('tiq.dashboard.privacy_management.explicit_preferences.log_consent_changes_notice'),

								group: 'data_layer_spec_type',
								radios: [
									{
										id: '_radio_page',
										label: localize.t('tiq.datasources.specs.config.page'),
										value: 'Page',
										defaultValue: true
									},
									{
										id: '_radio_event',
										label: localize.t('tiq.datasources.specs.config.event'),
										value: 'Event',
										defaultValue: false
									}
								]
							}
						}
					}
				},
				_selectedLanguage,
				_templateModal = utui.ui.template.modal(),
				_templateAccordion = utui.ui.template.accordion(true),
				_explicitPreference,
				$modalDialog,
				_saveObj,
				_isNew = false,
				_editors = {
					javascript: null,
					css: null,
					html: null
				},
				_maxZ = $.ui.dialog.maxZ;
      $.ui.dialog.maxZ =0;
			_explicitPreference = explicitPreference;

			// setup the save object
			if (_isNewExplicitPreference(_explicitPreference)) {
				_saveObj = _constructEmptyExplicitPreference();
				_isNew = true;
			} else {
				// Copy the test config object to prevent unsaved changes from being persisted
				_explicitPreference = $.extend(true, {}, explicitPreference);
				if (!_explicitPreference.content) {
					_explicitPreference.content = _constructDefaultContent(); //fix if content is missing //should never ever happen
				}
				_saveObj = _explicitPreference;
			}

			// --------------------------------------------------------
			function _destoryEditors() {
				_.forEach(_editors, function (editor, item) {
					if (!editor) return;
					editor.destroy();
					_editors[item] = undefined;
				});
			}

			// --------------------------------------------------------
			function _isNewExplicitPreference(explicitPreference) {
				return explicitPreference === 'create';
			}

			// --------------------------------------------------------
			function _constructEmptyExplicitPreference() {
				var obj = {
					isEnabled: true,
					languages: {
						en: _constructBasicEmptyExplicitPreferenceLanguage()
					},
					content: _constructDefaultContent(),
					custom_tokens_definitions: [
						{
							title: "Opt-In",
							token: "opt_in"
						}, {
							title: "Opt-Out",
							token: "opt_out"
						}, {
							title: "Privacy Policy URL",
							token: "privacy_policy_url"
						}
					],
					loadrule: "all",
					omittedTags: "",
					event_log: _util.hasValidCollect() ? "yes" : "no",
					isAccountOverride: false
				};
				obj.languages.en.isDefault = true;
				obj.languages.en.custom_tokens = {
					opt_in: "",
					opt_out: "",
					privacy_policy_url: ""
				};

				return obj;
			}

			function _constructDefaultContent() {
				var _view = {
					js : function(){
            var v = '';
            v += '\n\n\n';
            v += '/***********************' + localize.t('tiq.dashboard.privacy_management.do_not_modify_below_this_line') + '***********************/\n';
						v += '(function consent_prompt(){\n';
            v += '  var $el = document.getElementById("consent_prompt_submit"),\n';
            v += '      $modal = document.getElementById("__tealiumGDPRecModal"),\n';
            v += '      $closeBtn = $modal.getElementsByClassName("close_btn_thick")[0],\n';
            v += '      $privacy_pref_optin = document.getElementById("privacy_pref_optin"),\n';
            v += '      $privacy_pref_optout = document.getElementById("privacy_pref_optout");\n';
            v += '  \n';
            v += '  var consentState = utag.gdpr.getConsentState();\n';
            v += '  if (typeof consentState === "number") {\n';
            v += '    if (consentState === 1) {\n';
            v += '      $privacy_pref_optin.checked = true;\n';
            v += '    } else if (consentState === -1){\n';
            v += '      $privacy_pref_optout.checked = true;\n';
            v += '    }\n';
            v += '  } else {\n';
            v += '    $privacy_pref_optin.checked = true;\n';
            v += '  }\n';
            v += '  \n';
            v += '  var callBack = function () {\n';
            v += '    if ($privacy_pref_optin.checked) {\n';
            v += '      utag.gdpr.setConsentValue(1);\n';
            v += '      \n';
            v += '      setTimeout(function (){if (window.utag && window.utag.udoname || window.utag_data) {utag.view(window[window.utag && window.utag.udoname || "utag_data"]);}},0);\n';
            v += '    } else if ($privacy_pref_optout.checked) {\n';
            v += '      utag.gdpr.setConsentValue(0);\n';
            v += '    } else {\n';
            v += '      return;\n';
            v += '    }\n';
            v += '    closePrompt();\n';
            v += '  };\n';
            v += '  var closePrompt = function(){\n';
            v += '    $modal.style.display = "none";\n';
            v += '  };\n';
            v += '  if (document.addEventListener) {\n';
            v += '    $el.addEventListener("click", callBack, false);\n';
            v += '    $closeBtn.addEventListener("click", closePrompt, false);\n';
            v += '  } else if (document.attachEvent) {\n';
            v += '    $el.attachEvent("click", callBack);\n';
            v += '    $closeBtn.attachEvent("click", closePrompt);\n';
            v += '  } else {\n';
            v += '    $el.onclick = callBack;\n';
            v += '    $closeBtn.onclick = closePrompt;\n';
            v += '  }\n';
            v += '}());';
						return v;
					}
				};
				return {
					html: '<div class="privacy_prompt explicit_consent"> \n   <div class="privacy_prompt_content"> \n     <h1>{{title}}</h1> \n     <p>{{message}}</p> \n     <div class="option_set"> \n       <div class="option"> \n         <input type="radio" id="privacy_pref_optin" name="privacy_pref" value="optin"> \n         <label for="privacy_pref_optin">{{opt_in}}</label> \n       </div> \n       <div class="option"> \n         <input type="radio" id="privacy_pref_optout" name="privacy_pref" value="optout"> \n         <label for="privacy_pref_optout">{{opt_out}}</label> \n       </div> \n     </div> \n   </div> \n   <div class="privacy_prompt_footer"> \n     <div id="consent_prompt_submit" class="button right"> \n       {{confirmation_button}} \n     </div> \n   </div> \n   <div class="close_btn_thick"></div> \n </div>',
					javascript: _view.js(),
					css: '.privacy_prompt { \n     position: absolute; \n     width: 600px; \n     top: 100px; \n     left: 50%; \n     margin-left: -300px; \n     text-align: left; \n     border: 1px solid #CCC; \n     border-radius: 4px; \n     background-color: #FFF; \n     color: #444; \n     font-size: 14px; \n     z-index: 1000; \n } \n  \n .privacy_prompt a { \n     text-decoration: none; \n     color: #0077bf; \n } \n  \n .privacy_prompt_content { \n     padding: 20px; \n     font-size: 0.9em; \n } \n  \n .privacy_prompt h1 { \n     font-size: 1.3em; \n     color: #444; \n     font-weight: 400; \n } \n  \n .privacy_prompt .option { \n     margin: 10px 0px; \n     color: #444; \n } \n  \n .privacy_prompt_footer { \n     padding: 0px 20px 20px 20px; \n     overflow: auto; \n } \n  \n .privacy_prompt_footer a { \n     font-size: 0.9em; \n } \n  \n .privacy_prompt_footer .button { \n     font-size: 1.0em; \n     border: 1px solid #CCC; \n     padding: 4px 15px; \n     min-width: 50px; \n     text-align: center; \n     border-radius: 4px; \n     background-color: #EEE; \n     box-shadow: inset 0px 1px 4px rgba(255, 255, 255, 1); \n     text-shadow: 1px 1px 3px rgba(255, 255, 255, 1); \n     color: #000; \n     cursor: pointer; \n } \n  \n .privacy_prompt .button.right { \n     float: right; \n } \n  \n .privacy_prompt .button.left { \n     float: left; \n } \n  \n .privacy_prompt > .close_btn_thick { \n     position: absolute; \n     display: block; \n     top: 10px; \n     right: 10px; \n     text-decoration: none; \n     text-shadow: 0 1px 0 #fff; \n     color: #777; \n     font: 14px/100% arial, sans-serif; \n     cursor: pointer; \n } \n  \n .privacy_prompt > .close_btn_thick:after { \n     content: "\\2716";  \n } \n  \n .privacy_prompt .logo { \n     float: right; \n } \n  \n .privacy_prompt table { \n     padding: 0px; \n     border-collapse: collapse; \n } \n  \n .privacy_prompt table tr { \n } \n  \n .privacy_prompt table th { \n     background-color: #FAFAFA; \n     border-bottom: 1px solid #EEE; \n     margin: 0px; \n     padding: 5px 8px; \n     font-weight: 400; \n     text-align: center; \n } \n  \n .privacy_prompt table td { \n     vertical-align: top; \n     padding: 10px 8px 5px 8px; \n } \n  \n .privacy_prompt table tr td:first-child { \n     min-width: 120px; \n     font-weight: 600; \n     color: #666; \n } \n  \n .privacy_prompt table tr td:last-child { \n     text-align: center; \n     min-width: 100px; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle { \n     opacity: 0; \n     position: absolute; \n     left: -99999px; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label { \n     height: 24px; \n     line-height: 24px; \n     background-color: #ccc; \n     padding: 0px 16px; \n     border-radius: 16px; \n     display: inline-block; \n     position: relative; \n     cursor: pointer; \n     -moz-transition: all 0.25s ease-in; \n     -o-transition: all 0.25s ease-in; \n     -webkit-transition: all 0.25s ease-in; \n     transition: all 0.25s ease-in; \n     -moz-box-shadow: inset 0px 0px 2px rgba(0, 0, 0, 0.5); \n     -webkit-box-shadow: inset 0px 0px 2px rgba(0, 0, 0, 0.5); \n     box-shadow: inset 0px 0px 2px rgba(0, 0, 0, 0.5); \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label:before, .privacy_prompt input[type="checkbox"].toggle + label:hover:before { \n     content: " "; \n     position: absolute; \n     top: 2px; \n     left: 2px; \n     width: 26px; \n     height: 20px; \n     background: #fff; \n     z-index: 2; \n     -moz-transition: all 0.25s ease-in; \n     -o-transition: all 0.25s ease-in; \n     -webkit-transition: all 0.25s ease-in; \n     transition: all 0.25s ease-in; \n     -moz-border-radius: 14px; \n     -webkit-border-radius: 14px; \n     border-radius: 14px; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label .off, .privacy_prompt input[type="checkbox"].toggle + label .on { \n     color: #fff; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label .off { \n     margin-left: 20px; \n     display: inline-block; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label .on { \n     display: none; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label .off { \n     display: none; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label .on { \n     margin-right: 20px; \n     display: inline-block; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label, .privacy_prompt input[type="checkbox"].toggle:focus:checked + label { \n     background-color: #3278c0; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label:before, .privacy_prompt input[type="checkbox"].toggle:checked + label:hover:before, .privacy_prompt input[type="checkbox"].toggle:focus:checked + label:before, .privacy_prompt input[type="checkbox"].toggle:focus:checked + label:hover:before { \n     background-position: 0 0; \n     top: 2px; \n     left: 100%; \n     margin-left: -28px; \n } \n  .privacy_prompt input[type="checkbox"].toggle + label { \n    overflow: hidden;\n     text-overflow: ellipsis;\n     max-height: 24px;\n     height: 24px;\n     }\n @media (max-width: 780px) {\n    #__tealiumGDPRecModal .privacy_prompt {\n     width: 90%;\n     margin: 0 auto;\n     left: 5%;\n    }\n }\n  \n'
				};
			}

			// --------------------------------------------------------
			function _constructBasicEmptyExplicitPreferenceLanguage() {
				return {
					common_tokens: {
						title: "",
						message: "",
						confirmation_button: ""
					},
					custom_tokens: {},
					isDefault: false
				}
			}

			function _findRemoveItem(strArray, item) {
				var tmp = _util.toCleanArray(strArray),
					idx = tmp.indexOf(item);
				if (idx > -1) {
					tmp.splice(idx, 1);
				}
				if (tmp[0] === "") {
					tmp.splice(0, 1);
				}
				return tmp.join();
			}

			function _addItem(strArray, item) {
				var tmp = _util.toCleanArray(strArray),
					idx = tmp.indexOf(item);
				if (idx > -1) {
					return strArray;
				}
				tmp.push(item);
				if (tmp[0] === "") {
					tmp.splice(0, 1);
				}
				return tmp.join();
			}

			// --------------------------------------------------------
			function _canDeleteLanguage() {
				return _.size(_saveObj.languages) > 1;
			}

			// --------------------------------------------------------
			var _eventHandlers = {

				// --------------------------------------------------------
				//----------------------------------------------------------------------------------------------------------------
				// Handles the click to launch the dialog to create a new custom parameter.
				//----------------------------------------------------------------------------------------------------------------
				onRemoveCustomParameterBtnClick: function (e) {
					var token = $(e.currentTarget).attr("data-token");

					if (!token) {
						return;
					}

					for (var i = 0; i < _saveObj.custom_tokens_definitions.length; i++) {
						if (_saveObj.custom_tokens_definitions[i].token === token) {
							_saveObj.custom_tokens_definitions.splice(i, 1);
							break;
						}
					}

					//Add Token to each language
					_.forEach(_saveObj.languages, function addTokenToLang(language) {
						delete language.custom_tokens[token];
					});

					_panels.tab_explicit.render();

				},

				// --------------------------------------------------------
				//----------------------------------------------------------------------------------------------------------------
				// Handles the click to launch the dialog to create a new custom parameter.
				//----------------------------------------------------------------------------------------------------------------
				onAddNewCustomParameterBtnClick: function () {
					utui.privacyManagement.modals.addNewCustomParameterDialog.show(_eventHandlers.onAddNewCustomParameter);
				},

				//----------------------------------------------------------------------------------------------------------------
				// Validate and add a new custom paramter.
				//----------------------------------------------------------------------------------------------------------------
				onAddNewCustomParameter: function () {
					var titleInput = $('#dialog_new_custom_parameter_title').val().trim(),
						$addNewCustomParameter_error = $('#addNewCustomParameter_error'),
						newParameterKey,
						errorMsg = null;

					$addNewCustomParameter_error.css('display', 'none');

					if (titleInput.length > 0) {
						$addNewCustomParameter_error.empty();
						var invCharRgx = /[^a-z0-9\s]/gi;
						if (titleInput.match(invCharRgx)) {
							errorMsg = localize.t('tiq.dashboard.privacy_management.account_defaults.parameter_invalid_chars');
						} else {
							newParameterKey = titleInput.toLowerCase().replace(/[^a-z0-9\s]/g, '').trim().replace(/\s{2,}/g, '_').replace(/\s/g, '_');
							_.each(_saveObj.custom_tokens_definitions, function (obj) {
								if (obj.token === newParameterKey) {
									errorMsg = localize.t('tiq.dashboard.privacy_management.account_defaults.parameter_already_exists');
								}
							});
						}


						if (errorMsg === null) {
							_saveObj.custom_tokens_definitions.push({title: titleInput, token: newParameterKey});
							_.each(_saveObj.languages, function (langObj, langKey) {
								_saveObj.languages[langKey].custom_tokens[newParameterKey] = "";
							});
							_panels[_selectedTab].render();
						} else {
							$addNewCustomParameter_error.append(errorMsg);
							$addNewCustomParameter_error.css('display', 'block');
						}
					}

					return errorMsg;

				},

				// --------------------------------------------------------
				onTopNavMenuClick: function (event) {
					event.preventDefault();

					_destoryEditors();

					var $el = $(this),
						tabId = $el.attr('id');

					_selectedTab = tabId;

					$modalDialog.find('.wizard_tab').removeClass('activeTab');
					$el.addClass('activeTab');

					// Render selected tab panel
					_panels[tabId].render();
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				onAddLanguageBtnClick: function (e) {
					if ($(e.currentTarget).hasClass("ui-state-disabled")) {
						return;
					}
					utui.privacyManagement.modals.addNewLanguageDialog.show(_eventHandlers.onAddNewLanguage, _.keys(_saveObj.languages));
				},

				// --------------------------------------------------------
				onAddNewLanguage: function () {
					var selected = $("#dialog_new_language_language").select2("data");
					if (!selected) {
						return null;
					}
					var langId = selected.id;

					_saveObj.languages[langId] = _constructBasicEmptyExplicitPreferenceLanguage();
					_.forEach(_saveObj.custom_tokens_definitions, function addCustomTokens(token) {
						_saveObj.languages[langId].custom_tokens[token.token] = "";
					});
					_selectedLanguage = langId;
					_panels.tab_explicit.render();
					return true;
				},

				// --------------------------------------------------------
				onLanguageItemClick: function (e) {
					var $el = $(e.currentTarget);
					_selectedLanguage = $el.attr('data-id');

					// re-draw content body and bind event handlers
					_panels.tab_explicit.render();
				},

				// --------------------------------------------------------
				onSetIsDefaultLanguage: function (e) {
					var $el = $(e.currentTarget);
					var isChecked = $el.prop('checked');

					if (isChecked) {
						for (var i in _saveObj.languages) {
							if (!_saveObj.languages.hasOwnProperty(i)) {
								continue;
							}
							_saveObj.languages[i].isDefault = (i === _selectedLanguage);
						}

					} else { // unset isDefault for selected language
						//TODO what SHOULD we do? If we are unchecking then you must do it from another lang
						// _saveObj.languages[_selectedLanguage].isDefault = false;
						$el.prop('checked', true);
					}
					_panels.tab_explicit.render();
				},

				// --------------------------------------------------------
				onDeleteLanguageBtnClick: function (e) {
					var $el = $(e.currentTarget);

					if (!$el.hasClass('ui-state-disabled')) {
						if (_canDeleteLanguage()) {
							var language = _util.getLanguageOptionList(_selectedLanguage);
							utui.privacyManagement.modals.removeLanguageConfirmDialog.show(language.label, _eventHandlers.onConfirmDeleteLanguageBtnClick);
						}
					}
				},

				// --------------------------------------------------------
				onConfirmDeleteLanguageBtnClick: function () {
					// delete language from _saveObj and re-render
					delete _saveObj.languages[_selectedLanguage];
					_selectedLanguage = _util.getDefaultLanguage(_saveObj.languages);
					_saveObj.languages[_selectedLanguage].isDefault = true;
					_panels.tab_explicit.render();
				},

				// --------------------------------------------------------
				onPreviewLanguageBtnClick: function () {

					var lang = (_selectedTab === "tab_explicit") ? _selectedLanguage : _util.getDefaultLanguage(_saveObj.languages);
					_util.preview.openRender(_util.preview.constants.EXPLICIT, _saveObj, lang, localize.t('tiq.dashboard.privacy_management.resource.explicit.title_text'));
				},

				// --------------------------------------------------------
				onFieldInputChange: function (e) {

					var $el = $(e.currentTarget),
						key = $el.attr("data-key"),
						type = $el.attr("data-type"),
						data = _saveObj.languages[_selectedLanguage][type];

					if (!data) {
						if ($el.attr("name") === "pm_event_logging") {
							_saveObj.event_log = $(e.currentTarget).val();
						}
					} else {
						data[key] = $(e.currentTarget).val();
					}

				},

				// --------------------------------------------------------
				onRestoreDefaultBtnClick: function () {
					utui.privacyManagement.modals.restoreDefaultContentConfirmDialog.show(function () {
						_destoryEditors();
						_saveObj.content = _constructDefaultContent();
						_panels.tab_customization.render();
					});
				},

				// --------------------------------------------------------
				onBtnCancelClick: function () {
					_destoryEditors();
          $.ui.dialog.maxZ = _maxZ;
					utui.ui.dialog.dispose(_namespace);
					utui.util.pubsub.unsubscribe(utui.constants.privacy_management.ACCOUNT_DEFAULTS_UPDATED, _refreshContentTab);
				},

				// --------------------------------------------------------
				onOmitTagBtnClick: function () {
					var $select = $("#" + _namespace + "_manage_select"),
						selectData = $select.select2("data");
					if (!selectData) {
						return;
					}
					var id = selectData.id.split("_")[1],
						tag = utui.data.manage[id];
					$("tbody", "#pm_explicit_ommited_tags")
						.append(utui.ui.table.createRow(tag.tag_id + '_' + tag.id, [
							'<div class="loadRuleListItem status' + (tag.status === "active" ? "On" : "Off") + '"><div class="loadRuleListItemTitle"> ' + tag.tag_name + '</div></div>',
              utui.util.safeEscape(tag.title),
							tag.id,
							'<button class="btn i-color-delete js-remove-tag-from-omitted-btn" data-tag_id="' + tag.tag_id + '_' + tag.id + '" data-id="' + tag.id + '" ><i class="icon-remove"></i>&nbsp;' + localize.t('tiq.dialog.button.remove') + '</button>']));
					_saveObj.omittedTags = _addItem(_saveObj.omittedTags, "" + id);
					$("option[value='" + selectData.id + "']", $select).remove();
					$select.select2("val", ""); //Clear the select box

				},

				// --------------------------------------------------------
				onRemoveTagFromOmittedBtnClick: function () {
					var data = $(this).data();
					$('#' + data.tag_id).remove();

					_saveObj.omittedTags = _findRemoveItem(_saveObj.omittedTags, "" + data.id);
					var tagObj = utui.data.manage[data.id];
					$("#" + _namespace + "_manage_select").append('<option value="' + tagObj.tag_id + ((tagObj.id) ? '_' + tagObj.id : '') + '" data-id="' + (tagObj.id || "") + '" data-tag-name="' + tagObj.tag_name + '">' + tagObj.title + '</option>');

				},

				// --------------------------------------------------------
				onLaunchGlobalResourcesClick: function () {
					utui.privacyManagement.accountDefaults.show();
				},

				// --------------------------------------------------------
				onAccountOverrideBtnClick: function () {
					var $toggle = $("span", "#pr_status_toggle");

					function callback(state) {
						$toggle
							.toggleClass("container_status_inactive")
							.toggleClass("container_status_active");
              utui.util.pubsub.publish(utui.constants.privacy_management.explicit.UPDATED);
						_saveObj.isAccountOverride = state;
					}

					if (_saveObj.isAccountOverride) {
						callback(false);
						_panels.tab_explicit.render();
					} else {
						_public.modals.linkToPrivacyResources.show(function () {
							callback(true);
							_request.getAccountLevelPrivacySettings(_refreshContentTab);
						});
					}
				}
    
			};

			// --------------------------------------------------------
			var _bindUI = {
				// --------------------------------------------------------
				topNavMenu: function () {
					$modalDialog.find('.wizard_tab').safeOn('click', _eventHandlers.onTopNavMenuClick);
				},

				// --------------------------------------------------------
				contextItems: function () {
					$modalDialog.find('#' + _namespace + '_addLanguageBtn').safeOn('click', _eventHandlers.onAddLanguageBtnClick);
					$modalDialog.find('.js-item-language').safeOn('click', _eventHandlers.onLanguageItemClick);
				},

				// --------------------------------------------------------
				headerItems: function () {
					// tab_explicit
					$modalDialog.find('#' + _namespace + '_setIsDefaultLanguageCkbx').on('change', _eventHandlers.onSetIsDefaultLanguage);
					$modalDialog.find('#' + _namespace + '_deleteLanguageBtn').safeOn('click', _eventHandlers.onDeleteLanguageBtnClick);
					$modalDialog.find('#' + _namespace + '_previewLanguageBtn').safeOn('click', _eventHandlers.onPreviewLanguageBtnClick);
					// Add tooltip to the Delete Language button
					var tooltipObj = {};
					tooltipObj[_namespace + '_deleteLanguageBtn'] = {
						gravity: 'ne'
					};
					utui.util.addTooltip(tooltipObj);

					// tab_customization
					$modalDialog.find('#' + _namespace + '_restoreDefaultBtn').safeOn('click', _eventHandlers.onRestoreDefaultBtnClick);
				},

				// --------------------------------------------------------
				formFields: function () {
					$modalDialog.find('input:not(.js-not-form-body)').safeOn('change', _eventHandlers.onFieldInputChange);
					$modalDialog.find('textarea:not(.js-not-form-body)').safeOn('change', _eventHandlers.onFieldInputChange);
				},

				// --------------------------------------------------------
				tabOptionsBody: function () {

					$modalDialog.find('#' + _namespace + '_manage_select').select2({
						placeholder: localize.t('tiq.dashboard.privacy_management.explicit_preferences.select_a_tag'),
						dropdownCssClass: 'tags-drop-down',
						formatResult: _view.tab_options.tagResultOptions,
						matcher: function (term, text, option) {
							return text.toUpperCase().indexOf(term.toUpperCase()) >= 0 || option.val().toUpperCase().indexOf(term.toUpperCase()) >= 0;
						}
					});
					$modalDialog.find('#' + _namespace + '_omitTagBtn').safeOn('click', _eventHandlers.onOmitTagBtnClick);
					$modalDialog.safeOn('click', '.js-remove-tag-from-omitted-btn', _eventHandlers.onRemoveTagFromOmittedBtnClick)
				},

				// --------------------------------------------------------
				tabConsentRules: function () {

					$("#privacy_management_explicit_intro_nav_back").safeOn("click", function () {
						_panels.tab_consentRules.wizardPanelsRender($(this).attr("data-step"));
					});
					$("#privacy_management_explicit_intro_nav_continue").safeOn("click", function () {
						var action = $(this).attr("data-action");

						if (!action) {
							_panels.tab_consentRules.wizardPanelsRender($(this).attr("data-step"));
						} else if (action === "all_pages") {
							$("div.loadRuleList input", "#" + _namespace + "_dialogContent").removeAttr('checked');
							$(".loadRuleAllCheck input", "#" + _namespace + "_dialogContent").click();
							_panels.tab_consentRules.helperPanel.hideHelp();
						} else {
							_view.tab_consentRules.generateLoadRule($(".privacy_management_guide_radios input:checked").val());
						}
					});

				}

			};

			// ------------------------------------
			var _panels = {
				// ------------------------------------
				tab_explicit: {
					// ------------------------------------
					render: function () {
						var slug = 'tab_explicit',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							$contextHeader = $content.find('.sidebar-header'),
							fieldCollection = _explicitInputFields.fieldset,
							context = utui.ui.template.contextBox(_view.tab_explicit.context(), _view.tab_explicit.contextTitle()),
							bodyHeader = _view.tab_explicit.contentBodyHeader(),
							content = _view.tab_explicit.contentBody(fieldCollection, slug),
							$finishBtn = $('#' + _namespace + '_finishBtn .ui-button-text'),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text'),
							accordionExpanded = false;

						// show context panel
						var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
						$accordionContainer.addClass('has-sidebar');
						$accordionContainer.find('.sidebar-container').show();

						$header
							.empty()
							.append(bodyHeader);

						$body
							.empty()
							.append(content);

						$context
							.empty()
							.append(context);

						$context.find("dd").css("margin", "0px");

						$contextHeader
							.empty()
							.append(_view.tab_explicit.sideBarHeader());

						$applyBtn.parent().hide();

						if (_isNew) {
							$applyBtn.parent().show();
							$applyBtn.text(localize.t('tiq.dialog.button.next'));
						} else {
              $finishBtn
                .text(localize.t('tiq.dialog.button.apply'))
                .parent().show();
						}

						//Override turned on
						if (_saveObj.isAccountOverride || !_canDeleteLanguage()) {
							//disabled, make defualt, delete, add
							var deletBtn = $("#" + _namespace + '_deleteLanguageBtn');

							$("#" + _namespace + '_setIsDefaultLanguageCkbx')
								.addClass("ui-state-disabled")
								.prop("disabled", true);

							deletBtn
								.addClass("ui-state-disabled")
								.prop("disabled", true);

							if (_saveObj.isAccountOverride) {
								$("#" + _namespace + '_addLanguageBtn')
									.addClass("ui-state-disabled")
									.prop("disabled", true);
							} else {
								deletBtn
									.prop("title", utui.tooltip.privacy_management.delete_language_disabled);
							}
						}


						_bindUI.contextItems();
						_bindUI.headerItems();
						_bindUI.formFields();

						// Set values from _saveObj
						for (var i in fieldCollection) {
							if (!fieldCollection.hasOwnProperty(i)) {
								continue;
							}
							var val = _saveObj.languages[_selectedLanguage].common_tokens[i],
								fieldType = fieldCollection[i].fieldType;
							if (val) {
								if (fieldType !== 'checkboxGroup') {
									$body.find('#' + _namespace + '_explict_' + i).val(val);
								} else {
									for (var j = 0; j < val.length; j++) {
										$body.find('[name="tab_explicit_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
									}
								}
							}
						}

						_.forEach(_saveObj.custom_tokens_definitions, function (tokenObj) {

							var token = tokenObj.token,
								val = _saveObj.languages[_selectedLanguage].custom_tokens[token];
							if (val) {
								$body.find('#' + _namespace + '_tokens_' + token).val(val);
							}
						});

						utui.ui.enableAccordionElements(_namespace + '_' + slug);

						var $custom = $body.find('.js-accordion-container').last();

						//If there are values entered open the collapse
						if ($('.js-custom-param').filter(function () {
							return $(this).val();
						}).length > 0) {
							if (!$custom.find('.utui-container.js-accordion-container').hasClass('active')) {
								$custom.find('.utui-accordion-title-bar').trigger('click');
								accordionExpanded = true;
							}
						}

						//If there are additional items show the


						var testObj = (((utui.data || {privacy_management: {}}).privacy_management || {explicit: {}}).explicit || {custom_tokens_definitions: {}}).custom_tokens_definitions;
						if (!utui.util.objectEquals(testObj, _saveObj.custom_tokens_definitions)) {
							if (!accordionExpanded && !$custom.find('.utui-container.js-accordion-container').hasClass('active')) {
								$custom.find('.utui-accordion-title-bar').trigger('click');
							}
						}

						$("#pm_explict_add_param").safeOn("click", _eventHandlers.onAddNewCustomParameterBtnClick);
						$(".pm_delete_custom_param").safeOn("click", _eventHandlers.onRemoveCustomParameterBtnClick);
						$("#pr_status_toggle").safeOn("click", _eventHandlers.onAccountOverrideBtnClick);
						$("#pr_link_launch").safeOn("click", _eventHandlers.onLaunchGlobalResourcesClick);

					}
				},
				// ------------------------------------
				tab_customization: {
					// ------------------------------------
					render: function () {
						var slug = 'tab_customization',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							fieldCollection = _customizationInputFields.fieldset,
							bodyHeader = _view.tab_customization.contentBodyHeader(),
							content = _view.tab_customization.contentBody(fieldCollection, slug),
							$finishBtn = $('#' + _namespace + '_finishBtn .ui-button-text'),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text');

						// hide context panel
						var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
						$accordionContainer.removeClass('has-sidebar');
						$accordionContainer.find('.sidebar-container').hide();

						$header
							.empty()
							.append(bodyHeader);

						$body
							.empty()
							.append(content);

						$applyBtn.parent().hide();

						if (_isNew) {
							$applyBtn.parent().show();
							$applyBtn.text(localize.t('tiq.dialog.button.next'));
						} else {
              $finishBtn
                .text(localize.t('tiq.dialog.button.apply'))
                .parent().show();
						}

						_bindUI.headerItems();
						_bindUI.formFields();

						_editors["html"] = _util.createAceEditor($("#html-ace-editor"), "html", _saveObj.content.html, function () {
							_saveObj.content.html = _editors["html"].getValue();
						});
						_editors["css"] = _util.createAceEditor($("#css-ace-editor"), "css", _saveObj.content.css, function () {
							_saveObj.content.css = _editors["css"].getValue();
						});
						_editors["javascript"] = _util.createAceEditor($("#js-ace-editor"), "javascript", _saveObj.content.javascript, function () {
							_saveObj.content.javascript = _editors["javascript"].getValue();
						});

						_editors["css"].focus();

						$(".privacy_management_ace_editor_exapnd").safeOn("click", function () {
							var type = $(this).data("type");
							_util.aceEditorModal.render(_editors[type], type)
						});

						// Set values from _saveObj
						for (var i in fieldCollection) {
							if (!fieldCollection.hasOwnProperty(i)) {
								continue;
							}
							var val = _saveObj[i],
								fieldType = fieldCollection[i].fieldType;
							if (val) {
								if (fieldType !== 'checkboxGroup') {
									$body.find('#' + _containerName + i).val(val);
								} else {
									for (var j = 0; j < val.length; j++) {
										$body.find('[name="' + _containerName + i + '"][value="' + val[j] + '"]').prop('checked', true);
									}
								}
							}
						}
					}
				},
				// ------------------------------------
				tab_consentRules: {
					helperPanel: null,

					wizardPanels: [
						{
							title: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_rule_creation_guide_title'),
							body_text: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_rule_creation_guide_text'),
							body: '<button id="' + _namespace + '_explicit_consent_rules_begin" style="margin-left: 30%;margin-top: 20px;" class="btn btn-small">' +
							localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_rule_creation_guide_button') +
							'</button>'
						},
						{
							title: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_all_title'),
							body_text: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_all_text'),
							feildSet: [
								{
									id: '_step1_radio_yes',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_all_radio_yes'),
									value: 'Yes',
									defaultValue: false
								},
								{
									id: '_step1_radio_no',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_all_radio_no'),
									value: 'No',
									defaultValue: true
								}
							]
						},
						{
							title: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_geo_title'),
							feildSet: [
								{
									id: '_step2_radio_domain',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_geo_radio_tld'),
									value: 'tld',
									defaultValue: false
								},
								{
									id: '_step2_radio_subdomain',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_geo_radio_subdomain'),
									value: 'subdomain',
									defaultValue: false
								},
								{
									id: '_step2_radio_folder',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_geo_radio_folder'),
									value: 'path',
									defaultValue: false
								},
								{
									id: '_step2_radio_no',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_geo_radio_no'),
									value: 'No',
									defaultValue: true
								}
							]
						},
						{
							title: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_data_var_title'),
							feildSet: [
								{
									id: '_step3_radio_yes',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_data_var_radio_yes') + "&nbsp;" +
									utui.loadrules.view.getInputSelect.call(utui.loadrules.view, _namespace + "_define_select"),
									value: 'define',
									defaultValue: false
								},
								{
									id: '_step3_radio_no',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr_data_var_radio_no'),
									value: 'own',
									defaultValue: true
								}
							]
						}
					],

					wizardPanelsRender: function (step) {
						step = parseInt(step, 10);
						var panel = _panels.tab_consentRules.wizardPanels[step];

						if (!panel) {
							return;
						}

						$("#privacy_management_explicit_intro_nav_back").attr("data-step", step - 1);
						$("#privacy_management_explicit_intro_nav_continue")
							.attr("data-step", step + 1)
							.attr("data-action", "")
							.text(localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.continue'));

						if (step !== 0) {
							$(".privacy_management_explicit_intro_body").addClass("privacy_management_guide_spliter");
							$(".privacy_management_explicit_intro_nav").show();
						} else {
							$(".privacy_management_explicit_intro_body").removeClass("privacy_management_guide_spliter");
							$(".privacy_management_explicit_intro_nav").hide();
						}

						if (step === (_panels.tab_consentRules.wizardPanels.length - 1)) {
							$("#privacy_management_explicit_intro_nav_continue")
								.attr("data-action", "create")
								.empty()
								.html('<i class="icon-magic success"></i>&nbsp;Create Rule');
						}


						$('#' + _namespace + '_explicit_consent_rules_header')
							.empty()
							.append(panel.title);

						$('#' + _namespace + '_explicit_consent_rules_body_text')
							.empty();

						if (panel.body_text) {
							$('#' + _namespace + '_explicit_consent_rules_body_text')
								.append(panel.body_text);
						}

						if (panel.body) {
							$('#' + _namespace + '_explicit_consent_rules_body')
								.empty()
								.append(panel.body);
						}
						if (panel.feildSet) {
							$('#' + _namespace + '_explicit_consent_rules_body')
								.empty()
								.append('<div class="privacy_management_guide_radios">' +
									utui.ui.template.form.radioItemView(_namespace + "_explicit_consent_rules_step" + step,
										"consent_rules_step" + step,
										"",
										panel.feildSet) + "</div>");
						}

						$('#' + _namespace + '_explicit_consent_rules_begin').safeOn("click", function () {
							_panels.tab_consentRules.wizardPanelsRender(1);
						});

						$(".privacy_management_guide_radios input[type='radio'], .privacy_management_guide_radios label").safeOn("click", function (e) {
							e.stopPropagation();
							var $el = $(this);
							if (e.currentTarget.tagName !== "INPUT") {
								$el = $(this).parent().find("input");
							}
							var val = $el.val().toLowerCase(),
								step = $el.attr("name").substr($el.attr("name").length - 5),
								$continue = $("#privacy_management_explicit_intro_nav_continue");

							if (val === "no") {
								$continue.attr("data-action", "").text(localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.continue'));
								return;
							}
							switch (step) {
								case "step1" :
									//Set to all pages
									$continue.attr("data-action", "all_pages").text(localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.set_all_pages'));
									break;
								case "step2" :
								case "step3" :
									$continue.attr("data-action", "create").empty().html('<i class="icon-magic success"></i>&nbsp;' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.create_rule'));
									break;
								default:
								//something
							}
						});

						dsapi.convertSelectListToSelect2(_namespace + "_define_select_inputselect");

					},

					// ------------------------------------
					render: function () {
						var $content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							$contextHeader = $content.find('.sidebar-header'),
							$finishBtn = $('#' + _namespace + '_finishBtn .ui-button-text'),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text');

						$header
							.empty()
							.append(_view.tab_consentRules.contentHeader());

						$contextHeader.empty();

						var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
						$accordionContainer.addClass('has-sidebar');
						//Hack to stop some weird shifting of divs
						(function IIFE($accordionContainer) {
							window.setTimeout(function () {
								$accordionContainer.find('.sidebar-container')
									.show()
									.css("min-height", $accordionContainer.css("height"))
									.css("max-height", $accordionContainer.css("height"));
							}, 0);

						}($accordionContainer));

						$body
							.empty()
							.append('<div class="validation-message bg-danger"></div>')
							.append('<div class="content-body">' + _view.tab_consentRules.contentBody() + '</div>');

						_view.tab_consentRules.loadRulesPanel.wizard_loadrulePanel.init();

						$context
							.empty()
							.append(utui.ui.template.contextBox(
								_view.tab_consentRules.contextConsentRules(),
								'<i class="icon-warning-sign" style="color:orange;"></i>&nbsp;' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.please_note'),
								'<button style="width: 90%; margin-top: 10px;" class="btn btn-small" ' +
								'onclick="utui.help.openCommunityLink(\'' + common.community.explict_consent_consent_rules + '\'); return false;">' +
								'<i class="icon-external-link"></i> ' + localize.t('tiq.tags.help_docs') + '</button>'
							));

						$applyBtn.parent().hide();

						if (_isNew) {
							$applyBtn.parent().show();
							$applyBtn.text(localize.t('tiq.dialog.button.next'));
						} else {
							$finishBtn
								.text(localize.t('tiq.dialog.button.apply'))
								.parent().show();
						}

						_panels.tab_consentRules.helperPanel = utui.help.initHelpTab('privacy_management_explicit', [], {});
						_panels.tab_consentRules.wizardPanelsRender(0);
						_bindUI.tabConsentRules();
					}
				},
				// ------------------------------------
				tab_options: {
					// ------------------------------------
					render: function () {
						var slug = 'tab_options',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							eventLoggingConsentFieldset = _optionsInputFields.event_logging.fieldset,
							content = _view.tab_options.contentBody({
								eventLoggingConsentFieldset: eventLoggingConsentFieldset,
								slug: slug
							}),
							$applyBtn = $('#' + _namespace + '_applyBtn .ui-button-text'),
							$nextBtn = $('#' + _namespace + '_nextBtn'),
							$finishBtn = $('#' + _namespace + '_finishBtn .ui-button-text');

						// hide context panel
						var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
						$accordionContainer.removeClass('has-sidebar');
						$accordionContainer.find('.sidebar-container').hide();

						$header.empty();

						$body
							.empty()
							.append(content);

						$nextBtn.hide();

						_bindUI.formFields();
						_bindUI.tabOptionsBody();

						var check = (_saveObj.event_log === 'yes') ? 'pm_event_logging_config1' : 'pm_event_logging_config2';

						$('#' + check).prop("checked", true);
						$('#pm_event_logging_container').buttonset();

						// Set values from _saveObj
						for (var i in eventLoggingConsentFieldset) {
							if (!eventLoggingConsentFieldset.hasOwnProperty(i)) {
								continue;
							}
							var val = (_saveObj.hasOwnProperty(i)) ? '' + _saveObj[i] : '',
								fieldType = eventLoggingConsentFieldset[i].fieldType;
							if (val) {
								if (fieldType !== 'checkboxGroup') {
									if (fieldType !== 'select') {
										$body.find('#tab_options_' + i).val(val);

									} else {
										// set select2 value
										$body.find('#tab_options_' + i).select2('val', val);
									}

								} else {
									for (var j = 0; j < val.length; j++) {
										$body.find('[name="tab_options_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
									}
								}
							}
						}
            
            $applyBtn.parent().hide();
            
            if (!_isNew) {
              $finishBtn
                .text(localize.t('tiq.dialog.button.apply'))
                .parent().show();
            }
					}
				}
			};

			// --------------------------------------------------------
			var _view = {

				// --------------------------------------------------------
				modal: {
					// --------------------------------------------------------
					contentHeader: function () {
						var v = '';

						v += '<div id="tab_explicit" class="wizard_tab activeTab">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.content') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.configure_text_to_be_displayed') + '</p>';
						v += '</div>';

						v += '<div id="tab_customization" class="wizard_tab">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.customization') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.modify_css') + '</p>';
						v += '</div>';

						v += '<div id="tab_consentRules" class="wizard_tab">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.apply_privacy_restrictions') + '</p>';
						v += '</div>';

						v += '<div id="tab_options" class="wizard_tab activeTabLast">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.options') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.omit_tags') + '</p>';
						v += '</div>';

						return v;
					}
				},

				// --------------------------------------------------------
				tab_explicit: {
					_currentLang: "en",

					_tabConfigFieldsetCollection: [
						// ------------------------------------
						// User Interface Parameters
						{
							categoryTitle: localize.t('tiq.dashboard.privacy_management.explicit_preferences.user_interface_parameters'),
							categorySlug: "user_interface",
							fieldset: {
								title: {
									fieldType: 'text',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.title'),
									size: '64'
								},
								message: {
									fieldType: 'textarea',
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.message'),
									defaultValue: true
								},
								confirmation_button: {
									fieldType: 'text',
									size: 64,
									label: localize.t('tiq.dashboard.privacy_management.explicit_preferences.confirmation_button'),
									defaultValue: true
								}
							},
							isActive: true
						},
						// ------------------------------------
						// Custom Pararmeters
						{
							categoryTitle: localize.t('tiq.dashboard.privacy_management.explicit_preferences.custom_parameters'),
							categorySlug: "custom_parameters",
							info: localize.t('tiq.dashboard.privacy_management.explicit_preferences.custom_parameters_info', {
								link: '<a class="tealium-blue" href="' + common.community.explict_consent_custom_parameters + '" target="_blank">' + localize.t("tiq.learning_community") + '</a>'
							}),
							useTokens: true,
							isActive: false
						}
					],

					// --------------------------------------------------------
					contextTitle: function () {
						var v = '';

						v += '<div class="wizard-context-title">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.language');
						v += '<a href="#" id="' + _namespace + '_addLanguageBtn" class="btn i-color-add btn-mini alignright"><i class="icon-plus"></i> ' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.add') + '</a>';
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					context: function () {
						var lang = null;
						var v = '';

						v += '<ul class="wizard-context-ul" id="' + _namespace + '_listLanguages">';
						// loop thru assigned languages

						if (_saveObj && _saveObj.languages) {
							var sortedLang = _util.getLanguagesSortedByName(_.keys(_saveObj.languages));
							_.forEach(sortedLang, function (i) {
								lang = _util.getLanguageOptionList(i);
								if (lang) {
									v += '  <li class="js-item-language' + ((lang.value === _selectedLanguage) ? ' selected' : '') + '" data-id="' + lang.value + '">';
									v += '    <a href="#"><span title="' + lang.label + ' (' + lang.value + ')">';
									if (_saveObj.languages[i].isDefault) {
										v += '<i class="icon-ok"></i>';
									} else {
										v += '<span class="small-hidden-span"></span>';
									}
									v += '&nbsp;' + lang.label + ' (' + lang.value + ')</span></a>';
									v += '  </li>';
								}
							});
						}
						v += '</ul>';

						return v;
					},

					// --------------------------------------------------------
					contentBodyHeader: function () {
						var language = _util.getLanguageOptionList(_selectedLanguage);
						var isDefault = _saveObj.languages[_selectedLanguage].isDefault;
						var v = '';

						v += '<div style="background-color: #F8F8F8; border-bottom: 1px solid #BBB; padding: 10px;">';
						v += '  <span class="js-selected-lang title">' + language.label + ' (' + language.value + ')</span>';
						v += '  <div class="alignright" style="margin-top: -4px;">';
						v += '    <input class="js-not-form-body" id="' + _namespace + '_setIsDefaultLanguageCkbx" type="checkbox"' + ((isDefault === true) ? ' checked' : '') + ' /> <label for="' + _namespace + '_setIsDefaultLanguageCkbx">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.makeDefaultLanguage') + '</label>';
						v += '    <a href="#" id="' + _namespace + '_deleteLanguageBtn" class="btn btn-mini i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>';
						v += '    <a href="#" id="' + _namespace + '_previewLanguageBtn" class="btn btn-mini i-color-add"><i class="icon-eye-open"></i> ' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.preview') + '</a>';
						v += '  </div>';
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					contentBody: function (fieldset, slug) {
						var fieldsetCollection = _render.getFieldSetView(_view.tab_explicit._tabConfigFieldsetCollection, "explict");

						return '<div id="' + _namespace + "_" + slug + '">' + fieldsetCollection + '</div>';
					},

					sideBarHeader: function () {
						var v = "";
						v += '<div>';
						v += '<div class="wizard-context-title" style="display: grid; grid-template-columns: 150px auto;">';
						v += '<div style="grid-column: 1/1;margin-top:2px">';
						v += localize.t('tiq.dashboard.privacy_management.explicit_preferences.privacy_resources');
						v += '</div>';
						v += '<div id="pr_status_toggle" title="' + utui.tooltip.privacy_management.toggle_account_level_privacy_resources_disabled + '" class=" js-status-toggle container_status_wrapper" style="grid-column: 2/2;margin-top:0px">';
						if (_saveObj.isAccountOverride === true) {
							v += '<span class="container_status_active"></span>';
						} else {
							v += '<span class="container_status_inactive"></span>';
						}
						v += '</div></div>';
						v += '</div>';
						v += '<div style="margin:10px">';
						var prLink;

						if (!utui.permissions.canManageAccount()) {
							prLink = localize.t('tiq.dashboard.privacy_management.explicit_preferences.privacy_resources');
						} else {
							prLink = '<a class="tealium-blue" href="#" id="pr_link_launch">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.privacy_resources') + '</a>';
						}

						v += localize.t('tiq.dashboard.privacy_management.explicit_preferences.notification_use_account_level', {
							prlink: prLink,
							tlclink: '<a class="tealium-blue" href="' + common.community.consent_global_resources + '" target="_blank">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.tealium_learning_community') + '</a>'
						});
						v += '</div></div>';
						return v;
					}

				},

				// --------------------------------------------------------
				tab_customization: {
					// --------------------------------------------------------
					contentBodyHeader: function () {
						var v = '';

						v += '<div style="background-color: #F8F8F8; border-bottom: 1px solid #BBB; padding: 10px;">';
						v += '  <span>' +
							'<i class="contextHelpLink icon-question-sign" onclick="common.utils.openWindow(\'' + common.community.explict_consent_customizations + '\')"></i> ' +
							localize.t('tiq.dashboard.privacy_management.explicit_preferences.learn_more_customization_privacy_prompts') +
							' <a class="tealium-blue" href="' + common.community.explict_consent_customizations + '" target="_blank">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.tealium_learning_community') + '</a>.</span>';
						v += '  <div class="alignright" style="margin-top: -4px;">';
						v += '    <a href="#" id="' + _namespace + '_restoreDefaultBtn" class="btn btn-mini i-color-delete"><i class="icon-undo"></i> ' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.restore_default') + '</a>';
						v += '    <a href="#" id="' + _namespace + '_previewLanguageBtn" class="btn btn-mini i-color-add"><i class="icon-eye-open"></i> ' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.preview') + '</a>';
						v += '  </div>';
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					contentBody: function (fieldset) {

						var fieldsetCollection = '';

						for (var key in fieldset) {
							if (!fieldset.hasOwnProperty(key)) continue;

							var field = fieldset[key];

							fieldsetCollection += '<div class="form-group">' +
								'<div class="row-fluid">' +
								'<div class="span1">' +
								'<div class="field-title">' + field.label + '</div>' +
								'</div>' +
								'<div class="span11">' +
								field.customRenderer.getView() +
								'<div class="field-description"></div>' +
								'</div>' +
								'</div>' +
								'</div>';
						}

						// fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, slug, true);

						var v = '';

						v += '<div class="container-fluid-small"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
						v += '</div></div></div>';

						return '<div class="section-padded-top-bottom">' + v + '</div>';
					}
				},

				// --------------------------------------------------------
				tab_consentRules: {
					// --------------------------------------------------------
					contentBody: function () {
						var cFramework = "";
						// cFramework += '<table class="wizard_table"><tr>';
						cFramework += '<div class="wizard_content_container">';
						cFramework += '     <div class="wizard_content">';
						cFramework += '     <div id="wizard_rules_wrapper"></div>';
						cFramework += '     </div>';
						cFramework += '</div>';
						// cFramework +=   '</tr></table>';

						return cFramework;

					},

					// --------------------------------------------------------
					contextConsentRules: function () {
						var v = '';

						v += '<ul>';
						v += '<li>';
						v += localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_context.1');
						v += '</li>';
						v += '<li>';
						v += localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_context.2');
						v += '</li></ul>';

						return v;
					},

					// --------------------------------------------------------
					loadRulesPanel: {
						wizard_loadrulePanel: function () {
							// ------------------------------
							var _containerId;

							// ------------------------------
							var _local_view = {
								// ------------------------------
								panelLayout: function () {
									var v = '';
									var checkedStatus = '';
									var checkedClass = 'icon-check-empty';

									if (_saveObj.loadrule === 'all') {
										checkedStatus = ' checked="checked"';
										checkedClass = ' icon-check';
									}

									// Print Load Rules header
									v += '<div class="wizardHeader">';
									v += '  <table class="wizardHeaderTable"><tr><td class="loadRulesHeaderTableLeft">';
									v += '    <div id="loadRuleAll">';
									v += '       <div class="loadRuleAllCheck"><input type="checkbox" ' + checkedStatus + ' name="loadRuleAll" value="statusActive"><i class="' + checkedClass + '"></i></div>';
									v += '       <div class="loadRuleAllTitle">' + localize.t('tiq.tags.load_on_all_pages') + '</div>';
									v += '    </div>';

									v += '  </td><td class="loadRulesHeaderTableRight">';
									v += '     <span class="btn btn-mini actionNewRule i-color-add"><i class="icon-plus"></i> Create Rule</span>';
									v += '  </td></tr></table>';
									v += '  <div class="noItemsToShow noItemsLoadRule">';
									v += '    <span>' + localize.t('tiq.tags.choose_load_on_all_pages') + '</span>';
									v += '    <i class="icon-hand-up"></i>';
									v += '  </div>';
									v += '</div>';

									v += '<div class="loadRuleList" style="max-height: 395px">';
									// List of load rules goes here
									v += '</div>';
									v += '<div class="wizardMessageBox">';
									v += '</div>';

									return v;
								}
							};

							// ------------------------------
							var _viewModel = {
								// ------------------------------
								renderPanel: function () {

									// Inject view
									$('#wizard_rules_wrapper', "#" + _namespace + "_dialogContent").html(_local_view.panelLayout());

									// render validation
									// Print out the list of Load Rules for the tag
									_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_printList(_containerId);

									var $allPagesCheckbox = $('#loadRuleAll').find('input[type=checkbox]');

									// Bind 'All Pages' option to toggle
									$allPagesCheckbox.safeBind('click', function () {
										var $el = $(this);

										if ($el.prop("checked")) {
											$('div.modal-body', '#explicit_preferences_dialog_addedit_dialogContent').find('.loadRuleList').find('input[type=checkbox]').prop('checked', false);
										} else {
											$el.prop('checked', true);
										}

										_saveObj.loadrule = "all";
										_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_setMLRmessage();
									});

									// Bind 'Create New Rule' button
									$('#wizard_rules_wrapper', "#" + _namespace + "_dialogContent").find('.actionNewRule').on('click', function () {
										utui.profile.disposeClickCapture();

										utui.loadrules.view.showAddMore('create', function (obj) {
											_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_printRuleHeader(_containerId, obj.loadruleid, true);
											_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_expandRule(_containerId, obj.loadruleid);
										})
									});
								}
							};

							// ------------------------------
							function render() {
								_viewModel.renderPanel();
							}

							// ------------------------------
							return {
								// ------------------------------
								init: function (container) {
									_containerId = container;

									render();
								}
							}
						}(),
						wizard_resetAllSections: function () {
							$('#wizard_config_wrapper', "#" + _namespace + "_dialogContent").hide();
							$('#wizard_rules_wrapper', "#" + _namespace + "_dialogContent").hide();
							$('#wizard_variables_wrapper', "#" + _namespace + "_dialogContent").hide();
							$('#wizard_config_tab', "#" + _namespace + "_dialogContent").removeClass('activeTab');
							$('#wizard_rules_tab', "#" + _namespace + "_dialogContent").removeClass('activeTab');
							$('#wizard_variables_tab', "#" + _namespace + "_dialogContent").removeClass('activeTab');
						},
						// ----------------------------------------------------------------
						onDefineAndMapNewDataSource: function (container) {
							var lastAddedVars = utui.define.lastAdded;

							// For each new page variable autoselect and add the new variable to the list
							for (var i in utui.util.getVars(lastAddedVars, 1)) {
								var ds = lastAddedVars[i];

								// Add Mapping to new page variable
								_view.tab_consentRules.loadRulesPanel.addMapping(container, {
									type: ds.type,
									key: ds.name
								}, true);
							}
						},
						wizard_LoadRules_setMLRmessage: function () {
							var checkedLoadRulesCount = $('div.modal-body .loadRuleList input:checked', '#explicit_preferences_dialog_addedit_dialogContent').length,
								$modalBodyMultiRules = $('div.modal-body .messageMultipleLoadRules', '#explicit_preferences_dialog_addedit_dialogContent')
							// Add message if load rule is disabled from being selected
							if (checkedLoadRulesCount > 1) {
								if ($modalBodyMultiRules.length < 1) {
									$('div.modal-body .wizardMessageBox', '#explicit_preferences_dialog_addedit_dialogContent').append('<div class="message messageMultipleLoadRules">' + localize.t('tiq.tags.tag_will_only_trigger') + '</div>');
									_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_resetHeight();
								}
								$('div.modal-body .wizardMessageBox .mlrCount', '#explicit_preferences_dialog_addedit_dialogContent').html(checkedLoadRulesCount);
							} else {
								if ($modalBodyMultiRules.length > 0) {
									$modalBodyMultiRules.remove();
									_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_resetHeight();
								}
							}
						},
						// ----------------------------------------------------------------
						wizard_LoadRules_resetHeight: function () {
							var $manageDialogWizard = $('div.modal-body', '#explicit_preferences_dialog_addedit_dialogContent'),
								$wizardMessageBox = $manageDialogWizard.find('.wizardMessageBox'),
								$loadRuleList = $manageDialogWizard.find('.loadRuleList'),
								messageLineHeight = $wizardMessageBox.css('line-height').replace('px', ''),
								messageCount = $wizardMessageBox.find('div.message').length,
								messageBoxHeight = (messageLineHeight * messageCount),
								loadRuleListMaxHeight = $loadRuleList.css('max-height').replace('px', ''),
								helperHeaderHeight = $("div#tabs-privacy_management_explicit").css("height").replace('px', ''),
								newLRlistHeight = loadRuleListMaxHeight - messageBoxHeight - helperHeaderHeight - 7;

							if (messageCount > 0) {
								$wizardMessageBox.show();
							} else {
								$wizardMessageBox.hide();
							}

							$loadRuleList.css('height', newLRlistHeight + 'px');
						},
						// ----------------------------------------------------------------
						wizard_LoadRules_printList: function (container) {
							var loadrules = utui.data.loadrules;

							// sort by title
							var sortedLoadrules = _.sortBy(_.toArray(loadrules), function (option) {
								return option.title.toLowerCase();
							});

							// Print out list of all current load rules in the wizard Load Rules view
							var numLoadrules = sortedLoadrules.length;
							for (var i = 0; i < numLoadrules; i++) {
								_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_printRuleHeader(container, sortedLoadrules[i].id, false);
							}

							// Display multiple load rule message if appropriate
							_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_setMLRmessage();

							// Hide 'Create A Load Rule' text if load rules exist
							if (numLoadrules > 0) {
								$('div.modal-body', '#explicit_preferences_dialog_addedit_dialogContent').find('.noItemsLoadRule').hide();
							}
						},
						wizard_LoadRules_expandRule: function (container, myLoadRuleID, bExpand) {

							var clickedItemID = 'loadRuleItem_' + myLoadRuleID;
							$('div.modal-body', "#explicit_preferences_dialog_addedit_dialogContent").find(".loadRuleListItem.expandedLR").each(function () {
								if ($(this).attr('ID') !== clickedItemID) {
									$(this).find('.loadRuleListItemContent').slideUp();
									$(this).removeClass('expandedLR');
								}
							});

							// Populate the Load Rule with content
							_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_printRuleContent(container, myLoadRuleID);
							var $manageDialogWizard = $('div.modal-body', '#explicit_preferences_dialog_addedit_dialogContent');
							if (bExpand) {
								$manageDialogWizard.find('#' + clickedItemID + ' .loadRuleListItemContent').show();
								$manageDialogWizard.find('#' + clickedItemID).addClass('expandedLR');
							} else {
								// Expand/Collapse load rule content
								$manageDialogWizard.find('#' + clickedItemID + ' .loadRuleListItemContent').slideToggle();
								$manageDialogWizard.find('#' + clickedItemID).toggleClass('expandedLR');
							}

							_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_setMLRmessage();

						},
						wizard_LoadRules_setAllPages: function () {

							var allPagesCheckbox = $('#loadRuleAll', "#" + _namespace + "_dialogContent").find('input[type=checkbox]');

							var countCheckedLoadRules = $('div.modal-body .loadRuleList input:checked', '#explicit_preferences_dialog_addedit_dialogContent').length;

							if (countCheckedLoadRules < 1) {
								allPagesCheckbox.prop('checked', true);
								_saveObj.loadrule = "all";
							} else {

								_saveObj.loadrule = _findRemoveItem(_saveObj.loadrule, "all");

								allPagesCheckbox.prop('checked', false);
							}

							_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_setMLRmessage();

						},
						// ----------------------------------------------------------------
						wizard_LoadRules_printRuleHeader: function (container, loadRuleID, newRuleFlag) {
							var loadRuleObj = utui.data.loadrules[loadRuleID],
								content = '',
								imported = loadRuleObj.imported,
								canModify = utui.labels.canUserModify(loadRuleObj.labels),
								lrStatus = 'statusOff',
								checkedStatus = '',
								checkedClass = 'icon-check-empty',
								checkboxStatus = '',
								tagStatus = 'tagStatusInactive',
								id = loadRuleObj.id,
								$manageDialogWizard = $('div.modal-body', '#explicit_preferences_dialog_addedit_dialogContent'),
								_constants = {
									ACTIVE: 'active'
								};

							if (loadRuleObj.status === _constants.ACTIVE) {
								lrStatus = 'statusOn';
							}

							//see if load rule has a comma marking a multiple load rule
							if (_saveObj.loadrule !== "all") {
								var tmp = _util.toCleanArray(_saveObj.loadrule);
								for (var iPos = 0; iPos < tmp.length; iPos++) {
									if (tmp[iPos] === "" + id) { //using == to help with type cohersion of string/number
										checkedStatus = ' checked="checked"';
										checkedClass = ' icon-check';
									}
								}
								tmp = null;
							}

							// Auto-check newly created load rules
							if (newRuleFlag) {
								var allPagesCheckbox = $('input:checkbox', '#loadRuleAll');
								checkedStatus = ' checked="checked"';
								checkedClass = ' icon-check';

								if (_saveObj.loadrule === "all") {
									_saveObj.loadrule = "" + id;
								} else {
									_saveObj.loadrule = _addItem(_saveObj.loadrule, "" + id);
								}

								allPagesCheckbox.prop('checked', false);
								$('.loadRuleAllCheck i', '#loadRuleAll').removeClass('icon-check').addClass('icon-check-empty');

								$manageDialogWizard.find('.noItemsLoadRule').hide();
							}

							// Add message if load rule is disabled from being selected
							if (loadRuleObj.status !== _constants.ACTIVE) {
								checkboxStatus = 'disabled';
								if ($manageDialogWizard.find('.messageInactiveLoadRule').length < 1) {
									$manageDialogWizard.find('.wizardMessageBox').append('<div class="message messageInactiveLoadRule">' + localize.t('tiq.tags.inactive_load_rules') + '</div>');
									_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_resetHeight();
								}
							}

							content += '<div id="loadRuleItem_' + id + '" class="loadRuleListItem ' + tagStatus + ' ' + lrStatus + '">';
							content += '    <div id="loadRuleItem_' + id + '_header" class="loadRuleListItemHeader">';
							content += '        <div class="loadRuleListItemCheck"><input id="loadRuleItemStatus_' + id + '" type="checkbox" ' + checkedStatus + ' name="loadRuleItemStatus_' + id + '" value="statusActive" ' + checkboxStatus + '><i class="' + checkedClass + '"></i></div>';
							content += '        <div class="loadRuleListItemTitle">' + utui.loadrules.dateRange.getLoadRuleTitle(loadRuleObj) + '</div>';
							content += '        <div class="loadRuleListItemButtons">';
							content += '            <a href="#" id="loadRuleItem_edit_' + id + '" class="btn btn-small actionEdit i-color-edit' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-edit"></i> ' + localize.t('tiq.tags.edit') + '</a>';
							content += '            <a href="#" id="loadRuleItem_copy_' + id + '" class="btn btn-small actionCopy i-color-copy' + (!canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-copy"></i> ' + localize.t('tiq.tags.copy') + '</a>';
							content += '            <a href="#" id="loadRuleItem_toggleActive_' + id + '" class="classIDtoggleActivate btn btn-small actionToggleActive i-color-enable' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-play"></i> ' + localize.t('tiq.tags.activate') + '</a>';
							content += '            <a href="#" id="loadRuleItem_toggleActive_' + id + '" class="classIDtoggleDeactivate btn btn-small actionToggleActive i-color-disable' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-pause"></i> ' + localize.t('tiq.tags.deactivate') + '</a>';
							content += '            <a href="#" id="loadRuleItem_delete_' + id + '" class="btn btn-small actionDelete i-color-delete' + (imported || !canModify ? ' ui-state-disabled ' : '') + '"><i class="icon-trash"></i> ' + localize.t('tiq.tags.delete') + '</a>';
							content += '        </div>';
							content += '    </div>';
							content += '    <div class="loadRuleListItemContent"></div>';
							content += '</div>';

							var $loadRuleItem = $manageDialogWizard.find('#loadRuleItem_' + id);

							// If load rule is not already printed, add it to the list
							if ($loadRuleItem.length < 1) {
								$manageDialogWizard.find('.loadRuleList').append(content);
								$loadRuleItem = $manageDialogWizard.find('#loadRuleItem_' + id);

							} else {
								// Replace the existing rule while maintaining the selection
								var bCheckedStatus = $loadRuleItem.is(':checked'),
									bExpanded = $loadRuleItem.hasClass('expandedLR');
								$loadRuleItem.replaceWith(content);
								$loadRuleItem = $manageDialogWizard.find('#loadRuleItem_' + id);
								//!! - converts truthy to true/false
								$loadRuleItem.prop('checked', !!bCheckedStatus);
								if (bExpanded) {
									_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_expandRule(container, id, 'expand');
								}
							}

							//User clicks on the Load Rule Item Bar
							$loadRuleItem.find('.loadRuleListItemHeader').safeBind('click', function () {
								var clickedItemID = this.id.replace('_header', ''),
									loadRuleID = clickedItemID.replace('loadRuleItem_', '');

								_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_expandRule(container, loadRuleID);
							});

							// User changes input checkbox
							$loadRuleItem.find('input[type=checkbox]').safeBind('click', function (event) {
								event.stopPropagation();
								var id = $(this).attr("name").split("_")[1];
								if ($(this).prop("checked")) {
									_saveObj.loadrule = _addItem(_saveObj.loadrule, "" + id);
								} else {
									_saveObj.loadrule = _findRemoveItem(_saveObj.loadrule, "" + id);
								}
								_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_setAllPages();
							});

							// Mouse Click Edit
							$loadRuleItem.find('.actionEdit').safeBind('click', function (event) {
								event.stopPropagation();

								if (!$(this).hasClass("ui-state-disabled")) {
									var myLoadRuleID = this.id.replace('loadRuleItem_edit_', '');
									utui.loadrules.showEditItem(utui.loadrules.containerLookup(myLoadRuleID), function () {
										var newRuleObj = utui.data.loadrules[myLoadRuleID];

										//Reset Load Rule Title
										$('#loadRuleItem_' + myLoadRuleID + ' .loadRuleListItemTitle').html(utui.loadrules.dateRange.getLoadRuleTitle(newRuleObj));

										//Reset Load Rule Content
										_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_printRuleContent(container, myLoadRuleID);

										// Refresh all tag headers
										$manageDialogWizard.find('#manage_content').find('.manage_container').each(function () {
											var container = this.id;
											utui.manage.setTitle(container);
										});

										// Update tag content
										utui.manage.displayItem(container);
									});
								}

							});

							// Mouse Click Copy
							$loadRuleItem.find('.actionCopy').safeBind('click', function (event) {
								event.stopPropagation();

								if (!$(this).hasClass("ui-state-disabled")) {
									var myLoadRuleID = this.id.replace('loadRuleItem_copy_', '');

									utui.loadrules.copyLoadRule(utui.loadrules.containerLookup(myLoadRuleID), function (obj) {
										//obj.loadruleid
										_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_printRuleHeader(container, obj.loadruleid, false);
										_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_expandRule(container, obj.loadruleid);
									});
								}
							});

							// Mouse Click Toggle Active
							$loadRuleItem.find('.actionToggleActive').safeBind('click', function (event) {
								event.stopPropagation();

								if (!$(this).hasClass("ui-state-disabled")) {
									var myLoadRuleID = this.id.replace('loadRuleItem_toggleActive_', '');

									utui.loadrules.toggleActive(utui.loadrules.containerLookup(myLoadRuleID), function (obj) {
										var ruleObj = utui.data.loadrules[obj.loadruleid];

										if (ruleObj.status === 'inactive') {
											$('#loadRuleItemStatus_' + obj.loadruleid).prop('checked', false);
											_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_setAllPages();
										}

										_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_printRuleHeader(container, ruleObj.id, false);

										// Refresh all tag headers
										$('#manage_content').find('.manage_container').each(function () {
											var container = this.id;
											utui.manage.setTitle(container);
										});

										// Update tag content
										utui.manage.displayItem(container);

									});
								}
							});

							// Mouse Click Delete
							$loadRuleItem.find('.actionDelete').safeBind('click', function (event) {
								event.stopPropagation();

								var myLoadRuleID = this.id.replace('loadRuleItem_delete_', '');

								if (!$(this).hasClass("ui-state-disabled")) {
									utui.loadrules.dropConfirm(utui.loadrules.containerLookup(myLoadRuleID), function (returnedLRid, action) {
										// alert('dropped tag: '+returnedLRid);
										if (action === 'delete') {
											$('#loadRuleItem_' + returnedLRid).remove();
										} else if (action === 'deactivate') {
											//Reset Load Rule Status
											$('#loadRuleItem_' + returnedLRid).removeClass('statusOn').addClass('statusOff');
										}
										// Refresh all tag headers
										$('#manage_content').find('.manage_container').each(function () {
											var container = this.id;
											utui.manage.setTitle(container);
										});

										var offLoadRulesCount = $('div.modal-body .loadRuleList .statusOff', '#explicit_preferences_dialog_addedit_dialogContent').length;

										if ($('div.modal-body .messageInactiveLoadRule', '#explicit_preferences_dialog_addedit_dialogContent').length > 0 && offLoadRulesCount < 1) {
											$('div.modal-body .messageInactiveLoadRule', '#explicit_preferences_dialog_addedit_dialogContent').remove();
											_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_resetHeight();
										}

										// Update tag content
										utui.manage.displayItem(container);

										_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_setAllPages();

									});
								}
							});

						},
						wizard_LoadRules_printRuleContent: function (container, myLoadRuleID) {

							var loadRuleList = utui.data.loadrules,
								myLoadRule = loadRuleList[myLoadRuleID],
								triggerKey = 'input_', // value used to be inherited from utui.loadrules.triggerKey;
								dateRangeContent = utui.loadrules.dateRange.toDisplayTime(myLoadRule.startDate, myLoadRule.endDate);

							var content = '';
							content += '            <div id="loadRuleItemContent_' + myLoadRule.id + '" class="loadRuleListItemRule editable">';

							if (dateRangeContent) {
								content += '<div class="LRdateRangeBlock"><div class="LRsDateRange">' + dateRangeContent + '</div></div>';
							}

							content += '                <div class="LRsConditions">';

							var ruleObj = utui.data.loadrules[myLoadRule.id],
								sizeOfRuleObj = utui.util.sizeOf(ruleObj, function (key) {
									return !isNaN(key)
								});
							for (var i = 0; i < sizeOfRuleObj; i++) {
								var ruleFilterObj = {};
								for (var j in utui.util.getVars(ruleObj[i])) {
									if (j.indexOf(triggerKey) == 0) {
										var k = j.substring(triggerKey.length);
										ruleFilterObj[k] = {
											source: ruleObj[i][j],
											filter: ruleObj[i]['filter_' + k],
											operator: ruleObj[i]['operator_' + k]
										};
									}
								}
								var ruleContent = [];
								for (var j in utui.util.getVars(ruleFilterObj, 1)) {
									ruleContent.push('<div class="LRsSource">' + utui.util.safeEscape(ruleFilterObj[j].source) + '</div><div class="LRsCase">' + ruleFilterObj[j].operator + '</div><div class="LRsFilter">' + utui.util.safeEscape(ruleFilterObj[j].filter) + '</div>');
								}
								var label = localize.t('tiq.tags.condition');
								if (parseInt(i, 10) > 0) label = localize.t('tiq.tags.or_condition');

								content += '<div class="LRsORcondition">';
								for (var a = 0; a < ruleContent.length; a++) {
									content += '<div class="LRsANDcondition">' + ruleContent[a] + '</div>';
								}
								content += '</div>';
							}

							content += '                </div>';
							content += '            </div>';
							$('#loadRuleItem_' + myLoadRuleID + ' .loadRuleListItemContent')
								.empty()
								.append(content);

							$('#loadRuleItemContent_' + myLoadRule.id + ' .contentItemButton').show();
							$('#loadRuleItemContent_' + myLoadRule.id + ' .contentItemButtonBar:after').css('display', 'none');
						}
					},

					// --------------------------------------------------------
					contentHeader: function () {
						var content = "";
						content += '<div class="main-header">';
						content += '  <div id="tabs_content_footer"></div>';
						content += '  <div id="tabs-privacy_management_explicit">';
						content += '    <div id="privacy_management_explicit_intro_toggleBtn" class="tab-intro-ribbon"><i class="icon-caret-up"></i></div>';
						content += '    <div id="privacy_management_explicit_intro" class="tab-intro" style="display: none;">';
						content += '      <div class="container-fluid">';
						content += '        <div class="row-fluid">';
						content += '          <div class="span2" style="position:relative; min-height:120px">';
						content += '            <div class="privacy_management_guide" >';
						content += '              <div class="tab-intro-colgraphic-icon"><i class=" tab_icon_privacy_management_explicit"></i></div>';
						content += '            </div>';
						content += '          </div>';
						content += '          <div class="span7 privacy_management_explicit_intro_body" style="padding-right: 32px;min-height: 120px;">';
						content += '            <h2 id="' + _namespace + '_explicit_consent_rules_header"></h2>';
						content += '            <p></p>';
						content += '            <div id="' + _namespace + '_explicit_consent_rules_body_text"></div>';
						content += '            <div id="' + _namespace + '_explicit_consent_rules_body"></div>';
						content += '          </div>';
						content += '        <div class="span3 privacy_management_explicit_intro_nav" style="position:relative; min-height:120px;display:none;">';
						content += '          <button id="privacy_management_explicit_intro_nav_back" data-step="0" class="btn btn-small">&nbsp;<i class="icon-caret-left"></i>&nbsp;</button>';
						content += '          <button id="privacy_management_explicit_intro_nav_continue" data-step="2" class="btn btn-small" style="margin-left: 5px;margin-right: -30px;">Continue</button>';
						content += '        </div>';
						content += '        </div>';
						content += '      </div>';
						content += '    </div>';
						content += '  </div>';
						content += '</div>';
						return content;
						// GDPR Rule Creation Guide
						//content =+ '<button style="margin-left: 30%;margin-top: 20px;" class="btn btn-small">Begin Guide</button>';
						// Use this guide to help configure rules to ensure consent is received in the appropriate geographies. Or select from any of your previously created Load Rules below.
					},

					generateLoadRule: function (type) {
						var _lrOptopns = {
							"tld": {
								"0": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".at",
									"input_0": "dom.domain"
								},
								"1": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".be",
									"input_0": "dom.domain"
								},
								"2": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".bg",
									"input_0": "dom.domain"
								},
								"3": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".hr",
									"input_0": "dom.domain"
								},
								"4": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".cy",
									"input_0": "dom.domain"
								},
								"5": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".cz",
									"input_0": "dom.domain"
								},
								"6": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".dk",
									"input_0": "dom.domain"
								},
								"7": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".ee",
									"input_0": "dom.domain"
								},
								"8": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".fi",
									"input_0": "dom.domain"
								},
								"9": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".fr",
									"input_0": "dom.domain"
								},
								"10": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".de",
									"input_0": "dom.domain"
								},
								"11": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".gr",
									"input_0": "dom.domain"
								},
								"12": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".hu",
									"input_0": "dom.domain"
								},
								"13": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".ie",
									"input_0": "dom.domain"
								},
								"14": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".it",
									"input_0": "dom.domain"
								},
								"15": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".lv",
									"input_0": "dom.domain"
								},
								"16": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".lt",
									"input_0": "dom.domain"
								},
								"17": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".lu",
									"input_0": "dom.domain"
								},
								"18": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".mt",
									"input_0": "dom.domain"
								},
								"19": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".nl",
									"input_0": "dom.domain"
								},
								"20": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".pl",
									"input_0": "dom.domain"
								},
								"21": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".pt",
									"input_0": "dom.domain"
								},
								"22": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".ro",
									"input_0": "dom.domain"
								},
								"23": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".sk",
									"input_0": "dom.domain"
								},
								"24": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".si",
									"input_0": "dom.domain"
								},
								"25": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".es",
									"input_0": "dom.domain"
								},
								"26": {
									"operator_0": "ends_with_ignore_case",
									"filter_0": ".se",
									"input_0": "dom.domain"
								},
								"27": {
									"operator_0": "regular_expression",
									"filter_0": "\\.(uk|gb)$",
									"input_0": "dom.domain"
								}
							},
							"subdomain": {
								"0": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "at.",
									"input_0": "dom.domain"
								},
								"1": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "be.",
									"input_0": "dom.domain"
								},
								"2": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "bg.",
									"input_0": "dom.domain"
								},
								"3": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "hr.",
									"input_0": "dom.domain"
								},
								"4": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "cy.",
									"input_0": "dom.domain"
								},
								"5": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "cz.",
									"input_0": "dom.domain"
								},
								"6": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "dk.",
									"input_0": "dom.domain"
								},
								"7": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "ee.",
									"input_0": "dom.domain"
								},
								"8": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "fi.",
									"input_0": "dom.domain"
								},
								"9": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "fr.",
									"input_0": "dom.domain"
								},
								"10": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "de.",
									"input_0": "dom.domain"
								},
								"11": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "gr.",
									"input_0": "dom.domain"
								},
								"12": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "hu.",
									"input_0": "dom.domain"
								},
								"13": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "ie.",
									"input_0": "dom.domain"
								},
								"14": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "it.",
									"input_0": "dom.domain"
								},
								"15": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "lv.",
									"input_0": "dom.domain"
								},
								"16": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "lt.",
									"input_0": "dom.domain"
								},
								"17": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "lu.",
									"input_0": "dom.domain"
								},
								"18": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "mt.",
									"input_0": "dom.domain"
								},
								"19": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "nl.",
									"input_0": "dom.domain"
								},
								"20": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "pl.",
									"input_0": "dom.domain"
								},
								"21": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "pt.",
									"input_0": "dom.domain"
								},
								"22": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "ro.",
									"input_0": "dom.domain"
								},
								"23": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "sk.",
									"input_0": "dom.domain"
								},
								"24": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "si.",
									"input_0": "dom.domain"
								},
								"25": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "es.",
									"input_0": "dom.domain"
								},
								"26": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "se.",
									"input_0": "dom.domain"
								},
								"27": {
									"operator_0": "starts_with_ignore_case",
									"filter_0": "uk.",
									"input_0": "dom.domain"
								}
							},
							"path": {
								"0": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(at)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"1": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(be)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"2": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(bg)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"3": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(hr)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"4": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(cy)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"5": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(cz)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"6": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(dk)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"7": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(ee)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"8": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(fi)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"9": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(fr)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"10": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(de)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"11": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(gr)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"12": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(hu)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"13": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(ie)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"14": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(it)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"15": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(lv)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"16": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(lt)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"17": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(lu)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"18": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(mt)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"19": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(nl)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"20": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(pl)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"21": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(pt)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"22": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(ro)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"23": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(sk)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"24": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(si)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"25": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(es)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"26": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(se)(\\/|$)",
									"input_0": "dom.pathname"
								},
								"27": {
									"operator_0": "regular_expression",
									"filter_0": "^\\/(uk)(\\/|$)",
									"input_0": "dom.pathname"
								}
							},
							"define": {"countries": utui.config.privacy_management.countries},
							"own": {}
						}, obj = {};

						if (type === "define") {
							_lrOptopns.define.countries.forEach(function (country, idx) {
								obj[idx] = {
									"operator_0": "equals_ignore_case",
									"filter_0": country,
									"input_0": $("#explicit_preferences_dialog_addedit_define_select_inputselect").select2("val")
								};
							});
						} else {
							obj = _lrOptopns[type];
						}
						obj.title = localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.gdpr') + " ";
						switch (type) {
							case "tld" :
								obj.title += localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.by_tld');
								break;
							case "subdomain" :
								obj.title += localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.by_subdomain');
								break;
							case "path" :
								obj.title += localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.by_pathname');
								break;
							case "define" :
								obj.title += localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.by_countries');
								break;
							default:
								obj.title += localize.t('tiq.dashboard.privacy_management.explicit_preferences.consent_rules_wizard.definition');
						}

						obj.status = "active";

						function callback(obj) {
							_saveObj.loadrule = "all";
							//close help
							_panels.tab_consentRules.helperPanel.hideHelp();
							//re-render tab
							_panels.tab_consentRules.render();
							//select newly created loadrule
							$("div.loadRuleList input", "#" + _namespace + "_dialogContent").removeAttr('checked');
							$("#loadRuleItemStatus_" + obj.loadruleid).click();

							_view.tab_consentRules.loadRulesPanel.wizard_LoadRules_resetHeight();

						}

						var lr = utui.util.getVars(obj);
						utui.loadrules.view.showAddMore('create', callback);

						//Remove the "blank" line that is added
						if (type !== "own") {
							$("#loadrules_dialog_addmore_pane > div").remove();
						}
						utui.loadrules.view.showAddOptions(lr, utui.util.sizeOf(lr, function (key) {
							return !isNaN(key);
						}));
						$("#loadrules_dialog_addmore").scrollTop(0);

					}
				},

				// --------------------------------------------------------
				tab_options: {
					// --------------------------------------------------------
					contentBody: function () {
						var v = '';

						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.event_logging') + '</div></div></div></h2>';
						v += '<div class="section-padded-top-bottom js-section" data-section="event_log">';
						v += '  <div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(_view.tab_options.logConsentRow()), false, false);

						v += '  </div></div></div>';
						v += '</div>';

						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.tags_to_omit') + '</div></div></div></h2>';
						v += '<div class="container-fluid">';
						v += '  <div class="row-fluid">';
						v += '    <div class="span12">';
						v += localize.t('tiq.dashboard.privacy_management.explicit_preferences.select_non_tracking_tags');
						v += '    </div>';
						v += '  </div>';
						v += '  <div class="row-fluid">';
						v += '    <div class="span12">';
						v += '      <div>' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.tags') + ': ';
						v += '        <select style="width:250px; margin-right:10px" class="js-manage-select" id="' + _namespace + '_manage_select" name="' + _namespace + '_manage_select">';
						v += '          <option></option>'; // empty option for placeholder text


						function _toString(key) {
							return "" + key;
						}

						var tagsToList = _.difference(
							_.map(_.keys(utui.data.manage), _toString),
							_.map(_util.toCleanArray(_saveObj.omittedTags), _toString)
						);

						_.forEach(tagsToList, function (id) {
							var tagObj = utui.data.manage[id];
							v += '<option value="' + tagObj.tag_id + ((tagObj.id) ? '_' + tagObj.id : '') + '" data-id="' + (tagObj.id || "") + '" data-tag-name="' + tagObj.tag_name + '" >' + utui.util.safeEscape(tagObj.title) + '</option>';
						});

						v += '        </select>';
						v += '        <button class="btn" id="' + _namespace + '_omitTagBtn">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.omit_tag') + '</button>';
						v += '      </div>';
						v += '    </div>';
						v += '  </div>';


						v += '    <div class="row-fluid">';
						var bodyRows = "";


						var tmp_array = _util.toCleanArray(_saveObj.omittedTags);
						for (var i = tmp_array.length - 1; i >= 0; i--) {
							var ommitedId = tmp_array[i],
								tag = utui.data.manage[ommitedId];
							if (!tag) {
								_saveObj.omittedTags = _findRemoveItem(_saveObj.omittedTags, "" + i);
								continue;
							}
							bodyRows += utui.ui.table.createRow(tag.tag_id + '_' + tag.id, [
								'<div class="loadRuleListItem status' + (tag.status === "active" ? "On" : "Off") + '"><div class="loadRuleListItemTitle"> ' + tag.tag_name + '</div></div>',
                utui.util.safeEscape(tag.title),
								tag.id,
								'<button class="btn i-color-delete js-remove-tag-from-omitted-btn" data-tag_id="' + tag.tag_id + '_' + tag.id + '" data-id="' + tag.id + '" ><i class="icon-remove"></i>&nbsp;' + localize.t('tiq.dialog.button.remove') + '</button>']);
						}

						v += utui.ui.table.createTable("pm_explicit_ommited_tags",
							utui.ui.table.createHeaderRow(["Tag Name", "Tag Title", "UID", ""]),
							bodyRows);
						v += '    </div>';
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					logConsentRow: function () {

						var v = "";
						v += '      <div class="wizard_config_item" id="pm_event_logging_container">';
						v += '          <input type="radio" id="pm_event_logging_config1" name="pm_event_logging" value="yes"><label for="pm_event_logging_config1">' + localize.t('tiq.tags.yes') + '</label>';
						v += '          <input type="radio" id="pm_event_logging_config2" name="pm_event_logging" value="no"><label for="pm_event_logging_config2">' + localize.t('tiq.tags.no') + '</label>';
						v += '      </div>';

						var desc = "";
						desc += '<div style="display: inline-block;margin-top: 10px;">';
						desc += '<div style="display: grid;grid-template-columns: 40px 10px auto;">';
						desc += '  <div class="gdpr-padlock" style="grid-column: 1/1;margin-top: unset;"></div>';
						desc += '<div style="grid-column: 3/3;">';
						desc += localize.t('tiq.dashboard.privacy_management.explicit_preferences.log_consent_changes_notice', {
							link: '<a class="tealium-blue" href="' + common.community.explict_consent_event_logging + '" target="_blank">' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.tealium_learning_community') + '</a>'
						});
						desc += '</div></div></div>';

						return utui.ui.template.form.rowItemView(
							localize.t('tiq.dashboard.privacy_management.explicit_preferences.log_consent_changes'),
							v,
							desc);

					},

					// --------------------------------------------------------
					tagResultOptions: function (option) {

						var optionText = utui.util.safeEscape(option.text),
							el_data = $(option.element[0]).data(),
							id = el_data.id,
							tag_name = el_data.tagName;

						var v = "";

						v += '<i class="icon-tag tagIcon tealium-blue"></i>';
						v += '<div class="tag-dropdown-item">';
						v += '	<div class="tagText tag-dropdown-title" title="' + optionText + '">' + optionText + '</div>';
						v += '	<div class="tagText tag-dropdown-uid" title="UID: ' + id + '">UID: ' + id + '</div>';
						v += '	<div class="tagText tag-dropdown-vendor" title="' + tag_name + '">' + tag_name + '</div>';
						v += '</div>';

						return v;
					}
				}
			};

			// --------------------------------------------------------
			var _render = {
				// --------------------------------------------------------
				ui: function () {
					if (_isNew) {
						$modalDialog.find('.modal-header').addClass("newTag");
					}
					$modalDialog.find('.modal-header').html(_view.modal.contentHeader());
					$modalDialog.find('.modal-body').html(_templateAccordion);

					_bindUI.topNavMenu();

					// Render 1st panel into DOM
					_selectedLanguage = _util.getDefaultLanguage(_saveObj.languages);
					//render selected tab
					$modalDialog.find('#' + _selectedTab).trigger('click');
					// _panels[_selectedTab].render();

					// Dialog adjustments
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				getFieldSetView: function (fieldSetCollection) {
					var contentSet = '',
						fieldModel,
						title,
						fieldsetCollection = "";

					for (var i = 0; i < fieldSetCollection.length; i++) {
						fieldModel = fieldSetCollection[i];

						title = fieldModel.categoryTitle || false;
						fieldsetCollection = "";

						if (fieldModel.info) {
							fieldsetCollection = '<div class="row-fluid">' + '<div style="margin-bottom: 10px;"><div class="infoIcon" style="float:  none;"><a href="#" onclick="common.utils.openWindow(\'' + common.community.explict_consent + '\'); return false;" style="color: #518ECD;" class="icon-question-sign"></a></div><span style="vertical-align: middle; padding-left:  5px;">' + fieldModel.info + '</span></div></div>' + fieldsetCollection;
						}

						if (fieldModel.fieldset) {
							_.forEach(fieldModel.fieldset, function (fieldData, fieldKey) {
								if (fieldData.fieldType === "text") {
									fieldsetCollection += '<div class="row-fluid"><div class="span3">';
									fieldsetCollection += '<div class="field-title">' + fieldData.label + '</div>';
									fieldsetCollection += '</div><div class="span6"><div class="field-content">';
									fieldsetCollection += '<input class="pm_tab_consent_input" ' + (_saveObj.isAccountOverride ? "disabled" : "") + ' id="explicit_preferences_dialog_addedit_explict_' + fieldKey + '" data-key="' + fieldKey + '" data-type="common_tokens" type="text" size="' + fieldData.size + '" style="width: 90%;"> ';
									fieldsetCollection += '</div></div><div class="span3">';
									fieldsetCollection += '<div class="field-title">{{' + fieldKey + '}}</div>';
									fieldsetCollection += '</div></div>';
								} else if (fieldData.fieldType === "textarea") {
									fieldsetCollection += '<div class="row-fluid"><div class="span3">';
									fieldsetCollection += '<div class="field-title">' + fieldData.label + '</div>';
									fieldsetCollection += '</div><div class="span9"><div class="field-content">';
									fieldsetCollection += '<textarea class="pm_tab_consent_input" ' + (_saveObj.isAccountOverride ? "disabled" : "") + '  id="explicit_preferences_dialog_addedit_explict_' + fieldKey + '" data-key="' + fieldKey + '"  data-type="common_tokens" style="margin-bottom: 0px;height: 80px;"> </textarea>';
									fieldsetCollection += '<div style="margin-bottom: 15px;">{{' + fieldKey + '}}</div>';
									fieldsetCollection += '</div></div></div>';
								}
							});
						} else if (fieldModel.useTokens) {

							_.forEach(_saveObj.custom_tokens_definitions, function (tokenObj) {

								fieldsetCollection += '<div class="row-fluid"><div class="span3">';
								fieldsetCollection += '<div class="field-title">' + tokenObj.title + '</div>';
								fieldsetCollection += '</div><div class="span6"><div class="field-content">';
								fieldsetCollection += '<input  ' + (_saveObj.isAccountOverride ? "disabled" : "") + '  class="pm_tab_consent_input js-custom-param" id="explicit_preferences_dialog_addedit_tokens_' + tokenObj.token + '" data-type="custom_tokens" data-key="' + tokenObj.token + '" type="text" size="64" style="width: 90%;"> ';
								fieldsetCollection += '</div></div><div style="display: grid;" class="pm_cust_token_grid span3">';
								fieldsetCollection += '<button style="grid-area: delete;"' + (_saveObj.isAccountOverride ? 'disabled class="ui-state-disabled"' : "") + ' class="pm_delete_custom_param" data-token="' + tokenObj.token + '" ><i class="icon-trash"></i></button>';
								fieldsetCollection += '<div class="pm_cust_token_text field-title" >{{' + tokenObj.token + '}}</div>';
								fieldsetCollection += '</div></div>';
							});

							fieldsetCollection += '<div class="row-fluid"><div class="btn btn-small" ' + (_saveObj.isAccountOverride ? 'disabled class="ui-state-disabled"' : "") + '  id="pm_explict_add_param"><i class="icon-plus" style="color: green;"></i>&nbsp;' + localize.t('tiq.dashboard.privacy_management.explicit_preferences.add_parameter') + '</div></div>';
						}

						contentSet += '<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						contentSet += utui.ui.template.compositeView(title, utui.ui.template.form.rowCollectionView(fieldsetCollection), true, fieldModel.isActive)
							.replace(/utui-accordion-toggle-bar/g, "utui-accordion-title-bar");
						contentSet += '</div></div></div>';
					}

					contentSet = contentSet.replace(/utui-accordion-toggle-bar/g, "utui-accordion-title-bar");

					return '<div class="section-padded-top-bottom">' + contentSet + '</div>';
				}
			};

			var buttons = [
					{
						text: localize.t('tiq.dialog.button.finish'),
						click: function () {

							

							if (!utui.util.objectEquals(utui.data.privacy_management.explicit, _saveObj)) {
								if (_isNew) {
                  utui.util.pubsub.publish(utui.constants.privacy_management.explicit.ADDED);
								} else {
                  utui.util.pubsub.publish(utui.constants.privacy_management.explicit.UPDATED);
								}
								utui.data.privacy_management.explicit = _saveObj;
							}

							_eventHandlers.onBtnCancelClick();

							if (callback) {
								callback();
							}
						},
						id: _namespace + '_finishBtn'
					},
					{
						text: localize.t('tiq.dialog.button.next'),
						click: function () {
							if (_selectedTab === 'tab_explicit') {
								$modalDialog.find('#tab_customization').trigger('click');
							} else if (_selectedTab === 'tab_customization') {
								$modalDialog.find('#tab_consentRules').trigger('click');
							} else if (_selectedTab === 'tab_consentRules') {
								$modalDialog.find('#tab_options').trigger('click');
							}
							else {
								if (_isNew) {
                  utui.util.pubsub.publish(utui.constants.privacy_management.explicit.ADDED);
								} else {
                  utui.util.pubsub.publish(utui.constants.privacy_management.explicit.UPDATED);
								}

								utui.data.privacy_management.explicit = _saveObj;
								_eventHandlers.onBtnCancelClick();

								if (callback) {
									callback();
								}
							}
						},
						id: _namespace + '_applyBtn'
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						click: _eventHandlers.onBtnCancelClick,
						id: _namespace + '_cancelBtn',
						style: 'float:left; margin-left: 12px'
					}
				],
				title = localize.t('tiq.dashboard.privacy_management.explicit_preferences.dialog_title');

			// Show the modal dialog
			$modalDialog = utui.ui.dialog.show(_namespace, title, buttons, _templateModal, {
				width: 1000,
				height: 550
			}, _eventHandlers.onBtnCancelClick);

			// Render the contents of the dialog
			_render.ui();

			function _refreshContentTab(data, err) {
				if (err) {
					return;
				}
				if (!_saveObj.isAccountOverride) {
					return;
				}
				_saveObj.languages = data.explicit.languages;
				_saveObj.custom_tokens_definitions = data.explicit.custom_tokens_definitions;
				_selectedLanguage = _util.getDefaultLanguage(_saveObj.languages);
				if ($("#explicit_preferences_dialog_addedit_tab_explicit").is(":visible")) {
					_panels.tab_explicit.render();
				}
			}

			utui.util.pubsub.subscribe(utui.constants.privacy_management.ACCOUNT_DEFAULTS_UPDATED, _refreshContentTab);

			return $modalDialog;
		},

		// --------------------------------------------------------
		showAddEditConsent: function (consentPreference, jumpToTab) {
			// Private API
			var _namespace = 'consent_preferences_dialog_addedit',
				_selectedTab = 'tab_consent',
				_consentInputFields = {
					user_interface_params: {
						fieldset: {
							title: {
								fieldType: 'text',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.title'),
								size: '70',
								fieldSuffix: '{{title}}'
							},
							message: {
								fieldType: 'custom',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.message'),
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_message" class="custom-textarea" rows="4" cols="80" data-key="message"></textarea>';
										crTa += ' <span class="inline-label">{{message}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							confirmation_button: {
								fieldType: 'text',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.confirmation_button'),
								size: '70',
								fieldSuffix: '{{confirmation_button}}'
							},
							category: {
								fieldType: 'text',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.category_header'),
								size: '70',
								fieldSuffix: '{{category}}'
							},
							description: {
								fieldType: 'text',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.description_header'),
								size: '70',
								fieldSuffix: '{{description}}'
							},
							status: {
								fieldType: 'text',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.status'),
								size: '70',
								fieldSuffix: '{{status}}'
							},
							yes: {
								fieldType: 'text',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.yes'),
								size: '70',
								fieldSuffix: '{{yes}}'
							},
							no: {
								fieldType: 'text',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.no'),
								size: '70',
								fieldSuffix: '{{no}}'
							}
						}
					},
					category_params: {
						fieldset: {
							analytics_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.1.text'),
								size: '70',
								fieldSuffix: '{{category_analytics_title}}'
							},
							analytics_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_analytics_notes" class="custom-textarea" rows="4" cols="80" data-key="analytics_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_analytics_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							affiliates_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.2.text'),
								size: '70',
								fieldSuffix: '{{category_affiliates_title}}'
							},
							affiliates_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_affiliates_notes" class="custom-textarea" rows="4" cols="80" data-key="affiliates_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_affiliates_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							display_ads_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.3.text'),
								size: '70',
								fieldSuffix: '{{category_display_ads_title}}'
							},
							display_ads_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_display_ads_notes" class="custom-textarea" rows="4" cols="80" data-key="display_ads_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_display_ads_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							search_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.4.text'),
								size: '70',
								fieldSuffix: '{{category_search_title}}'
							},
							search_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_search_notes" class="custom-textarea" rows="4" cols="80" data-key="search_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_search_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							email_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.5.text'),
								size: '70',
								fieldSuffix: '{{category_email_title}}'
							},
							email_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_email_notes" class="custom-textarea" rows="4" cols="80" data-key="email_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_email_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							personalization_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.6.text'),
								size: '70',
								fieldSuffix: '{{category_personalization_title}}'
							},
							personalization_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_personalization_notes" class="custom-textarea" rows="4" cols="80" data-key="personalization_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_personalization_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							social_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.7.text'),
								size: '70',
								fieldSuffix: '{{category_social_title}}'
							},
							social_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_social_notes" class="custom-textarea" rows="4" cols="80" data-key="social_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_social_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							big_data_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.8.text'),
								size: '70',
								fieldSuffix: '{{category_big_data_title}}'
							},
							big_data_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_big_data_notes" class="custom-textarea" rows="4" cols="80" data-key="big_data_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_big_data_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							misc_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.9.text'),
								size: '70',
								fieldSuffix: '{{category_misc_title}}'
							},
							misc_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_misc_notes" class="custom-textarea" rows="4" cols="80" data-key="misc_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_misc_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							cookiematch_name: {
								fieldType: 'text',
								label: localize.t('config.manageGroup.10.text'),
								size: '70',
								fieldSuffix: '{{category_cookiematch_title}}'
							},
							cookiematch_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_cookiematch_notes" class="custom-textarea" rows="4" cols="80" data-key="cookiematch_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_cookiematch_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							cdp_name: {
								fieldType: 'text',
								label: localize.t('config.crossPlatformGroup.1.text'),
								size: '70',
								fieldSuffix: '{{category_cdp_title}}'
							},
							cdp_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_cdp_notes" class="custom-textarea" rows="4" cols="80" data-key="cdp_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_cdp_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							mobile_name: {
								fieldType: 'text',
								label: localize.t('config.crossPlatformGroup.2.text'),
								size: '70',
								fieldSuffix: '{{category_mobile_title}}'
							},
							mobile_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_mobile_notes" class="custom-textarea" rows="4" cols="80" data-key="mobile_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_mobile_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							engagement_name: {
								fieldType: 'text',
								label: localize.t('config.crossPlatformGroup.3.text'),
								size: '70',
								fieldSuffix: '{{category_engagement_title}}'
							},
							engagement_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_engagement_notes" class="custom-textarea" rows="4" cols="80" data-key="engagement_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_engagement_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							monitoring_name: {
								fieldType: 'text',
								label: localize.t('config.crossPlatformGroup.4.text'),
								size: '70',
								fieldSuffix: '{{category_monitoring_title}}'
							},
							monitoring_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_monitoring_notes" class="custom-textarea" rows="4" cols="80" data-key="monitoring_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_monitoring_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							},
							crm_name: {
								fieldType: 'text',
								label: localize.t('config.crossPlatformGroup.5.text'),
								size: '70',
								fieldSuffix: '{{category_crm_title}}'
							},
							crm_notes: {
								fieldType: 'custom',
								label: '',
								customRenderer: {
									getView: function () {
										var crTa = '';

										crTa += '<textarea id="tab_consent_crm_notes" class="custom-textarea" rows="4" cols="80" data-key="crm_notes"></textarea>';
										crTa += ' <span class="inline-label">{{category_crm_description}}</span>';

										return crTa;
									},
									getTitle: function () {
										return '';
									}
								}
							}
						}
					}
				},
				_customizationInputFields = {
					fieldset: {
						css: {
							fieldType: 'custom',
							label: localize.t('tiq.dashboard.privacy_management.consent_preferences.css'),
							size: '70',
							customRenderer: {
								getView: function () {
									return '<div id="css-ace-editor" class="privacy_management_ace_editor"></div>';
								},
								getTitle: function () {
									return '';
								}
							}
						},
						html: {
							fieldType: 'custom',
							label: localize.t('tiq.dashboard.privacy_management.consent_preferences.html'),
							size: '70',
							customRenderer: {
								getView: function () {
									return '<div id="html-ace-editor" class="privacy_management_ace_editor"></div>';
								},
								getTitle: function () {
									return '';
								}
							}
						},
						javascript: {
							fieldType: 'custom',
							label: localize.t('tiq.dashboard.privacy_management.consent_preferences.javascript'),
							size: '70',
							customRenderer: {
								getView: function () {
									return '<div id="js-ace-editor" class="privacy_management_ace_editor"></div>';
								},
								getTitle: function () {
									return '';
								}
							}
						}
					}
				},
				_optionsInputFields = {
					cookie_preferences: {
						fieldset: {
							single_cookie: {
								fieldType: 'select',
								label: localize.t('tiq.dashboard.privacy_management.consent_preferences.single_cookie_restriction'),
								title: localize.t('tiq.dashboard.privacy_management.consent_preferences.single_cookie_restriction_notice'),
								fieldOptions: [{
									label: localize.t('tiq.dashboard.privacy_management.consent_preferences.keep_tealium_cookie'),
									value: 'true'
								}, {
									label: localize.t('tiq.dashboard.privacy_management.consent_preferences.remove_tealium_cookie'),
									value: 'false'
								}]
							}
						}
					},
          default_state: {
            fieldset: {
              default_state: {
                fieldType: 'checkbox',
                label: localize.t('tiq.dashboard.privacy_management.consent_preferences.default_opt_method'),
                title: localize.t('tiq.dashboard.privacy_management.consent_preferences.default_opt_method_description')
              }
            }
          }
				},
				_selectedLanguage,
				_selectedCategory,
				_all_tags = 'all_tags',
				_templateModal = utui.ui.template.modal(),
				_templateAccordion = utui.ui.template.accordion(true),
				_consentPreference,
				$modalDialog,
				_saveObj,
				_editors = {
					javascript: null,
					css: null,
					html: null
				},
			_maxZ = $.ui.dialog.maxZ;
      $.ui.dialog.maxZ =0;
			_consentPreference = consentPreference;

			// setup the save object
			if (_isNewConsentPreference(_consentPreference)) {
				_saveObj = _constructEmptyConsentPreference();

			} else {
				// Copy the preferences object to prevent unsaved changes from being persisted
				_consentPreference = $.extend(true, {}, consentPreference);
				_saveObj = _consentPreference;
			}

			// --------------------------------------------------------
			function _isNewConsentPreference(consentPreference) {
				return consentPreference === 'create';
			}

			function _constructDefaultContent() {
				var _view = {
					html: function () {
						var v = '';
            
            v += '<div class="privacy_prompt consent_preferences">\n';
            v += '  <div class="privacy_prompt_content">\n';
            v += '    <h1>{{title}}</h1>\n';
            v += '    <img src="{{company_logo_url}}" class="logo">\n';
            v += '    <p>{{message}}</p>\n';
            v += '    <table>\n';
            v += '      <tr>\n';
            v += '        <th>{{category}}</th>\n';
            v += '        <th>{{description}}</th>\n';
            v += '        <th>{{status}}</th>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_analytics_title}}</td>\n';
            v += '        <td>{{category_analytics_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat1"/>\n';
            v += '          <label for="toggle_cat1"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_affiliates_title}}</td>\n';
            v += '        <td>{{category_affiliates_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat2"/>\n';
            v += '          <label for="toggle_cat2"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_display_ads_title}}</td>\n';
            v += '        <td>{{category_display_ads_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat3"/>\n';
            v += '          <label for="toggle_cat3"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_search_title}}</td>\n';
            v += '        <td>{{category_search_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat4"/>\n';
            v += '          <label for="toggle_cat4"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_email_title}}</td>\n';
            v += '        <td>{{category_email_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat5"/>\n';
            v += '          <label for="toggle_cat5"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_personalization_title}}</td>\n';
            v += '        <td>{{category_personalization_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat6"/>\n';
            v += '          <label for="toggle_cat6"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_social_title}}</td>\n';
            v += '        <td>{{category_social_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat7"/>\n';
            v += '          <label for="toggle_cat7"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_big_data_title}}</td>\n';
            v += '        <td>{{category_big_data_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat8"/>\n';
            v += '          <label for="toggle_cat8"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_misc_title}}</td>\n';
            v += '        <td>{{category_misc_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat9"/>\n';
            v += '          <label for="toggle_cat9"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_cookiematch_title}}</td>\n';
            v += '        <td>{{category_cookiematch_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat10"/>\n';
            v += '          <label for="toggle_cat10"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_cdp_title}}</td>\n';
            v += '        <td>{{category_cdp_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat11"/>\n';
            v += '          <label for="toggle_cat11"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_mobile_title}}</td>\n';
            v += '        <td>{{category_mobile_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat12"/>\n';
            v += '          <label for="toggle_cat12"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_engagement_title}}</td>\n';
            v += '        <td>{{category_engagement_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat13"/>\n';
            v += '          <label for="toggle_cat13"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_monitoring_title}}</td>\n';
            v += '        <td>{{category_monitoring_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat14"/>\n';
            v += '          <label for="toggle_cat14"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '      <tr>\n';
            v += '        <td>{{category_crm_title}}</td>\n';
            v += '        <td>{{category_crm_description}}</td>\n';
            v += '        <td>\n';
            v += '          <input type="checkbox" class="toggle" id="toggle_cat15"/>\n';
            v += '          <label for="toggle_cat15"> <span class="on">{{yes}}</span> <span class="off">{{no}}</span></label>\n';
            v += '        </td>\n';
            v += '      </tr>\n';
            v += '    </table>\n';
            v += '  </div>\n';
            v += '  <div class="privacy_prompt_footer">\n';
            v += '    <div id="preferences_prompt_submit" class="button right"> {{confirmation_button}}</div>\n';
            v += '  </div>\n';
            v += '  <div class="close_btn_thick"></div>\n';
            v += '</div>\n';

						return v;
					},
          js: function () {
            var v = '';
            
            v += '\n\n\n/***********************' + localize.t('tiq.dashboard.privacy_management.do_not_modify_below_this_line') + '***********************/\n';
            v += '(function preferences_prompt() {\n';
            v += '  var $el = document.getElementById("preferences_prompt_submit"),\n';
            v += '      $modal = document.getElementById("__tealiumGDPRcpPrefs"),\n';
            v += '      $closeBtn = $modal.getElementsByClassName("close_btn_thick")[0],\n';
            v += '      $body = $modal.getElementsByClassName("consent_preferences")[0],\n';
            v += '      reg_match = /\\d+$/,\n';
            v += '      i;\n';
            v += '  \n';
            v += '  var callBack = function () {\n';
            v += '    \n';
            v += '    var inputs = $body.getElementsByClassName("toggle"),\n';
            v += '        cats = {};\n';
            v += '    \n';
            v += '    for (var i = 0; i < inputs.length; i++) {\n';
            v += '      var obj = inputs[i];\n';
            v += '      cats[obj.id.match(reg_match)[0]] = obj.checked ? 1 : 0;\n';
            v += '    }\n';
            v += '    closePrompt();\n';
            v += '    \n';
            v += '    utag.gdpr.setPreferencesValues(cats);\n';
            v += '    /**** '+localize.t('tiq.dashboard.privacy_management.preferences_view_event') + '\n';
            v += '     setTimeout(function (){if (window.utag && window.utag.udoname || window.utag_data) {utag.view(window[window.utag && window.utag.udoname || "utag_data"]);}},0);\n ';
            v += '    ****/\n';
            v += '  };\n';
            v += '  var closePrompt = function () {\n';
            v += '    $modal.style.display = "none";\n';
            v += '  };\n';
            v += '  \n';
            v += '  \n';
            v += '  var consentState = utag.gdpr.getConsentState();\n';
            v += '  if (typeof consentState === "number") {\n';
            v += '    var _state = false;\n';
            v += '    if (consentState === 1 || consentState === -1){\n';
            v += '      _state = consentState === 1;\n';
            v += '    } else {\n';
            v += '      _state = !!utag.gdpr.preferences_prompt.defaultState;\n';
            v += '  }\n';
            v += '    for (i = 0; i < utag.gdpr.getCategories().length; i++) {\n';
            v += '      document.getElementById("toggle_cat" + (i + 1)).checked = _state;\n';
            v += '    }\n';
            v += '  } else {\n';
            v += '    for (i = 0; i < consentState.length; i++) {\n';
            v += '      if (consentState[i].ct !== "1") {\n';
            v += '        continue;\n';
            v += '      }\n';
            v += '      document.getElementById("toggle_cat" + (i + 1)).checked = true;\n';
            v += '    }\n';
            v += '  }\n';
            v += '  \n';
            v += '  \n';
            v += '  if (document.addEventListener) {\n';
            v += '    $el.addEventListener("click", callBack, false);\n';
            v += '    $closeBtn.addEventListener("click", closePrompt, false);\n';
            v += '  } else if (document.attachEvent) {\n';
            v += '    $el.attachEvent("click", callBack);\n';
            v += '    $closeBtn.attachEvent("click", closePrompt);\n';
            v += '  } else {\n';
            v += '    $el.onclick = callBack;\n';
            v += '    $closeBtn.onclick = closePrompt;\n';
            v += '  }\n';
            v += '}());';
						
						return v;
					}
				};
				return {
					html: _view.html(),
          javascript: _view.js(),
          css       : '.privacy_prompt { \n     position: absolute; \n     width: 600px; \n     top: 100px; \n     left: 50%; \n     margin-left: -300px; \n     text-align: left; \n     border: 1px solid #CCC; \n     border-radius: 4px; \n     background-color: #FFF; \n     color: #444; \n     font-size: 14px; \n     z-index: 1000; \n } \n  \n .privacy_prompt a { \n     text-decoration: none; \n     color: #0077bf; \n } \n  \n .privacy_prompt_content { \n     padding: 20px; \n     font-size: 0.9em; \n } \n  \n .privacy_prompt h1 { \n     font-size: 1.3em; \n     color: #444; \n     font-weight: 400; \n } \n  \n .privacy_prompt .option { \n     margin: 10px 0px; \n     color: #444; \n } \n  \n .privacy_prompt_footer { \n     padding: 0px 20px 20px 20px; \n     overflow: auto; \n } \n  \n .privacy_prompt_footer a { \n     font-size: 0.9em; \n } \n  \n .privacy_prompt_footer .button { \n     font-size: 1.0em; \n     border: 1px solid #CCC; \n     padding: 4px 15px; \n     min-width: 50px; \n     text-align: center; \n     border-radius: 4px; \n     background-color: #EEE; \n     box-shadow: inset 0px 1px 4px rgba(255, 255, 255, 1); \n     text-shadow: 1px 1px 3px rgba(255, 255, 255, 1); \n     color: #000; \n     cursor: pointer; \n } \n  \n .privacy_prompt .button.right { \n     float: right; \n } \n  \n .privacy_prompt .button.left { \n     float: left; \n } \n  \n .privacy_prompt > .close_btn_thick { \n     position: absolute; \n     display: block; \n     top: 10px; \n     right: 10px; \n     text-decoration: none; \n     text-shadow: 0 1px 0 #fff; \n     color: #777; \n     font: 14px/100% arial, sans-serif; \n     cursor: pointer; \n } \n  \n .privacy_prompt > .close_btn_thick:after { \n     content: "\\2716";  \n } \n  \n .privacy_prompt .logo { \n     float: right; \n } \n  \n .privacy_prompt table { \n     padding: 0px; \n     border-collapse: collapse; \n      margin: 0 auto; \n } \n  \n .privacy_prompt table tr:first-child > th { \n    width: 33%; \n } \n  \n .privacy_prompt table th { \n     background-color: #FAFAFA; \n     border-bottom: 1px solid #EEE; \n     margin: 0px; \n     padding: 5px 8px; \n     font-weight: 400; \n     text-align: center; \n } \n  \n .privacy_prompt table td { \n     vertical-align: top; \n     padding: 10px 8px 5px 8px; \n } \n  \n .privacy_prompt table tr td:first-child { \n     min-width: 120px; \n     font-weight: 600; \n     color: #666; \n } \n  \n .privacy_prompt table tr td:last-child { \n     text-align: center; \n     min-width: 100px; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle { \n     opacity: 0; \n     position: absolute; \n     left: -99999px; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label { \n     height: 24px; \n     line-height: 24px; \n     background-color: #ccc; \n     padding: 0px 16px; \n     border-radius: 16px; \n     display: inline-block; \n     position: relative; \n     cursor: pointer; \n     -moz-transition: all 0.25s ease-in; \n     -o-transition: all 0.25s ease-in; \n     -webkit-transition: all 0.25s ease-in; \n     transition: all 0.25s ease-in; \n     -moz-box-shadow: inset 0px 0px 2px rgba(0, 0, 0, 0.5); \n     -webkit-box-shadow: inset 0px 0px 2px rgba(0, 0, 0, 0.5); \n     box-shadow: inset 0px 0px 2px rgba(0, 0, 0, 0.5); \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label:before, .privacy_prompt input[type="checkbox"].toggle + label:hover:before { \n     content: " "; \n     position: absolute; \n     top: 2px; \n     left: 2px; \n     width: 26px; \n     height: 20px; \n     background: #fff; \n     z-index: 2; \n     -moz-transition: all 0.25s ease-in; \n     -o-transition: all 0.25s ease-in; \n     -webkit-transition: all 0.25s ease-in; \n     transition: all 0.25s ease-in; \n     -moz-border-radius: 14px; \n     -webkit-border-radius: 14px; \n     border-radius: 14px; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label .off, .privacy_prompt input[type="checkbox"].toggle + label .on { \n     color: #fff; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label .off { \n     margin-left: 20px; \n     display: inline-block; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle + label .on { \n     display: none; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label .off { \n     display: none; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label .on { \n     margin-right: 20px; \n     display: inline-block; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label, .privacy_prompt input[type="checkbox"].toggle:focus:checked + label { \n     background-color: #3278c0; \n } \n  \n .privacy_prompt input[type="checkbox"].toggle:checked + label:before, .privacy_prompt input[type="checkbox"].toggle:checked + label:hover:before, .privacy_prompt input[type="checkbox"].toggle:focus:checked + label:before, .privacy_prompt input[type="checkbox"].toggle:focus:checked + label:hover:before { \n     background-position: 0 0; \n     top: 2px; \n     left: 100%; \n     margin-left: -28px; \n } \n  .privacy_prompt input[type="checkbox"].toggle + label { \n    overflow: hidden;\n     text-overflow: ellipsis;\n     max-height: 24px;\n     height: 24px;\n     }\n @media (max-width: 780px) {\n    #__tealiumGDPRcpPrefs .privacy_prompt {\n        width: 90%;\n     margin: 0 auto;\n     left: 5%;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content .prefmessage {\n        float: none;\n        width: 100%;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content h1 {\n        text-align: center;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content img {\n        float: none;\n        margin: 0 auto 10px auto;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content table,\n    #__tealiumGDPRcpPrefs .privacy_prompt_content thead,\n    #__tealiumGDPRcpPrefs .privacy_prompt_content tbody,\n    #__tealiumGDPRcpPrefs .privacy_prompt_content th,\n    #__tealiumGDPRcpPrefs .privacy_prompt_content td,\n    #__tealiumGDPRcpPrefs .privacy_prompt_content tr {\n        position: relative;\n        height: 100%;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content table tbody tr {\n        display: block;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content tbody tr {\n        margin: 0 0 1rem 0;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content tbody tr td:first-child {\n        display: inline-block;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content tbody tr td:nth-child(2) {\n        width: 100%;\n        display: block;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content tbody tr td:nth-child(3) {\n        min-width: 0 !important;\n        position: absolute;\n        right: 0;\n        top: -2%;\n        padding-right: 0px;\n    }\n    #__tealiumGDPRcpPrefs .privacy_prompt_content tbody tr:first-child {\n        position: absolute;\n        top: -9999px;\n        left: -9999px;\n    }\n}\n  \n'
				};
			}

			// --------------------------------------------------------
			function _constructEmptyConsentPreference() {
				var consentPreference = {
					isAccountOverride: false,
					isEnabled: false,
					single_cookie: true,
					categories: {
						analytics: {enabled: true, name: 'Analytics', tagid: []},
						affiliates: {enabled: true, name: 'Affiliates', tagid: []},
						display_ads: {enabled: true, name: 'Display Ad', tagid: []},
						search: {enabled: true, name: 'Search', tagid: []},
						email: {enabled: true, name: 'Email', tagid: []},
						personalization: {enabled: true, name: 'Personalization', tagid: []},
						social: {enabled: true, name: 'Social', tagid: []},
						big_data: {enabled: true, name: 'Big Data', tagid: []},
						misc: {enabled: true, name: 'Misc', tagid: []},
						cookiematch: {enabled: true, name: 'Cookie Match', tagid: []},
						cdp: {enabled: true, name: 'CDP', tagid: []},
						mobile: {enabled: true, name: 'Mobile', tagid: []},
						engagement: {enabled: true, name: 'Engagement', tagid: []},
						monitoring: {enabled: true, name: 'Monitoring', tagid: []},
						crm: {enabled: true, name: 'CRM', tagid: []}
					},
					content: _constructDefaultContent(),
					custom_tokens_definitions: [
						{
							title: "Company Logo URL",
							token: "company_logo_url"
						},
						{
							title: "Privacy Policy URL",
							token: "privacy_policy_url"
						}
					],
					languages: {
						en: {
							categories: {
								"analytics": {name: "", notes: ""},
								"affiliates": {name: "", notes: ""},
								"display_ads": {name: "", notes: ""},
								"search": {name: "", notes: ""},
								"email": {name: "", notes: ""},
								"personalization": {name: "", notes: ""},
								"social": {name: "", notes: ""},
								"big_data": {name: "", notes: ""},
								"misc": {name: "", notes: ""},
								"cookiematch": {name: "", notes: ""},
								"cdp": {name: "", notes: ""},
								"mobile": {name: "", notes: ""},
								"engagement": {name: "", notes: ""},
								"monitoring": {name: "", notes: ""},
								"crm": {name: "", notes: ""}
							},
							common_tokens: {
								title: "",
                message: "",
								confirmation_button: ""
							},
							custom_tokens: {
								company_logo_url: "",
								privacy_policy_url: ""
							},
							isDefault: true
						}
					}
				};

				// pre-categorize existing tags
				var tealiumCollectID = "20064";
				var tealiumCustomContainerID = "20010";
				var tealiumPixelContainerID = "20011";
				var tealiumGenericContainerID = "20067";
				var specialManageGroup = _getSpecialManageGroup();
				var uniqueIdentifier = {};
				var manageObj;
				var manageGroup;
				var newItem;
				_.each(utui.data.manage, function (tag) {
					if (tag.tag_id === tealiumCollectID) { // exclude Tealium Collect tag "20064"
						return;
					}
					manageObj = utui.config.manageList[tag.tag_id];
					manageGroup = specialManageGroup[manageObj.group];

					if (tag.tag_id !== tealiumCustomContainerID &&
						tag.tag_id !== tealiumPixelContainerID &&
						tag.tag_id !== tealiumGenericContainerID) {
						if (!uniqueIdentifier[tag.tag_id]) {
							// construct new item
							newItem = {
								"tag_id": tag.tag_id,
								"tag_name": manageObj.title,
								"isOn": true
							};
							// insert new item into category
							consentPreference.categories[manageGroup.tab].tagid.push(newItem);
							// update uniqueIdentifier map
							uniqueIdentifier[tag.tag_id] = tag.tag_id;
						}

					} else { // special-case Tealium Custom Container tag "20010" or Tealium Pixel Container tag "20011" or Tealium Generic Tag "20067"
						// construct new item
						newItem = {
							"tag_id": tag.tag_id,
							"tag_name": manageObj.title,
							"id": tag.id,
							"isOn": true
						};
						// insert new item into category
						consentPreference.categories[manageGroup.tab].tagid.push(newItem);
					}
				});

				return consentPreference;
			}

			// --------------------------------------------------------
			function _isValid() {
				var hasErrors = false;

				_hideModalErrorMessage('consent_preferences_dialog_addedit');
				return !hasErrors;
			}

			// --------------------------------------------------------
			function _destroyEditors() {
				_.forEach(_editors, function (editor, item) {
					if (!editor) return;
					editor.destroy();
					_editors[item] = undefined;
				});
			}

			// --------------------------------------------------------
			function _getDefaultLanguage(languages) {
				var key;

				_.each(_.keys(languages), function (k) {
					var lang = languages[k];
					if (lang.isDefault === true) {
						key = k;
					}
				});

				if (!key) {
					// just select first one
					for (var i in languages) {
						key = i;
						break;
					}
				}

				return key;
			}

			// --------------------------------------------------------
			function _getLanguageObj(key) {
				return utui.config.privacy_management.languages[key] || utui.config.privacy_management.languages['en'];
			}

			// --------------------------------------------------------
			function _canDeleteLanguage() {
				return _.size(_saveObj.languages) > 1;
			}

			// --------------------------------------------------------
			var _eventHandlers = {
				// --------------------------------------------------------
				onTopNavMenuClick: function (event) {
					event.preventDefault();

					_destroyEditors();

					var $el = $(this),
						tabId = $el.attr('id');

					_selectedTab = tabId;

					$modalDialog.find('.wizard_tab').removeClass('activeTab');
					$el.addClass('activeTab');

					// Render selected tab panel
					_panels[tabId].render();
					utui.ui.dialog.adjustPanelHeights(_namespace);
				},

				// --------------------------------------------------------
				onAddLanguageBtnClick: function (e) {
					var $el = $(e.currentTarget);

					if (!$el.hasClass('ui-state-disabled')) {
						utui.privacyManagement.addNewLanguageDialog.show(_eventHandlers.onNewLanguageAdded, Object.keys(_saveObj.languages));
					}
				},

				// --------------------------------------------------------
				onNewLanguageAdded: function (newLanguage) {
					_selectedLanguage = newLanguage;
					_saveObj.languages[newLanguage] = _constructEmptyConsentPreference().languages.en;
					_saveObj.languages[newLanguage].isDefault = false;
					// re-draw content body and bind event handlers
					_panels.tab_consent.render();
				},

				// --------------------------------------------------------
				onLanguageItemClick: function (e) {
					var $el = $(e.currentTarget);
					_selectedLanguage = $el.attr('data-id');

//					$el.addClass('selected').siblings().removeClass('selected');
					// re-draw content body and bind event handlers
					_panels.tab_consent.render();
				},

				// --------------------------------------------------------
				onToggleIsAccountOverrideBtnClick: function (e) {
					var $el = $(e.currentTarget);
					var isEnabled = _saveObj.isAccountOverride === true;

					if (!$el.hasClass('ui-state-disabled')) {
						if (!isEnabled) {
							// show Are you sure Dialog
							utui.privacyManagement.linkToPrivacyResourcesConfirmDialog.show(_eventHandlers.onConfirmLinkToPrivacyResourcesBtnClick);

						} else {
							_eventHandlers.onConfirmLinkToPrivacyResourcesBtnClick();
						}
					}
				},

				// --------------------------------------------------------
				onConfirmLinkToPrivacyResourcesBtnClick: function (e) {
					var isEnabled = _saveObj.isAccountOverride === true;
					var emptyConsentPreference;

					_saveObj.isAccountOverride = !isEnabled;

					if (_saveObj.isAccountOverride === true) {
						if (_accountLevelPrivacyResources && _accountLevelPrivacyResources.preferences) {
							_saveObj.languages = _accountLevelPrivacyResources.preferences.languages; // override with Account Level Privacy Resources
							_saveObj.custom_tokens_definitions = _accountLevelPrivacyResources.preferences.custom_tokens_definitions;
						}

					} else {
						if (utui.data.privacy_management && utui.data.privacy_management.preferences) {
							_saveObj.languages = utui.data.privacy_management.preferences.languages; // revert changes
							_saveObj.custom_tokens_definitions = utui.data.privacy_management.preferences.custom_tokens_definitions;

						} else {
							emptyConsentPreference = _constructEmptyConsentPreference();
							_saveObj.languages = emptyConsentPreference.languages; // reset
							_saveObj.custom_tokens_definitions = emptyConsentPreference.custom_tokens_definitions;
						}
					}
					_selectedLanguage = _getDefaultLanguage(_saveObj.languages); // reset default language

					// re-draw content body and bind event handlers
					_panels.tab_consent.render();
				},

				// --------------------------------------------------------
				onSetIsDefaultLanguage: function (e) {
					var $el = $(e.currentTarget);
					var isChecked = $el.prop('checked');

					if (isChecked) {
						for (var i in _saveObj.languages) {
							if (i == _selectedLanguage) {  // set isDefault for selected language
								_saveObj.languages[i].isDefault = true;

							} else { // unset isDefault for all other languages
								_saveObj.languages[i].isDefault = false;
							}
						}

					} else { // unset isDefault for selected language
						_saveObj.languages[_selectedLanguage].isDefault = false;
					}
					_panels.tab_consent.render();
				},

				// --------------------------------------------------------
				onDeleteLanguageBtnClick: function (e) {
					var $el = $(e.currentTarget);

					if (!$el.hasClass('ui-state-disabled')) {
						if (_canDeleteLanguage()) {
							var language = _getLanguageObj(_selectedLanguage);
							var displayName;
							if (language) {
								displayName = language.label + ' (' + language.value + ')';
								utui.privacyManagement.removeLanguageConfirmDialog.show(displayName, _eventHandlers.onConfirmDeleteLanguageBtnClick);
							}
						}
					}
				},

				// --------------------------------------------------------
				onConfirmDeleteLanguageBtnClick: function (e) {
					var isDefault = _saveObj.languages[_selectedLanguage].isDefault;

					// delete language from _saveObj and re-render
					delete _saveObj.languages[_selectedLanguage];
					_selectedLanguage = _getDefaultLanguage(_saveObj.languages);
					if (isDefault === true) {
						_saveObj.languages[_selectedLanguage].isDefault = isDefault; // Set isDefault 1st one
					}
					_panels.tab_consent.render();
				},

				// --------------------------------------------------------
				onPreviewLanguageBtnClick: function (e) {
					var lang = (_selectedTab === "tab_consent") ? _selectedLanguage : _getDefaultLanguage(_saveObj.languages);
					_util.preview.openRender(_util.preview.constants.PREFERENCES,_saveObj, lang, localize.t('tiq.dashboard.privacy_management.resource.explicit.title_text'));
				},

				// --------------------------------------------------------
				onUserInterfaceParametersControlClick: function (e) {
					var $el = $(e.currentTarget);
					var isSelected = $el.hasClass('selected');

					if (isSelected) {
						$el.removeClass('selected');
						$modalDialog.find('.js-user-interface-parameters').addClass('hidden');

					} else {
						$el.addClass('selected');
						$modalDialog.find('.js-user-interface-parameters').removeClass('hidden');
					}
				},

				// --------------------------------------------------------
				onCustomParametersControlClick: function (e) {
					var $el = $(e.currentTarget);
					var isSelected = $el.hasClass('selected');

					if (isSelected) {
						$el.removeClass('selected');
						$modalDialog.find('.js-custom-parameters').addClass('hidden');

					} else {
						$el.addClass('selected');
						$modalDialog.find('.js-custom-parameters').removeClass('hidden');
					}
				},

				// --------------------------------------------------------
				onAddNewCustomParameterBtnClick: function (e) {
					var $el = $(e.currentTarget);

					if (!$el.hasClass('ui-state-disabled')) {
						utui.privacyManagement.addNewCustomParameterDialog.show(_eventHandlers.onAddNewCustomParameter);
					}
				},

				// --------------------------------------------------------
				onDeleteCustomParameterBtnClick: function (e) {
					var $el = $(e.currentTarget);
					var id = $el.attr('data-id');
					var rmIdx = -1, idx = 0;

					if (!$el.hasClass('ui-state-disabled')) {
						while (rmIdx === -1 && idx < _saveObj.custom_tokens_definitions.length) {
							if (_saveObj.custom_tokens_definitions[idx].token === id) {
								rmIdx = idx;
							}
							idx++;
						}

						_saveObj.custom_tokens_definitions.splice(rmIdx, 1);

						_.each(_saveObj.languages, function (lObj, lKey) {
							delete _saveObj.languages[lKey].custom_tokens[id];
						});

						_panels[_selectedTab].render();

						// Expand Custom Parameters section custom_tokens
						if (!$modalDialog.find('.js-custom-parameters-control').hasClass('selected')) {
							$modalDialog.find('.js-custom-parameters-control').trigger('click');
						}
					}
				},

				// --------------------------------------------------------
				onAddNewCustomParameter: function () {
					var titleInput = $('#dialog_new_custom_parameter_title').val().trim();
					var invCharRgx;
					var newParameterKey;
					var errorMsg = null;

					if (titleInput.length > 0) {
						invCharRgx = /[^a-z0-9\s]/gi;

						if (titleInput.match(invCharRgx)) {
							errorMsg = localize.t('tiq.dashboard.privacy_management.account_defaults.parameter_invalid_chars');

						} else {
							newParameterKey = titleInput.toLowerCase().replace(/[^a-z0-9\s]/g, '').trim().replace(/\s{2,}/g, '_').replace(/\s/g, '_');
							_.each(_saveObj.custom_tokens_definitions, function (obj) {
								if (obj.token === newParameterKey) {
									errorMsg = localize.t('tiq.dashboard.privacy_management.consent_preferences.parameter_already_exists');
								}
							});
						}

						if (errorMsg === null) {
							_saveObj.custom_tokens_definitions.push({
								title: titleInput,
								token: newParameterKey
							});
							_.each(_saveObj.languages, function (langObj, langKey) {
								_saveObj.languages[langKey].custom_tokens[newParameterKey] = "";
							});
							_panels[_selectedTab].render();

							// Expand Custom Parameters section custom_tokens
							if (!$modalDialog.find('.js-custom-parameters-control').hasClass('selected')) {
								$modalDialog.find('.js-custom-parameters-control').trigger('click');
							}
						}
					}

					return errorMsg;
				},

				// --------------------------------------------------------
				onCategoryParametersControlClick: function (e) {
					var $el = $(e.currentTarget);
					var isSelected = $el.hasClass('selected');

					if (isSelected) {
						$el.removeClass('selected');
						$modalDialog.find('.js-category-parameters').addClass('hidden');

					} else {
						$el.addClass('selected');
						$modalDialog.find('.js-category-parameters').removeClass('hidden');
					}
				},

				// --------------------------------------------------------
				onFieldInputChange: function (e) {
					var $el = $(this),
						type = $el.attr('type'),
						value = $el.val(),
						attr = $el.attr('id');
					var $section = $el.closest('.js-section');
					var categoryNameRegex = /^(.+)(_name)$/;
					var categorNotesRegex = /^(.+)(_notes)$/;
					var key;

					if (type === 'checkbox') {
						attr = $el.attr('name');
						value = [];
						$modalDialog.find('input[name="' + attr + '"]:checked').each(function () {
							value.push($(this).val());
						});
						value = value.join(',');
					}

					attr = attr.replace(_selectedTab + '_', '');

					if (_selectedTab === 'tab_consent') {
						if ($section.length && $section.attr('data-section') === 'common_tokens') {
							_saveObj.languages[_selectedLanguage].common_tokens[attr] = value;

						} else if ($section.length && $section.attr('data-section') === 'custom_tokens') {
							_saveObj.languages[_selectedLanguage].custom_tokens[attr] = value;

						} else if ($section.length && $section.attr('data-section') === 'categories') {
							if (categoryNameRegex.test(attr)) {
								key = attr.replace(categoryNameRegex, '$1');
								if (_saveObj.languages[_selectedLanguage].categories[key]) {
									_saveObj.languages[_selectedLanguage].categories[key].name = value;
								}

							} else if (categorNotesRegex.test(attr)) {
								key = attr.replace(categorNotesRegex, '$1');
								if (_saveObj.languages[_selectedLanguage].categories[key]) {
									_saveObj.languages[_selectedLanguage].categories[key].notes = value;
								}
							}
						}

					} else if (_selectedTab === 'tab_customization') {
						_saveObj.content[attr] = value;

					} else if (_selectedTab === 'tab_options') {
       
					  attr = attr.replace(/\d$/,"");
						_saveObj[attr] = (value === 'true');
					}
				},

				// --------------------------------------------------------
				onRestoreDefaultBtnClick: function (e) {

					_public.modals.restoreDefaultContentConfirmDialog.show(function () {
						_.forEach(_editors, function (editor, item) {
							if (!editor) return;
							editor.destroy();
							_editors[item] = undefined;
						});
						_saveObj.content = _constructDefaultContent();
						_panels.tab_customization.render();
					});
				},

				// --------------------------------------------------------
				onCategoryItemClick: function (e) {
					var $el = $(e.currentTarget);
					_selectedCategory = $el.attr('data-id');

					// re-draw content body and bind event handlers
					_panels.tab_categories.render();
				},

				// --------------------------------------------------------
				onToggleEnableCategoryBtnClick: function (e) {
					var isEnabled = _saveObj.categories[_selectedCategory].enabled;

					_saveObj.categories[_selectedCategory].enabled = !isEnabled;
					// re-draw content body and bind event handlers
					_panels.tab_categories.render();
				},

				// --------------------------------------------------------
				onEditCategoryNameKeyUp: function (e) {
					var val = $(this).val();

					// Update UI
					$modalDialog.find('.js-item-category[data-id="' + _selectedCategory + '"] .js-category-title').attr('title', utui.util.safeEscape(val)).html(utui.util.safeEscape(val));
					// Set val in model
					_saveObj.categories[_selectedCategory].name = val;
				},

				// --------------------------------------------------------
				onSelectListCategoryChange: function (e) {
					var $el = $(e.currentTarget);
					var toCategory = $el.val(); // category to move tag to
					var fromCategory = $el.attr('data-from-category'); // category to remove tag from
					var tag_id = $el.attr('data-tag_id');
					var id = $el.attr('data-id');
					var tagIds = _saveObj.categories[fromCategory].tagid;

					var tagObj;
					var removedItem = [];
					for (var i = 0; i < tagIds.length; i++) {
						tagObj = tagIds[i];
						if (!id) {
							if (tagObj.tag_id === tag_id) {
								// remove item from tagid array
								removedItem = tagIds.splice(i, 1);
								break;
							}

						} else {
							if (tagObj.tag_id === tag_id && tagObj.id === id) {
								// remove item from tagid array
								removedItem = tagIds.splice(i, 1);
								break;
							}
						}
					}

					if (removedItem.length) {
						// move item to new category
						_saveObj.categories[toCategory].tagid.push(removedItem.pop());
						// re-draw content body and bind event handlers
						_panels.tab_categories.render();
					}
				},

				// --------------------------------------------------------
				onOmitTagBtnClick: function (e) {
					var $selectedOption = $modalDialog.find('#' + _namespace + '_manage_select').find(":selected");
					var value = $selectedOption.val();
					var id = $selectedOption.attr('data-id');
					var categoryKey = $selectedOption.attr('data-category-key');
					var tagIds = [];
					var tagObj;

					// turn tag off and render table
					if (value) {
						if (id) {
							value = value.split('_')[0]; // special-case Tealium Custom Container tag "20010" or Tealium Pixel Container tag "20011" or Tealium Generic Tag "20067"
						}
						tagIds = _saveObj.categories[categoryKey].tagid;

						for (var i = 0; i < tagIds.length; i++) {
							tagObj = tagIds[i];
							if (!id) {
								if (tagObj.tag_id === value) {
									// set tag item isOn=false
									tagObj.isOn = false;
									break;
								}

							} else {
								if (tagObj.tag_id === value && tagObj.id === id) {
									// set tag item isOn=false
									tagObj.isOn = false;
									break;
								}
							}
						}
						_panels.tab_options.render();
					}
				},

				// --------------------------------------------------------
				onRemoveTagFromOmittedBtnClick: function (e) {
					var $el = $(e.currentTarget);
					var tag_id = $el.attr('data-tag_id');
					var id = $el.attr('data-id');
					var categoryKey = $el.attr('data-category-key');
					var tagIds = [];
					var tagObj;

					if (tag_id) {
						if (id) {
							tag_id = tag_id.split('_')[0]; // special-case Tealium Custom Container tag "20010" or Tealium Pixel Container tag "20011" or Tealium Generic Tag "20067"
						}
						tagIds = _saveObj.categories[categoryKey].tagid;

						for (var i = 0; i < tagIds.length; i++) {
							tagObj = tagIds[i];
							if (!id) {
								if (tagObj.tag_id === tag_id) {
									// set tag item isOn=true
									tagObj.isOn = true;
									break;
								}

							} else {
								if (tagObj.tag_id === tag_id && tagObj.id === id) {
									// set tag item isOn=true
									tagObj.isOn = true;
									break;
								}
							}
						}
						_panels.tab_options.render();
					}
				},

				// --------------------------------------------------------
				onBtnCancelClick: function () {
					_destroyEditors();
					_hideModalErrorMessage('consent_preferences_dialog_addedit');
					utui.ui.dialog.dispose(_namespace);
          $.ui.dialog.maxZ = _maxZ;
					utui.util.pubsub.unsubscribe(utui.constants.privacy_management.ACCOUNT_DEFAULTS_UPDATED, _onAccountDefaultsUpdated);
				}
			};

			// --------------------------------------------------------
			var _bindUI = {
				// --------------------------------------------------------
				topNavMenu: function () {
					$modalDialog.find('.wizard_tab').safeOn('click', _eventHandlers.onTopNavMenuClick);
				},

				// --------------------------------------------------------
				contextItems: function () {
					// tab_consent
					$modalDialog.find('#' + _namespace + '_addLanguageBtn').safeOn('click', _eventHandlers.onAddLanguageBtnClick);
					$modalDialog.find('.js-item-language').safeOn('click', _eventHandlers.onLanguageItemClick);
					$modalDialog.find('#' + _namespace + '_toggleEnableIsAccountOverrideBtn').safeOn('click', _eventHandlers.onToggleIsAccountOverrideBtnClick);
					// Add tooltip to the Toggle Account Level Privacy Resources button
					var tooltipObj = {};
					tooltipObj[_namespace + '_toggleEnableIsAccountOverrideBtn'] = {
						gravity: 'ne'
					};
					utui.util.addTooltip(tooltipObj);

					// tab_categories
					$modalDialog.find('.js-item-category').safeOn('click', _eventHandlers.onCategoryItemClick);
					$modalDialog.find('.js-view-all-tags').safeOn('click', _eventHandlers.onCategoryItemClick);
				},

				// --------------------------------------------------------
				headerItems: function () {
					// tab_consent
					$modalDialog.find('#' + _namespace + '_setIsDefaultLanguageCkbx').on('change', _eventHandlers.onSetIsDefaultLanguage);
					$modalDialog.find('#' + _namespace + '_deleteLanguageBtn').safeOn('click', _eventHandlers.onDeleteLanguageBtnClick);
					$modalDialog.find('#' + _namespace + '_previewLanguageBtn').safeOn('click', _eventHandlers.onPreviewLanguageBtnClick);
					// Add tooltip to the Delete Language button
					var tooltipObj = {};
					tooltipObj[_namespace + '_deleteLanguageBtn'] = {
						gravity: 'ne'
					};
					utui.util.addTooltip(tooltipObj);

					// tab_customization
					$modalDialog.find('#' + _namespace + '_restoreDefaultBtn').safeOn('click', _eventHandlers.onRestoreDefaultBtnClick);

					// tab_categories
					$modalDialog.find('#' + _namespace + '_toggleEnableCategoryBtn').safeOn('click', _eventHandlers.onToggleEnableCategoryBtnClick);
					$modalDialog.find('.js-selected-category-input').safeOn('keyup', _eventHandlers.onEditCategoryNameKeyUp);
				},

				// --------------------------------------------------------
				formFields: function () {
					$modalDialog.find('.js-user-interface-parameters-control').safeOn('click', _eventHandlers.onUserInterfaceParametersControlClick);
					$modalDialog.find('.js-custom-parameters-control').safeOn('click', _eventHandlers.onCustomParametersControlClick);
					$modalDialog.find('#' + _namespace + '_addNewCustomParameterBtn').safeOn('click', _eventHandlers.onAddNewCustomParameterBtnClick);
					$modalDialog.find('.js-custom-parameters-delete').safeOn('click', _eventHandlers.onDeleteCustomParameterBtnClick);
					$modalDialog.find('.js-category-parameters-control').safeOn('click', _eventHandlers.onCategoryParametersControlClick);
					$modalDialog.find('input:not(.js-not-form-body), textarea').safeOn('change', _eventHandlers.onFieldInputChange);

					// tab_options
					$modalDialog.find('#' + _selectedTab + '_single_cookie').select2().safeOn('change', _eventHandlers.onFieldInputChange);
        },

				// --------------------------------------------------------
				tabCategoriesBody: function () {
					$modalDialog.find('.js-select-list-category').select2().safeOn('change', _eventHandlers.onSelectListCategoryChange);
				},

				// --------------------------------------------------------
				tabOptionsBody: function () {
					$modalDialog.find('#' + _namespace + '_manage_select').select2({
						placeholder: localize.t('tiq.dashboard.privacy_management.consent_preferences.select_a_tag'),
						dropdownCssClass: 'tags-drop-down',
						formatResult: _view.tab_options.tagResultOptions,
						matcher: function (term, text, option) {
							return text.toUpperCase().indexOf(term.toUpperCase()) >= 0 || option.val().toUpperCase().indexOf(term.toUpperCase()) >= 0;
						}
					});
					$modalDialog.find('#' + _namespace + '_omitTagBtn').safeOn('click', _eventHandlers.onOmitTagBtnClick);
					$modalDialog.find('.js-remove-tag-from-omitted-btn').safeOn('click', _eventHandlers.onRemoveTagFromOmittedBtnClick)
				}
			};

			// ------------------------------------
			var _panels = {
				// ------------------------------------
				modal: {
					// ------------------------------------
					showContext: function () {
						var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
						$accordionContainer.addClass('has-sidebar');
						$accordionContainer.find('.sidebar-container').show();
					},

					// ------------------------------------
					hideContext: function () {
						var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
						$accordionContainer.removeClass('has-sidebar');
						$accordionContainer.find('.sidebar-container').hide();
					}

				},

				// ------------------------------------
				tab_consent: {
					// ------------------------------------
					render: function () {
						var slug = 'tab_consent',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							userInterfaceFieldset = _consentInputFields.user_interface_params.fieldset,
							categoryFieldset = _consentInputFields.category_params.fieldset,
							context = utui.ui.template.contextBox(_view.tab_consent.context(), _view.tab_consent.contextTitle()),
							header = _view.tab_consent.contentHeader(),
							content = _view.tab_consent.contentBody({
								categoryFieldset: categoryFieldset,
								slug: slug,
								userInterfaceFieldset: userInterfaceFieldset
							}),
							$nextBtn = $('#' + _namespace + '_nextBtn');

						// show context panel
						_panels.modal.showContext();

						$header
							.empty()
							.append(header);

						$body
							.empty()
							.append(content);

						$context
							.empty()
							.append(context);

						$nextBtn.show();

						_bindUI.contextItems();
						_bindUI.headerItems();
						_bindUI.formFields();

						// Set values from _saveObj
						for (var i in userInterfaceFieldset) {
							var val = _saveObj.languages[_selectedLanguage].common_tokens[i],
								fieldType = userInterfaceFieldset[i].fieldType;
							if (val) {
								if (fieldType !== 'checkboxGroup') {
									$body.find('#tab_consent_' + i).val(val);
								} else {
									for (var j = 0; j < val.length; j++) {
										$body.find('[name="tab_consent_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
									}
								}
							}
						}

						// Set categories name/notes....
						var categories = _saveObj.languages[_selectedLanguage].categories;
						var expand_category_parameters_section = false;
						var categoryNameRegex = /^(.+)(_name)$/;
						var categorNotesRegex = /^(.+)(_notes)$/;
						var key;
						for (var i in categoryFieldset) {
							var val;
							var fieldType;
							if (categoryNameRegex.test(i)) {
								key = i.replace(categoryNameRegex, '$1');
								if (key) {
									val = (categories[key] && categories[key].name);
									fieldType = categoryFieldset[i].fieldType;
								}

							} else if (categorNotesRegex.test(i)) {
								key = i.replace(categorNotesRegex, '$1');
								if (key) {
									val = (categories[key] && categories[key].notes);
									fieldType = categoryFieldset[i].fieldType;
								}
							}
							if (val) {
								expand_category_parameters_section = true;
								if (fieldType !== 'checkboxGroup') {
									$body.find('#tab_consent_' + i).val(val);
								} else {
									for (var j = 0; j < val.length; j++) {
										$body.find('[name="tab_consent_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
									}
								}
							}
						}

						// Expand Category Parameters section
						if (expand_category_parameters_section) {
							if (!$body.find('.js-category-parameters-control').hasClass('selected')) {
								$body.find('.js-category-parameters-control').trigger('click');
							}
						}

						// Expand Custom Parameters section custom_tokens
						if ($('.js-custom-param').filter(function () {
							return $(this).val();
						}).length > 0) {
							if (!$body.find('.js-custom-parameters-control').hasClass('selected')) {
								$body.find('.js-custom-parameters-control').trigger('click');
							}
						}

						// Disable input fields and buttons
						if (_saveObj.isAccountOverride === true) { // disable input and text areas fields
							$header.find('#' + _namespace + '_setIsDefaultLanguageCkbx, #' + _namespace + '_deleteLanguageBtn')
								.addClass('ui-state-disabled').attr({'disabled': 'disabled'});
							$body.find('input[type="text"], textarea, #' + _namespace + '_addNewCustomParameterBtn, .js-custom-parameters-delete')
								.addClass('ui-state-disabled').attr({'disabled': 'disabled'});
							$context.find('#' + _namespace + '_addLanguageBtn')
								.addClass('ui-state-disabled').attr({'disabled': 'disabled'});
						}
					}
				},
				// ------------------------------------
				tab_customization: {
					// ------------------------------------
					render: function () {
						var slug = 'tab_customization',
							$content = $('#' + _namespace),
							_containerName = 'test_config_',
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							fieldCollection = _customizationInputFields.fieldset,
							header = _view.tab_customization.contentHeader(),
							content = _view.tab_customization.contentBody(fieldCollection, slug),
							$nextBtn = $('#' + _namespace + '_nextBtn');

						// hide context panel
						_panels.modal.hideContext();

						$header
							.empty()
							.append(header);

						$body
							.empty()
							.append(content);

						$nextBtn.show();

						_bindUI.headerItems();
						_bindUI.formFields();

						_editors["html"] = _util.createAceEditor($("#html-ace-editor"), "html", _saveObj.content.html, function () {
							_saveObj.content.html = _editors["html"].getValue();
						});
						_editors["css"] = _util.createAceEditor($("#css-ace-editor"), "css", _saveObj.content.css, function () {
							_saveObj.content.css = _editors["css"].getValue();
						});
						_editors["javascript"] = _util.createAceEditor($("#js-ace-editor"), "javascript", _saveObj.content.javascript, function () {
							_saveObj.content.javascript = _editors["javascript"].getValue();
						});

						_editors["css"].focus();

						$(".privacy_management_ace_editor_exapnd").safeOn("click", function () {
							var type = $(this).data("type");
							_util.aceEditorModal.render(_editors[type], type)
						});

						// Set values from _saveObj
						for (var i in fieldCollection) {
							if (!fieldCollection.hasOwnProperty(i)) {
								continue;
							}
							var val = _saveObj[i],
								fieldType = fieldCollection[i].fieldType;
							if (val) {
								if (fieldType !== 'checkboxGroup') {
									$body.find('#' + _containerName + i).val(val);
								} else {
									for (var j = 0; j < val.length; j++) {
										$body.find('[name="' + _containerName + i + '"][value="' + val[j] + '"]').prop('checked', true);
									}
								}
							}
						}
					}
				},
				// ------------------------------------
				tab_categories: {
					// ------------------------------------
					render: function () {
						var slug = 'tab_categories',
							$content = $('#' + _namespace),
							$header = $content.find('.main-header'),
							$body = $content.find('.main-body'),
							$context = $content.find('.sidebar-body'),
							context = utui.ui.template.contextBox(_view.tab_categories.context(), _view.tab_categories.contextTitle()),
							header = _view.tab_categories.contentHeader(),
							content = _view.tab_categories.contentBody(),
							$nextBtn = $('#' + _namespace + '_nextBtn');

						// show context panel
						_panels.modal.showContext();

						$header
							.empty()
							.append(header);

						$body
							.empty()
							.append(content);

						$context
							.empty()
							.append(context);

						$nextBtn.show();

						_bindUI.contextItems();
						_bindUI.headerItems();
						_bindUI.tabCategoriesBody();
					}
				},
				// ------------------------------------
				tab_options: {
          // ------------------------------------
          render: function () {
            var slug                      = 'tab_options',
                $content                  = $('#' + _namespace),
                $header                   = $content.find('.main-header'),
                $body                     = $content.find('.main-body'),
                cookiePreferencesFieldset = _optionsInputFields.cookie_preferences.fieldset,
                defaultStateFieldset      = _optionsInputFields.default_state.fieldset,
                content                   = _view.tab_options.contentBody({
                  cookiePreferencesFieldset: cookiePreferencesFieldset,
                  defaultStateFieldset     : defaultStateFieldset,
                  slug                     : slug
                }),
                $nextBtn                  = $('#' + _namespace + '_nextBtn');
            
            // hide context panel
            _panels.modal.hideContext();
            
            $header.empty();
            
            $body
              .empty()
              .append(content);
            
            $nextBtn.hide();
            
            _bindUI.formFields();
            _bindUI.tabOptionsBody();
            
            
            
            // Set values from _saveObj
            for (var i in cookiePreferencesFieldset) {
              var val       = (_saveObj.hasOwnProperty(i)) ? '' + _saveObj[i] : '',
                  fieldType = cookiePreferencesFieldset[i].fieldType;
              if (val) {
                if (fieldType !== 'checkboxGroup') {
                  if (fieldType !== 'select') {
                    $body.find('#tab_options_' + i).val(val);
                    
                  } else {
                    // set select2 value
                    $body.find('#tab_options_' + i).select2('val', val);
                  }
                  
                } else {
                  for (var j = 0; j < val.length; j++) {
                    $body.find('[name="tab_options_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
                  }
                }
              }
            }
            
            for (var i in defaultStateFieldset) {
              var val       = (_saveObj.hasOwnProperty(i)) ? _saveObj[i] : false,
                  fieldType = defaultStateFieldset[i].fieldType;
              
              if (fieldType === 'checkbox') {
                  $body.find('#' + slug + '_'+i+ (val === true ? '1' : '2')).prop('checked', true);
              }
            }
            $('#' + slug + '_default_state').buttonset();
          }
        }
			};

			// --------------------------------------------------------
			var _view = {
				// --------------------------------------------------------
				modal: {
					// --------------------------------------------------------
					contentHeader: function () {
						var v = '';

						v += '<div id="tab_consent" class="wizard_tab activeTab">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.content') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.configure_text_to_be_displayed') + '</p>';
						v += '</div>';

						v += '<div id="tab_customization" class="wizard_tab">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.customization') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.modify_css') + '</p>';
						v += '</div>';

						v += '<div id="tab_categories" class="wizard_tab">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.categories') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.sort_tags_into_groupings') + '</p>';
						v += '</div>';

						v += '<div id="tab_options" class="wizard_tab activeTabLast">';
						v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.options') + '</h2>';
						v += '  <p>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.omit_tags') + '</p>';
						v += '</div>';

						return v;
					}
				},

				// --------------------------------------------------------
				tab_consent: {
					// --------------------------------------------------------
					contextTitle: function () {
						var v = '';

						v += '<div class="wizard-context-title">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.global_parameters');
						if (!$.isEmptyObject(_accountLevelPrivacyResources) || _saveObj.isAccountOverride === true) {
							v += '	<div id="' + _namespace + '_toggleEnableIsAccountOverrideBtn" class="container_status_wrapper pull-right" style="margin-right: 0;">';

						} else {
							v += '	<div id="' + _namespace + '_toggleEnableIsAccountOverrideBtn" class="container_status_wrapper pull-right ui-state-disabled" title="' + utui.tooltip.privacy_management.toggle_account_level_privacy_resources_disabled + '" style="margin-right: 0;">';
						}

						if (_saveObj.isAccountOverride === true) {
							v += '		<span class="container_status_active"></span>';

						} else {
							v += '		<span class="container_status_inactive"></span>';
						}
						v += '	</div>';
						v += '</div>';

						if (!utui.permissions.canManageAccount()) {
							v += '<div class="wizard-context-content">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.global_parameters_notice_no_permission', {link: '<a href="#" class="hyper" onclick="common.utils.openWindow(\'' + common.community.consent_preferences_manager + '\'); return false;">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tealium_learning_community') + '</a>'}) + '</div>';

						} else {
							v += '<div class="wizard-context-content">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.global_parameters_notice', {
								link1: '<a href="#" class="hyper" onclick="common.utils.openWindow(\'' + common.community.consent_management_global_consent_parameters + '\'); return false;">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.global_parameters') + '</a>',
								link2: '<a href="#" class="hyper" onclick="common.utils.openWindow(\'' + common.community.consent_preferences_manager + '\'); return false;">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tealium_learning_community') + '</a>'
							}) + '</div>';
							// v += '<div class="wizard-context-content">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.global_parameters_notice', {link1: '<a href="#" class="hyper" onclick="utui.privacyManagement.accountDefaults.show(); return false;">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.global_parameters') + '</a>', link2: '<a href="#" class="hyper" onclick="common.utils.openWindow(\'' + common.community.consent_preferences_manager + '\'); return false;">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tealium_learning_community') + '</a>'}) + '</div>';
						}

						return v;
					},

					// --------------------------------------------------------
					context: function () {
						var lang = null;
						var isDefault = false;
						var sortedLanguages = [];
						var displayName;
						var v = '';

						v += '<div class="wizard-context-title">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.language');
						v += '<a href="#" id="' + _namespace + '_addLanguageBtn" class="btn i-color-add btn-mini alignright"><i class="icon-plus"></i> ' + localize.t('tiq.dashboard.privacy_management.consent_preferences.add') + '</a>';
						v += '</div>';
						v += '<ul class="wizard-context-ul" id="' + _namespace + '_listLanguages" style="margin-top: 10px;">';
						// loop thru assigned languages
						if (_saveObj && _saveObj.languages) {
							sortedLanguages = _sortLanguagesByName($.map(_.keys(_saveObj.languages), function (value, index) {
								return $.extend(true, {}, utui.config.privacy_management.languages[value], {isDefault: _saveObj.languages[value].isDefault});
							}));
							for (var i in sortedLanguages) {
								isDefault = sortedLanguages[i].isDefault;
								lang = _getLanguageObj(sortedLanguages[i].value);
								if (lang) {
									displayName = lang.label + ' (' + lang.value + ')';
									v += '	<li class="js-item-language' + ((lang.value === _selectedLanguage) ? ' selected' : '') + '" data-id="' + lang.value + '">';
									v += '		<a href="#" class="item-language" data-is-default-language="' + isDefault + '"> <span title="' + displayName + '">' + displayName + '</span></a>';
									v += '	</li>';
								}
							}
						}
						v += '</ul>';

						return v;
					},

					// --------------------------------------------------------
					contentHeader: function () {
						var language = _getLanguageObj(_selectedLanguage);
						var isDefault = _saveObj.languages[_selectedLanguage].isDefault;
						var isLastLanguage = !_canDeleteLanguage();
						var displayName;
						var v = '';

						if (language) {
							displayName = language.label + ' (' + language.value + ')';
							v += '<div class="consent-header-panel">';
							v += '	<span class="title js-selected-lang">' + displayName + '</span>';
							v += '	<div class="alignright" style="margin-top: -4px;">';
							if (isLastLanguage) {
								v += '		<input class="js-not-form-body ui-state-disabled" disabled id="' + _namespace + '_setIsDefaultLanguageCkbx" type="checkbox"' + ((isDefault === true) ? ' checked' : '') + ' /> <label for="' + _namespace + '_setIsDefaultLanguageCkbx">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.makeDefaultLanguage') + '</label>';
								v += '		<a href="#" id="' + _namespace + '_deleteLanguageBtn" class="btn btn-mini i-color-delete ui-state-disabled" title="' + utui.tooltip.privacy_management.delete_language_disabled + '"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>';

							} else {
								v += '		<input class="js-not-form-body" id="' + _namespace + '_setIsDefaultLanguageCkbx" type="checkbox"' + ((isDefault === true) ? ' disabled checked' : '') + ' /> <label for="' + _namespace + '_setIsDefaultLanguageCkbx">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.makeDefaultLanguage') + '</label>';
								v += '		<a href="#" id="' + _namespace + '_deleteLanguageBtn" class="btn btn-mini i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>';
							}
							v += '		<a href="#" id="' + _namespace + '_previewLanguageBtn" class="btn btn-mini i-color-add"><i class="icon-eye-open"></i> ' + localize.t('tiq.dashboard.privacy_management.consent_preferences.preview') + '</a>';
							v += '	</div>';
							v += '</div>';
						}

						return v;
					},

					// --------------------------------------------------------
					contentBody: function (options) {
						var userInterfaceFieldsetCollection = utui.ui.template.form.fieldsetCollectionView(options.userInterfaceFieldset, options.slug, true);
						var categoryFieldsetCollection = utui.ui.template.form.fieldsetCollectionView(options.categoryFieldset, options.slug, true);
						var v = '';

						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control selected js-user-interface-parameters-control">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.user_interface_parameters') + '</div></div></div></h2>';
						v += '<div class="section-padded-top-bottom js-section js-user-interface-parameters" data-section="common_tokens">';
						v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(userInterfaceFieldsetCollection), false, false);
						v += '	</div></div></div>';
						v += '</div>';

						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control js-custom-parameters-control">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.custom_parameters') + '</div></div></div></h2>';
						v += '<div class="section-padded-top-bottom js-section js-custom-parameters hidden" data-section="custom_tokens">';
						v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += _view.tab_consent.customParametersContentBody();
						v += '	</div></div></div>';
						v += '</div>';

						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control js-category-parameters-control">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.category_parameters') + '</div></div></div></h2>';
						v += '<div class="section-padded-top-bottom js-section js-category-parameters hidden" data-section="categories">';
						v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(categoryFieldsetCollection), false, false);
						v += '	</div></div></div>';
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					customParametersContentBody: function () {
						// Handle the case where a language doesn't exist in a tab
						if (typeof _saveObj.languages[_selectedLanguage] === 'undefined') {
							_selectedLanguage = _getDefaultLanguage(_saveObj);
						}
						var cpVal;
						var v = '';
						v += '<div class="container-fluid"><div class="row-fluid">';
						v += '<div class="span12"><i class="contextHelpLink icon-question-sign" onclick="common.utils.openWindow(\'' + common.community.consent_preferences_manager + '\'); return false;"></i> ' + localize.t('tiq.dashboard.privacy_management.consent_preferences.learn_more_cust_params', {link: '<a href="#" class="hyper" onclick="common.utils.openWindow(\'' + common.community.consent_preferences_manager + '\'); return false;">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tealium_learning_community') + '</a>'}) + '</div>';

						_.each(_saveObj.custom_tokens_definitions, function (obj) {
							// Fix the DM if the save dropped empty objects
							_saveObj.languages[_selectedLanguage].custom_tokens = _saveObj.languages[_selectedLanguage].custom_tokens || {};
							if (typeof _saveObj.languages[_selectedLanguage].custom_tokens[obj.token] === 'undefined') {
								_saveObj.languages[_selectedLanguage].custom_tokens[obj.token] = "";
							}

							v += '<div class="form-group">';
							v += '	<div class="row-message"></div>';
							v += '	<div class="row-fluid">';
							v += '		<div class="span3">';
							v += '			<div class="field-title">' + utui.util.safeEscape(obj.title) + '</div>';
							v += '		</div>';
							v += '		<div class="span7">';
							v += '			<div class="field-content">';
							cpVal = _saveObj.languages[_selectedLanguage].custom_tokens[obj.token];
							v += '				<input id="' + _selectedTab + '_' + obj.token + '" class="js-custom-param" type="text" size="50" value="' + utui.util.safeEscape(cpVal) + '">';
							v += '				<a href="#" data-id="' + obj.token + '" class="btn btn-mini i-color-delete js-custom-parameters-delete"><i class="icon-trash"></i></a>';
							v += '				<span class="inline-label">{{' + obj.token + '}}</span>';
							v += '			</div>';
							v += '			<div class="field-description"></div>';
							v += '		</div>';
							v += '	</div>';
							v += '</div>';
						});

						v += '<div style="margin-top:10px;"><a href="#" id="' + _namespace + '_addNewCustomParameterBtn" class="btn btn-mini i-color-copy"><i class="icon-plus"></i> ' + localize.t('tiq.dashboard.privacy_management.consent_preferences.add_parameter') + '</a></div>';
						v += '</div></div>';

						return v;
					}
				},

				// --------------------------------------------------------
				tab_customization: {
					// --------------------------------------------------------
					contentHeader: function () {
						var v = '';

						v += '<div class="consent-header-panel">';
						v += '	<span><i class="contextHelpLink icon-question-sign" onclick="common.utils.openWindow(\'' + common.community.consent_preferences_manager + '\'); return false;"></i> ' + localize.t('tiq.dashboard.privacy_management.consent_preferences.learn_more_customization_privacy_prompts') + ' <a class="hyper" href="' + common.community.consent_preferences_manager + '" target="_blank">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tealium_learning_community') + '</a>.</span>';
						v += '	<div class="alignright" style="margin-top: -4px;">';
						v += '		<a href="#" id="' + _namespace + '_restoreDefaultBtn" class="btn btn-mini i-color-delete"><i class="icon-undo"></i> ' + localize.t('tiq.dashboard.privacy_management.consent_preferences.restore_default') + '</a>';
						v += '		<a href="#" id="' + _namespace + '_previewLanguageBtn" class="btn btn-mini i-color-add"><i class="icon-eye-open"></i> ' + localize.t('tiq.dashboard.privacy_management.consent_preferences.preview') + '</a>';
						v += '	</div>';
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					contentBody: function (fieldset, slug) {

						var fieldsetCollection = '';

						for (var key in fieldset) {
							if (!fieldset.hasOwnProperty(key)) continue;

							var field = fieldset[key];

							fieldsetCollection += '<div class="form-group">' +
								'<div class="row-fluid">' +
								'<div class="span1">' +
								'<div class="field-title">' + field.label + '</div>' +
								'</div>' +
								'<div class="span11">' +
								field.customRenderer.getView() +
								'<div class="field-description"></div>' +
								'</div>' +
								'</div>' +
								'</div>';
						}

						// fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, slug, true);

						var v = '';

						v += '<div class="container-fluid-small"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
						v += '</div></div></div>';

						return '<div class="section-padded-top-bottom">' + v + '</div>';
					}
				},

				// --------------------------------------------------------
				tab_categories: {
					// --------------------------------------------------------
					contextTitle: function () {
						var v = '';

						v += '<div class="context-view-all"><ul class="wizard-context-ul"><li class="js-view-all-tags' + ((_selectedCategory === _all_tags) ? ' selected' : '') + '" data-id="' + _all_tags + '"><a href="javascript:;" class="hyper">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.view_all_tags') + '</a></li></ul>';
            v += '<p class="collect-notice">'+localize.t('tiq.dashboard.privacy_management.consent_preferences.collect_notice')+'</p></div>';
						v += '<div class="wizard-context-title">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.categories') + '</div>';

						return v;
					},

					// --------------------------------------------------------
					context: function () {
						var categoryObj;
						var v = '';

						// default selected category
						if (!_selectedCategory) {
							_selectedCategory = 'analytics'; //TODO: mco find another way to default selected category
						}

						v += '<ul class="wizard-context-ul" id="' + _namespace + '_listLanguages">';
						// loop thru categories
						if (_saveObj && _saveObj.categories) {
							for (var i in _saveObj.categories) {
								categoryObj = _saveObj.categories[i];
								v += '	<li class="js-item-category' + ((i === _selectedCategory) ? ' selected' : '') + '" data-id="' + i + '">';
								v += '		<div class="category-count sce-count pull-right">' + categoryObj.tagid.length + '</div>';
								v += '		<a href="#"><span class="js-category-title" title="' + utui.util.safeEscape(categoryObj.name) + '">';
								v += '			<span class="category-nav-title category-status' + ((categoryObj.enabled === true) ? ' statusOn' : ' statusOff') + '"></span>';
								v += utui.util.safeEscape(categoryObj.name) + '</span>';
								v += '		</a>';
								v += '	</li>';
							}
						}
						v += '</ul>';

						return v;
					},

					// --------------------------------------------------------
					contentHeader: function () {
						var category = _saveObj.categories[_selectedCategory];
						var v = '';

						v += '<div class="consent-header-panel">';
						if (_selectedCategory !== _all_tags) {
							v += '  <span class="title">' + utui.util.safeEscape(category.name) + '</span>';
							v += '	<div id="' + _namespace + '_toggleEnableCategoryBtn" class="container_status_wrapper pull-right">';
							if (category.enabled === true) {
								v += '		<span class="container_status_active"></span>';

							} else {
								v += '		<span class="container_status_inactive"></span>';
							}
							v += '	</div>';

						} else {
							v += '  <span>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.all_tags') + '</span>';
						}
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					tagRow: function (tagObj, selectedCategory) {
						var categoryObj;
						var v = '';

						v += '	<div class="row-fluid">';
						v += '		<div class="span12" style="border-bottom: 1px solid #EEE; padding: 10px 0 0 20px;">';
						v += '		<div class="span6">';
						v += '			<ul class="simple-listing">';
						v += '				<li>';
						v += '					<span>' + tagObj.tag_name + ((tagObj.id) ? ' [UID ' + tagObj.id + ']' : '') + '</span>';
						v += '				</li>';
						v += '			</ul>';
						v += '		</div>';
						v += '		<div class="span6">';
						v += '			<ul class="simple-listing">';
						v += '				<li>';
						v += '					<select class="js-select-list-category" data-tag_id="' + tagObj.tag_id + '" data-id="' + (tagObj.id || "") + '" data-from-category="' + selectedCategory + '">';
						for (var i in _saveObj.categories) {
							categoryObj = _saveObj.categories[i];
							v += '						<option value="' + i + '" ' + ((i === selectedCategory) ? 'selected' : '') + '>' + categoryObj.name + '</option>';
						}
						v += '					</select>';
						v += '				</li>';
						v += '			</ul>';
						v += '		</div>';
						v += '		</div>';
						v += '	</div>';

						return v;
					},

					// --------------------------------------------------------
					contentBody: function () {
						var chosenCategory = _saveObj.categories[_selectedCategory];
						var categoryObj;
						var tagObj;
						var tagIds;
						var v = '';

						v += '<div class="container-fluid" style="padding: 0;">';
						if (chosenCategory && _.size(chosenCategory.tagid) > 0) {
							// loop thru chosen categories tags
							for (var i in chosenCategory.tagid) {
								tagObj = chosenCategory.tagid[i];
								v += _view.tab_categories.tagRow(tagObj, _selectedCategory);
							}

						} else if (_selectedCategory === _all_tags) {
							// loop thru ALL categories tags
							for (var i in _saveObj.categories) {
								categoryObj = _saveObj.categories[i];
								tagIds = categoryObj.tagid;
								if (tagIds && tagIds.length > 0) {
									for (var j in tagIds) {
										tagObj = tagIds[j];
										v += _view.tab_categories.tagRow(tagObj, i);
									}
								}
							}
						}
						v += '</div>';

						return v;
					}
				},

				// --------------------------------------------------------
				tab_options: {
					// --------------------------------------------------------
					contentBody: function (options) {
						var cookiePreferencesFieldsetCollection = utui.ui.template.form.fieldsetCollectionView(options.cookiePreferencesFieldset, options.slug, true);
						var defaultStateFieldset = utui.ui.template.form.fieldsetCollectionView(options.defaultStateFieldset, options.slug, true);
						var categoryObj;
						var tagIds;
						var tagObj;
						var omittedTags = [];
						var ommitedTagObj;
						var title;
						var v = '';

						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.cookie_preferences') + '</div></div></div></h2>';
						v += '<div class="section-padded-top-bottom js-section" data-section="single_cookie">';
						v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(cookiePreferencesFieldsetCollection), false, false);
						v += '	</div></div></div>';
						v += '</div>';
            
						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.default_state') + '</div></div></div></h2>';
						v += '<div class="section-padded-top-bottom js-section" data-section="single_cookie">';
						v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
						v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(defaultStateFieldset), false, false);
						v += '	</div></div></div>';
						v += '</div>';

						v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tags_to_omit') + '</div></div></div></h2>';
						v += '<div class="container-fluid">';
						v += '	<div class="row-fluid">';
						v += '		<div class="span12">';
						v += localize.t('tiq.dashboard.privacy_management.consent_preferences.select_non_tracking_tags');
						v += '		</div>';
						v += '	</div>';
						v += '	<div class="row-fluid">';
						v += '		<div class="span12">';
						v += '			<div>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.tags') + ': ';
						v += '				<select style="width:250px; margin-right:10px" class="js-manage-select" id="' + _namespace + '_manage_select" name="' + _namespace + '_manage_select">';
						v += '					<option></option>'; // empty option for placeholder text
						for (var i in _saveObj.categories) {
							categoryObj = _saveObj.categories[i];
							tagIds = categoryObj.tagid;
							if (tagIds && tagIds.length > 0) {
								for (var j in tagIds) {
									tagObj = tagIds[j];
									if (tagObj.isOn === true) { // only append isOn=true options
										v += '<option value="' + tagObj.tag_id + ((tagObj.id) ? '_' + tagObj.id : '') + '" data-id="' + (tagObj.id || "") + '" data-category-key="' + i + '">' + tagObj.tag_name + ((tagObj.id) ? ' [UID ' + tagObj.id + ']' : '') + '</option>';
									} else {
										omittedTags.push($.extend(true, tagObj, {"category": i})); // append category to copy of tagObj
									}
								}
							}
						}
						v += '				</select>';
						v += '				<button class="btn" id="' + _namespace + '_omitTagBtn">' + localize.t('tiq.dashboard.privacy_management.consent_preferences.omit_tag') + '</button>';
						v += '			</div>';
						v += '		</div>';
						v += '	</div>';
						if (omittedTags.length) {
							v += '	<div class="tag-table">';
							v += '		<div class="row-fluid">';
							v += '			<div class="span12 tag-table-header">';
							v += '				<div class="span6"><h4>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.vendor') + '</h4></div>';
							v += '				<div class="span6"></div>';
							v += '			</div>';
							v += '		</div>';
							for (var i in omittedTags) {
								ommitedTagObj = omittedTags[i];
								title = ommitedTagObj.tag_name + ((ommitedTagObj.id) ? ' [UID ' + ommitedTagObj.id + ']' : '');
								v += '		<div class="row-fluid tag-table-row-outer">';
								v += '			<div class="span12 tag-table-row-inner">';
								v += '				<div class="span6" title="' + title + '">' + title + '</div>';
								v += '				<div class="span6"><button class="btn i-color-delete js-remove-tag-from-omitted-btn pull-right" data-tag_id="' + ommitedTagObj.tag_id + ((ommitedTagObj.id) ? '_' + ommitedTagObj.id : '') + '" data-id="' + (ommitedTagObj.id || "") + '" data-category-key="' + ommitedTagObj.category + '"><i class="icon-remove"></i>&nbsp;' + localize.t('tiq.dialog.button.remove') + '</button></div>';
								v += '			</div>';
								v += '		</div>';
							}
							v += '	</div>'
						}
						v += '</div>';

						return v;
					},

					// --------------------------------------------------------
					tagResultOptions: function (option) {
						var optionText = utui.util.safeEscape(option.text);
						var v = '<i class="icon-tag tagIcon"></i>' + ' ';
						v += '<span class="tagText" title="' + optionText + '">' + optionText + '</span>';
						return v;
					}
				}
			};

			// --------------------------------------------------------
			var _render = {
				// --------------------------------------------------------
				ui: function () {
					var tab = jumpToTab || 'tab_consent';
					$modalDialog.find('.modal-header').html(_view.modal.contentHeader());
					$modalDialog.find('.modal-body').html(_templateAccordion);

					_bindUI.topNavMenu();

					// Render 1st panel into DOM
					_selectedLanguage = _getDefaultLanguage(_saveObj.languages);
					$modalDialog.find('#' + tab).trigger('click');

					// Dialog adjustments
					utui.ui.dialog.adjustPanelHeights(_namespace);
				}
			};

			var title = localize.t('tiq.dashboard.privacy_management.consent_preferences.dialog_title');
			var buttons;
			if (_isNewConsentPreference(_consentPreference)) {
				buttons = [
					{
						text: localize.t('tiq.dialog.button.finish'),
						click: function () {
							if (_isValid()) {
								// store _saveObj into utui.data.privacy_management
								utui.data.privacy_management.preferences = _saveObj;
								_eventHandlers.onBtnCancelClick();

								// Record additions in history
								if (_isNewConsentPreference(_consentPreference)) {
									utui.util.pubsub.publish(utui.constants.privacy_management.consent.ADDED, {preferences: _saveObj});

								} else {
									utui.util.pubsub.publish(utui.constants.privacy_management.consent.UPDATED, {preferences: _saveObj});
								}
							}
						},
						id: _namespace + '_finishBtn'
					},
					{
						text: localize.t('tiq.dialog.button.next'),
						click: function () {
							if (_selectedTab === 'tab_consent') {
								$modalDialog.find('#tab_customization').trigger('click');

							} else if (_selectedTab === 'tab_customization') {
								$modalDialog.find('#tab_categories').trigger('click');

							} else if (_selectedTab === 'tab_categories') {
								$modalDialog.find('#tab_options').trigger('click');
							}
						},
						id: _namespace + '_nextBtn'
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						click: _eventHandlers.onBtnCancelClick,
						id: _namespace + '_cancelBtn',
						style: 'float:left; margin-left: 12px'
					}
				];

			} else {
				buttons = [
					{
						text: localize.t('tiq.dialog.button.apply'),
						click: function () {
							if (_isValid()) {
								// store _saveObj into utui.data.privacy_management
								utui.data.privacy_management.preferences = _saveObj;
								_eventHandlers.onBtnCancelClick();

								// Record additions in history
								utui.util.pubsub.publish(utui.constants.privacy_management.consent.UPDATED, {preferences: _saveObj});
							}
						},
						id: _namespace + '_applyBtn'
					},
					{
						text: localize.t('tiq.dialog.button.cancel'),
						click: _eventHandlers.onBtnCancelClick,
						id: _namespace + '_cancelBtn',
						style: 'float:left; margin-left: 12px'
					}
				];
			}

			// Show the modal dialog
			$modalDialog = utui.ui.dialog.show(_namespace, title, buttons, _templateModal, {
				width: 1000,
				height: 550,
				dialogClass: 'consent_preference'
			}, _eventHandlers.onBtnCancelClick);

			// Render the contents of the dialog
			_render.ui();

			// --------------------------------------------------------
			function _onAccountDefaultsUpdated(data) {
				if (_saveObj.isAccountOverride === true) {
					if (data && data.preferences) {
						_saveObj.languages = data.preferences.languages;
						_saveObj.custom_tokens_definitions = data.preferences.custom_tokens_definitions;
						if (_selectedTab === "tab_consent") {
							_panels.tab_consent.render();
						}
					}
				}
			}

			utui.util.pubsub.subscribe(utui.constants.privacy_management.ACCOUNT_DEFAULTS_UPDATED, _onAccountDefaultsUpdated, this);

			return $modalDialog;
		},

		// ------------------------------------------------------------
		removeLanguageConfirmDialog: function () {
			// Private API
			var _namespace = 'confirmDeleteLanguage';

			// --------------------------------------------------------
			function _view(languageName) {
				var v = '';
				v += '<div id="' + _namespace + '_description">';
				v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
				v += '    <div class="dialog-icon-container">';
				v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
				v += '    </div>';
				v += '    <div class="dialog-description">';
				v += '        <p><strong>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.are_you_sure_remove_language', {name: languageName}) + '</strong></p>';
				v += '        <p>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.this_operation_cannot_be_undone') + '</p>'
				v += '    </div>';
				v += '</div>';
				return v;
			}

			// --------------------------------------------------------
			function _disposeDialog() {
				$('#' + _namespace + '_dialog').dialog().remove();
			}

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function (languageName, callback) {
					// Add the dialog to the DOM if not already there
					var content = _view(languageName);
					var title = localize.t('tiq.dashboard.privacy_management.consent_preferences.remove_language');

					if ($('#' + _namespace + '_dialog').length == 0) {
						$('<div />', {id: _namespace + '_dialog'}).prependTo('body');
						$('<div />', {id: _namespace + '_dialogContent'}).appendTo('#' + _namespace + '_dialog');
					}

					$('#' + _namespace + '_dialogContent').html(content);


					$("#" + _namespace + '_dialog').dialog({
						title: title,
						height: 'auto',
						width: 'auto',
						modal: true,
						closeOnEscape: false,
						resizable: false,
						autoOpen: true,
						draggable: false,
						position: ['center', 'center'],
						buttons: [
							{
								text: title,
								id: 'confirmRemoveLanguage_dialog_removeBtn',
								click: function () {
									if (callback) {
										callback(); // onConfirmDeleteLanguageBtnClick
									}
									_disposeDialog();
								}
							},
							{
								text: localize.t('tiq.dialog.button.cancel'),
								id: 'confirmRemoveLanguage_dialog_cancelBtn',
								click: _disposeDialog,
								style: 'float:left; margin-left: 12px'
							}
						]
					}).on('dialogclose', _disposeDialog);
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		linkToPrivacyResourcesConfirmDialog: function () {
			// Private API
			var _namespace = 'confirmLinkToPrivacyResources';

			// --------------------------------------------------------
			function _view() {
				var v = '';
				v += '<div id="' + _namespace + '_description">';
				v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
				v += '    <div class="dialog-icon-container">';
				v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
				v += '    </div>';
				v += '    <div class="dialog-description">';
				v += '        <p><strong>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.are_you_sure_use_global_parameters') + '</strong></p>';
				v += '        <p>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.use_global_parameters_notice') + '</p>'
				v += '    </div>';
				v += '</div>';
				return v;
			}

			// --------------------------------------------------------
			function _disposeDialog() {
				$('#' + _namespace + '_dialog').dialog().remove();
			}

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function (callback) {
					// Add the dialog to the DOM if not already there
					var content = _view();
					var title = localize.t('tiq.dashboard.privacy_management.consent_preferences.use_global_parameters');

					if ($('#' + _namespace + '_dialog').length == 0) {
						$('<div />', {id: _namespace + '_dialog'}).prependTo('body');
						$('<div />', {id: _namespace + '_dialogContent'}).appendTo('#' + _namespace + '_dialog');
					}

					$('#' + _namespace + '_dialogContent').html(content);


					$("#" + _namespace + '_dialog').dialog({
						title: title,
						height: 'auto',
						width: 'auto',
						modal: true,
						closeOnEscape: false,
						resizable: false,
						autoOpen: true,
						draggable: false,
						position: ['center', 'center'],
						buttons: [
							{
								text: title,
								id: 'confirmLinkToPrivacyResourcesBtn',
								click: function () {
									if (callback) {
										callback(); // onConfirmLinkToPrivacyResourcesBtnClick
									}
									_disposeDialog();
								}
							},
							{
								text: localize.t('tiq.dialog.button.cancel'),
								id: 'cancelLinkToPrivacyResourcesBtn',
								click: _disposeDialog,
								style: 'float:left; margin-left: 12px'
							}
						]
					}).on('dialogclose', _disposeDialog);
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		addNewLanguageDialog: function () {
			// Private API
			var _namespace = 'addNewLanguageDialog';

			// ------------------------------------------------------------
			function _view(excludedLanguages) {
				var fieldset = {
					language: {
						fieldType: 'select',
						label: localize.t('tiq.dashboard.privacy_management.consent_preferences.language'),
						select2placeholder: localize.t('tiq.dashboard.privacy_management.consent_preferences.select_language'),
						fieldOptions: _getLanguageOptionList(excludedLanguages)
					}
				};
				var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, 'dialog_new_language', true);
				var v = '';

				v += '<div class="dialog-message"></div>';
				v += '<div style="width:410px;">';
				v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
				v += '</div>';

				return v;
			}

			// ------------------------------------------------------------
			function _disposeDialog() {
				$('#' + _namespace + '_dialog').dialog().remove();
			}

			// ------------------------------------------------------------
			function _getLanguageOptionList(excludedLanguages) {
				return _sortLanguagesByName($.map(utui.config.privacy_management.languages, function (value, index) {
					if (excludedLanguages.indexOf(index) === -1) {
						return [$.extend(true, {}, value, {label: value.label + ' (' + value.value + ')'})]; // append country code to label
					}
				}));
			}

			// Public API
			var _public = {
				// ------------------------------------------------------------
				show: function (callback, excludedLanguages) {
					// Add the dialog to the DOM if not already there
					var content = _view(excludedLanguages);
					var title = localize.t('tiq.dashboard.privacy_management.consent_preferences.add_language');

					if ($('#' + _namespace + '_dialog').length == 0) {
						$('<div />', {
							id: _namespace + '_dialog'
						}).prependTo('body');
						$('<div />', {
							id: _namespace + '_dialogContent'
						}).appendTo('#' + _namespace + '_dialog');
					}

					$('#' + _namespace + '_dialogContent').html(content);
					utui.ui.convertSelectListToSelect2('dialog_new_language_language');

					$("#" + _namespace + '_dialog').dialog({
						title: title,
						height: 'auto',
						width: 'auto',
						modal: true,
						closeOnEscape: false,
						resizable: false,
						autoOpen: true,
						draggable: false,
						position: ['center', 'center'],
						buttons: [{
							text: localize.t('tiq.dialog.button.apply'),
							id: 'addCustomParam_dialog_applyBtn',
							click: function () {
								var value = $('#dialog_new_language_language').val();
								if (value) {
									callback(value); // onNewLanguageAdded
								}
								_disposeDialog();
							}
						},
							{
								text: localize.t('tiq.dialog.button.cancel'),
								id: 'addCustomParam_dialog_cancelBtn',
								click: _disposeDialog,
								style: 'float:left; margin-left: 12px'
							}
						]
					}).on('dialogclose', _disposeDialog);
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		addNewCustomParameterDialog: function () {
			// Private API
			var _namespace = 'addNewCustomParameter';

			// ------------------------------------------------------------
			function _view() {
				var fieldset = {
					title: {
						fieldType: 'text',
						label: localize.t('tiq.dashboard.privacy_management.consent_preferences.title'),
						size: '40'
					}
				};
				var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, 'dialog_new_custom_parameter', true);
				var v = '';

				v += '<div class="dialog-message"></div>';
				v += '<div style="width:410px;">';
				v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
				v += '</div>';

				return v;
			}

			// ------------------------------------------------------------
			function _disposeDialog() {
				$('#' + _namespace + '_dialog').dialog().remove();
			}

			// Public API
			var _public = {
				// ------------------------------------------------------------
				show: function (applyNewParameterCallback) {
					// Add the dialog to the DOM if not already there
					var content = _view();
					var title = localize.t('tiq.dashboard.privacy_management.consent_preferences.custom_parameter');

					if ($('#' + _namespace + '_dialog').length == 0) {
						$('<div />', {
							id: _namespace + '_dialog'
						}).prependTo('body');
						$('<div />', {
							id: _namespace + '_dialogContent'
						}).appendTo('#' + _namespace + '_dialog');
					}
					$('#' + _namespace + '_dialogContent').html(content);

					$("#" + _namespace + '_dialog').dialog({
						title: title,
						height: 'auto',
						width: 'auto',
						modal: true,
						closeOnEscape: false,
						resizable: false,
						autoOpen: true,
						draggable: false,
						position: ['center', 'center'],
						buttons: [{
							text: localize.t('tiq.dialog.button.apply'),
							id: 'addCustomParam_dialog_applyBtn',
							click: function () {
								_hideModalErrorMessage(_namespace + '_dialog');
								var errMsg = applyNewParameterCallback(); // onAddNewCustomParameter
								if (errMsg) {
									_showModalErrorMessage(_namespace + '_dialog', errMsg, false);

								} else {
									_disposeDialog();
								}
							}
						},
							{
								text: localize.t('tiq.dialog.button.cancel'),
								id: 'addCustomParam_dialog_cancelBtn',
								click: _disposeDialog,
								style: 'float:left; margin-left: 12px'
							}
						]
					}).on('dialogclose', _disposeDialog);
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		resetPreferencesConfirmDialog: function () {
			// Private API
			var _namespace = 'confirmResetPreferences';

			// --------------------------------------------------------
			function _view() {
				var v = '';
				v += '<div id="' + _namespace + '_description">';
				v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
				v += '    <div class="dialog-description">';
				v += '        <p>' + localize.t('tiq.dashboard.privacy_management.consent_preferences.reset_configuration_notice') + '</p>'
				v += '    </div>';
				v += '</div>';
				return v;
			}

			// --------------------------------------------------------
			function _disposeDialog() {
				$('#' + _namespace + '_dialog').dialog().remove();
			}

			// Public API
			var _public = {
				// ----------------------------------------------------
				show: function (callback) {
					// Add the dialog to the DOM if not already there
					var content = _view();
					var title = localize.t('tiq.profile.delete');

					if ($('#' + _namespace + '_dialog').length == 0) {
						$('<div />', {id: _namespace + '_dialog'}).prependTo('body');
						$('<div />', {id: _namespace + '_dialogContent'}).appendTo('#' + _namespace + '_dialog');
					}

					$('#' + _namespace + '_dialogContent').html(content);


					$("#" + _namespace + '_dialog').dialog({
						title: title,
						height: 'auto',
						width: 'auto',
						modal: true,
						closeOnEscape: false,
						resizable: false,
						autoOpen: true,
						draggable: false,
						position: ['center', 'center'],
						buttons: [
							{
								text: title,
								id: 'onConfirmResetPreferencesBtn',
								click: function () {
									if (callback) {
										callback(); // onConfirmResetPreferencesBtnClick
									}
									_disposeDialog();
								}
							},
							{
								text: localize.t('tiq.dialog.button.cancel'),
								id: 'cancelResetPreferencesBtn',
								click: _disposeDialog,
								style: 'float:left; margin-left: 12px'
							}
						]
					}).on('dialogclose', _disposeDialog);
				}
			}

			return _public;
		}(),

		// ------------------------------------------------------------
		util: _util
	};

	return _public;
}();
utui.privacyManagement.accountDefaults = function () {
    "use strict";
    // PRIVATE
    //----------------------------------------------------------------------------------------------------------------

    var _urestHandler = {
        //----------------------------------------------------------------------------------------------------------------
        // Update the account privacy settings on Urest
        //----------------------------------------------------------------------------------------------------------------
         putCurrentAccountPrivacyDefaults : function (accountPrivacysettings, successCallback, failCallback){
             utui.service.put(utui.service.restapis.ACCOUNT_PRIVACY_SETTINGS,
                 JSON.stringify(accountPrivacysettings),
                 utui.service.options.JSON,
                 function(data) { // Success
                     utui.util.pubsub.publish(utui.constants.privacy_management.ACCOUNT_DEFAULTS_UPDATED, accountPrivacysettings );
                     successCallback();
                 },
                 function(status, response) {
                     var errorMsg = localize.t('tiq.dashboard.privacy_management.account_defaults.urest_update_error');
                     if (response){
                         if (response.status === 403 || response.status === 401) {
                             utui.util.showPermissionErrorDialog();
                         } else {
                             errorMsg = _urestHandler.getErrorFromResponse(response, errorMsg);
                         }

                     }
                     failCallback(errorMsg);
                 }
             );

         },
        //----------------------------------------------------------------------------------------------------------------
        // Get the latest account level privacy defaults from Urest or create it id it's not found at the account level
        //----------------------------------------------------------------------------------------------------------------
        getCurrentAccountPrivacyDefaults : function (onAccountPrivacyDefaultsLoadCallback){
            utui.service.get(utui.service.restapis.ACCOUNT_PRIVACY_SETTINGS, { }, null, function(data) {
              //Convert any old names to new version
              if (data && data.preferences &&
                data.preferences.languages) {
                _.forEach(data.preferences.languages, function(dataObj, language){
                  var cats = dataObj.categories;
                  if (cats.displayad) {
                    cats.display_ads = cats.displayad;
                    delete cats.displayad;
                  }
                  if (cats.bigdata) {
                    cats.big_data = cats.bigdata;
                    delete cats.bigdata;
                  }
                });
              }
                onAccountPrivacyDefaultsLoadCallback(data);
            }, function(status, response) {
                if (_urestHandler.isNewAccountPrivacyResponse(response)){
                    onAccountPrivacyDefaultsLoadCallback();
                } else {
                    var errorMsg = localize.t('tiq.dashboard.privacy_management.account_defaults.urest_update_error');
                    if (response){
                        if (response.status === 403 || response.status === 401) {
                            utui.util.showPermissionErrorDialog();
                        } else {
                            errorMsg = _urestHandler.getErrorFromResponse(response, errorMsg);
                        }
                    }
                    utui.util.showStatusMessage(errorMsg);
                }
            });

        },
        // ----------------------------------------------------------------
        // Returns the error message if the response code is in the error code map (future expansion)
        // ----------------------------------------------------------------
        getErrorFromResponse : function(response, defaultMessage) {
            if (!response) return defaultMessage;

            var errorCodeMap = {
                1455: localize.t('tiq.dashboard.privacy_management.account_defaults.urest_account_error')
            };

            // Unauthorized
            if (response.status === 403 || response.status === 401) {
                utui.util.showPermissionErrorDialog();
                return '';
            } else {
                try {
                    var error = utui.util.safeParseJSON(response.responseText),
                        msg = errorCodeMap[error.returnCode] || defaultMessage;
                    return msg;

                } catch (e) {
                    return defaultMessage;
                }
            }
        },
        // ----------------------------------------------------------------
        // Identify missing account error for special handling
        // ----------------------------------------------------------------
        isNewAccountPrivacyResponse : function(response) {
            if (!response) return false;

            // List of codes that Urest can send for a missing account
            var missingAccountSettingsCodes = {
                1404: localize.t('tiq.dashboard.privacy_management.account_defaults.urest_account_error')
            };

            // Unauthorized
            if (response.status === 403 || response.status === 401) {
                utui.util.showPermissionErrorDialog();
                return false;
            } else {
                try {
                    var error = utui.util.safeParseJSON(response.responseText);
                    return (typeof missingAccountSettingsCodes[error.returnCode] !== 'undefined');
                } catch (e) {
                    return false;
                }
            }
        }

    };
    var _dataModelTemplates = {
        emptyAccountDefaultsObject : function(){
            var accountDefaults = {
                explicit : {
                    languages : {

                    },
                    custom_tokens_definitions : [
                        {
                            "title": "Company Logo URL",
                            "token": "company_logo_url"
                        },
                        {
                            "title": "Privacy Policy URL",
                            "token": "privacy_policy_url"
                        }
                    ]
                },
                preferences : {
                    languages : {

                    },
                    custom_tokens_definitions : [
                        {
                            "title": "Company Logo URL",
                            "token": "company_logo_url"
                        },
                        {
                            "title": "Privacy Policy URL",
                            "token": "privacy_policy_url"
                        }
                    ]

                }
            };
            // Starting with english
            accountDefaults.explicit.languages['en'] = _dataModelTemplates.emptyCustomSettingsObjectForLanguage('explicit',true);
            accountDefaults.explicit.languages['en'].display_name = "English (en)";
            accountDefaults.explicit.languages['en'].custom_tokens.company_logo_url = "";
            accountDefaults.explicit.languages['en'].custom_tokens.privacy_policy_url = "";
            accountDefaults.preferences.languages['en'] = _dataModelTemplates.emptyCustomSettingsObjectForLanguage('preferences',true);
            accountDefaults.preferences.languages['en'].display_name = "English (en)";
            accountDefaults.preferences.languages['en'].custom_tokens.company_logo_url = "";
            accountDefaults.preferences.languages['en'].custom_tokens.privacy_policy_url = "";

            return accountDefaults;
        },
        emptyCustomSettingsObjectForLanguage : function(sId,isDefault){
            var setDefault = isDefault ? isDefault : false;
            var sections = {
                explicit : {
                    "display_name": "",
                    "isDefault": setDefault,
                    "common_tokens": {
                        "title": "",
                        "message": "",
                        "confirmation_button": ""
                    },
                    "custom_tokens": {
                    }
                },
                preferences : {
                    "display_name": "",
                    "isDefault": setDefault,
                    "common_tokens": {
                        "title": "",
                        "message": "",
                        "confirmation_button": ""
                    },
                    "categories": {
                        "analytics": {
                            "name": "",
                            "notes": ""
                        },
                        "affiliates": {
                            "name": "",
                            "notes": ""
                        },
                        "display_ads": {
                            "name": "",
                            "notes": ""
                        },
                        "search": {
                            "name": "",
                            "notes": ""
                        },
                        "email": {
                            "name": "",
                            "notes": ""
                        },
                        "personalization": {
                            "name": "",
                            "notes": ""
                        },
                        "social": {
                            "name": "",
                            "notes": ""
                        },
                        "big_data": {
                            "name": "",
                            "notes": ""
                        },
                        "mobile": {
                            "name": "",
                            "notes": ""
                        },
                        "engagement": {
                            "name": "",
                            "notes": ""
                        },
                        "monitoring": {
                            "name": "",
                            "notes": ""
                        },
                        "crm": {
                            "name": "",
                            "notes": ""
                        },
                        "cookiematch": {
                            "name": "",
                            "notes": ""
                        },
                        "cdp": {
                            "name": "",
                            "notes": ""
                        },
                        "misc": {
                          "name": "",
                          "notes": ""
                        }
                    },

                    "custom_tokens": {
                    }
                }
            };
            return sections[sId];
        }
    };
    

    // PUBLIC
    //----------------------------------------------------------------------------------------------------------------
    var _public = {
        id: 'privacy_account_preferences',

        //----------------------------------------------------------------------------------------------------------------
        show: function () {
            // Check the permssions and then get the accountDefaults from URest
            if (!utui.permissions.canManageAccount()) {
                utui.util.showPermissionErrorDialog();
            } else {
                _public.showEditAccountDefaults();
            }

        },
      
        //----------------------------------------------------------------------------------------------------------------
        // Show the account defaults dialog for explicit consent prompt & consent prferences
        //----------------------------------------------------------------------------------------------------------------
        showEditAccountDefaults: function () {
            // Private API
            var _namespace = 'privacy_account_preferences_dialog',
                _selectedTab = 'tab_explicit_consent',
                _selectedSection = 'explicit',
                _explicitConsentInputFields = {
                    user_interface_params: {
                        fieldset: {
                            title: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.title'),
                                size: '70',
                                fieldSuffix: '{{title}}'
                            },
                            message: {
                                fieldType: 'custom',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.message'),
                                fieldSuffix: '{{message}}',
                                customRenderer : {
                                    getView : function(){
                                        var crTa = '';
                                        crTa += '<textarea id="tab_explicit_consent_message" rows="4" cols="80" data-key="message" class="js-privacy-message-textarea" style="min-width:490px;min-height:60px;margin-bottom: 0"></textarea>';
                                        crTa += ' <span class="inline-label">{{message}}</span>';

                                        return crTa;
                                    },
                                    getTitle : function(){
                                        return '';
                                    }
                                }
                            },
                            confirmation_button: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.confirmation_button'),
                                size: '70',
                                fieldSuffix: '{{confirmation_button}}'
                            }
                        }
                    }
                },
                _consentPreferencesInputFields = {
                    user_interface_params: {
                        fieldset: {
                            title: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.title'),
                                size: '70',
                                fieldSuffix: '{{title}}'
                            },
                            message: {
                                fieldType: 'custom',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.message'),
                                fieldSuffix: '{{message}}',
                                customRenderer : {
                                    getView : function(){
                                        var crTa = '';
                                        crTa += '<textarea id="tab_consent_preferences_message" rows="4" cols="80" data-key="message" class="js-privacy-message-textarea"  style="min-width:490px;min-height:60px;margin-bottom: 0"></textarea>';
                                        crTa += ' <span class="inline-label">{{message}}</span>';

                                        return crTa;
                                    },
                                    getTitle : function(){
                                        return '';
                                    }
                                }
                            },
                            confirmation_button: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.confirmation_button'),
                                size: '70',
                                fieldSuffix: '{{confirmation_button}}'
                            },
                            category: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.category_header'),
                                size: '70',
                                fieldSuffix: '{{category}}'
                            },
                            description: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.description_header'),
                                size: '70',
                                fieldSuffix: '{{description}}'
                            },
                            status: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.status'),
                                size: '70',
                                fieldSuffix: '{{status}}'
                            },
                            yes: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.yes'),
                                size: '70',
                                fieldSuffix: '{{yes}}'
                            },
                            no: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.no'),
                                size: '70',
                                fieldSuffix: '{{no}}'
                          }
                        }
                    },
                    category_params: {
                        fieldset: {
                            analytics_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.1.text'),
                                size: '70',
                                fieldSuffix: '{{category_analytics_title}}'
                            },
                            analytics_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_analytics_description}}'
                            },
                            affiliates_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.2.text'),
                                size: '70',
                                fieldSuffix: '{{category_affiliates_title}}'
                            },
                            affiliates_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_affiliates_description}}'
                            },
                            display_ads_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.3.text'),
                                size: '70',
                                fieldSuffix: '{{category_display_ads_title}}'
                            },
                            display_ads_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_display_ads_description}}'
                            },
                            search_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.4.text'),
                                size: '70',
                                fieldSuffix: '{{category_search_title}}'
                            },
                            search_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_search_description}}'
                            },
                            email_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.5.text'),
                                size: '70',
                                fieldSuffix: '{{category_email_title}}'
                            },
                            email_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_email_description}}'
                            },
                            personalization_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.6.text'),
                                size: '70',
                                fieldSuffix: '{{category_personalization_title}}'
                            },
                            personalization_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_personalization_description}}'
                            },
                            social_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.7.text'),
                                size: '70',
                                fieldSuffix: '{{category_social_title}}'
                            },
                            social_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_social_description}}'
                            },
                            big_data_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.8.text'),
                                size: '70',
                                fieldSuffix: '{{category_big_data_title}}'
                            },
                            big_data_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_big_data_description}}'
                            },
                            misc_name: {
                                fieldType: 'text',
                                label: localize.t('config.manageGroup.9.text'),
                                size: '70',
                                fieldSuffix: '{{category_misc_title}}'
                            },
                            misc_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_misc_description}}'
                            },
                            mobile_name: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.mobile'),
                                size: '70',
                                fieldSuffix: '{{category_mobile_title}}'
                            },
                            mobile_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_mobile_description}}'
                            },
                            engagement_name: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.engagement'),
                                size: '70',
                                fieldSuffix: '{{category_engagement_title}}'
                            },
                            engagement_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_engagement_description}}'
                            },
                            monitoring_name: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.monitoring'),
                                size: '70',
                                fieldSuffix: '{{category_monitoring_title}}'
                            },
                            monitoring_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_monitoring_description}}'
                            },
                            crm_name: {
                                fieldType: 'text',
                                label: localize.t('tiq.dashboard.privacy_management.account_defaults.crm'),
                                size: '70',
                                fieldSuffix: '{{category_crm_title}}'
                            },
                            crm_notes: {
                                fieldType: 'text',
                                label: '',
                                size: '70',
                                fieldSuffix: '{{category_crm_description}}'
                            },
                            cookiematch_name: {
                              fieldType: 'text',
                              label: localize.t('config.manageGroup.10.text'),
                              size: '70',
                              fieldSuffix: '{{category_cookiematch_title}}'
                            },
                            cookiematch_notes: {
                              fieldType: 'text',
                              label: '',
                              size: '70',
                              fieldSuffix: '{{category_cookiematch_description}}'
                            },
                            cdp_name: {
                              fieldType: 'text',
                              label: localize.t('config.crossPlatformGroup.1.text'),
                              size: '70',
                              fieldSuffix: '{{category_cdp_title}}'
                            },
                            cdp_notes: {
                              fieldType: 'text',
                              label: '',
                              size: '70',
                              fieldSuffix: '{{category_cdp_description}}'
                            }
                        }
                    }
                },
                _selectedLanguage,
                _templateModal = utui.ui.template.modal(),
                _templateAccordion = utui.ui.template.accordion(true),
                $modalDialog,
                _saveObj; // Main data object used by the dialog for saving later

            //----------------------------------------------------------------------------------------------------------------
            //----------------------------------------------------------------------------------------------------------------
            function _getDefaultLanguage(_saveObj) {
                var languages = _saveObj[_selectedSection].languages,
                    key;

                _.each(_.keys(languages), function(k){
                    var lang = languages[k];
                    if (lang.isDefault === true) {
                        key = k;
                    }
                });

                if (!key) {
                    // just select first one
                    for (var i in languages) {
                        key = i;
                        break;
                    }
                }

                return key;
            }

            //----------------------------------------------------------------------------------------------------------------
            function _getLanguageObj(key, _selectedSection) {
                return _saveObj[_selectedSection].languages[key];

            }

            //----------------------------------------------------------------------------------------------------------------
            function _canDeleteLanguage () {
                return _.size(_saveObj[_selectedSection].languages) > 1;
            }

            //----------------------------------------------------------------------------------------------------------------
            var _eventHandlers = {
                //----------------------------------------------------------------------------------------------------------------
                onTopNavMenuClick: function (event) {
                    event.preventDefault();

                    var $el = $(this),
                        tabId = $el.attr('id');

                    _selectedTab = tabId;
                    _selectedSection = (_selectedTab === 'tab_explicit_consent') ? 'explicit':'preferences';

                    $modalDialog.find('.wizard_tab').removeClass('activeTab');
                    $el.addClass('activeTab');

                    // Render selected tab panel
                    _panels[tabId].render();
                    utui.ui.dialog.adjustPanelHeights(_namespace);
                },

                //----------------------------------------------------------------------------------------------------------------
                // Handle the addition of a new language in the selected panel
                //----------------------------------------------------------------------------------------------------------------
                onAddLanguageBtnClick: function () {
                    utui.privacyManagement.accountDefaults.addNewLanguageDialog.show(_eventHandlers.onNewLanguageAdded,Object.keys(_saveObj[_selectedSection].languages));
                },

                //----------------------------------------------------------------------------------------------------------------
                // Render the main dialog when there has been a successful load of accountDefaults from uRest
                //----------------------------------------------------------------------------------------------------------------
                onAccountPrivacyDefaultsLoad: function(data) {
                    // If there is no data returned then this is the first time they have used account defaults, so create an empty object for editing
                    if (data){
                        _saveObj = data;
                    } else {
                        _saveObj = _dataModelTemplates.emptyAccountDefaultsObject();
                    }
                    $modalDialog = utui.ui.dialog.show(_namespace, title, buttons, _templateModal, { width:1000, height:550, dialogClass:'consent_preference' }, _eventHandlers.onBtnCancelClick);

                    // Render the contents of the dialog
                    _render.ui();
                    // Show the modal dialog
                    return $modalDialog;

                },
                //----------------------------------------------------------------------------------------------------------------
                // Create a new language object in the current section
                //----------------------------------------------------------------------------------------------------------------
                onNewLanguageAdded: function(newLanguage,newLanguageLabel) {
                    _saveObj[_selectedSection].languages[newLanguage] = _dataModelTemplates.emptyCustomSettingsObjectForLanguage(_selectedSection,false);
                    _saveObj[_selectedSection].languages[newLanguage].display_name = newLanguageLabel;

                    // Add in the currently defined custom tokens for this panel
                    _.each(_saveObj[_selectedSection].custom_tokens_definitions,function(obj){
                        _saveObj[_selectedSection].languages[newLanguage].custom_tokens[obj.token] = "";
                    });

                    _selectedLanguage = newLanguage;

                    _panels[_selectedTab].render();

                },
                //----------------------------------------------------------------------------------------------------------------
                // Handle selection of a language item on the context pane
                //----------------------------------------------------------------------------------------------------------------
                onLanguageItemClick: function (e) {
                    var $el = $(e.currentTarget);
                    _selectedLanguage = $el.attr('data-id');

					          $el.addClass('selected').siblings().removeClass('selected');
                    // re-draw content body and bind event handlers
                    _panels[_selectedTab].render();
                },

                //----------------------------------------------------------------------------------------------------------------
                onSetIsDefaultLanguage: function (e) {
                    var $el = $(e.currentTarget);
                    var isChecked = $el.prop('checked');

                    if (isChecked) {
                        for (var i in _saveObj[_selectedSection].languages) {
                            if (i == _selectedLanguage) {  // set isDefault for selected language
                                _saveObj[_selectedSection].languages[i].isDefault = true;

                            } else { // unset isDefault for all other languages
                                _saveObj[_selectedSection].languages[i].isDefault = false;
                            }
                        }

                    } else { // unset isDefault for selected language
                        _saveObj[_selectedSection].languages[_selectedLanguage].isDefault = false;
                        Object.keys(_saveObj[_selectedSection].languages).sort().forEach(function(newLKey){
                            if (newLKey !== _selectedLanguage){
                                _saveObj[_selectedSection].languages[newLKey].isDefault = true;
                            }
                        });
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                onDeleteLanguageBtnClick: function (e) {
                    if (_canDeleteLanguage()) {
                        var language = _getLanguageObj(_selectedLanguage,_selectedSection);
                        utui.privacyManagement.accountDefaults.removeLanguageConfirmDialog.show(language.displayName, _eventHandlers.onConfirmDeleteLanguageBtnClick);
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                onConfirmDeleteLanguageBtnClick: function (e) {
                    // delete language from _saveObj and re-render
                    var currentDefault = _getDefaultLanguage(_saveObj);
                    delete _saveObj[_selectedSection].languages[_selectedLanguage];
                    
                    if (_selectedLanguage === currentDefault){
                        Object.keys(_saveObj[_selectedSection].languages).sort().forEach(function(newLKey){
                            if (_selectedLanguage === currentDefault && newLKey !== _selectedLanguage){
                                _saveObj[_selectedSection].languages[newLKey].isDefault = true;
                                _selectedLanguage = newLKey;
                            }
                        });
                    } else {
                        _selectedLanguage = _getDefaultLanguage(_saveObj);
                    }
                    
                    _panels.tab_explicit_consent.render();
                },

                //----------------------------------------------------------------------------------------------------------------
                onUserInterfaceParametersControlClick: function (e) {
                    var $el = $(e.currentTarget);
                    var isSelected = $el.hasClass('selected');

                    if (isSelected) {
                        $el.removeClass('selected');
                        $modalDialog.find('.js-user-interface-parameters').addClass('hidden');

                    } else {
                        $el.addClass('selected');
                        $modalDialog.find('.js-user-interface-parameters').removeClass('hidden');
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                onCategoryParametersControlClick: function (e) {
                    var $el = $(e.currentTarget);
                    var isSelected = $el.hasClass('selected');

                    if (isSelected) {
                        $el.removeClass('selected');
                        $modalDialog.find('.js-category-parameters').addClass('hidden');

                    } else {
                        $el.addClass('selected');
                        $modalDialog.find('.js-category-parameters').removeClass('hidden');
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                // On blur of a custom parameter input field
                //----------------------------------------------------------------------------------------------------------------
                onChangeCustomParameterInput: function (e) {
                    var $el = $(e.currentTarget);
                    var cpId  = $el[0].id.split('-').pop();
                    _saveObj[_selectedSection].languages[_selectedLanguage].custom_tokens[cpId]  = $('#'+$el[0].id).val();
                    _panels[_selectedTab].render();

                },

                //----------------------------------------------------------------------------------------------------------------
                // Handles the click to delete a custom parameter
                //----------------------------------------------------------------------------------------------------------------
                onDeleteCustomParameterBtnClick: function (e) {
                    var $el = $(e.currentTarget);
                    var cpId  = $el[0].id.split('-').pop();

                    $('#cpRow-' + _selectedSection + '-'+ cpId).remove();

                    var rmIdx = -1, idx = 0;
                    while (rmIdx === -1 && idx < _saveObj[_selectedSection].custom_tokens_definitions.length){
                        if (_saveObj[_selectedSection].custom_tokens_definitions[idx].token === cpId){
                            rmIdx = idx;
                        }
                        idx++;
                    }

                    _saveObj[_selectedSection].custom_tokens_definitions.splice(rmIdx,1);

                    _.each(_saveObj[_selectedSection].languages,function(lObj,lKey){
                        delete _saveObj[_selectedSection].languages[lKey].custom_tokens[cpId];
                    });

                    _panels[_selectedTab].render();
                },

                //----------------------------------------------------------------------------------------------------------------
                // Handles the click to launch the dialog to create a new custom parameter.
                //----------------------------------------------------------------------------------------------------------------
                onAddNewCustomParameterBtnClick: function () {
                    utui.privacyManagement.accountDefaults.addNewCustomParameterDialog.show(_eventHandlers.onAddNewCustomParameter);
                },

                //----------------------------------------------------------------------------------------------------------------
                // Validate and add a new custom paramter. This can be added in both tabs
                //----------------------------------------------------------------------------------------------------------------
                onAddNewCustomParameter : function(){
                    var titleInput = $('#dialog_new_custom_parameter_title').val().trim(),
                        $addNewCustomParameter_error = $('#addNewCustomParameter_error'),
                        newParameterKey,
                        errorMsg = null;

                    $addNewCustomParameter_error.css('display','none');

                    if (titleInput.length > 0){
                        $addNewCustomParameter_error.empty();
                        var invCharRgx = /[^a-z0-9\s]/gi;
                        if (titleInput.match(invCharRgx)){
                            errorMsg = localize.t('tiq.dashboard.privacy_management.account_defaults.parameter_invalid_chars');
                        } else {
                            newParameterKey = titleInput.toLowerCase().replace(/[^a-z0-9\s]/g,'').trim().replace(/\s{2,}/g,'_').replace(/\s/g,'_');
                            _.each(_saveObj[_selectedSection].custom_tokens_definitions,function(obj){
                                if (obj.token === newParameterKey){
                                    errorMsg = localize.t('tiq.dashboard.privacy_management.account_defaults.parameter_already_exists');
                                }
                            });
                        }
                        

                        if (errorMsg === null){
                            _saveObj[_selectedSection].custom_tokens_definitions.push({title:titleInput,token:newParameterKey});
                            _.each(_saveObj[_selectedSection].languages,function(langObj,langKey){
                                _saveObj[_selectedSection].languages[langKey].custom_tokens[newParameterKey] = "";
                            });
                            _panels[_selectedTab].render();
                        } else {
                            $addNewCustomParameter_error.append(errorMsg);
                            $addNewCustomParameter_error.css('display','block');
                        }
                    }

                    return errorMsg;

                },
                //----------------------------------------------------------------------------------------------------------------
                onCustomParametersControlClick: function (e) {
                    var $el = $(e.currentTarget);
                    var isSelected = $el.hasClass('selected');

                    if (isSelected) {
                        $el.removeClass('selected');
                        $modalDialog.find('.js-custom-parameters').addClass('hidden');

                    } else {
                        $el.addClass('selected');
                        $modalDialog.find('.js-custom-parameters').removeClass('hidden');
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                // Using the selected tab & the id of the triggering element, extract the value and set it's equivalent value in the DM
                //----------------------------------------------------------------------------------------------------------------
                onFieldInputChange: function (event) {
                    var $el = $(this),
                        type = $el.attr('type'),
                        value = $el.val(),
                        attr = $el.attr('id');
                    var $section = $el.closest('.js-section');
                    var parts;

                    if (type === 'checkbox') {
                        attr = $el.attr('name');
                        value = [];
                        $modalDialog.find('input[name="' + attr + '"]:checked').each(function () {
                            value.push($(this).val());
                        });
                        value = value.join(',');
                    }

                    attr = attr.replace(_selectedTab + '_', '');

                    if (_selectedTab === 'tab_explicit_consent') {
                        _selectedSection = 'explicit';
                        if ($section.length && $section.attr('data-section') === 'tokens') {
                            _saveObj[_selectedSection].languages[_selectedLanguage].common_tokens[attr] = value;

                        }

                    } else if (_selectedTab === 'tab_consent_preferences') {
                        _selectedSection = 'preferences';
                        if ($section.length && $section.attr('data-section') === 'tokens') {
                            _saveObj[_selectedSection].languages[_selectedLanguage].common_tokens[attr] = value;
                        } else if ($section.length && $section.attr('data-section') === 'categories') {
                            parts = attr.match(/(.*)_(.*?)$/);//attr.split('_');
                            if (parts && parts.length === 3) {
                                var categories = _saveObj[_selectedSection].languages[_selectedLanguage].categories;
                                categories[parts[1]] = categories[parts[1]] || {};
                                categories[parts[1]][parts[2]] = value;
                            }
                        }

                    }
                    // Default language applies to both tabs
                    if ($section.length && $section.attr('data-section') === 'default_language') {
                        if (value ==='on'){
                            _saveObj[_selectedSection].languages[_selectedLanguage].isDefault = true;
                            Object.keys(_saveObj[_selectedSection].languages).forEach(function(newLKey){
                                if (_selectedLanguage !== newLKey){
                                    _saveObj[_selectedSection].languages[newLKey].isDefault = false;
                                }
                            });
                        } else {
                            _saveObj[_selectedSection].languages[_selectedLanguage].isDefault = false;
                            Object.keys(_saveObj[_selectedSection].languages).sort().forEach(function(newLKey){
                                if (newLKey !== _selectedLanguage){
                                    _saveObj[_selectedSection].languages[newLKey].isDefault = true;
                                }
                            });
                        }
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                onBtnCancelClick: function () {
                    utui.ui.dialog.dispose(_namespace);
                }
            };

            //----------------------------------------------------------------------------------------------------------------
            var _bindUI = {
                //----------------------------------------------------------------------------------------------------------------
                topNavMenu: function () {
                    $modalDialog.find('.wizard_tab').safeOn('click', _eventHandlers.onTopNavMenuClick);
                },

                //----------------------------------------------------------------------------------------------------------------
                contextItems: function () {
                    // tab_explicit_consent
                    $modalDialog.find('#' + _namespace + '_addLanguageBtn').safeOn('click', _eventHandlers.onAddLanguageBtnClick);
                    $modalDialog.find('.js-item-language').safeOn('click', _eventHandlers.onLanguageItemClick);

                },

                //----------------------------------------------------------------------------------------------------------------
                headerItems: function () {
                    // tab_explicit_consent
                    $modalDialog.find('#' + _namespace + '_setIsDefaultLanguageCkbx').on('change', _eventHandlers.onSetIsDefaultLanguage);
                    $modalDialog.find('#' + _namespace + '_deleteLanguageBtn').safeOn('click', _eventHandlers.onDeleteLanguageBtnClick);
                    // Add tooltip to the Delete Language button
                    var tooltipObj = {};
                    tooltipObj[_namespace + '_deleteLanguageBtn'] = {
                        gravity: 'ne'
                    };
                    utui.util.addTooltip(tooltipObj);


                },

                //----------------------------------------------------------------------------------------------------------------
                formFields: function () {

                    $modalDialog.find('.js-user-interface-parameters-control').safeOn('click', _eventHandlers.onUserInterfaceParametersControlClick);
                    $modalDialog.find('.js-custom-parameters-control').safeOn('click', _eventHandlers.onCustomParametersControlClick);
                    $modalDialog.find('.js-category-parameters-control').safeOn('click', _eventHandlers.onCategoryParametersControlClick);
                    $modalDialog.find('input:not(.js-not-form-body)').safeOn('change', _eventHandlers.onFieldInputChange);
                    $modalDialog.find('.js-privacy-message-textarea').safeOn('change', _eventHandlers.onFieldInputChange);
                    $modalDialog.find('.js-add-custom-parameters_button').safeOn('click', _eventHandlers.onAddNewCustomParameterBtnClick);
                    $modalDialog.find('.js-custom-parameters-value-input').safeOn('change', _eventHandlers.onChangeCustomParameterInput);
                    $modalDialog.find('.js-custom-parameters-delete').safeOn('click', _eventHandlers.onDeleteCustomParameterBtnClick);

                    // tab_options
                    $modalDialog.find('#' + _selectedTab + '_single_cookie').select2().safeOn('change', _eventHandlers.onFieldInputChange);
                }
            };

            //----------------------------------------------------------------------------------------------------------------
            var _panels = {
                //----------------------------------------------------------------------------------------------------------------
                modal: {
                    //----------------------------------------------------------------------------------------------------------------
                    showContext: function () {
                        var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
                        $accordionContainer.addClass('has-sidebar');
                        $accordionContainer.find('.sidebar-container').show();
                    },

                    //----------------------------------------------------------------------------------------------------------------
                    hideContext: function () {
                        var $accordionContainer = $modalDialog.find('.modal-body .accordion-container');
                        $accordionContainer.removeClass('has-sidebar');
                        $accordionContainer.find('.sidebar-container').hide();
                    }

                },

                //----------------------------------------------------------------------------------------------------------------
                tab_explicit_consent: {
                    //----------------------------------------------------------------------------------------------------------------
                    render: function() {
                        var slug = 'tab_explicit_consent',
                            $content = $('#' + _namespace),
                            $header = $content.find('.main-header'),
                            $body = $content.find('.main-body'),
                            $context = $content.find('.sidebar-body'),
                            userInterfaceFieldset = _explicitConsentInputFields.user_interface_params.fieldset,
                            context = utui.ui.template.contextBox(_view.tab_explicit_consent.context(), _view.tab_explicit_consent.contextTitle()),
                            bodyHeader = _view.tab_explicit_consent.contentBodyHeader(),
                            content = _view.tab_explicit_consent.contentBody({
                                slug: slug,
                                userInterfaceFieldset: userInterfaceFieldset
                            }),
                            $nextBtn = $('#' + _namespace + '_nextBtn');

                        // show context panel
                        _panels.modal.showContext();

                        $header.empty();

                        $body
                            .empty()
                            .append(bodyHeader)
                            .append(content);

                        $context
                            .empty()
                            .append(context);

                        $nextBtn.show();

                        _bindUI.contextItems();
                        _bindUI.headerItems();
                        _bindUI.formFields();

                        // If the language got defaulted then we need to highlight the newly select language
                        if (_view.tab_explicit_consent.missingLanguageDefaulted){
                            $('#tab_explicit_consent_listLanguages').find('.js-item-language').removeClass('selected');
                            $('#tab_explicit_consent_llist_'+_selectedLanguage).addClass('selected');
                        }
                        
                        // Need to prevent double scrollbars on the sidebar
                        $('.sidebar-container').css('overflow','hidden');

                        // Set values from _saveObj
                        for (var i in userInterfaceFieldset) {
                            var val = _saveObj[_selectedSection].languages[_selectedLanguage].common_tokens[i],
                                fieldType = userInterfaceFieldset[i].fieldType;
                            if (val) {
                                if (fieldType !== 'checkboxGroup') {
                                    $body.find('#tab_explicit_consent_' + i).val(val);
                                } else {
                                    for ( var j = 0; j < val.length; j++) {
                                        $body.find('[name="tab_explicit_consent_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
                                    }
                                }
                            }
                        }

                        // Expand the custom parameters section
                    }
                },
                //----------------------------------------------------------------------------------------------------------------
                tab_consent_preferences: {
                    //----------------------------------------------------------------------------------------------------------------
                    render: function() {
                        var slug = 'tab_consent_preferences',
                            $content = $('#' + _namespace),
                            $header = $content.find('.main-header'),
                            $body = $content.find('.main-body'),
                            $context = $content.find('.sidebar-body'),
                            userInterfaceFieldset = _consentPreferencesInputFields.user_interface_params.fieldset,
                            categoryFieldset = _consentPreferencesInputFields.category_params.fieldset,
                            context = utui.ui.template.contextBox(_view.tab_consent_preferences.context(), _view.tab_consent_preferences.contextTitle()),
                            bodyHeader = _view.tab_consent_preferences.contentBodyHeader(),
                            content = _view.tab_consent_preferences.contentBody({
                                categoryFieldset: categoryFieldset,
                                slug: slug,
                                userInterfaceFieldset: userInterfaceFieldset
                            }),
                            $nextBtn = $('#' + _namespace + '_nextBtn');

                        // show context panel
                        _panels.modal.showContext();

                        $header.empty();

                        $body
                            .empty()
                            .append(bodyHeader)
                            .append(content);

                        $context
                            .empty()
                            .append(context);

                        $nextBtn.show();

                        _bindUI.contextItems();
                        _bindUI.headerItems();
                        _bindUI.formFields();

                        // If the language got defaulted then we need to highlight the newly select language
                        if (_view.tab_consent_preferences.missingLanguageDefaulted){
                            $('#tab_consent_preferences_listLanguages').find('.js-item-language').removeClass('selected');
                            $('#tab_consent_preferences_llist_'+_selectedLanguage).addClass('selected');
                        }

                        // Need to prevent double scrollbars on the sidebar
                        $('.sidebar-container').css('overflow','hidden');

                        // Set values from _saveObj
                        for (var i in userInterfaceFieldset) {
                            var val = _saveObj[_selectedSection].languages[_selectedLanguage].common_tokens[i],
                                fieldType = userInterfaceFieldset[i].fieldType;
                            if (val) {
                                if (fieldType !== 'checkboxGroup') {
                                    $body.find('#tab_consent_preferences_' + i).val(val);
                                } else {
                                    for ( var j = 0; j < val.length; j++) {
                                        $body.find('[name="tab_consent_preferences_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
                                    }
                                }
                            }
                        }

                        // Set categories name/notes....
                        for (var i in categoryFieldset) {
                            var parts = i.match(/(.*)_(.*?)$/);//i.split('_');
                            if (parts && parts.length === 3) {
                                var val = (_saveObj[_selectedSection].languages[_selectedLanguage].categories[parts[1]] || {})[parts[2]],
                                    fieldType = categoryFieldset[i].fieldType;
                                if (val) {
                                    if (fieldType !== 'checkboxGroup') {
                                        $body.find('#tab_consent_preferences_' + i).val(val);
                                    } else {
                                        for ( var j = 0; j < val.length; j++) {
                                            $body.find('[name="tab_consent_preferences_' + i + '"][value="' + val[j] + '"]').prop('checked', true);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };

            //----------------------------------------------------------------------------------------------------------------
            var _view = {
                //----------------------------------------------------------------------------------------------------------------
                modal: {
                    //----------------------------------------------------------------------------------------------------------------
                    contentHeader: function () {
                        var v = '';

                        v += '<div id="tab_explicit_consent" class="wizard_tab activeTab activeTabLast">';
                        v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.account_defaults.explicit_consent_prompt') + '</h2>';
                        v += '</div>';

                        v += '<div id="tab_consent_preferences" class="wizard_tab activeTabLast">';
                        v += '  <h2>' + localize.t('tiq.dashboard.privacy_management.account_defaults.consent_preferences_dialog') + '</h2>';
                        v += '</div>';

                        return v;
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                tab_explicit_consent: {
                    //----------------------------------------------------------------------------------------------------------------
                    contextTitle: function () {
                        var v = '';

                        v += '<div class="wizard-context-title">' + localize.t('tiq.dashboard.privacy_management.account_defaults.language');
                        v += '<a href="#" id="' + _namespace + '_addLanguageBtn" class="btn i-color-add btn-mini alignright"><i class="icon-plus"></i> ' + localize.t('tiq.dashboard.privacy_management.account_defaults.add') + '</a>';
                        v += '</div>';

                        return v;
                    },

                    //----------------------------------------------------------------------------------------------------------------
                    context: function () {
                        var lang = null;
                        var v = '';

                        v += '<ul class="wizard-context-ul" id="' + _selectedTab + '_listLanguages">';
                        // loop thru assigned languages
                        if (_saveObj && _saveObj[_selectedSection].languages) {
                            Object.keys(_saveObj[_selectedSection].languages).sort().forEach(function(langId){
                                lang = _getLanguageObj(langId,_selectedSection);
                                if (lang) {
                                    v += '	<li class="js-item-language' + ((langId === _selectedLanguage) ? ' selected' : '') + '" data-id="' + langId + '" id="tab_explicit_consent_llist_'+langId+'">';
                                    v += '		<a href="#"><span title="' + lang.display_name + '">' + lang.display_name + '</span></a>';
                                    v += '	</li>';
                                }
                            });
                        }
                        v += '</ul>';

                        return v;
                    },

                    //----------------------------------------------------------------------------------------------------------------
                    contentBodyHeader: function () {
                        var language = _getLanguageObj(_selectedLanguage, _selectedSection);

                        // Handle the scenario where the selected language of the previous tab doesn't exist in the current tab
                        if (typeof language === 'undefined'){
                            this.missingLanguageDefaulted = true;
                            _selectedLanguage = _getDefaultLanguage(_saveObj);
                            language = _getLanguageObj(_selectedLanguage, _selectedSection);
                        } else {
                            this.missingLanguageDefaulted = false;
                        }

                        var isDefaultChecked = language.isDefault ? "checked" : "";
                        var isLastLanguage = !_canDeleteLanguage();
                        var v = '';

                        v += '<div style="background-color: #F8F8F8; border-bottom: 1px solid #BBB; padding: 10px;">';
                        v += '	<span class="dialog-content-headline-title js-selected-lang">' + language.display_name + '</span>';
                        v += '	<div class="alignright" style="margin-top: -4px;">';
                        if (isLastLanguage) {
                            v += '<span style="margin-right:15px;margin-top:5px;" class="js-section ui-state-disabled"  data-section="default_language"><input type="checkbox" '+isDefaultChecked+' disabled id="'+_namespace+'_setIsDefaultLanguageCkbx" name="setIsDefaultLanguageCkbx">&nbsp;'+ localize.t('tiq.dashboard.privacy_management.account_defaults.make_default_language') +'</span>';
                            v += '		<a href="#" id="' + _namespace + '_deleteLanguageBtn" class="btn btn-mini i-color-delete ui-state-disabled" title="' + utui.tooltip.privacy_management.delete_language_disabled + '"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>';

                        } else {
                            v += '<span style="margin-right:15px;margin-top:5px;" class="js-section" data-section="default_language"><input type="checkbox" '+isDefaultChecked+' id="'+_namespace+'_setIsDefaultLanguageCkbx" name="setIsDefaultLanguageCkbx">&nbsp;'+ localize.t('tiq.dashboard.privacy_management.account_defaults.make_default_language') +'</span>';
                            v += '		<a href="#" id="' + _namespace + '_deleteLanguageBtn" class="btn btn-mini i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>';
                        }
                        v += '	</div>';
                        v += '</div>';

                        return v;
                    },

                    //----------------------------------------------------------------------------------------------------------------
                    contentBody: function (options) {
                        var userInterfaceFieldsetCollection = utui.ui.template.form.fieldsetCollectionView(options.userInterfaceFieldset, options.slug, true);
                        var v = '';

                        v += ' <div class="dialog-message dialog-error privacy_account_preferences_dialog_error" style="display: none;"></div>'
                        v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control selected js-user-interface-parameters-control">' + localize.t('tiq.dashboard.privacy_management.account_defaults.user_interface_parameters') + '</div></div></div></h2>';
                        v += '<div class="section-padded-top-bottom js-section js-user-interface-parameters" data-section="tokens">';
                        v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
                        v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(userInterfaceFieldsetCollection), false, false);
                        v += '	</div></div></div>';
                        v += '</div>';

                        v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control js-custom-parameters-control selected">' + localize.t('tiq.dashboard.privacy_management.account_defaults.custom_parameters') + '</div></div></div></h2>';
                        v += '<div class="section-padded-top-bottom js-section js-custom-parameters" data-section="custom_tokens">';
                        v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
                        v += _view.customParametersContentBody();
                        v += '	</div></div></div>';
                        v += '</div>';

                        return v;
                    }
                },

                //----------------------------------------------------------------------------------------------------------------
                // Consent preferences tab content building logic
                //----------------------------------------------------------------------------------------------------------------
                tab_consent_preferences: {
                    contextTitle: function () {
                        var v = '';

                        v += '<div class="wizard-context-title">' + localize.t('tiq.dashboard.privacy_management.account_defaults.language');
                        v += '<a href="#" id="' + _namespace + '_addLanguageBtn" class="btn i-color-add btn-mini alignright"><i class="icon-plus"></i> ' + localize.t('tiq.dashboard.privacy_management.account_defaults.add') + '</a>';
                        v += '</div>';

                        return v;
                    },

                    //----------------------------------------------------------------------------------------------------------------
                    // Builds a list of languages in the left panel that the user can select which language to configure for.
                    //----------------------------------------------------------------------------------------------------------------
                    context: function () {
                        var lang = null;
                        var v = '';

                        v += '<ul class="wizard-context-ul" id="' + _selectedTab + '_listLanguages">';
                        // loop thru assigned languages
                        if (_saveObj && _saveObj[_selectedSection].languages) {
                            Object.keys(_saveObj[_selectedSection].languages).sort().forEach(function(langId){
                                lang = _getLanguageObj(langId,_selectedSection);
                                if (lang) {
                                    v += '	<li class="js-item-language' + ((langId === _selectedLanguage) ? ' selected' : '') + '" data-id="' + langId + '" id="tab_consent_preferences_llist_'+langId+'">';
                                    v += '		<a href="#"><span title="' + lang.display_name + '">' + lang.display_name + '</span></a>';
                                    v += '	</li>';
                                }
                            });
                        }
                        v += '</ul>';

                        return v;
                    },

                    //----------------------------------------------------------------------------------------------------------------
                    contentBodyHeader: function () {
                        var language = _getLanguageObj(_selectedLanguage,_selectedSection);

                        // Handle the scenario where the selected language of the previous tab doesn't exist in the current tab
                        if (typeof language === 'undefined'){
                            this.missingLanguageDefaulted = true;
                            _selectedLanguage = _getDefaultLanguage(_saveObj);
                            language = _getLanguageObj(_selectedLanguage, _selectedSection);
                        } else {
                            this.missingLanguageDefaulted = false;
                        }

                        var isDefaultChecked = language.isDefault ? "checked" : "";
                        var isLastLanguage = !_canDeleteLanguage();
                        var v = '';

                        v += '<div style="background-color: #F8F8F8; border-bottom: 1px solid #BBB; padding: 10px;">';
                        v += '	<span class="dialog-content-headline-title js-selected-lang">' + language.display_name + '</span>';
                        v += '	<div class="alignright" style="margin-top: -4px;">';
                        if (isLastLanguage) {
                            v += '<span style="margin-right:15px;margin-top:5px;" class="js-section ui-state-disabled"  data-section="default_language"><input type="checkbox" '+isDefaultChecked+' disabled id="'+_namespace+'_setIsDefaultLanguageCkbx" name="setIsDefaultLanguageCkbx">&nbsp;'+ localize.t('tiq.dashboard.privacy_management.account_defaults.make_default_language') +'</span>';
                            v += '		<a href="#" id="' + _namespace + '_deleteLanguageBtn" class="btn btn-mini i-color-delete ui-state-disabled" title="' + utui.tooltip.privacy_management.delete_language_disabled + '"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>';
                        } else {
                            v += '<span style="margin-right:15px;margin-top:5px;" class="js-section" data-section="default_language"><input type="checkbox" '+isDefaultChecked+' id="'+_namespace+'_setIsDefaultLanguageCkbx" name="setIsDefaultLanguageCkbx">&nbsp;'+ localize.t('tiq.dashboard.privacy_management.account_defaults.make_default_language') +'</span>';
                            v += '		<a href="#" id="' + _namespace + '_deleteLanguageBtn" class="btn btn-mini i-color-delete"><i class="icon-trash"></i> ' + localize.t('tiq.profile.delete') + '</a>';
                        }
                        v += '	</div>';
                        v += '</div>';

                        return v;
                    },

                    //----------------------------------------------------------------------------------------------------------------
                    //----------------------------------------------------------------------------------------------------------------
                    contentBody: function (options) {
                        var userInterfaceFieldsetCollection = utui.ui.template.form.fieldsetCollectionView(options.userInterfaceFieldset, options.slug, true);
                        var categoryFieldsetCollection = utui.ui.template.form.fieldsetCollectionView(options.categoryFieldset, options.slug, true);
                        var v = '';

                        v += '  <div class="dialog-message dialog-error privacy_account_preferences_dialog_error" style="display: none;"></div>'
                        v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control selected js-user-interface-parameters-control">' + localize.t('tiq.dashboard.privacy_management.account_defaults.user_interface_parameters') + '</div></div></div></h2>';
                        v += '<div class="section-padded-top-bottom js-section js-user-interface-parameters" data-section="tokens">';
                        v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
                        v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(userInterfaceFieldsetCollection), false, false);
                        v += '	</div></div></div>';
                        v += '</div>';

                        v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control js-custom-parameters-control selected">' + localize.t('tiq.dashboard.privacy_management.account_defaults.custom_parameters') + '</div></div></div></h2>';
                        v += '<div class="section-padded-top-bottom js-section js-custom-parameters" data-section="custom_tokens">';
                        v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
                        v += _view.customParametersContentBody();
                        v += '	</div></div></div>';
                        v += '</div>';
                        
                        v += '<h2><div class="container-fluid valign-container"><div class="row-fluid"><div class="span12 collapsible-control js-category-parameters-control">' + localize.t('tiq.dashboard.privacy_management.account_defaults.category_parameters') + '</div></div></div></h2>';
                        v += '<div class="section-padded-top-bottom js-section js-category-parameters hidden" data-section="categories">';
                        v += '	<div class="container-fluid"><div class="row-fluid"><div class="span12">';
                        v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(categoryFieldsetCollection), false, false);
                        v += '	</div></div></div>';
                        v += '</div>';

                        return v;
                    }
                },
                //----------------------------------------------------------------------------------------------------------------
                // Common function to build custom parameters block - used by both panels
                //----------------------------------------------------------------------------------------------------------------
                customParametersContentBody : function(){
                    // Handle the case where a language doesn't exist in a tab
                    if (typeof _saveObj[_selectedSection].languages[_selectedLanguage] === 'undefined') {
                        _selectedLanguage = _getDefaultLanguage(_saveObj);
                    }
                    var v = '';
                    v += '<div class="container-fluid global_consent-customParameters"><div class="row-fluid">';
                    v += '<div class="span12">' + localize.t('tiq.dashboard.privacy_management.account_defaults.learn_more_cust_params') + '</div>';

                    _.each(_saveObj[_selectedSection].custom_tokens_definitions,function(obj){
                        // Fix the DM if the save dropped empty objects
                        _saveObj[_selectedSection].languages[_selectedLanguage].custom_tokens = _saveObj[_selectedSection].languages[_selectedLanguage].custom_tokens || {};
                        if (typeof _saveObj[_selectedSection].languages[_selectedLanguage].custom_tokens[obj.token] === 'undefined'){
                            _saveObj[_selectedSection].languages[_selectedLanguage].custom_tokens[obj.token] = "";
                        }
                        var hvrTitleTxt = '',
                            dspTitleTxt = obj.title,
                            hvrTokenTxt = '',
                            dspTokenTxt = '{{' + obj.token + '}}';
                            
                        if (obj.title.length > 25){
                            hvrTitleTxt = ' title="' +obj.title + '" ';
                            dspTitleTxt = obj.title.substring(0,25) + '...';
                        }
                        if (obj.token.length > 20){
                            hvrTokenTxt = ' title="' +obj.token + '" ';
                            dspTokenTxt = '{{' + obj.token.substring(0,20) + '...';
                        }
                        
                        v += '<div class="span12" id="cpRow-' + _selectedSection + '-'+ obj.token + '">';
                            v += '<span class="span3" style="padding-top:5px" '+hvrTitleTxt+'>'+dspTitleTxt+'</span>';
                            v += '<span class="span5">';
                                var cpVal = _saveObj[_selectedSection].languages[_selectedLanguage].custom_tokens[obj.token];
                                v += '<input type="text" id="cp-' + _selectedSection + '-input-'+obj.token+'" class="js-custom-parameters-value-input" value="'+cpVal+'">';
                            v += '</span>';
                            v += '<span class="span4">';
                                v += '<a href="#" id="cp-'+_selectedSection+'-delete-'+obj.token+'" class="btn btn-mini i-color-delete js-custom-parameters-delete"><i class="icon-trash"></i></a>';
                                v += '<span '+hvrTokenTxt+'>&nbsp;&nbsp;' + dspTokenTxt + '</span>';
                            v += '</span>';
                        v += '</div>';
                    });

                    v += '<div style="margin-top:10px;"><a href="#" id="'+_namespace+'_addNewCustomParameterBtn" class="btn btn-mini i-color-copy js-add-custom-parameters_button"><i class="icon-plus"></i> ' + localize.t('tiq.dashboard.privacy_management.account_defaults.add_parameter') + '</a></div>';
                    v += '</div></div>';

                    return v;

                }

            };

            //----------------------------------------------------------------------------------------------------------------
            var _render = {
                // Future code for QA # 10
                // scrollToSelectedLang: function(){
                //     function getCssHeight(jqObj){
                //         return parseInt(jqObj.css('height').replace('px', ''));
                //     }
                //     if (_saveObj[_selectedSection].languages.length > 16){
                //         // JS for sorting the languages and animating the scroll - to be used later
                //         // _.each(_.sortBy(_saveObj[_selectedSection].languages,' display_name'),function(v,k){console.dir(v);})
                //         //
                //         // var hj = $('#tab_explicit_consent_listLanguages')
                //         // hj.animate({scrollTop:200})
                //
                //     }
                //
                // },
                
                //----------------------------------------------------------------------------------------------------------------
                ui: function () {
                    $modalDialog.find('.modal-header').html(_view.modal.contentHeader());
                    $modalDialog.find('.modal-body').html(_templateAccordion);

                    _bindUI.topNavMenu();

                    // Render 1st panel into DOM
                    _selectedLanguage = _getDefaultLanguage(_saveObj);
                    _panels.tab_explicit_consent.render();

                    // Dialog adjustments
                    utui.ui.dialog.adjustPanelHeights(_namespace);
                },

                //----------------------------------------------------------------------------------------------------------------
                showErrorMessage: function (content) {
                    
                    _render.hideValidationMessage();
                    $modalDialog.find('.privacy_account_preferences_dialog_error').append(content).css('display','block');

                    // Dialog adjustments
                    utui.ui.dialog.adjustPanelHeights(_namespace);
                },

                //----------------------------------------------------------------------------------------------------------------
                hideValidationMessage: function () {
                    $modalDialog.find('.privacy_account_preferences_dialog_error').empty().css('display','none');
                }
            };

            //----------------------------------------------------------------------------------------------------------------
            // Validate the account defaults data model. Returns a list of error strings.
            //----------------------------------------------------------------------------------------------------------------
            function _getValidationErrors() {
                var errorList = [];

                // Currently unused for now - but leaving in place for any validation that will likely be required in future
                return errorList;
            }

            //----------------------------------------------------------------------------------------------------------------
            // Main dialog buttons with event handling.
            //----------------------------------------------------------------------------------------------------------------
            var buttons = [
                    {
                        text: localize.t('tiq.dialog.button.apply'),
                        click: function () {
                            var validationErrors = _getValidationErrors();
                            if (validationErrors.length) {
                                var errContent = "";
                                validationErrors.forEach(function(eMsg){
                                    errContent += eMsg + "<br>";
                                });
                                _render.showErrorMessage(errContent);
                            } else {
                                _urestHandler.putCurrentAccountPrivacyDefaults(_saveObj,_eventHandlers.onBtnCancelClick,_render.showErrorMessage);
                            }
                        },
                        id: _namespace + '_applyBtn'
                    },
                    {
                        text: localize.t('tiq.dialog.button.cancel'),
                        click: _eventHandlers.onBtnCancelClick,
                        id: _namespace + '_cancelBtn',
                        style: 'float:left; margin-left: 12px'
                    }
                ],
                title = localize.t('tiq.dashboard.privacy_management.account_defaults.global_consent_customization');

            //----------------------------------------------------------------------------------------------------------------
            // Get the most recent copy of the account privacy defaults and render the modal
            //----------------------------------------------------------------------------------------------------------------
            _urestHandler.getCurrentAccountPrivacyDefaults(_eventHandlers.onAccountPrivacyDefaultsLoad);


        },
        //--------------------------------------------------------------------------------------------------------------------
        removeLanguageConfirmDialog: function () {
            // Private API
            var _namespace = 'confirmDeleteLanguage';

            //----------------------------------------------------------------------------------------------------------------
            function _view(languageName) {
                var v = '';
                v += '<div id="' + _namespace + '_description">';
                v += '<div class="ui-state-error ui-corner-all padded admin_error"></div>';
                v += '    <div class="dialog-icon-container">';
                v += '        <i class="icon-warning-sign" style="color:orange;"></i>';
                v += '    </div>';
                v += '    <div class="dialog-description">';
                v += '        <p><strong>' + localize.t('tiq.dashboard.privacy_management.account_defaults.are_you_sure_remove_language', {name: languageName}) + '</strong></p>';
                v += '        <p>' + localize.t('tiq.dashboard.privacy_management.account_defaults.this_operation_cannot_be_undone') + '</p>';
                v += '    </div>';
                v += '</div>';
                return v;
            }

            //----------------------------------------------------------------------------------------------------------------
            function _disposeDialog() {
                $('#' + _namespace + '_dialog').dialog().remove();
            }

            // Public API
            var _public = {
                //--------------------------------------------------------------------------------------------------------------------------------
                show: function (languageName, callback) {
                    // Add the dialog to the DOM if not already there
                    var content = _view(languageName);
                    var title = localize.t('tiq.dashboard.privacy_management.account_defaults.remove_language');

                    if ($('#' + _namespace + '_dialog').length == 0) {
                        $('<div />', { id: _namespace + '_dialog' }).prependTo('body');
                        $('<div />', { id: _namespace + '_dialogContent' }).appendTo('#' + _namespace + '_dialog');
                    }

                    $('#' + _namespace + '_dialogContent').html(content);


                    $("#" + _namespace + '_dialog').dialog({
                        title: title,
                        height: 'auto',
                        width: 'auto',
                        modal: true,
                        closeOnEscape: false,
                        resizable: false,
                        autoOpen: true,
                        draggable: false,
                        position: ['center', 'center'],
                        buttons: [
                            {
                                text: title,
                                id: 'confirmRemoveLanguage_dialog_removeBtn',
                                click: function () {
                                    if (callback) {
                                        callback(); // onConfirmDeleteLanguageBtnClick
                                    }
                                    _disposeDialog();
                                }
                            },
                            {
                                text: localize.t('tiq.dialog.button.cancel'),
                                id: 'confirmRemoveLanguage_dialog_cancelBtn',
                                click: _disposeDialog,
                                style: 'float:left; margin-left: 12px'
                            }
                        ]
                    }).on('dialogclose', _disposeDialog);
                }
            };

            return _public;
        }(),
        //--------------------------------------------------------------------------------------------------------------------
        addNewCustomParameterDialog : function() {
            // Private API
            var _namespace = 'addNewCustomParameter';

            //----------------------------------------------------------------------------------------------------------------
            function _view() {
                var fieldset = {
                    title: {
                        fieldType: 'text',
                        label: localize.t('tiq.dashboard.privacy_management.account_defaults.title'),
                        size: '40'
                    }
                };
                var v = '';
                var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, 'dialog_new_custom_parameter', true);
                v += '<div style="width:410px;">';
                v += '<div id="addNewCustomParameter_error" class="dialog-message dialog-error" style="display: none;"></div>'
                v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
                v += '</div>';
                return v;
            }

            //----------------------------------------------------------------------------------------------------------------
            function _disposeDialog() {
                $('#' + _namespace + '_dialog').dialog().remove();
            }

            // Public API
            var _public = {
                //--------------------------------------------------------------------------------------------------------------------------------
                show: function(applyNewParameterCallback) {
                    // Add the dialog to the DOM if not already there
                    var content = _view();
                    var title = localize.t('tiq.dashboard.privacy_management.account_defaults.custom_parameter');

                    if ($('#' + _namespace + '_dialog').length == 0) {
                        $('<div />', {
                            id: _namespace + '_dialog'
                        }).prependTo('body');
                        $('<div />', {
                            id: _namespace + '_dialogContent'
                        }).appendTo('#' + _namespace + '_dialog');
                    }

                    $('#' + _namespace + '_dialogContent').html(content);


                    $("#" + _namespace + '_dialog').dialog({
                        title: title,
                        height: 'auto',
                        width: 'auto',
                        modal: true,
                        closeOnEscape: false,
                        resizable: false,
                        autoOpen: true,
                        draggable: false,
                        position: ['center', 'center'],
                        buttons: [{
                            text: localize.t('tiq.dialog.button.apply'),
                            id: 'addCustomParam_dialog_applyBtn',
                            click: function() {
                                var errMsg = applyNewParameterCallback();
                                if (errMsg) {
                                    $('#' + _namespace + '_error').empty().append(errMsg);
                                } else {
                                    _disposeDialog();
                                }
                            }
                        },
                            {
                                text: localize.t('tiq.dialog.button.cancel'),
                                id: 'addCustomParam_dialog_cancelBtn',
                                click: _disposeDialog,
                                style: 'float:left; margin-left: 12px'
                            }
                        ]
                    }).on('dialogclose', _disposeDialog);
                }
            };

            return _public;
        }(),
        //--------------------------------------------------------------------------------------------------------------------
        addNewLanguageDialog : function() {
            // Private API
            var _namespace = 'addNewLanguageDialog',
                _langLookup = {};

            //----------------------------------------------------------------------------------------------------------------
            function _view(excludedLanguages) {
                var fieldset = {
                    language: {
                        fieldType: 'select',
                        label: localize.t('tiq.dashboard.privacy_management.account_defaults.language'),
                        select2placeholder : localize.t('tiq.dashboard.privacy_management.account_defaults.select_language'),
                        fieldOptions: _getLanguageOptionList(excludedLanguages)
                    }
                };
                var v = '';
                var fieldsetCollection = utui.ui.template.form.fieldsetCollectionView(fieldset, 'dialog_new_language', true);
                v += '<div style="width:410px;">';
                v += utui.ui.template.compositeView('', utui.ui.template.form.rowCollectionView(fieldsetCollection), false, false);
                v += '<div id="'+_namespace+'_error" class="ui-state-error ui-corner-all padded admin_error" style="padding:5px;">'+localize.t('tiq.dashboard.privacy_management.account_defaults.parameter_already_exists')+'</div>';
                v += '</div>';
                return v;
            }

            //----------------------------------------------------------------------------------------------------------------
            function _disposeDialog() {
                $('#' + _namespace + '_dialog').dialog().remove();
            }

            function _getLanguageOptionList(excludedLanguages){
                var allLanguages = [
                    {
                        "label": "Abkhazian (ab)",
                        "value": "ab"
                    }, {
                        "label": "Afar (aa)",
                        "value": "aa"
                    }, {
                        "label": "Afrikaans (af)",
                        "value": "af"
                    }, {
                        "label": "Akan (ak)",
                        "value": "ak"
                    }, {
                        "label": "Albanian (sq)",
                        "value": "sq"
                    }, {
                        "label": "Amharic (am)",
                        "value": "am"
                    }, {
                        "label": "Arabic (ar)",
                        "value": "ar"
                    }, {
                        "label": "Aragonese (an)",
                        "value": "an"
                    }, {
                        "label": "Armenian (hy)",
                        "value": "hy"
                    }, {
                        "label": "Assamese (as)",
                        "value": "as"
                    }, {
                        "label": "Avaric (av)",
                        "value": "av"
                    }, {
                        "label": "Avestan (ae)",
                        "value": "ae"
                    }, {
                        "label": "Aymara (ay)",
                        "value": "ay"
                    }, {
                        "label": "Azerbaijani (az)",
                        "value": "az"
                    }, {
                        "label": "Bambara (bm)",
                        "value": "bm"
                    }, {
                        "label": "Bashkir (ba)",
                        "value": "ba"
                    }, {
                        "label": "Basque (eu)",
                        "value": "eu"
                    }, {
                        "label": "Belarusian (be)",
                        "value": "be"
                    }, {
                        "label": "Bengali (Bangla) (bn)",
                        "value": "bn"
                    }, {
                        "label": "Bihari (bh)",
                        "value": "bh"
                    }, {
                        "label": "Bislama (bi)",
                        "value": "bi"
                    }, {
                        "label": "Bosnian (bs)",
                        "value": "bs"
                    }, {
                        "label": "Breton (br)",
                        "value": "br"
                    }, {
                        "label": "Bulgarian (bg)",
                        "value": "bg"
                    }, {
                        "label": "Burmese (my)",
                        "value": "my"
                    }, {
                        "label": "Catalan (ca)",
                        "value": "ca"
                    }, {
                        "label": "Chamorro (ch)",
                        "value": "ch"
                    }, {
                        "label": "Chechen (ce)",
                        "value": "ce"
                    }, {
                        "label": "Chichewa, Chewa, Nyanja (ny)",
                        "value": "ny"
                    }, {
                        "label": "Chinese (zh)",
                        "value": "zh"
                    }, {
                        "label": "Chinese (Simplified) (zh)",
                        "value": "zh"
                    }, {
                        "label": "Chinese (Traditional) (zh)",
                        "value": "zh"
                    }, {
                        "label": "Chuvash (cv)",
                        "value": "cv"
                    }, {
                        "label": "Cornish (kw)",
                        "value": "kw"
                    }, {
                        "label": "Corsican (co)",
                        "value": "co"
                    }, {
                        "label": "Cree (cr)",
                        "value": "cr"
                    }, {
                        "label": "Croatian (hr)",
                        "value": "hr"
                    }, {
                        "label": "Czech (cs)",
                        "value": "cs"
                    }, {
                        "label": "Danish (da)",
                        "value": "da"
                    }, {
                        "label": "Divehi, Dhivehi, Maldivian (dv)",
                        "value": "dv"
                    }, {
                        "label": "Dutch (nl)",
                        "value": "nl"
                    }, {
                        "label": "Dzongkha (dz)",
                        "value": "dz"
                    }, {
                        "label": "English (en)",
                        "value": "en"
                    }, {
                        "label": "Esperanto (eo)",
                        "value": "eo"
                    }, {
                        "label": "Estonian (et)",
                        "value": "et"
                    }, {
                        "label": "Ewe (ee)",
                        "value": "ee"
                    }, {
                        "label": "Faroese (fo)",
                        "value": "fo"
                    }, {
                        "label": "Fijian (fj)",
                        "value": "fj"
                    }, {
                        "label": "Finnish (fi)",
                        "value": "fi"
                    }, {
                        "label": "French (fr)",
                        "value": "fr"
                    }, {
                        "label": "Fula, Fulah, Pulaar, Pular (ff)",
                        "value": "ff"
                    }, {
                        "label": "Galician (gl)",
                        "value": "gl"
                    }, {
                        "label": "Gaelic (Scottish) (gd)",
                        "value": "gd"
                    }, {
                        "label": "Gaelic (Manx) (gv)",
                        "value": "gv"
                    }, {
                        "label": "Georgian (ka)",
                        "value": "ka"
                    }, {
                        "label": "German (de)",
                        "value": "de"
                    }, {
                        "label": "Greek (el)",
                        "value": "el"
                    }, {
                        "label": "Greenlandic (kl)",
                        "value": "kl"
                    }, {
                        "label": "Guarani (gn)",
                        "value": "gn"
                    }, {
                        "label": "Gujarati (gu)",
                        "value": "gu"
                    }, {
                        "label": "Haitian Creole (ht)",
                        "value": "ht"
                    }, {
                        "label": "Hausa (ha)",
                        "value": "ha"
                    }, {
                        "label": "Hebrew (he)",
                        "value": "he"
                    }, {
                        "label": "Herero (hz)",
                        "value": "hz"
                    }, {
                        "label": "Hindi (hi)",
                        "value": "hi"
                    }, {
                        "label": "Hiri Motu (ho)",
                        "value": "ho"
                    }, {
                        "label": "Hungarian (hu)",
                        "value": "hu"
                    }, {
                        "label": "Icelandic (is)",
                        "value": "is"
                    }, {
                        "label": "Ido (io)",
                        "value": "io"
                    }, {
                        "label": "Igbo (ig)",
                        "value": "ig"
                    }, {
                        "label": "Indonesian (id)",
                        "value": "id"
                    }, {
                        "label": "Interlingua (ia)",
                        "value": "ia"
                    }, {
                        "label": "Interlingue (ie)",
                        "value": "ie"
                    }, {
                        "label": "Inuktitut (iu)",
                        "value": "iu"
                    }, {
                        "label": "Inupiak (ik)",
                        "value": "ik"
                    }, {
                        "label": "Irish (ga)",
                        "value": "ga"
                    }, {
                        "label": "Italian (it)",
                        "value": "it"
                    }, {
                        "label": "Japanese (ja)",
                        "value": "ja"
                    }, {
                        "label": "Javanese (jv)",
                        "value": "jv"
                    }, {
                        "label": "Kalaallisut, Greenlandic (kl)",
                        "value": "kl"
                    }, {
                        "label": "Kannada (kn)",
                        "value": "kn"
                    }, {
                        "label": "Kanuri (kr)",
                        "value": "kr"
                    }, {
                        "label": "Kashmiri (ks)",
                        "value": "ks"
                    }, {
                        "label": "Kazakh (kk)",
                        "value": "kk"
                    }, {
                        "label": "Khmer (km)",
                        "value": "km"
                    }, {
                        "label": "Kikuyu (ki)",
                        "value": "ki"
                    }, {
                        "label": "Kinyarwanda (Rwanda) (rw)",
                        "value": "rw"
                    }, {
                        "label": "Kirundi (rn)",
                        "value": "rn"
                    }, {
                        "label": "Kyrgyz (ky)",
                        "value": "ky"
                    }, {
                        "label": "Komi (kv)",
                        "value": "kv"
                    }, {
                        "label": "Kongo (kg)",
                        "value": "kg"
                    }, {
                        "label": "Korean (ko)",
                        "value": "ko"
                    }, {
                        "label": "Kurdish (ku)",
                        "value": "ku"
                    }, {
                        "label": "Kwanyama (kj)",
                        "value": "kj"
                    }, {
                        "label": "Lao (lo)",
                        "value": "lo"
                    }, {
                        "label": "Latin (la)",
                        "value": "la"
                    }, {
                        "label": "Latvian (Lettish) (lv)",
                        "value": "lv"
                    }, {
                        "label": "Limburgish ( Limburger) (li)",
                        "value": "li"
                    }, {
                        "label": "Lingala (ln)",
                        "value": "ln"
                    }, {
                        "label": "Lithuanian (lt)",
                        "value": "lt"
                    }, {
                        "label": "Luga-Katanga (lu)",
                        "value": "lu"
                    }, {
                        "label": "Luganda, Ganda (lg)",
                        "value": "lg"
                    }, {
                        "label": "Luxembourgish (lb)",
                        "value": "lb"
                    }, {
                        "label": "Manx (gv)",
                        "value": "gv"
                    }, {
                        "label": "Macedonian (mk)",
                        "value": "mk"
                    }, {
                        "label": "Malagasy (mg)",
                        "value": "mg"
                    }, {
                        "label": "Malay (ms)",
                        "value": "ms"
                    }, {
                        "label": "Malayalam (ml)",
                        "value": "ml"
                    }, {
                        "label": "Maltese (mt)",
                        "value": "mt"
                    }, {
                        "label": "Maori (mi)",
                        "value": "mi"
                    }, {
                        "label": "Marathi (mr)",
                        "value": "mr"
                    }, {
                        "label": "Marshallese (mh)",
                        "value": "mh"
                    }, {
                        "label": "Moldavian (mo)",
                        "value": "mo"
                    }, {
                        "label": "Mongolian (mn)",
                        "value": "mn"
                    }, {
                        "label": "Nauru (na)",
                        "value": "na"
                    }, {
                        "label": "Navajo (nv)",
                        "value": "nv"
                    }, {
                        "label": "Ndonga (ng)",
                        "value": "ng"
                    }, {
                        "label": "Northern Ndebele (nd)",
                        "value": "nd"
                    }, {
                        "label": "Nepali (ne)",
                        "value": "ne"
                    }, {
                        "label": "Norwegian (no)",
                        "value": "no"
                    }, {
                        "label": "Norwegian bokmål (nb)",
                        "value": "nb"
                    }, {
                        "label": "Norwegian nynorsk (nn)",
                        "value": "nn"
                    }, {
                        "label": "Nuosu (ii)",
                        "value": "ii"
                    }, {
                        "label": "Occitan (oc)",
                        "value": "oc"
                    }, {
                        "label": "Ojibwe (oj)",
                        "value": "oj"
                    }, {
                        "label": "Old Church Slavonic, Old Bulgarian (cu)",
                        "value": "cu"
                    }, {
                        "label": "Oriya (or)",
                        "value": "or"
                    }, {
                        "label": "Oromo (Afaan Oromo) (om)",
                        "value": "om"
                    }, {
                        "label": "Ossetian (os)",
                        "value": "os"
                    }, {
                        "label": "Pāli (pi)",
                        "value": "pi"
                    }, {
                        "label": "Pashto, Pushto (ps)",
                        "value": "ps"
                    }, {
                        "label": "Persian (Farsi) (fa)",
                        "value": "fa"
                    }, {
                        "label": "Polish (pl)",
                        "value": "pl"
                    }, {
                        "label": "Portuguese (pt)",
                        "value": "pt"
                    }, {
                        "label": "Punjabi (Eastern) (pa)",
                        "value": "pa"
                    }, {
                        "label": "Quechua (qu)",
                        "value": "qu"
                    }, {
                        "label": "Romansh (rm)",
                        "value": "rm"
                    }, {
                        "label": "Romanian (ro)",
                        "value": "ro"
                    }, {
                        "label": "Russian (ru)",
                        "value": "ru"
                    }, {
                        "label": "Sami (se)",
                        "value": "se"
                    }, {
                        "label": "Samoan (sm)",
                        "value": "sm"
                    }, {
                        "label": "Sango (sg)",
                        "value": "sg"
                    }, {
                        "label": "Sanskrit (sa)",
                        "value": "sa"
                    }, {
                        "label": "Serbian (sr)",
                        "value": "sr"
                    }, {
                        "label": "Serbo-Croatian (sh)",
                        "value": "sh"
                    }, {
                        "label": "Sesotho (st)",
                        "value": "st"
                    }, {
                        "label": "Setswana (tn)",
                        "value": "tn"
                    }, {
                        "label": "Shona (sn)",
                        "value": "sn"
                    }, {
                        "label": "Sichuan Yi (ii)",
                        "value": "ii"
                    }, {
                        "label": "Sindhi (sd)",
                        "value": "sd"
                    }, {
                        "label": "Sinhalese (si)",
                        "value": "si"
                    }, {
                        "label": "Siswati (ss)",
                        "value": "ss"
                    }, {
                        "label": "Slovak (sk)",
                        "value": "sk"
                    }, {
                        "label": "Slovenian (sl)",
                        "value": "sl"
                    }, {
                        "label": "Somali (so)",
                        "value": "so"
                    }, {
                        "label": "Southern Ndebele (nr)",
                        "value": "nr"
                    }, {
                        "label": "Spanish (es)",
                        "value": "es"
                    }, {
                        "label": "Sundanese (su)",
                        "value": "su"
                    }, {
                        "label": "Swahili (Kiswahili) (sw)",
                        "value": "sw"
                    }, {
                        "label": "Swati (ss)",
                        "value": "ss"
                    }, {
                        "label": "Swedish (sv)",
                        "value": "sv"
                    }, {
                        "label": "Tagalog (tl)",
                        "value": "tl"
                    }, {
                        "label": "Tahitian (ty)",
                        "value": "ty"
                    }, {
                        "label": "Tajik (tg)",
                        "value": "tg"
                    }, {
                        "label": "Tamil (ta)",
                        "value": "ta"
                    }, {
                        "label": "Tatar (tt)",
                        "value": "tt"
                    }, {
                        "label": "Telugu (te)",
                        "value": "te"
                    }, {
                        "label": "Thai (th)",
                        "value": "th"
                    }, {
                        "label": "Tibetan (bo)",
                        "value": "bo"
                    }, {
                        "label": "Tigrinya (ti)",
                        "value": "ti"
                    }, {
                        "label": "Tonga (to)",
                        "value": "to"
                    }, {
                        "label": "Tsonga (ts)",
                        "value": "ts"
                    }, {
                        "label": "Turkish (tr)",
                        "value": "tr"
                    }, {
                        "label": "Turkmen (tk)",
                        "value": "tk"
                    }, {
                        "label": "Twi (tw)",
                        "value": "tw"
                    }, {
                        "label": "Uyghur (ug)",
                        "value": "ug"
                    }, {
                        "label": "Ukrainian (uk)",
                        "value": "uk"
                    }, {
                        "label": "Urdu (ur)",
                        "value": "ur"
                    }, {
                        "label": "Uzbek (uz)",
                        "value": "uz"
                    }, {
                        "label": "Venda (ve)",
                        "value": "ve"
                    }, {
                        "label": "Vietnamese (vi)",
                        "value": "vi"
                    }, {
                        "label": "Volapük (vo)",
                        "value": "vo"
                    }, {
                        "label": "Wallon (wa)",
                        "value": "wa"
                    }, {
                        "label": "Welsh (cy)",
                        "value": "cy"
                    }, {
                        "label": "Wolof (wo)",
                        "value": "wo"
                    }, {
                        "label": "Western Frisian (fy)",
                        "value": "fy"
                    }, {
                        "label": "Xhosa (xh)",
                        "value": "xh"
                    }, {
                        "label": "Yiddish (yi)",
                        "value": "yi"
                    }, {
                        "label": "Yoruba (yo)",
                        "value": "yo"
                    }, {
                        "label": "Zhuang, Chuang (za)",
                        "value": "za"
                    }, {
                        "label": "Zulu (zu)",
                        "value": "zu"
                    }
                ];
                var newLanguages = [];
                var excList = excludedLanguages.join(",");

                allLanguages.forEach(function(langObj){
                    _langLookup[langObj.value] = langObj.label;
                    if (excList.indexOf(langObj.value) === -1){
                        newLanguages.push(langObj);
                    }
                });

                return newLanguages;
            }

            // Public API
            var _public = {
                //--------------------------------------------------------------------------------------------------------------------------------
                show: function(callback,excludedLanguages) {
                    // Add the dialog to the DOM if not already there
                    var content = _view(excludedLanguages);
                    var title = localize.t('tiq.dashboard.privacy_management.account_defaults.custom_parameter');

                    if ($('#' + _namespace + '_dialog').length == 0) {
                        $('<div />', {
                            id: _namespace + '_dialog'
                        }).prependTo('body');
                        $('<div />', {
                            id: _namespace + '_dialogContent'
                        }).appendTo('#' + _namespace + '_dialog');
                    }

                    $('#' + _namespace + '_dialogContent').html(content);
                    utui.ui.convertSelectListToSelect2('dialog_new_language_language');

                    $("#" + _namespace + '_dialog').dialog({
                        title: title,
                        height: 'auto',
                        width: 'auto',
                        modal: true,
                        closeOnEscape: false,
                        resizable: false,
                        autoOpen: true,
                        draggable: false,
                        position: ['center', 'center'],
                        buttons: [{
                            text: localize.t('tiq.dialog.button.apply'),
                            id: 'addCustomParam_dialog_applyBtn',
                            click: function() {
                                var lCode = $('#dialog_new_language_language').val();
                                if (_langLookup[lCode]){
                                    callback(lCode,_langLookup[lCode]); //
                                }
                                _disposeDialog();
                            }
                        },
                            {
                                text: localize.t('tiq.dialog.button.cancel'),
                                id: 'addCustomParam_dialog_cancelBtn',
                                click: _disposeDialog,
                                style: 'float:left; margin-left: 12px'
                            }
                        ]
                    }).on('dialogclose', _disposeDialog);
                }
            };

            return _public;
        }()
    };

    return _public;
}();


try{
	utui.help.initLithiumCommunity();
    utui.dashboard.load();
    utui.define.load();
    utui.loadrules.load();
    utui.manage.load();
    utui.customizations.load();
	utui.account.init();
    utui.publish.load();
    utui.profile.load();
    utui.profile.init();
	utui.tagging.init();
    utui.libsloaded=true;
    utui.util.loadingModalStop();

    utui.util.pubsub.publish(utui.constants.lifecycle.CORE_RESOURCES_LOADED);
}catch(e){
    handleLoadError(e);
};